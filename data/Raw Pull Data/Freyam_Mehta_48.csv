pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
608551309,Added product (alias of prod),"- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`
",True,7517,https://api.github.com/repos/dask/dask/pulls/7517,https://github.com/dask/dask/pull/7517,closed,31,2,2,5,5,0,1,0,[{'name': 'dataframe'}],2021-04-04 14:05:01+00:00,2021-04-05 15:57:11+00:00,93130.0,"1 day, 1:52:10",[],"[{'commit_sha': '68941c5d3ccc93da7f3515fc98d7062716ba5b06', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '360f58010446f790f8a8b7d7db8f459563dd0a7a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85ff5d9406ce1b15414511db1c9c76f95feda3e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed871d05e70553ce34855a4d1cf9907e516e89e8', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84e71a32d103bc5b193ff0525738c386fbc71fa', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
659087810,Fixing calling `.visualize()` with `filename=None`,"- [x] Closes #7685 
- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

## The Issue
The issue arised when the `format` and the `filename` arguments both were `None`. So, 

https://github.com/dask/dask/blob/1a6a85258bccb14fe37bb54c211beeeffd46cd55/dask/dot.py#L276-L278

would result in an error as it's trying to call the `.lower()` function on a `NoneType` filename.

## The Fix
To fix this, I added an extra condition before it reaches the line of error to make sure `format` is not `None` by making it equal to the default (""png"").


## The Demo
![image](https://user-images.githubusercontent.com/62539811/120347731-97944580-c30d-11eb-96e7-9f513e46075d.png)

",True,7740,https://api.github.com/repos/dask/dask/pulls/7740,https://github.com/dask/dask/pull/7740,closed,11,2,2,16,23,19,0,0,[],2021-06-01 15:03:32+00:00,2021-06-08 14:11:00+00:00,601648.0,"6 days, 23:07:28","[{'comment_id': 643218084, 'comment_body': ""Cat it happen that `format` is still `None` here, e.g., a filename was given but didn't match any of the known extensions?"", 'comment_created': datetime.datetime(2021, 6, 1, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 643219567, 'comment_body': 'You could use `monkeypatch` to temporarily change `display_cls`, so that it has an effect you can check from the test function.\r\n\r\nDo you know how to do this?', 'comment_created': datetime.datetime(2021, 6, 1, 15, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 643243216, 'comment_body': ""Oh yes! I shouldn't have deleted the previous check for that. This was the issue! The failed tests pass now :tada: :heavy_check_mark: "", 'comment_created': datetime.datetime(2021, 6, 1, 16, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643244326, 'comment_body': 'No, never heard of `monkeypatch`. Can you point me to relevant resources?', 'comment_created': datetime.datetime(2021, 6, 1, 16, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643249689, 'comment_body': 'I went through [this](https://docs.pytest.org/en/6.2.x/monkeypatch.html) and this is exactly what I was looking for! Wow :100:  ', 'comment_created': datetime.datetime(2021, 6, 1, 16, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643255691, 'comment_body': 'Ping me if you cannot quickly figure it out, I can show you how I would do this.\r\n', 'comment_created': datetime.datetime(2021, 6, 1, 16, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 643602852, 'comment_body': 'Should these two if statements be logically grouped with each other?\r\n\r\n```python\r\nif format is None and filename is None:\r\n    pass\r\nelif format is None and any(filename.lower().endswith(fmt) for fmt in fmts):\r\n    # do the thing...\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 2, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643606796, 'comment_body': 'It\'s confusing to work out what is actually being tested just from reading the new test code you\'ve added. To address this, I\'d probably recommend splitting it up into it\'s own separate test and call that something like `test_visualize_no_filename`. Then the name of the test can do the work of describing what the test is for.\r\n\r\nWhether something should be a new test, or part of an existing test is a bit of a borderline judgement call, and other people might disagree with me. Ultimately, I think it\'lll save time for future developers because it\'s a clearer way to mark ""you can ignore this bit"" if they\'re not looking into the specific case where `filename=None`.', 'comment_created': datetime.datetime(2021, 6, 2, 2, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643621381, 'comment_body': ""It's possible I'm a bit confused here, but isn't the mocked behaviour for the function the same as the regular behaviour?\r\nIf that's true, do we really need to add the extra complexity of mocking? It might be a lot simpler to just add `visualize(x, filename=None)` as a line in `test_visualize` and a comment indicating that the test will fail if an error is raised by that line of code. \r\n\r\n(Note: that's the pytest default, a test will fail if an error is raised anywhere in it, but a comment is helpful for developers who are generally looking for assert statements to tell them what the test is about)"", 'comment_created': datetime.datetime(2021, 6, 2, 3, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643621706, 'comment_body': '@martindurant have I misunderstood something about the mocking here (entirely possible) or is it a bit overkill?', 'comment_created': datetime.datetime(2021, 6, 2, 3, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643753331, 'comment_body': 'Oh yes, this makes more sense. Updated :+1: ', 'comment_created': datetime.datetime(2021, 6, 2, 8, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643777263, 'comment_body': 'Yes, this seems to be a better option.\r\n\r\n```py\r\n@pytest.mark.skipif(""not da"")\r\n@pytest.mark.skipif(\r\n    sys.flags.optimize, reason=""graphviz exception with Python -OO flag""\r\n)\r\ndef test_visualize_no_filename(monkeypatch):\r\n    pytest.importorskip(""graphviz"")\r\n    pytest.importorskip(""dask.dot"")\r\n\r\n    x = da.arange(10)\r\n\r\n    test_list = []\r\n    _mock_get_display_cls = dask.dot._get_display_cls\r\n\r\n    def mock_fx(format):\r\n        test_list.append(True)\r\n        return _mock_get_display_cls(format)\r\n\r\n    monkeypatch.setattr(dask.dot, ""_get_display_cls"", mock_fx)\r\n    visualize(x, filename=None)\r\n    assert True in test_list\r\n```\r\n  \r\nI can add this (the test :heavy_check_mark:)\r\nI will wait for the final decision on using monkeypatch to mock behavior and then commit accordingly!', 'comment_created': datetime.datetime(2021, 6, 2, 9, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 645228277, 'comment_body': ""It is the same behaviour, but this slightly odd construct makes sure that the function actually got called (as opposed to None being some kind of no-op). Could be removed for style's sake."", 'comment_created': datetime.datetime(2021, 6, 4, 1, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 645228692, 'comment_body': 'I have no opinion on one test versus two', 'comment_created': datetime.datetime(2021, 6, 4, 1, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 646002952, 'comment_body': 'Actually, these three lines could be condensed, either\r\n```\r\nif format is None and filename is not None and any(filename.lower().endswith(fmt) for fmt in fmts):\r\n```\r\nor\r\n```\r\nif format is None and any((filename or """").lower().endswith(fmt) for fmt in fmts):\r\n```\r\nThe second is shorter, the first is clearer.', 'comment_created': datetime.datetime(2021, 6, 5, 15, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 646003088, 'comment_body': ""As @GenevieveBuckley  said, a comment here for what we're doing (this patch ensures that display_cls got called successfully) would be good."", 'comment_created': datetime.datetime(2021, 6, 5, 15, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 646010687, 'comment_body': ""I added the first one! Even though it's longer, using `black` formatting, it looks very clean.\r\n\r\n```py\r\nif (\r\n    format is None\r\n    and filename is not None\r\n    and any(filename.lower().endswith(fmt) for fmt in fmts)\r\n):\r\n    filename, format = os.path.splitext(filename)\r\n    format = format[1:].lower()\r\n```"", 'comment_created': datetime.datetime(2021, 6, 5, 16, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 646011047, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 6, 5, 16, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 646233772, 'comment_body': 'For clarity, you might like to rename `test_list` to something more meaningful. Maybe something like `was_mock_function_called`?', 'comment_created': datetime.datetime(2021, 6, 7, 2, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}]","[{'commit_sha': '7d0b4ad8cce70ef78d468534a0ea749c027a25c3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d2dafa5f585db1f2763fb8c750baaf34a1f630', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b171fade8b1e93bbb14a1a8a2acb24103190f05e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f613fc3d52c1665e41de4f1dfc4fe021cf99bd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff359e7f25c01ee482a1b8c9d4820de043e2b23', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c0124a94691b7b7f7f751f91b3756766de383e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bdcbaa8e1323ea0b83bee5740a94628ceff1624', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd20a1d04db0e892d05ed8bfa5a6d1c070dd727c5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2f41468d3246f78122480e3b665fbd23656c4a9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dedf6f47ab589464b94ad4d9dd6ab9abcc6a6f54', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfeb4f543e3bc881dc59a3b9081f021cc10799db', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de74506cc718e988facbcdaaac449f10f0903686', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '711e0859067c06605f436e93e7d147b2ce1f1d3f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b7fedc0843285557219662e31af3413adbfecb9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ccb83b5ed3268789898b559c926c8fa97b7e872', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52c575d95b4bb16b855f9546fce656319dbc3c4a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
683553085,Add node size scaling to the Graphviz output for the high level graphs,"- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

/cc @martindurant @GenevieveBuckley

Hi. I created this PR to add new size features to the HighLevelGraphs Graphviz depiction based on the amount of tasks each HLG layer has.

This is a follow-up to the information found at https://github.com/dask/dask/issues/7847/.

For now, I have just added a simple implementation of just a trivial case.

At this point in the code, adding new conditions and loops is simple and quick. All that remains is to decide how we want to display this information on the HLG.",True,7869,https://api.github.com/repos/dask/dask/pulls/7869,https://github.com/dask/dask/pull/7869,closed,26,10,1,10,30,4,0,0,[],2021-07-05 10:00:00+00:00,2021-07-20 01:06:50+00:00,1264010.0,"14 days, 15:06:50","[{'comment_id': 664177585, 'comment_body': 'I would like to see fontsize as a continuous variable, rather than these discrete ""buckets"" for different ranges.\r\n\r\nIf it\'s a bit too tricky for you to do this with log scaling, a good first step might be to make an implementation with a linear relationship between ntasks and fontsize.', 'comment_created': datetime.datetime(2021, 7, 6, 1, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 664179766, 'comment_body': 'Oh yes. I thought of the same. For now, I just wrote something very simple. \n\nOnce our plan is final, I will make it clean.', 'comment_created': datetime.datetime(2021, 7, 6, 1, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 666619902, 'comment_body': 'This is a much nicer implementation than the first one you had :smile: ', 'comment_created': datetime.datetime(2021, 7, 9, 1, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 666649602, 'comment_body': 'Yayyy :rocket: ', 'comment_created': datetime.datetime(2021, 7, 9, 3, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '7208f39673bce7c0f5843f1fb5646790c578ef6f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42a52241f54671c3396c15d12d7abc5cf3660090', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc9da7101cd1e9f47af57e53cd95bbc36de2014', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbfffbaeb9a9bbc8fe7bc47d7bf8341fc2b21f5b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197dfcd23e18a74a1e837bccc86e4e61513a3827', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e1f923bf277bff6736287eb916ec066292303a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8a4db13f728991dc7d4d6258e2bc686d776281', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a932312672ea1e4c2af8e6208aad23365da224ab', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48286d599bef74af7c7f0a80ca14c7ed07e93603', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab7312ee87c4c7ae4c844f482091202cfa17b2f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
696392668,Change graphviz font family to sans,"- [X] Tests passed
- [X] Passes `black dask` / `flake8 dask` / `isort dask`

I was working on #7869 and realized that the Graphviz output would look even cleaner if we use a sans-serif font instead of the current serif font.

In this PR, I have changed the font of the Graphviz from **Times-Roman** to ~~**Roboto**~~ **Helvetica**. I have also cleaned the code in the method `to_graphviz()` to be more consistent in `dot.py` (LOW LEVEL) and `highlevelgraph.py` (HIGH LEVEL). Now, they look similar and it might be easier to work with this code in the future.

It follows the https://marketing.dask.org/en/latest/colors.html
![dask](https://user-images.githubusercontent.com/62539811/126878443-5ec1f7af-f44a-45bd-9ed7-2481390e82b2.png)
(Font mentioned in image: Roboto)

Even the HTML Representation uses a Sans font, so it makes sense to have the Graph representations also follow suit.

## Demo

```py
import dask.array as da

x = da.ones((10, 10), chunks=(5, 5))
x = x + 100
x = x * 100

x.visualize()
```

### Before
![b1](https://user-images.githubusercontent.com/62539811/126878530-974c2258-1dea-4b71-bf4f-022109db9b27.png)

### After
![a1](https://user-images.githubusercontent.com/62539811/126878533-3df2abf6-0d71-496c-b614-28c971c08def.png)


```py
import dask.array as da

XL = da.ones((67552, 365941), chunks=(652, 5792))
XL2 = XL.T.astype(""f4"")
XC = da.ones((365941, 26), chunks=(365941, 26))
LS = da.linalg.lstsq(XC, XL2)[0]
XC_LS = XC @ LS
XLP = XL2 - XC_LS

XLP.dask.visualize(\)
```
### Before
![b2](https://user-images.githubusercontent.com/62539811/126878594-476bf436-4fd6-462f-af48-81f71e7fcd7b.png)


### After
![a2](https://user-images.githubusercontent.com/62539811/126878561-8fb50e0b-f7ff-4ff8-983c-26cdcfb56892.png)


/cc @GenevieveBuckley @martindurant 







",True,7931,https://api.github.com/repos/dask/dask/pulls/7931,https://github.com/dask/dask/pull/7931,closed,16,15,2,5,4,8,0,0,[],2021-07-24 18:57:42+00:00,2021-07-28 12:50:04+00:00,323542.0,"3 days, 17:52:22","[{'comment_id': 676803029, 'comment_body': 'Will roboto be available on most systems? My understanding is this is a font from Google which may not be present by default. Does graphviz handle that situation well? ', 'comment_created': datetime.datetime(2021, 7, 26, 17, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 676806124, 'comment_body': ""I am not really sure what happens when roboto is not available. I tried using graphviz locally and online as well and it rendered.\n\nHere's something.\n\n> it is best to rely on font faces that are generally available, such as Times-Roman, Helvetica or Courier.\n\nSource: http://www.graphviz.org/docs/attrs/fontname/\n\nIf we want, we can switch to helvetica (another sans font) if anyone has issues with roboto."", 'comment_created': datetime.datetime(2021, 7, 26, 17, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 676813599, 'comment_body': 'With `node_attr[""fontname""] = ""helvetica""`\r\n![a1](https://user-images.githubusercontent.com/62539811/127034181-a156dd40-446f-4bf9-9723-4b9180cc1865.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 26, 17, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 676823935, 'comment_body': 'Does the graphviz binary itself contain any fonts?', 'comment_created': datetime.datetime(2021, 7, 26, 17, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 676830833, 'comment_body': '```\r\nGraphviz has historically supported some standard Postscript\r\nfonts, initially, Times-Roman, Helvetica, Courier and Symbol.\r\nThis list was later enlarged by Adobe to include 35 fonts, which are:\r\n\tAvantGarde-Book AvantGarde-BookOblique AvantGarde-Demi\r\n\tAvantGarde-DemiOblique Bookman-Demi Bookman-DemiItalic\r\n\tBookman-Light Bookman-LightItalic Courier Courier-Bold\r\n\tCourier-BoldOblique Courier-Oblique Helvetica\r\n\tHelvetica-Bold Helvetica-BoldOblique Helvetica-Narrow\r\n\tHelvetica-Narrow-Bold Helvetica-Narrow-BoldOblique\r\n\tHelvetica-Narrow-Oblique Helvetica-Oblique NewCenturySchlbk-Bold\r\n\tNewCenturySchlbk-BoldItalic NewCenturySchlbk-Italic\r\n\tNewCenturySchlbk-Roman Palatino-Bold Palatino-BoldItalic\r\n\tPalatino-Italic Palatino-Roman Symbol Times-Bold Times-BoldItalic\r\n\tTimes-Italic Times-Roman ZapfChancery-MediumItalic ZapfDingbats\r\n```\r\nI believe these are the inbuilt fonts. \r\n\r\n\r\n\r\nAlso, @jrbourbeau \r\n> How font names are resolved also depends on the underlying library that handles font name resolution. If Graphviz was built using the `fontconfig` library, the latter library will be used to search for the font.\r\n\r\nSource: http://www.graphviz.org/docs/attrs/fontname/\r\n\r\n> A font is usually selected by family name (""fontname"") and other properties. Then fontconfig matches the request\r\nto a system font. Under fontconfig, fontnames are family names,\r\nwhich fontconfig matches to the closest font it finds.\r\n\r\nSo, I think even if `fontconfig` can\'t find ""Roboto"", it will fall back to a similar font. I think this is a good workaround.\r\n\r\nSource: http://www.hep.caltech.edu/~piti/share/graphviz/doc/fontfaq.txt\r\n', 'comment_created': datetime.datetime(2021, 7, 26, 18, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 677639105, 'comment_body': 'I have changed the font to Helvetica. I googled around for Graphviz examples and nobody seems to use Roboto. Helvetica is used in most places.\r\n\r\nI think this is a good choice.', 'comment_created': datetime.datetime(2021, 7, 27, 17, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 677828864, 'comment_body': ""Great, if helvetica works most places and graphviz internally has reasonable fallback behavior, then let's go with helvetica "", 'comment_created': datetime.datetime(2021, 7, 27, 21, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 677829372, 'comment_body': 'Yes, that seems cool.', 'comment_created': datetime.datetime(2021, 7, 27, 21, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '10387d7e511a23113baef1efb240d882c142f82e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85be974514ad271dfb47e3bd195c1cdfd1217bad', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '939f5c9e0071c74b6ca14b0e53d4a41362fab1b0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91acd660c4268dac4d23abaf5feb902111e68e0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716d436962d71de56e6b4b7dcfa0b3c979aca478', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
687652639,Add `dask.array` SVG to the HTML Repr,"(#7847)

- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

# `Task 2A`

## New Features

- #### Added the Dask Array SVG of the chunks to the HTML Repr
 
## Before

![image](https://user-images.githubusercontent.com/62539811/125258928-de635b00-e30f-11eb-840d-1bcef363411b.png)

## After

```py
import dask.array as da

XL = da.ones((67552, 365941), chunks=(652, 5792))
XL2 = XL.T.astype(""f4"")
XC = da.ones((365941, 26), chunks=(365941, 26))
LS = da.linalg.lstsq(XC, XL2)[0]
XC_LS = XC @ LS
XLP = XL2 - XC_LS

XLP.dask
```

![image](https://user-images.githubusercontent.com/62539811/126084254-c2fb02c3-0c64-4336-8ba8-8ad4d204fff8.png)
![image](https://user-images.githubusercontent.com/62539811/126084264-864ab814-dcfc-47bb-8a59-46fdf3dcd208.png)
![image](https://user-images.githubusercontent.com/62539811/126084267-a9f67f6c-93b6-4ee8-ae2c-b8ff0d625b2f.png)
![image](https://user-images.githubusercontent.com/62539811/126084269-472bbc95-8b39-405c-848b-d317bc41e39d.png)
![image](https://user-images.githubusercontent.com/62539811/126084276-af75f8a0-6e22-4943-a90a-6c47641e56a9.png)
![image](https://user-images.githubusercontent.com/62539811/126084281-372a6f5e-e59f-4c35-a0d7-deaaa5f7611d.png)

The computation looks incredible! :fire:
",True,7886,https://api.github.com/repos/dask/dask/pulls/7886,https://github.com/dask/dask/pull/7886,closed,21,11,2,38,14,25,1,0,[{'name': 'array'}],2021-07-12 09:08:39+00:00,2021-07-30 16:37:20+00:00,1582121.0,"18 days, 7:28:41","[{'comment_id': 668490995, 'comment_body': ""Not sure you need to say `size=200`, given the default value is 200. I would say that part of the code is pretty stable, I don't think it's likely to change anytime soon."", 'comment_created': datetime.datetime(2021, 7, 13, 7, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 668495818, 'comment_body': 'If you use the dictionary [get](https://www.programiz.com/python-programming/methods/dictionary/get) method, you can avoid having to first check if ""type"" is in the dictionary before checking its value.', 'comment_created': datetime.datetime(2021, 7, 13, 7, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 668538925, 'comment_body': 'Very likely we want this import to live somewhere else before merging (I know you had some problems with the imports earlier)\r\n', 'comment_created': datetime.datetime(2021, 7, 13, 8, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 669102271, 'comment_body': ':heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 13, 20, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 669104027, 'comment_body': ':heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 13, 20, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 669153357, 'comment_body': ""I tried several things. No elegant solution was found.\r\n\r\nTurns out, it's a case of Circular Imports.\r\nTrying to fix it rn. \r\n\r\n`dask.array` imports `dask.delayed` which imports `HighLevelGraph` which in turn imports `dask.array`\r\n\r\n```\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-1-dc46e0049dfc> in <module>\r\n----> 1 import dask.array as da\r\n      2 \r\n      3 x = da.random.random((10000, 10000), chunks=(100, 100))\r\n      4 y = x + x.T - x.mean(axis=0)\r\n      5 y.dask\r\n\r\n~/GitHub/dask/dask/__init__.py in <module>\r\n      3 from .base import annotate, compute, is_dask_collection, optimize, persist, visualize\r\n      4 from .core import istask\r\n----> 5 from .delayed import delayed\r\n      6 from .local import get_sync as get\r\n      7 \r\n\r\n~/GitHub/dask/dask/delayed.py in <module>\r\n     18 from .context import globalmethod\r\n     19 from .core import quote\r\n---> 20 from .highlevelgraph import HighLevelGraph\r\n     21 from .optimization import cull\r\n     22 from .utils import OperatorMethodMixin, apply, ensure_dict, funcname, methodcaller\r\n\r\n~/GitHub/dask/dask/highlevelgraph.py in <module>\r\n     23 from .utils import _deprecated, ensure_dict, key_split, stringify\r\n     24 from .utils_test import add, inc  # noqa: F401\r\n---> 25 from dask.array.svg import svg\r\n```\r\n\r\nI believe, that's why importing `svg` inside the method works for now as it has no conflicts.\r\n"", 'comment_created': datetime.datetime(2021, 7, 13, 22, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 669225336, 'comment_body': ""Potentially we could move the svg.py file up, so it doesn't live under the array module anymore. Or keep this solution, delaying the import until inside the function (although I think it should probably have the relative import path with dots, instead of starting with dask dot ...)\r\n\r\nWe should think about this some more, and then try and work out what the cleanest solution is. "", 'comment_created': datetime.datetime(2021, 7, 14, 2, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 669238441, 'comment_body': ""In the future I would like to use classes for this.  I would expect array layers to be of some type, like `ArrayLayer`, and then I would expect to call `layer.get_fancy_repr()` or something similar and then the array layers can call the array code dataframe layers can call the dataframe code, etc..\r\n\r\nThis isn't built out yet though, so we'll probably have to be sloppy until then."", 'comment_created': datetime.datetime(2021, 7, 14, 2, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrocklin', 'type': 'User'}, {'comment_id': 669277965, 'comment_body': 'Just for testing, I moved `svg.py` from `dask/array/svg.py` to `dask/svg.py` and then imported that using\r\n```py\r\nfrom .svg import svg\r\n```\r\nand it works (on top) :tada:. If we plan on using this fix, I will have to change a little code in some files too to make sure the right file is getting imported!\r\n\r\n------\r\n\r\nAlso, I have edited the current absolute addressing to relative and it still works!\r\n```py\r\nfrom .array.svg import svg\r\n```\r\nworks **inside the method**.', 'comment_created': datetime.datetime(2021, 7, 14, 4, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 671940821, 'comment_body': 'If we go with the import happening inside the method here, then I think it makes most sense to put it in this block:\r\n\r\n```python\r\n            if chunks is not None:\r\n                from .array.svg import svg\r\n                svg_repr = ""<br />"" + svg(chunks)\r\n```\r\n\r\nGiven Matt\'s comment above, I\'m leaning towards this. As discussed, it\'s sloppy, but it is more minimally invasive than the other suggestion I made which would take more work to undo whenever we get to Matt\'s ideal final state later on. So that\'s why I\'d prefer it.\r\n\r\nGenerally my concern with this is that repeatedly importing something will slow things down (although most likely generating the svg is likely a fair bit slower than the import is). @freyam could you comment on how ""laggy"" it feels for something like [this example](https://github.com/dask/dask/issues/7847#issuecomment-882126098)? It\'s possible this isn\'t a massive problem right now and isn\'t worth worrying about.\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 19, 1, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 671944327, 'comment_body': 'Please add a comment explaining why we do this', 'comment_created': datetime.datetime(2021, 7, 19, 2, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 671945050, 'comment_body': ""Also, this isn't super extendable if we add other keys to the dictionary that we also want to skip. If we did that, you might want a list of key names to skip, and then check `if key is in keys_to_skip: ...`\r\nNot sure if we need to do that here (probably not, but you need to understand how that would happen if we needed it).\r\n"", 'comment_created': datetime.datetime(2021, 7, 19, 2, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672596682, 'comment_body': '1. Added a comment. \r\n2. yes, you are right. It would be a lot cleaner if I had a list of keys to not include in the HTML. If we end up having more than 1, i will use a list instead as suggested :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 19, 20, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672609205, 'comment_body': '1. Moved the import inside, so it only gets called when needed.\r\n2. Surpringly, it\'s taking the same time as the current Dask implementation.\r\n\r\n|                                   dask/dask                                   |                                  freyam/dask                                  |\r\n|:-----------------------------------------------------------------------------:|:-----------------------------------------------------------------------------:|\r\n| 33.7 ns ± 0.743 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) | 34.3 ns ± 0.615 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) |\r\n\r\n\r\nCalculated locally using `%timeit` on the following code.\r\n\r\n```py\r\nimport dask.array as da\r\n\r\nXL = da.ones((67552, 365941), chunks=(652, 5792))\r\nXL2 = XL.T.astype(""f4"")\r\nXC = da.ones((365941, 26), chunks=(365941, 26))\r\nLS = da.linalg.lstsq(XC, XL2)[0]\r\nXC_LS = XC @ LS\r\nXLP = XL2 - XC_LS\r\n\r\nXLP.dask\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 20, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672729872, 'comment_body': ""You'll want timeit only on the very last line `XLP.dask`"", 'comment_created': datetime.datetime(2021, 7, 20, 0, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672730673, 'comment_body': 'Unfinished sentence. Suggest rephrasing to a shorter comment. Maybe also placing the comment one line before the if statement begins (that would be two lines, rather than 3)', 'comment_created': datetime.datetime(2021, 7, 20, 0, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672731648, 'comment_body': ""This materialized layer stuff belongs in a separate PR, imo.\r\nAlso, isn't there some extra logic about what to do if no `collection_annotations` are passed in (I seem to remember we looked in the dask config, but maybe that was only for `annotations` instead)"", 'comment_created': datetime.datetime(2021, 7, 20, 0, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672799082, 'comment_body': 'Yes, I had done that.', 'comment_created': datetime.datetime(2021, 7, 20, 4, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672799886, 'comment_body': 'Oh! fixed it. :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 20, 4, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672871974, 'comment_body': 'The issue with that is that I need all the layers (`Layers` and `MaterializedLayers` both) to have a `collection_annotations` dictionary.\r\n\r\nI guess, for now, I can just add an extra if statement up top and remove the changes I made to `MaterializedLayer` class.\r\n\r\n```py\r\nsvg_repr = """"\r\nif (\r\n    self.collection_annotations is not None\r\n    and self.collection_annotations.get(""type"") == ""dask.array.core.Array""\r\n):\r\n    chunks = self.collection_annotations.get(""chunks"")\r\n    if chunks:\r\n        from .array.svg import svg\r\n\r\n        svg_repr = ""<br />"" + svg(chunks)\r\n```\r\n\r\nThis also works :heavy_check_mark: and I feel it\'s a better method for now. I will commit this :+1: \r\n\r\nAccording to my knowledge, the config method doesn\'t seem to do anything for `annotations` and `collection_annotations` as we only have the following keys only.\r\n\r\n```py\r\nconfig = {\r\n            ""temporary-directory"": None,\r\n            ""dataframe"": {""shuffle-compression"": None},\r\n            ""array"": {\r\n                ""svg"": {""size"": 120},\r\n                ""slicing"": {""split-large-chunks"": None},\r\n                ""chunk-size"": ""128MiB"",\r\n                ""rechunk-threshold"": 4,\r\n            },\r\n            ""optimization"": {\r\n                ""fuse"": {\r\n                    ""active"": None,\r\n                    ""ave-width"": 1,\r\n                    ""max-width"": None,\r\n                    ""max-height"": inf,\r\n                    ""max-depth-new-edges"": None,\r\n                    ""subgraphs"": None,\r\n                    ""rename-keys"": True,\r\n                }\r\n            },\r\n        }\r\n   ```\r\n\r\nAm I missing out on something? I checked around in the `config,py` as well.', 'comment_created': datetime.datetime(2021, 7, 20, 7, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 679699130, 'comment_body': '```suggestion\r\n                # Hide verbose chunk details from the HTML table\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 7, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 679700022, 'comment_body': 'We want to explain the reason *why*, not just what the code is doing. (Reason being, the chunks information is often too verbose to be easily displayed in the HTML table)', 'comment_created': datetime.datetime(2021, 7, 30, 7, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 679707672, 'comment_body': 'Yes, absolutely! Your suggestion is more appropriate and might be useful in the future if we decide to hide more properties.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 679707712, 'comment_body': 'We talked about this import placement previously, and I think this is probably the best way to leave it', 'comment_created': datetime.datetime(2021, 7, 30, 7, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 679708469, 'comment_body': ':heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 30, 7, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '7208f39673bce7c0f5843f1fb5646790c578ef6f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42a52241f54671c3396c15d12d7abc5cf3660090', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc9da7101cd1e9f47af57e53cd95bbc36de2014', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbfffbaeb9a9bbc8fe7bc47d7bf8341fc2b21f5b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197dfcd23e18a74a1e837bccc86e4e61513a3827', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e1f923bf277bff6736287eb916ec066292303a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8a4db13f728991dc7d4d6258e2bc686d776281', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a932312672ea1e4c2af8e6208aad23365da224ab', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48286d599bef74af7c7f0a80ca14c7ed07e93603', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab7312ee87c4c7ae4c844f482091202cfa17b2f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ebc581a6339887eb112c48bbf2cfe51db0f9f22', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43326f2bdf587d07e524b62c6e7ff18a0698dae7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c71207ad0351bbda8d3263e59de3d0f3739dd1fd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '805437d1a97ec2bca7950f4d278f438868a55f70', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0826f76dea3ebf31d6325de0d0d1a355586dc9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '268742b4cdafbe6d7405b988151e34d7815be73a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd9f412704b203b704bc6ea342ab37abda097b9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372fc7afcf41ff087f888f8bc3ff5d3757662af3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6bd23c45f8285b1728ffd6cc8121e7119bbd93e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6ce8d6ec662bb24f42293074dd364f3c1222a73', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb85692770b6b77f82482d02c9581765b448451', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56b285300c639f87ec38a9fb265025e5c199b38', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13ae6a9cefa25d4990b9e1187b1d9393f219b722', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb2d55df9e2b6532f7e7621bdef820633065b04', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd4cec681c4224c363c29c67005e202dd6f8d2e9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b39415b54ec1d16a85987ad54be2033bc9b3a13d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dd8222effd242d6866b51c99d8a43aa7412575b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce807a15fb48d3ff1fcd5bc0fdf0e9ae18f22819', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e6fed31c598879ca70e5302a61691f218620b64', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c86be91d4e151a1f5ef6d0ede05d480e2a96e14f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa11f3f92611830eab28dbf21988995c00acc92a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a62a41515e4b04a0ea21ed20440752b2e9aedf2', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c362dc57acd3ed22a303d65bf2f72266060a3126', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3af8fc505fca4567ac584b0a199e4e38b53121f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c5f558e4e7698c90513761021e7d661550aa87a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eee2bab644a945e933f9e87efabc08e1f7acf26', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c660c320390878ef1093b3eb0189e15e234580f7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e87bce8da3135af166906bdbc3543f4f857ae2c3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
701307167,Add tooltips to graphviz,"- [x] Closes #7970 
- [x] Tests added + passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

I have added tooltips in the graphviz representation of the graphviz output of High-Level Graphs.
Graphviz provides an additional attribute `tooltip` which is exactly what I needed.

I have added the contents of the `collection_annotations` for now.

Thanks to @GenevieveBuckley's work on this. It became very easy to add the existing information to the graphviz in the form of tooltips.

Note: I also have changed the default file type and file name to `dask-hlg.svg`. 
# Demo

## Dask Array

```py
import dask.array as da

x = da.ones((10, 10), chunks=(5, 5))
x = x + 100
x = x * 100

x.dask.visualize()
```

![image](https://user-images.githubusercontent.com/62539811/128592068-6e68cc10-d053-4ddd-afb1-05d514d45275.png)

## Dask DataFrame

```py
import dask.dataframe as dd

df = dd.demo.make_timeseries(
    start=""2000"",
    end=""2015"",
    dtypes={""A"": float, ""B"": int, ""C"": int, ""D"": int, ""E"": str, ""F"": float, ""G"": float, ""H"": str, ""I"": str},
    freq=""5s"",
    partition_freq=""3M"",
    seed=1234,
)
df = df.shuffle(1000)

df.dask.visualize()
```
![image](https://user-images.githubusercontent.com/62539811/128592094-24a9b01f-dbd1-4247-b834-e928c9247fb5.png)

If the number of columns is less, I show them too.

![image](https://user-images.githubusercontent.com/62539811/128592104-2f7f8143-49a6-4185-b4b5-f0b17e0dea2a.png)










",True,7973,https://api.github.com/repos/dask/dask/pulls/7973,https://github.com/dask/dask/pull/7973,closed,52,6,2,16,22,7,0,0,[],2021-08-02 09:45:18+00:00,2021-08-10 13:40:56+00:00,705338.0,"8 days, 3:55:38","[{'comment_id': 684852303, 'comment_body': 'Can you confirm this test fails if you run it on the dask main branch?\r\n\r\nAnd is there a way we can check the length of the information in the tooltip?', 'comment_created': datetime.datetime(2021, 8, 9, 0, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 684852654, 'comment_body': '```suggestion\r\ndef test_node_tooltips_exist():\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 0, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 684852822, 'comment_body': 'Nice work on this test, btw', 'comment_created': datetime.datetime(2021, 8, 9, 0, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 684958915, 'comment_body': 'Yes, it fails on the `main` branch\r\n![image](https://user-images.githubusercontent.com/62539811/128670186-36518758-4800-4b77-9fc5-ef26a34e7580.png)\r\n\r\n>  is there a way we can check the length of the information in the tooltip?\r\n\r\nI could simply save the length of the tooltip string in the `to_graphviz()` function.\r\nIf you want this to be included in the test, I could try some regex.', 'comment_created': datetime.datetime(2021, 8, 9, 7, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 684959949, 'comment_body': 'The only reason the tooltip would look super long is the column names in Dataframes and I have taken care of that in the `to_graphviz()` itself.', 'comment_created': datetime.datetime(2021, 8, 9, 7, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 685619098, 'comment_body': '> I could simply save the length of the tooltip string in the `to_graphviz()` function.\r\n> If you want this to be included in the test, I could try some regex.\r\n\r\nNo, we wouldn\'t want to save save the length of what the tooltip string should be in the `to_graphviz()` function - the idea of the test is that we check the function did what it was supposed to do by looking at the actual output that gets displayed.\r\n\r\nYes, let\'s try to use regex to check the length of the node\'s tooltip string. I\'m assuming that part of the string will look something like this: `... tooltip=""some tooltip information here"" ...`\r\nThen we could use `tooltip=""` and the closing quote `""` as the regex start & end markers and check that the number of characters inside the tooltip quotes is not zero. \r\n', 'comment_created': datetime.datetime(2021, 8, 10, 1, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 685622117, 'comment_body': ""You will also need to skip this test if graphviz is not installed. The mindeps-array-dataframe CI test is failing, and I think that is because graphviz is not included [in the environment](https://github.com/dask/dask/blob/main/continuous_integration/environment-mindeps-array-dataframe.yaml). Adding another line with pytest importorskip should fix that problem.\r\n\r\n(There is another failing CI check, but I don't think that is related to anything you've been working on here. It might magically become good next time it runs,  we'll see)"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}]","[{'commit_sha': '48154d809c11c426032a7087f894a628dc7740fd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d86833d1856d0923d2575528e8c7ed871f7a43b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c353fddea762ac19e134ea8da50c48cb331bbc14', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc848dce6312a960449f229b66188cf220e0b89', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38382bf33ece97ee58383db9c52edbddf04c1e66', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd08a930ee1eb841b2dc273ca70e07912ef1a553', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bb32d2bb1941754713d2899d7ffcd2dd5835a21', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b30a669f81406ff5445abd911c0709cff6b2dc66', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8b647b353b285079295ecdc488db19da1d71bd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1297ad58b92ea9771ed5ed820a14ead42194edff', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fbea04f0c1d8a3f023bfdcbed9b3a9fc9d387c2', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5e0649441d21a9cff852e29f67900941cacece0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7596cc9c9bb65ac2d472ce7bd49f91ba049eb07b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '032dcdc8317dd3b104949151eab50284c4d395fc', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ed01f5bde2cb5841900b8178382c33757f490a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '354f9f3adff333bf4445fca21119510a68511a11', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
701324019,Add colors to represent high level layer types,"- [ ] Closes #7919
- [x] Tests passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`


In this PR, I have added an extra attribute to the graphviz output of High-Level graphs - node fill color. Nodes are colored on the basis of their `layer_type`.

This was achieved by using DOT's `fillcolor` attribute.

Currently, this option is made optional to the users. They need to provide an additional kwarg while calling `dask.visualize()` with `color=""layer_type""`.

## Demo

```py
import dask
import dask.dataframe as dd

df = dask.datasets.timeseries()
df2 = df[df.y > 0]
df3 = df2.groupby('name').x.std()
```

### `c.dask.visualize(color=""layer_type"")`
![7974-AA](https://user-images.githubusercontent.com/62539811/129655948-004df074-7449-4725-8fe6-811ee050289e.png)

### `c.dask.visualize(color=""layer_type"")`
![image](https://user-images.githubusercontent.com/62539811/129747767-145a5092-8ee7-4414-a87f-18e50a8e7c2a.png)


## Color Scheme

```py
layer_colors = {
    ""DataFrameIOLayer"": ""purple"",
    ""ShuffleLayer"": ""rose"",
    ""SimpleShuffleLayer"": ""rose"",
    ""ArrayOverlayLayer"": ""pink"",
    ""BroadcastJoinLayer"": ""blue"",
    ""Blockwise"": ""green"",
    ""BlockwiseLayer"": ""green"",
    ""BlockwiseCreateArray"": ""green"",
    ""MaterializedLayer"": ""gray"",
}
```



![final](https://user-images.githubusercontent.com/62539811/129032590-422ecfd4-1007-43fe-8fb6-d257bb62b95f.png)

## Explanation

- `DataFrameIOLayer`: inefficient;
- `ShuffleLayer`, `SimpleShuffleLayer`: inefficient;
- `ArrayOverlayLayer`: inefficient;
- `BroadcastJoinLayer`: (?);
- `Blockwise`, `BlockwiseLayer`, `BlockwiseCreateArray`: efficient; easy to parallize;
- `MaterializedLayer`: inefficient; better to materialize as late as possible;

#### Key Points

- Blockwise Layers are more efficient than others and can be readily parallelized. As a result, they are **green** (a color used to signify something that is right, something that is correct). When users see a green layer, they may be certain that it is the most efficient method to accomplish things and that no optimization is required.
- The **gray** color (which signifies neutrality and balance) is used for Materialized layers to indicate that the layer should be materialized as late as feasible. Since we are not sure of the optimal way to optimize , we use the **gray** color to indicate that we are not sure.
- All of the other layers are inefficient in some way. As a result, they are colored brighter and stronger to attract the user's attention. Colors such as **purple**, **pink**, and **blue** are used to indicate to the user that something needs to be optimized. Users should utilize as little of these levels as feasible.
",True,7974,https://api.github.com/repos/dask/dask/pulls/7974,https://github.com/dask/dask/pull/7974,closed,91,7,2,14,14,37,0,0,[],2021-08-02 10:08:04+00:00,2021-08-18 19:54:37+00:00,1417593.0,"16 days, 9:46:33","[{'comment_id': 690349104, 'comment_body': ""I just noticed that this is not actually in the arguments list (because it's going to act on self, the graph we are referring to). The text above also mentions passing graphs - this should be removed, seems like it was copied from elsewhere."", 'comment_created': datetime.datetime(2021, 8, 17, 13, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690349279, 'comment_body': 'Just one high level graph!', 'comment_created': datetime.datetime(2021, 8, 17, 13, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690350929, 'comment_body': ""Possible future improvement: it feels like these should be (class) attributes of the layers themselves. Since colouring is not going to be default yet, it's ok to leave them here for now."", 'comment_created': datetime.datetime(2021, 8, 17, 13, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690352071, 'comment_body': 'Generate this list of <TR> from `layer_colours` to eliminate repetition? Should we only show those items that actually feature in the graph?', 'comment_created': datetime.datetime(2021, 8, 17, 13, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690367581, 'comment_body': 'Correct ✅\nwill change', 'comment_created': datetime.datetime(2021, 8, 17, 13, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690373065, 'comment_body': 'Yes, that seems like a neat idea :rocket: \r\n', 'comment_created': datetime.datetime(2021, 8, 17, 13, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690399719, 'comment_body': '![image](https://user-images.githubusercontent.com/62539811/129739411-fddc4483-c95e-4c10-a10b-1ccecac6142c.png)\r\nThe problem here is that since I have selected the same color for all Blockwise Layers. it would show up twice\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 13, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690401469, 'comment_body': 'Is this ok? or do I add extra checks so it only shows the same color Layers once\r\nin this case, it would skip showing `BlockwiseCreateArray`', 'comment_created': datetime.datetime(2021, 8, 17, 14, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690401600, 'comment_body': '@martindurant ', 'comment_created': datetime.datetime(2021, 8, 17, 14, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690402315, 'comment_body': ""Up to you, I don't insist. "", 'comment_created': datetime.datetime(2021, 8, 17, 14, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690402807, 'comment_body': 'It works otherwise. \r\n![image](https://user-images.githubusercontent.com/62539811/129739975-dc2af518-ab30-47ae-9e15-2b320297c1b7.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 14, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690404210, 'comment_body': 'I was thinking of making the `BlockwiseLayer` and `BlockwiseCreateArray` a little darker shades of green. How does that sound?\r\nSame goes with Shuffle and SimpleShuffle layers. Same color but a little darker shade to differentiate.', 'comment_created': datetime.datetime(2021, 8, 17, 14, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690405473, 'comment_body': ""I suggest that we don't want too many colours"", 'comment_created': datetime.datetime(2021, 8, 17, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690410456, 'comment_body': 'Oh cool. In that case, I will leave it as it is.\r\n:rocket: \r\n\r\nThis is actually much better than showing the entire Legend every time. Great suggestion :smile: ', 'comment_created': datetime.datetime(2021, 8, 17, 14, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690821440, 'comment_body': 'Yeah, I asked about this wording too. Turns out @freyam copied it from the low level graph visualize function (which is what I suggested he look at to base this off). I don\'t think it\'s true for either situation - am I wrong?\r\n\r\nIf that\'s the case, we\'ll want to update both docstrings to say something like this instead:\r\n* `""Visualize a dask high level graph.""`\r\n* `""Visualize a dask low level task graph.""`\r\n', 'comment_created': datetime.datetime(2021, 8, 18, 0, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 690931385, 'comment_body': 'Yes, +1 here. I am not sure if we can pass several dictionaries into visualize. I tried it myself and I am getting errors.\r\n\r\nI have updated the doc to the lines Genevieve sent.', 'comment_created': datetime.datetime(2021, 8, 18, 6, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691428852, 'comment_body': ""**THIS** function does indeed take as many graphs as you like, the original docstring was correct. It's only for the `self.visualize` that the graph in question is already implied and there is no way to show more."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691430255, 'comment_body': 'This parameter is, however, wrong. `*args` is the set of dask graphs to show, one or more of them.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691432122, 'comment_body': ""If we're being thorough, then `cmap` should be a separate kwargs in this list with a better description than given here; or just remove it, since we don't say anywhere what kind of object cmap can be (and it is probably not tested)."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691432566, 'comment_body': 'Visualize **THIS** high level graph!', 'comment_created': datetime.datetime(2021, 8, 18, 16, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691432866, 'comment_body': 'Still refers to ""dask graphs"", but we are not passing any of those.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691433482, 'comment_body': ""Doesn't the extension you get depend on the `format` argument?"", 'comment_created': datetime.datetime(2021, 8, 18, 16, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691435576, 'comment_body': 'Use `None` to avoid writing a file (e.g., for output in a jupyter notebook)', 'comment_created': datetime.datetime(2021, 8, 18, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691437180, 'comment_body': '`to_graphviz` in this module could also use a docstring similar to this one; as could `dask.dot.graphviz_to_file`! Maybe not appropriate for this PR.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691439054, 'comment_body': 'These are low level graph manipulations, not relevant here', 'comment_created': datetime.datetime(2021, 8, 18, 16, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691476374, 'comment_body': 'I can add that in a different PR :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 8, 18, 17, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691491111, 'comment_body': 'Right!', 'comment_created': datetime.datetime(2021, 8, 18, 18, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691491733, 'comment_body': ""Oh! Didn't know that :heavy_check_mark: "", 'comment_created': datetime.datetime(2021, 8, 18, 18, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691499594, 'comment_body': 'It also depends on `filename`.\r\n\r\nhttps://github.com/dask/dask/blob/88a13f77f374a11425961c074f4e579f3befe721/dask/dot.py#L282-L283\r\n\r\nbut, `format` would overwrite the format in the `filename`.\r\n`x.dask.visualize(filename=""thishouldbesvg.svg"", format=""png"")`\r\nwould `thishouldbesvg.svg.png`!', 'comment_created': datetime.datetime(2021, 8, 18, 18, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691501037, 'comment_body': 'I don\'t know what the code produces (you can test), but the wording here implies that when you give a filename without any extension at all, "".svg"" is appended - which I suspect is not necessarily true.', 'comment_created': datetime.datetime(2021, 8, 18, 18, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691510083, 'comment_body': 'Oh, you are indeed right!', 'comment_created': datetime.datetime(2021, 8, 18, 18, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691512786, 'comment_body': '```py\r\nimport dask.array as da\r\n\r\nx = da.ones((10, 10), chunks=(5, 5))\r\nx = x + 100\r\nx = x * 100\r\n\r\nx.dask.visualize(filename=""isthissvg"")\r\n```\r\nproduces `isthissvg.png`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691519310, 'comment_body': 'Wow, I found some tiny flaws in the filename/format system.\r\nI will create an issue on it once I confirm them.', 'comment_created': datetime.datetime(2021, 8, 18, 18, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691522466, 'comment_body': ""For now, I have just changed \r\n`'.svg' will be used by default.`\r\nto \r\n`'.png' will be used by default.`\r\nwhich is true.\r\n\r\n_I will make this doc even better in another PR which fixes the filename/format situation for HLGs._\r\n\r\nIs this fine for now?\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 18, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691523715, 'comment_body': "">  '.png' will be used by default.\r\n\r\nIs it true regardless of the `format` argument?\r\n\r\n> I will make this doc even better in another PR\r\n\r\nyes, that's fine."", 'comment_created': datetime.datetime(2021, 8, 18, 18, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691531035, 'comment_body': '> Is it true regardless of the format argument?\r\n\r\nyes! ', 'comment_created': datetime.datetime(2021, 8, 18, 19, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691535025, 'comment_body': 'EDIT: format would overwrite the filename (if the filename has an extension attached or not)\r\n\r\n```py\r\nx.dask.visualize(filename=""whatextension.png"", format=\'pdf\') # whatextension.png.pdf\r\nx.dask.visualize(filename=""whatextension"", format=None) # whatextension.png\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 19, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '1f507b259bb00f3fe2381be14e1b91cec9715c0c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10c84d90b31454b8af17cc73d995cfc749261f0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700e95854fb3a0932afd9504949363fe19ad6a7b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d70097a5459150d903be4fc88e1a962fe09b2f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cabc7d18f1cfdc5e504a4916278223449b3fc66', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409bb26e37849dba595f07bab2cdae5ce3769e5f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c073aa5132e9839e3cb2353697eff16ff7fe24f6', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f82e55e35085d503dc21dc8027b8acbe393e75ab', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '486961c5441512e2afe02e4e12a60969273db2f5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c85a425b4dacf3ecd584221dc8024d45a8344e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a13f77f374a11425961c074f4e579f3befe721', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56698f9d446e7ee2c7c1c0e50efdd37af6fd7839', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666db9692bc6b26df94f97bbacad3851586c1825', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf39759f10bc06107b48fa2cc307b6db6a3e42d0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
678592342,Edited the path to `scheduler.py`,"I believe the path @jacobtomlinson wanted to link has been changed since then. I've made the necessary changes to bring it up to date.
",True,4983,https://api.github.com/repos/dask/distributed/pulls/4983,https://github.com/dask/distributed/pull/4983,closed,1,1,1,1,1,0,0,0,[],2021-06-27 22:44:41+00:00,2021-06-28 09:14:37+00:00,37796.0,10:29:56,[],"[{'commit_sha': '2a0329d4e0cf7fa451715af8b635a6bba589889d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
704912265,Add HTML Repr for `Security` Class,"- [x] Tests added / passed
- [x] Passes `black distributed` / `flake8 distributed` / `isort distributed`

I have added the HTML Representation of the `Security` class and also tweaked the `__repr__` to specify where the keys/certs are stored.

## `_repr_html_`

![image](https://user-images.githubusercontent.com/62539811/129478645-076d9348-c399-48b4-b4b1-9300143e1eab.png)

## `__repr__`

![image](https://user-images.githubusercontent.com/62539811/129478671-18c84467-e29f-43e9-b13d-b309df22b2f0.png)




/cc @martindurant @GenevieveBuckley",True,5178,https://api.github.com/repos/dask/distributed/pulls/5178,https://github.com/dask/distributed/pull/5178,closed,54,10,2,18,20,6,0,0,[],2021-08-05 17:58:09+00:00,2021-08-17 02:33:19+00:00,981310.0,"11 days, 8:35:10","[{'comment_id': 689206914, 'comment_body': '```suggestion\r\n            + "",\\n    "".join(f""{key}={value}"" for key, value in attr.items())\r\n```\r\n\r\nWhat do you think about adding newlines to improve reading/scanning the text?', 'comment_created': datetime.datetime(2021, 8, 16, 2, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689207145, 'comment_body': '```suggestion\r\n            + ""\\n)""\r\n```\r\n\r\n(If you try the new line suggestion, we\'ll want the close bracket also on its own line, so it\'s easier to see)', 'comment_created': datetime.datetime(2021, 8, 16, 2, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689207877, 'comment_body': ""Oh, I see above you experimented with using a dictionary to get a similar kind of behaviour. Yes, I like the way that looks a lot more - it's much easier to skim through the information and find what you need."", 'comment_created': datetime.datetime(2021, 8, 16, 2, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689641912, 'comment_body': 'Let\'s remove the single quotes here. Folks may think things are strings when they are not.\r\n\r\n```suggestion\r\n            + "", "".join(f""{key}={value}"" for key, value in attr.items())\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689642109, 'comment_body': 'This probably wants to be private.\r\n\r\n```suggestion\r\n    def _attr_to_dict(self):\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689651211, 'comment_body': 'Oh right ✔️ \r\n', 'comment_created': datetime.datetime(2021, 8, 16, 15, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '8267cfb7ec9d602d03469ba0024bacdcbc8135cd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c65b89f92195850ee871bdaae0ebf9159b2189b7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769381a66c61b9730d7b77b689b6931febbfa135', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9dd571dbb4f62545018d8994883e4442069bb20', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '578da8c12c744f3062af9cb077fd7e83a7ba9723', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a98589dc7db57206688162f0d4e23dd1a4d1d2b1', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11470e99ebc5e63f789026d4fde836b8c397439b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fb873ee9cb084389c569e353f53baeabf1609f3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482280de06930cc02a7eae1e638495749153b22d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4a0d08411044754190f6dca412f1cd411e29c5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5d680a72b2a4e5c32ed8e55d7f729223f187ba3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36f88c0bc44f1befcff27edda2d4d4bb9e3b4f15', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1259a83cb30ea25ffe148b498c9a6d06bb5f7890', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead99acbd69e5ac8fc6903a8d36d6c040d44b654', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03474e675f4c4a1dceefcd104c6db0c63c7ed07', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8106bbf2ea988f595d50706b55f46c45db825ac', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037c18131e0ba262e007c85afdf06ce5a23fba95', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e64f6a5b2384b60a914e76514a9006107868fe0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
704977859,Add HTML Repr for `ProcessInterface` Class and all its subclasses,"- [ ] Closes #xxxx
- [x] Tests added / passed
- [x] Passes `black distributed` / `flake8 distributed` / `isort distributed`

I have added the HTML Repr for ProcessInterface Class and all its subclasses.

## Before

`proc` would call the `__repr__()`.

![image](https://user-images.githubusercontent.com/62539811/128411614-b06f51f4-430b-4b3f-b5c6-f5a38cc8ee1f.png)

## After

![image](https://user-images.githubusercontent.com/62539811/129478771-027f0b0d-7d55-4796-ad73-f1d926f0e723.png)


![image](https://user-images.githubusercontent.com/62539811/129478758-758bcd28-72ac-4cbc-89b3-40e196336d71.png)

/cc @martindurant @GenevieveBuckley",True,5181,https://api.github.com/repos/dask/distributed/pulls/5181,https://github.com/dask/distributed/pull/5181,closed,47,4,2,22,21,33,0,0,[],2021-08-05 19:47:22+00:00,2021-08-17 15:52:57+00:00,1022735.0,"11 days, 20:05:35","[{'comment_id': 683799358, 'comment_body': ""Thanks @freyam! It looks like these attributes are defined in the `__init__(...)` method and we probably don't want to overwrite them here as `_repr_html_` should just display existing state instead of mutating existing state "", 'comment_created': datetime.datetime(2021, 8, 5, 21, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 683800393, 'comment_body': ""I don't think users will care about `self.lock`. It's more so used for internal coordination. "", 'comment_created': datetime.datetime(2021, 8, 5, 21, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 683800630, 'comment_body': ""Same comment about `self._event_finished`. It's an internal implementation detail. "", 'comment_created': datetime.datetime(2021, 8, 5, 21, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 683815854, 'comment_body': 'Oops! I had commented out this code. Not sure how I let it pass through! 😄 Will fix it in the next commit.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 683817089, 'comment_body': 'Understood ✔️ I had just added all the attributes I found in the `__init__()`. Thanks :))', 'comment_created': datetime.datetime(2021, 8, 5, 22, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 685022721, 'comment_body': 'This class is an interface, it will never be created directly. So we probably want to ensure the name here is the name of the class and not `Process Interface` as that phrase means nothing to the user. ', 'comment_created': datetime.datetime(2021, 8, 9, 8, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 685024202, 'comment_body': 'it would be great if there was a kwarg that we could pass a dictionary to which would then add more items to the table. That way for the subclasses of `ProcessInterface` they could bundle up useful information and pass it to the super.\r\n\r\nFor example in `distributed.deploy.ssh.Process` it would be great to be able to pass things like the PID of the SSH process.\r\n\r\nhttps://github.com/dask/distributed/blob/9569e08f28df3b870048ce7ae8b44961973af6c1/distributed/deploy/ssh.py#L19', 'comment_created': datetime.datetime(2021, 8, 9, 9, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 685029593, 'comment_body': 'See `Cluster` for an example of how we do this there \r\n\r\nhttps://github.com/dask/distributed/blob/9569e08f28df3b870048ce7ae8b44961973af6c1/distributed/deploy/cluster.py#L365', 'comment_created': datetime.datetime(2021, 8, 9, 9, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 685623797, 'comment_body': ""Haven't checked, but I think you should be able to grab that information with `self.__class__.__name__` @freyam "", 'comment_created': datetime.datetime(2021, 8, 10, 1, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 685632379, 'comment_body': ""Hmm, if we will never directly use a ProcessInterface class, but instead always use it through the Worker or Scheduler classes, then perhaps it doesn't make sense to have a heading here.\r\nInstead we might want a html string that can be returned by `super()._repr_html_()` and incorporated into the other class representations (https://github.com/dask/distributed/pull/4857)"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 685842006, 'comment_body': ""For clarity when I say `Scheduler` and `Worker` classes I don't mean `distributed.worker.Worker`. I mean something like `distributed.deploy.ssh.Worker` which is something different."", 'comment_created': datetime.datetime(2021, 8, 10, 9, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689619009, 'comment_body': ""This doesn't really seem necessary as `heading` is not being set and nothing different is being done in this method.\r\n\r\nI would be tempted to just remove it and allow the `super` to handle it."", 'comment_created': datetime.datetime(2021, 8, 16, 15, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689619136, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2021, 8, 16, 15, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689619946, 'comment_body': 'Given that the class name will likely be `Worker` or `Scheduler` for basically every implementation we probably want to include the full class path. You can use `dask.utils.typename` for this.\r\n\r\n```python\r\ndask.utils.typename(type(self))\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689637233, 'comment_body': ""Oh wow! Didn't know about this. This makes it easier :+1: \r\n\r\nAdded it."", 'comment_created': datetime.datetime(2021, 8, 16, 15, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689637783, 'comment_body': 'Added :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 8, 16, 15, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689643685, 'comment_body': 'Sorry I meant to delete this whole method. It is redundant.', 'comment_created': datetime.datetime(2021, 8, 16, 15, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689643781, 'comment_body': 'And this one.', 'comment_created': datetime.datetime(2021, 8, 16, 15, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689688041, 'comment_body': 'Oh! I am surprised it still works after removing this.\r\nDoes it know which `_repr_html_`  to call from the fact that Worker is a child class of Process?', 'comment_created': datetime.datetime(2021, 8, 16, 16, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689689561, 'comment_body': 'Yes, python has a strict method resolution procedure, which class inheritance relies on. You can see the places python will look to find an attribute with, for instance, `Worker.mro()` (this is the class object, not an instance).', 'comment_created': datetime.datetime(2021, 8, 16, 16, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 689689731, 'comment_body': 'Yeah. This is all part of class inheritance. Unless you state otherwise it takes on all the methods of the parent (which takes on everything from its parent, and so on).', 'comment_created': datetime.datetime(2021, 8, 16, 16, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689691188, 'comment_body': 'This can also be removed as they are identical to the `__repr__` on `Process`.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689691433, 'comment_body': 'This one is also identical to the parent one so can be removed.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689697737, 'comment_body': 'I also changed the typename to the  `dask.utils.typename(type(self))`\r\n![image](https://user-images.githubusercontent.com/62539811/129599524-877df2fb-55a5-48b9-bf7f-4f847d017d22.png)\r\n\r\nIs this a good change?\r\nIt was ""SSH Worker"" and ""SSH Scheduler"" before.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690167877, 'comment_body': 'I have no strong preference here.\r\n\r\nI would suggest updating the status to be a string so that it looks like `status=""running""`. I\'m not sure showing the `Status` object here has much value.', 'comment_created': datetime.datetime(2021, 8, 17, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690199328, 'comment_body': 'Oh yes, that is shorted and cleaner.', 'comment_created': datetime.datetime(2021, 8, 17, 9, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690358371, 'comment_body': 'You can just use the enum name property.\r\n\r\n```suggestion\r\n        return f""<{type(self).__name__}: status={self.status.name}>""\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 13, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690359687, 'comment_body': 'Oh! perfect. Yes, I have seen this used elsewhere as well in the code base.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690379398, 'comment_body': '@freyam there is another one of these that needs updating too.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690383192, 'comment_body': 'My bad! I overlooked it. Fixed it now.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690391484, 'comment_body': 'This `_repr_html_` method still needs removing.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690423712, 'comment_body': ""Oh yes! Removed.\r\nI allso removed the `__repr__` from Process and edited the ProcessInterface's `__repr__` to follow the same pattern."", 'comment_created': datetime.datetime(2021, 8, 17, 14, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690426878, 'comment_body': '@jacobtomlinson Wow, I am super tired today :smile: I had committed the changes but forgot to push. ', 'comment_created': datetime.datetime(2021, 8, 17, 14, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': 'ab6b46d0749a1ef67a2892dcc57ee209501945cf', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e42b4b0f60d855d7e0ee82714f6c7bf8341be58', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d3451f00638fdf9ea84ad751a9a94011bbbb96', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a343a781eaa94e10e7f79c0dd1bfcf4b28f3ed', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5daedc6692a8e1573745ba36a7c50b4f9d646068', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c018ece4f79b5954e9c48e003a102ffe30cac7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47412dce0974113069af09d462e4371847506aea', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd464e320e9ac8929fb2cc12b4b8f7c15b8d85b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea635cf1c2ca899fe13e25363bfc37a7035241d2', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0057e13aa6ff8448f8eb47b9a77f75da25bb136c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9796cc017ea05a55aad7735ff42ba800d2839c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453f83c886a916d68a5ff7835bbb9e829ce1c9f0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3c02ef0fb37c0cc160d76e75d8607b31e42881', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a06ebebc1d6ba53d5b777db07b404e8da9490c6d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f96f11096c5a9516cca9c68f7305d6ac9f03ca5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0abb321a03ac9e2a1884268a4b0b15aab772efa4', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588c3ac2dc9b29153bce3cfcbfa2c12f53944340', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b7909b83a8d25f5de69c59269a1adc1abfa259', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d9aee0a882d01ff47e172e7e4689a9ef2f7535c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a12218de69d3c20e54203e973db7dbe4b6e9cb32', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9184898a2e6fc9a59ca9a94f6140f8531e31890', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3f0878c66c0266b527e77488c4ed6dc04f8706', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
707237376,Google Summer of Code 2021 Project,"I will be writing about my work in the summer working along with @GenevieveBuckley and @martindurant on the different representations of Dask computation.

This has been part of the annual Google Summer of Code program where students get the opportunity to work with mentors on large-scale projects.

The blogpost would contain a list of all the merged work and what the new features mean to the users :rocket: ",True,107,https://api.github.com/repos/dask/dask-blog/pulls/107,https://github.com/dask/dask-blog/pull/107,closed,234,0,9,8,9,40,0,0,[],2021-08-10 10:43:45+00:00,2021-08-23 23:27:01+00:00,1168996.0,"13 days, 12:43:16","[{'comment_id': 689282245, 'comment_body': '```suggestion\r\ntitle: Google Summer of Code 2021 - Dask Project\r\n```\r\n\r\nGSOC is not likely to be an acronym most people know, better to spell it out in full.', 'comment_created': datetime.datetime(2021, 8, 16, 6, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689283358, 'comment_body': ""This change is too minor to include in our update of new features, let's leave it out."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689287922, 'comment_body': ""I'd like this bugfix to go at the end of the first section, since Dask users will be more interested to hear about new features first."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689292071, 'comment_body': ""We don't need a demo for the bugfix. Nothing here is changing, except that it doesn't crash when it's not supposed to (which is great, but doesn't need a picture or code snippet)"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689294059, 'comment_body': ""I'm not sure how annoying it is to make another demo, but it would be nice to have the tooltip example be the same as the node size scaling example. Then it feels a bit more like a continuation of the same thing, which is nice for readers."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689296307, 'comment_body': ""Extra references we can link to:\r\n* Blogpost introducing the high level graph HTML repr in July this year - https://blog.dask.org/2021/07/07/high-level-graphs#visualization\r\n* Matt's blogpost about HTML reprs from 2019 - https://matthewrocklin.com/blog/2019/07/04/html-repr"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689296702, 'comment_body': 'Looks great :smile: ', 'comment_created': datetime.datetime(2021, 8, 16, 7, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689297052, 'comment_body': ""I don't see this file in the images folder"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689297124, 'comment_body': ""I don't see this file in the images folder, either"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689297265, 'comment_body': 'I am waiting for the PR to be merged. I will add the image later.\r\n', 'comment_created': datetime.datetime(2021, 8, 16, 7, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689297569, 'comment_body': ""All the unmerged PRs don't have screenshots yet."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689299634, 'comment_body': ""We've been using an `## Executive Summary` heading for the short summary up the top.\r\n\r\nThe first sentence needs to be about why someone should read this post, eg: introducing new features\r\n\r\nAlso worth including is information about when & how people can use the new changes. Right now you can do that with the dask/distributed main branch, or wait for the next dask/distributed release (`2021.08.1` or higher)."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689300101, 'comment_body': 'Is this sentence from the GSOC website? If so, we need to put it in quotation marks.', 'comment_created': datetime.datetime(2021, 8, 16, 7, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689300530, 'comment_body': 'Beautiful!', 'comment_created': datetime.datetime(2021, 8, 16, 7, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689302742, 'comment_body': ""I also don't see this one in the repository - perhaps you're waiting on the final design to have no more changes first?"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689303394, 'comment_body': 'Yes! :heavy_check_mark: \r\n', 'comment_created': datetime.datetime(2021, 8, 16, 7, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689313000, 'comment_body': ""Also for the distributed side of things, we'll want to acknowledge Jacob Tomlinson's work (eg: https://github.com/dask/distributed/pull/4857 and https://github.com/dask/distributed/pull/4853)"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691801488, 'comment_body': '@freyam the image demo for the Security HTML repr needs to be added to the `images` folder.', 'comment_created': datetime.datetime(2021, 8, 19, 5, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691801998, 'comment_body': '@freyam the image demo for the ProcessInterface HTML repr needs to be added to the images folder. (This is the example with the SSH scheduler / workers, not using `Process` or `ProcessInterface` directly.)\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 5, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691802322, 'comment_body': '@freyam Is this the code example that was used to generate the demo images? If not, please update the example code here so they match.\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 5, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691802657, 'comment_body': '@freyam this image demo for layer colours needs to be added to the `images` folder.', 'comment_created': datetime.datetime(2021, 8, 19, 5, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691802847, 'comment_body': '@freyam please fill in the example code you used to generate the demo images below.', 'comment_created': datetime.datetime(2021, 8, 19, 5, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691803101, 'comment_body': 'Maybe Gen should add a note on Materialized layers?', 'comment_created': datetime.datetime(2021, 8, 19, 5, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691803863, 'comment_body': 'Nice to have, but not required: it would be good if this demo image used the same example code as the node scaling demo in the section above. Then this section feels more like a natural continuation.\r\n\r\n@freyam ', 'comment_created': datetime.datetime(2021, 8, 19, 5, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691806717, 'comment_body': '(Removed the sentence)', 'comment_created': datetime.datetime(2021, 8, 19, 5, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691806834, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 5, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692162246, 'comment_body': ""Just my feeling, but I feel like this won't actually be read by any executives. I understand this is a known and common phrase, but I prefer something more precise:\r\n\r\n- TL;DR (not bothering to read the whole thing)\r\n- abstract\r\n- precis \r\n- overview"", 'comment_created': datetime.datetime(2021, 8, 19, 14, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692167018, 'comment_body': 'Add a brief sentence saying that graphviz/visualize has been around as a useful diagnostic tool for a long time for both low- and high-level graphs. Do we need to define what we mean by ""graph""? If we can keep it concise, I would suggest yes.', 'comment_created': datetime.datetime(2021, 8, 19, 14, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692167610, 'comment_body': '(where `result` is a dask object or collection)', 'comment_created': datetime.datetime(2021, 8, 19, 14, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692168363, 'comment_body': 'Link to https://docs.dask.org/en/latest/graphviz.html', 'comment_created': datetime.datetime(2021, 8, 19, 14, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692169154, 'comment_body': '(because each visual node corresponds to one task)', 'comment_created': datetime.datetime(2021, 8, 19, 14, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692174617, 'comment_body': '""disk can be a limiting factor"" -> ""storage/network services is often high-latency and therefore a bottleneck""\r\n\r\n(disk writes are usually the fastest IO you have available!)\r\n\r\nI would remove or move the parenthesis, it doesn\'t seem to belong with this bullet.', 'comment_created': datetime.datetime(2021, 8, 19, 14, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692175562, 'comment_body': ""I don't know if it matters, but `black`, the code formatter used by Dask, insists on two spaces before a comment `#` character."", 'comment_created': datetime.datetime(2021, 8, 19, 14, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692220690, 'comment_body': 'will be accessed via subclasses such as SSH scheduler or workers.', 'comment_created': datetime.datetime(2021, 8, 19, 15, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692688454, 'comment_body': 'Overview it is, then', 'comment_created': datetime.datetime(2021, 8, 20, 6, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692704024, 'comment_body': ""I don't have any strong attachment to the phrase - I just saw someone else use it to summarize a dask blogpost and have repeated that pattern ever since.\r\n"", 'comment_created': datetime.datetime(2021, 8, 20, 6, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692708946, 'comment_body': 'Thank you for the fix!', 'comment_created': datetime.datetime(2021, 8, 20, 6, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692709168, 'comment_body': ""I've removed the parenthesis, you're right, it really doesn't belong."", 'comment_created': datetime.datetime(2021, 8, 20, 6, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692723780, 'comment_body': '> (disk writes are usually the fastest IO you have available!)\r\n\r\nI feel like I should clarify - what I was trying to say is that anything to do with moving data from storage is much slower than anything where the data already exists entirely in-memory. I did a poor job of it though, thanks for helping us make a better explanation.', 'comment_created': datetime.datetime(2021, 8, 20, 7, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692726228, 'comment_body': ""I don't know if we should write more about materialized layers here. I can't think of a good way to say:\r\n* ideally we won't see many materialized layers before `compute()` is called\r\n* but we might see some and that's ok\r\n* but you might also accidentally materialize layers without meaning to, perhaps by counting the number of tasks or looking at the HTML repr (which in turn counts the number of tasks)\r\n* and fixing that is a job for dask developers, not dask users\r\n\r\nI think on balance this might be more confusing than helpful. If anyone has ideas or thoughts around this I'd be interested to hear them."", 'comment_created': datetime.datetime(2021, 8, 20, 7, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}]","[{'commit_sha': '7a4b2d52dbff5ba2705e603dc66e54e84e172fe1', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1750165897c4784dd9c772a84c977cba3f5220', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d13b4b403c9692b5325acec8b0b702f44038cc', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90406106a06e87a18916f2be14af975673afc277', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4882a2eefe39d21feda2fc9bab9bfa181fe60a64', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ca4754d7072532bf9ee9b409aa35d4d2aa77a9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e323caa6f5d4c34339e36ad4803ec8b14f9fa9', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a83639079f4269b542f0fb323efe05eb1ae93a8', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
611277320,Updated Binder Badge Image,"- [x] Closes #206
- [x] Tested successfully on https://mybinder.org/
- [x] Passed the GithHub Checks

Link: https://mybinder.org/v2/gh/freyam/dask-tutorial/main",True,211,https://api.github.com/repos/dask/dask-tutorial/pulls/211,https://github.com/dask/dask-tutorial/pull/211,closed,2,2,2,1,2,0,0,0,[],2021-04-08 07:06:14+00:00,2021-04-08 14:44:37+00:00,27503.0,7:38:23,[],"[{'commit_sha': '35a4e1567893ef6ad043d4dcddf5846521d7bd5b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
659087810,Fixing calling `.visualize()` with `filename=None`,"- [x] Closes #7685 
- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

## The Issue
The issue arised when the `format` and the `filename` arguments both were `None`. So, 

https://github.com/dask/dask/blob/1a6a85258bccb14fe37bb54c211beeeffd46cd55/dask/dot.py#L276-L278

would result in an error as it's trying to call the `.lower()` function on a `NoneType` filename.

## The Fix
To fix this, I added an extra condition before it reaches the line of error to make sure `format` is not `None` by making it equal to the default (""png"").


## The Demo
![image](https://user-images.githubusercontent.com/62539811/120347731-97944580-c30d-11eb-96e7-9f513e46075d.png)

",True,7740,https://api.github.com/repos/dask/dask/pulls/7740,https://github.com/dask/dask/pull/7740,closed,11,2,2,16,23,19,0,0,[],2021-06-01 15:03:32+00:00,2021-06-08 14:11:00+00:00,601648.0,"6 days, 23:07:28","[{'comment_id': 643218084, 'comment_body': ""Cat it happen that `format` is still `None` here, e.g., a filename was given but didn't match any of the known extensions?"", 'comment_created': datetime.datetime(2021, 6, 1, 15, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 643219567, 'comment_body': 'You could use `monkeypatch` to temporarily change `display_cls`, so that it has an effect you can check from the test function.\r\n\r\nDo you know how to do this?', 'comment_created': datetime.datetime(2021, 6, 1, 15, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 643243216, 'comment_body': ""Oh yes! I shouldn't have deleted the previous check for that. This was the issue! The failed tests pass now :tada: :heavy_check_mark: "", 'comment_created': datetime.datetime(2021, 6, 1, 16, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643244326, 'comment_body': 'No, never heard of `monkeypatch`. Can you point me to relevant resources?', 'comment_created': datetime.datetime(2021, 6, 1, 16, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643249689, 'comment_body': 'I went through [this](https://docs.pytest.org/en/6.2.x/monkeypatch.html) and this is exactly what I was looking for! Wow :100:  ', 'comment_created': datetime.datetime(2021, 6, 1, 16, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643255691, 'comment_body': 'Ping me if you cannot quickly figure it out, I can show you how I would do this.\r\n', 'comment_created': datetime.datetime(2021, 6, 1, 16, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 643602852, 'comment_body': 'Should these two if statements be logically grouped with each other?\r\n\r\n```python\r\nif format is None and filename is None:\r\n    pass\r\nelif format is None and any(filename.lower().endswith(fmt) for fmt in fmts):\r\n    # do the thing...\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 2, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643606796, 'comment_body': 'It\'s confusing to work out what is actually being tested just from reading the new test code you\'ve added. To address this, I\'d probably recommend splitting it up into it\'s own separate test and call that something like `test_visualize_no_filename`. Then the name of the test can do the work of describing what the test is for.\r\n\r\nWhether something should be a new test, or part of an existing test is a bit of a borderline judgement call, and other people might disagree with me. Ultimately, I think it\'lll save time for future developers because it\'s a clearer way to mark ""you can ignore this bit"" if they\'re not looking into the specific case where `filename=None`.', 'comment_created': datetime.datetime(2021, 6, 2, 2, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643621381, 'comment_body': ""It's possible I'm a bit confused here, but isn't the mocked behaviour for the function the same as the regular behaviour?\r\nIf that's true, do we really need to add the extra complexity of mocking? It might be a lot simpler to just add `visualize(x, filename=None)` as a line in `test_visualize` and a comment indicating that the test will fail if an error is raised by that line of code. \r\n\r\n(Note: that's the pytest default, a test will fail if an error is raised anywhere in it, but a comment is helpful for developers who are generally looking for assert statements to tell them what the test is about)"", 'comment_created': datetime.datetime(2021, 6, 2, 3, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643621706, 'comment_body': '@martindurant have I misunderstood something about the mocking here (entirely possible) or is it a bit overkill?', 'comment_created': datetime.datetime(2021, 6, 2, 3, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 643753331, 'comment_body': 'Oh yes, this makes more sense. Updated :+1: ', 'comment_created': datetime.datetime(2021, 6, 2, 8, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 643777263, 'comment_body': 'Yes, this seems to be a better option.\r\n\r\n```py\r\n@pytest.mark.skipif(""not da"")\r\n@pytest.mark.skipif(\r\n    sys.flags.optimize, reason=""graphviz exception with Python -OO flag""\r\n)\r\ndef test_visualize_no_filename(monkeypatch):\r\n    pytest.importorskip(""graphviz"")\r\n    pytest.importorskip(""dask.dot"")\r\n\r\n    x = da.arange(10)\r\n\r\n    test_list = []\r\n    _mock_get_display_cls = dask.dot._get_display_cls\r\n\r\n    def mock_fx(format):\r\n        test_list.append(True)\r\n        return _mock_get_display_cls(format)\r\n\r\n    monkeypatch.setattr(dask.dot, ""_get_display_cls"", mock_fx)\r\n    visualize(x, filename=None)\r\n    assert True in test_list\r\n```\r\n  \r\nI can add this (the test :heavy_check_mark:)\r\nI will wait for the final decision on using monkeypatch to mock behavior and then commit accordingly!', 'comment_created': datetime.datetime(2021, 6, 2, 9, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 645228277, 'comment_body': ""It is the same behaviour, but this slightly odd construct makes sure that the function actually got called (as opposed to None being some kind of no-op). Could be removed for style's sake."", 'comment_created': datetime.datetime(2021, 6, 4, 1, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 645228692, 'comment_body': 'I have no opinion on one test versus two', 'comment_created': datetime.datetime(2021, 6, 4, 1, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 646002952, 'comment_body': 'Actually, these three lines could be condensed, either\r\n```\r\nif format is None and filename is not None and any(filename.lower().endswith(fmt) for fmt in fmts):\r\n```\r\nor\r\n```\r\nif format is None and any((filename or """").lower().endswith(fmt) for fmt in fmts):\r\n```\r\nThe second is shorter, the first is clearer.', 'comment_created': datetime.datetime(2021, 6, 5, 15, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 646003088, 'comment_body': ""As @GenevieveBuckley  said, a comment here for what we're doing (this patch ensures that display_cls got called successfully) would be good."", 'comment_created': datetime.datetime(2021, 6, 5, 15, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 646010687, 'comment_body': ""I added the first one! Even though it's longer, using `black` formatting, it looks very clean.\r\n\r\n```py\r\nif (\r\n    format is None\r\n    and filename is not None\r\n    and any(filename.lower().endswith(fmt) for fmt in fmts)\r\n):\r\n    filename, format = os.path.splitext(filename)\r\n    format = format[1:].lower()\r\n```"", 'comment_created': datetime.datetime(2021, 6, 5, 16, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 646011047, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 6, 5, 16, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 646233772, 'comment_body': 'For clarity, you might like to rename `test_list` to something more meaningful. Maybe something like `was_mock_function_called`?', 'comment_created': datetime.datetime(2021, 6, 7, 2, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}]","[{'commit_sha': '7d0b4ad8cce70ef78d468534a0ea749c027a25c3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d2dafa5f585db1f2763fb8c750baaf34a1f630', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b171fade8b1e93bbb14a1a8a2acb24103190f05e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f613fc3d52c1665e41de4f1dfc4fe021cf99bd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff359e7f25c01ee482a1b8c9d4820de043e2b23', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c0124a94691b7b7f7f751f91b3756766de383e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bdcbaa8e1323ea0b83bee5740a94628ceff1624', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd20a1d04db0e892d05ed8bfa5a6d1c070dd727c5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2f41468d3246f78122480e3b665fbd23656c4a9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dedf6f47ab589464b94ad4d9dd6ab9abcc6a6f54', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfeb4f543e3bc881dc59a3b9081f021cc10799db', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de74506cc718e988facbcdaaac449f10f0903686', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '711e0859067c06605f436e93e7d147b2ce1f1d3f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b7fedc0843285557219662e31af3413adbfecb9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ccb83b5ed3268789898b559c926c8fa97b7e872', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52c575d95b4bb16b855f9546fce656319dbc3c4a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
683553085,Add node size scaling to the Graphviz output for the high level graphs,"- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

/cc @martindurant @GenevieveBuckley

Hi. I created this PR to add new size features to the HighLevelGraphs Graphviz depiction based on the amount of tasks each HLG layer has.

This is a follow-up to the information found at https://github.com/dask/dask/issues/7847/.

For now, I have just added a simple implementation of just a trivial case.

At this point in the code, adding new conditions and loops is simple and quick. All that remains is to decide how we want to display this information on the HLG.",True,7869,https://api.github.com/repos/dask/dask/pulls/7869,https://github.com/dask/dask/pull/7869,closed,26,10,1,10,30,4,0,0,[],2021-07-05 10:00:00+00:00,2021-07-20 01:06:50+00:00,1264010.0,"14 days, 15:06:50","[{'comment_id': 664177585, 'comment_body': 'I would like to see fontsize as a continuous variable, rather than these discrete ""buckets"" for different ranges.\r\n\r\nIf it\'s a bit too tricky for you to do this with log scaling, a good first step might be to make an implementation with a linear relationship between ntasks and fontsize.', 'comment_created': datetime.datetime(2021, 7, 6, 1, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 664179766, 'comment_body': 'Oh yes. I thought of the same. For now, I just wrote something very simple. \n\nOnce our plan is final, I will make it clean.', 'comment_created': datetime.datetime(2021, 7, 6, 1, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 666619902, 'comment_body': 'This is a much nicer implementation than the first one you had :smile: ', 'comment_created': datetime.datetime(2021, 7, 9, 1, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 666649602, 'comment_body': 'Yayyy :rocket: ', 'comment_created': datetime.datetime(2021, 7, 9, 3, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '7208f39673bce7c0f5843f1fb5646790c578ef6f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42a52241f54671c3396c15d12d7abc5cf3660090', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc9da7101cd1e9f47af57e53cd95bbc36de2014', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbfffbaeb9a9bbc8fe7bc47d7bf8341fc2b21f5b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197dfcd23e18a74a1e837bccc86e4e61513a3827', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e1f923bf277bff6736287eb916ec066292303a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8a4db13f728991dc7d4d6258e2bc686d776281', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a932312672ea1e4c2af8e6208aad23365da224ab', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48286d599bef74af7c7f0a80ca14c7ed07e93603', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab7312ee87c4c7ae4c844f482091202cfa17b2f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
687652639,Add `dask.array` SVG to the HTML Repr,"(#7847)

- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

# `Task 2A`

## New Features

- #### Added the Dask Array SVG of the chunks to the HTML Repr
 
## Before

![image](https://user-images.githubusercontent.com/62539811/125258928-de635b00-e30f-11eb-840d-1bcef363411b.png)

## After

```py
import dask.array as da

XL = da.ones((67552, 365941), chunks=(652, 5792))
XL2 = XL.T.astype(""f4"")
XC = da.ones((365941, 26), chunks=(365941, 26))
LS = da.linalg.lstsq(XC, XL2)[0]
XC_LS = XC @ LS
XLP = XL2 - XC_LS

XLP.dask
```

![image](https://user-images.githubusercontent.com/62539811/126084254-c2fb02c3-0c64-4336-8ba8-8ad4d204fff8.png)
![image](https://user-images.githubusercontent.com/62539811/126084264-864ab814-dcfc-47bb-8a59-46fdf3dcd208.png)
![image](https://user-images.githubusercontent.com/62539811/126084267-a9f67f6c-93b6-4ee8-ae2c-b8ff0d625b2f.png)
![image](https://user-images.githubusercontent.com/62539811/126084269-472bbc95-8b39-405c-848b-d317bc41e39d.png)
![image](https://user-images.githubusercontent.com/62539811/126084276-af75f8a0-6e22-4943-a90a-6c47641e56a9.png)
![image](https://user-images.githubusercontent.com/62539811/126084281-372a6f5e-e59f-4c35-a0d7-deaaa5f7611d.png)

The computation looks incredible! :fire:
",True,7886,https://api.github.com/repos/dask/dask/pulls/7886,https://github.com/dask/dask/pull/7886,closed,21,11,2,38,14,25,1,0,[{'name': 'array'}],2021-07-12 09:08:39+00:00,2021-07-30 16:37:20+00:00,1582121.0,"18 days, 7:28:41","[{'comment_id': 668490995, 'comment_body': ""Not sure you need to say `size=200`, given the default value is 200. I would say that part of the code is pretty stable, I don't think it's likely to change anytime soon."", 'comment_created': datetime.datetime(2021, 7, 13, 7, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 668495818, 'comment_body': 'If you use the dictionary [get](https://www.programiz.com/python-programming/methods/dictionary/get) method, you can avoid having to first check if ""type"" is in the dictionary before checking its value.', 'comment_created': datetime.datetime(2021, 7, 13, 7, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 668538925, 'comment_body': 'Very likely we want this import to live somewhere else before merging (I know you had some problems with the imports earlier)\r\n', 'comment_created': datetime.datetime(2021, 7, 13, 8, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 669102271, 'comment_body': ':heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 13, 20, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 669104027, 'comment_body': ':heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 13, 20, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 669153357, 'comment_body': ""I tried several things. No elegant solution was found.\r\n\r\nTurns out, it's a case of Circular Imports.\r\nTrying to fix it rn. \r\n\r\n`dask.array` imports `dask.delayed` which imports `HighLevelGraph` which in turn imports `dask.array`\r\n\r\n```\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-1-dc46e0049dfc> in <module>\r\n----> 1 import dask.array as da\r\n      2 \r\n      3 x = da.random.random((10000, 10000), chunks=(100, 100))\r\n      4 y = x + x.T - x.mean(axis=0)\r\n      5 y.dask\r\n\r\n~/GitHub/dask/dask/__init__.py in <module>\r\n      3 from .base import annotate, compute, is_dask_collection, optimize, persist, visualize\r\n      4 from .core import istask\r\n----> 5 from .delayed import delayed\r\n      6 from .local import get_sync as get\r\n      7 \r\n\r\n~/GitHub/dask/dask/delayed.py in <module>\r\n     18 from .context import globalmethod\r\n     19 from .core import quote\r\n---> 20 from .highlevelgraph import HighLevelGraph\r\n     21 from .optimization import cull\r\n     22 from .utils import OperatorMethodMixin, apply, ensure_dict, funcname, methodcaller\r\n\r\n~/GitHub/dask/dask/highlevelgraph.py in <module>\r\n     23 from .utils import _deprecated, ensure_dict, key_split, stringify\r\n     24 from .utils_test import add, inc  # noqa: F401\r\n---> 25 from dask.array.svg import svg\r\n```\r\n\r\nI believe, that's why importing `svg` inside the method works for now as it has no conflicts.\r\n"", 'comment_created': datetime.datetime(2021, 7, 13, 22, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 669225336, 'comment_body': ""Potentially we could move the svg.py file up, so it doesn't live under the array module anymore. Or keep this solution, delaying the import until inside the function (although I think it should probably have the relative import path with dots, instead of starting with dask dot ...)\r\n\r\nWe should think about this some more, and then try and work out what the cleanest solution is. "", 'comment_created': datetime.datetime(2021, 7, 14, 2, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 669238441, 'comment_body': ""In the future I would like to use classes for this.  I would expect array layers to be of some type, like `ArrayLayer`, and then I would expect to call `layer.get_fancy_repr()` or something similar and then the array layers can call the array code dataframe layers can call the dataframe code, etc..\r\n\r\nThis isn't built out yet though, so we'll probably have to be sloppy until then."", 'comment_created': datetime.datetime(2021, 7, 14, 2, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrocklin', 'type': 'User'}, {'comment_id': 669277965, 'comment_body': 'Just for testing, I moved `svg.py` from `dask/array/svg.py` to `dask/svg.py` and then imported that using\r\n```py\r\nfrom .svg import svg\r\n```\r\nand it works (on top) :tada:. If we plan on using this fix, I will have to change a little code in some files too to make sure the right file is getting imported!\r\n\r\n------\r\n\r\nAlso, I have edited the current absolute addressing to relative and it still works!\r\n```py\r\nfrom .array.svg import svg\r\n```\r\nworks **inside the method**.', 'comment_created': datetime.datetime(2021, 7, 14, 4, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 671940821, 'comment_body': 'If we go with the import happening inside the method here, then I think it makes most sense to put it in this block:\r\n\r\n```python\r\n            if chunks is not None:\r\n                from .array.svg import svg\r\n                svg_repr = ""<br />"" + svg(chunks)\r\n```\r\n\r\nGiven Matt\'s comment above, I\'m leaning towards this. As discussed, it\'s sloppy, but it is more minimally invasive than the other suggestion I made which would take more work to undo whenever we get to Matt\'s ideal final state later on. So that\'s why I\'d prefer it.\r\n\r\nGenerally my concern with this is that repeatedly importing something will slow things down (although most likely generating the svg is likely a fair bit slower than the import is). @freyam could you comment on how ""laggy"" it feels for something like [this example](https://github.com/dask/dask/issues/7847#issuecomment-882126098)? It\'s possible this isn\'t a massive problem right now and isn\'t worth worrying about.\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 19, 1, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 671944327, 'comment_body': 'Please add a comment explaining why we do this', 'comment_created': datetime.datetime(2021, 7, 19, 2, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 671945050, 'comment_body': ""Also, this isn't super extendable if we add other keys to the dictionary that we also want to skip. If we did that, you might want a list of key names to skip, and then check `if key is in keys_to_skip: ...`\r\nNot sure if we need to do that here (probably not, but you need to understand how that would happen if we needed it).\r\n"", 'comment_created': datetime.datetime(2021, 7, 19, 2, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672596682, 'comment_body': '1. Added a comment. \r\n2. yes, you are right. It would be a lot cleaner if I had a list of keys to not include in the HTML. If we end up having more than 1, i will use a list instead as suggested :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 19, 20, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672609205, 'comment_body': '1. Moved the import inside, so it only gets called when needed.\r\n2. Surpringly, it\'s taking the same time as the current Dask implementation.\r\n\r\n|                                   dask/dask                                   |                                  freyam/dask                                  |\r\n|:-----------------------------------------------------------------------------:|:-----------------------------------------------------------------------------:|\r\n| 33.7 ns ± 0.743 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) | 34.3 ns ± 0.615 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) |\r\n\r\n\r\nCalculated locally using `%timeit` on the following code.\r\n\r\n```py\r\nimport dask.array as da\r\n\r\nXL = da.ones((67552, 365941), chunks=(652, 5792))\r\nXL2 = XL.T.astype(""f4"")\r\nXC = da.ones((365941, 26), chunks=(365941, 26))\r\nLS = da.linalg.lstsq(XC, XL2)[0]\r\nXC_LS = XC @ LS\r\nXLP = XL2 - XC_LS\r\n\r\nXLP.dask\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 20, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672729872, 'comment_body': ""You'll want timeit only on the very last line `XLP.dask`"", 'comment_created': datetime.datetime(2021, 7, 20, 0, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672730673, 'comment_body': 'Unfinished sentence. Suggest rephrasing to a shorter comment. Maybe also placing the comment one line before the if statement begins (that would be two lines, rather than 3)', 'comment_created': datetime.datetime(2021, 7, 20, 0, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672731648, 'comment_body': ""This materialized layer stuff belongs in a separate PR, imo.\r\nAlso, isn't there some extra logic about what to do if no `collection_annotations` are passed in (I seem to remember we looked in the dask config, but maybe that was only for `annotations` instead)"", 'comment_created': datetime.datetime(2021, 7, 20, 0, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 672799082, 'comment_body': 'Yes, I had done that.', 'comment_created': datetime.datetime(2021, 7, 20, 4, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672799886, 'comment_body': 'Oh! fixed it. :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 20, 4, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 672871974, 'comment_body': 'The issue with that is that I need all the layers (`Layers` and `MaterializedLayers` both) to have a `collection_annotations` dictionary.\r\n\r\nI guess, for now, I can just add an extra if statement up top and remove the changes I made to `MaterializedLayer` class.\r\n\r\n```py\r\nsvg_repr = """"\r\nif (\r\n    self.collection_annotations is not None\r\n    and self.collection_annotations.get(""type"") == ""dask.array.core.Array""\r\n):\r\n    chunks = self.collection_annotations.get(""chunks"")\r\n    if chunks:\r\n        from .array.svg import svg\r\n\r\n        svg_repr = ""<br />"" + svg(chunks)\r\n```\r\n\r\nThis also works :heavy_check_mark: and I feel it\'s a better method for now. I will commit this :+1: \r\n\r\nAccording to my knowledge, the config method doesn\'t seem to do anything for `annotations` and `collection_annotations` as we only have the following keys only.\r\n\r\n```py\r\nconfig = {\r\n            ""temporary-directory"": None,\r\n            ""dataframe"": {""shuffle-compression"": None},\r\n            ""array"": {\r\n                ""svg"": {""size"": 120},\r\n                ""slicing"": {""split-large-chunks"": None},\r\n                ""chunk-size"": ""128MiB"",\r\n                ""rechunk-threshold"": 4,\r\n            },\r\n            ""optimization"": {\r\n                ""fuse"": {\r\n                    ""active"": None,\r\n                    ""ave-width"": 1,\r\n                    ""max-width"": None,\r\n                    ""max-height"": inf,\r\n                    ""max-depth-new-edges"": None,\r\n                    ""subgraphs"": None,\r\n                    ""rename-keys"": True,\r\n                }\r\n            },\r\n        }\r\n   ```\r\n\r\nAm I missing out on something? I checked around in the `config,py` as well.', 'comment_created': datetime.datetime(2021, 7, 20, 7, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 679699130, 'comment_body': '```suggestion\r\n                # Hide verbose chunk details from the HTML table\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 7, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 679700022, 'comment_body': 'We want to explain the reason *why*, not just what the code is doing. (Reason being, the chunks information is often too verbose to be easily displayed in the HTML table)', 'comment_created': datetime.datetime(2021, 7, 30, 7, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 679707672, 'comment_body': 'Yes, absolutely! Your suggestion is more appropriate and might be useful in the future if we decide to hide more properties.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 679707712, 'comment_body': 'We talked about this import placement previously, and I think this is probably the best way to leave it', 'comment_created': datetime.datetime(2021, 7, 30, 7, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 679708469, 'comment_body': ':heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 7, 30, 7, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '7208f39673bce7c0f5843f1fb5646790c578ef6f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42a52241f54671c3396c15d12d7abc5cf3660090', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc9da7101cd1e9f47af57e53cd95bbc36de2014', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbfffbaeb9a9bbc8fe7bc47d7bf8341fc2b21f5b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197dfcd23e18a74a1e837bccc86e4e61513a3827', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e1f923bf277bff6736287eb916ec066292303a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8a4db13f728991dc7d4d6258e2bc686d776281', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a932312672ea1e4c2af8e6208aad23365da224ab', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48286d599bef74af7c7f0a80ca14c7ed07e93603', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab7312ee87c4c7ae4c844f482091202cfa17b2f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ebc581a6339887eb112c48bbf2cfe51db0f9f22', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43326f2bdf587d07e524b62c6e7ff18a0698dae7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c71207ad0351bbda8d3263e59de3d0f3739dd1fd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '805437d1a97ec2bca7950f4d278f438868a55f70', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0826f76dea3ebf31d6325de0d0d1a355586dc9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '268742b4cdafbe6d7405b988151e34d7815be73a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd9f412704b203b704bc6ea342ab37abda097b9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372fc7afcf41ff087f888f8bc3ff5d3757662af3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6bd23c45f8285b1728ffd6cc8121e7119bbd93e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6ce8d6ec662bb24f42293074dd364f3c1222a73', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb85692770b6b77f82482d02c9581765b448451', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56b285300c639f87ec38a9fb265025e5c199b38', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13ae6a9cefa25d4990b9e1187b1d9393f219b722', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb2d55df9e2b6532f7e7621bdef820633065b04', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd4cec681c4224c363c29c67005e202dd6f8d2e9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b39415b54ec1d16a85987ad54be2033bc9b3a13d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dd8222effd242d6866b51c99d8a43aa7412575b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce807a15fb48d3ff1fcd5bc0fdf0e9ae18f22819', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e6fed31c598879ca70e5302a61691f218620b64', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c86be91d4e151a1f5ef6d0ede05d480e2a96e14f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa11f3f92611830eab28dbf21988995c00acc92a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a62a41515e4b04a0ea21ed20440752b2e9aedf2', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c362dc57acd3ed22a303d65bf2f72266060a3126', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3af8fc505fca4567ac584b0a199e4e38b53121f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c5f558e4e7698c90513761021e7d661550aa87a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eee2bab644a945e933f9e87efabc08e1f7acf26', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c660c320390878ef1093b3eb0189e15e234580f7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e87bce8da3135af166906bdbc3543f4f857ae2c3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
701307167,Add tooltips to graphviz,"- [x] Closes #7970 
- [x] Tests added + passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`

I have added tooltips in the graphviz representation of the graphviz output of High-Level Graphs.
Graphviz provides an additional attribute `tooltip` which is exactly what I needed.

I have added the contents of the `collection_annotations` for now.

Thanks to @GenevieveBuckley's work on this. It became very easy to add the existing information to the graphviz in the form of tooltips.

Note: I also have changed the default file type and file name to `dask-hlg.svg`. 
# Demo

## Dask Array

```py
import dask.array as da

x = da.ones((10, 10), chunks=(5, 5))
x = x + 100
x = x * 100

x.dask.visualize()
```

![image](https://user-images.githubusercontent.com/62539811/128592068-6e68cc10-d053-4ddd-afb1-05d514d45275.png)

## Dask DataFrame

```py
import dask.dataframe as dd

df = dd.demo.make_timeseries(
    start=""2000"",
    end=""2015"",
    dtypes={""A"": float, ""B"": int, ""C"": int, ""D"": int, ""E"": str, ""F"": float, ""G"": float, ""H"": str, ""I"": str},
    freq=""5s"",
    partition_freq=""3M"",
    seed=1234,
)
df = df.shuffle(1000)

df.dask.visualize()
```
![image](https://user-images.githubusercontent.com/62539811/128592094-24a9b01f-dbd1-4247-b834-e928c9247fb5.png)

If the number of columns is less, I show them too.

![image](https://user-images.githubusercontent.com/62539811/128592104-2f7f8143-49a6-4185-b4b5-f0b17e0dea2a.png)










",True,7973,https://api.github.com/repos/dask/dask/pulls/7973,https://github.com/dask/dask/pull/7973,closed,52,6,2,16,22,7,0,0,[],2021-08-02 09:45:18+00:00,2021-08-10 13:40:56+00:00,705338.0,"8 days, 3:55:38","[{'comment_id': 684852303, 'comment_body': 'Can you confirm this test fails if you run it on the dask main branch?\r\n\r\nAnd is there a way we can check the length of the information in the tooltip?', 'comment_created': datetime.datetime(2021, 8, 9, 0, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 684852654, 'comment_body': '```suggestion\r\ndef test_node_tooltips_exist():\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 0, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 684852822, 'comment_body': 'Nice work on this test, btw', 'comment_created': datetime.datetime(2021, 8, 9, 0, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 684958915, 'comment_body': 'Yes, it fails on the `main` branch\r\n![image](https://user-images.githubusercontent.com/62539811/128670186-36518758-4800-4b77-9fc5-ef26a34e7580.png)\r\n\r\n>  is there a way we can check the length of the information in the tooltip?\r\n\r\nI could simply save the length of the tooltip string in the `to_graphviz()` function.\r\nIf you want this to be included in the test, I could try some regex.', 'comment_created': datetime.datetime(2021, 8, 9, 7, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 684959949, 'comment_body': 'The only reason the tooltip would look super long is the column names in Dataframes and I have taken care of that in the `to_graphviz()` itself.', 'comment_created': datetime.datetime(2021, 8, 9, 7, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 685619098, 'comment_body': '> I could simply save the length of the tooltip string in the `to_graphviz()` function.\r\n> If you want this to be included in the test, I could try some regex.\r\n\r\nNo, we wouldn\'t want to save save the length of what the tooltip string should be in the `to_graphviz()` function - the idea of the test is that we check the function did what it was supposed to do by looking at the actual output that gets displayed.\r\n\r\nYes, let\'s try to use regex to check the length of the node\'s tooltip string. I\'m assuming that part of the string will look something like this: `... tooltip=""some tooltip information here"" ...`\r\nThen we could use `tooltip=""` and the closing quote `""` as the regex start & end markers and check that the number of characters inside the tooltip quotes is not zero. \r\n', 'comment_created': datetime.datetime(2021, 8, 10, 1, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 685622117, 'comment_body': ""You will also need to skip this test if graphviz is not installed. The mindeps-array-dataframe CI test is failing, and I think that is because graphviz is not included [in the environment](https://github.com/dask/dask/blob/main/continuous_integration/environment-mindeps-array-dataframe.yaml). Adding another line with pytest importorskip should fix that problem.\r\n\r\n(There is another failing CI check, but I don't think that is related to anything you've been working on here. It might magically become good next time it runs,  we'll see)"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}]","[{'commit_sha': '48154d809c11c426032a7087f894a628dc7740fd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d86833d1856d0923d2575528e8c7ed871f7a43b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c353fddea762ac19e134ea8da50c48cb331bbc14', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc848dce6312a960449f229b66188cf220e0b89', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38382bf33ece97ee58383db9c52edbddf04c1e66', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd08a930ee1eb841b2dc273ca70e07912ef1a553', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bb32d2bb1941754713d2899d7ffcd2dd5835a21', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b30a669f81406ff5445abd911c0709cff6b2dc66', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8b647b353b285079295ecdc488db19da1d71bd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1297ad58b92ea9771ed5ed820a14ead42194edff', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fbea04f0c1d8a3f023bfdcbed9b3a9fc9d387c2', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5e0649441d21a9cff852e29f67900941cacece0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7596cc9c9bb65ac2d472ce7bd49f91ba049eb07b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '032dcdc8317dd3b104949151eab50284c4d395fc', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ed01f5bde2cb5841900b8178382c33757f490a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '354f9f3adff333bf4445fca21119510a68511a11', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
701324019,Add colors to represent high level layer types,"- [ ] Closes #7919
- [x] Tests passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`


In this PR, I have added an extra attribute to the graphviz output of High-Level graphs - node fill color. Nodes are colored on the basis of their `layer_type`.

This was achieved by using DOT's `fillcolor` attribute.

Currently, this option is made optional to the users. They need to provide an additional kwarg while calling `dask.visualize()` with `color=""layer_type""`.

## Demo

```py
import dask
import dask.dataframe as dd

df = dask.datasets.timeseries()
df2 = df[df.y > 0]
df3 = df2.groupby('name').x.std()
```

### `c.dask.visualize(color=""layer_type"")`
![7974-AA](https://user-images.githubusercontent.com/62539811/129655948-004df074-7449-4725-8fe6-811ee050289e.png)

### `c.dask.visualize(color=""layer_type"")`
![image](https://user-images.githubusercontent.com/62539811/129747767-145a5092-8ee7-4414-a87f-18e50a8e7c2a.png)


## Color Scheme

```py
layer_colors = {
    ""DataFrameIOLayer"": ""purple"",
    ""ShuffleLayer"": ""rose"",
    ""SimpleShuffleLayer"": ""rose"",
    ""ArrayOverlayLayer"": ""pink"",
    ""BroadcastJoinLayer"": ""blue"",
    ""Blockwise"": ""green"",
    ""BlockwiseLayer"": ""green"",
    ""BlockwiseCreateArray"": ""green"",
    ""MaterializedLayer"": ""gray"",
}
```



![final](https://user-images.githubusercontent.com/62539811/129032590-422ecfd4-1007-43fe-8fb6-d257bb62b95f.png)

## Explanation

- `DataFrameIOLayer`: inefficient;
- `ShuffleLayer`, `SimpleShuffleLayer`: inefficient;
- `ArrayOverlayLayer`: inefficient;
- `BroadcastJoinLayer`: (?);
- `Blockwise`, `BlockwiseLayer`, `BlockwiseCreateArray`: efficient; easy to parallize;
- `MaterializedLayer`: inefficient; better to materialize as late as possible;

#### Key Points

- Blockwise Layers are more efficient than others and can be readily parallelized. As a result, they are **green** (a color used to signify something that is right, something that is correct). When users see a green layer, they may be certain that it is the most efficient method to accomplish things and that no optimization is required.
- The **gray** color (which signifies neutrality and balance) is used for Materialized layers to indicate that the layer should be materialized as late as feasible. Since we are not sure of the optimal way to optimize , we use the **gray** color to indicate that we are not sure.
- All of the other layers are inefficient in some way. As a result, they are colored brighter and stronger to attract the user's attention. Colors such as **purple**, **pink**, and **blue** are used to indicate to the user that something needs to be optimized. Users should utilize as little of these levels as feasible.
",True,7974,https://api.github.com/repos/dask/dask/pulls/7974,https://github.com/dask/dask/pull/7974,closed,91,7,2,14,14,37,0,0,[],2021-08-02 10:08:04+00:00,2021-08-18 19:54:37+00:00,1417593.0,"16 days, 9:46:33","[{'comment_id': 690349104, 'comment_body': ""I just noticed that this is not actually in the arguments list (because it's going to act on self, the graph we are referring to). The text above also mentions passing graphs - this should be removed, seems like it was copied from elsewhere."", 'comment_created': datetime.datetime(2021, 8, 17, 13, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690349279, 'comment_body': 'Just one high level graph!', 'comment_created': datetime.datetime(2021, 8, 17, 13, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690350929, 'comment_body': ""Possible future improvement: it feels like these should be (class) attributes of the layers themselves. Since colouring is not going to be default yet, it's ok to leave them here for now."", 'comment_created': datetime.datetime(2021, 8, 17, 13, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690352071, 'comment_body': 'Generate this list of <TR> from `layer_colours` to eliminate repetition? Should we only show those items that actually feature in the graph?', 'comment_created': datetime.datetime(2021, 8, 17, 13, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690367581, 'comment_body': 'Correct ✅\nwill change', 'comment_created': datetime.datetime(2021, 8, 17, 13, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690373065, 'comment_body': 'Yes, that seems like a neat idea :rocket: \r\n', 'comment_created': datetime.datetime(2021, 8, 17, 13, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690399719, 'comment_body': '![image](https://user-images.githubusercontent.com/62539811/129739411-fddc4483-c95e-4c10-a10b-1ccecac6142c.png)\r\nThe problem here is that since I have selected the same color for all Blockwise Layers. it would show up twice\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 13, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690401469, 'comment_body': 'Is this ok? or do I add extra checks so it only shows the same color Layers once\r\nin this case, it would skip showing `BlockwiseCreateArray`', 'comment_created': datetime.datetime(2021, 8, 17, 14, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690401600, 'comment_body': '@martindurant ', 'comment_created': datetime.datetime(2021, 8, 17, 14, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690402315, 'comment_body': ""Up to you, I don't insist. "", 'comment_created': datetime.datetime(2021, 8, 17, 14, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690402807, 'comment_body': 'It works otherwise. \r\n![image](https://user-images.githubusercontent.com/62539811/129739975-dc2af518-ab30-47ae-9e15-2b320297c1b7.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 14, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690404210, 'comment_body': 'I was thinking of making the `BlockwiseLayer` and `BlockwiseCreateArray` a little darker shades of green. How does that sound?\r\nSame goes with Shuffle and SimpleShuffle layers. Same color but a little darker shade to differentiate.', 'comment_created': datetime.datetime(2021, 8, 17, 14, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690405473, 'comment_body': ""I suggest that we don't want too many colours"", 'comment_created': datetime.datetime(2021, 8, 17, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 690410456, 'comment_body': 'Oh cool. In that case, I will leave it as it is.\r\n:rocket: \r\n\r\nThis is actually much better than showing the entire Legend every time. Great suggestion :smile: ', 'comment_created': datetime.datetime(2021, 8, 17, 14, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690821440, 'comment_body': 'Yeah, I asked about this wording too. Turns out @freyam copied it from the low level graph visualize function (which is what I suggested he look at to base this off). I don\'t think it\'s true for either situation - am I wrong?\r\n\r\nIf that\'s the case, we\'ll want to update both docstrings to say something like this instead:\r\n* `""Visualize a dask high level graph.""`\r\n* `""Visualize a dask low level task graph.""`\r\n', 'comment_created': datetime.datetime(2021, 8, 18, 0, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 690931385, 'comment_body': 'Yes, +1 here. I am not sure if we can pass several dictionaries into visualize. I tried it myself and I am getting errors.\r\n\r\nI have updated the doc to the lines Genevieve sent.', 'comment_created': datetime.datetime(2021, 8, 18, 6, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691428852, 'comment_body': ""**THIS** function does indeed take as many graphs as you like, the original docstring was correct. It's only for the `self.visualize` that the graph in question is already implied and there is no way to show more."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691430255, 'comment_body': 'This parameter is, however, wrong. `*args` is the set of dask graphs to show, one or more of them.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691432122, 'comment_body': ""If we're being thorough, then `cmap` should be a separate kwargs in this list with a better description than given here; or just remove it, since we don't say anywhere what kind of object cmap can be (and it is probably not tested)."", 'comment_created': datetime.datetime(2021, 8, 18, 16, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691432566, 'comment_body': 'Visualize **THIS** high level graph!', 'comment_created': datetime.datetime(2021, 8, 18, 16, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691432866, 'comment_body': 'Still refers to ""dask graphs"", but we are not passing any of those.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691433482, 'comment_body': ""Doesn't the extension you get depend on the `format` argument?"", 'comment_created': datetime.datetime(2021, 8, 18, 16, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691435576, 'comment_body': 'Use `None` to avoid writing a file (e.g., for output in a jupyter notebook)', 'comment_created': datetime.datetime(2021, 8, 18, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691437180, 'comment_body': '`to_graphviz` in this module could also use a docstring similar to this one; as could `dask.dot.graphviz_to_file`! Maybe not appropriate for this PR.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691439054, 'comment_body': 'These are low level graph manipulations, not relevant here', 'comment_created': datetime.datetime(2021, 8, 18, 16, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691476374, 'comment_body': 'I can add that in a different PR :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 8, 18, 17, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691491111, 'comment_body': 'Right!', 'comment_created': datetime.datetime(2021, 8, 18, 18, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691491733, 'comment_body': ""Oh! Didn't know that :heavy_check_mark: "", 'comment_created': datetime.datetime(2021, 8, 18, 18, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691499594, 'comment_body': 'It also depends on `filename`.\r\n\r\nhttps://github.com/dask/dask/blob/88a13f77f374a11425961c074f4e579f3befe721/dask/dot.py#L282-L283\r\n\r\nbut, `format` would overwrite the format in the `filename`.\r\n`x.dask.visualize(filename=""thishouldbesvg.svg"", format=""png"")`\r\nwould `thishouldbesvg.svg.png`!', 'comment_created': datetime.datetime(2021, 8, 18, 18, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691501037, 'comment_body': 'I don\'t know what the code produces (you can test), but the wording here implies that when you give a filename without any extension at all, "".svg"" is appended - which I suspect is not necessarily true.', 'comment_created': datetime.datetime(2021, 8, 18, 18, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691510083, 'comment_body': 'Oh, you are indeed right!', 'comment_created': datetime.datetime(2021, 8, 18, 18, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691512786, 'comment_body': '```py\r\nimport dask.array as da\r\n\r\nx = da.ones((10, 10), chunks=(5, 5))\r\nx = x + 100\r\nx = x * 100\r\n\r\nx.dask.visualize(filename=""isthissvg"")\r\n```\r\nproduces `isthissvg.png`', 'comment_created': datetime.datetime(2021, 8, 18, 18, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691519310, 'comment_body': 'Wow, I found some tiny flaws in the filename/format system.\r\nI will create an issue on it once I confirm them.', 'comment_created': datetime.datetime(2021, 8, 18, 18, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691522466, 'comment_body': ""For now, I have just changed \r\n`'.svg' will be used by default.`\r\nto \r\n`'.png' will be used by default.`\r\nwhich is true.\r\n\r\n_I will make this doc even better in another PR which fixes the filename/format situation for HLGs._\r\n\r\nIs this fine for now?\r\n"", 'comment_created': datetime.datetime(2021, 8, 18, 18, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691523715, 'comment_body': "">  '.png' will be used by default.\r\n\r\nIs it true regardless of the `format` argument?\r\n\r\n> I will make this doc even better in another PR\r\n\r\nyes, that's fine."", 'comment_created': datetime.datetime(2021, 8, 18, 18, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 691531035, 'comment_body': '> Is it true regardless of the format argument?\r\n\r\nyes! ', 'comment_created': datetime.datetime(2021, 8, 18, 19, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 691535025, 'comment_body': 'EDIT: format would overwrite the filename (if the filename has an extension attached or not)\r\n\r\n```py\r\nx.dask.visualize(filename=""whatextension.png"", format=\'pdf\') # whatextension.png.pdf\r\nx.dask.visualize(filename=""whatextension"", format=None) # whatextension.png\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 19, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '1f507b259bb00f3fe2381be14e1b91cec9715c0c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10c84d90b31454b8af17cc73d995cfc749261f0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700e95854fb3a0932afd9504949363fe19ad6a7b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d70097a5459150d903be4fc88e1a962fe09b2f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cabc7d18f1cfdc5e504a4916278223449b3fc66', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409bb26e37849dba595f07bab2cdae5ce3769e5f', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c073aa5132e9839e3cb2353697eff16ff7fe24f6', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f82e55e35085d503dc21dc8027b8acbe393e75ab', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '486961c5441512e2afe02e4e12a60969273db2f5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c85a425b4dacf3ecd584221dc8024d45a8344e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a13f77f374a11425961c074f4e579f3befe721', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56698f9d446e7ee2c7c1c0e50efdd37af6fd7839', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '666db9692bc6b26df94f97bbacad3851586c1825', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf39759f10bc06107b48fa2cc307b6db6a3e42d0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
704912265,Add HTML Repr for `Security` Class,"- [x] Tests added / passed
- [x] Passes `black distributed` / `flake8 distributed` / `isort distributed`

I have added the HTML Representation of the `Security` class and also tweaked the `__repr__` to specify where the keys/certs are stored.

## `_repr_html_`

![image](https://user-images.githubusercontent.com/62539811/129478645-076d9348-c399-48b4-b4b1-9300143e1eab.png)

## `__repr__`

![image](https://user-images.githubusercontent.com/62539811/129478671-18c84467-e29f-43e9-b13d-b309df22b2f0.png)




/cc @martindurant @GenevieveBuckley",True,5178,https://api.github.com/repos/dask/distributed/pulls/5178,https://github.com/dask/distributed/pull/5178,closed,54,10,2,18,20,6,0,0,[],2021-08-05 17:58:09+00:00,2021-08-17 02:33:19+00:00,981310.0,"11 days, 8:35:10","[{'comment_id': 689206914, 'comment_body': '```suggestion\r\n            + "",\\n    "".join(f""{key}={value}"" for key, value in attr.items())\r\n```\r\n\r\nWhat do you think about adding newlines to improve reading/scanning the text?', 'comment_created': datetime.datetime(2021, 8, 16, 2, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689207145, 'comment_body': '```suggestion\r\n            + ""\\n)""\r\n```\r\n\r\n(If you try the new line suggestion, we\'ll want the close bracket also on its own line, so it\'s easier to see)', 'comment_created': datetime.datetime(2021, 8, 16, 2, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689207877, 'comment_body': ""Oh, I see above you experimented with using a dictionary to get a similar kind of behaviour. Yes, I like the way that looks a lot more - it's much easier to skim through the information and find what you need."", 'comment_created': datetime.datetime(2021, 8, 16, 2, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689641912, 'comment_body': 'Let\'s remove the single quotes here. Folks may think things are strings when they are not.\r\n\r\n```suggestion\r\n            + "", "".join(f""{key}={value}"" for key, value in attr.items())\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689642109, 'comment_body': 'This probably wants to be private.\r\n\r\n```suggestion\r\n    def _attr_to_dict(self):\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689651211, 'comment_body': 'Oh right ✔️ \r\n', 'comment_created': datetime.datetime(2021, 8, 16, 15, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '8267cfb7ec9d602d03469ba0024bacdcbc8135cd', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c65b89f92195850ee871bdaae0ebf9159b2189b7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769381a66c61b9730d7b77b689b6931febbfa135', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9dd571dbb4f62545018d8994883e4442069bb20', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '578da8c12c744f3062af9cb077fd7e83a7ba9723', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a98589dc7db57206688162f0d4e23dd1a4d1d2b1', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11470e99ebc5e63f789026d4fde836b8c397439b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fb873ee9cb084389c569e353f53baeabf1609f3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482280de06930cc02a7eae1e638495749153b22d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4a0d08411044754190f6dca412f1cd411e29c5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5d680a72b2a4e5c32ed8e55d7f729223f187ba3', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36f88c0bc44f1befcff27edda2d4d4bb9e3b4f15', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1259a83cb30ea25ffe148b498c9a6d06bb5f7890', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead99acbd69e5ac8fc6903a8d36d6c040d44b654', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03474e675f4c4a1dceefcd104c6db0c63c7ed07', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8106bbf2ea988f595d50706b55f46c45db825ac', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037c18131e0ba262e007c85afdf06ce5a23fba95', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e64f6a5b2384b60a914e76514a9006107868fe0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
704977859,Add HTML Repr for `ProcessInterface` Class and all its subclasses,"- [ ] Closes #xxxx
- [x] Tests added / passed
- [x] Passes `black distributed` / `flake8 distributed` / `isort distributed`

I have added the HTML Repr for ProcessInterface Class and all its subclasses.

## Before

`proc` would call the `__repr__()`.

![image](https://user-images.githubusercontent.com/62539811/128411614-b06f51f4-430b-4b3f-b5c6-f5a38cc8ee1f.png)

## After

![image](https://user-images.githubusercontent.com/62539811/129478771-027f0b0d-7d55-4796-ad73-f1d926f0e723.png)


![image](https://user-images.githubusercontent.com/62539811/129478758-758bcd28-72ac-4cbc-89b3-40e196336d71.png)

/cc @martindurant @GenevieveBuckley",True,5181,https://api.github.com/repos/dask/distributed/pulls/5181,https://github.com/dask/distributed/pull/5181,closed,47,4,2,22,21,33,0,0,[],2021-08-05 19:47:22+00:00,2021-08-17 15:52:57+00:00,1022735.0,"11 days, 20:05:35","[{'comment_id': 683799358, 'comment_body': ""Thanks @freyam! It looks like these attributes are defined in the `__init__(...)` method and we probably don't want to overwrite them here as `_repr_html_` should just display existing state instead of mutating existing state "", 'comment_created': datetime.datetime(2021, 8, 5, 21, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 683800393, 'comment_body': ""I don't think users will care about `self.lock`. It's more so used for internal coordination. "", 'comment_created': datetime.datetime(2021, 8, 5, 21, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 683800630, 'comment_body': ""Same comment about `self._event_finished`. It's an internal implementation detail. "", 'comment_created': datetime.datetime(2021, 8, 5, 21, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 683815854, 'comment_body': 'Oops! I had commented out this code. Not sure how I let it pass through! 😄 Will fix it in the next commit.', 'comment_created': datetime.datetime(2021, 8, 5, 22, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 683817089, 'comment_body': 'Understood ✔️ I had just added all the attributes I found in the `__init__()`. Thanks :))', 'comment_created': datetime.datetime(2021, 8, 5, 22, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 685022721, 'comment_body': 'This class is an interface, it will never be created directly. So we probably want to ensure the name here is the name of the class and not `Process Interface` as that phrase means nothing to the user. ', 'comment_created': datetime.datetime(2021, 8, 9, 8, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 685024202, 'comment_body': 'it would be great if there was a kwarg that we could pass a dictionary to which would then add more items to the table. That way for the subclasses of `ProcessInterface` they could bundle up useful information and pass it to the super.\r\n\r\nFor example in `distributed.deploy.ssh.Process` it would be great to be able to pass things like the PID of the SSH process.\r\n\r\nhttps://github.com/dask/distributed/blob/9569e08f28df3b870048ce7ae8b44961973af6c1/distributed/deploy/ssh.py#L19', 'comment_created': datetime.datetime(2021, 8, 9, 9, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 685029593, 'comment_body': 'See `Cluster` for an example of how we do this there \r\n\r\nhttps://github.com/dask/distributed/blob/9569e08f28df3b870048ce7ae8b44961973af6c1/distributed/deploy/cluster.py#L365', 'comment_created': datetime.datetime(2021, 8, 9, 9, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 685623797, 'comment_body': ""Haven't checked, but I think you should be able to grab that information with `self.__class__.__name__` @freyam "", 'comment_created': datetime.datetime(2021, 8, 10, 1, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 685632379, 'comment_body': ""Hmm, if we will never directly use a ProcessInterface class, but instead always use it through the Worker or Scheduler classes, then perhaps it doesn't make sense to have a heading here.\r\nInstead we might want a html string that can be returned by `super()._repr_html_()` and incorporated into the other class representations (https://github.com/dask/distributed/pull/4857)"", 'comment_created': datetime.datetime(2021, 8, 10, 1, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 685842006, 'comment_body': ""For clarity when I say `Scheduler` and `Worker` classes I don't mean `distributed.worker.Worker`. I mean something like `distributed.deploy.ssh.Worker` which is something different."", 'comment_created': datetime.datetime(2021, 8, 10, 9, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689619009, 'comment_body': ""This doesn't really seem necessary as `heading` is not being set and nothing different is being done in this method.\r\n\r\nI would be tempted to just remove it and allow the `super` to handle it."", 'comment_created': datetime.datetime(2021, 8, 16, 15, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689619136, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2021, 8, 16, 15, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689619946, 'comment_body': 'Given that the class name will likely be `Worker` or `Scheduler` for basically every implementation we probably want to include the full class path. You can use `dask.utils.typename` for this.\r\n\r\n```python\r\ndask.utils.typename(type(self))\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689637233, 'comment_body': ""Oh wow! Didn't know about this. This makes it easier :+1: \r\n\r\nAdded it."", 'comment_created': datetime.datetime(2021, 8, 16, 15, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689637783, 'comment_body': 'Added :heavy_check_mark: ', 'comment_created': datetime.datetime(2021, 8, 16, 15, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689643685, 'comment_body': 'Sorry I meant to delete this whole method. It is redundant.', 'comment_created': datetime.datetime(2021, 8, 16, 15, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689643781, 'comment_body': 'And this one.', 'comment_created': datetime.datetime(2021, 8, 16, 15, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689688041, 'comment_body': 'Oh! I am surprised it still works after removing this.\r\nDoes it know which `_repr_html_`  to call from the fact that Worker is a child class of Process?', 'comment_created': datetime.datetime(2021, 8, 16, 16, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689689561, 'comment_body': 'Yes, python has a strict method resolution procedure, which class inheritance relies on. You can see the places python will look to find an attribute with, for instance, `Worker.mro()` (this is the class object, not an instance).', 'comment_created': datetime.datetime(2021, 8, 16, 16, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 689689731, 'comment_body': 'Yeah. This is all part of class inheritance. Unless you state otherwise it takes on all the methods of the parent (which takes on everything from its parent, and so on).', 'comment_created': datetime.datetime(2021, 8, 16, 16, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689691188, 'comment_body': 'This can also be removed as they are identical to the `__repr__` on `Process`.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689691433, 'comment_body': 'This one is also identical to the parent one so can be removed.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 689697737, 'comment_body': 'I also changed the typename to the  `dask.utils.typename(type(self))`\r\n![image](https://user-images.githubusercontent.com/62539811/129599524-877df2fb-55a5-48b9-bf7f-4f847d017d22.png)\r\n\r\nIs this a good change?\r\nIt was ""SSH Worker"" and ""SSH Scheduler"" before.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690167877, 'comment_body': 'I have no strong preference here.\r\n\r\nI would suggest updating the status to be a string so that it looks like `status=""running""`. I\'m not sure showing the `Status` object here has much value.', 'comment_created': datetime.datetime(2021, 8, 17, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690199328, 'comment_body': 'Oh yes, that is shorted and cleaner.', 'comment_created': datetime.datetime(2021, 8, 17, 9, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690358371, 'comment_body': 'You can just use the enum name property.\r\n\r\n```suggestion\r\n        return f""<{type(self).__name__}: status={self.status.name}>""\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 13, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690359687, 'comment_body': 'Oh! perfect. Yes, I have seen this used elsewhere as well in the code base.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690379398, 'comment_body': '@freyam there is another one of these that needs updating too.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690383192, 'comment_body': 'My bad! I overlooked it. Fixed it now.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690391484, 'comment_body': 'This `_repr_html_` method still needs removing.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jacobtomlinson', 'type': 'User'}, {'comment_id': 690423712, 'comment_body': ""Oh yes! Removed.\r\nI allso removed the `__repr__` from Process and edited the ProcessInterface's `__repr__` to follow the same pattern."", 'comment_created': datetime.datetime(2021, 8, 17, 14, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 690426878, 'comment_body': '@jacobtomlinson Wow, I am super tired today :smile: I had committed the changes but forgot to push. ', 'comment_created': datetime.datetime(2021, 8, 17, 14, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': 'ab6b46d0749a1ef67a2892dcc57ee209501945cf', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e42b4b0f60d855d7e0ee82714f6c7bf8341be58', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d3451f00638fdf9ea84ad751a9a94011bbbb96', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a343a781eaa94e10e7f79c0dd1bfcf4b28f3ed', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5daedc6692a8e1573745ba36a7c50b4f9d646068', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c018ece4f79b5954e9c48e003a102ffe30cac7', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47412dce0974113069af09d462e4371847506aea', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcd464e320e9ac8929fb2cc12b4b8f7c15b8d85b', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea635cf1c2ca899fe13e25363bfc37a7035241d2', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0057e13aa6ff8448f8eb47b9a77f75da25bb136c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9796cc017ea05a55aad7735ff42ba800d2839c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453f83c886a916d68a5ff7835bbb9e829ce1c9f0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3c02ef0fb37c0cc160d76e75d8607b31e42881', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a06ebebc1d6ba53d5b777db07b404e8da9490c6d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f96f11096c5a9516cca9c68f7305d6ac9f03ca5', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0abb321a03ac9e2a1884268a4b0b15aab772efa4', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588c3ac2dc9b29153bce3cfcbfa2c12f53944340', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b7909b83a8d25f5de69c59269a1adc1abfa259', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d9aee0a882d01ff47e172e7e4689a9ef2f7535c', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a12218de69d3c20e54203e973db7dbe4b6e9cb32', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9184898a2e6fc9a59ca9a94f6140f8531e31890', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3f0878c66c0266b527e77488c4ed6dc04f8706', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
696392668,Change graphviz font family to sans,"- [X] Tests passed
- [X] Passes `black dask` / `flake8 dask` / `isort dask`

I was working on #7869 and realized that the Graphviz output would look even cleaner if we use a sans-serif font instead of the current serif font.

In this PR, I have changed the font of the Graphviz from **Times-Roman** to ~~**Roboto**~~ **Helvetica**. I have also cleaned the code in the method `to_graphviz()` to be more consistent in `dot.py` (LOW LEVEL) and `highlevelgraph.py` (HIGH LEVEL). Now, they look similar and it might be easier to work with this code in the future.

It follows the https://marketing.dask.org/en/latest/colors.html
![dask](https://user-images.githubusercontent.com/62539811/126878443-5ec1f7af-f44a-45bd-9ed7-2481390e82b2.png)
(Font mentioned in image: Roboto)

Even the HTML Representation uses a Sans font, so it makes sense to have the Graph representations also follow suit.

## Demo

```py
import dask.array as da

x = da.ones((10, 10), chunks=(5, 5))
x = x + 100
x = x * 100

x.visualize()
```

### Before
![b1](https://user-images.githubusercontent.com/62539811/126878530-974c2258-1dea-4b71-bf4f-022109db9b27.png)

### After
![a1](https://user-images.githubusercontent.com/62539811/126878533-3df2abf6-0d71-496c-b614-28c971c08def.png)


```py
import dask.array as da

XL = da.ones((67552, 365941), chunks=(652, 5792))
XL2 = XL.T.astype(""f4"")
XC = da.ones((365941, 26), chunks=(365941, 26))
LS = da.linalg.lstsq(XC, XL2)[0]
XC_LS = XC @ LS
XLP = XL2 - XC_LS

XLP.dask.visualize(\)
```
### Before
![b2](https://user-images.githubusercontent.com/62539811/126878594-476bf436-4fd6-462f-af48-81f71e7fcd7b.png)


### After
![a2](https://user-images.githubusercontent.com/62539811/126878561-8fb50e0b-f7ff-4ff8-983c-26cdcfb56892.png)


/cc @GenevieveBuckley @martindurant 







",True,7931,https://api.github.com/repos/dask/dask/pulls/7931,https://github.com/dask/dask/pull/7931,closed,16,15,2,5,4,8,0,0,[],2021-07-24 18:57:42+00:00,2021-07-28 12:50:04+00:00,323542.0,"3 days, 17:52:22","[{'comment_id': 676803029, 'comment_body': 'Will roboto be available on most systems? My understanding is this is a font from Google which may not be present by default. Does graphviz handle that situation well? ', 'comment_created': datetime.datetime(2021, 7, 26, 17, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 676806124, 'comment_body': ""I am not really sure what happens when roboto is not available. I tried using graphviz locally and online as well and it rendered.\n\nHere's something.\n\n> it is best to rely on font faces that are generally available, such as Times-Roman, Helvetica or Courier.\n\nSource: http://www.graphviz.org/docs/attrs/fontname/\n\nIf we want, we can switch to helvetica (another sans font) if anyone has issues with roboto."", 'comment_created': datetime.datetime(2021, 7, 26, 17, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 676813599, 'comment_body': 'With `node_attr[""fontname""] = ""helvetica""`\r\n![a1](https://user-images.githubusercontent.com/62539811/127034181-a156dd40-446f-4bf9-9723-4b9180cc1865.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 26, 17, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 676823935, 'comment_body': 'Does the graphviz binary itself contain any fonts?', 'comment_created': datetime.datetime(2021, 7, 26, 17, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 676830833, 'comment_body': '```\r\nGraphviz has historically supported some standard Postscript\r\nfonts, initially, Times-Roman, Helvetica, Courier and Symbol.\r\nThis list was later enlarged by Adobe to include 35 fonts, which are:\r\n\tAvantGarde-Book AvantGarde-BookOblique AvantGarde-Demi\r\n\tAvantGarde-DemiOblique Bookman-Demi Bookman-DemiItalic\r\n\tBookman-Light Bookman-LightItalic Courier Courier-Bold\r\n\tCourier-BoldOblique Courier-Oblique Helvetica\r\n\tHelvetica-Bold Helvetica-BoldOblique Helvetica-Narrow\r\n\tHelvetica-Narrow-Bold Helvetica-Narrow-BoldOblique\r\n\tHelvetica-Narrow-Oblique Helvetica-Oblique NewCenturySchlbk-Bold\r\n\tNewCenturySchlbk-BoldItalic NewCenturySchlbk-Italic\r\n\tNewCenturySchlbk-Roman Palatino-Bold Palatino-BoldItalic\r\n\tPalatino-Italic Palatino-Roman Symbol Times-Bold Times-BoldItalic\r\n\tTimes-Italic Times-Roman ZapfChancery-MediumItalic ZapfDingbats\r\n```\r\nI believe these are the inbuilt fonts. \r\n\r\n\r\n\r\nAlso, @jrbourbeau \r\n> How font names are resolved also depends on the underlying library that handles font name resolution. If Graphviz was built using the `fontconfig` library, the latter library will be used to search for the font.\r\n\r\nSource: http://www.graphviz.org/docs/attrs/fontname/\r\n\r\n> A font is usually selected by family name (""fontname"") and other properties. Then fontconfig matches the request\r\nto a system font. Under fontconfig, fontnames are family names,\r\nwhich fontconfig matches to the closest font it finds.\r\n\r\nSo, I think even if `fontconfig` can\'t find ""Roboto"", it will fall back to a similar font. I think this is a good workaround.\r\n\r\nSource: http://www.hep.caltech.edu/~piti/share/graphviz/doc/fontfaq.txt\r\n', 'comment_created': datetime.datetime(2021, 7, 26, 18, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 677639105, 'comment_body': 'I have changed the font to Helvetica. I googled around for Graphviz examples and nobody seems to use Roboto. Helvetica is used in most places.\r\n\r\nI think this is a good choice.', 'comment_created': datetime.datetime(2021, 7, 27, 17, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 677828864, 'comment_body': ""Great, if helvetica works most places and graphviz internally has reasonable fallback behavior, then let's go with helvetica "", 'comment_created': datetime.datetime(2021, 7, 27, 21, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jrbourbeau', 'type': 'User'}, {'comment_id': 677829372, 'comment_body': 'Yes, that seems cool.', 'comment_created': datetime.datetime(2021, 7, 27, 21, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}]","[{'commit_sha': '10387d7e511a23113baef1efb240d882c142f82e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85be974514ad271dfb47e3bd195c1cdfd1217bad', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '939f5c9e0071c74b6ca14b0e53d4a41362fab1b0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91acd660c4268dac4d23abaf5feb902111e68e0', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716d436962d71de56e6b4b7dcfa0b3c979aca478', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
608551309,Added product (alias of prod),"- [x] Tests added / passed
- [x] Passes `black dask` / `flake8 dask` / `isort dask`
",True,7517,https://api.github.com/repos/dask/dask/pulls/7517,https://github.com/dask/dask/pull/7517,closed,31,2,2,5,5,0,1,0,[{'name': 'dataframe'}],2021-04-04 14:05:01+00:00,2021-04-05 15:57:11+00:00,93130.0,"1 day, 1:52:10",[],"[{'commit_sha': '68941c5d3ccc93da7f3515fc98d7062716ba5b06', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '360f58010446f790f8a8b7d7db8f459563dd0a7a', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85ff5d9406ce1b15414511db1c9c76f95feda3e', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed871d05e70553ce34855a4d1cf9907e516e89e8', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84e71a32d103bc5b193ff0525738c386fbc71fa', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
678592342,Edited the path to `scheduler.py`,"I believe the path @jacobtomlinson wanted to link has been changed since then. I've made the necessary changes to bring it up to date.
",True,4983,https://api.github.com/repos/dask/distributed/pulls/4983,https://github.com/dask/distributed/pull/4983,closed,1,1,1,1,1,0,0,0,[],2021-06-27 22:44:41+00:00,2021-06-28 09:14:37+00:00,37796.0,10:29:56,[],"[{'commit_sha': '2a0329d4e0cf7fa451715af8b635a6bba589889d', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129
707237376,Google Summer of Code 2021 Project,"I will be writing about my work in the summer working along with @GenevieveBuckley and @martindurant on the different representations of Dask computation.

This has been part of the annual Google Summer of Code program where students get the opportunity to work with mentors on large-scale projects.

The blogpost would contain a list of all the merged work and what the new features mean to the users :rocket: ",True,107,https://api.github.com/repos/dask/dask-blog/pulls/107,https://github.com/dask/dask-blog/pull/107,closed,234,0,9,8,9,40,0,0,[],2021-08-10 10:43:45+00:00,2021-08-23 23:27:01+00:00,1168996.0,"13 days, 12:43:16","[{'comment_id': 689282245, 'comment_body': '```suggestion\r\ntitle: Google Summer of Code 2021 - Dask Project\r\n```\r\n\r\nGSOC is not likely to be an acronym most people know, better to spell it out in full.', 'comment_created': datetime.datetime(2021, 8, 16, 6, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689283358, 'comment_body': ""This change is too minor to include in our update of new features, let's leave it out."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689287922, 'comment_body': ""I'd like this bugfix to go at the end of the first section, since Dask users will be more interested to hear about new features first."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689292071, 'comment_body': ""We don't need a demo for the bugfix. Nothing here is changing, except that it doesn't crash when it's not supposed to (which is great, but doesn't need a picture or code snippet)"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689294059, 'comment_body': ""I'm not sure how annoying it is to make another demo, but it would be nice to have the tooltip example be the same as the node size scaling example. Then it feels a bit more like a continuation of the same thing, which is nice for readers."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689296307, 'comment_body': ""Extra references we can link to:\r\n* Blogpost introducing the high level graph HTML repr in July this year - https://blog.dask.org/2021/07/07/high-level-graphs#visualization\r\n* Matt's blogpost about HTML reprs from 2019 - https://matthewrocklin.com/blog/2019/07/04/html-repr"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689296702, 'comment_body': 'Looks great :smile: ', 'comment_created': datetime.datetime(2021, 8, 16, 7, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689297052, 'comment_body': ""I don't see this file in the images folder"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689297124, 'comment_body': ""I don't see this file in the images folder, either"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689297265, 'comment_body': 'I am waiting for the PR to be merged. I will add the image later.\r\n', 'comment_created': datetime.datetime(2021, 8, 16, 7, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689297569, 'comment_body': ""All the unmerged PRs don't have screenshots yet."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689299634, 'comment_body': ""We've been using an `## Executive Summary` heading for the short summary up the top.\r\n\r\nThe first sentence needs to be about why someone should read this post, eg: introducing new features\r\n\r\nAlso worth including is information about when & how people can use the new changes. Right now you can do that with the dask/distributed main branch, or wait for the next dask/distributed release (`2021.08.1` or higher)."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689300101, 'comment_body': 'Is this sentence from the GSOC website? If so, we need to put it in quotation marks.', 'comment_created': datetime.datetime(2021, 8, 16, 7, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689300530, 'comment_body': 'Beautiful!', 'comment_created': datetime.datetime(2021, 8, 16, 7, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689302742, 'comment_body': ""I also don't see this one in the repository - perhaps you're waiting on the final design to have no more changes first?"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 689303394, 'comment_body': 'Yes! :heavy_check_mark: \r\n', 'comment_created': datetime.datetime(2021, 8, 16, 7, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'freyam', 'type': 'User'}, {'comment_id': 689313000, 'comment_body': ""Also for the distributed side of things, we'll want to acknowledge Jacob Tomlinson's work (eg: https://github.com/dask/distributed/pull/4857 and https://github.com/dask/distributed/pull/4853)"", 'comment_created': datetime.datetime(2021, 8, 16, 7, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691801488, 'comment_body': '@freyam the image demo for the Security HTML repr needs to be added to the `images` folder.', 'comment_created': datetime.datetime(2021, 8, 19, 5, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691801998, 'comment_body': '@freyam the image demo for the ProcessInterface HTML repr needs to be added to the images folder. (This is the example with the SSH scheduler / workers, not using `Process` or `ProcessInterface` directly.)\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 5, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691802322, 'comment_body': '@freyam Is this the code example that was used to generate the demo images? If not, please update the example code here so they match.\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 5, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691802657, 'comment_body': '@freyam this image demo for layer colours needs to be added to the `images` folder.', 'comment_created': datetime.datetime(2021, 8, 19, 5, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691802847, 'comment_body': '@freyam please fill in the example code you used to generate the demo images below.', 'comment_created': datetime.datetime(2021, 8, 19, 5, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691803101, 'comment_body': 'Maybe Gen should add a note on Materialized layers?', 'comment_created': datetime.datetime(2021, 8, 19, 5, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691803863, 'comment_body': 'Nice to have, but not required: it would be good if this demo image used the same example code as the node scaling demo in the section above. Then this section feels more like a natural continuation.\r\n\r\n@freyam ', 'comment_created': datetime.datetime(2021, 8, 19, 5, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691806717, 'comment_body': '(Removed the sentence)', 'comment_created': datetime.datetime(2021, 8, 19, 5, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 691806834, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 19, 5, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692162246, 'comment_body': ""Just my feeling, but I feel like this won't actually be read by any executives. I understand this is a known and common phrase, but I prefer something more precise:\r\n\r\n- TL;DR (not bothering to read the whole thing)\r\n- abstract\r\n- precis \r\n- overview"", 'comment_created': datetime.datetime(2021, 8, 19, 14, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692167018, 'comment_body': 'Add a brief sentence saying that graphviz/visualize has been around as a useful diagnostic tool for a long time for both low- and high-level graphs. Do we need to define what we mean by ""graph""? If we can keep it concise, I would suggest yes.', 'comment_created': datetime.datetime(2021, 8, 19, 14, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692167610, 'comment_body': '(where `result` is a dask object or collection)', 'comment_created': datetime.datetime(2021, 8, 19, 14, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692168363, 'comment_body': 'Link to https://docs.dask.org/en/latest/graphviz.html', 'comment_created': datetime.datetime(2021, 8, 19, 14, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692169154, 'comment_body': '(because each visual node corresponds to one task)', 'comment_created': datetime.datetime(2021, 8, 19, 14, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692174617, 'comment_body': '""disk can be a limiting factor"" -> ""storage/network services is often high-latency and therefore a bottleneck""\r\n\r\n(disk writes are usually the fastest IO you have available!)\r\n\r\nI would remove or move the parenthesis, it doesn\'t seem to belong with this bullet.', 'comment_created': datetime.datetime(2021, 8, 19, 14, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692175562, 'comment_body': ""I don't know if it matters, but `black`, the code formatter used by Dask, insists on two spaces before a comment `#` character."", 'comment_created': datetime.datetime(2021, 8, 19, 14, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692220690, 'comment_body': 'will be accessed via subclasses such as SSH scheduler or workers.', 'comment_created': datetime.datetime(2021, 8, 19, 15, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'martindurant', 'type': 'User'}, {'comment_id': 692688454, 'comment_body': 'Overview it is, then', 'comment_created': datetime.datetime(2021, 8, 20, 6, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692704024, 'comment_body': ""I don't have any strong attachment to the phrase - I just saw someone else use it to summarize a dask blogpost and have repeated that pattern ever since.\r\n"", 'comment_created': datetime.datetime(2021, 8, 20, 6, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692708946, 'comment_body': 'Thank you for the fix!', 'comment_created': datetime.datetime(2021, 8, 20, 6, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692709168, 'comment_body': ""I've removed the parenthesis, you're right, it really doesn't belong."", 'comment_created': datetime.datetime(2021, 8, 20, 6, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692723780, 'comment_body': '> (disk writes are usually the fastest IO you have available!)\r\n\r\nI feel like I should clarify - what I was trying to say is that anything to do with moving data from storage is much slower than anything where the data already exists entirely in-memory. I did a poor job of it though, thanks for helping us make a better explanation.', 'comment_created': datetime.datetime(2021, 8, 20, 7, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}, {'comment_id': 692726228, 'comment_body': ""I don't know if we should write more about materialized layers here. I can't think of a good way to say:\r\n* ideally we won't see many materialized layers before `compute()` is called\r\n* but we might see some and that's ok\r\n* but you might also accidentally materialize layers without meaning to, perhaps by counting the number of tasks or looking at the HTML repr (which in turn counts the number of tasks)\r\n* and fixing that is a job for dask developers, not dask users\r\n\r\nI think on balance this might be more confusing than helpful. If anyone has ideas or thoughts around this I'd be interested to hear them."", 'comment_created': datetime.datetime(2021, 8, 20, 7, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'GenevieveBuckley', 'type': 'User'}]","[{'commit_sha': '7a4b2d52dbff5ba2705e603dc66e54e84e172fe1', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1750165897c4784dd9c772a84c977cba3f5220', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d13b4b403c9692b5325acec8b0b702f44038cc', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90406106a06e87a18916f2be14af975673afc277', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4882a2eefe39d21feda2fc9bab9bfa181fe60a64', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ca4754d7072532bf9ee9b409aa35d4d2aa77a9', 'committer_username': 'freyam', 'committer_name': 'Freyam Mehta', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 23, 8, 27, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e323caa6f5d4c34339e36ad4803ec8b14f9fa9', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a83639079f4269b542f0fb323efe05eb1ae93a8', 'committer_username': 'GenevieveBuckley', 'committer_name': 'Genevieve Buckley', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 11, 6, 0, 36, tzinfo=datetime.timezone.utc)}]",Freyam Mehta,62539811,,User,,64,,147,129

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28782747,dask,dask/dask,Python,1689,12348,212,608,8293,1091,4,191,"[{'id': 712958843, 'number': 8044, 'closed': datetime.datetime(2021, 8, 17, 21, 33, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 15, 50, 58, tzinfo=datetime.timezone.utc), 'time_taken': 193335.0, 'time_delta': '2 days, 5:42:15', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 701324019, 'number': 7974, 'closed': datetime.datetime(2021, 8, 18, 19, 54, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 10, 8, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1417593.0, 'time_delta': '16 days, 9:46:33', 'additions': 91, 'deletions': 7, 'state': 'closed'}, {'id': 701307167, 'number': 7973, 'closed': datetime.datetime(2021, 8, 10, 13, 40, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 9, 45, 18, tzinfo=datetime.timezone.utc), 'time_taken': 705338.0, 'time_delta': '8 days, 3:55:38', 'additions': 52, 'deletions': 6, 'state': 'closed'}, {'id': 696392668, 'number': 7931, 'closed': datetime.datetime(2021, 7, 28, 12, 50, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 24, 18, 57, 42, tzinfo=datetime.timezone.utc), 'time_taken': 323542.0, 'time_delta': '3 days, 17:52:22', 'additions': 16, 'deletions': 15, 'state': 'closed'}, {'id': 687652639, 'number': 7886, 'closed': datetime.datetime(2021, 7, 30, 16, 37, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 9, 8, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1582121.0, 'time_delta': '18 days, 7:28:41', 'additions': 21, 'deletions': 11, 'state': 'closed'}, {'id': 683553085, 'number': 7869, 'closed': datetime.datetime(2021, 7, 20, 1, 6, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 10, 0, tzinfo=datetime.timezone.utc), 'time_taken': 1264010.0, 'time_delta': '14 days, 15:06:50', 'additions': 26, 'deletions': 10, 'state': 'closed'}, {'id': 683529700, 'number': 7868, 'closed': datetime.datetime(2021, 7, 5, 9, 28, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 9, 26, 7, tzinfo=datetime.timezone.utc), 'time_taken': 117.0, 'time_delta': '0:01:57', 'additions': 526, 'deletions': 5, 'state': 'closed'}, {'id': 679690803, 'number': 7843, 'closed': datetime.datetime(2021, 7, 2, 6, 47, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 7, 53, 22, tzinfo=datetime.timezone.utc), 'time_taken': 255237.0, 'time_delta': '2 days, 22:53:57', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 659087810, 'number': 7740, 'closed': datetime.datetime(2021, 6, 8, 14, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 15, 3, 32, tzinfo=datetime.timezone.utc), 'time_taken': 601648.0, 'time_delta': '6 days, 23:07:28', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 608551309, 'number': 7517, 'closed': datetime.datetime(2021, 4, 5, 15, 57, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 4, 14, 5, 1, tzinfo=datetime.timezone.utc), 'time_taken': 93130.0, 'time_delta': '1 day, 1:52:10', 'additions': 31, 'deletions': 2, 'state': 'closed'}]"
42408083,distributed,dask/distributed,Python,715,1563,55,328,5872,1566,17,313,"[{'id': 704977859, 'number': 5181, 'closed': datetime.datetime(2021, 8, 17, 15, 52, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 19, 47, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1022735.0, 'time_delta': '11 days, 20:05:35', 'additions': 47, 'deletions': 4, 'state': 'closed'}, {'id': 704912265, 'number': 5178, 'closed': datetime.datetime(2021, 8, 17, 2, 33, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 17, 58, 9, tzinfo=datetime.timezone.utc), 'time_taken': 981310.0, 'time_delta': '11 days, 8:35:10', 'additions': 54, 'deletions': 10, 'state': 'closed'}, {'id': 678592342, 'number': 4983, 'closed': datetime.datetime(2021, 6, 28, 9, 14, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 22, 44, 41, tzinfo=datetime.timezone.utc), 'time_taken': 37796.0, 'time_delta': '10:29:56', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
149637682,dask-blog,dask/dask-blog,HTML,35,30,17,29,322,11,6,3,"[{'id': 707237376, 'number': 107, 'closed': datetime.datetime(2021, 8, 23, 23, 27, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 10, 43, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1168996.0, 'time_delta': '13 days, 12:43:16', 'additions': 234, 'deletions': 0, 'state': 'closed'}]"
39199909,dask-tutorial,dask/dask-tutorial,Jupyter Notebook,702,1828,90,71,406,5,3,0,"[{'id': 611277320, 'number': 211, 'closed': datetime.datetime(2021, 4, 8, 14, 44, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 7, 6, 14, tzinfo=datetime.timezone.utc), 'time_taken': 27503.0, 'time_delta': '7:38:23', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
