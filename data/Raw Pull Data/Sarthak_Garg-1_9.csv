pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
536047391,Feature: Add user info view,"**What does this PR do?!**
- Adds a basic interpolable user info view from web app.
- Custom fields omitted for now.
- Press `i` in the users list to see user info.

**Commit flow**
1. Create UI <=> API mappings for a realm user.
2. Adds a method to return tidied user info, so that it becomes displayable.
3. Support backward compatibility of API user response.
4. Adds hotkey `i` to trigger the popup.
5. Structures the user info popup to be shown.
6. Adds UI elements for toggling the popup.
7. Adds keypress events to trigger the popup.

Fixes #511

**Screenshots/GIF**
![Screenshot from 2021-04-27 19-58-50](https://user-images.githubusercontent.com/55916430/116259136-2a801400-a793-11eb-9613-568e7e569f04.png)
",True,848,https://api.github.com/repos/zulip/zulip-terminal/pulls/848,https://github.com/zulip/zulip-terminal/pull/848,closed,421,3,17,7,10,77,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-12-10 16:10:06+00:00,2021-07-10 23:04:56+00:00,18341690.0,"212 days, 6:54:50","[{'comment_id': 541761231, 'comment_body': ""This dependency is already pulled in by `tzlocal`, though I'm not sure if this is always guaranteed to be the case.\r\n\r\nAssuming we keep this commit, could you please update the title to match the style use elsewhere in our git log."", 'comment_created': datetime.datetime(2020, 12, 12, 19, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541812178, 'comment_body': ""I think we could try `u` as a key for this, though previously from messages we've aimed to have keys from the message-info popup rather than directly - this keeps simple keys free for later use. Any change to keys.py should be in the same commit as one to the keys list in README.md.\r\n\r\nI think it would definitely be helpful to hook the same popup functionality into the user list, probably via `i` in that case - in parallel to the same key being applied to message and streams."", 'comment_created': datetime.datetime(2020, 12, 13, 0, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541812571, 'comment_body': 'This looks like it could be a lot simpler as a comprehension.', 'comment_created': datetime.datetime(2020, 12, 13, 0, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541817720, 'comment_body': 'This would be cleaner as a dict initialized with values, rather than set later - it removes duplication. The conditional values below could be calculated first.', 'comment_created': datetime.datetime(2020, 12, 13, 1, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541817918, 'comment_body': 'We should have this information already? Do we need to fetch it? What does the webapp do?', 'comment_created': datetime.datetime(2020, 12, 13, 1, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541818167, 'comment_body': 'I believe there are more roles than this? At least ""Owner"", probably something with bots too.', 'comment_created': datetime.datetime(2020, 12, 13, 1, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541818276, 'comment_body': ""This is a small commit, but that's fine for now :+1: "", 'comment_created': datetime.datetime(2020, 12, 13, 1, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541864657, 'comment_body': 'Please split the ""mistakes"" up and put them into the appropriate commits themselves. We wouldn\'t normally merge a commit that was like this. Let us know if you want help with git.', 'comment_created': datetime.datetime(2020, 12, 13, 7, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 541867641, 'comment_body': 'Can we improve this type?', 'comment_created': datetime.datetime(2020, 12, 13, 7, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 542080737, 'comment_body': ""Yeah, I guess the `tz_local` is specifically for obtaining local user's timezone :)\r\nSure, I'll do that."", 'comment_created': datetime.datetime(2020, 12, 14, 3, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 542081769, 'comment_body': ""I totally feel you :) Just like the edit history view in the message info, I'll add the key for the user info view (`i`) so that we're clear with the keys.\r\nYeah, I'll hook the README and keys commit together :)"", 'comment_created': datetime.datetime(2020, 12, 14, 3, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 542082125, 'comment_body': ""Yeah, absolutely. I'll make it cleaner and simpler :)"", 'comment_created': datetime.datetime(2020, 12, 14, 3, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 542082912, 'comment_body': ""Gotcha. I'll initialize this and also update its type in `helper.py` :)"", 'comment_created': datetime.datetime(2020, 12, 14, 3, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 542087280, 'comment_body': ""Yeah, I think so (not completely sure though).\r\nBy the GET request `client.get_user_by_id(user_id)`, I got the following dict:\r\n```\r\n{\r\n 'result': 'success',\r\n 'msg': '',\r\n'user': \r\n  {\r\n    'email': 'user16790@chat.zulip.org', 'user_id': 16790, 'avatar_version': 2,\r\n    'is_admin': False, 'is_owner': False, 'is_guest': False, 'is_bot': False,\r\n    'full_name': 'Matt Hall', 'timezone': 'America/Los_Angeles',\r\n    'is_active': True, 'date_joined': '2020-07-24T21:53:55.770840+00:00',\r\n     'avatar_url': '/user_avatars/2/848f00cf86435f7a12c7f6dafb476e47a7ee5665.png?x=x&version=2'\r\n  }\r\n}\r\n```\r\nSeems like we *have* to fetch the timezone of a user in any case. Please drop any suggestions if you have :)\r\nUPDATE: The logged-in user's time zone is stored in page_params js global variable in webapp."", 'comment_created': datetime.datetime(2020, 12, 14, 3, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 542088250, 'comment_body': ""Definitely. I'll update `helper.py` as mentioned above :)"", 'comment_created': datetime.datetime(2020, 12, 14, 3, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 542089244, 'comment_body': ""Yup. Apologies for that :sweat_smile:. I'll put the code changes in responsible commits :)"", 'comment_created': datetime.datetime(2020, 12, 14, 3, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 542101879, 'comment_body': 'Yeah! I just pulled over some code from the previous [PR](https://github.com/zulip/zulip-terminal/pull/519), so another iteration will fix this :)', 'comment_created': datetime.datetime(2020, 12, 14, 4, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 543789345, 'comment_body': ""Right, well the user data should be available in the model from what I can tell. It would benefit from refactoring, but the initial data is in `Model.initial_data['realm_users']`."", 'comment_created': datetime.datetime(2020, 12, 16, 0, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 544404962, 'comment_body': ""Thanks @neiljp for reminding me of the users realm, I've updated the PR accordingly :)"", 'comment_created': datetime.datetime(2020, 12, 16, 15, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 575995425, 'comment_body': ""This is distinct UI code now; let's keep it in a separate commit.\r\n\r\nYou can then also add tests for the new Model method in that commit too."", 'comment_created': datetime.datetime(2021, 2, 15, 7, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 575997006, 'comment_body': ""The case above (edit_mode_captions) isn't a good example of this, but these are constants so it seems reasonable to give the dict a full-caps name, perhaps more descriptive too.\r\n\r\nNote that the last has a typo."", 'comment_created': datetime.datetime(2021, 2, 15, 7, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 575999117, 'comment_body': 'I was going to suggest using the new refactored Model method to generate a rendered time.\r\n\r\nHowever, in general I\'d suggest this method doesn\'t aim as much for priming the data just for ""output"", so much as doing error-checking and refining - so that time function could sit in the UI, potentially?\r\n\r\nThe Model currently is where the data is acquired/updated/stablized/simplified; the UI may want to use various types of that data, so we won\'t necessarily want to put it too much into a presentation form. However, we can always refactor, in any case.\r\n\r\nThe mappings from API to presentation UI (like bot types) could be extended for the fields here too, which could simplify the conversions.', 'comment_created': datetime.datetime(2021, 2, 15, 7, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 576380127, 'comment_body': ""Something here isn't working, as I'm getting `-1 days ago` for idle users in the user list."", 'comment_created': datetime.datetime(2021, 2, 15, 19, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 576380659, 'comment_body': ""This doesn't seem to match; could you explain?"", 'comment_created': datetime.datetime(2021, 2, 15, 19, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 576566314, 'comment_body': ""Thanks, I'll update that. Given this PR is loaded with many commits right now, could I make another PR that refactors and converts all the constant metadata to full-caps name?"", 'comment_created': datetime.datetime(2021, 2, 16, 5, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 576596979, 'comment_body': 'Certainly. I didn\'t rebase this branch for a while so was unaware of that method :sweat_smile: \r\n\r\nAre you suggesting shifting the `formatted_local_time` method in `helper`? If so then I might do this refactor in a prior commit? (Assuming the aspect of this commit unrelated)\r\n\r\n>However, in general I\'d suggest this method doesn\'t aim as much for priming the data just for ""output"", so much as doing error-checking and refining - so that time function could sit in the UI, potentially?\r\n\r\nI\'m unclear about which method you mean by `this method`. Could you clarify this a bit? :sweat_smile: ', 'comment_created': datetime.datetime(2021, 2, 16, 7, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 576703150, 'comment_body': ""Strange :thinking:. It's working fine for me locally.\r\nThere may be some timezone data mishandling in the Model method (on first look),\r\nOr, there could be some unlooked loopholes in the below logic (in `helper`, last commit):\r\n```python\r\n    days = (datetime.now() - datetime.fromtimestamp(\r\n            timestamp)).days\r\n```\r\nThanks for reporting, as this could be highly misleading :+1: \r\n\r\n**EDIT:** I'll update this, I think I'll have to look over some other aspects of implementation from web app too.\r\nConsidering other important aspects in this PR, I could also add this in a follow-up PR. Do let me know if that sounds feasible :sweat_smile: "", 'comment_created': datetime.datetime(2021, 2, 16, 10, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 576713263, 'comment_body': ""Ah, that needs to be amended. Actually, I picked that whole comment (L670-L676) while referring to the web app's implementation :sweat_smile: \r\n\r\nAll that means (AFAIK) is that the Webapp declares the status `Active More than two weeks ago` for all those users whose either account is being deactivated, or are not active for a very long time :)"", 'comment_created': datetime.datetime(2021, 2, 16, 10, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 576732185, 'comment_body': ""Re my reply mentioning this code snippet, I think this isn't the right way to get the days. There could be a difference in the `datetime.now()` on L722 and here, and that's simply unreliable. I'll change it to get days by the minutes variable above :+1: "", 'comment_created': datetime.datetime(2021, 2, 16, 10, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 577340519, 'comment_body': 'Does the webapp implementation use that text, or ""Unknown""?', 'comment_created': datetime.datetime(2021, 2, 17, 5, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577340893, 'comment_body': ""The 'ago' part can be left until later I suspect - ie. we could leave it as absolute date/time for now?"", 'comment_created': datetime.datetime(2021, 2, 17, 5, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577343723, 'comment_body': 'Re the new/centralized method, the date/time output is centralized - and after #917 will be user-customized via the user account setting on the server - so the user likely should expect that format. So instead of using datetime directly, just use that new method? I\'m not sure where helper comes into it?\r\n\r\nRe this method, I meant the model one you\'re adding to get the user info - there are fine lines between the data from the server, the clarified/checked internal data, and that presented to the user. However, for now we can work on getting it working in a ""reasonable"" place and iterate from there - it\'s a bit like optimization: take care over a sensible starting point, but let\'s not debate for too long over how to improve it rather than getting it done :)', 'comment_created': datetime.datetime(2021, 2, 17, 5, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577344451, 'comment_body': 'If you\'re adding code, you can write it correctly when you add it - there\'s no point adding ""bad"" code if you know you\'re going to replace it :)', 'comment_created': datetime.datetime(2021, 2, 17, 5, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577765510, 'comment_body': 'Thanks! I Will remember that from now :sweat_smile: ', 'comment_created': datetime.datetime(2021, 2, 17, 16, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 577769014, 'comment_body': 'Thanks for the clarification!', 'comment_created': datetime.datetime(2021, 2, 17, 16, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 577779257, 'comment_body': 'I guess they used it just to symbolize that the data of a user inactive for more than 2 weeks ago is undefined.\r\n\r\n[This](https://chat.zulip.org/#narrow/stream/9-issues/topic/Last.20Online.3A.202.20Weeks.20Ago/near/727386) message on czo might be useful', 'comment_created': datetime.datetime(2021, 2, 17, 16, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 577952493, 'comment_body': 'Going as per the webapp seems good - and referencing that discussion or the issue may be relevant too.', 'comment_created': datetime.datetime(2021, 2, 17, 21, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 590369785, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2021, 3, 9, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 592039379, 'comment_body': ""Can we use `self.user_dict`, maybe with `self.user_id_email_dict` here?\r\n\r\nRe the commit text:\r\n* I'd focus more on that we're adding a method to get tidied user information\r\n* the name is important enough to be in the commit title :)"", 'comment_created': datetime.datetime(2021, 3, 11, 3, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592040782, 'comment_body': ""I know this is only changing in setup.py after the dependencies changes, but let's keep the previous format for dependency update commit titles for now. "", 'comment_created': datetime.datetime(2021, 3, 11, 3, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592097517, 'comment_body': 'It makes it harder to reason about when a method sets data in a hidden way, and also makes it harder to test if we wanted to do so. That\'s not to say we don\'t do this elsewhere, but if we can avoid it, it makes it simpler.\r\n\r\nIt **is** useful to have the helper method - it breaks out a chunk of code - but I\'d suggest just making it static and only have it do the ""styling"" of the data obtained from the model. It doesn\'t use any `self` data other than setting a value, after all.', 'comment_created': datetime.datetime(2021, 3, 11, 6, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592645711, 'comment_body': ""Let's definitely add a new area for this - if nothing else, this is confusing to read."", 'comment_created': datetime.datetime(2021, 3, 11, 19, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592647327, 'comment_body': 'This comment seems wrong - and likely unnecessary?', 'comment_created': datetime.datetime(2021, 3, 11, 19, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592654372, 'comment_body': 'This seems related to the data processing (so model-focused?), and also should likely take into account the local preferences for 24h vs am/pm - though the latter need not be centralized as long as we at least add a comment regarding that.', 'comment_created': datetime.datetime(2021, 3, 11, 19, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592993761, 'comment_body': ""In `self.user_dict`, some parameters like `date_joined`, `timezone`, roles etc. do not exist.\r\nRe the commit text, thanks for the suggestion. I'll update the commit message :sweat_smile: "", 'comment_created': datetime.datetime(2021, 3, 12, 8, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 593143606, 'comment_body': ""Oops. That's not required. Thanks for pointing out :+1: "", 'comment_created': datetime.datetime(2021, 3, 12, 12, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 593160801, 'comment_body': ""Sure. I'll propose `area:info` in my coming iteration"", 'comment_created': datetime.datetime(2021, 3, 12, 13, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 593823273, 'comment_body': ""Re not being present that's a good point, I assumed it would just store the data from realm_users - and I suspect we'll want to improve this to not update it every cycle too, and include realm_users events too. For now this seems fine, though we could add a note.\r\n\r\nThat said, these `Dict` appear invalid (they aren't good substitutes at runtime), and note that we use the two data structures already for looking up id->name, which fails for the cross-realm bots right now (crash with Notification Bot)."", 'comment_created': datetime.datetime(2021, 3, 14, 1, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 593827701, 'comment_body': 'Does `None` have a meaning already here? If not, this may be clearer?', 'comment_created': datetime.datetime(2021, 3, 14, 2, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 593827945, 'comment_body': ""We already have areas for more specific names, so I'd suggest `area:user` may be more appropriate?"", 'comment_created': datetime.datetime(2021, 3, 14, 2, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 593828420, 'comment_body': 'This is gruvbox, not DEFault color scheme.', 'comment_created': datetime.datetime(2021, 3, 14, 2, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 593828733, 'comment_body': ""I'd move the USER_INFO addition closer to this commit; we might squash the commits together later, but this is the first commit where it gets used in any case."", 'comment_created': datetime.datetime(2021, 3, 14, 2, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 593841121, 'comment_body': ""Re the annotation, I'll update it in the coming update. Thanks for the heads up :)\r\n\r\nRe the last point, can we improve the `user_name_from_id` to search in `realm_users` too? I'm not sure how runtime-friendly it would be, however.\r\n\r\nRe the crash, I am thinking of adding a generalized `_get_user_from_realm()`?\r\n(keeping this in mind, we can ignore my above comment)"", 'comment_created': datetime.datetime(2021, 3, 14, 4, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 617154062, 'comment_body': ""Reading the pytz docs, it seems that passing a timezone when constructing a datetime is not advised, and I suspect that's what is happening with `now(tz)`?"", 'comment_created': datetime.datetime(2021, 4, 21, 2, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 617209485, 'comment_body': 'My timezone output from this has an underscore instead of a space; I\'m not sure if there\'s a built-in conversion for this?\r\nI do see that this is also the case in the webapp too though!\r\n\r\nA possible point to consider (or in the future in a next iteration) is that while the ""local time"" is going to be very similar between the model+UI, `now` changes rather continuously, so it might be more meaningful to have the user info timezone be something to use, and the local time generated here.', 'comment_created': datetime.datetime(2021, 4, 21, 5, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 630380808, 'comment_body': 'Would it be simpler to also add an entry to `all_users_by_id` for cross-realm-bots here too?', 'comment_created': datetime.datetime(2021, 5, 11, 17, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 630384092, 'comment_body': ""These are intended to be internal, so let's indicate that with a leading underscore.\r\n\r\nAt risk of expanding this PR further, you could clarify the `Any` by adding new types to `api_types` - you may be able to use a style similar to the `Event` Union to simplify between regular users and bots?\r\n\r\nI'd expect a blank line before these lines."", 'comment_created': datetime.datetime(2021, 5, 11, 17, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 630386362, 'comment_body': ""This would be simplified by combining the regular and cross-realm bots - unless there's a reason we need the latter separate?"", 'comment_created': datetime.datetime(2021, 5, 11, 17, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 632734905, 'comment_body': '""user realms"" isn\'t self-explanatory to me, in this first commit title.', 'comment_created': datetime.datetime(2021, 5, 14, 18, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 632736607, 'comment_body': 'This PR has hung around just long enough that we could now add `is_moderator`?', 'comment_created': datetime.datetime(2021, 5, 14, 19, 0, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 632738441, 'comment_body': 'Minor: we could emphasize that this is ""raw"" data by naming this eg. `api_user_data`, or something shorter?', 'comment_created': datetime.datetime(2021, 5, 14, 19, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 632741608, 'comment_body': 'I\'m not sure if we need ""tidied"" here, though I appreciate the intent to make it clearer. Potentially using a TypedDict (helper.py perhaps, since it\'s not an api type) would make it clear to users from the internal method even without an underscore, though the name itself does need to be distinct at runtime of course.', 'comment_created': datetime.datetime(2021, 5, 14, 19, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 632745957, 'comment_body': ""To be forward-compatible, we likely want to make this into a `.get` with some kind of 'unknown' text?\r\n\r\nPossibly the same for USER_ROLE in terms of the default value, as eg. 'moderator' would not be identified right now - which I've tested since I now am one :)"", 'comment_created': datetime.datetime(2021, 5, 14, 19, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 632752071, 'comment_body': 'This is essentially a fixture for the output of `get_tidied_user_info`?\r\n\r\nI understand for getting this going that a dict internal to the test is easier, but it would be good if we could unify a ""sample output"" from that method, ie. relate it to our current standard test users in some way. If we change the output from the model method then we need to change the internals of this test otherwise - or eg. handling adding is_moderator.', 'comment_created': datetime.datetime(2021, 5, 14, 19, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 632754027, 'comment_body': 'If we used something like the `dict(fixture_copy, **to_vary_in_fixture)` approach as used in other tests, would this be clearer? (also your other similar tests)\r\n(the bot parts can be part of the to_vary element?)', 'comment_created': datetime.datetime(2021, 5, 14, 19, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 639413379, 'comment_body': 'Yes. I think I could remove this commit now that I could access all users via a single `get` command. What do you think?', 'comment_created': datetime.datetime(2021, 5, 26, 5, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 639458190, 'comment_body': 'Re the 2nd point, I like this idea. Though, I think the API responses for `realm_users` and `cross_realm_bots` are mostly the same, as seen in the [register API response](https://zulip.com/api/register-queue#response).\r\n\r\nThat said, I wonder if we could keep it a single TypedDict for now?', 'comment_created': datetime.datetime(2021, 5, 26, 7, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 639560617, 'comment_body': '`api_user_data` sgtm :+1:', 'comment_created': datetime.datetime(2021, 5, 26, 9, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 639685749, 'comment_body': ""Yeah, that makes sense. For USER_ROLE, I wish to propose that as I'm returning a custom-made `role` param from `get_tidied_user_info`, I could forcefully pass `is_moderator` (with `False` as default, or specified value) to it, and then handle it easily. I suppose it would make sense with regards to backward compatibility?\r\n\r\nNoting in my above proposal, if `is_moderator` is false, it wouldn't affect the default `Member` value as well, due to the internal ordering in `role` :)"", 'comment_created': datetime.datetime(2021, 5, 26, 12, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 639717053, 'comment_body': 'Agreed. I understand the timezone strings might be unaltered due to internal calculations, and the server would expect to let the client-side handle it. This should be straightforward with `replace` in our case. Could you elaborate (either here or in stream) exactly what similarity you observed regarding the buggy underscore behavior with webapp ?:sweat_smile:', 'comment_created': datetime.datetime(2021, 5, 26, 13, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 639731306, 'comment_body': ""Right. I'll consider this and your other comment mentioning `now()` declaration in UI."", 'comment_created': datetime.datetime(2021, 5, 26, 13, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 650550515, 'comment_body': 'This is an API response for a general realm user. I tried separating parameters unique to cross-realm bots, but found almost all parameters overlapping to the general API response. Let me know if we could further distinguish this TypedDict.', 'comment_created': datetime.datetime(2021, 6, 13, 16, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 665914094, 'comment_body': 'If we have `role` in the raw data, my understanding is that we can skip this?', 'comment_created': datetime.datetime(2021, 7, 8, 6, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 665914436, 'comment_body': 'Maybe the default should be `None` here, triggering lookup through the `is_*` fields?', 'comment_created': datetime.datetime(2021, 7, 8, 6, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 665917205, 'comment_body': 'We need to be backwards-compatible with ""bot_owner"" too, I believe.', 'comment_created': datetime.datetime(2021, 7, 8, 6, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 665919397, 'comment_body': 'After discussion on czo it turns out that `is_moderator` is not so reliable, and was introduced after `role` in any case, so we should prioritize that.', 'comment_created': datetime.datetime(2021, 7, 8, 6, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 665920025, 'comment_body': 'This should fall back to the `is_*` values - before `role` was added.', 'comment_created': datetime.datetime(2021, 7, 8, 6, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '6644e656a08d609f7565e2f03d35da1327b29106', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6c64114dc53afbb6044389688a1d35205ba806', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '350a74989e6c42e55ee5af8859f3be4917254843', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b93adbc847f5136a05f2b4801f24ef80868df3ea', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee857567ebef7ac868d7e90ce01abf45c4afd4f9', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc2ee23fd2c6e8c20fd413bb8592f109dc505d5', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92dbb8c7fd49ef70a179aec670bab6d49782023d', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
549967701,Handle topic links in message info view,"This PR is a headstart in handling Topic links in a stream topic.

**Commit flow:**
- Generate link buttons in message info view via a static method (Refactor).
- Add API return types for new and old topic links' responses.
- Convert message responses to support modern formats (in general) via a model helper (Refactor).
- Topic links stored by parsing into `OrderedDict` (like message links).
- Topic links appended in the message info view.

Fixes #709.

View:
![Topic links](https://user-images.githubusercontent.com/55916430/104996384-d0620b00-5a4d-11eb-9b70-49aada9de3f5.png)
",False,867,https://api.github.com/repos/zulip/zulip-terminal/pulls/867,https://github.com/zulip/zulip-terminal/pull/867,closed,198,20,8,5,4,30,2,0,"[{'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-01-06 05:15:59+00:00,2021-04-08 06:35:03+00:00,7953544.0,"92 days, 1:19:04","[{'comment_id': 559057856, 'comment_body': ""You're doing a lot of setting of attributes here, but setting the values before calling - that suggests it may be clearer passing things in as parameters and/or back as return values. In this case can we leave these two lines in `__init__` and simplify this?"", 'comment_created': datetime.datetime(2021, 1, 17, 0, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 559058101, 'comment_body': ""We should check this in any case, as I'm not sure why a group-PM should have a topic? Same above."", 'comment_created': datetime.datetime(2021, 1, 17, 0, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 559058351, 'comment_body': ""Note that we aim to support Zulip 2.1+, which is prior to feature level 1, so we need to support subject_links as well as topic_links.\r\n\r\nGiven the text below, you might consider whether we can refactor more tests to use the same message templates - so we don't need to make as many changes in multiple places."", 'comment_created': datetime.datetime(2021, 1, 17, 0, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 559059329, 'comment_body': 'Not having the link text available is a little frustrating :frowning_face:\r\n\r\nPerhaps the backend could be improved in this regard, as at least for linkifiers like we regularly use, we know there is ""link text"", like `#T867` here.\r\n\r\nFor now could we maybe special-case the view for empty link text and put it on one line?', 'comment_created': datetime.datetime(2021, 1, 17, 0, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 559908865, 'comment_body': ""Yeah, I ran the tests without subject_links in pm_template and group_pm_template, and as expected, there was no error.\r\n\r\nMaybe I'll mention this in the commit text as well. Thanks for pointing out :)"", 'comment_created': datetime.datetime(2021, 1, 19, 4, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 559909506, 'comment_body': ""For now, I've added `topic_links` wherever we have `subject_links` so that there is no version support issue. I've done this keeping in mind my reply to the comment below."", 'comment_created': datetime.datetime(2021, 1, 19, 4, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 567376262, 'comment_body': ""This isn't a pure refactor - would it be clearer if the differences were in the topic links commit?"", 'comment_created': datetime.datetime(2021, 1, 31, 6, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 567376859, 'comment_body': ""This doesn't actually need `self` so let's make it a classmethod for clarity?\r\n\r\nI'd prefer a better name - this doesn't set anything (now?), it produces something to be included elsewhere."", 'comment_created': datetime.datetime(2021, 1, 31, 6, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 567377557, 'comment_body': 'I just checked a connection with czo and it seems PMs send topic_links?', 'comment_created': datetime.datetime(2021, 1, 31, 7, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 567377789, 'comment_body': 'Both are never present together, unless there was some overlap in feature levels? We could potentially make these fixtures over feature-level, at the risk of getting more complex.', 'comment_created': datetime.datetime(2021, 1, 31, 7, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 567378177, 'comment_body': 'It would be great if we could keep this kind of conditional in the model instead. Depending on server version we could translate received messages in this way upon fetching?', 'comment_created': datetime.datetime(2021, 1, 31, 7, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577524073, 'comment_body': ""Actually, it uses `self.controller`, but that could be passed as a parameter too. (Since we're not modifying the class instance anyways :+1:) I'll update this in the coming iteration. Thanks for observing it :sweat_smile: \r\n\r\nRe the name, yeah I'll be naming it something like `get_link_buttons()`."", 'comment_created': datetime.datetime(2021, 2, 17, 11, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 577527617, 'comment_body': ""Ideally, this shouldn't be the case :thinking:, as there's no such 'topic' in PMs (or group PMs) as you mentioned earlier. This could be potentially filed in the main repo in any case, if not done already.\r\n\r\nEDIT: Looking through a successful JSON response for [get_messages](https://zulip.com/api/get-messages) API, I see the `subject` parameter is said to be present only for stream messages but is present in form of an empty string for PMs too. Although an empty string/list results in a fallacy of the conditional statements, I feel they sort of mislead a user looking over the API for the first time :)\r\n\r\nSince we should sync with our API in any case, I'll let subject links remain there for now if that seems reasonable."", 'comment_created': datetime.datetime(2021, 2, 17, 11, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 577608107, 'comment_body': ""Makes sense. My suggestion would be that we let `subject_links` stay untouched for now in the tests and fixtures. We're validating for both `*_links` parameter in the helper of later commit, in such a way that only one could possibly exist (I don't know why I didn't consider that for this commit :laughing:)\r\n\r\n(By untouched I'm not considering my below comment regarding PMs and group PMs)"", 'comment_created': datetime.datetime(2021, 2, 17, 13, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 577650384, 'comment_body': ""I'll let here both types stay. Since this is a response dict template, it should contain all the supported fetchable parameters IMO :)"", 'comment_created': datetime.datetime(2021, 2, 17, 14, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 579875312, 'comment_body': ""I think we can actually use `staticmethod` here - I think I suggested classmethod, but we don't use `cls`, so we can simplify slightly?"", 'comment_created': datetime.datetime(2021, 2, 21, 22, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 579875446, 'comment_body': ""Minor: lets keep the two returned values we're unpacking on the same first line."", 'comment_created': datetime.datetime(2021, 2, 21, 22, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 579875501, 'comment_body': ""Is there a reason you're renaming this? This makes the diff bigger and more difficult to identify changed/moved lines (particularly with `git diff --color-moved` or similar)."", 'comment_created': datetime.datetime(2021, 2, 21, 22, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 579876465, 'comment_body': 'This name is better, but `get` is very general. Perhaps `generate`, `create` or similar?', 'comment_created': datetime.datetime(2021, 2, 21, 22, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 579876996, 'comment_body': 'Yes, this helps with validating keys. We can point out the range of feature levels for each case in the comments?\r\n\r\nWe can put this one-line commit with the model change I suggested splitting-out.', 'comment_created': datetime.datetime(2021, 2, 21, 22, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 579878765, 'comment_body': 'I would definitely split this into its own commit.\r\n\r\nHowever, to clarify my earlier comment, we could instead add a model helper method which cleans received messages into the modern format - that ensures that we just have to consider topic_links, since we already expose the message data (for now).', 'comment_created': datetime.datetime(2021, 2, 21, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 580053785, 'comment_body': 'Makes sense. That could be used potentially for modernizing more than one params in general! Thanks for the suggestion :)', 'comment_created': datetime.datetime(2021, 2, 22, 8, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 580645516, 'comment_body': ""This doesn't seem connected?"", 'comment_created': datetime.datetime(2021, 2, 22, 22, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 580646052, 'comment_body': 'Does this have any application outside of the conditional below?', 'comment_created': datetime.datetime(2021, 2, 22, 22, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 580658511, 'comment_body': ""I'm not sure the comment is necessary - it duplicates the function name? :)\r\n\r\nNote that we need to call this for all new messages, both on explicit message fetch and for message events."", 'comment_created': datetime.datetime(2021, 2, 22, 23, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 580659876, 'comment_body': 'It may be worth adding some empty cases too? The code should already handle it, and the test will then specify that it should.', 'comment_created': datetime.datetime(2021, 2, 22, 23, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 580661892, 'comment_body': 'Do you expect to expand upon this in future or call it in more than one place? If not then right now this appears to be a dict comprehension, so I think we can have it inline at the one call site?', 'comment_created': datetime.datetime(2021, 2, 22, 23, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 580663138, 'comment_body': 'Is this simplified if the slice_index is in the conditional in the earlier commit?', 'comment_created': datetime.datetime(2021, 2, 22, 23, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 580665487, 'comment_body': 'This docstring could be more helpful - why is it useful/helpful?\r\n\r\nAlso ""receive"".', 'comment_created': datetime.datetime(2021, 2, 22, 23, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 581043947, 'comment_body': ""By empty do you mean `list()` or `None`? We don't have a `None` value response for `topic_links` from API call anyways. That said I'll add some empty list tests. Thanks for pointing out :)"", 'comment_created': datetime.datetime(2021, 2, 23, 13, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': '1142cb9186bae791d6df5ad06a012e23060f8cb9', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54cf76d3b80b07d68cecc7602dfdb17f08d755df', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c597740db6a5f6dcd9d5505f2abb1df3336f3345', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b0c634cc11f99977583956cb8cbf009b0d26078', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6e5d265ec5f3102d6db7f9e28f4c17d0bed6df', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
561665492,Restructuring `topic_links` format returned by our API.,"<!-- What's this PR for?  (Just a link to an issue is fine.) -->
The linkifier code now includes both the shortened text and the expanded URL, sorted by the order of the occurrence in a topic. This list is passed back in the `topic_links` parameter of the /messages and the /events APIs. 

```
earlier: ['https://www.google.com', 'https://github.com/zulip/zulip/32']

now: [{'url': 'https://www.google.com"", 'text': 'https://www.google/com},
         {'url': 'https://github.com/zulip/zulip/32', 'text': '#32'}]
```

**Testing plan:** <!-- How have you tested? -->
Tests amended and verified manually.

**GIFs or screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->


<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
Fixes: #17109 ",True,17124,https://api.github.com/repos/zulip/zulip/pulls/17124,https://github.com/zulip/zulip/pull/17124,closed,204,61,10,1,7,14,3,0,"[{'name': 'area: markdown'}, {'name': 'area: api'}, {'name': 'size: XL'}]",2021-01-26 09:52:42+00:00,2021-03-30 22:54:30+00:00,5490108.0,"63 days, 13:01:48","[{'comment_id': 564459851, 'comment_body': ""minor: this change is in the commit that's advertised as just the API change."", 'comment_created': datetime.datetime(2021, 1, 26, 12, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 564461321, 'comment_body': ""minor: `match_details` sounds more natural to me, even more so because we're already iterating over a match object (`for m in re.finditer()`).\r\n"", 'comment_created': datetime.datetime(2021, 1, 26, 12, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 564465177, 'comment_body': ""I've previously thought this construction isn't very easy to read. In fact, even when reading this code yesterday, I glanced over it as code that somehow works but I'm not interested in looking up the specifics of how the regex match API works, while _all it is is a format string_.\r\n\r\nI'm not sure how others feel about it but I feel we should have a follow-up commit to explicitly say what we're doing, like:\r\n\r\n```python\r\n# format the realm_filter's url string using the matched text.\r\nurl = realm_filter[1] % match_details\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 1, 26, 12, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 564486283, 'comment_body': 'I was also confused as to what was going on here the first time I read it. I added a similar comment and one below as to why we are including the match_text. Thanks for pointing it out :)', 'comment_created': datetime.datetime(2021, 1, 26, 12, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 564641402, 'comment_body': ""This type shouldn't need a union; we're stripping away the `index` field before returning."", 'comment_created': datetime.datetime(2021, 1, 26, 16, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 564952487, 'comment_body': 'Indeed, however, mypy shouts at me with \r\n```\r\n(zulip-py3-venv) vagrant@23d7671b6078:/srv/zulip$ ./tools/run-mypy\r\nzerver/lib/markdown/__init__.py:2121: error: Incompatible return value type \r\n(got ""List[Dict[str, Union[str, int]]]"", expected ""List[Dict[str, str]]"")  [return-value]\r\nFound 1 error in 1 file (checked 1184 source files)\r\n```\r\nWondering if it Is because I am returning back the same `matches` object? Any ideas?', 'comment_created': datetime.datetime(2021, 1, 27, 1, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 565001759, 'comment_body': ""Yeah, that makes sense. Maybe copying to a new List would help here. I'll run some experiments. Maybe this is something they've addressed already but it does look like a hard problem to track which elements of each dict have been deleted with just static type checks so I doubt there's a solution without cloning the List."", 'comment_created': datetime.datetime(2021, 1, 27, 3, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 565511869, 'comment_body': ""Yeah, mypy doesn't like changing the type of a variable.  Generally code is more readable using a new variable name for the output (vs. the input), anyway, so I'd recommend doing that."", 'comment_created': datetime.datetime(2021, 1, 27, 17, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 565512539, 'comment_body': 'This needs a corresponding change to the documentation in `zerver/openapi/zulip.yaml`.', 'comment_created': datetime.datetime(2021, 1, 27, 17, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 566517570, 'comment_body': 'Hmmm... this is proving to be tricky. Seems like even using a new variable and copying to it the k, v pair seems to unsettle mypy. \r\n```\r\n    .....\r\n    matches = sorted(matches, key=lambda k: k[""index""])\r\n    matches_output: List[Dict[str, str]] = [{k: v for k, v in match.items() if k != ""index""} for match in matches]\r\n    return matches_output\r\n```\r\nstill throws \r\n```\r\nzerver/lib/markdown/__init__.py:2118: error: Value expression in dictionary comprehension has incompatible type ""Union[str, int]""; expected type ""str""  [misc]\r\nFound 1 error in 1 file (checked 1184 source files)\r\n```\r\n\r\nHmmm...Seems like only type-casting the value in the dictionary before returning seems to work.\r\n```\r\n    return [{k: str(v) for k, v in match.items() if k != ""index""} for match in matches]\r\n```', 'comment_created': datetime.datetime(2021, 1, 29, 1, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 576510546, 'comment_body': ""Hmm, yeah, I think that's reasonable.  "", 'comment_created': datetime.datetime(2021, 2, 16, 2, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 576512554, 'comment_body': 'Maybe "": `topic_links` fields now contain a list of objects, rather than a list of strings"".?  think the details of the change are best expressed on the page themselves; this is meant to be a very high level reference.', 'comment_created': datetime.datetime(2021, 2, 16, 2, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 576513228, 'comment_body': 'The phase ""New in Zulip ..."" is meant to be used only when the field is new.  I think we can replace this line with:\r\n\r\n""**Changes**: This field contained a list of URLs before Zulip 4.0 (feature level 40).""  We don\'t need to repeat the details of the new format, because that\'s explained in the main text of the documentation; we just need to explain what the old format meant.\r\n\r\nAnd then I like your approach of keeping the old Changes as a new paragraph.', 'comment_created': datetime.datetime(2021, 2, 16, 2, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 604480251, 'comment_body': 'I think you ended up collapsing the old changes into the existing paragraph; I undid that (see the screenshot in the issue I opened below).', 'comment_created': datetime.datetime(2021, 3, 30, 22, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'e12f682e2e9c85f3d7fb93fecc4284c28f046705', 'committer_username': 'sumanthvrao', 'committer_name': 'Sumanth V Rao', 'committer_email': 'svrao@ucsd.edu', 'commit_date': datetime.datetime(2017, 7, 20, 8, 9, 44, tzinfo=datetime.timezone.utc)}]",Sumanth V Rao,30312566,svrao@ucsd.edu,User,,68,,110,112
555673916,Scrollable large single msg view,"**What does the PR do?!** :

 - Allows scrolling for large single messages 
   **Note: currently true for every message**
 - Provides raw and rendered message view to users.

**Commit flow:**
- refactor: views: Use urwid.Frame for PopUpView.
- boxes: Add members to MessageBox to fetch header, content, footer.
- hotkeys/keys: Add f hotkey for full rendered message popup.
- views: Structure FullRenderedMsgView class.
- core: Add controller helper to show full rendered message on toggle.
- views: Add keypress events for showing/hiding full rendered message.
- model: Add support for fetching a raw message.
- refactor: boxes: Use new model method to fetch a raw message.
- hotkeys/keys: Add r hotkey for full raw message popup view.
- views: Structure FullRawMsgView class.
- core: Add controller helper to show full raw message on toggle.
- views: Add keypress events for showing/hiding full raw message.

Further discussions [here](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Full.20message.20source.20scrollable.20view.20.23T543) on czo :)

Fixes #543.

**Screenshots/GIFs:**
*Full Rendered Message View*
![rendered_view](https://user-images.githubusercontent.com/55916430/125608064-95177600-cf49-451f-8482-309f175541c4.png)
*Full Raw Message View*
![raw_message_view](https://user-images.githubusercontent.com/55916430/125608220-88216961-ce62-4ea1-9d43-309a309c76af.gif)
",True,874,https://api.github.com/repos/zulip/zulip-terminal/pulls/874,https://github.com/zulip/zulip-terminal/pull/874,closed,255,11,9,6,6,41,3,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-01-15 12:37:54+00:00,2021-07-23 06:38:21+00:00,16308027.0,"188 days, 18:00:27","[{'comment_id': 591711984, 'comment_body': ""I was confused about this (and possibly other code) being identical to the PopUpView code, but you're re-implementing a different popup type here?"", 'comment_created': datetime.datetime(2021, 3, 10, 17, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 591717241, 'comment_body': 'minor: add line above item being tested.', 'comment_created': datetime.datetime(2021, 3, 10, 17, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 591718484, 'comment_body': ""I don't see a reason to shorten this?"", 'comment_created': datetime.datetime(2021, 3, 10, 17, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 591722655, 'comment_body': ""The height doesn't try and maximize to the available based on rendered and raw content, eg. if the raw is larger."", 'comment_created': datetime.datetime(2021, 3, 10, 17, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 591803752, 'comment_body': ""Since it's a toggle key, Show/hide would be more consistent here?"", 'comment_created': datetime.datetime(2021, 3, 10, 19, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 591815628, 'comment_body': 'Are these lines necessary?', 'comment_created': datetime.datetime(2021, 3, 10, 19, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 591832374, 'comment_body': 'Are we using ""view"" in any other popup\'s header name?\r\n\'view\' sounds good, but seems inconsistent with our other popups, and unnecessarily increases header length.', 'comment_created': datetime.datetime(2021, 3, 10, 20, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 591836920, 'comment_body': 'I guess we already transitioned to f-strings. It would be better to use that instead of `.format()` wherever possible. :)', 'comment_created': datetime.datetime(2021, 3, 10, 20, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 591846752, 'comment_body': ""It's good that you are taking care of the 'N/A' case. :+1: \r\nBut, it's probably better to expand N/A to something clearer in any case. :)"", 'comment_created': datetime.datetime(2021, 3, 10, 20, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 592119342, 'comment_body': 'Nope. I realized I need simply `PopUpView` as base class for content. Thanks :)', 'comment_created': datetime.datetime(2021, 3, 11, 7, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 597992881, 'comment_body': ""I know we have a pre-existing example of this, but network/zulip error handling shouldn't really be in the UI. We generally handle the rest in wrapped methods in the model. You could add a refactor to wrap the raw call like with other calls to `client`."", 'comment_created': datetime.datetime(2021, 3, 19, 21, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 597996773, 'comment_body': 'This seems to generate narrow popups, even when the base window is quite wide?\r\nFor large messages we want to display as much as we can :)', 'comment_created': datetime.datetime(2021, 3, 19, 22, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 597997378, 'comment_body': 'Could you explain the logic here? What makes 64 special? This explains the narrow popup.', 'comment_created': datetime.datetime(2021, 3, 19, 22, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 598001421, 'comment_body': 'This seems conveniently similar to the hardcoded ""magic"" value in the actual code; maybe we should parametrize over things somehow so a test notices, or at least fix that width issue!', 'comment_created': datetime.datetime(2021, 3, 19, 22, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 598002064, 'comment_body': ""This is confusing to read, and in the code - it's not compose related."", 'comment_created': datetime.datetime(2021, 3, 19, 22, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 598051446, 'comment_body': ""I initially thought that 64 is the maximum width :sweat_smile:. I'll refactor that using `max_cols` from controller :+1:"", 'comment_created': datetime.datetime(2021, 3, 20, 2, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 598052765, 'comment_body': ""True. It would be then good to first show the raw content then? (Since most likely the length of raw content is more than the formatted one).\r\n\r\nOn a side note, I'm a bit skeptical on whether to change the width/height of the popup upon switching. Is this something we want to achieve?"", 'comment_created': datetime.datetime(2021, 3, 20, 3, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 598069942, 'comment_body': '(See my other comment)', 'comment_created': datetime.datetime(2021, 3, 20, 6, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 598070123, 'comment_body': ""Thanks for pointing that out. Initially, it was `show_full_msg_view`, but `view` seemed obvious, so I skipped it. I'll change it to `show_full_message` :+1: "", 'comment_created': datetime.datetime(2021, 3, 20, 6, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 598076229, 'comment_body': ""`PopUpView` already has both `max_rows` and `max_cols` present in its constructor, we don't need to pass those again, right?"", 'comment_created': datetime.datetime(2021, 3, 20, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 598084328, 'comment_body': 'Right. I forgot we could utilize the static method from `PopUpView` in this. Thanks for pointing out :)', 'comment_created': datetime.datetime(2021, 3, 20, 8, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 598089177, 'comment_body': ""What I'm passing is the `requested_width` (required parameter), as we want to display as much info on that view as we can. In my coming iteration, that 64 would be replaced by `max_cols`. Hope I'm able to clarify :sweat_smile:"", 'comment_created': datetime.datetime(2021, 3, 20, 9, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 624571241, 'comment_body': ""This will be considered no different to a message that says this, so I'd suggest we change the return type to include None for this case.\r\n\r\nYou might consider appending `_content` to the method name, as it only exposes the content."", 'comment_created': datetime.datetime(2021, 5, 1, 21, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 624571677, 'comment_body': ""This seems overly generic - though we may end up using this more widely - and while the UI element is a 'tab', the key is also 'tab', which is a bit confusing. Maybe a `TOGGLE_` prefix to something?"", 'comment_created': datetime.datetime(2021, 5, 1, 21, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 643317708, 'comment_body': 'I believe it would be reasonable to return an empty string so that you can check elsewhere for a failure easily.', 'comment_created': datetime.datetime(2021, 6, 1, 17, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 643324923, 'comment_body': ""Two things about the commit text:\r\n* We could remove the `refactor:` label as this is not a refactor commit rather it adds a method.\r\n* It's better to explicate what the commit would add/do in the commit title. In this case, we could mention that it would add support for fetching a raw message."", 'comment_created': datetime.datetime(2021, 6, 1, 17, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 643336375, 'comment_body': 'We should add why it is four than saying +1.', 'comment_created': datetime.datetime(2021, 6, 1, 17, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 643347566, 'comment_body': 'The label in the Message Information view says ""Full message"" but this renders ""Raw content"" first. I think we should show the ""Raw content"" later if we end up going the _tabs_ way.\r\n', 'comment_created': datetime.datetime(2021, 6, 1, 17, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 643348536, 'comment_body': 'Also, it is not evident whether the user is being presented with ""Full message"" or ""Raw content"" in the UI.', 'comment_created': datetime.datetime(2021, 6, 1, 17, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 671893844, 'comment_body': 'Given we use content further down, I\'d be inclined to rename that to ""wrapped_content"" or similar. That\'s what appears in the parts dict too.', 'comment_created': datetime.datetime(2021, 7, 18, 20, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 671894313, 'comment_body': 'Do you mean last row?', 'comment_created': datetime.datetime(2021, 7, 18, 20, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 674466879, 'comment_body': ""To simplify the typing, it'd be cleaner to initialize this here and use `set_text` later."", 'comment_created': datetime.datetime(2021, 7, 22, 2, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 674529966, 'comment_body': ""I can see why this is necessary, but I'm unclear why we don't use it for the edit history popup, since that seems a close equivalent of this one.\r\n\r\nThere's no test for this?"", 'comment_created': datetime.datetime(2021, 7, 22, 6, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 675004874, 'comment_body': 'You mean the local variable `content` only or the class variable `self.content` too?', 'comment_created': datetime.datetime(2021, 7, 22, 17, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 675014932, 'comment_body': ""Ah. This didn't grab my attention before! I didn't expect this to be the case :sweat_smile:. Thanks for pointing this out! I am actually expecting the opposite. What I expect is exiting of popup using either `FULL_RENDERED_MESSAGE` (say) or `GO_BACK` **only**\r\n\r\nEDIT: Doubt cleared :)"", 'comment_created': datetime.datetime(2021, 7, 22, 17, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 675079389, 'comment_body': ""Yes. This shouldn't be present in the current iteration, right? :sweat_smile: "", 'comment_created': datetime.datetime(2021, 7, 22, 18, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 675128296, 'comment_body': 'Good discussion! Thanks @preetmishra :)', 'comment_created': datetime.datetime(2021, 7, 22, 20, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 675128850, 'comment_body': 'We clarified this in PMs - it looks much clearer now :+1:', 'comment_created': datetime.datetime(2021, 7, 22, 20, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 675129059, 'comment_body': 'I think was left from a previous review draft!', 'comment_created': datetime.datetime(2021, 7, 22, 20, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 675209928, 'comment_body': 'This is going to be a duplicate of the error handling in the model method?', 'comment_created': datetime.datetime(2021, 7, 22, 22, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 675316360, 'comment_body': ""Ah yes. I'll simply return in that case :+1:. Thanks for pointing out!"", 'comment_created': datetime.datetime(2021, 7, 23, 5, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': '9fc568229419851813702ed0b3164ccc593ecdde', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c6f7e5e80fceef81e1a2e9d01df60a5c55291bc', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '571d17f6c870dda380e26c5a5e53d836583c7ce3', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817a74c90c910ae60880b326e7c172b8eca26c7c', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd66ac4f83c00892ff0731789db63a1bd19d8c5', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c835ca47abf3e2756c8b3ee05964606f192551b', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
601406700,refactor: tests: Add path prefixes for patching class methods,"Currently, in pytests, several statements use hard-coded module path strings for patching purposes.
The intent of this PR is to refactor such statements and as a result, reduce code duplication.",True,959,https://api.github.com/repos/zulip/zulip-terminal/pulls/959,https://github.com/zulip/zulip-terminal/pull/959,closed,250,263,10,10,4,0,3,0,"[{'name': 'area: tests'}, {'name': 'size: XL'}, {'name': 'area: refactoring'}]",2021-03-26 08:20:59+00:00,2021-07-07 19:26:05+00:00,8939106.0,"103 days, 11:05:06",[],"[{'commit_sha': '25a594ed1721bc9b1cad7dd7d6ff4e6638531273', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39202c9122a41dcd2740e18a414191c84c29d376', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db2f6d86a6a6c92bc38d884f452dffb9e68dc4ad', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89a458dabfe234891bdcab2e249ebec3cc826f01', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09493ed66687d01fc3edda7e646e001ca80db3e', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e0db9271a4a4584d761ee53b7cbebe6c13950e', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db533a7d696061e96f63e92e28b4a08befa95488', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '329f5a0c65b7e2835f3f76383f31518a54d0a900', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd11d6238f10ed70bb91a259cdfe53ae55255c52c', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158e09ed2554d390edcf8d86de588e4804b85b19', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
603366663,Add basic fields in footer notification styling,"**What does this PR do?!**
 - Adds general styling fields: `task:success`, `task:error`, `task:warning`.
 - Adds contrast-color style for footer hint text.
 - refactor: Add default report helpers for success/error/warning footer notifications.
 - Replace the instances of `set_footer_text()` with added helpers wherever reasonable.

I'd highly appreciate any feedback :)

Fixes #782.",True,971,https://api.github.com/repos/zulip/zulip-terminal/pulls/971,https://github.com/zulip/zulip-terminal/pull/971,closed,131,66,12,4,4,17,5,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'further discussion required'}, {'name': 'size: XL'}, {'name': 'feedback wanted'}]",2021-03-30 04:49:36+00:00,2021-06-16 20:29:40+00:00,6795604.0,"78 days, 15:40:04","[{'comment_id': 608608702, 'comment_body': ""I am not sure if we currently have any use-case, but could we also support a `task:warning` perhaps? -for something that's not as severe as a failure."", 'comment_created': datetime.datetime(2021, 4, 7, 12, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 608611404, 'comment_body': 'We should change this to `task`, to be more consistent with other footer styles. We could always have another one for `area:neutral` if the need be.', 'comment_created': datetime.datetime(2021, 4, 7, 12, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 608616863, 'comment_body': 'This seems like a good candidate for `task:warning`?\r\nAs in, the user is still allowed to edit, but not the message body.', 'comment_created': datetime.datetime(2021, 4, 7, 12, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 609638244, 'comment_body': ""We could, though I'm unsure of what styles to expect for that. Could you suggest some color designs (which could potentially be rendered across all themes)?"", 'comment_created': datetime.datetime(2021, 4, 8, 12, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 609647538, 'comment_body': ""Thanks for pointing that out. The original intent for it was that it might be used (in general) for other areas (in future) where there's no highlighting required, e.g., typing status. However, since I couldn't think of more such examples, currently we could just align it with other footer-dedicated attributes. We could simply add such themes later in any case :+1:"", 'comment_created': datetime.datetime(2021, 4, 8, 12, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 609871317, 'comment_body': 'how about a `dark_yellow` or `light_orange`(not sure if they feasible, though). We could probably test other variants too.', 'comment_created': datetime.datetime(2021, 4, 8, 16, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611050260, 'comment_body': 'Well, we would tend to support all themes, so this might be a support issue for `gruvbox`. We could style it similar to `area:msg`, since its color scheme kind of aligns with what we call `warning` (?)', 'comment_created': datetime.datetime(2021, 4, 10, 14, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 611051806, 'comment_body': 'Yep, sounds good!', 'comment_created': datetime.datetime(2021, 4, 10, 14, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645078132, 'comment_body': '`theme` seems a confusing term to use here.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645080904, 'comment_body': ""I'm unsure if having these the same as the footer default provides the (temporary) strikingly visible update that we'll get with the colored themes."", 'comment_created': datetime.datetime(2021, 6, 3, 19, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645081537, 'comment_body': ""I'm inclined to think that this can just stay as `'footer'`?"", 'comment_created': datetime.datetime(2021, 6, 3, 19, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645082034, 'comment_body': ""The full opposite of success is often `error`, particularly when there's a `warning` entry present."", 'comment_created': datetime.datetime(2021, 6, 3, 19, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645084065, 'comment_body': 'I understand wanting to change the default style colors to give contrast with the new task styles, but the contrast within the default bar is very low now here, both for keyboard shortcut hints and for autocomplete selection.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 650661955, 'comment_body': ""I think having a color (say green) on a result (say success) draws user's attention more than just changing the text with the default footer background. We could surely gain feedback in stream in any case."", 'comment_created': datetime.datetime(2021, 6, 14, 5, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 650664907, 'comment_body': 'How about yellow-blue (foreground-background)?', 'comment_created': datetime.datetime(2021, 6, 14, 5, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 650673687, 'comment_body': ""Right, my initial thought would be to temporarily do something like invert from the default style; I'm not sure what that translates to. Discussing on the stream would be good, though this would be a small update later too."", 'comment_created': datetime.datetime(2021, 6, 14, 6, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 650674449, 'comment_body': 'That sounds quite noticeable - maybe too much compared to the others! - but maybe put some examples together and see what others think?', 'comment_created': datetime.datetime(2021, 6, 14, 6, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'c863700c5c5cb130533a236a52ce9df793dda6c8', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8781fce319bb82378b872913cd22a4a2854ee50', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccb6fc7d15d46b5311dbb1b76cba9b35d76d637', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eecc126f25264fe87e8e4b3b44ba062f569c849', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
610322029,Show sender's presence status in message content header,"**What does this PR do?!**
 - Adds sender's presence status marker in a message content header

**Commit flow**
 - Centralize the state icons in `ui_mappings.py` (*refactor*)
 - Add state marker as a prefix to sender names in the message header.
 - Add helper in `MessageBox` to update author field if present.
 - Add a method to render presence markers in messages regularly.

**Screenshots/GIFs**

![Screenshot from 2021-06-26 23-02-58](https://user-images.githubusercontent.com/55916430/123521220-fe213f00-d6d2-11eb-89e7-4be5fc0d6d3d.png)

Fixes #896.",True,987,https://api.github.com/repos/zulip/zulip-terminal/pulls/987,https://github.com/zulip/zulip-terminal/pull/987,closed,105,23,5,4,5,33,4,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2021-04-07 04:41:03+00:00,2021-07-04 21:44:48+00:00,7664625.0,"88 days, 17:03:45","[{'comment_id': 615403543, 'comment_body': ""Let's include the filenames in the commit title."", 'comment_created': datetime.datetime(2021, 4, 18, 14, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 615403577, 'comment_body': 'Should we call it `STATE_ICONS` instead?', 'comment_created': datetime.datetime(2021, 4, 18, 14, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 615404477, 'comment_body': ""Since this doesn't have an else case, line `1232` might raise an exception, right?"", 'comment_created': datetime.datetime(2021, 4, 18, 14, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 615652488, 'comment_body': 'Hmm. Seems more apt :+1: \r\n\r\nI was also thinking if extracting this in `symbols` would be more suitable?', 'comment_created': datetime.datetime(2021, 4, 19, 8, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 615661329, 'comment_body': ""To clarify, line `1203` sets the default values for all the `text_keys` (see line `1202`). So, the default value of `text['status']` would be `(None, ' ')`. Hope this helps :)\r\n\r\nNonetheless, I think it's good to add a note here in any case :+1: "", 'comment_created': datetime.datetime(2021, 4, 19, 8, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 619598676, 'comment_body': ""When naming like this, it's good to think of how it's used - `STATE_ICONS['active']` suggests there are more than one active one? Generally I err towards the non-plural for this reason.\r\n\r\nAlso the values are icons, but the keys aren't - so as always, naming is tricky to get perfect!\r\n\r\nThis relates application state values to representation, a little like `edit_mode_captions`, so perhaps it belongs in with that, though I'm not keen on `helper.py` for that."", 'comment_created': datetime.datetime(2021, 4, 24, 6, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 619689804, 'comment_body': 'We will want to refactor this in future as we make changes to the user/presence details to improve encapsulation and move towards using `id`s for lookup.', 'comment_created': datetime.datetime(2021, 4, 24, 18, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 619690297, 'comment_body': ""I'm not sure whether this is the right test to add it to, but we're not extending the testing to cover the range of activity markers, or being a bot?"", 'comment_created': datetime.datetime(2021, 4, 24, 18, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 619690600, 'comment_body': ""It's probably relevant to note here that an empty dict is what's causing the `INACTIVE` symbols?"", 'comment_created': datetime.datetime(2021, 4, 24, 18, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 619692357, 'comment_body': ""The new method you've added does a lot of digging into MessageBox - it seems like it would be simpler to have the logic inside that class/object?\r\n\r\nI'm also not sure that `model._update_rendered_view` is required here, or that maybe we can try a different approach. Most of the explicit logic there is more for reordering - though other handlers do use it for updating, albeit one message at a time. Given the way that the latter method works, this is going to filter every message and re-generate/render them all, one by one. Each box does need updating, but maybe we can add a method to MessageBox to just update the one element?\r\n\r\nI'm slightly concerned with the asynch here, as it's yet another function updating the message list in addition to events, conceptually in parallel."", 'comment_created': datetime.datetime(2021, 4, 24, 18, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 620382609, 'comment_body': ""Yeah. Currently, in the PR, I've marked all users (including bots) as per their activity. Thus, a bot would currently be marked `inactive`.\r\n\r\nYes, my intent was to just amend the tests re header content to be shown (currently), not testing the activity marker rendering in particular."", 'comment_created': datetime.datetime(2021, 4, 26, 15, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 620387393, 'comment_body': ""Sure. I'll add a relavant TODO note :+1: "", 'comment_created': datetime.datetime(2021, 4, 26, 15, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 622063782, 'comment_body': ""Just to resolve this discussion, I've migrated the `STATE_ICON` to `ui_mappings.py` as added to main recently via #1013."", 'comment_created': datetime.datetime(2021, 4, 28, 10, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 622065134, 'comment_body': 'Separated message box digging in 3rd commit.\r\nProposed a better approach for rendering in the last commit', 'comment_created': datetime.datetime(2021, 4, 28, 11, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 626598283, 'comment_body': 'Thanks for clarifying.', 'comment_created': datetime.datetime(2021, 5, 5, 14, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659160059, 'comment_body': 'As you note in the commit (also in the next one), this is not a class method. Class methods are not bound to objects.', 'comment_created': datetime.datetime(2021, 6, 26, 12, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659160165, 'comment_body': 'Could we store `self[1][1]` in a variable before so that it is more clear what is being checked?', 'comment_created': datetime.datetime(2021, 6, 26, 12, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659160190, 'comment_body': 'See my other comment re storing these values in a variable.', 'comment_created': datetime.datetime(2021, 6, 26, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659160995, 'comment_body': '`header_needed` and `mocker` are never used in the method body?', 'comment_created': datetime.datetime(2021, 6, 26, 12, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659161502, 'comment_body': ""Since you're using `self.body.log` more than once, you could extract it in a variable."", 'comment_created': datetime.datetime(2021, 6, 26, 12, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659187014, 'comment_body': ""Yes, though I think it would be not helpful for the line L558 (where we're updating `self.body.log` itself)?\r\n\r\nOr do you mean updating the whole message list outside the loop in the end:\r\n`self.body.log = msg_list` (if `msg_list` is the variable for instance) ?"", 'comment_created': datetime.datetime(2021, 6, 26, 16, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 659192299, 'comment_body': ""I see that you're only mutating the attribute inside the loop, so extracting `self.body.log` would work."", 'comment_created': datetime.datetime(2021, 6, 26, 16, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 659192339, 'comment_body': '(Assuming by not helpful you meant it is not going to update the original log.)', 'comment_created': datetime.datetime(2021, 6, 26, 16, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 662610835, 'comment_body': ""Let's aim to use `message` since we have space. Is the loop variable more accurately a widget wrapper around a message_box, not a 'button'?"", 'comment_created': datetime.datetime(2021, 7, 1, 21, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 662615666, 'comment_body': 'Would `message_box = widget.original_widget` and `message_box.update_content_header()` remove the need for a comment?', 'comment_created': datetime.datetime(2021, 7, 1, 21, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 662616466, 'comment_body': ""Do we need this? Ah, you're using this in the test?"", 'comment_created': datetime.datetime(2021, 7, 1, 22, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 662624536, 'comment_body': ""This isn't the content_header, but the author field? If so, let's name it that? Maybe set `author_column = 1` and use that in the indexing to make it clearer?"", 'comment_created': datetime.datetime(2021, 7, 1, 22, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 662625873, 'comment_body': 'It\'s not obvious where the `"" ""` test comes from - it\'s the default author text, when there\'s no author in the header, right? That\'s partly unclear due to the content_header variable name, but ""non empty"" and ""content header"" just repeat the code, so if we\'re going to include a comment, let\'s make it more useful - or set a variable like `author_is_present = ...` to help.', 'comment_created': datetime.datetime(2021, 7, 1, 22, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 662626318, 'comment_body': ""This doesn't seem too much of an issue performance-wise right now, but let's open an issue for improving this."", 'comment_created': datetime.datetime(2021, 7, 1, 22, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 662629506, 'comment_body': ""This is specifically a stream message, though the behavior shouldn't vary across message types. Can we add a note here regarding that we should refactor this? We have other tests with a single parametrize entry, but it's a little misleading."", 'comment_created': datetime.datetime(2021, 7, 1, 22, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663436285, 'comment_body': ""Yeah, I used basically it as base message template, which I'm modifying as per the `to_vary_in_each_message` parameters. Surely I'll add a note here :+1:."", 'comment_created': datetime.datetime(2021, 7, 4, 2, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 663437602, 'comment_body': 'Yes :sweat_smile:', 'comment_created': datetime.datetime(2021, 7, 4, 3, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 663437684, 'comment_body': ""Makes sense. I'll go with `author_is_present` and skip the comment :+1:"", 'comment_created': datetime.datetime(2021, 7, 4, 3, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': 'a81c2471fc22971a637ab856643cde57ce8c9dbf', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbd525b9abfd9c73540912cccac780a58962c951', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13f998b1d812eee6d63541f5accf04fc4c0e1d40', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc51fba228202124b33a858062258c69e94bfea', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
620285372,Add support for stream + topic autocomplete,"The PR does the following tasks:
 - Fixes a bug re space-separated typeaheads (commit 1),
 - Extracts all regexes to a new file `regexes.py` (commit 2-5)
 - Adds support for stream+topic autocompletes. (commit 6-9).

Ticks a check box in #448.",True,1004,https://api.github.com/repos/zulip/zulip-terminal/pulls/1004,https://github.com/zulip/zulip-terminal/pull/1004,closed,191,16,6,9,3,14,4,0,"[{'name': 'bug'}, {'name': 'size: XL'}, {'name': 'area: autocomplete'}, {'name': 'missing feature: user'}]",2021-04-21 14:48:22+00:00,2021-07-31 01:21:01+00:00,8677959.0,"100 days, 10:32:39","[{'comment_id': 617793185, 'comment_body': ""Is there a reason you aren't using `prefix_string` directly here. On doing a quick check, I don't think we need this new variable."", 'comment_created': datetime.datetime(2021, 4, 21, 18, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 618137698, 'comment_body': 'Thanks. I updated the PR to get the required prefix using `prefix_string`', 'comment_created': datetime.datetime(2021, 4, 22, 7, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 671747925, 'comment_body': 'minor: You could use more descriptive aliases, maybe match and fenced_match? (just to improve readability)', 'comment_created': datetime.datetime(2021, 7, 17, 21, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 671747930, 'comment_body': 'Can we call these ""space-containing text"" instead, consistent with their parameter\'s name?', 'comment_created': datetime.datetime(2021, 7, 17, 21, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 676038668, 'comment_body': 'Minor: is_valid_stream is setup, so it\'d be better before any ""expected"" output in the list.', 'comment_created': datetime.datetime(2021, 7, 24, 19, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 676039233, 'comment_body': ""I would add this to the next commit, but use this commit as a refactor of at least some other regexes, particularly those where the content of the regex is not as critical to understand in the subsequent code.\r\n\r\nThis constant is not different from in @prah23's feedback?"", 'comment_created': datetime.datetime(2021, 7, 24, 20, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 676040165, 'comment_body': 'This seems like it should complete?', 'comment_created': datetime.datetime(2021, 7, 24, 20, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 676040968, 'comment_body': ""For reference, the web app also supports `#**Stream 1** >`, presumably for the stream complete generating a space after it?\r\n\r\nI think this could be an extra feature on top, depending how straightforward it is, since we don't add a space."", 'comment_created': datetime.datetime(2021, 7, 24, 20, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 676161308, 'comment_body': ""Well, for a user, autocompleting a stream name would be handier than fully writing it, I believe. Also, this doesn't cope up with the web app's way, I think."", 'comment_created': datetime.datetime(2021, 7, 25, 15, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 676162889, 'comment_body': 'Yeah. I just quickly tested some autocompletes in the web app. All of them added a space in the end. For us, that might be a future normal, I think :)', 'comment_created': datetime.datetime(2021, 7, 25, 15, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 676165812, 'comment_body': 'Ah yes. Adding small understandable regexes and integrating them would be more apt. :+1:\r\n\r\nRe your latter point, I think Hari was referring to the local variable renaming, particularly, `m_fenced` to `match_fenced` that are used in the next commit.', 'comment_created': datetime.datetime(2021, 7, 25, 15, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 676364799, 'comment_body': ""These are relevant only in the next commit(s) where they're first used?"", 'comment_created': datetime.datetime(2021, 7, 26, 7, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 676374672, 'comment_body': 'Is the stream id encoded? This name feels like it could be improved.', 'comment_created': datetime.datetime(2021, 7, 26, 7, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680258850, 'comment_body': 'Some of these still seem to be present?', 'comment_created': datetime.datetime(2021, 7, 30, 22, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'a2a2d97e169ae60ac8f16b6679b8c9ac8a858e0f', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b69717f5a6ccfd1d50b1ecb1611e40bd782cee', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b64b8cf2f525af38ce04a0daa89983c4b9e46ce5', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f48f25acb150319b6142e021216bafcedd7c4cc4', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda0ef0901f5b3bed407c9cb4da2029f6c07a8b2', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7736a7d7c5b68d1c9cce8f6416ce13a50d7c7de', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d0c1b02a9097e0ab4e9b1a3591b0cf9bc99d9f', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38c643b62a655e9784799fe865365c3ab4872b75', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4a0e59707ecc6a9f1481dce6d8ee7367fc49baa', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
634282673,Improve katex/math text rendering in ZT,,True,1024,https://api.github.com/repos/zulip/zulip-terminal/pulls/1024,https://github.com/zulip/zulip-terminal/pull/1024,closed,28,3,7,2,4,2,3,0,"[{'name': 'size: M'}, {'name': 'area: message rendering'}, {'name': 'PR ready to be merged'}]",2021-05-08 10:35:48+00:00,2021-07-06 23:09:48+00:00,5142840.0,"59 days, 12:34:00","[{'comment_id': 644936999, 'comment_body': ""There's more meaning if we call this something like `msg_math`."", 'comment_created': datetime.datetime(2021, 6, 3, 16, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644943427, 'comment_body': ""The new test case appears to be a fuller test case for the 'katex' case, so I think it would be fine to replace the existing case.\r\n\r\nI'm not sure if it's clear when we have katex vs katex-display in the html, and if we need to test both, or if one can just be ignored.\r\n\r\nIt would be good to have the commit text reflect the new test content.\r\n\r\nIs the commit text up to date? Doesn't the annotation contain the original raw markup?"", 'comment_created': datetime.datetime(2021, 6, 3, 16, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '68b6bb084f5e467b60982b432494b75c62124e08', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99359a38b6a57b9a9b9a5df208d2dade46d21c92', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
635609678,Add message formatting tips help menu,"**What does this PR do?!**
 - Adds a message formatting help menu.
 - Creates a new config file `markdown.py` for markdown-related material.
 - Fixes #623.

**Commit flow**
1. Add hotkey `meta m ` to show markdown popup.
2. Create a new file `markdown_examples.py` containing markdown help data.
3. refactor: Amend the type annotation for PopUpView contents.
4. Structure UI in MarkdownHeloView class.
5. Add UI elements to markdown help view on toggling.
6. Add support for accessing the popup from compose area.

**Doubts/Concerns**
 - The Popup name, i.e., `MarkdownHelpView` could be replaced with one having `message formatting` instead?.
 - The markdown help data might be migrated to `ui_mappings`

**Screenshot(s)/GIF(s)**
![improved_header](https://user-images.githubusercontent.com/55916430/126902377-7672ee58-e8b1-4324-a055-b62408342aed.gif)",True,1025,https://api.github.com/repos/zulip/zulip-terminal/pulls/1025,https://github.com/zulip/zulip-terminal/pull/1025,closed,227,1,9,6,6,18,3,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-05-09 09:14:17+00:00,2021-07-30 05:18:42+00:00,7070665.0,"81 days, 20:04:25","[{'comment_id': 629397372, 'comment_body': 'We can get `server_url` in a similar way in `show_markdown_help`. In that case, do we need to pass it as an argument here?\r\n', 'comment_created': datetime.datetime(2021, 5, 10, 14, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 629420267, 'comment_body': 'Since you are using single quotes everywhere else, try to keep it consistent.', 'comment_created': datetime.datetime(2021, 5, 10, 14, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 629421140, 'comment_body': 'Closing tag for blockquote is missing.', 'comment_created': datetime.datetime(2021, 5, 10, 14, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 629433629, 'comment_body': 'Unwanted diff.', 'comment_created': datetime.datetime(2021, 5, 10, 14, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 629439992, 'comment_body': ""I'm not sure if I understood this. The raw content is used to calculate dimensions for the popup, while rendered content is being shown.\r\n\r\n(Are you intending to skip the blank line?)"", 'comment_created': datetime.datetime(2021, 5, 10, 15, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 629448880, 'comment_body': 'Yea just the blank line.\r\n', 'comment_created': datetime.datetime(2021, 5, 10, 15, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 629457428, 'comment_body': 'Here too!', 'comment_created': datetime.datetime(2021, 5, 10, 15, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 644516133, 'comment_body': ""There's no need for `total=True` - that's the default preferred version."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644517042, 'comment_body': ""I don't like this change. We should clarify what type this is and define it. I expect it's an urwid type, and possibly one that could be used more widely in ZT."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644519389, 'comment_body': ""I see how this makes it easier to add the column titles, but it's confusing.\r\n\r\nI'd suggest manually adding these column headings; really it would be better if these column headings stayed in place as things scrolled, though that would likely need adjustment in the main popup code."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 654266100, 'comment_body': 'Pinged my concerns :+1:', 'comment_created': datetime.datetime(2021, 6, 18, 9, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 675700963, 'comment_body': 'See my comment on the stream, but I think this (and the dict format) can be simplified.', 'comment_created': datetime.datetime(2021, 7, 23, 16, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 676218984, 'comment_body': ""This doesn't reflect the commit text."", 'comment_created': datetime.datetime(2021, 7, 25, 23, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678783142, 'comment_body': 'Minor: if you use parentheses you might be able to improve the layout here to show the html structure, eg. a line for the header and the rows?', 'comment_created': datetime.datetime(2021, 7, 29, 2, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678783798, 'comment_body': 'Can we loosen this to just `Tuple[str, Any]`?\r\nWe should add a comment in any case, possibly with a fixme.', 'comment_created': datetime.datetime(2021, 7, 29, 2, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678785399, 'comment_body': ""Is using the raw_menu_content a workaround for the fact that the rendered content doesn't work properly with the sizing algorithm?"", 'comment_created': datetime.datetime(2021, 7, 29, 2, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679185628, 'comment_body': 'Yes, precisely.', 'comment_created': datetime.datetime(2021, 7, 29, 14, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 679590796, 'comment_body': 'Pending?', 'comment_created': datetime.datetime(2021, 7, 30, 1, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '87f94fc3f619364fca1e681f561681664342e2fa', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '764de39927feb5bfd3a699707dbca288804a804c', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9035008007791c9924b54322dc64bb5b0aba972c', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5801c5507b087936d3686857090bde6ecf17c5d9', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44ee9c04382e5e5887e67afb6f489c31d56a5df', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88bd743ac011691ca04614d25ffda5dd9dc4f5c6', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
625937400,docs: Add autocomplete info section in FAQ.,"This PR adds a section `How do I use autocompletes in ZT?`, which lists and explains the working of currently supported autocompletes in ZT, grouped by different compose boxes
 - Message body autocompletes
 - Other (Stream/Topic/PM recipients) autocomplete options

**NOTE:** Currently I'm not sure if the first bullet title is user-friendly, and so would appreciate feedback/suggestions for the same :)",True,1017,https://api.github.com/repos/zulip/zulip-terminal/pulls/1017,https://github.com/zulip/zulip-terminal/pull/1017,closed,50,0,1,1,2,32,2,0,"[{'name': 'size: M'}, {'name': 'area: documentation'}]",2021-04-29 09:25:39+00:00,2021-06-26 05:57:13+00:00,4998694.0,"57 days, 20:31:34","[{'comment_id': 624009795, 'comment_body': ""It's best to describe what we do use first, and perhaps add a note after (even below the bullets) for tab, ie. what we don't use for this, but do use elsewhere. You could mention/remind that we use it for something else instead.\r\n\r\nI thought we couldn't use shift+tab (which is one reason why what we have works) but apparently that should work in urwid.\r\n\r\nWe probably want toggling -> cycling through match(ing)"", 'comment_created': datetime.datetime(2021, 4, 30, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 624030056, 'comment_body': 'Worth noting the maximum of 10.', 'comment_created': datetime.datetime(2021, 4, 30, 17, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 624031559, 'comment_body': 'Black is theme-specific, or not?', 'comment_created': datetime.datetime(2021, 4, 30, 17, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 624099048, 'comment_body': 'I think these two are subtly different, but worth confirming in the code', 'comment_created': datetime.datetime(2021, 4, 30, 18, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 624101563, 'comment_body': 'If grouped together, this could be ""Message recipients"" (as per ""current message recipients"")', 'comment_created': datetime.datetime(2021, 4, 30, 18, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 624103350, 'comment_body': ""We could include a note that the stream box will indicate if it's a valid stream and of what type?"", 'comment_created': datetime.datetime(2021, 4, 30, 18, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 625200292, 'comment_body': 'This could maybe simply be referred to as ""Message compose"" or in a verbose manner, ""Message compose autocomplete""? Inferring autocomplete that can be used during composing. Since message compose is limited to `msg_write_box`, it would sound simpler to understand with our intent being conveyed.', 'comment_created': datetime.datetime(2021, 5, 3, 16, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 625200338, 'comment_body': 'Maybe ""other autocomplete options""?  ', 'comment_created': datetime.datetime(2021, 5, 3, 16, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 625200377, 'comment_body': 'I\'d suggest explaining how message recipients work here (stream, topic, pm recipients), as in a mention that we have ""headers"" or ""fields"" where we enter these (a screenshot might be helpful here like the GIF you have above), so that it serves as context to the table below, keeping the table compact as it currently stands.\r\n\r\n""Fields"" is a fairly easy term to understand for something that accepts input.', 'comment_created': datetime.datetime(2021, 5, 3, 16, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 626506482, 'comment_body': 'Right, I overlapped with that thought too recently. Though since selecting streams and topics may also be considered in ""composing a message"", I wondered if that\'s an apt option. Nevertheless, we could explore it with feedback. I\'d share this suggestion and one other I had in mind for this in CZO, and would appreciate suggestions from others as well.', 'comment_created': datetime.datetime(2021, 5, 5, 12, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 626507836, 'comment_body': 'Seeing your below point, I am a bit more inclined to `Other autocomplete fields`. What do you think about it?', 'comment_created': datetime.datetime(2021, 5, 5, 12, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 626606759, 'comment_body': 'That seems a little confusing, if you want to go in that direction maybe `Other autocomplete-enabled fields`?', 'comment_created': datetime.datetime(2021, 5, 5, 14, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 626609638, 'comment_body': 'Ah, that makes sense. Let\'s go with ""Other autocomplete options"" then :+1:.', 'comment_created': datetime.datetime(2021, 5, 5, 14, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 626610037, 'comment_body': 'Since we\'re being specific, it might be better if we use specific terms as discussed on the stream, like ""specifying/defining stream and topic"" and ""specifying/defining private message recipients"". \r\n\r\nThe other point I just noticed is, the cursor in your screenshots remains on the message content, could you perhaps put screenshots with the cursor on these header fields? It might help with emphasizing the field we\'re describing here.', 'comment_created': datetime.datetime(2021, 5, 5, 14, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 627416969, 'comment_body': ""Re shitf+tab, could you elaborate our use-case for it? I tried some things but wasn't able to figure out its working."", 'comment_created': datetime.datetime(2021, 5, 6, 13, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 627432722, 'comment_body': 'No, I would say. We use the default `""code""` palette (which is black) for this, uniform throughout all themes.', 'comment_created': datetime.datetime(2021, 5, 6, 13, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 627448151, 'comment_body': ""Yeah. `@**` is assigned to `autocomplete_users` and `@` is assigned to `autocomplete_mentions`. While some are specified explicitly in the autocomplete_map, I see it's better to include the `@` to user groups too :+1:. Here's what we have:\r\n```python\r\n        autocomplete_map = OrderedDict([\r\n                ('@_', self.autocomplete_users),\r\n                ('@_**', self.autocomplete_users),\r\n                ('@', self.autocomplete_mentions),\r\n                ('@*', self.autocomplete_groups),\r\n                ('@**', self.autocomplete_users),\r\n                ('#', self.autocomplete_streams),\r\n                ('#**', self.autocomplete_streams),\r\n                (':', self.autocomplete_emojis),\r\n            ])\r\n```"", 'comment_created': datetime.datetime(2021, 5, 6, 14, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 627503772, 'comment_body': 'Do you mean grouping the recipient headers (as done currently)?', 'comment_created': datetime.datetime(2021, 5, 6, 15, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 633023345, 'comment_body': ""We don't currently use `shift tab`, but in my past experience it's used for cycling backwards, ie. opposite of `tab`.\r\n\r\nOriginally I thought we could mention it since if there was a reason we didn't use `shift tab` then that may help explain our current key setup in this kind of document. Unfortunately not :("", 'comment_created': datetime.datetime(2021, 5, 16, 0, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633024255, 'comment_body': ""We don't need to keep mentioning ZT, and we've duplicated the ctrl-f/r; this might just fit within one sentence, or maybe two bullets if it doesn't look strange. We can emphasize the f=forward and r=reverse by bolding the words."", 'comment_created': datetime.datetime(2021, 5, 16, 0, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633024287, 'comment_body': '""...to the rescue""', 'comment_created': datetime.datetime(2021, 5, 16, 0, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633024432, 'comment_body': 'The text before the numbered list says little except composing text in the ""content box"", so we can probably combine the section title and this text together.\r\n\r\nMaybe: (too long?)\r\n""Example: Using autocomplete to add a recognized emoji in your message body""\r\n(the extra text re the gif could then be removed too)', 'comment_created': datetime.datetime(2021, 5, 16, 1, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633024669, 'comment_body': 'It might be simpler to indicate the selected value is highlighted?\r\n\r\nWe could also add a 5th entry to indicate that cycling ""past the end"" goes back to the prefix you enter.', 'comment_created': datetime.datetime(2021, 5, 16, 1, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633025230, 'comment_body': 'Oops :)', 'comment_created': datetime.datetime(2021, 5, 16, 1, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633025769, 'comment_body': 'This style of text is probably more appropriate in a tutorial.\r\n\r\nProbably all we need is text somewhere which indicates that:\r\n* in the message body (I don\'t think that word came up, but it seems OK?) we use prefixes\r\n* for the recipient boxes (1, 2, 3) the prefixes are assumed\r\n\r\nNote that with recipient boxes there is no ""prefix"" (as above bullets) so perhaps this title could be ""Areas with autocomplete support"" ?', 'comment_created': datetime.datetime(2021, 5, 16, 1, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633026058, 'comment_body': ""I wonder if it's worth treating `@` with it's own row, indicating it matches users and groups (eg. `@term` on czo)."", 'comment_created': datetime.datetime(2021, 5, 16, 1, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633026243, 'comment_body': 'Rather than prefixes being the empty string, we can just not mention prefixes in this case, or that they\'re taken from the context (you have ""contextual"" :+1:).', 'comment_created': datetime.datetime(2021, 5, 16, 1, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633026373, 'comment_body': ""Given you have two images for Streams and PMs, I'd suggest skipping the text above and this table, and having two sections referring to 1, 2 and 3 in the text in each section. The table doesn't really give much extra information here.\r\n\r\nThe notes can also fit into the sections."", 'comment_created': datetime.datetime(2021, 5, 16, 1, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633043251, 'comment_body': 'Makes sense :+1: ', 'comment_created': datetime.datetime(2021, 5, 16, 5, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 633043337, 'comment_body': 'Apologies :sweat_smile:', 'comment_created': datetime.datetime(2021, 5, 16, 5, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 633102186, 'comment_body': 'Sounds good. I was just framing the two bullets in a similar way. I wanted to query if recipient boxes sound internal? Does ""recipient header"" make sense?', 'comment_created': datetime.datetime(2021, 5, 16, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 633102401, 'comment_body': 'Agreed.', 'comment_created': datetime.datetime(2021, 5, 16, 15, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': 'c77968e102f545815e4cc64d714664038bef83c3', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
546095794,docs: Developer documentation updated and cleaned,"This PR aims:
- To remove duplicate Pytest information in developer docs.
- To mention Urwid related info in general README.md
- To split Overview and Tutorial (as tutorial covers a bulkier portion of developer-documentation).

Fixes an early issue #27",False,857,https://api.github.com/repos/zulip/zulip-terminal/pulls/857,https://github.com/zulip/zulip-terminal/pull/857,closed,27,31,3,2,2,0,3,0,"[{'name': 'size: L'}, {'name': 'area: documentation'}, {'name': 'PR needs review'}]",2020-12-28 13:33:59+00:00,2021-01-16 02:29:40+00:00,1601741.0,"18 days, 12:55:41",[],"[{'commit_sha': '22ce3cdc067342eaf570138f777fe004892e8fa1', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec51d5ce986ccf18804df22cab36df4b13a29c95', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
678906762,Add media support in ZT,"Thanks to @preetmishra and @amanagr for their substantial work in #740 and #359, that helped wrapping this PR up with a sober feature version easily.

Partially fixes #764.

**Commit flow:**
-  helper: Add download_media() and open_media() to handle media links.
-  refactor: Use normalized OS-specific file names.
-  buttons: Use process_media() to handle media via MessageLinkButton.
-  helper: Show downloading & downloaded update in process_media().
-  refactor: buttons/helper: Use callbacks to isolate UI-centric parts.
-  views: Extend PopUpConfirmationView to accept location parameter.
-  core/helper: Show PopUpConfirmationView before opening any media.

**Screenshots/GIFs**

![media_links_open](https://user-images.githubusercontent.com/55916430/123619749-1dc97c00-d827-11eb-8d0b-b9c6fee8b9b2.gif)",False,1058,https://api.github.com/repos/zulip/zulip-terminal/pulls/1058,https://github.com/zulip/zulip-terminal/pull/1058,closed,363,18,8,7,2,16,5,0,"[{'name': 'enhancement'}, {'name': 'size: XL'}, {'name': 'feedback wanted'}, {'name': 'PR needs review'}, {'name': 'PR replaced by another PR'}]",2021-06-28 10:12:53+00:00,2022-05-16 21:51:26+00:00,27862713.0,"322 days, 11:38:33","[{'comment_id': 663433509, 'comment_body': '`""bold""` as a style doesn\'t exist - we have footer_contrast now.', 'comment_created': datetime.datetime(2021, 7, 4, 2, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663434417, 'comment_body': ""These should really be `List[str]`. There is discussion elsewhere, though I can't seem to dig it up on github right now."", 'comment_created': datetime.datetime(2021, 7, 4, 2, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663434523, 'comment_body': ""Let's leave this out until we know we have a version that works, and we're sure is good, particularly with that quoting.\r\n\r\nWhile we support only these three, we should handle the `else` case (or equivalent) in any case, so we'll need `command` to be defined, or have some meaning, and perhaps pop up an 'unsupported' notice or report an error. That means it can apply to the WSL case for now too."", 'comment_created': datetime.datetime(2021, 7, 4, 2, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663434930, 'comment_body': 'It would be good to avoid `shell=True` for security reasons (eg. https://docs.python.org/3/library/subprocess.html#security-considerations)', 'comment_created': datetime.datetime(2021, 7, 4, 2, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663435017, 'comment_body': 'This can now be an f-string.', 'comment_created': datetime.datetime(2021, 7, 4, 2, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663435364, 'comment_body': ""This is open_media, so it's surprising that the open-command selection is not present here.\r\n\r\nIt's been a while since I've looked at this code, but it may be clearer not having one function call the other, ie. download_media(url) -> local_path, open_media(local_path) ?"", 'comment_created': datetime.datetime(2021, 7, 4, 2, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663435578, 'comment_body': 'We should probably refactor this to be a controller method - we already have one case of this style.', 'comment_created': datetime.datetime(2021, 7, 4, 2, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663435926, 'comment_body': ""callback is a very general name - it's worth clarifying when it's called in the name. This could be after downloading, during downloading..."", 'comment_created': datetime.datetime(2021, 7, 4, 2, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663436224, 'comment_body': ""This is not coupled to the controller etc, but you need to know that it's an urwid styled-text being passed in. You could specify the parameter in the calling function, and have this just be `callback()`. A different name would help too - see elsewhere."", 'comment_created': datetime.datetime(2021, 7, 4, 2, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663436519, 'comment_body': 'A good follow-up to this would be to improve the styling and unify it with the general popup - the border is not that clear compared to those, in retrospect.', 'comment_created': datetime.datetime(2021, 7, 4, 2, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663507822, 'comment_body': 'minor: I understand that the `r` and `f` aliases come from the previous PRs but can we use more explicit aliases (maybe `file` and `response`)? Since we use variables with explanatory names everywhere else, it would be consistent here.', 'comment_created': datetime.datetime(2021, 7, 4, 13, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 684737627, 'comment_body': ""Right. I just passed in the params to show the media name as well. But I think showing just `Downloading your media ...` is good, since I'm prompting the user the filename while opening it in any case :+1:"", 'comment_created': datetime.datetime(2021, 8, 8, 8, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 684926801, 'comment_body': 'What is interpreting these backticks? What else is it interpreting? Something is definitely wrong here.', 'comment_created': datetime.datetime(2021, 8, 9, 6, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 685234271, 'comment_body': ""Yeah. It is a bad way of nesting bash commands. One should instead use `$()` I think. As I said in the stream, we'd potentially not need this now."", 'comment_created': datetime.datetime(2021, 8, 9, 14, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 685461843, 'comment_body': 'No, my point is there should not _be_ a Bash. Backticks should not be interpreted here. If they _were_ being interpreted here—even if we’re no longer _using_ them—that indicates a deep problem that we need to investigate, because `media_path` could itself contain backticks or other characters that we really don’t want to be interpreted.\r\n\r\nThe same problem applies to `$()`, `""""`, or any other kind of “quote” construct. The first rule of quoting is that you need to ask, _what if the quoting characters are present inside the string you’re quoting?_', 'comment_created': datetime.datetime(2021, 8, 9, 19, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 685686721, 'comment_body': 'Makes sense. Thanks for clarifying :+1: ', 'comment_created': datetime.datetime(2021, 8, 10, 4, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': '326757df4718ea7fa9c172dfc0321110410d239d', 'committer_username': 'amanagr', 'committer_name': 'Aman Agrawal', 'committer_email': 'amanagr@zulip.com', 'commit_date': datetime.datetime(2017, 1, 14, 20, 19, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5fd7d6097fbb5e48268afbf1ae1b5de855e6156', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c456df329be33fa4a1f781f430dca75f75e31f1d', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a26d411c8bcae8b3df8b5f39a57db2b21aaf649', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d77542d76918d39a74cb42834dcba230d936fd1', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6cd40b7db8f8180161f3648a58ce3d15b10148b', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '613a811ce44624c2f245e457864a43ea924ad3e7', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
576897616,feature: Capture screenshots in ZT,"This PR adds a feature to capture the screen of ZT using the hotkey `meta c`.
The screenshots are saved locally in `screenshots/` (format: `png`)

This PR could also potentially be an initial step in automating screenshots update in docs :)",False,932,https://api.github.com/repos/zulip/zulip-terminal/pulls/932,https://github.com/zulip/zulip-terminal/pull/932,open,63,0,7,3,4,0,5,0,"[{'name': 'enhancement'}, {'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'PR awaiting update'}, {'name': 'PR completion candidate'}]",2021-02-20 08:53:07+00:00,,0.0,,[],"[{'commit_sha': '60ad3eb7d36f5dc09a4f54a7255a3f7bd116267b', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed21005afff1e7b94585b967f6c2505996a8d27', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf6d371459a1cda8c4e36e0af26f8cce845efd09', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
682728229,WIP: Feature: Add Spoiler support,"@preetmishra Thanks for your primary work on this in a local branch, that helped me structuring this PR with separate commits and additional tests. This PR adds a basic support for spoilers in ZT.

Fixes #688.

**Potential caveats**
- The links in spoilers are currently revealed in message info view, which isn't expected.

**Commit flow:**
- boxes/themes: Add support for spoiler header markup in MessageBox.
- boxes/views: Extract spoiler content in a variable in MessageBox.
- core/views: Add SpoilerView class and corresponding show_* function.
- boxes/core/views: Pass spoiler data to MsgInfoView popup helpers.
- buttons: Add SpoilerButton class showing spoiler header.
- views: Show SpoilerButton in message info view if present.

**Screenshots/GIFs**

![spoiler_view](https://user-images.githubusercontent.com/55916430/124299473-141f7b80-db7b-11eb-89c9-0f62e74f039c.gif)
",False,1061,https://api.github.com/repos/zulip/zulip-terminal/pulls/1061,https://github.com/zulip/zulip-terminal/pull/1061,open,336,12,8,6,4,0,7,0,"[{'name': 'has conflicts'}, {'name': 'feedback wanted'}, {'name': 'area: message rendering'}, {'name': 'PR awaiting update'}, {'name': 'missing feature: user'}, {'name': 'version parity: 3'}, {'name': 'PR completion candidate'}]",2021-07-02 15:49:13+00:00,,0.0,,[],"[{'commit_sha': 'f53c370ca6a4df2baa923aca3b4018d22413b3ee', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '054fd3bf908284076818247228de685cdd956a94', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d2fbe77c9cc1706161693927717b70e1226e218', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e454fbe716e517d5d5d80be28de249cf70028d', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e21b6baf0d9697bb68d2846383545dc10b93c4', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c5e15a9082df12eacd515d762f7931b87a2bbe5', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
572615462,workflows: Add github action checking emoji data matching with server.,"The workflow uses CRON time syntax to schedule the check daily at a specific time.
In case of a mismatch in fetched data and existing data, the check would fail with exit status: Emoji data not up-to-date.

[unrelated]: Corrects a couple of diffs :)

Fixes #912",False,918,https://api.github.com/repos/zulip/zulip-terminal/pulls/918,https://github.com/zulip/zulip-terminal/pull/918,open,67,2,3,2,5,6,4,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'PR needs review'}, {'name': 'area: infrastructure'}]",2021-02-12 16:03:23+00:00,,0.0,,"[{'comment_id': 575563456, 'comment_body': 'Perhaps use `--exit-code` with `git diff`, and `$?` ?', 'comment_created': datetime.datetime(2021, 2, 12, 22, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 575635502, 'comment_body': ""Thanks. I didn't know it before :sweat_smile: "", 'comment_created': datetime.datetime(2021, 2, 13, 7, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 592793065, 'comment_body': 'From a skim of the secrets documents, we would likely want this to be in an environment variable rather than exposed in clear text.', 'comment_created': datetime.datetime(2021, 3, 11, 23, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592796141, 'comment_body': ""We can easily change these later, but:\r\n* I expect it'd be better to have a more general single topic for CI feedback, since we have everything in one stream.\r\n* Re the content, we may wish to specify more that this originates from a server emoji update."", 'comment_created': datetime.datetime(2021, 3, 11, 23, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 592962032, 'comment_body': ""As of my knowledge, `secrets` are default environment variable itself in GitHub actions.\r\nHowever, It's good storing them as `env` variables in any case :+1:. This will tidy-up the relevant code wherever they are used. (currently double brackets seem visually messy)."", 'comment_created': datetime.datetime(2021, 3, 12, 7, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 592969255, 'comment_body': '- Re topic, maybe something like: ""CI action feedback""?\r\n- Re the content, the below message could be a potential description?:\r\n          ""Heads up! Emoji sync with the server failed!\r\n           This originated from an update in server emoji. Kindly re-generate `unicode_emojis.py`""', 'comment_created': datetime.datetime(2021, 3, 12, 7, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': 'c0bbafa94f8129affb87ab47356831ea5e59f387', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84953021628f58fb45fb1b69835e06d5f11788d', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
559058198,Handle internal PM links,"This is a follow-up PR from #708. It adds support for handling internal PM links.

I highly appreciate the work of @preetmishra in #708, by which it became simpler and cleaner to work with the helper functions in general :)

Partially fixes #764.",False,883,https://api.github.com/repos/zulip/zulip-terminal/pulls/883,https://github.com/zulip/zulip-terminal/pull/883,open,511,89,2,5,3,27,3,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2021-01-21 10:32:47+00:00,,0.0,,"[{'comment_id': 564286008, 'comment_body': 'Is there such a thing as `pm-with` without a `near`?', 'comment_created': datetime.datetime(2021, 1, 26, 7, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564289477, 'comment_body': 'Can we describe this using `Literal`?', 'comment_created': datetime.datetime(2021, 1, 26, 7, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564290614, 'comment_body': 'Is a 1-size group OK? Is pm a synonym for group?', 'comment_created': datetime.datetime(2021, 1, 26, 7, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 565813721, 'comment_body': 'Oops, that needs correction. Thanks for pointing out.\r\nTo clarify:\r\n- `pm` is for 2 people private conversation\r\n- `group` is for more than 2 people private conversation', 'comment_created': datetime.datetime(2021, 1, 28, 4, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 567456930, 'comment_body': 'In principle that sounds likely - but pm and group appear to work in both cases on czo!', 'comment_created': datetime.datetime(2021, 1, 31, 17, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 570026360, 'comment_body': ""We're using the updated form for TypedDict now."", 'comment_created': datetime.datetime(2021, 2, 4, 8, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 570028307, 'comment_body': ""What I meant about my last comment is that I'm fairly sure there are valid pm-with and pm-with:near (equivalent in URLs), so we need to likely handle both cases."", 'comment_created': datetime.datetime(2021, 2, 4, 8, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 614110869, 'comment_body': ""Are we defining `pm` and `group` properly here?\r\nThe URL doesn't include the *current-user's* `user_id`. So, if the length of `recipient_ids_list` is `1` the number of persons involved would be `2`(i.e. *current-user* and another user). This should be called `pm`, right?\r\nSimilarly, if the length of `recipient_ids_list` is `>= 2`, then number of persons involved would be `1 + len(recipient_ids_list)`, and this should be called `group`?\r\n\r\nCorrect me if I am wrong, please. :)"", 'comment_created': datetime.datetime(2021, 4, 15, 14, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 614949923, 'comment_body': ""You're right! To clarify, the currently exposed formats of url _may or may not_ contain the current user's _user_id_ (manually tested this locally).\r\n\r\nI'll add a conditional check to confirm if recipient_ids contain user id, and then calculate length accordingly. That should clear that edge case.\r\n\r\nThanks for poiting that out :)"", 'comment_created': datetime.datetime(2021, 4, 16, 15, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 614967936, 'comment_body': ""I think the URL will contain the current user's `user_id` only if the user is conversing with himself?\r\nOr, were you able to discover some other edge-case for this while testing?"", 'comment_created': datetime.datetime(2021, 4, 16, 16, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 614979874, 'comment_body': ""The Zuilp server has exposed many URL narrow formats as of now (maybe a potential caveat :) ). Try narrowing to a PM by adding your id to the list, you'd still end up narrowing. I discovered that and some more easter eggs during manual testing ;)"", 'comment_created': datetime.datetime(2021, 4, 16, 16, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 671868449, 'comment_body': 'to*', 'comment_created': datetime.datetime(2021, 7, 18, 16, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 671868608, 'comment_body': 'What are the cases in which `user_id` is included/not included?', 'comment_created': datetime.datetime(2021, 7, 18, 16, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 671868808, 'comment_body': 'Perhaps `recipient_data` or something similar? This way the latter could be `recipient_ids`.', 'comment_created': datetime.datetime(2021, 7, 18, 16, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 671874997, 'comment_body': ""Well, the server has some (strange exposed) URL formats, that includes only the id(s) of the recipient(s) other than the current user, e.g.:\r\n- narrow/pm-with/1-user1\r\n- narrow/pm-with/1-bot-name\r\n\r\nThose are the ones I'm aware of as of now"", 'comment_created': datetime.datetime(2021, 7, 18, 17, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 671875255, 'comment_body': ""The above ones are those that don't have `user_id` included. Below are ones that have `user_id` included:\r\n\r\n- narrow/pm-with/1,2-pm\r\n- narrow/pm-with/1,2-group\r\n- narrow/pm-with/1,2,3-pm\r\n- narrow/pm-with/1,2,3-group\r\n"", 'comment_created': datetime.datetime(2021, 7, 18, 17, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 676007788, 'comment_body': 'There are too many params here in the parametrization. Perhaps a good time to use  `from pytest import param as case` as used elsewhere in the source, so that it is easier to correlate ids with test cases. :)', 'comment_created': datetime.datetime(2021, 7, 24, 14, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676009221, 'comment_body': 'It is not apparent what 1 is. Perhaps we should mandate keyword args with `*`.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676010480, 'comment_body': 'We should validate whether the PM links are correct like we do for streams. ', 'comment_created': datetime.datetime(2021, 7, 24, 15, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676010659, 'comment_body': 'It would be cleaner to only keep the narrowing part in the method like other conditionals.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676013586, 'comment_body': ""I'll add a note here to refer to the URL formats below in any case :+1: "", 'comment_created': datetime.datetime(2021, 7, 24, 15, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 680563456, 'comment_body': 'Since you type these `expected_response` cases as `DecodedPM` in the test parameters below, it would be more appropriate to have these as `DecodedPM` instances rather than `dict` instances (similar to how we have `ParsedNarrowLink` instances as parameter cases in the other tests in this file).', 'comment_created': datetime.datetime(2021, 8, 1, 20, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}]","[{'commit_sha': '16b9e3e21d7656f86ea480a7ffc6a8dbbc00293b', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db872dd467916ff03f014c1a7ad73f23238d6e0e', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21fa4e431ba838084e26c47341ee52d95e69b983', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7473a42b427458e20e47ca4ac499e17ec2a51a56', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8fb00f0afbe9840a8a2be9c0247f19d385b8ab9', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
703734989,refactor: Improve internal handling of narrow links,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR refactors `MessageLinkButton` in an attempt to improve narrow links' validation, patching, and relavant tests.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
- refactor: tests: Use `case` for patching test ids of large frequency.
- refactor: buttons: Use new helpers to patch and validate data.
- refactor: tests: Improve and add tests for validating narrow link.
- refactor: buttons: Extract topic name validation to separate method.
- refactor: buttons: Improve stream data handling via typed classes.

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1111,https://api.github.com/repos/zulip/zulip-terminal/pulls/1111,https://github.com/zulip/zulip-terminal/pull/1111,open,202,144,2,5,2,14,5,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}, {'name': 'area: infrastructure'}, {'name': 'area: refactoring'}]",2021-08-04 17:02:56+00:00,,0.0,,"[{'comment_id': 683654506, 'comment_body': ""Let's include the filename in the commit title."", 'comment_created': datetime.datetime(2021, 8, 5, 17, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683656101, 'comment_body': 'The ""case"" related changes could go in the earlier commit to make the changes coherent.', 'comment_created': datetime.datetime(2021, 8, 5, 17, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683664650, 'comment_body': 'The method name doesn\'t convey that it validates ""topics"".\r\n\r\nA cleaner way would be to extract the common part into `_validate_narrow_link` and have two separate methods for validating streams and topics.\r\n ', 'comment_created': datetime.datetime(2021, 8, 5, 17, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683665273, 'comment_body': 'This change could exist as an independent commit.', 'comment_created': datetime.datetime(2021, 8, 5, 17, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683666594, 'comment_body': ""Let's include the filename in the title."", 'comment_created': datetime.datetime(2021, 8, 5, 17, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683667698, 'comment_body': 'This commit should go before the independent ""validate topics"" commit so that we could be sure that the refactoring doesn\'t break anything.', 'comment_created': datetime.datetime(2021, 8, 5, 17, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683677843, 'comment_body': 'How about `DecodedStreamPartial` and `DecodedStreamAbsolute`?', 'comment_created': datetime.datetime(2021, 8, 5, 18, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683679949, 'comment_body': 'We could also delete the partial stream data from the `dict` at this point.', 'comment_created': datetime.datetime(2021, 8, 5, 18, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 683947128, 'comment_body': 'Sounds good :+1: ', 'comment_created': datetime.datetime(2021, 8, 6, 4, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 684367439, 'comment_body': '`tests` is missing in the title. You could refer https://github.com/zulip/zulip-terminal#commit-style.', 'comment_created': datetime.datetime(2021, 8, 6, 16, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684369848, 'comment_body': ""There's no test for the method as it is being tested via `validate_narrow_link` indirectly, I gather? Could we specify that in the commit description?"", 'comment_created': datetime.datetime(2021, 8, 6, 16, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684371726, 'comment_body': 'Re the commit title, this does not introduce two ""new"" methods but rather extracts the patch method from `_validate_and_patch_stream_data`.', 'comment_created': datetime.datetime(2021, 8, 6, 16, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684381213, 'comment_body': 'The tests pass even if this block is deleted, which suggests that we should reconsider the approach we discussed.', 'comment_created': datetime.datetime(2021, 8, 6, 17, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684389463, 'comment_body': ""Yes, this is exactly the case. I'll mention this in the commit message. Thanks for pointing out :+1: "", 'comment_created': datetime.datetime(2021, 8, 6, 17, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': 'bceba04009c98d07bf8685b621b5d6f8a83db4cc', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77d7dfbadb9a93dc437bead5995dda7c08f95732', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ca2641bade8c17602e44d96e0fc610765f6c50', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74be20da5f19ae5ffcb8cb24c33e6117f8757be1', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cfe3c1666378c3d2bf8d9fdfdf0d8d0b42c27cb', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45
697712522,refactor: Add and use type annotations for urwid Text markups,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
Adds and uses type annotations for `urwid.Text` markups.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
- refactor: urwid_types: Add type annotation for `urwid.Text` markups.
- refactor: core: Use type annotation for urwid text markups.
- refactor: ui: Use type annotation for urwid text markups.
- refactor: boxes: Use type annotation for urwid text markups.
- refactor: views: Use type annotation for urwid text markups.
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1101,https://api.github.com/repos/zulip/zulip-terminal/pulls/1101,https://github.com/zulip/zulip-terminal/pull/1101,open,53,32,5,5,2,3,4,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'area: infrastructure'}, {'name': 'area: refactoring'}]",2021-07-27 09:58:57+00:00,,0.0,,"[{'comment_id': 692151012, 'comment_body': 'Do we need to wrap `urwidTextMarkup` inside a `List`?\r\n`urwidTextMarkup` already contains an outer layer of `Sequence` type which should cover `List`?\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 14, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 692152304, 'comment_body': ""Similarly here, shouldn't just `urwidTextMarkup` suffice? Am I misunderstanding something?"", 'comment_created': datetime.datetime(2021, 8, 19, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 693317227, 'comment_body': ""I'm skeptical about this too. I think `Sequence` might only be applicable as a type if the contents in the sequence are not changing? (I think I discussed this on stream too?)"", 'comment_created': datetime.datetime(2021, 8, 21, 7, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}]","[{'commit_sha': 'd2c00002c950a818e40ebcbead9fcc7484206915', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc41cb6db80917768983955eb021ce61391f5c5', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9f9aef759b11960c13e8235078391211eb90d4d', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61c762471cf6a3ab04a0e36c1f170f524721799', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e1474ddee70573a13cfc00ce252f5e52a03af1', 'committer_username': 'Ezio-Sarthak', 'committer_name': 'Sarthak Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 28, 11, 45, 38, tzinfo=datetime.timezone.utc)}]",Sarthak Garg,55916430,,User,,28,,94,45

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,242,611,18,81,2276,423,3,165,"[{'id': 703734989, 'number': 1111, 'closed': None, 'created': datetime.datetime(2021, 8, 4, 17, 2, 56, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 202, 'deletions': 144, 'state': 'open'}, {'id': 697712522, 'number': 1101, 'closed': None, 'created': datetime.datetime(2021, 7, 27, 9, 58, 57, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 53, 'deletions': 32, 'state': 'open'}, {'id': 682728229, 'number': 1061, 'closed': None, 'created': datetime.datetime(2021, 7, 2, 15, 49, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 336, 'deletions': 12, 'state': 'open'}, {'id': 678906762, 'number': 1058, 'closed': datetime.datetime(2022, 5, 16, 21, 51, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 10, 12, 53, tzinfo=datetime.timezone.utc), 'time_taken': 27862713.0, 'time_delta': '322 days, 11:38:33', 'additions': 363, 'deletions': 18, 'state': 'closed'}, {'id': 635609678, 'number': 1025, 'closed': datetime.datetime(2021, 7, 30, 5, 18, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 9, 9, 14, 17, tzinfo=datetime.timezone.utc), 'time_taken': 7070665.0, 'time_delta': '81 days, 20:04:25', 'additions': 227, 'deletions': 1, 'state': 'closed'}, {'id': 634282673, 'number': 1024, 'closed': datetime.datetime(2021, 7, 6, 23, 9, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 10, 35, 48, tzinfo=datetime.timezone.utc), 'time_taken': 5142840.0, 'time_delta': '59 days, 12:34:00', 'additions': 28, 'deletions': 3, 'state': 'closed'}, {'id': 625937400, 'number': 1017, 'closed': datetime.datetime(2021, 6, 26, 5, 57, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 29, 9, 25, 39, tzinfo=datetime.timezone.utc), 'time_taken': 4998694.0, 'time_delta': '57 days, 20:31:34', 'additions': 50, 'deletions': 0, 'state': 'closed'}, {'id': 620285372, 'number': 1004, 'closed': datetime.datetime(2021, 7, 31, 1, 21, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 21, 14, 48, 22, tzinfo=datetime.timezone.utc), 'time_taken': 8677959.0, 'time_delta': '100 days, 10:32:39', 'additions': 191, 'deletions': 16, 'state': 'closed'}, {'id': 614426792, 'number': 994, 'closed': datetime.datetime(2021, 4, 15, 2, 12, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 13, 12, 42, 5, tzinfo=datetime.timezone.utc), 'time_taken': 135022.0, 'time_delta': '1 day, 13:30:22', 'additions': 64, 'deletions': 0, 'state': 'closed'}, {'id': 610322029, 'number': 987, 'closed': datetime.datetime(2021, 7, 4, 21, 44, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 7, 4, 41, 3, tzinfo=datetime.timezone.utc), 'time_taken': 7664625.0, 'time_delta': '88 days, 17:03:45', 'additions': 105, 'deletions': 23, 'state': 'closed'}, {'id': 603366663, 'number': 971, 'closed': datetime.datetime(2021, 6, 16, 20, 29, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 4, 49, 36, tzinfo=datetime.timezone.utc), 'time_taken': 6795604.0, 'time_delta': '78 days, 15:40:04', 'additions': 131, 'deletions': 66, 'state': 'closed'}, {'id': 601406700, 'number': 959, 'closed': datetime.datetime(2021, 7, 7, 19, 26, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 8, 20, 59, tzinfo=datetime.timezone.utc), 'time_taken': 8939106.0, 'time_delta': '103 days, 11:05:06', 'additions': 250, 'deletions': 263, 'state': 'closed'}, {'id': 592790599, 'number': 949, 'closed': datetime.datetime(2021, 3, 15, 16, 21, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 6, 40, 44, tzinfo=datetime.timezone.utc), 'time_taken': 34840.0, 'time_delta': '9:40:40', 'additions': 33, 'deletions': 34, 'state': 'closed'}, {'id': 576897616, 'number': 932, 'closed': None, 'created': datetime.datetime(2021, 2, 20, 8, 53, 7, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 63, 'deletions': 0, 'state': 'open'}, {'id': 572615462, 'number': 918, 'closed': None, 'created': datetime.datetime(2021, 2, 12, 16, 3, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 67, 'deletions': 2, 'state': 'open'}, {'id': 559058198, 'number': 883, 'closed': None, 'created': datetime.datetime(2021, 1, 21, 10, 32, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 511, 'deletions': 89, 'state': 'open'}, {'id': 555673916, 'number': 874, 'closed': datetime.datetime(2021, 7, 23, 6, 38, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 15, 12, 37, 54, tzinfo=datetime.timezone.utc), 'time_taken': 16308027.0, 'time_delta': '188 days, 18:00:27', 'additions': 255, 'deletions': 11, 'state': 'closed'}, {'id': 549967701, 'number': 867, 'closed': datetime.datetime(2021, 4, 8, 6, 35, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 6, 5, 15, 59, tzinfo=datetime.timezone.utc), 'time_taken': 7953544.0, 'time_delta': '92 days, 1:19:04', 'additions': 198, 'deletions': 20, 'state': 'closed'}, {'id': 547853651, 'number': 865, 'closed': datetime.datetime(2021, 1, 12, 21, 23, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 3, 9, 26, 50, tzinfo=datetime.timezone.utc), 'time_taken': 820624.0, 'time_delta': '9 days, 11:57:04', 'additions': 110, 'deletions': 17, 'state': 'closed'}, {'id': 546095794, 'number': 857, 'closed': datetime.datetime(2021, 1, 16, 2, 29, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 28, 13, 33, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1601741.0, 'time_delta': '18 days, 12:55:41', 'additions': 27, 'deletions': 31, 'state': 'closed'}, {'id': 542634331, 'number': 853, 'closed': datetime.datetime(2021, 1, 7, 1, 5, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 18, 16, 2, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1674187.0, 'time_delta': '19 days, 9:03:07', 'additions': 62, 'deletions': 15, 'state': 'closed'}, {'id': 540874478, 'number': 852, 'closed': datetime.datetime(2021, 1, 2, 7, 52, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 16, 4, 12, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1482020.0, 'time_delta': '17 days, 3:40:20', 'additions': 175, 'deletions': 82, 'state': 'closed'}, {'id': 536561870, 'number': 849, 'closed': datetime.datetime(2021, 1, 7, 1, 9, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 11, 6, 52, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2312256.0, 'time_delta': '26 days, 18:17:36', 'additions': 42, 'deletions': 15, 'state': 'closed'}, {'id': 536047391, 'number': 848, 'closed': datetime.datetime(2021, 7, 10, 23, 4, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 10, 16, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 18341690.0, 'time_delta': '212 days, 6:54:50', 'additions': 421, 'deletions': 3, 'state': 'closed'}, {'id': 535856031, 'number': 847, 'closed': datetime.datetime(2020, 12, 11, 6, 59, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 10, 11, 9, 57, tzinfo=datetime.timezone.utc), 'time_taken': 71400.0, 'time_delta': '19:50:00', 'additions': 62, 'deletions': 1, 'state': 'closed'}, {'id': 535633649, 'number': 846, 'closed': datetime.datetime(2020, 12, 11, 6, 59, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 10, 4, 41, 53, tzinfo=datetime.timezone.utc), 'time_taken': 94644.0, 'time_delta': '1 day, 2:17:24', 'additions': 62, 'deletions': 14, 'state': 'closed'}, {'id': 534309527, 'number': 844, 'closed': datetime.datetime(2020, 12, 23, 1, 13, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 8, 9, 26, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1266393.0, 'time_delta': '14 days, 15:46:33', 'additions': 20, 'deletions': 0, 'state': 'closed'}]"
43160685,zulip,zulip/zulip,Python,7613,21005,376,1133,60235,2481,28,804,[]
