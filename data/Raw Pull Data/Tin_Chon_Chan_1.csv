pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
682040922,Grid filter base,"Splitted from https://github.com/PointCloudLibrary/pcl/pull/4813

### Description
- Design uniform code structure for voxel filters
- Implement two base class `CartesianFilter` and `TransfromFilter` for grid based filters
  - `CartesianFilter` implements the common functions for grid based filters
  - `TransfromFilter` contains the abstracted logic for grid based filtering, the definition of the filtering is supplied by the template input agrument `GridStruct` class
- Implement SFINAE check for `Gridstruct`

### Goal
- Allow user to provide their own grid logic to the base filter class
    - e.g.: https://github.com/PointCloudLibrary/pcl/issues/2044
- Allow later parallelizing all grid based filters loops in just `TransfromFilter::applyFilter`
- Separate generic grid based filter logic (`TransfromFilter`) and filter specific logic (`GridStruct`)
    - Allowing reducing the boilerplate code in grid based filters
        - `ApproximateVoxelGrid`, `VoxelGrid`, `GridMinimum`, `VoxelGridLabel`, `UniformSampling`",False,4828,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4828,https://github.com/PointCloudLibrary/pcl/pull/4828,open,734,0,5,32,0,56,2,0,"[{'name': 'module: filters'}, {'name': 'priority: gsoc'}]",2021-07-01 17:24:25+00:00,,0.0,,"[{'comment_id': 662688371, 'comment_body': ""Shouldn't the hierarchy be the other way around?\r\n\r\nFilter > TransformFilter > GridFilterBase"", 'comment_created': datetime.datetime(2021, 7, 2, 2, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 662688744, 'comment_body': 'Allowing default ctor is confusing, given the ctor contents', 'comment_created': datetime.datetime(2021, 7, 2, 2, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 662689305, 'comment_body': ""You saw stuff in the comments, but you don't implement them"", 'comment_created': datetime.datetime(2021, 7, 2, 2, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 662689946, 'comment_body': 'Thoughts on not inheriting from GridStruct?\r\nPro\r\n1. Prevents multiple inheritance\r\n2. Restricts GridStruct from adding any API/modifying functionality\r\nCons\r\n1. Requires used to sub-class to add functionality\r\n\r\nSomething that can be discussed later today perhaps.', 'comment_created': datetime.datetime(2021, 7, 2, 2, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 662691283, 'comment_body': 'This requires `grid_` in the GridStruct. Perhaps, we can have a getter to make the requirement on function, not data member', 'comment_created': datetime.datetime(2021, 7, 2, 2, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 662691308, 'comment_body': 'Line ending please', 'comment_created': datetime.datetime(2021, 7, 2, 2, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 662691444, 'comment_body': 'Line ending', 'comment_created': datetime.datetime(2021, 7, 2, 2, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663157561, 'comment_body': ""I'll remove the comment, copying is done already in `pcl::Filter::filter`\r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/cd3b3f95441746ce5c7ce1116768d2ee6b40d996/filters/include/pcl/filters/filter.h#L126-L141"", 'comment_created': datetime.datetime(2021, 7, 2, 17, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663157916, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 17, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663159150, 'comment_body': 'Removed the empty ctor, as it will be called anyway if we inherit it', 'comment_created': datetime.datetime(2021, 7, 2, 17, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663160993, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 17, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663161024, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 17, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663296521, 'comment_body': 'Nope', 'comment_created': datetime.datetime(2021, 7, 3, 1, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663296596, 'comment_body': ""Removing the default ctor doesn't negate the fact that GridStruct needs to be default constructible."", 'comment_created': datetime.datetime(2021, 7, 3, 1, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663296727, 'comment_body': ""Based on yesterday's communication, could you generate a snippet where it's requiredfor GridStruct to be the base class of TransformFilter?"", 'comment_created': datetime.datetime(2021, 7, 3, 1, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663296844, 'comment_body': 'get? and a boolean by reference?', 'comment_created': datetime.datetime(2021, 7, 3, 1, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663342377, 'comment_body': ""This is copied from the legacy VoxelGrid. IMO it's super weird to have a getter with bool reference. Should we remove this from the API? There are already a getter returning bool\r\n\r\nhttps://github.com/tin1254/pcl/blob/6fc72bd30dd90480ff8a0c580a347e4bab174edf/filters/include/pcl/filters/experimental/grid_filter_base.h#L181-L185"", 'comment_created': datetime.datetime(2021, 7, 3, 9, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663752917, 'comment_body': ""@mvieth Let's deprecate the original? PCL uses get with our arguments only when the stuff that's copied is a vector or similar (with memory), and uses get with return value otherwise"", 'comment_created': datetime.datetime(2021, 7, 5, 8, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663939833, 'comment_body': 'Thanks, should be done now ðŸ˜…', 'comment_created': datetime.datetime(2021, 7, 5, 13, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 664316221, 'comment_body': 'You mean deprecate [this one](https://github.com/PointCloudLibrary/pcl/blob/master/filters/include/pcl/filters/voxel_grid.h#L439) and [this one](https://github.com/PointCloudLibrary/pcl/blob/master/filters/include/pcl/filters/voxel_grid.h#L787)? Yes, agreed. I would suggest to do that in a separate pull request', 'comment_created': datetime.datetime(2021, 7, 6, 7, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 664704448, 'comment_body': 'Can we use `downsample_all_data_ = true;` style initialization instead?', 'comment_created': datetime.datetime(2021, 7, 6, 16, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 664706565, 'comment_body': ""What is this for? If this is being used to do double duty, let's use another variable instead"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 664707175, 'comment_body': 'Should we have some simple hashing function made easily available in PCL?', 'comment_created': datetime.datetime(2021, 7, 6, 16, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 664737969, 'comment_body': 'Maybe use field initializers?', 'comment_created': datetime.datetime(2021, 7, 6, 17, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 664755171, 'comment_body': 'Like [`boost::hash_combine`](https://www.boost.org/doc/libs/1_55_0/doc/html/hash/combine.html) for hashing a point? This has to be carefully implemented due to numerical error.\r\n\r\nDo we have any other use case outside grid filters?', 'comment_created': datetime.datetime(2021, 7, 6, 17, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 664818699, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 19, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 664820228, 'comment_body': 'Done, I declared new variables in the testing class for the job', 'comment_created': datetime.datetime(2021, 7, 6, 19, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 665302340, 'comment_body': 'For anyone interested: https://github.com/tin1254/PCL_GSoC_2021/pull/3', 'comment_created': datetime.datetime(2021, 7, 7, 11, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 665660459, 'comment_body': 'For consistence with other filters, I changed to use field initializer for `filter_name_`. (in another PR) \r\nOther default values are now initialized directly', 'comment_created': datetime.datetime(2021, 7, 7, 19, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 667342716, 'comment_body': 'We agreed on having `GridStruct` as an object in `TransformFilter`', 'comment_created': datetime.datetime(2021, 7, 10, 13, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 667342914, 'comment_body': 'We agreed on only having the getter returning `bool`, I will open a PR later', 'comment_created': datetime.datetime(2021, 7, 10, 13, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 671660420, 'comment_body': ""Should we check for overflow here as well? The actual multiplication that happens is not `(max_p - min_p) * inverse_leaf_size` but is `map_p.array().abs().max(min_p.array().abs()) * inverse_leaf_size`\r\n\r\nWe wouldn't catch that overflow with this logic"", 'comment_created': datetime.datetime(2021, 7, 17, 9, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671661250, 'comment_body': 'Feels like the has and overflow related functions could be:\r\n* free-functions\r\n* static functions if required\r\n* member functions if they take data from the class, instead of arguments', 'comment_created': datetime.datetime(2021, 7, 17, 9, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671661565, 'comment_body': 'Change this?', 'comment_created': datetime.datetime(2021, 7, 17, 9, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671661819, 'comment_body': 'Should we have a non-empty dtor as well?', 'comment_created': datetime.datetime(2021, 7, 17, 9, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671662204, 'comment_body': ""Isn't const cast sole role to cast away the constness? Wouldn't a static cast do the job here?\r\n\r\n(or just write `return grid_struct` if you can)"", 'comment_created': datetime.datetime(2021, 7, 17, 9, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671662800, 'comment_body': 'These restrictions should be tested at compile time by us. SFINAE can be used to detect the data members.', 'comment_created': datetime.datetime(2021, 7, 17, 9, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671662849, 'comment_body': 'We can relax this to ADL dependent lookup as required by the range-based for loop for free functions: `begin` and `end`. Eg: https://godbolt.org/z/eGGoovEWP', 'comment_created': datetime.datetime(2021, 7, 17, 9, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671662898, 'comment_body': 'can we put setup, addPoint and filterGrid together and keep it a bit apart from size, begin, end (which are also together)?', 'comment_created': datetime.datetime(2021, 7, 17, 9, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671663101, 'comment_body': ""Will the hash function in cartesian filter be available here? I don't think so, right?\r\n\r\nShall we just make them free functions (with some well documented defaults)?"", 'comment_created': datetime.datetime(2021, 7, 17, 9, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 672334128, 'comment_body': ""You mean we don't need to strictly require they exist as member functions? In that case we won't have SFINAE check on that right?"", 'comment_created': datetime.datetime(2021, 7, 19, 14, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672556443, 'comment_body': 'Leave that upto me ðŸ˜† Working on it.', 'comment_created': datetime.datetime(2021, 7, 19, 19, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 672628592, 'comment_body': ""Now everything are casting to `double` before multiplications, and then check in `double` domain. It won't overflow anymore in any operations\r\n\r\n```cpp\r\nstd::numeric_limits<size_t>::max() = 1.84467e+19\r\nstd::numeric_limits<float>::max() = 3.40282e+38\r\nstd::numeric_limits<double>::max() = 1.79769e+308\r\n```\r\n\r\n```cpp\r\nconst double max_size = static_cast<double>(std::numeric_limits<std::size_t>::max());\r\n\r\nconst double px = static_cast<double>(max_p[0]) - static_cast<double>(min_p[0]);\r\nconst double py = static_cast<double>(max_p[1]) - static_cast<double>(min_p[1]);\r\nconst double pz = static_cast<double>(max_p[2]) - static_cast<double>(min_p[2]);\r\nconst double dx = std::floor(px * inverse_leaf_size[0]) + 1;\r\nconst double dy = std::floor(py * inverse_leaf_size[1]) + 1;\r\nconst double dz = std::floor(pz * inverse_leaf_size[2]) + 1;\r\n\r\n// Check hashing range\r\nif (dx > max_size || dy > max_size || dz > max_size || dx * dy * dz > max_size)\r\n  return 0;\r\nelse\r\n  return static_cast<std::size_t>(dx * dy * dz);\r\n```"", 'comment_created': datetime.datetime(2021, 7, 19, 21, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672682695, 'comment_body': 'Done, move to free functions', 'comment_created': datetime.datetime(2021, 7, 19, 22, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672688139, 'comment_body': ""Done, I was overcomplicated things ðŸ˜†  Now it's `return grid_struct` "", 'comment_created': datetime.datetime(2021, 7, 19, 23, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672691556, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 19, 23, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672691684, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 19, 23, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672696069, 'comment_body': 'What would be inside the dtor? Do we have anything that have to be released manually?', 'comment_created': datetime.datetime(2021, 7, 19, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672696438, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 19, 23, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672730575, 'comment_body': ""> Now everything are casting to `double` before multiplications, and then check in `double` domain. It won't overflow anymore in any operations\n\nYou've also lost precision here."", 'comment_created': datetime.datetime(2021, 7, 20, 0, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 674428780, 'comment_body': ""ðŸ¤¯ I didn't notice [this issue](https://stackoverflow.com/questions/52491226/converting-really-large-int-to-double-loss-of-precision-on-some-computer) before\r\n\r\nI added additional tests in between following the logic before. Now we also check the following subtraction and multiplication\r\n\r\n```cpp\r\nconst float range_x = max_p[0] - min_p[0];\r\nconst std::size_t dx = std::floor(range_x * inverse_leaf_size_x) + 1;\r\n```\r\n\r\n## PS\r\n> The actual multiplication that happens is not `(max_p - min_p) * inverse_leaf_size` but is `map_p.array().abs().max(min_p.array().abs()) * inverse_leaf_size`\r\n\r\nI also tried the following:\r\n```cpp\r\nconst Eigen::Array4f range_p = max_p.abs().array().max(min_p.abs().array());\r\n  if (range_p[0] > max_size / inverse_leaf_size_x ||\r\n      range_p[1] > max_size / inverse_leaf_size_y ||\r\n      range_p[2] > max_size / inverse_leaf_size_z)\r\n    return 0;\r\n```\r\n\r\nBut when we proceed to the next multiplication, `max_p[0]` or `min_p[0]` could be negative. In such case we have to identify positive or negative `size_t` if we want to keep precision\r\n```cpp\r\nmax_p[0] * inverse_leaf_size_x\r\nmin_p[0] * inverse_leaf_size_x\r\n```\r\n\r\nIt will need many lines of boilerplate code for checking if the following subtraction has oveflow\r\n```cpp\r\nconst std::size_t dx = dx_max - dx_min + 1;\r\n``` \r\n"", 'comment_created': datetime.datetime(2021, 7, 22, 0, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 677557769, 'comment_body': 'I think I meant a non-empty ctor', 'comment_created': datetime.datetime(2021, 7, 27, 15, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 678341148, 'comment_body': 'I implement a SFINAE check prototype [here](https://github.com/tin1254/PCL_GSoC_2021/pull/4)', 'comment_created': datetime.datetime(2021, 7, 28, 14, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 681828570, 'comment_body': 'EXPECT_{TRUE,FALSE} instead?', 'comment_created': datetime.datetime(2021, 8, 3, 14, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 684797654, 'comment_body': 'With `filter_name` as input argument?', 'comment_created': datetime.datetime(2021, 8, 8, 16, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 684852709, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 9, 0, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}]","[{'commit_sha': '21328d4fda8aafcdf92a39ea4727741cab57ad06', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ffd7b53a83adc47508065ea212fea63045c4f83', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488decb9f5579501f6fac8e5ccf03cf7934429a7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64afcb6bb7bec0a563cc2be6f9a9b851c7623676', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99821c6b7547daac4df38c075a87fdf8e19408f9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '301416d40948bde5c7c015f859b3ae92e90de92a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3aad50e4a8ee727d9bf1625a9a405c172ed7e9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651b930c8fa1d6f5857a09a1907b92a06f55bfec', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc6aa3931d0725220cf036b37489be39306f63a7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e911680da3b047372c5f9595f1bf404a4b969eaf', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abce11e2ff0e7ecde67c8d57e6364da495864422', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c40a8e56be209ef68d16ace4394f06f7fa27e882', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2752dd6112ab77a73bb81579d52b73192e458909', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d0ed6f89ee830e40be673b652c5420810614440', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5307ded9b0baeb9faaedd3e5d29dda8bc7014ecd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cdc661335875b30410653ea75807853b6077919', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be47101b10b21f33b781efabec3cc26d1bcbea17', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b2cbbbd1a96e00dc62f807c15cfbc40fba11302', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6209385ac8b1071565f249fbb0abc9099f899632', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa365d7d49b7985ef0c0b5b09e0934ecd55071f', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68667e116964b967b092d833f8e2ab27ac07750c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171a7cb7facb9cbf7afd0c18cb240446c5cb18d3', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e0671d10be671a511b8708744fcd92a88525c37', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a04d077cdcad78982e1db4ff4f454ed2378e908', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6448037e8ed2b8d7d1319dc96e292cd7cfe9c2e2', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '374fb751f4740e68bc99ed148eff03e147d878e1', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd509f556849fde630e899792b12a9970d35703b7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2e37e58505d3fe81ea8f2d4aeb5e588c1df4aa', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e88a0d72041f5937a50ad3d3fdd7bb36cf6ee1', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a8359646033d58879974b4271e438ec1b213a7b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bdc05554614cc685f519b0a1bb7db9d598d36e', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e47a433216073a2454e15f614ca14566d1e126', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}]",,22342030,,User,,6,,7,4
682258425,Refactor voxel grid,"Splitted from https://github.com/PointCloudLibrary/pcl/pull/4813

### Description
- Design uniform code structure for existing voxel filters
- Refactor `VoxelGrid` such that it inherits from `CartesianFilter` and `TransformFilter`
- Reduce the boilerplate code in grid based filters
- Improve runtime performance up to 40% faster by using `std::unordered_map` instead of sorting for grouping points to voxels
- Implement benchmark comparing the performance of the old and new `VoxelGrid` implementation
- Write tutorial to introduce the design concept of new `VoxelGrid` code structure and `TransformFilter`

### Related
- Improve performance by using `std::unordered_map` instead of sorting for gathering points into voxel
    - https://github.com/PointCloudLibrary/pcl/issues/2211#issuecomment-429045193
- Close 
    - https://github.com/PointCloudLibrary/pcl/issues/4365
    - https://github.com/PointCloudLibrary/pcl/issues/585
   - https://github.com/PointCloudLibrary/pcl/issues/2211
    - https://github.com/PointCloudLibrary/pcl/pull/4385
- Grid filter with custom logic
  - https://github.com/PointCloudLibrary/pcl/issues/2044
  - https://github.com/PointCloudLibrary/pcl/pull/2171

### Current issue

- Throw segfault with label point types ([description](https://github.com/tin1254/pcl/pull/2#discussion_r692919190))
  - Currently it is avoided by having raw pointer of `CentroidPoint`

### TODO

- Write `TransformFilter` tutorial
- Finalize the `leaf_layout_` design",False,4829,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4829,https://github.com/PointCloudLibrary/pcl/pull/4829,open,1987,42,13,79,5,86,2,0,"[{'name': 'module: filters'}, {'name': 'priority: gsoc'}]",2021-07-02 00:56:02+00:00,,0.0,,"[{'comment_id': 662693149, 'comment_body': 'namespace pcl::test(s)?', 'comment_created': datetime.datetime(2021, 7, 2, 2, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 662693475, 'comment_body': 'Why do we need 2 of these?', 'comment_created': datetime.datetime(2021, 7, 2, 2, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663168796, 'comment_body': ""There are two ways to compute the centroids: average coordinate only / average all the fields if possible\r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/cd3b3f95441746ce5c7ce1116768d2ee6b40d996/filters/include/pcl/filters/impl/voxel_grid.hpp#L404-L423\r\n\r\nI'm looking for some way to avoid having two centroids"", 'comment_created': datetime.datetime(2021, 7, 2, 17, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663287576, 'comment_body': ""`pcl::test` currently is for [test marocs](https://pointclouds.org/documentation/namespacepcl_1_1test.html), and we don't have anything similar unit test in pcl\r\n\r\nmaybe another name `pcl::unittest`?"", 'comment_created': datetime.datetime(2021, 7, 2, 23, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663292915, 'comment_body': 'You could use a union or boost/std::variant there', 'comment_created': datetime.datetime(2021, 7, 3, 0, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663343095, 'comment_body': '`vector<int>`  ->\r\n\r\n`vector<size_t>` OR `unordered_map<size_t,size_t>` ?\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 3, 9, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663343195, 'comment_body': 'This issue will affect all API returning vector<int> in VoxelGrid', 'comment_created': datetime.datetime(2021, 7, 3, 9, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663374421, 'comment_body': 'Why is this needed? Is it not possible to put this directly as the template parameter?', 'comment_created': datetime.datetime(2021, 7, 3, 15, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 663377095, 'comment_body': 'How about checking `input_->is_dense` outside of the loop, and then having two different loops? That might be more lines, but removes the need for checking `is_dense` for every point', 'comment_created': datetime.datetime(2021, 7, 3, 15, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 663380061, 'comment_body': 'Should we perhaps remove the functionality to additionally filter points depending on whether one value is inside or outside an interval? (Includes filter field name, min and max limits, negative limits, ...) This is basically a PassThrough filter inside the voxel grid filter, it would be cleaner to separate those two', 'comment_created': datetime.datetime(2021, 7, 3, 15, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 663382228, 'comment_body': '```suggestion\r\nPCL_ADD_TEST(grid_filter test_grid_filter\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 16, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 663383471, 'comment_body': ""It feels like this could be optimized, but I don't have a suggestion yet, will try to think about it."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 663743328, 'comment_body': 'Behavioral change. Should we note that in the release note for 1.12: `Future versions of VoxelFilters and related will not perform PassThrough filtering`', 'comment_created': datetime.datetime(2021, 7, 5, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663745534, 'comment_body': 'I think we can discuss this for a simpler class (FunctionFilter) and arrive at a uniform decision:\r\n1. PointT as first argument, undeduced, and second argument as the ctor input\r\n2. ctor input as first template argument, allows PointT to be deduced, but makes it hard to work with templated lambdas', 'comment_created': datetime.datetime(2021, 7, 5, 8, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 663896297, 'comment_body': 'Maybe use operations from eigen?', 'comment_created': datetime.datetime(2021, 7, 5, 12, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663900651, 'comment_body': 'Good point, I try it out when I start benchmarking.\r\n\r\nFYI: I found for all grid filters expect `ApproximateVoxelGrid` do this', 'comment_created': datetime.datetime(2021, 7, 5, 12, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663902172, 'comment_body': 'I also prefer to remove this, and for all grid filters, only `VoxelGrid` and the filters derived from it do this', 'comment_created': datetime.datetime(2021, 7, 5, 12, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 663916053, 'comment_body': 'Done in https://github.com/PointCloudLibrary/pcl/pull/4828', 'comment_created': datetime.datetime(2021, 7, 5, 13, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 664570747, 'comment_body': 'I tried hashing with eigen operations, but turns out the original approach is always better. Maybe we should leave it as it is?\r\n\r\n[Benchmark with Godbolt](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAM1QDsCBlZAQwBtMQBGAFlJvoCqAZ0wAFAB4gA5AAYppAFZdSrZrVDIApACYAQjt2kR7ZATx1KmWugDCqVgFcAtrRDbSV9ABk8tTADlnACNMYhAANncAB1QhQnNaO0cXN1IYuLM6Hz9ApxCwyKNME0zaBgJmYgIk51d3Y0xTBPLKgmyA4NCI%2BoqqmpSe1vbc/O6ASiNUB2JkDikdAGZfZEcsAGpNBZtsPGArAHoAESsRTexNGQBBReXVzA2t5ARiOlQzi%2BvtJdoVh3XNmzmIQEYiYZhOd5XG4/O4PGwAN0aRGIkOuVwccXUa0uxGIzAAntw8A9DmsdntXCAcXj8QDfARSGteGtOO8Fvp0ZjgNjcQTuEISWTdlYQFTebStnEAF6YAD6DKZjNZC3O7I%2BGN83OpfKogvJIrFNO4VE2HLRl18rF892lcoIawQzCECFlmGFtAgaFowJ5RpN2nCayiCq9Pu1hP9gfYzCosttpA%2BayTyZTqbTKdD9vDRJ0gacvllQUZmd9fKEubW%2BHhQVlTgcrDGGwA7GakyXmA4iGsCE4oiTE6moMG1gAqNbR2O2sYAOiorFQJAgM5YwLp9DOS7WAFo1vnaIXl06CADbfKN2NTQPQQRprQ1hAe32x1Wa3WG9OEGD0ACFufp0JnCXS8oSbQ4Pg%2BS1rTWU97UdZ1ZRIXZfDYT06DDcVjQrYNizQrMMMjccwUnPAZQTK50woyiM1w0tCTwCs90LHDvTwo1ywDSs8GrWt60bTQWwHEsYLWPAFAAaxkQVgXQUU5wXYgIGDTQAFZdBkFTSTHCc4xIzAVLUjTGx3Rign09TlLAtVyLWITdPlETxM4KSCBkkA5MXJTVNZCzR0ImMdJlfTvMOIzdwLUyvI04DLjbGjhNEsTtGc1z3IUzzdG0DTfO0219MyizQpMvKoqsmK1mvW8HIk3yXx41gzKygwqqc58uNfesgsavQqqS1ruLfYqLOi/iwKhK56V3ZhfE3fjWxsuK7PtWhnFlQhQmYUoBU2UlOBkPb9vU0qB2zXUct0wUTtFAAlNR0FQJwgNKpNs2JEyIE4Rl3DWBZGW4C8nto/lOP6%2BsIGUxlwkZJtGQADn%2Bs0B2k0VEVMEgAROs4gwIcsAeDIRp1BERiERCBlqcVaCHWzb4YHGhiHveLBUO3QRLhNYyYpqmEhxlmDAMPA%2BIE6ykzx6cogxF0gmYZAxIgS6QBu6x7qXGnrJG8DrKdImCAgOCXTdClFOxhqLMZM7SLC/ci2B9qG37BZRrK9M9YQ4gkNoFC8ZNw4zaIgLMEZEzGVqt8xlV80kw7LsCCc7boJc0UnheWhUFFYEv3xWUVlQGXRRTgB3R65rphnFtZuPmfLrZ2ZWta8U200Nj0fnBbmpMXYNqwjfLVT6NNvziItoObbq8Ok3VzXO1QbskrjpGUGeV408p5h0Ez7Pc5AAui41sqo%2BnggFmSxPF5T5eM6z%2BdN%2B3se1hLiBGYrxviQBGvybrjbucbvm9AF5s24dE6F0iFgDIVYN3fSfcfYD39oHcKwc2qj2iuPUCA597dm4MfBeydU4gHTqvdeV8xJ51QIXcOiME4oCmPaAEr8dDaE7q4JumVhaUVodXYEn9kBZyPCeShScl4gHQNMT%2BdAAR3QcEEdgbJsAPiSjuGOy4pj0CAqwii7CbDx1cp4eqAN55oE7HCOh2htAgLASAZhA4qIaPjlwnhq5JT8NPrg4R9cEjiKmFIvSKoNwEEwQohYSiHAqIvGo9MNj546OQQ8BG1kKrEDvMzcCoEpATFYNIZS8hXCyHkKnKQNgf4syEFMGY9xFicHkAQaQcgw6kGIbtGQKhpDcHkE4CITZpycAAJzaE4DDGQykZBdMiDDbgXTSDZLkKQPJ8ghAgEaVUnJEw4CwCQJgcQjQp5kAoBASowAhCiDUMUBgCBSHZIqaQNAvY8CqFKIcvwrATlnOqfIK5UQbldGAJwb5lz7rvPYMQAA8p2J5%2BdJnyHWY0HE%2BzpAQo2cgco%2BBsnyH4IwFg7AuC8FRcIMQkgcmKGUKodQKBCkqDwEEOZsAPZOA4Iw0giIwhSAWAsLpqSJioGDNzaQW4tzSW2loZuegeDbkBQsWZJTZjKGkr4e5xzTlgukBc/OeIoiKtSU0qQmSJkvOmdIcQMNwhbnCJg4AyBkAsk4J0sk8Ktn3lwIQEgTcFicEbAUwVuhKkvNqekqQLTSBtIWNoac/Smww26WMmQCwmycGUu4cFuqpCzPmaQRZNS0nSDFdq/FMyU1eomAyuIFhuBAA%3D)', 'comment_created': datetime.datetime(2021, 7, 6, 13, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 664966094, 'comment_body': 'I believe we all agree on removing this. After removing, `GridFilterBase` will just have setters and getters of `DownsampleAllData` and `MinimumPointsNumberPerVoxel`.', 'comment_created': datetime.datetime(2021, 7, 7, 0, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 665662675, 'comment_body': ""I removed the friend as we don't need it anymore"", 'comment_created': datetime.datetime(2021, 7, 7, 19, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 666179359, 'comment_body': 'I benchmarked both way, but the benchmark shows having a loop is faster, which is quite weird for me...\r\n\r\n## One loop\r\n```cpp\r\nfor (const auto& pt : *input_) {\r\n      if (input_->is_dense || isXYZFinite(pt)) {\r\n        GridStruct::addPointToGrid(pt);\r\n      }\r\n    }\r\n```\r\n```\r\n-------------------------------------------------------------------------\r\nBenchmark                               Time             CPU   Iterations\r\n-------------------------------------------------------------------------\r\nBM_VoxelGrid_milk                    10.8 ms         10.8 ms           65\r\nBM_ApproximateVoxelGrid_milk         7.49 ms         7.47 ms           91\r\nBM_Experimental_VoxelGrid_milk       8.31 ms         8.28 ms           84\r\nBM_VoxelGrid_mug                     8.53 ms         8.50 ms           82\r\nBM_ApproximateVoxelGrid_mug          6.81 ms         6.79 ms          101\r\nBM_Experimental_VoxelGrid_mug        6.28 ms         6.26 ms          110\r\n```\r\n\r\n## Two loops\r\n```cpp\r\n    if (input_->is_dense) {\r\n      for (const auto& pt : *input_)\r\n        GridStruct::addPointToGrid(pt);\r\n    }\r\n    else {\r\n      for (const auto& pt : *input_) {\r\n        if (isXYZFinite(pt)){\r\n          GridStruct::addPointToGrid(pt);\r\n        }\r\n      }\r\n    }\r\n```\r\n```\r\n-------------------------------------------------------------------------\r\nBenchmark                               Time             CPU   Iterations\r\n-------------------------------------------------------------------------\r\nBM_VoxelGrid_milk                    10.7 ms         10.7 ms           64\r\nBM_ApproximateVoxelGrid_milk         7.40 ms         7.40 ms           89\r\nBM_Experimental_VoxelGrid_milk       9.04 ms         9.03 ms           79\r\nBM_VoxelGrid_mug                     8.67 ms         8.66 ms           80\r\nBM_ApproximateVoxelGrid_mug          6.80 ms         6.79 ms          102\r\nBM_Experimental_VoxelGrid_mug        7.04 ms         7.04 ms          101\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 13, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 667175749, 'comment_body': 'Yes, that is strange. The mug and milk dataset are not dense when the filter receives them, right? It would be interesting to also do the benchmarking with dense clouds because in that case the two loops should really be faster than the one loop', 'comment_created': datetime.datetime(2021, 7, 9, 19, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 667341691, 'comment_body': 'We agreed on the latter, @kunaltyagi will probably work on it with C++17 features', 'comment_created': datetime.datetime(2021, 7, 10, 13, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 667397255, 'comment_body': 'I tried to make the code compiles, but the only way I found is to have `const_cast<VoxelFilter*>(this)`\r\n\r\nReasons\r\n1.  `this` is needed for accessing base method of a template class\r\n2. `getLeafSize` is a const function, so `this` is somehow needed to be const too. Therefore I cast `this` to a const point\r\n\r\n@kunaltyagi @mvieth Do you have any suggestion to avoid using `const_cast`?', 'comment_created': datetime.datetime(2021, 7, 10, 23, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 667609936, 'comment_body': 'Did you try adding a const overload for `getGridStruct`?', 'comment_created': datetime.datetime(2021, 7, 12, 4, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 667898961, 'comment_body': ""I didn't try `const GridStruct& GridStruct() const` before, now it works, thanks!\r\n\r\nI create a new overload following this [stackoverflow answer](https://stackoverflow.com/a/123995/5486298)"", 'comment_created': datetime.datetime(2021, 7, 12, 12, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 669094714, 'comment_body': ""Some more thoughts on this (correct me if I'm wrong somewhere):\r\n- Since `divb_mul[0]` is always 1, multiplication with it seems wasted\r\n- Are the `Eigen::Vector4i` sufficient or do we need vectors/arrays of uint32_t or uint64_t to not run into limitations at some point in the future?\r\n- To me it would seem more natural if we first subtract the minimum corner of the bounding box and then multiply by the inverse leaf size, instead of first multiplying then subtracting `min_b`. That might also prevent some overflows, but not sure if there are downsides?\r\n- The Godbolt benchmark is not *that* meaningful, I suspect that some code parts are optimized away by the compiler. The google benchmark tool has some magic to prevent that. If you like, see how fast the google benchmark you already wrote is, when you swap out the hashing function"", 'comment_created': datetime.datetime(2021, 7, 13, 20, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 669486505, 'comment_body': ""- Agree, I'll remove it\r\n- With the current implementation it is sufficient (not sufficient if we want to use eigen operations above)\r\n- No downside except for storing 2 more vectors as member\r\n- I tested with the pcl filter benchmark, the run time are nearly the same on my machine.\r\n\r\nI'll keep it for current implementation for now, @mvieth what do you think?"", 'comment_created': datetime.datetime(2021, 7, 14, 10, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 670524659, 'comment_body': 'This is the part having the most runtime increase. It used to be `grid_.clear()`, but I found this is faster than `clear()` after some trials', 'comment_created': datetime.datetime(2021, 7, 15, 14, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 671590388, 'comment_body': 'http://en.cppreference.com/w/cpp/container/unordered_map/clear\r\n\r\nComplexity of clear is linear in number of elements.\r\n\r\nFunnily, the destructor and the ctor have the same behavior. Could you use perf to dig into the issue?', 'comment_created': datetime.datetime(2021, 7, 17, 1, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671770708, 'comment_body': ""I benchmarked both `union` and `boost::variant` with default `downsample_all_data=false` (use `CentroidPoint` instead of `Vector4f`). In addition, I implement `CentroidPoint::clear()` to avoid constructing and destructing voxel objects.\r\n\r\nNow the runtime of `office` is close to the original `VoxelGrid`, but it's still very strange to me that the original one and the new one should construct & destruct the same number of voxels in the benchmark test... I will try to look deeper into it with perf\r\n\r\n## Benchmark\r\n\r\n### `union`\r\n```\r\n----------------------------------------------------------------------------\r\nBenchmark                                  Time             CPU   Iterations\r\n----------------------------------------------------------------------------\r\nBM_VoxelGrid_5people                    14.9 ms         14.9 ms           47\r\nBM_ApproximateVoxelGrid_5people         8.34 ms         8.33 ms           83\r\nBM_Experimental_VoxelGrid_5people       11.4 ms         11.4 ms           60\r\nBM_VoxelGrid_office                     14.3 ms         14.3 ms           48\r\nBM_ApproximateVoxelGrid_office          9.22 ms         9.22 ms           76\r\nBM_Experimental_VoxelGrid_office        14.7 ms         14.7 ms           46\r\nBM_VoxelGrid_milk                       7.86 ms         7.85 ms           89\r\nBM_ApproximateVoxelGrid_milk            5.48 ms         5.47 ms          128\r\nBM_Experimental_VoxelGrid_milk          5.20 ms         5.20 ms          107\r\nBM_VoxelGrid_mug                        6.34 ms         6.34 ms          112\r\nBM_ApproximateVoxelGrid_mug             5.04 ms         5.04 ms          136\r\nBM_Experimental_VoxelGrid_mug           4.31 ms         4.31 ms          162\r\n\r\n```\r\n\r\n### `boost::variant`\r\n```\r\n----------------------------------------------------------------------------\r\nBenchmark                                  Time             CPU   Iterations\r\n----------------------------------------------------------------------------\r\nBM_VoxelGrid_5people                    13.6 ms         13.6 ms           52\r\nBM_ApproximateVoxelGrid_5people         8.00 ms         7.99 ms           85\r\nBM_Experimental_VoxelGrid_5people       11.6 ms         11.6 ms           61\r\nBM_VoxelGrid_office                     13.5 ms         13.5 ms           50\r\nBM_ApproximateVoxelGrid_office          8.49 ms         8.47 ms           82\r\nBM_Experimental_VoxelGrid_office        15.8 ms         15.8 ms           43\r\nBM_VoxelGrid_milk                       8.27 ms         8.27 ms           84\r\nBM_ApproximateVoxelGrid_milk            5.97 ms         5.96 ms          120\r\nBM_Experimental_VoxelGrid_milk          6.19 ms         6.19 ms          109\r\nBM_VoxelGrid_mug                        6.58 ms         6.57 ms          105\r\nBM_ApproximateVoxelGrid_mug             5.45 ms         5.44 ms          128\r\nBM_Experimental_VoxelGrid_mug           5.19 ms         5.19 ms          134\r\n```"", 'comment_created': datetime.datetime(2021, 7, 18, 2, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 671771333, 'comment_body': ""@mvieth I agree with you that we shoudn't use `CentroidPoint` in both case, although the benchmark can't reflect the difference because we're benchmarking clouds with same point type.\r\n\r\nAfter benchmarking above, I'll switch to `union`"", 'comment_created': datetime.datetime(2021, 7, 18, 2, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 671865485, 'comment_body': 'FYI, there are basically no collisions in the `unordered_map`, only 1 collision across all benchmarked clouds.\r\n\r\nAnd the load_factor looks normal too\r\n\r\n| cloud   | load_factor |\r\n|---------|-------------|\r\n| 5people | 0.356992    |\r\n| office  | 0.557616    |\r\n| milk    | 0.0778205   |\r\n| mug     | 0.0289335   |', 'comment_created': datetime.datetime(2021, 7, 18, 16, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 671915872, 'comment_body': 'Could you also compare the use of `unordered_map::clear()` and `for_each + clear`?', 'comment_created': datetime.datetime(2021, 7, 18, 23, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671915965, 'comment_body': '`vector<size_t>` if we maintain compatibility, else `unordered_map<size_t, size_t>`', 'comment_created': datetime.datetime(2021, 7, 18, 23, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671916297, 'comment_body': ""If runtime is same, and eigen is more terse and easy to read, I vote for that. But for now, it's ok"", 'comment_created': datetime.datetime(2021, 7, 18, 23, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671916625, 'comment_body': '0.55 is quite large. What happens if we call `unordered_map::max_load_factor(X);` where X is some number from 0.4 to 0.5?', 'comment_created': datetime.datetime(2021, 7, 18, 23, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 671917795, 'comment_body': '`for_each + clear` is the `union` above\r\n\r\n### `unordered_map::clear()`\r\n```\r\n----------------------------------------------------------------------------\r\nBenchmark                                  Time             CPU   Iterations\r\n----------------------------------------------------------------------------\r\nBM_VoxelGrid_5people                    13.8 ms         13.8 ms           51\r\nBM_ApproximateVoxelGrid_5people         7.88 ms         7.87 ms           86\r\nBM_Experimental_VoxelGrid_5people       25.1 ms         25.1 ms           32\r\nBM_VoxelGrid_office                     13.8 ms         13.8 ms           51\r\nBM_ApproximateVoxelGrid_office          8.40 ms         8.39 ms           84\r\nBM_Experimental_VoxelGrid_office        38.7 ms         38.7 ms           21\r\nBM_VoxelGrid_milk                       8.95 ms         8.94 ms           75\r\nBM_ApproximateVoxelGrid_milk            6.61 ms         6.61 ms          110\r\nBM_Experimental_VoxelGrid_milk          7.99 ms         7.98 ms           87\r\nBM_VoxelGrid_mug                        7.13 ms         7.13 ms           95\r\nBM_ApproximateVoxelGrid_mug             5.74 ms         5.74 ms          122\r\nBM_Experimental_VoxelGrid_mug           5.40 ms         5.40 ms          128\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 23, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 671927713, 'comment_body': 'Benchmarked with `for_each` & `clear`\r\n\r\n### without `max_load_factor`\r\n```\r\nBM_VoxelGrid_5people                    13.3 ms         13.3 ms           55\r\nBM_Experimental_VoxelGrid_5people       10.0 ms         10.0 ms           69\r\nBM_VoxelGrid_office                     13.6 ms         13.6 ms           52\r\nBM_Experimental_VoxelGrid_office        14.1 ms         14.1 ms           48\r\n```\r\n\r\n### `max_load_factor(0.5)`\r\n```\r\nBM_VoxelGrid_5people                    12.8 ms         12.7 ms           53\r\nBM_Experimental_VoxelGrid_5people       8.21 ms         8.20 ms           81\r\nBM_VoxelGrid_office                     12.7 ms         12.7 ms           55\r\nBM_Experimental_VoxelGrid_office        11.7 ms         11.7 ms           61\r\n```\r\n\r\n### `max_load_factor(0.4)`\r\n```\r\nBM_VoxelGrid_5people                    13.1 ms         13.1 ms           53\r\nBM_Experimental_VoxelGrid_5people       8.45 ms         8.45 ms           81\r\nBM_VoxelGrid_office                     12.8 ms         12.8 ms           55\r\nBM_Experimental_VoxelGrid_office        10.1 ms         10.1 ms           63\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 0, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 671937386, 'comment_body': 'A minor question: for reserving the capacity of a hash-map, which method are you using:\r\n* `hash_map.reserve(capacity);`\r\n* `hash_map.reserve(std::ceil(capacity / has_map.max_load_factor()));`\r\n\r\nIf the former, then you are also hurting performance by causing some rehashing once the load factor is reached. If so, please use the latter method, and re-run the benchmarks', 'comment_created': datetime.datetime(2021, 7, 19, 1, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 672250187, 'comment_body': ""> Funnily, the destructor and the ctor have the same behavior. Could you use perf to dig into the issue?\r\n\r\nIt is indeed because of constructing and destructing: `_int_malloc` and  `_int_free` occupied considerable amount of runtime with `unordered_map::clear()`\r\n\r\nBut if we look at the original `VoxelGrid`, it also creates the same number of `CentroidPoint`. I guess that part is optimized away by the compiler? But I'm not an expert of that\r\nhttps://github.com/PointCloudLibrary/pcl/blob/97b0f0e63b3325bf8a19c99d0f0918b9cd86eb75/filters/include/pcl/filters/impl/voxel_grid.hpp#L393-L423\r\n\r\n## `perf` results\r\n\r\n### `unordered_map::clear()`\r\n```\r\n    43.46%  benchmark_filte  benchmark_filters_voxel_grid  [.] pcl::experimental::TransformFilter<pcl::experimental::VoxelStructT<pcl::PointXYZ>, pcl::PointXYZ>::applyFilter\r\n    13.10%  benchmark_filte  libc-2.31.so                  [.] _int_malloc\r\n    10.11%  benchmark_filte  libc-2.31.so                  [.] _int_free\r\n     6.16%  benchmark_filte  benchmark_filters_voxel_grid  [.] std::_Hashtable<unsigned long, std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> >, std::allocator<std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> > >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<unsigned long const&, bool&>\r\n     4.43%  benchmark_filte  benchmark_filters_voxel_grid  [.] pcl::experimental::VoxelStructT<pcl::PointXYZ>::setUp\r\n     3.67%  benchmark_filte  libc-2.31.so                  [.] __mcount_internal\r\n     3.31%  benchmark_filte  libc-2.31.so                  [.] malloc\r\n     1.70%  benchmark_filte  libc-2.31.so                  [.] malloc_consolidate\r\n     1.58%  benchmark_filte  libpcl_io.so.1.12.0.99        [.] pcl::lzfDecompress\r\n     1.38%  benchmark_filte  libc-2.31.so                  [.] cfree@GLIBC_2.2.5\r\n     1.25%  benchmark_filte  libc-2.31.so                  [.] _mcount\r\n```\r\n\r\n### `for_each + clear()`\r\n```\r\n68.74%  benchmark_filte  benchmark_filters_voxel_grid   [.] pcl::experimental::TransformFilter<pcl::experimental::VoxelStructT<pcl::PointXYZ>, pcl::PointXYZ>::applyFilter\r\n    16.51%  benchmark_filte  benchmark_filters_voxel_grid   [.] pcl::experimental::VoxelStructT<pcl::PointXYZ>::setUp\r\n     2.00%  benchmark_filte  libpcl_io.so.1.12.0.99         [.] pcl::lzfDecompress\r\n     1.42%  benchmark_filte  libpcl_io.so.1.12.0.99         [.] pcl::PCDReader::readBodyBinary\r\n     0.82%  benchmark_filte  libc-2.31.so                   [.] malloc_consolidate\r\n     0.82%  benchmark_filte  benchmark_filters_voxel_grid   [.] std::_Hashtable<unsigned long, std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> >, std::allocator<std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> > >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<unsigned long const&, bool&>\r\n     0.77%  benchmark_filte  libc-2.31.so                   [.] __memmove_avx_unaligned_erms\r\n     0.69%  benchmark_filte  ld-2.31.so                     [.] do_lookup_x\r\n     0.65%  benchmark_filte  libc-2.31.so                   [.] _int_free\r\n     0.65%  benchmark_filte  libc-2.31.so                   [.] _int_malloc\r\n     0.63%  benchmark_filte  libc-2.31.so                   [.] __mcount_internal\r\n     0.53%  benchmark_filte  libc-2.31.so                   [.] malloc\r\n     0.38%  benchmark_filte  libc-2.31.so                   [.] unlink_chunk.isra.0\r\n```\r\n\r\n### original `VoxelGrid`\r\n```\r\n  35.00%  benchmark_filte  libpcl_filters.so.1.12.0.99   [.] pcl::VoxelGrid<pcl::PointXYZ>::applyFilter\r\n  20.47%  benchmark_filte  libpcl_filters.so.1.12.0.99   [.] boost::sort::pdqsort_detail::pdqsort_loop<__gnu_cxx::__normal_iterator<cloud_point_index_idx*, std::vector<cloud_point_index_idx, std::allocator<cloud_point_index_idx> > >, std::less<cloud_point_index_idx>, false>\r\n  13.31%  benchmark_filte  libpcl_filters.so.1.12.0.99   [.] boost::sort::spreadsort::detail::spreadsort_rec<__gnu_cxx::__normal_iterator<cloud_point_index_idx*, std::vector<cloud_point_index_idx, std::allocator<cloud_point_index_idx> > >, unsigned int, pcl::VoxelGrid<pcl::PointXYZ>::applyFilter(pcl::PointCloud<pcl::PointXYZ>&)::{lambda(clo\r\n   5.07%  benchmark_filte  libc-2.31.so                  [.] _mcount\r\n   4.02%  benchmark_filte  libc-2.31.so                  [.] __mcount_internal\r\n   3.62%  benchmark_filte  libpcl_filters.so.1.12.0.99   [.] std::vector<cloud_point_index_idx, std::allocator<cloud_point_index_idx> >::emplace_back<unsigned int, int const&>\r\n   2.89%  benchmark_filte  libpcl_filters.so.1.12.0.99   [.] std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > >::emplace_back<unsigned int&, unsigned int&>\r\n   2.00%  benchmark_filte  libpcl_io.so.1.12.0.99        [.] pcl::lzfDecompress\r\n   1.51%  benchmark_filte  ld-2.31.so                    [.] do_lookup_x\r\n   1.47%  benchmark_filte  libpcl_io.so.1.12.0.99        [.] pcl::PCDReader::readBodyBinary\r\n   1.29%  benchmark_filte  libpcl_filters.so.1.12.0.99   [.] boost::sort::spreadsort::detail::is_sorted_or_find_extremes<__gnu_cxx::__normal_iterator<cloud_point_index_idx*, std::vector<cloud_point_index_idx, std::allocator<cloud_point_index_idx> > > >\r\n   0.94%  benchmark_filte  libpcl_filters.so.1.12.0.99   [.] 0x0000000000331d44\r\n   0.80%  benchmark_filte  libc-2.31.so                  [.] __memmove_avx_unaligned_erms\r\n   0.77%  benchmark_filte  ld-2.31.so                    [.] _dl_lookup_symbol_x\r\n```"", 'comment_created': datetime.datetime(2021, 7, 19, 12, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672282890, 'comment_body': ""> If the former, then you are also hurting performance by causing some rehashing once the load factor is reached. If so, please use the latter method, and re-run the benchmarks\r\n\r\nThank you! I indeed didn't change the reserve number, the benchmarks are updated now\r\n"", 'comment_created': datetime.datetime(2021, 7, 19, 13, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 672293985, 'comment_body': ""`clear` is just awful. Don't know why ðŸ˜† Let's stick with union and the new clear function"", 'comment_created': datetime.datetime(2021, 7, 19, 13, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 672297140, 'comment_body': ""I did see some improvements in 2 runs where we edit the max_load_factor, but not where we're using the default. Could you please confirm if the 1st run was also reserved considering load factor in mind?\r\n\r\nPS: Looking at the perf results soon"", 'comment_created': datetime.datetime(2021, 7, 19, 13, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 672360697, 'comment_body': '> Could you please confirm if the 1st run was also reserved considering load factor in mind?\r\n\r\nI benchmark `unordered_map::clear()` as contrast to `for_each` & `clear` above\r\n\r\n### `without max_load_factor`\r\n`BM_Experimental_VoxelGrid_office       45.8 ms`\r\n\r\n```\r\n    45.13%  benchmark_filte  benchmark_filters_voxel_grid  [.] pcl::experimental::TransformFilter<pcl::experimental::VoxelStructT<pcl::PointXYZ>, pcl::PointXYZ>::applyFilter\r\n    13.72%  benchmark_filte  libc-2.31.so                  [.] _int_malloc\r\n    10.29%  benchmark_filte  libc-2.31.so                  [.] _int_free\r\n     5.02%  benchmark_filte  benchmark_filters_voxel_grid  [.] std::_Hashtable<unsigned long, std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> >, std::allocator<std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> > >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<unsigned long const&, bool&>\r\n     4.98%  benchmark_filte  benchmark_filters_voxel_grid  [.] pcl::experimental::VoxelStructT<pcl::PointXYZ>::setUp\r\n     3.34%  benchmark_filte  libc-2.31.so                  [.] malloc\r\n     3.25%  benchmark_filte  libc-2.31.so                  [.] __mcount_internal\r\n     1.73%  benchmark_filte  libc-2.31.so                  [.] malloc_consolidate\r\n     1.34%  benchmark_filte  libc-2.31.so                  [.] cfree@GLIBC_2.2.5\r\n     1.33%  benchmark_filte  libpcl_io.so.1.12.0.99        [.] pcl::lzfDecompress\r\n     1.02%  benchmark_filte  libc-2.31.so                  [.] _mcount\r\n     1.00%  benchmark_filte  libpcl_io.so.1.12.0.99        [.] pcl::PCDReader::readBodyBinary\r\n     0.98%  benchmark_filte  libstdc++.so.6.0.28           [.] operator new\r\n```\r\n\r\n### `max_load_factor(0.5)`\r\n`BM_Experimental_VoxelGrid_office       38.5 ms`\r\n\r\n```\r\n    41.09%  benchmark_filte  benchmark_filters_voxel_grid       [.] pcl::experimental::TransformFilter<pcl::experimental::VoxelStructT<pcl::PointXYZ>, pcl::PointXYZ>::applyFilter\r\n    13.74%  benchmark_filte  libc-2.31.so                       [.] _int_malloc\r\n     9.42%  benchmark_filte  libc-2.31.so                       [.] _int_free\r\n     5.98%  benchmark_filte  benchmark_filters_voxel_grid       [.] std::_Hashtable<unsigned long, std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> >, std::allocator<std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> > >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<unsigned long const&, bool&>\r\n     4.81%  benchmark_filte  benchmark_filters_voxel_grid       [.] pcl::experimental::VoxelStructT<pcl::PointXYZ>::setUp\r\n     4.05%  benchmark_filte  libc-2.31.so                       [.] malloc\r\n     4.05%  benchmark_filte  libc-2.31.so                       [.] __mcount_internal\r\n     1.66%  benchmark_filte  libc-2.31.so                       [.] cfree@GLIBC_2.2.5\r\n     1.58%  benchmark_filte  libpcl_io.so.1.12.0.99             [.] pcl::lzfDecompress\r\n     1.46%  benchmark_filte  libc-2.31.so                       [.] _mcount\r\n     1.16%  benchmark_filte  libpcl_io.so.1.12.0.99             [.] pcl::PCDReader::readBodyBinary\r\n     1.14%  benchmark_filte  libc-2.31.so                       [.] malloc_consolidate\r\n     0.99%  benchmark_filte  libc-2.31.so                       [.] __memset_avx2_erms\r\n     0.93%  benchmark_filte  libstdc++.so.6.0.28                [.] operator new\r\n```\r\n\r\n### `max_load_factor(0.4)`\r\n`BM_Experimental_VoxelGrid_office       32.0 ms`\r\n\r\n```\r\n    40.15%  benchmark_filte  benchmark_filters_voxel_grid  [.] pcl::experimental::TransformFilter<pcl::experimental::VoxelStructT<pcl::PointXYZ>, pcl::PointXYZ>::applyFilter\r\n    13.01%  benchmark_filte  libc-2.31.so                  [.] _int_malloc\r\n     9.38%  benchmark_filte  libc-2.31.so                  [.] _int_free\r\n     6.43%  benchmark_filte  benchmark_filters_voxel_grid  [.] std::_Hashtable<unsigned long, std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> >, std::allocator<std::pair<unsigned long const, pcl::experimental::Voxel<pcl::PointXYZ> > >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<unsigned long const&, bool&>\r\n     5.31%  benchmark_filte  libc-2.31.so                  [.] __mcount_internal\r\n     4.85%  benchmark_filte  benchmark_filters_voxel_grid  [.] pcl::experimental::VoxelStructT<pcl::PointXYZ>::setUp\r\n     4.37%  benchmark_filte  libc-2.31.so                  [.] malloc\r\n     1.45%  benchmark_filte  libpcl_io.so.1.12.0.99        [.] pcl::lzfDecompress\r\n     1.44%  benchmark_filte  libc-2.31.so                  [.] _mcount\r\n     1.27%  benchmark_filte  libc-2.31.so                  [.] cfree@GLIBC_2.2.5\r\n     1.19%  benchmark_filte  libc-2.31.so                  [.] __memset_avx2_erms\r\n     1.11%  benchmark_filte  libpcl_io.so.1.12.0.99        [.] pcl::PCDReader::readBodyBinary\r\n     1.08%  benchmark_filte  libc-2.31.so                  [.] malloc_consolidate\r\n     1.02%  benchmark_filte  libstdc++.so.6.0.28           [.] operator new\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 19, 14, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 673605959, 'comment_body': 'Take load_factor into account?', 'comment_created': datetime.datetime(2021, 7, 21, 1, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 673607241, 'comment_body': 'The +1 might be meaningless if px * inverse_leaf_size is large enough, specially since uint64 has enough space to be truncated due to the significant digits of double', 'comment_created': datetime.datetime(2021, 7, 21, 2, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 674428702, 'comment_body': ""Done, it's set to 0.5 by default, I also added setter and getter in `VoxelFilter` for that.\r\n"", 'comment_created': datetime.datetime(2021, 7, 22, 0, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 677398810, 'comment_body': 'You load the files before checking for errors. Mistake?', 'comment_created': datetime.datetime(2021, 7, 27, 12, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 677399975, 'comment_body': 'Would Eigen help here (and elsewhere in this function)?', 'comment_created': datetime.datetime(2021, 7, 27, 12, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 677401243, 'comment_body': 'divide by inverse_leaf_size = multiply by leaf_size? But in 138-142, you multiply with inverse_leaf_size', 'comment_created': datetime.datetime(2021, 7, 27, 12, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 677404993, 'comment_body': 'Sorry, I missed the links for the benchmarks for these perfs. The results are quite nice though. Consistent decrease in malloc and free as load factor decreases.\r\n\r\nHash time also went down significantly for 0.4 (2.05 instead of ~2.29) and the actual filter is just (12.84 instead of 15.81 or 20.66 aka 33% improvement for 25% extra memory)', 'comment_created': datetime.datetime(2021, 7, 27, 12, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 677412200, 'comment_body': ""Let's use the C++ compiler way: (http://en.cppreference.com/w/cpp/language/range-for)\r\n\r\n```suggestion\r\n    {\r\n      using std::begin;  // invoke ADL, just like ranged-for loop\r\n      using std::end;\r\n      auto it = begin(grid_struct_);\r\n      auto end_it = end(grid_struct_);\r\n      for (; it != end_it; ++it) {\r\n        const optional<PointT> res = grid_struct_.filterGrid(it);\r\n        if (res)\r\n          output.push_back(res.value());\r\n      }\r\n    }\r\n```"", 'comment_created': datetime.datetime(2021, 7, 27, 12, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 677424453, 'comment_body': 'u mean should take in `leaf_size` instead of `inverse_leaf_size`?\r\n\r\n(idea come from https://stackoverflow.com/a/199363/5486298)', 'comment_created': datetime.datetime(2021, 7, 27, 12, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 677425156, 'comment_body': 'Yes they are my mistake, those two lines are deleted now', 'comment_created': datetime.datetime(2021, 7, 27, 12, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 677893562, 'comment_body': 'I think for consistency, you should revert the change for inverse_leaf -> leaf\r\n\r\nPrevious code flowed better: checkHash -> hashPoint with same parameters', 'comment_created': datetime.datetime(2021, 7, 28, 0, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 678542233, 'comment_body': ""Done, most of the calculations are implemented with eigen operations now, except for `dx` `dy` `dz` (eigen don't have unsigned int type)"", 'comment_created': datetime.datetime(2021, 7, 28, 18, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 678542313, 'comment_body': 'Reverted now', 'comment_created': datetime.datetime(2021, 7, 28, 18, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693426022, 'comment_body': 'unique_ptr instead?', 'comment_created': datetime.datetime(2021, 8, 22, 1, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693426125, 'comment_body': 'Usage of heap doesn\'t seem right to me. If this is ""solving"" the segfault, I think the issue might be elsewhere', 'comment_created': datetime.datetime(2021, 8, 22, 1, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693478292, 'comment_body': 'Would it be possible to use plantuml to generate the image and also add that code in the repo?', 'comment_created': datetime.datetime(2021, 8, 22, 10, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693478756, 'comment_body': ""Why don't we keep things simple and just focus on one class at a time instead of all at once?\n* TransformFilter is separate, so it doesn't factor in the tutorial for VoxelGrid at all\n* VoxelStruct without template is used to explain the basic needs for VoxelFilter\n\nThoughts?"", 'comment_created': datetime.datetime(2021, 8, 22, 10, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693505433, 'comment_body': 'It does solve the segfault but I have no clue why...', 'comment_created': datetime.datetime(2021, 8, 22, 13, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693561719, 'comment_body': 'segfault during move assign again, it throws error while resetting itself', 'comment_created': datetime.datetime(2021, 8, 22, 21, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693562337, 'comment_body': 'https://github.com/PointCloudLibrary/pcl/blob/85fc1707dd28f4104a7cf6ab0f8570d11ec1b4c4/doc/doxygen/doxyfile.in#L358-L360\r\n\r\nDo we have to set up the plugin?', 'comment_created': datetime.datetime(2021, 8, 22, 21, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693562704, 'comment_body': ""> the basic needs for VoxelFilter\r\n\r\nlike requirements of `GridStruct`?\r\n\r\n> VoxelStruct without template\r\n\r\nBut would it be better if we introduce also `Voxel` along side? (with template)\r\n\r\n> TransformFilter is separate, so it doesn't factor in the tutorial for VoxelGrid at all\r\n\r\nsounds good, I will write a separate tutorial for `TransformFilter` ."", 'comment_created': datetime.datetime(2021, 8, 22, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693922757, 'comment_body': ""Yes, like requirements of GridStruct, but in a very-basic manner.\r\n> But would it be better if we introduce also Voxel along side?\r\n\r\nYou can add it, but it's still a tutorial. Make it as approachable for a new comer as possible."", 'comment_created': datetime.datetime(2021, 8, 23, 12, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693923546, 'comment_body': ""I actually don't know. I was referring to still adding a png/jpg, but adding a source code as well. If we can use plantuml in doxygen, that'd be crazy.\r\n\r\n@larshg @SunBlack Any thoughts?"", 'comment_created': datetime.datetime(2021, 8, 23, 12, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693924185, 'comment_body': 'Definitely needs to be solved properly. Perhaps after GSoC. Please make a big note in the file. Current implementation is not copy-safe', 'comment_created': datetime.datetime(2021, 8, 23, 12, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693935914, 'comment_body': ""I rewrote it yesterday to try to just introduce the `Voxel`, `VoxelStruct` (and its requirement), and `VoxelFilter`, the three main pieces of `VoxelGrid`, while trying to minimize the stuff related to `TransformFilter`. \r\n\r\nCould you take a look to see if it's newcomer-friendly enough? (I don't have much experience in writing such tutorials)"", 'comment_created': datetime.datetime(2021, 8, 23, 12, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693961789, 'comment_body': '```suggestion\r\nThis document is intended to explain our new ``VoxelGrid`` design and help you implement your own grid based filters easily by reusing our building blocks.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693962766, 'comment_body': '```suggestion\r\n``VoxelGrid`` is composed using three important classes:\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693963235, 'comment_body': '```suggestion\r\n1. ``Voxel``: define the information stored in a single voxel and its operations\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693963442, 'comment_body': '```suggestion\r\n2. ``VoxelStruct``: define the filtering logic\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693964638, 'comment_body': 'Add something like: Your custom Voxel Grid Filter would look like: ``VoxelFilter<MyCustomLogic<MyVoxel>>``', 'comment_created': datetime.datetime(2021, 8, 23, 13, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693965602, 'comment_body': 'Reword this. Slightly comfusing. What are you trying to get across?', 'comment_created': datetime.datetime(2021, 8, 23, 13, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693966595, 'comment_body': 'Can be non-member functions', 'comment_created': datetime.datetime(2021, 8, 23, 13, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693967434, 'comment_body': '```suggestion\r\n  The following member functions are not necessary if you are not using ``pcl::VoxelStruct``.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693967868, 'comment_body': ""No template in example please. Let's keep it simple :)"", 'comment_created': datetime.datetime(2021, 8, 23, 13, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693968440, 'comment_body': 'Is this tip relevant for `MyVoxel`? There might be a better place for this top', 'comment_created': datetime.datetime(2021, 8, 23, 13, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693968832, 'comment_body': '```suggestion\r\nThis is a simple custom ``VoxelStruct`` with a fixed grid size and fixed condition for selecting eligible voxels.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693969750, 'comment_body': 'Would it be possible to instead add a CMakeLists.txt + source file and refer to the lines in that instead?', 'comment_created': datetime.datetime(2021, 8, 23, 13, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693970685, 'comment_body': ""What's binary removal?"", 'comment_created': datetime.datetime(2021, 8, 23, 13, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693971386, 'comment_body': 'Can we use VoxelFilter here instead of TransformFilter?', 'comment_created': datetime.datetime(2021, 8, 23, 13, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 698581523, 'comment_body': 'In case it works, I think using the source code of an image is better, as we can than modify it later if necessary.', 'comment_created': datetime.datetime(2021, 8, 30, 15, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SunBlack', 'type': 'User'}]","[{'commit_sha': '21328d4fda8aafcdf92a39ea4727741cab57ad06', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ffd7b53a83adc47508065ea212fea63045c4f83', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488decb9f5579501f6fac8e5ccf03cf7934429a7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64afcb6bb7bec0a563cc2be6f9a9b851c7623676', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99821c6b7547daac4df38c075a87fdf8e19408f9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '301416d40948bde5c7c015f859b3ae92e90de92a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3aad50e4a8ee727d9bf1625a9a405c172ed7e9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651b930c8fa1d6f5857a09a1907b92a06f55bfec', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc6aa3931d0725220cf036b37489be39306f63a7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e911680da3b047372c5f9595f1bf404a4b969eaf', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abce11e2ff0e7ecde67c8d57e6364da495864422', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c40a8e56be209ef68d16ace4394f06f7fa27e882', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2752dd6112ab77a73bb81579d52b73192e458909', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d0ed6f89ee830e40be673b652c5420810614440', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5307ded9b0baeb9faaedd3e5d29dda8bc7014ecd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cdc661335875b30410653ea75807853b6077919', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be47101b10b21f33b781efabec3cc26d1bcbea17', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b2cbbbd1a96e00dc62f807c15cfbc40fba11302', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6209385ac8b1071565f249fbb0abc9099f899632', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa365d7d49b7985ef0c0b5b09e0934ecd55071f', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68667e116964b967b092d833f8e2ab27ac07750c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171a7cb7facb9cbf7afd0c18cb240446c5cb18d3', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e0671d10be671a511b8708744fcd92a88525c37', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a04d077cdcad78982e1db4ff4f454ed2378e908', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6448037e8ed2b8d7d1319dc96e292cd7cfe9c2e2', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '374fb751f4740e68bc99ed148eff03e147d878e1', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd509f556849fde630e899792b12a9970d35703b7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2e37e58505d3fe81ea8f2d4aeb5e588c1df4aa', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e88a0d72041f5937a50ad3d3fdd7bb36cf6ee1', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a8359646033d58879974b4271e438ec1b213a7b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bdc05554614cc685f519b0a1bb7db9d598d36e', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e47a433216073a2454e15f614ca14566d1e126', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b3fa22ebb1799ee7f33227914b2ee129da52f7a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb5fd03585d89ae55207b72ab50018d5abd0a1c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712485380ae6bc84b50fd3559f8980c3437f7afd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc38538148b8123085625ae0ef352eafce0596b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec324bf82938ed6b5129bcee2bc0e927a97a579b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e1bb80923f6d4f60c5e3bc30473df1f98dd9355', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '440a9e4498aecabcb1b885d0fe3e3aabeb430c0b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760872e294ca6b6dfbc906b9b89f949bea416acb', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f81565fb52e6a5aac210794a01722e69fda4a77', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c50fb2507d815c3c7204307ba2278e9a1b421af', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0e7115edafd7d88f3e2589ce4ab042f8429cbcb', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f107d6a14eac24a3c0a8416a8c899f39d39a758b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b382fb230c19ea4c6b81641c6f9360022df1e003', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7e50b08c804f4c3733fc098c2ab23e93e23dc3b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d7c6c27a304bbcc871fdf2394e70476f828ad04', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5d59ae72d44f799b2061f6634285ee7708e10f', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e7d4c707971962df35fbd63cc8bbb3768cc2ae', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b176bf261f3e0e5c03ea8dc05e18cd9b2ef58694', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc25bf6fc41b0c1ef5c546cad30b99db0be3685', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e495779c59fc2513ad09f9c685f78c3f624e76', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49141d85997695266ed332d4e493901675280b76', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbfca85797f88baaccb75629120410776222d55e', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d3d57fbf54eb45d5fc303e79ac57b5b0ed71785', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd998228ce6667c0ec5bf198e27b34511a157ab01', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b259414bae8eef9318f2ae6ef2774fcb2b426cc', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f72ef9b663b537aaf348c6d803f762c406f9ca', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f49a8bcd51707182c8f0df9ec53ac90d474098a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b68d86c2a4a2eb31439be8bc408e29dfd560f8', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4471f38f8f50dae31b817f76ba9713df4a81c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c485b1a6f864735f507666e6dc264bd05898af', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62658593f11fe58cb9e3f95ad5cb5907b3c57706', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4859f0431b02eb848fe49163ec5067a97c39ab3', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9523f054ed69970bd56122e80c56d89712b3666c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18c24ac4b4f3493efba8ac4751e0e97ced80df9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce3e6a9433f01d70b75f56124c84291df035c21', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d258856e8ec862dfb531c8bafa259474da4f16', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f528d6fe5e0b4d4472bcf679b80dde0eb5a92d9c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba077dc0831735bfe01865b6664cc53cc9ca612', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb6d5338c381710f21035ef7ad1a322c97f31ce', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a477365064b5030282b1f47e2d1c28f5e0cc2cd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd07c240c091a0f83bf86e3980417de5e0e3b57ea', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09325e3760b53ae00c02af06051a8886fa11e66a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04b8559e6ec465ab9337ea7752c7d232ea9f65e9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '755a61cbbddd7d82ef1f8e74ede4c8f2dd477b84', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '220ea44b934cba8bf39b206cd1c181ea26be4662', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a47bc6eb12b201358ae174717e075470c1c8936', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe2200c1ac3ac18d80815a13a304aa73b1386ac', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}]",,22342030,,User,,6,,7,4
700612261,Refactor voxel grid label,"Based on https://github.com/PointCloudLibrary/pcl/pull/4829

### Description
Refactor `VoxelGridLabel` such that it inherits from `VoxelGrid`

### Goal
Reduce the boilerplate code in other grid based filters",False,4870,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4870,https://github.com/PointCloudLibrary/pcl/pull/4870,open,2158,42,15,89,2,0,0,0,[],2021-07-30 23:26:44+00:00,,0.0,,[],"[{'commit_sha': '21328d4fda8aafcdf92a39ea4727741cab57ad06', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ffd7b53a83adc47508065ea212fea63045c4f83', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488decb9f5579501f6fac8e5ccf03cf7934429a7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64afcb6bb7bec0a563cc2be6f9a9b851c7623676', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99821c6b7547daac4df38c075a87fdf8e19408f9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '301416d40948bde5c7c015f859b3ae92e90de92a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3aad50e4a8ee727d9bf1625a9a405c172ed7e9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651b930c8fa1d6f5857a09a1907b92a06f55bfec', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc6aa3931d0725220cf036b37489be39306f63a7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e911680da3b047372c5f9595f1bf404a4b969eaf', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abce11e2ff0e7ecde67c8d57e6364da495864422', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c40a8e56be209ef68d16ace4394f06f7fa27e882', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2752dd6112ab77a73bb81579d52b73192e458909', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d0ed6f89ee830e40be673b652c5420810614440', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5307ded9b0baeb9faaedd3e5d29dda8bc7014ecd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cdc661335875b30410653ea75807853b6077919', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be47101b10b21f33b781efabec3cc26d1bcbea17', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b2cbbbd1a96e00dc62f807c15cfbc40fba11302', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6209385ac8b1071565f249fbb0abc9099f899632', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa365d7d49b7985ef0c0b5b09e0934ecd55071f', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68667e116964b967b092d833f8e2ab27ac07750c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171a7cb7facb9cbf7afd0c18cb240446c5cb18d3', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e0671d10be671a511b8708744fcd92a88525c37', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a04d077cdcad78982e1db4ff4f454ed2378e908', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6448037e8ed2b8d7d1319dc96e292cd7cfe9c2e2', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '374fb751f4740e68bc99ed148eff03e147d878e1', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd509f556849fde630e899792b12a9970d35703b7', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2e37e58505d3fe81ea8f2d4aeb5e588c1df4aa', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e88a0d72041f5937a50ad3d3fdd7bb36cf6ee1', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a8359646033d58879974b4271e438ec1b213a7b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bdc05554614cc685f519b0a1bb7db9d598d36e', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e47a433216073a2454e15f614ca14566d1e126', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b3fa22ebb1799ee7f33227914b2ee129da52f7a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb5fd03585d89ae55207b72ab50018d5abd0a1c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712485380ae6bc84b50fd3559f8980c3437f7afd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc38538148b8123085625ae0ef352eafce0596b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec324bf82938ed6b5129bcee2bc0e927a97a579b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e1bb80923f6d4f60c5e3bc30473df1f98dd9355', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '440a9e4498aecabcb1b885d0fe3e3aabeb430c0b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760872e294ca6b6dfbc906b9b89f949bea416acb', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f81565fb52e6a5aac210794a01722e69fda4a77', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c50fb2507d815c3c7204307ba2278e9a1b421af', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0e7115edafd7d88f3e2589ce4ab042f8429cbcb', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f107d6a14eac24a3c0a8416a8c899f39d39a758b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b382fb230c19ea4c6b81641c6f9360022df1e003', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7e50b08c804f4c3733fc098c2ab23e93e23dc3b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d7c6c27a304bbcc871fdf2394e70476f828ad04', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5d59ae72d44f799b2061f6634285ee7708e10f', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e7d4c707971962df35fbd63cc8bbb3768cc2ae', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b176bf261f3e0e5c03ea8dc05e18cd9b2ef58694', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc25bf6fc41b0c1ef5c546cad30b99db0be3685', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e495779c59fc2513ad09f9c685f78c3f624e76', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49141d85997695266ed332d4e493901675280b76', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbfca85797f88baaccb75629120410776222d55e', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d3d57fbf54eb45d5fc303e79ac57b5b0ed71785', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd998228ce6667c0ec5bf198e27b34511a157ab01', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b259414bae8eef9318f2ae6ef2774fcb2b426cc', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f72ef9b663b537aaf348c6d803f762c406f9ca', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f49a8bcd51707182c8f0df9ec53ac90d474098a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b68d86c2a4a2eb31439be8bc408e29dfd560f8', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4471f38f8f50dae31b817f76ba9713df4a81c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c485b1a6f864735f507666e6dc264bd05898af', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62658593f11fe58cb9e3f95ad5cb5907b3c57706', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4859f0431b02eb848fe49163ec5067a97c39ab3', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9523f054ed69970bd56122e80c56d89712b3666c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18c24ac4b4f3493efba8ac4751e0e97ced80df9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce3e6a9433f01d70b75f56124c84291df035c21', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d258856e8ec862dfb531c8bafa259474da4f16', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f528d6fe5e0b4d4472bcf679b80dde0eb5a92d9c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba077dc0831735bfe01865b6664cc53cc9ca612', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb6d5338c381710f21035ef7ad1a322c97f31ce', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a477365064b5030282b1f47e2d1c28f5e0cc2cd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd07c240c091a0f83bf86e3980417de5e0e3b57ea', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09325e3760b53ae00c02af06051a8886fa11e66a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04b8559e6ec465ab9337ea7752c7d232ea9f65e9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '755a61cbbddd7d82ef1f8e74ede4c8f2dd477b84', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '220ea44b934cba8bf39b206cd1c181ea26be4662', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a47bc6eb12b201358ae174717e075470c1c8936', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe2200c1ac3ac18d80815a13a304aa73b1386ac', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3bd8a6b9a087f0f31baaa297be2f2ba3f7e137', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ddff3c78e55a6e381bdb57de348045d6f52594', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65fbe37907fed3c82f3363b3c26df808bb8ab2f', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba67faa8aa8f8f00ad975cfce54c2c01ba1d787', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d554ef5847dc350e25891588e8a92818cda16cd', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c5e4614b986d8759168685e7aa808d02da2ad8', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a2436f53e97ecd80bd1767db000e5cb6ab99b5', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f23032677a1b19c580dbbdd73e65adf1530e27b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b917ad39f2ccca2d31c6eb4fa1ed0c59e49c586', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '195e6f6442ea10b1caa8658553728d3b4690b7e4', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}]",,22342030,,User,,6,,7,4
709597277,Refactor CropBox and PassThrough with FunctorFilter,"### Description
- Explore approaches to integrate `FunctorFilter` to the existing filters
- Improve `FunctorFilter` API
- Refactor `CropBox` and `PassThrough` with `FunctorFilter`
- Reduce boilerplate code
- Implement benchmark for comparing new and old implementations
- Improve runtime performance 

### Related
- https://github.com/PointCloudLibrary/pcl/issues/4837
- https://github.com/PointCloudLibrary/pcl/issues/4247

### TODO
- Apply the finalized code design",False,4892,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4892,https://github.com/PointCloudLibrary/pcl/pull/4892,open,1172,15,10,15,6,24,1,0,[{'name': 'module: filters'}],2021-08-11 20:39:54+00:00,,0.0,,"[{'comment_id': 688062675, 'comment_body': 'Why do you not `return false` here?', 'comment_created': datetime.datetime(2021, 8, 12, 20, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 688108907, 'comment_body': 'returning `negative_` can make sure `nan` points are always removed in `FunctorFilter`\r\n(L99 will be always `false` with any value of `negative_`)\r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/fad821ef31eb92719c1005812666136f9664d365/filters/include/pcl/filters/experimental/functor_filter.h#L97-L106\r\n\r\nin the original `PassThrough` filtering `nan` points is not affected by `negative_`\r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/fad821ef31eb92719c1005812666136f9664d365/filters/include/pcl/filters/impl/passthrough.hpp#L55-L71', 'comment_created': datetime.datetime(2021, 8, 12, 21, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 688849673, 'comment_body': 'Can we add the entire reasoning behind return negative here as a comment on the actual behavior of this function object?', 'comment_created': datetime.datetime(2021, 8, 14, 2, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 688850189, 'comment_body': 'Would this work?\r\n```suggestion\r\n  pcl::IndicesPtr idx(new pcl::Indices({1,2,3,5,6,7,8}));\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 2, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 689174111, 'comment_body': 'This copy is quite a tragedy, else it looks to be shorter than the previous version', 'comment_created': datetime.datetime(2021, 8, 16, 0, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 689634367, 'comment_body': ""as `removed_indices_` is protected, we don't have a choice except adding a new API to return non const ptr of it "", 'comment_created': datetime.datetime(2021, 8, 16, 15, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 689656802, 'comment_body': 'Done, should I also do it to the original test?', 'comment_created': datetime.datetime(2021, 8, 16, 15, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 689934412, 'comment_body': ""Why can't we do `remove_indices_ = filter.getRemovedIndices();`?"", 'comment_created': datetime.datetime(2021, 8, 16, 23, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 690745457, 'comment_body': 'Because `getRemovedIndices()` returns `IndicesConstPtr` only (and the other overload return with copying)', 'comment_created': datetime.datetime(2021, 8, 17, 21, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 690786282, 'comment_body': 'Done, I added a few comments alongside the code', 'comment_created': datetime.datetime(2021, 8, 17, 23, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693179857, 'comment_body': ""An option I would see is to add a function `applyFilter(Indices& indices, Indices& removed_indices)` to the functor filter. Indices would be placed in the given `removed_indices` instead of the member `removed_indices_`. Then that function could be called like `filter.applyFilter(indices, *removed_indices)`. Just an idea, haven't thought it through completely."", 'comment_created': datetime.datetime(2021, 8, 20, 19, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 693293177, 'comment_body': 'Or we could make a change all the way up in `Filter`. 3 possibilities for better integration:\r\n* add ctor for removed_indices\r\n* add additional output in `filter`\r\n* add additional function with output arg as `IndicesPtr`', 'comment_created': datetime.datetime(2021, 8, 21, 2, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693293229, 'comment_body': 'Could this be static?', 'comment_created': datetime.datetime(2021, 8, 21, 3, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693418971, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 22, 0, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693427676, 'comment_body': 'Do you think a check for pt_transform being identity would help in increasing the speed a tiny bit?', 'comment_created': datetime.datetime(2021, 8, 22, 2, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693427695, 'comment_body': 'Which one seems the best way forward?', 'comment_created': datetime.datetime(2021, 8, 22, 2, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693427940, 'comment_body': ""Needs a bit of work in the language. What about:\r\n```\r\nalways filter out points with NaN in XYZ fields\r\nregardless of the user's choice of what points should be filtered (normal/inverted)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 22, 2, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 693547120, 'comment_body': 'Possibly, but I think that would be rare in real-world scenarios. More ideas: 1. make pt_transform a 3x4 matrix because the last element of pt is not used anyway. 2. if pt_transform is translation only or rotation only, compute only what is necessary instead of full matrix-vector-multiplication (these ideas can be explored later though)', 'comment_created': datetime.datetime(2021, 8, 22, 19, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 693578533, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 23, 0, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 693625874, 'comment_body': '> Possibly, but I think that would be rare in real-world scenarios.\r\n\r\nI usually transform my point cloud first so multiple downstream logic can run independently on it. So all crop-box/filter operations happen with no transform. Having no TF might not be so rare', 'comment_created': datetime.datetime(2021, 8, 23, 3, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 702452763, 'comment_body': ""I couldn't come up with any use case after applying to changes to `Filter`, so I would prefer to limit this to functor filter only.\r\n\r\nMaybe either:\r\n- @mvieth suggestion\r\n- add additional function with output arg as `IndicesPtr` in `FunctorFilter`"", 'comment_created': datetime.datetime(2021, 9, 5, 17, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 702453707, 'comment_body': '> Having no TF might not be so rare\r\n\r\nI agree this is not so rare. From my experience working with lidar, I use `CropBox` to just remove the points far from the origin without any TFs, just to reduce the runtime for downstream tasks.\r\n\r\nI added a check for identity transformation for now', 'comment_created': datetime.datetime(2021, 9, 5, 17, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 702472171, 'comment_body': ""I found it can't easily be static, because lambda is passed only by ctor and it avoids later initialization by ctor. It makes transformation can't be updated, as assigning a new FunctorFilter is not allowed (this is the only way I know to update a static variable)"", 'comment_created': datetime.datetime(2021, 9, 5, 20, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}, {'comment_id': 703037443, 'comment_body': '> 1. make pt_transform a 3x4 matrix because the last element of pt is not used anyway.\r\n\r\nI just benchmark it, and surprisingly found 4x3` is a bit slower. I guess it is due to the following conditions check can be run with SSE\r\n\r\n```cpp\r\nreturn (pt.array() >= min_pt_.array()).template head<3>().all() &&\r\n       (pt.array() <= max_pt_.array()).template head<3>().all();\r\n```\r\n\r\n`pt` will be `Vector3f` with 3x4 matrix which **may** not trigger SSE\r\n\r\n## Benchmark\r\n\r\n### 3x4\r\n\r\n```\r\n---------------------------------------------------------------\r\nBenchmark                     Time             CPU   Iterations\r\n---------------------------------------------------------------\r\n320p_CropBox               1.50 ms         1.50 ms          461\r\n320p_FunctorCropBox        1.35 ms         1.35 ms          580\r\n480p_CropBox               3.03 ms         3.03 ms          230\r\n480p_FunctorCropBox        2.72 ms         2.72 ms          253\r\n720p_CropBox               7.93 ms         7.90 ms           67\r\n720p_FunctorCropBox        8.25 ms         8.24 ms          118\r\n1080p_CropBox              20.8 ms         20.8 ms           49\r\n1080p_FunctorCropBox       18.5 ms         18.5 ms           37\r\n1440p_CropBox              38.6 ms         38.5 ms           27\r\n1440p_FunctorCropBox       33.2 ms         33.2 ms           26\r\n```\r\n\r\n### 4x4\r\n\r\n```\r\n---------------------------------------------------------------\r\nBenchmark                     Time             CPU   Iterations\r\n---------------------------------------------------------------\r\n320p_CropBox               1.57 ms         1.57 ms          445\r\n320p_FunctorCropBox        1.28 ms         1.28 ms          674\r\n480p_CropBox               3.03 ms         3.03 ms          229\r\n480p_FunctorCropBox        2.46 ms         2.46 ms          273\r\n720p_CropBox               7.88 ms         7.88 ms           67\r\n720p_FunctorCropBox        7.55 ms         7.54 ms          134\r\n1080p_CropBox              21.1 ms         21.1 ms           48\r\n1080p_FunctorCropBox       17.0 ms         17.0 ms           40\r\n1440p_CropBox              38.3 ms         38.2 ms           27\r\n1440p_FunctorCropBox       30.6 ms         30.6 ms           28\r\n```', 'comment_created': datetime.datetime(2021, 9, 6, 18, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}]","[{'commit_sha': 'f0eca9037f1c9f01c872409614e77d0038f888e8', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a750e08c4edfda6e9fc88bee3a18d79f2bfea0b9', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8800b44f4d9cd9c7d635fa6926f6eda1577c3202', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f30572a0ab5bb4e7dda1c55447d683ae75aeb18d', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87e13424dcf0b537af41d01fa0e9e861aff6c18', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a8276055fd00390d5913d62e24bc713a3f9b33c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e34a6322856e2f0a55ddad59d1456d26c1ce97f', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfbf45e1538e7dcb835e2b35d1816d5e1830ec2', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3efee994260de5fcbcd1891325752b4843a92b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '994a389be2eaec6dba1e2c3e0985b1a969e19110', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3af4b148623e21c15087cdd969675ae45f6e34b0', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f1b5d73484bef13caffccfa3fab294e3161874c', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06e169321f67597c6d4e3e377cbbc533326340a', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e3502d71e072050a8e6bd0cfd99c49927dca894', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1e225dab34bed7a56a3b8ae47f977137de6d6b', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}]",,22342030,,User,,6,,7,4
696504516,Add deprecation for filter getters with bool reference,"Discussed in https://github.com/PointCloudLibrary/pcl/pull/4828#discussion_r663296844

Deprecation is added in `pcl_cuda::filter` and `pcl::VoxelGrid`
",True,4861,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4861,https://github.com/PointCloudLibrary/pcl/pull/4861,closed,8,0,2,1,5,2,3,0,"[{'name': 'module: cuda'}, {'name': 'module: filters'}, {'name': 'changelog: deprecation'}]",2021-07-25 13:45:56+00:00,2021-07-27 23:59:50+00:00,209634.0,"2 days, 10:13:54","[{'comment_id': 676187969, 'comment_body': 'It would be great if you could add documentation to this function (just copy from above and switch param to return)', 'comment_created': datetime.datetime(2021, 7, 25, 18, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mvieth', 'type': 'User'}, {'comment_id': 676198780, 'comment_body': 'Done.\r\n\r\nFor the documentation, I copied it from the other `getFilterLimitsNegative` for consistence', 'comment_created': datetime.datetime(2021, 7, 25, 20, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tin1254', 'type': 'User'}]","[{'commit_sha': 'd6444d6f1ebb8a8475d8369070c9ef2548a39dfc', 'committer_username': 'tin1254', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2016, 9, 21, 8, 57, 29, tzinfo=datetime.timezone.utc)}]",,22342030,,User,,6,,7,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8162615,pcl,PointCloudLibrary/pcl,C++,4600,9787,426,671,14449,571,1,144,"[{'id': 752707359, 'number': 4973, 'closed': datetime.datetime(2021, 12, 22, 10, 9, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 6, 23, 43, 34, tzinfo=datetime.timezone.utc), 'time_taken': 6603958.0, 'time_delta': '76 days, 10:25:58', 'additions': 27, 'deletions': 10, 'state': 'closed'}, {'id': 709597277, 'number': 4892, 'closed': None, 'created': datetime.datetime(2021, 8, 11, 20, 39, 54, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1172, 'deletions': 15, 'state': 'open'}, {'id': 700612261, 'number': 4870, 'closed': None, 'created': datetime.datetime(2021, 7, 30, 23, 26, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2158, 'deletions': 42, 'state': 'open'}, {'id': 696504516, 'number': 4861, 'closed': datetime.datetime(2021, 7, 27, 23, 59, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 13, 45, 56, tzinfo=datetime.timezone.utc), 'time_taken': 209634.0, 'time_delta': '2 days, 10:13:54', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 682258425, 'number': 4829, 'closed': None, 'created': datetime.datetime(2021, 7, 2, 0, 56, 2, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1987, 'deletions': 42, 'state': 'open'}, {'id': 682040922, 'number': 4828, 'closed': None, 'created': datetime.datetime(2021, 7, 1, 17, 24, 25, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 734, 'deletions': 0, 'state': 'open'}, {'id': 678149220, 'number': 4813, 'closed': datetime.datetime(2021, 7, 1, 17, 25, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 20, 0, 27, tzinfo=datetime.timezone.utc), 'time_taken': 509089.0, 'time_delta': '5 days, 21:24:49', 'additions': 839, 'deletions': 0, 'state': 'closed'}, {'id': 652248720, 'number': 4774, 'closed': datetime.datetime(2021, 6, 1, 12, 16, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 12, 4, 1, tzinfo=datetime.timezone.utc), 'time_taken': 605538.0, 'time_delta': '7 days, 0:12:18', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 650897827, 'number': 4771, 'closed': datetime.datetime(2021, 5, 25, 12, 46, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 1, 6, 55, tzinfo=datetime.timezone.utc), 'time_taken': 128395.0, 'time_delta': '1 day, 11:39:55', 'additions': 35, 'deletions': 143, 'state': 'closed'}]"
