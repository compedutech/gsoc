pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1377863081,Sphinx Build,"For issue #9, Sphinx Build Setup 
",True,8,https://api.github.com/repos/PyLops/pylops-mpi/pulls/8,https://github.com/PyLops/pylops-mpi/pull/8,closed,541,1,20,2,0,0,0,0,[],2023-06-04 17:45:17+00:00,2023-06-05 07:59:23+00:00,51246.0,14:14:06,[],"[{'commit_sha': 'b6a097e0693952d3b94c080fc08fe9761ae4b6f6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd36a0fb40495459d5c7267129bb8bd0def40e8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1378180421,Add flake.yml,-  Added `flake8`to workflows.,True,10,https://api.github.com/repos/PyLops/pylops-mpi/pulls/10,https://github.com/PyLops/pylops-mpi/pull/10,closed,37,13,3,2,0,0,0,0,[],2023-06-05 03:42:55+00:00,2023-06-05 03:53:25+00:00,630.0,0:10:30,[],"[{'commit_sha': '89d324368138b3c96990ef6b4221f8ee01d46ba0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3656c5f2fa378fd8e6e9bcde7dbe61245ce334e1', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1382197045,Create build.yml,"Fixes #3 
 - CI for MPI",True,12,https://api.github.com/repos/PyLops/pylops-mpi/pulls/12,https://github.com/PyLops/pylops-mpi/pull/12,closed,54,0,1,5,0,0,0,0,[],2023-06-07 08:39:15+00:00,2023-06-07 14:21:48+00:00,20553.0,5:42:33,[],"[{'commit_sha': 'd17c6371bd088aafebd3911536b34b3a5d5a66c7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2c23b8241d2f2fae6e0fafd0bb8e007508f160', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4374c6b9f4709f7b7d655044a98e9c143949dcfe', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38edfc26e6b019747fd325766675755abea0f6e3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70afde01749c11ef58e9530772b337ab71e12a1b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1384289902,Deploy Sphinx-docs,"For #14 
- Added `deploy-docs.yml` to deploy sphinx-docs on github pages",True,13,https://api.github.com/repos/PyLops/pylops-mpi/pulls/13,https://github.com/PyLops/pylops-mpi/pull/13,closed,39,0,1,2,2,0,0,0,[],2023-06-08 11:32:12+00:00,2023-06-10 11:21:00+00:00,172128.0,"1 day, 23:48:48",[],"[{'commit_sha': '66de9f16dc7967da4605f4966daa78e745c1e9ed', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a156ced7e451baa327b3289091866224145cefd', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1370584699,DistributedArray with functions," - `DistributedArray` class
 - Offers global array to be replicated at all ranks, global array divided into parts.
 - `to_dist` method which converts the global array to a DistributedArray
 - Added add, subtract, and multiplication in a distributed fashion.
 - Tests and examples",True,2,https://api.github.com/repos/PyLops/pylops-mpi/pulls/2,https://github.com/PyLops/pylops-mpi/pull/2,closed,482,0,10,15,2,12,0,0,[],2023-05-30 14:31:41+00:00,2023-05-31 10:36:32+00:00,72291.0,20:04:51,"[{'comment_id': 1210652737, 'comment_body': 'Change this into `Development Status :: 1 - Planning` for now', 'comment_created': datetime.datetime(2023, 5, 30, 18, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1210660374, 'comment_body': 'Please add docstring', 'comment_created': datetime.datetime(2023, 5, 30, 18, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1210726077, 'comment_body': ""Not sure this is needed. I currently get the following warning\r\n```\r\nVisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\r\n```\r\n\r\nand I also see that in `asarray` you use `np.concatenate` on the output of `get_local_arrays`... maybe get local arrays could already use that?"", 'comment_created': datetime.datetime(2023, 5, 30, 19, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1210802910, 'comment_body': 'A stupid question: Why `tests` need `__init__.py`?', 'comment_created': datetime.datetime(2023, 5, 30, 20, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hongyx11', 'type': 'User'}, {'comment_id': 1210824045, 'comment_body': '```\r\n  /home/hongy0a/pylops-mpi/tests/test_distributedarray.py:27: PytestUnknownMarkWarning: Unknown pytest.mark.mpi - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\r\n    @pytest.mark.mpi(min_size=2) \r\n```\r\ncurrently I got this warning when launching this test file.', 'comment_created': datetime.datetime(2023, 5, 30, 21, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hongyx11', 'type': 'User'}, {'comment_id': 1211093450, 'comment_body': 'Done...', 'comment_created': datetime.datetime(2023, 5, 31, 5, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1211093575, 'comment_body': 'Added the docstrings', 'comment_created': datetime.datetime(2023, 5, 31, 5, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1211093954, 'comment_body': 'Merged the code of both into `asarray`, I thinks its a better name and will be used to call the global view of the entire array.', 'comment_created': datetime.datetime(2023, 5, 31, 5, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1211094529, 'comment_body': 'True, no need for `__init__.py`, deleted the file :slightly_smiling_face: ', 'comment_created': datetime.datetime(2023, 5, 31, 5, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1211096729, 'comment_body': 'I think you do not have `pytest-mpi` installed\r\njust do a `pip install pytest-mpi` or just install all the requirements using `pip install -r requirements-dev.txt`\r\nThen either use `make tests` or use `mpiexec -n 10 pytest test_distributedarray.py --with-mpi`\r\nThen it will work accordingly...', 'comment_created': datetime.datetime(2023, 5, 31, 5, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1211143083, 'comment_body': 'Good idea :)', 'comment_created': datetime.datetime(2023, 5, 31, 6, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1211143694, 'comment_body': 'I had done the same mistake initially (using an old env). I confirm this works :)', 'comment_created': datetime.datetime(2023, 5, 31, 6, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}]","[{'commit_sha': '32fc28ab8b33ed85ad18e2b1b6bb8713d82d7da7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bfcbe63b1c76e8c2c29bedb350eff0f4355af55', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79aef5d1a2f8bea8eb81c5dbec05f1f2d706e7f3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d210792da9bb0152d0e7e803e5b949a5196eb6f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84fad9424d1cbf252fb39c52b1b33a21f1ca6b75', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c2a600ea5ee8dd65f4ebd7499d6f23d8662f32', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a775d12656d409420cbc9a0e693d08e8003548b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2af3f48611a0a71aa17d0d0eddda3e1a2bd1000', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e197d7d28e5ded1f80fb5c6681d5407d76f4ad', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8bf507a75def9e1b50adef70651a19cfe2dbed8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f87b236d447a9be54f325620cd5a73f533ec96', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c8aea807b10dad9af78a051e0174f9c091c4556', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74993e189056fa3e3e1c6b7567a4d2cf2662295a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85aab7e90e53dfd07ad924c946a6501a7ed0aee0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4616afaa5a8ea46a50b8af693d7d243bf300cd16', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1374311806,Added Partition Enum ,"For #5 
 - Enum for Broadcast and Scatter.
 - Updated the tests and example accordingly
 - Also added `DistributedArray` to `pylops_mpi/__init__.py`",True,6,https://api.github.com/repos/PyLops/pylops-mpi/pulls/6,https://github.com/PyLops/pylops-mpi/pull/6,closed,48,25,4,4,0,0,0,0,[],2023-06-01 15:26:52+00:00,2023-06-02 17:55:25+00:00,95313.0,"1 day, 2:28:33",[],"[{'commit_sha': 'b0837c7933c4b3c994a501dcaa82b44d382e8fff', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d551ef64bea5d8e3af18e248c3bb64db942e88', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63f52494a09354a086014635f3cc248b83fe8610', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a17ac48838f8e5cad2e20409c6745c5fcbae68', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1376202854,DistributedArray along an axis and plotting functions for better examples,"Enhancement for Distribution of array along an axis.
- [x] Code in DistributedArray class
- [x] Updated the Tests
- [x] Added Plotting for DistributedArray (aligns with pylops)
- [x]  Update the Examples",True,7,https://api.github.com/repos/PyLops/pylops-mpi/pulls/7,https://github.com/PyLops/pylops-mpi/pull/7,closed,225,70,8,22,1,0,0,0,[],2023-06-02 19:05:48+00:00,2023-06-05 15:08:25+00:00,244957.0,"2 days, 20:02:37",[],"[{'commit_sha': '103aa3b0ca7887a57143d000b0481484c317a1e0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce2e08f27bffecd640e005411d100d3b9f30cce4', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca1c7b3c7b6229e9d80d9656a26764a2df0e7511', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4a5544bb71622efad6d52c2a896b5481cb5645a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ac569677a323611523f0f5943a23716a0a6b47f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727ae849695b37a69cd0dc7b9c4fded0f513f6c4', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f1c01774b9574c2e2f229664f4651c22f8709a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b662628497e2aa546a4a9622a05977341bb4efc', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06758ce53179f7f96bce80c403fc2a5d95240088', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1205f8fa4a3a9ef339bfc1a924e4cc986237027', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cefafd9f51abe212370911d40dfccfab17c13ace', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b0359c19941889a5db62f892c233d96e935a0e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4153f424b10465969353c105507db83cf09794f9', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0876e68cdbd08274ea73bd6ef4ae5d8271fc985', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08d8b992fcaaa2c0bebaca4b5fb88d79b819d3e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3db95dd3436bd8cda01a5088e1a26f2efac28b6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e044a092570b74f344dc9a8a66a01cc67fb948', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acc11df34e0acbc9b609a6354709558b8cbf5e19', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01c953dbb6d995d04e0d5ad3513b7bb6894afce5', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2a3e4b76248798a497f596feef20ec84ba2716', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa003f91e0e24bd90507db78fc0b92c56ad8173', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e765a39127eb69db8e5e104372c390c5d00ae914', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1380246444,Add Dot Product and Norm using MPI,"For #21 
- Added `_check_partition_shape` to check for same partition and local array shape.
- Added `_allreduce` to perform MPI reduction operation.
- Added `ndim` as a parameter.
- Added `_compute_vector_norm` to perform norm using local arrays along axis.
- Added Dot Product.
- Added Norm Method.
- Renamed par tests and add new tests for Dot and norm method to make it more clean.",True,11,https://api.github.com/repos/PyLops/pylops-mpi/pulls/11,https://github.com/PyLops/pylops-mpi/pull/11,closed,135,37,2,13,5,6,0,0,[],2023-06-06 06:27:48+00:00,2023-06-19 03:25:11+00:00,1112243.0,"12 days, 20:57:23","[{'comment_id': 1232922612, 'comment_body': 'Is there any reason that you choose` assert_arrray_almost_equal` for verification instead of `assert_allclose`?\r\nAnd why you choose `decimal=3`?\r\nI suggest to use latter, and set `rtol=1e-14` for `np.float64` data type. \r\nPlease have a look at https://netlib.org/lapack/lug/node75.html', 'comment_created': datetime.datetime(2023, 6, 17, 1, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hongyx11', 'type': 'User'}, {'comment_id': 1232922954, 'comment_body': 'same here.', 'comment_created': datetime.datetime(2023, 6, 17, 1, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hongyx11', 'type': 'User'}, {'comment_id': 1232936807, 'comment_body': 'True changed them to `assert_allclose` as it would be better as the dtype of the output will always be a `float` for both complex and float inputs.', 'comment_created': datetime.datetime(2023, 6, 17, 2, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1232936890, 'comment_body': 'Done the same here..\r\n', 'comment_created': datetime.datetime(2023, 6, 17, 2, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1232983642, 'comment_body': 'Could you please change this also? Thanks.', 'comment_created': datetime.datetime(2023, 6, 17, 7, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hongyx11', 'type': 'User'}, {'comment_id': 1232986645, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2023, 6, 17, 7, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': '72deb2d4e37858deab7103ffc372d6b1eea4039b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e7ea2bae86d4505ba331d8f04f090f8eb22cf6a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677c43031a99cba57c06f5b6cd1f93721321e592', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd284622b41ce2945bc0759a4d4c15e471039b2fa', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bc709fe3b8beb17106829091c0a4028f5c3145', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b29e59344810411877a0b84d030e3e80eae4668', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4447848a14f931165a3f20212952f1bdf0cbe5de', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e810c52b454e759dfaa3b99ff81825b33a033513', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7805ff9c4853a3af084bec19b2b8685a6a97d74b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83a00922d09eb4a2bb2d7b94da416fb4e16dedb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83d50bb5fce8a0a59af82228b22b23baa5cc3b0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5320819f42ea851df68cc6b2179a379a2d19d2d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '474508739dcc86fc9bd20815998c992bc376d593', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1447155549,Added add_ghost_cells to DistributedArray,- Added method `add_ghost_cells` which adds ghost cells to the local arrays either from the previous or next process.,True,49,https://api.github.com/repos/PyLops/pylops-mpi/pulls/49,https://github.com/PyLops/pylops-mpi/pull/49,closed,49,0,1,4,6,12,0,0,[],2023-07-24 18:12:02+00:00,2023-07-27 13:36:27+00:00,242665.0,"2 days, 19:24:25","[{'comment_id': 1273169565, 'comment_body': 'I would also add `dest` and `tag` here to make it more explicit and easy to read... same in cells_back block of code', 'comment_created': datetime.datetime(2023, 7, 25, 8, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273173541, 'comment_body': '`self[..., -cells_front:]`, does this implicitly assume that the ghosting is applied on the last dimension of the DistributedArray object?\r\n\r\nThe reason I ask is because `np.insert(ghosted_array, 0,...` seems to suggest that the ghost is pre-pended on a flattened version of the array (see axis=None in np.insert doc)', 'comment_created': datetime.datetime(2023, 7, 25, 8, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273177135, 'comment_body': 'This is just a view... what happens when you do `np.insert`, `self.local_array` remains unchanged?', 'comment_created': datetime.datetime(2023, 7, 25, 8, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273182116, 'comment_body': 'I suspect, as we agreed, we should start from just the 1d case? \r\n\r\nIf so, I think we should specify this clearly in the doc and change here `Number of samples for each dimension.` into `Number of samples for model and data vector`', 'comment_created': datetime.datetime(2023, 7, 25, 8, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273182388, 'comment_body': 'Same here, just `int` for now', 'comment_created': datetime.datetime(2023, 7, 25, 8, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273182829, 'comment_body': 'Very good :D', 'comment_created': datetime.datetime(2023, 7, 25, 8, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273184451, 'comment_body': 'I would use `elif` here', 'comment_created': datetime.datetime(2023, 7, 25, 8, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273185434, 'comment_body': '`has lesser` -> `has fewer`', 'comment_created': datetime.datetime(2023, 7, 25, 8, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1273195376, 'comment_body': ""similar question to before, why `ghosted_x[..., 1:]` instead of `ghosted_x[1:]`... as far as I see it, for now we are handling only the 1d case and since the code isn't ready for nd-case we should stick to working with 1d arrays for now :)"", 'comment_created': datetime.datetime(2023, 7, 25, 8, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1275155492, 'comment_body': '> This is just a view... what happens when you do `np.insert`, `self.local_array` remains unchanged?\r\n\r\nI was thinking about this....\r\nSince you asked `self.local_array` remains unchanged(I thought this was a recommendation) So yes it does that is why I was thinking should we change it or not?\r\nOr was it just a question?', 'comment_created': datetime.datetime(2023, 7, 26, 15, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1275158773, 'comment_body': ""Yes, it was a question. I wanted to be sure the `self.local_array` remains unchanged as otherwise running `add_ghost_cells` multiple times will make the array growing... if it remains unchanged, then it's all as expected :)"", 'comment_created': datetime.datetime(2023, 7, 26, 15, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1275171922, 'comment_body': ""Thanks for pointing this out...\r\nThe size of the `self.local_array` will remain unchanged since insert and append creates a new ndarray everytime...\r\nBut it's better to avoid any confusion and we should take the copy of the local array..."", 'comment_created': datetime.datetime(2023, 7, 26, 15, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': '51f8645d36865ed30a681930d7adeaff585faf06', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '145181abb779872a1d5a9301080e3065818805cb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d9ab85cf734d83274f3034329ae3634dff9dd5', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '375acc6ad728851b6ff02e4ad626dd98c18fa096', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1472126082,Added local_shapes as a new parameter to DistributedArray,"Closes #59 
Implemented `local_shapes` parameter and changed all instances of DistributedArray to handle local_shapes
I see that `local_shapes` is a better option which will make the local_shape=local_shapes[rank] otherwise the default.
```
# Example
from pylops_mpi import DistributedArray

arr = DistributedArray(global_shape=(100, ), local_shapes=[(30, ), (40, ), (30, )])
print(arr.rank, arr)

# Output
0 <DistributedArray with global shape=(100,), local shape=(30,), dtype=<class 'numpy.float64'>, processes=[0, 1, 2])> 
1 <DistributedArray with global shape=(100,), local shape=(40,), dtype=<class 'numpy.float64'>, processes=[0, 1, 2])> 
2 <DistributedArray with global shape=(100,), local shape=(30,), dtype=<class 'numpy.float64'>, processes=[0, 1, 2])> 
```

In `DistributedArray.py`
- Added local_shapes as a List[Tuple]
- Added local_shapes to `to_dist` method
- Added a check for local_shapes so that they align with global shape
- Changed all instances to use local_shape
- Removed send/recv from `ravel` as now it is being handled by local_shapes

In `FirstDerivative.py`, `SecondDerivative.py` `cls_basic.py` and `plotting.py`
- Minor: Add local_shapes as parameter to DistributedArray

In `decorators.py`
- Updated the `reshaped` method by adding `forward` and `stacking` to handle reshaping/redistributing of stacking operators(I did it like that bcoz the code for them and derivatives was quite similar, if another decorator needs to be made to keep them separate then let me know)...
- Also made the code a little clean and easier to understand

In `VStack.py` and `BlockDiag.py`
- Now we give an option to handle it under the hood, also added local_shapes to y.
- Removed the Value Error as now that can be handled by the local_shapes and decorator.

Tests and example
- Updated tests for laplacian to check if it works for non-divisibility of size
- Added a test for local_shapes
- Added an example for local_shapes(since we are working with different ranks, adding raw numbers wasn't possible so just reversed the list of local_split shapes)",True,61,https://api.github.com/repos/PyLops/pylops-mpi/pulls/61,https://github.com/PyLops/pylops-mpi/pull/61,closed,154,57,12,6,3,16,0,0,[],2023-08-11 17:20:05+00:00,2023-08-13 03:45:19+00:00,123914.0,"1 day, 10:25:14","[{'comment_id': 1291756761, 'comment_body': 'What is the reason for `[::-1]`?', 'comment_created': datetime.datetime(2023, 8, 11, 20, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1291756900, 'comment_body': 'What is the reason for `[::-1]`?', 'comment_created': datetime.datetime(2023, 8, 11, 20, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1291757903, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2023, 8, 11, 20, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1291759012, 'comment_body': 'elif? as if you have `Partition.BROADCAST` there is no even point to go through this if statement', 'comment_created': datetime.datetime(2023, 8, 11, 20, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1291761884, 'comment_body': 'This error message is a bit misleading... if I understand correctly you check two things, one that the sum of local shapes over axis is the same as global shape over that axis and the other that all other axis have same local and global shape, but here the message seems to suggest the error is coming from the first check. I would say, either divide the two checks and make two error messages or remove `along axis={self.axis}` and simply print the local_shapes and global_shape as you do (the users will have to figure out where the error is...)', 'comment_created': datetime.datetime(2023, 8, 11, 20, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1291768769, 'comment_body': 'Can this not be moved in the init method, as it seems to me this can be done once... `local_shapes` can be put into a member of the class and used every time matvec is called (same for rmatvec). I would just use `local_shapes_n` and  `local_shapes_m` to distinguish between the two :)', 'comment_created': datetime.datetime(2023, 8, 11, 20, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1291773055, 'comment_body': 'same question as before, why `[::-1]`', 'comment_created': datetime.datetime(2023, 8, 11, 21, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1292063002, 'comment_body': ""This was basically to check if our local_shapes feature is working fine(I don't think we can add raw numbers as num_processes will be different)..., I forgot to remove [::-1] as I was just testing..\r\nso lets take an example after gathering local_split with global_shape = (10, 10) -> rank0 = (4, 10) -> rank1 = (3, 10) -> rank2 = (3, 10)\r\ncollecting all will give [(4, 10),  (3, 10), (3, 10)](which is default) I wanted to test for different local_shapes so I reversed the list giving [(3, 10), (3, 10), (4, 10)]  thus local_shape at each rank were switched and tried testing which worked fine..."", 'comment_created': datetime.datetime(2023, 8, 12, 4, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1292234049, 'comment_body': 'Great, I had assumed that was the case (which is a good test to do) but I just wanted to be sure… I would say either remove it or leave it as but just add a small comment ', 'comment_created': datetime.datetime(2023, 8, 12, 11, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1292234235, 'comment_body': 'Same as for the test, but since this is an example I would remove it not to create any confusion ', 'comment_created': datetime.datetime(2023, 8, 12, 11, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1292339081, 'comment_body': 'Just added a small comment', 'comment_created': datetime.datetime(2023, 8, 12, 15, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1292339256, 'comment_body': 'Done in `BlockDiag` as well as `VStack.py`', 'comment_created': datetime.datetime(2023, 8, 12, 15, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1292339277, 'comment_body': 'Done..', 'comment_created': datetime.datetime(2023, 8, 12, 15, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1292339288, 'comment_body': 'Added a docstring', 'comment_created': datetime.datetime(2023, 8, 12, 15, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1292339317, 'comment_body': 'Removed `[::-1]`', 'comment_created': datetime.datetime(2023, 8, 12, 15, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1292340880, 'comment_body': 'Done changed \r\n```\r\nraise ValueError(f""Local shapes don\'t align with the global shape;""\r\n                                     f""{local_shapes} != {self.global_shape}"")\r\n```', 'comment_created': datetime.datetime(2023, 8, 12, 15, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': 'bc8efc76751ade3000ad81b5613cfaa535f2985c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3097456d7ef1c503ec3f5d472681bcd3035cd1bf', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1dd5f922bb63f0c055078632e4896e8e21f815', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32774b4be3d60df431ad944a10c5b3860b0dea42', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8473260d2564071dd731bf45b9e2a8cb9c168513', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f5caa2e1dfe5dd8287d9b449119f581f905365', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1409255679,Add MPIBlockDiag and MPILinearOperator,"- Added MPIBlockDiag with _matvec and _rmatvec which now uses `DistributedArray`
- Added MPILinearOperator class 
- Added basic classes(_ScaledLinearOperator, _AdjointLinearOperator, etc) and made them input and output `DistributedArray`.
- Added tests to verify above classes.
- Upgrade scipy to `1.8` and python to `3.8`
- Updated docs for sphinx 
",True,26,https://api.github.com/repos/PyLops/pylops-mpi/pulls/26,https://github.com/PyLops/pylops-mpi/pull/26,closed,893,9,11,21,4,54,0,0,[],2023-06-27 07:18:21+00:00,2023-07-03 03:03:24+00:00,503103.0,"5 days, 19:45:03","[{'comment_id': 1245583009, 'comment_body': 'I suggest to follow the structure of pylops https://github.com/PyLops/pylops/blob/dev/pylops/basicoperators/__init__.py', 'comment_created': datetime.datetime(2023, 6, 28, 18, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245584078, 'comment_body': 'Why not `from .basicoperators import *` so it is already the correct form for later', 'comment_created': datetime.datetime(2023, 6, 28, 18, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245587780, 'comment_body': 'Since we are building a new library, I suggest we do not support early versions of spicy (like we need to do for backward compatibility in pylops). Simply use `from scipy.sparse.linalg._interface import _get_dtype` and make 1.8.0 the minimum requirement ', 'comment_created': datetime.datetime(2023, 6, 28, 18, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245594979, 'comment_body': 'It is good to refer to pylops for the general idea of the operator, but you should add some content to explain how this specific operator works in a MPI fashion. Basically, how operators are splitted across workers, how the forward and adjoint work, etc. Try to spend more time on documentation, it is as IMPORTANT as code :)', 'comment_created': datetime.datetime(2023, 6, 28, 18, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245600316, 'comment_body': 'I am not sure I understand this. In which scenario this if statement is not verified? (I guess if self.ops was empty?)\r\n\r\nAnd if this is the case, what would happen to `np.hstack(self.base_comm.allgather(y))`', 'comment_created': datetime.datetime(2023, 6, 28, 18, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245607750, 'comment_body': 'Seems like this can be done once upfront and saved into a class member?', 'comment_created': datetime.datetime(2023, 6, 28, 18, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245607868, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2023, 6, 28, 18, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245633337, 'comment_body': '`x` is a bit of a unclear nomenclature, maybe you something a bit more verbose like `iops`', 'comment_created': datetime.datetime(2023, 6, 28, 19, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247431185, 'comment_body': 'Done, same as pylops', 'comment_created': datetime.datetime(2023, 6, 30, 4, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247431813, 'comment_body': 'Done...', 'comment_created': datetime.datetime(2023, 6, 30, 4, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433019, 'comment_body': 'Updated scipy to `1.8.0`, python is also now `3.8`(as required by scipy), updated the code, also updated `requirements-dev.txt`, `environment.yml` and `environment-dev.yml`. Also removed `3.7` from build.yaml.', 'comment_created': datetime.datetime(2023, 6, 30, 4, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433125, 'comment_body': 'Updated the notes, would want your feedback...', 'comment_created': datetime.datetime(2023, 6, 30, 4, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433573, 'comment_body': 'Now it is removed  as we use DistributedArray.', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433965, 'comment_body': 'Removed as not required....', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247434167, 'comment_body': 'Removed as not required', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247434293, 'comment_body': 'Removed....', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247541783, 'comment_body': 'Great :)', 'comment_created': datetime.datetime(2023, 6, 30, 7, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247543187, 'comment_body': 'Very good :D\r\n\r\nJust a minor comments:\r\n`Each operator performs forward mode operations using its corresponding data,`, I would suggest we always call `m` the model and `d` the data as this is the common jargon in inverse problems. Of course everything is data, but if we want to be generic we can use the word vector/array. \r\n\r\nSo I would rephrase:\r\n```\r\nEach operator performs forward mode operations using its corresponding model vector, denoted as **m**.\r\nThis vector is effectively a :class:`pylops_mpi.DistributedArray` partitioned at each rank in such a way that its local shapes agree with those of the corresponding linear operators.\r\nThe forward mode of each operator is then collected from all ranks as a DistributedArray, referred to as **d**.\r\n```', 'comment_created': datetime.datetime(2023, 6, 30, 7, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247544033, 'comment_body': ""Perfect, I don't think we need to maintain python3.7 given that pretty much everyone uses 3.8+ these days..."", 'comment_created': datetime.datetime(2023, 6, 30, 7, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247544830, 'comment_body': 'This looks good :) I gave you a few small comments in the review, mostly due to the fact that there is some small inconsistency between the math and what you effectively do in code...', 'comment_created': datetime.datetime(2023, 6, 30, 7, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247550833, 'comment_body': ""This is a bit too short and makes it hard to a user to tell what this operator effectively does. For example, if someone doesn't go deep into the code it is still hard to understand what they should pass -  different operator(s) to each rank or all operators to all ranks as you did before. \r\n\r\nLet's maybe write this:\r\n\r\n```\r\nCreate a block-diagonal operator from a set of linear operators using MPI. Each rank must initialize this operator by providing one or more linear operators which will be computed within such rank.\r\n\r\n```\r\n\r\nI would also add some text about how the model and data vector should be provided. For example:\r\n\r\n```\r\nBoth model and data vectors must be of :class:`pylops_mpi.DistributedArray` type and partitioned between ranks according to the shapes of the different linear operators.\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 30, 7, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247555842, 'comment_body': 'Linear operators -> One or more `class:pylops.LinearOperator`', 'comment_created': datetime.datetime(2023, 6, 30, 7, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247556620, 'comment_body': 'I made this comment before, are you sure this is possible with the code you have right now?', 'comment_created': datetime.datetime(2023, 6, 30, 7, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247558981, 'comment_body': ""This cannot be possible... right now you will not be able to run things like `.dot` (@) or `.eigs`. You had a draft `pylops_mpi.LinearOperator` in the other PR, which I was happy to keep (what I didn't like is that you also added MatrixMult that had nothing to do with making MPIBlockDiag... I suggest to bring the LinearOperator back and subclass all our new operators to that, ensuring at least `.dot` (@) works.. we can later discuss what to do for `.eigs`."", 'comment_created': datetime.datetime(2023, 6, 30, 7, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247562981, 'comment_body': ""There is also a slight inconsistency with the fact that we allow each rank to have not just one operator but a list of operators... let's maybe simply add.\r\n\r\n```\r\nEach rank has one or more :class:`pylops.LinearOperator`, which we represent here compactly as :math:`\\mathbf{L}_i` for rank :math:`i`."", 'comment_created': datetime.datetime(2023, 6, 30, 8, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247563719, 'comment_body': 'Finally\r\n\r\n**L** -> :math:`\\mathbf{L}`', 'comment_created': datetime.datetime(2023, 6, 30, 8, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247565661, 'comment_body': 'you should not do self.shape, and then pass it to super... make just a temporary shape and then pass it. Same for dtype (basically the way you did clinear is how you should do all)', 'comment_created': datetime.datetime(2023, 6, 30, 8, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247567112, 'comment_body': 'great!', 'comment_created': datetime.datetime(2023, 6, 30, 8, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247569680, 'comment_body': 'I still dont understand this... when y1 will be empty? and if it is empty, then what y would be (I guess just some zeros as you never assign anything to it?)', 'comment_created': datetime.datetime(2023, 6, 30, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247569854, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2023, 6, 30, 8, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247570546, 'comment_body': 'Remove this', 'comment_created': datetime.datetime(2023, 6, 30, 8, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247571590, 'comment_body': 'Done :slightly_smiling_face: ', 'comment_created': datetime.datetime(2023, 6, 30, 8, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247571927, 'comment_body': 'I did use `_matvec` in my quick tests because I realized we could not use ``matvec / @` without making a new LinearOperator, but ideally we should include it in this PR and then never use internal methods like `_matvec ` in tests :)', 'comment_created': datetime.datetime(2023, 6, 30, 8, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248523756, 'comment_body': 'Updated the docs...', 'comment_created': datetime.datetime(2023, 7, 1, 5, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248523829, 'comment_body': 'Changed to  One or more `class:pylops.LinearOperator`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248524158, 'comment_body': 'True, have changed that. In my earlier version i had that, forgot to remove it...\r\nDone :)', 'comment_created': datetime.datetime(2023, 7, 1, 5, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248524639, 'comment_body': 'Changed Now a New class is added `MPILinearOperator`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248528509, 'comment_body': 'Done....', 'comment_created': datetime.datetime(2023, 7, 1, 5, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248530257, 'comment_body': 'Now since we are checking `x.local_shape != (self.mops, )` this should solve our problem \r\nThus, removed `if y1`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248530444, 'comment_body': 'Similar to above, Since we are checking x.local_shape != (self.nops, ) this should solve our problem\r\n Thus, removed if y1', 'comment_created': datetime.datetime(2023, 7, 1, 5, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248530657, 'comment_body': 'Changed it from `_matvec` -> `@`\r\nChanged it from `_rmatvec` -> `.H @`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248847888, 'comment_body': 'I am not sure whether we should subclass `pylops.LinearOperator` or nothing? Is there any method of the parent class that you see can be used as is here, or pretty much all methods must be overwritten?\r\n\r\nFor example, `eigs` or `div` (and maybe more...) will not work for sure as they are... so I would say if it makes sense to subclass `pylops.LinearOperator` for now we should overwrite those two methods with `pass` so users cannot call them getting some error... and implement them later. If we remove the subclassing then we can add those methods later on when the needed bits (eg solvers) are in place...', 'comment_created': datetime.datetime(2023, 7, 1, 13, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248859362, 'comment_body': 'In pylops we check if `Op` is provided (not None) and in this case we use its internal dtype/shape etc, otherwise we expect the user to provide those... unless you have a specific reason for making the init this way, it is probably good idea to follow the pylops style as this comes from experience and is likely to be fine also for pylops-mpi\r\n\r\nhttps://github.com/PyLops/pylops/blob/cdb00e5f0291fcea032802c7c3a0a7f8a7121851/pylops/linearoperator.py#L121C9-L121C19\r\n', 'comment_created': datetime.datetime(2023, 7, 1, 14, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248859506, 'comment_body': 'Also since you do `super().__init__(Op=Op, dtype=dtype, shape=shape)`, then I do not see the point of already having self.Op = Op as this will be done inside the super anyways ', 'comment_created': datetime.datetime(2023, 7, 1, 14, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248860372, 'comment_body': 'Mmh not sure I get this.. since you do not have `_matvec` in this class, it will call that of the parent class... but there (https://github.com/PyLops/pylops/blob/cdb00e5f0291fcea032802c7c3a0a7f8a7121851/pylops/linearoperator.py#L429) you need self.Op!=None to do something and if this is the case you would never reach it in this method (if self.Op would be True...)', 'comment_created': datetime.datetime(2023, 7, 1, 14, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248911975, 'comment_body': '`self.base_comm.allreduce(self.shape[1])` why? \r\n\r\nYou ask the user to pass shape and from the doc you say `Shape of the MPI Linear Operator.` which makes me think is the global shape. Also in `MPIBlockDiag` the shape is computed as `shape = (base_comm.allreduce(self.nops), base_comm.allreduce(self.mops))` which means it is the global shape.. so why this?', 'comment_created': datetime.datetime(2023, 7, 1, 17, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248912071, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2023, 7, 1, 17, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248913527, 'comment_body': 'Add short doctoring explaining what this test is', 'comment_created': datetime.datetime(2023, 7, 1, 18, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248913529, 'comment_body': 'Add short doctoring explaining what this test is', 'comment_created': datetime.datetime(2023, 7, 1, 18, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1249314678, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 2, 7, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249314767, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 2, 7, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249315161, 'comment_body': 'Made MPILinearOperator a standalone class', 'comment_created': datetime.datetime(2023, 7, 2, 7, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249315615, 'comment_body': 'Since I have removed extending the LinearOperator\r\nSo keeping it as `self.Op = Op`', 'comment_created': datetime.datetime(2023, 7, 2, 7, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249615364, 'comment_body': 'Added `_matvec` and `_rmatvec` just like we do in pylops...\r\n', 'comment_created': datetime.datetime(2023, 7, 2, 16, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': 'c46e87f31e66e5912195955829005f9ed0f46aeb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c9e1916883fab2ee20956798f7c1fc002dd7c4e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2809909f613897e205a756cd40db300511bf35ca', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b24989dbbccc59a8e2cc2a0bc6dcf77d77cba9', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c967d96ca6641861f01c3e2a8d0b5c3c52e265', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ec8072f6751db5d024ea1f32e67fe8c5bb1eb4f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03e5256a8fbde26b88a09cc7beccaab04fa07a85', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44ec58b0f0861a60d70fe543c8b465ef44d2777a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8603eb01db49f613626dc66ff8e3be80cfd589f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab04822acab25df7f28b0bf5d572888b865b41d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52d9aecf8a14b9b4dd7604afb407c18622a09cd9', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87995f0db9f917448d31ccacdd3774d97c8ebee8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac6119165f96990b4f1f873407164cc7ee0c710', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98bd028180bc6aec9abe23efccbe92806f7d8d7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae621796fa6b4baed0bbfe10071294516d670d00', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca941f5cf6e31557ccc0eae10d9e50e422d597c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '332436206ad294e84fd0aedee4f34b6c12461fa2', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b692cbaaf6a4bc0dbfcd3afd7d6f9df3907ace9d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3dbf2f239eb537e86655e5fef76c16ed2cd6011', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bc56bbc70f08fc19096f000692764c1f71fefb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9740001ce5c79a0ef54d98d012ecbf8a613e82a3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1442167747,Added support for broadcast in `_matvec` and `_rmatvec` in MPILinearOperator,"Adds #47 
- Added support for broadcast in `_matvec` and `_rmatvec`.
- Added a test to check the above..",True,48,https://api.github.com/repos/PyLops/pylops-mpi/pulls/48,https://github.com/PyLops/pylops-mpi/pull/48,closed,208,8,4,5,3,2,0,0,[],2023-07-20 05:51:35+00:00,2023-07-21 08:08:34+00:00,94619.0,"1 day, 2:16:59","[{'comment_id': 1270325149, 'comment_body': ""Maybe print(f'y: {y}')"", 'comment_created': datetime.datetime(2023, 7, 21, 7, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1270362979, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 7, 21, 8, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': '71742232321b1a3c78543c8c92eac27a98611fa3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b74d3dda248120d89bc8570a58b1f93bc475b0e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c7da9a07910fb21fd92e143be85e877f6c41d0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea8fb837ba0b751bbbf954a51973d2aca45808b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bea0cc5617d4c1583834ed87abfa7a82a24bc3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1409255679,Add MPIBlockDiag and MPILinearOperator,"- Added MPIBlockDiag with _matvec and _rmatvec which now uses `DistributedArray`
- Added MPILinearOperator class 
- Added basic classes(_ScaledLinearOperator, _AdjointLinearOperator, etc) and made them input and output `DistributedArray`.
- Added tests to verify above classes.
- Upgrade scipy to `1.8` and python to `3.8`
- Updated docs for sphinx 
",True,26,https://api.github.com/repos/PyLops/pylops-mpi/pulls/26,https://github.com/PyLops/pylops-mpi/pull/26,closed,893,9,11,21,4,54,0,0,[],2023-06-27 07:18:21+00:00,2023-07-03 03:03:24+00:00,503103.0,"5 days, 19:45:03","[{'comment_id': 1245583009, 'comment_body': 'I suggest to follow the structure of pylops https://github.com/PyLops/pylops/blob/dev/pylops/basicoperators/__init__.py', 'comment_created': datetime.datetime(2023, 6, 28, 18, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245584078, 'comment_body': 'Why not `from .basicoperators import *` so it is already the correct form for later', 'comment_created': datetime.datetime(2023, 6, 28, 18, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245587780, 'comment_body': 'Since we are building a new library, I suggest we do not support early versions of spicy (like we need to do for backward compatibility in pylops). Simply use `from scipy.sparse.linalg._interface import _get_dtype` and make 1.8.0 the minimum requirement ', 'comment_created': datetime.datetime(2023, 6, 28, 18, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245594979, 'comment_body': 'It is good to refer to pylops for the general idea of the operator, but you should add some content to explain how this specific operator works in a MPI fashion. Basically, how operators are splitted across workers, how the forward and adjoint work, etc. Try to spend more time on documentation, it is as IMPORTANT as code :)', 'comment_created': datetime.datetime(2023, 6, 28, 18, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245600316, 'comment_body': 'I am not sure I understand this. In which scenario this if statement is not verified? (I guess if self.ops was empty?)\r\n\r\nAnd if this is the case, what would happen to `np.hstack(self.base_comm.allgather(y))`', 'comment_created': datetime.datetime(2023, 6, 28, 18, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245607750, 'comment_body': 'Seems like this can be done once upfront and saved into a class member?', 'comment_created': datetime.datetime(2023, 6, 28, 18, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245607868, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2023, 6, 28, 18, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1245633337, 'comment_body': '`x` is a bit of a unclear nomenclature, maybe you something a bit more verbose like `iops`', 'comment_created': datetime.datetime(2023, 6, 28, 19, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247431185, 'comment_body': 'Done, same as pylops', 'comment_created': datetime.datetime(2023, 6, 30, 4, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247431813, 'comment_body': 'Done...', 'comment_created': datetime.datetime(2023, 6, 30, 4, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433019, 'comment_body': 'Updated scipy to `1.8.0`, python is also now `3.8`(as required by scipy), updated the code, also updated `requirements-dev.txt`, `environment.yml` and `environment-dev.yml`. Also removed `3.7` from build.yaml.', 'comment_created': datetime.datetime(2023, 6, 30, 4, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433125, 'comment_body': 'Updated the notes, would want your feedback...', 'comment_created': datetime.datetime(2023, 6, 30, 4, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433573, 'comment_body': 'Now it is removed  as we use DistributedArray.', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247433965, 'comment_body': 'Removed as not required....', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247434167, 'comment_body': 'Removed as not required', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247434293, 'comment_body': 'Removed....', 'comment_created': datetime.datetime(2023, 6, 30, 4, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247541783, 'comment_body': 'Great :)', 'comment_created': datetime.datetime(2023, 6, 30, 7, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247543187, 'comment_body': 'Very good :D\r\n\r\nJust a minor comments:\r\n`Each operator performs forward mode operations using its corresponding data,`, I would suggest we always call `m` the model and `d` the data as this is the common jargon in inverse problems. Of course everything is data, but if we want to be generic we can use the word vector/array. \r\n\r\nSo I would rephrase:\r\n```\r\nEach operator performs forward mode operations using its corresponding model vector, denoted as **m**.\r\nThis vector is effectively a :class:`pylops_mpi.DistributedArray` partitioned at each rank in such a way that its local shapes agree with those of the corresponding linear operators.\r\nThe forward mode of each operator is then collected from all ranks as a DistributedArray, referred to as **d**.\r\n```', 'comment_created': datetime.datetime(2023, 6, 30, 7, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247544033, 'comment_body': ""Perfect, I don't think we need to maintain python3.7 given that pretty much everyone uses 3.8+ these days..."", 'comment_created': datetime.datetime(2023, 6, 30, 7, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247544830, 'comment_body': 'This looks good :) I gave you a few small comments in the review, mostly due to the fact that there is some small inconsistency between the math and what you effectively do in code...', 'comment_created': datetime.datetime(2023, 6, 30, 7, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247550833, 'comment_body': ""This is a bit too short and makes it hard to a user to tell what this operator effectively does. For example, if someone doesn't go deep into the code it is still hard to understand what they should pass -  different operator(s) to each rank or all operators to all ranks as you did before. \r\n\r\nLet's maybe write this:\r\n\r\n```\r\nCreate a block-diagonal operator from a set of linear operators using MPI. Each rank must initialize this operator by providing one or more linear operators which will be computed within such rank.\r\n\r\n```\r\n\r\nI would also add some text about how the model and data vector should be provided. For example:\r\n\r\n```\r\nBoth model and data vectors must be of :class:`pylops_mpi.DistributedArray` type and partitioned between ranks according to the shapes of the different linear operators.\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 30, 7, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247555842, 'comment_body': 'Linear operators -> One or more `class:pylops.LinearOperator`', 'comment_created': datetime.datetime(2023, 6, 30, 7, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247556620, 'comment_body': 'I made this comment before, are you sure this is possible with the code you have right now?', 'comment_created': datetime.datetime(2023, 6, 30, 7, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247558981, 'comment_body': ""This cannot be possible... right now you will not be able to run things like `.dot` (@) or `.eigs`. You had a draft `pylops_mpi.LinearOperator` in the other PR, which I was happy to keep (what I didn't like is that you also added MatrixMult that had nothing to do with making MPIBlockDiag... I suggest to bring the LinearOperator back and subclass all our new operators to that, ensuring at least `.dot` (@) works.. we can later discuss what to do for `.eigs`."", 'comment_created': datetime.datetime(2023, 6, 30, 7, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247562981, 'comment_body': ""There is also a slight inconsistency with the fact that we allow each rank to have not just one operator but a list of operators... let's maybe simply add.\r\n\r\n```\r\nEach rank has one or more :class:`pylops.LinearOperator`, which we represent here compactly as :math:`\\mathbf{L}_i` for rank :math:`i`."", 'comment_created': datetime.datetime(2023, 6, 30, 8, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247563719, 'comment_body': 'Finally\r\n\r\n**L** -> :math:`\\mathbf{L}`', 'comment_created': datetime.datetime(2023, 6, 30, 8, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247565661, 'comment_body': 'you should not do self.shape, and then pass it to super... make just a temporary shape and then pass it. Same for dtype (basically the way you did clinear is how you should do all)', 'comment_created': datetime.datetime(2023, 6, 30, 8, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247567112, 'comment_body': 'great!', 'comment_created': datetime.datetime(2023, 6, 30, 8, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247569680, 'comment_body': 'I still dont understand this... when y1 will be empty? and if it is empty, then what y would be (I guess just some zeros as you never assign anything to it?)', 'comment_created': datetime.datetime(2023, 6, 30, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247569854, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2023, 6, 30, 8, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247570546, 'comment_body': 'Remove this', 'comment_created': datetime.datetime(2023, 6, 30, 8, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1247571590, 'comment_body': 'Done :slightly_smiling_face: ', 'comment_created': datetime.datetime(2023, 6, 30, 8, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1247571927, 'comment_body': 'I did use `_matvec` in my quick tests because I realized we could not use ``matvec / @` without making a new LinearOperator, but ideally we should include it in this PR and then never use internal methods like `_matvec ` in tests :)', 'comment_created': datetime.datetime(2023, 6, 30, 8, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248523756, 'comment_body': 'Updated the docs...', 'comment_created': datetime.datetime(2023, 7, 1, 5, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248523829, 'comment_body': 'Changed to  One or more `class:pylops.LinearOperator`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248524158, 'comment_body': 'True, have changed that. In my earlier version i had that, forgot to remove it...\r\nDone :)', 'comment_created': datetime.datetime(2023, 7, 1, 5, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248524639, 'comment_body': 'Changed Now a New class is added `MPILinearOperator`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248528509, 'comment_body': 'Done....', 'comment_created': datetime.datetime(2023, 7, 1, 5, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248530257, 'comment_body': 'Now since we are checking `x.local_shape != (self.mops, )` this should solve our problem \r\nThus, removed `if y1`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248530444, 'comment_body': 'Similar to above, Since we are checking x.local_shape != (self.nops, ) this should solve our problem\r\n Thus, removed if y1', 'comment_created': datetime.datetime(2023, 7, 1, 5, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248530657, 'comment_body': 'Changed it from `_matvec` -> `@`\r\nChanged it from `_rmatvec` -> `.H @`', 'comment_created': datetime.datetime(2023, 7, 1, 5, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1248847888, 'comment_body': 'I am not sure whether we should subclass `pylops.LinearOperator` or nothing? Is there any method of the parent class that you see can be used as is here, or pretty much all methods must be overwritten?\r\n\r\nFor example, `eigs` or `div` (and maybe more...) will not work for sure as they are... so I would say if it makes sense to subclass `pylops.LinearOperator` for now we should overwrite those two methods with `pass` so users cannot call them getting some error... and implement them later. If we remove the subclassing then we can add those methods later on when the needed bits (eg solvers) are in place...', 'comment_created': datetime.datetime(2023, 7, 1, 13, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248859362, 'comment_body': 'In pylops we check if `Op` is provided (not None) and in this case we use its internal dtype/shape etc, otherwise we expect the user to provide those... unless you have a specific reason for making the init this way, it is probably good idea to follow the pylops style as this comes from experience and is likely to be fine also for pylops-mpi\r\n\r\nhttps://github.com/PyLops/pylops/blob/cdb00e5f0291fcea032802c7c3a0a7f8a7121851/pylops/linearoperator.py#L121C9-L121C19\r\n', 'comment_created': datetime.datetime(2023, 7, 1, 14, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248859506, 'comment_body': 'Also since you do `super().__init__(Op=Op, dtype=dtype, shape=shape)`, then I do not see the point of already having self.Op = Op as this will be done inside the super anyways ', 'comment_created': datetime.datetime(2023, 7, 1, 14, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248860372, 'comment_body': 'Mmh not sure I get this.. since you do not have `_matvec` in this class, it will call that of the parent class... but there (https://github.com/PyLops/pylops/blob/cdb00e5f0291fcea032802c7c3a0a7f8a7121851/pylops/linearoperator.py#L429) you need self.Op!=None to do something and if this is the case you would never reach it in this method (if self.Op would be True...)', 'comment_created': datetime.datetime(2023, 7, 1, 14, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248911975, 'comment_body': '`self.base_comm.allreduce(self.shape[1])` why? \r\n\r\nYou ask the user to pass shape and from the doc you say `Shape of the MPI Linear Operator.` which makes me think is the global shape. Also in `MPIBlockDiag` the shape is computed as `shape = (base_comm.allreduce(self.nops), base_comm.allreduce(self.mops))` which means it is the global shape.. so why this?', 'comment_created': datetime.datetime(2023, 7, 1, 17, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248912071, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2023, 7, 1, 17, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248913527, 'comment_body': 'Add short doctoring explaining what this test is', 'comment_created': datetime.datetime(2023, 7, 1, 18, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1248913529, 'comment_body': 'Add short doctoring explaining what this test is', 'comment_created': datetime.datetime(2023, 7, 1, 18, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1249314678, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 2, 7, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249314767, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 2, 7, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249315161, 'comment_body': 'Made MPILinearOperator a standalone class', 'comment_created': datetime.datetime(2023, 7, 2, 7, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249315615, 'comment_body': 'Since I have removed extending the LinearOperator\r\nSo keeping it as `self.Op = Op`', 'comment_created': datetime.datetime(2023, 7, 2, 7, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1249615364, 'comment_body': 'Added `_matvec` and `_rmatvec` just like we do in pylops...\r\n', 'comment_created': datetime.datetime(2023, 7, 2, 16, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': 'c46e87f31e66e5912195955829005f9ed0f46aeb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c9e1916883fab2ee20956798f7c1fc002dd7c4e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2809909f613897e205a756cd40db300511bf35ca', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b24989dbbccc59a8e2cc2a0bc6dcf77d77cba9', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c967d96ca6641861f01c3e2a8d0b5c3c52e265', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ec8072f6751db5d024ea1f32e67fe8c5bb1eb4f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03e5256a8fbde26b88a09cc7beccaab04fa07a85', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44ec58b0f0861a60d70fe543c8b465ef44d2777a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8603eb01db49f613626dc66ff8e3be80cfd589f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab04822acab25df7f28b0bf5d572888b865b41d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52d9aecf8a14b9b4dd7604afb407c18622a09cd9', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87995f0db9f917448d31ccacdd3774d97c8ebee8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac6119165f96990b4f1f873407164cc7ee0c710', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98bd028180bc6aec9abe23efccbe92806f7d8d7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae621796fa6b4baed0bbfe10071294516d670d00', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca941f5cf6e31557ccc0eae10d9e50e422d597c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '332436206ad294e84fd0aedee4f34b6c12461fa2', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b692cbaaf6a4bc0dbfcd3afd7d6f9df3907ace9d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3dbf2f239eb537e86655e5fef76c16ed2cd6011', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bc56bbc70f08fc19096f000692764c1f71fefb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9740001ce5c79a0ef54d98d012ecbf8a613e82a3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1431107924,Added MPIVStack,"Adds #33 
- Added MPIVStack with docs.
- Added Tests",True,36,https://api.github.com/repos/PyLops/pylops-mpi/pulls/36,https://github.com/PyLops/pylops-mpi/pull/36,closed,194,1,4,6,2,0,0,0,[],2023-07-12 11:32:25+00:00,2023-07-14 04:57:34+00:00,149109.0,"1 day, 17:25:09",[],"[{'commit_sha': '9b0f0cd7b49f1eb8688b97a874066b05af222460', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a89201b77e38162627f6ec32d9565efd4bdd63c9', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd71e51c406260f316d4cfd3f0fb13a09b4b81288', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bda4ff95cc13fb0050543b6f3732e87e57437c5', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fbf09f4d585ed059aaa433e7498e60ce4fc0925', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e31d661f61d6ff199623182a749f4c927d13cbaa', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1438818958,Added MPIHStack,"- Added `MPIHStack`
- Added test for MPIHStack.

MPIHStack now works similar to the `pylops.HStack`, I have used the concept -> `HStack(ops) = VStack(ops.H).H`.
```
# In code 
self.HStack = pylops_mpi.MPIVStack(ops=hops, base_comm=base_comm, dtype=dtype).H
```
which creates the HStack and then called the matvec and rmatvec of MPIVStack.
The docs is pretty much the same as MPIVStack...",True,45,https://api.github.com/repos/PyLops/pylops-mpi/pulls/45,https://github.com/PyLops/pylops-mpi/pull/45,closed,150,1,4,5,1,0,0,0,[],2023-07-18 08:40:05+00:00,2023-07-19 03:44:55+00:00,68690.0,19:04:50,[],"[{'commit_sha': '423f0a6adb8333514d51276129d1cd2e891963f0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '082c031b1577f64a70d452ea3aba1fb7de69a6eb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c57871c4999bbb91992fdf062912ee1d9bcb721e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede99155d85e739eb72d1413b8acd9d2c69a1690', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '649fb2997a6cc82b35ba7d2932195f92e1830197', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1424007385,Added CGLS using DistributedArray,"- Added `conj()` and `copy()` to `DistributedArray` as they were used quite often.
- Added `CGLS` class similar to pylops but now using `DistributedArray`.
- Added `cgls` method which will be used by users, as we do in pylops(again with `DistributedArray`).
- Added some random tests for both real and complex(test cases are same as pylops).
- Added `cgls` and `CGLS` to docs.
- Also added `cgls` to `__init__.py`(same as pylops).",True,29,https://api.github.com/repos/PyLops/pylops-mpi/pulls/29,https://github.com/PyLops/pylops-mpi/pull/29,closed,526,0,7,10,2,2,0,0,[],2023-07-07 05:17:34+00:00,2023-07-08 09:23:58+00:00,101184.0,"1 day, 4:06:24","[{'comment_id': 1256375918, 'comment_body': 'remove an', 'comment_created': datetime.datetime(2023, 7, 7, 19, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1257145117, 'comment_body': 'Removed an', 'comment_created': datetime.datetime(2023, 7, 8, 8, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': 'ffdb4e9ef9c4d5428908b4b932b626aeec332ec7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba9688df065b0996eafe31311de1ad9d5fe89619', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a6defc50f1822d1ce14cdf582ae6621a2f4321e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a4080049438346474d43ce6a682b8468d027ac', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a99dc8b315b9629a95bdd413894ac570e20d619', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58158a79ee3c0fc6fb73fde902cfa420de972712', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f102d3744f4d69c6e54e26c62bd6604c611db63e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a63267169b76314f00c75b6aef97c9a5c6efb7d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76676b52d3ceae9fbfb5b06e580579ac8e01657b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ff9cd0c41fa3a92275a290feb8971a75b880f9d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1455749894,Updated tests in test_solver,"Closes #51 
- Updated tests for MPIBlockDiag and MPIVStack

In the example, you used `BlockDiag(..., forceflat=True)`, but I think `forceflat` has not been released yet, so kept it as BlockDiag.",True,57,https://api.github.com/repos/PyLops/pylops-mpi/pulls/57,https://github.com/PyLops/pylops-mpi/pull/57,closed,21,15,1,3,1,0,0,0,[],2023-07-31 08:02:57+00:00,2023-07-31 10:49:23+00:00,9986.0,2:46:26,[],"[{'commit_sha': 'f893a067d41b415b95073a28343457b3368f8e38', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04451311fb3f4a4afde711330555985225360223', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba8294fd8865fbac73e814f12d7619773990b4a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1481710583,Added CG Solver,"- Added `CG` class
- Added `cg` method
- Added test for cg
- Added docs",True,73,https://api.github.com/repos/PyLops/pylops-mpi/pulls/73,https://github.com/PyLops/pylops-mpi/pull/73,closed,346,2,5,4,0,0,0,0,[],2023-08-20 07:55:17+00:00,2023-08-20 17:56:47+00:00,36090.0,10:01:30,[],"[{'commit_sha': '6a29236d06b0e0a18d4a49b0c031af54ae26e603', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22fecf73b291a0a7086fa69321f145ddf8476ab3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e880c9815e3f97bb1a625a3873876ee386a8dc2', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d2e34b0d0aa37f5bdac6fca63a0e2530d71a3f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1453734613,Added MPIFirstDerivative,"Taking into consideration #49 
- Added `MPIFirstDerivative`
- Added tests and updated docs..",True,55,https://api.github.com/repos/PyLops/pylops-mpi/pulls/55,https://github.com/PyLops/pylops-mpi/pull/55,closed,626,1,7,16,28,4,0,0,[],2023-07-28 12:14:20+00:00,2023-08-04 03:40:35+00:00,573975.0,"6 days, 15:26:15","[{'comment_id': 1278518929, 'comment_body': 'mmh if the array is of `Partition.BROADCAST`, what does `x.axis` really mean? I guess from how DistributedArray is implemented right now, one could choose any axis, but here this would lead to problems... see my general comment', 'comment_created': datetime.datetime(2023, 7, 30, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1278519084, 'comment_body': 'is this really needed... if I look at 138, it seems to me you are setting the entire array, so we may be able to avoid setting it to zero first', 'comment_created': datetime.datetime(2023, 7, 30, 6, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1278519900, 'comment_body': 'add short doctoring', 'comment_created': datetime.datetime(2023, 7, 30, 6, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1278520231, 'comment_body': 'We may want to also add a test (just for one of the kind) where the input array is Nd (say 2d)... I think, this is where the problem I mentioned in the general comment will show up if you were to have x as a DistributedArray with axis!=0... tests are a useful way to catch issues, not only to check correctness.\r\n\r\nOf course, the test to add will be with axis=0, but I guess you get my point ;)', 'comment_created': datetime.datetime(2023, 7, 30, 6, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}]","[{'commit_sha': '6492e1871f8963e98f9295301ca11031eed6a778', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2903bbe0ef1a2688c20aa8abfa7eb32cf336cc24', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90020c3447f3e24b6be0d13c7625fc6f9bdaa3f6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4c2810e0a4af3a49c4c5029f6bb995d492138b8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d2938684026625b556616e2747ffc0d081fad75', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12456c3f603dfe4fc3dd68eda0359392e21bdc1e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8462958e52c55d734bf533c221ddb36f93373bf6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa560dfb498d4a45f31bdd8bc347550fae04d6c1', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5014a61376ca0bd1ef8924faff758c9712645f7c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42aa9b490a02ca071da81d167dac3da685f75718', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f948c32d10a0157fa5d8e07cbd82d8f377be5bc7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bbf19ac2104c279489de931f0fc245bda873f9f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6788377d91d8ef7c52fb576202b644aac4af4f8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbce2be740ed31b59ee0a9d63f7b15c6c3aa7a62', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af71a9598201caf7e63e33f195170ff40d0a379e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c07885c5ba44cad513ea460950536072d60859', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1462504429,Added MPISecondDerivative,"- Added `MPISecondDerivative` along axis=0.
- Added tests and updated docs
- Added derivatives examples for `MPIFirstDerivative` and `MPISecondDerivative`.",True,58,https://api.github.com/repos/PyLops/pylops-mpi/pulls/58,https://github.com/PyLops/pylops-mpi/pull/58,closed,426,1,5,7,3,12,0,0,[],2023-08-04 07:59:46+00:00,2023-08-06 05:40:12+00:00,164426.0,"1 day, 21:40:26","[{'comment_id': 1285119215, 'comment_body': ""`a set of derivative operators` -> `pylops-mpi's derivative operators`"", 'comment_created': datetime.datetime(2023, 8, 5, 20, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119348, 'comment_body': '`The derivative operators are really useful when dealing with inverted models.` -> `Derivative operators are commonly used when solving inverse problems within regularization terms aimed at enforcing smooth solutions`', 'comment_created': datetime.datetime(2023, 8, 5, 20, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119373, 'comment_body': '`using a` -> `on a`', 'comment_created': datetime.datetime(2023, 8, 5, 20, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119475, 'comment_body': '`in the first direction i.e. along ``axis=0``` -> `along the first direction (i.,e. along ``axis=0``)`', 'comment_created': datetime.datetime(2023, 8, 5, 20, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119868, 'comment_body': 'I would add this sentence, as this is the point we need these operators.\r\n\r\n``We will be focusing here on the case where the input array `x` is assumed to be an n-dimensional distributed array and the derivative is applied over the first axis (`axis==0`). Since the array is distributed over multiple processes, the derivative operators must take care of applying the derivatives across the edges using information from the previous/next process, using so-called ghost cells.`\r\n``', 'comment_created': datetime.datetime(2023, 8, 5, 20, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285120159, 'comment_body': 'Add similar comment as the one you did for the FirstDerivative or refer to it for implementation details', 'comment_created': datetime.datetime(2023, 8, 5, 20, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285148543, 'comment_body': 'Done..', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148546, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148550, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148555, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148610, 'comment_body': 'Added a similar comment for ghosting...', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148618, 'comment_body': 'Added this sentence.', 'comment_created': datetime.datetime(2023, 8, 6, 3, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': 'f21c398bb86bb4de67fd1f90e43116db728138f6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2805cdfacb5d4f31a9a90cdcdf23986860c8ba7c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff7661fe37122d805d788abbec32c3df75ed003', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ccbef0cec044855df0a3c312973a648d641b7fb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c73d8735a998e8dc064d66f4db4321d9254befe7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29bac849f5176185c29ec31a050d2a8dafb92819', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099cb0a88d78ca816688e26fb667bf87b030de95', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1467253648,Added MPILaplacian,"For #56 (2)
- Added `MPILaplacian`
- Added tests for laplacian
- Added docs to MPILaplacian",True,60,https://api.github.com/repos/PyLops/pylops-mpi/pulls/60,https://github.com/PyLops/pylops-mpi/pull/60,closed,235,3,5,4,2,4,0,0,[],2023-08-08 17:24:40+00:00,2023-08-09 13:36:47+00:00,72727.0,20:12:07,"[{'comment_id': 1287648241, 'comment_body': '` first direction(i.e. axis=0).` -> ` first direction (i.e., axis=0).`', 'comment_created': datetime.datetime(2023, 8, 8, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1287683267, 'comment_body': 'From this docstring, it seems like this operator works for any choice of dims and number of ranks... is this the case, based on our issue discussion it doesnt seem like right now? \r\n\r\nIt may be worth then specifying under which conditions this operator will work... once we make this more general and add tests we can remove it', 'comment_created': datetime.datetime(2023, 8, 8, 20, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1287907125, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 9, 4, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1287907255, 'comment_body': 'Added a note for divisibilty of nx and size', 'comment_created': datetime.datetime(2023, 8, 9, 4, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': '10c3f812561dc82ad04ec5930407ab76b4e2d564', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20fe8649dfaa0461edf5f0e8e9e50d961a161c44', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99321ebe6da92bc0c7517682dde6e8ec65c3843c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e17f82fe14d1aa4c7061d21917e99cfccb16178f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1376202854,DistributedArray along an axis and plotting functions for better examples,"Enhancement for Distribution of array along an axis.
- [x] Code in DistributedArray class
- [x] Updated the Tests
- [x] Added Plotting for DistributedArray (aligns with pylops)
- [x]  Update the Examples",True,7,https://api.github.com/repos/PyLops/pylops-mpi/pulls/7,https://github.com/PyLops/pylops-mpi/pull/7,closed,225,70,8,22,1,0,0,0,[],2023-06-02 19:05:48+00:00,2023-06-05 15:08:25+00:00,244957.0,"2 days, 20:02:37",[],"[{'commit_sha': '103aa3b0ca7887a57143d000b0481484c317a1e0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce2e08f27bffecd640e005411d100d3b9f30cce4', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca1c7b3c7b6229e9d80d9656a26764a2df0e7511', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4a5544bb71622efad6d52c2a896b5481cb5645a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ac569677a323611523f0f5943a23716a0a6b47f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727ae849695b37a69cd0dc7b9c4fded0f513f6c4', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f1c01774b9574c2e2f229664f4651c22f8709a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b662628497e2aa546a4a9622a05977341bb4efc', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06758ce53179f7f96bce80c403fc2a5d95240088', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1205f8fa4a3a9ef339bfc1a924e4cc986237027', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cefafd9f51abe212370911d40dfccfab17c13ace', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b0359c19941889a5db62f892c233d96e935a0e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4153f424b10465969353c105507db83cf09794f9', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0876e68cdbd08274ea73bd6ef4ae5d8271fc985', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08d8b992fcaaa2c0bebaca4b5fb88d79b819d3e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3db95dd3436bd8cda01a5088e1a26f2efac28b6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e044a092570b74f344dc9a8a66a01cc67fb948', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acc11df34e0acbc9b609a6354709558b8cbf5e19', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01c953dbb6d995d04e0d5ad3513b7bb6894afce5', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2a3e4b76248798a497f596feef20ec84ba2716', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa003f91e0e24bd90507db78fc0b92c56ad8173', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e765a39127eb69db8e5e104372c390c5d00ae914', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1435944553,Added cgls example,"Adds example for #39 
- Added CGLS example using MPIBlockDiag",True,43,https://api.github.com/repos/PyLops/pylops-mpi/pulls/43,https://github.com/PyLops/pylops-mpi/pull/43,closed,58,0,1,2,1,0,0,0,[],2023-07-15 15:41:43+00:00,2023-07-16 07:31:15+00:00,56972.0,15:49:32,[],"[{'commit_sha': '01ef81d56c872f8d205efc51a37847c10e9bad00', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc986dbf9728c5a5cc16b2cc442467800e06e6cc', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1437710988,Added Stacking examples,"For issue #39 
- Added `MPIVStack` example(Vertical Stacking).
- Added `MPIHStack` example(Horizontal stacking).
- Added `MPIBlockDiag` example(For Block Diagonal example).",True,44,https://api.github.com/repos/PyLops/pylops-mpi/pulls/44,https://github.com/PyLops/pylops-mpi/pull/44,closed,182,0,1,3,4,0,0,0,[],2023-07-17 17:08:01+00:00,2023-07-19 07:48:44+00:00,139243.0,"1 day, 14:40:43",[],"[{'commit_sha': 'f1fe936130417393d3a8a2fc81ddb8734d1505b6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0dbc73d41fa97a5f435ad75cb52c3ed3b1dd961', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53ae1d8e28eaeb512f6649f1257c1000b179c3b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1442167747,Added support for broadcast in `_matvec` and `_rmatvec` in MPILinearOperator,"Adds #47 
- Added support for broadcast in `_matvec` and `_rmatvec`.
- Added a test to check the above..",True,48,https://api.github.com/repos/PyLops/pylops-mpi/pulls/48,https://github.com/PyLops/pylops-mpi/pull/48,closed,208,8,4,5,3,2,0,0,[],2023-07-20 05:51:35+00:00,2023-07-21 08:08:34+00:00,94619.0,"1 day, 2:16:59","[{'comment_id': 1270325149, 'comment_body': ""Maybe print(f'y: {y}')"", 'comment_created': datetime.datetime(2023, 7, 21, 7, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1270362979, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 7, 21, 8, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': '71742232321b1a3c78543c8c92eac27a98611fa3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b74d3dda248120d89bc8570a58b1f93bc475b0e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c7da9a07910fb21fd92e143be85e877f6c41d0', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea8fb837ba0b751bbbf954a51973d2aca45808b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02bea0cc5617d4c1583834ed87abfa7a82a24bc3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1462504429,Added MPISecondDerivative,"- Added `MPISecondDerivative` along axis=0.
- Added tests and updated docs
- Added derivatives examples for `MPIFirstDerivative` and `MPISecondDerivative`.",True,58,https://api.github.com/repos/PyLops/pylops-mpi/pulls/58,https://github.com/PyLops/pylops-mpi/pull/58,closed,426,1,5,7,3,12,0,0,[],2023-08-04 07:59:46+00:00,2023-08-06 05:40:12+00:00,164426.0,"1 day, 21:40:26","[{'comment_id': 1285119215, 'comment_body': ""`a set of derivative operators` -> `pylops-mpi's derivative operators`"", 'comment_created': datetime.datetime(2023, 8, 5, 20, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119348, 'comment_body': '`The derivative operators are really useful when dealing with inverted models.` -> `Derivative operators are commonly used when solving inverse problems within regularization terms aimed at enforcing smooth solutions`', 'comment_created': datetime.datetime(2023, 8, 5, 20, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119373, 'comment_body': '`using a` -> `on a`', 'comment_created': datetime.datetime(2023, 8, 5, 20, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119475, 'comment_body': '`in the first direction i.e. along ``axis=0``` -> `along the first direction (i.,e. along ``axis=0``)`', 'comment_created': datetime.datetime(2023, 8, 5, 20, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285119868, 'comment_body': 'I would add this sentence, as this is the point we need these operators.\r\n\r\n``We will be focusing here on the case where the input array `x` is assumed to be an n-dimensional distributed array and the derivative is applied over the first axis (`axis==0`). Since the array is distributed over multiple processes, the derivative operators must take care of applying the derivatives across the edges using information from the previous/next process, using so-called ghost cells.`\r\n``', 'comment_created': datetime.datetime(2023, 8, 5, 20, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285120159, 'comment_body': 'Add similar comment as the one you did for the FirstDerivative or refer to it for implementation details', 'comment_created': datetime.datetime(2023, 8, 5, 20, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1285148543, 'comment_body': 'Done..', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148546, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148550, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148555, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148610, 'comment_body': 'Added a similar comment for ghosting...', 'comment_created': datetime.datetime(2023, 8, 6, 3, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1285148618, 'comment_body': 'Added this sentence.', 'comment_created': datetime.datetime(2023, 8, 6, 3, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': 'f21c398bb86bb4de67fd1f90e43116db728138f6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2805cdfacb5d4f31a9a90cdcdf23986860c8ba7c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff7661fe37122d805d788abbec32c3df75ed003', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ccbef0cec044855df0a3c312973a648d641b7fb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c73d8735a998e8dc064d66f4db4321d9254befe7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29bac849f5176185c29ec31a050d2a8dafb92819', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099cb0a88d78ca816688e26fb667bf87b030de95', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1423084776,Added Post Stack Example using MPIBlockDiag,"- Added `MPIBlockDiag` to store each `PPop` at each rank.
- Added both Linear PostStackModelling and Dense PostStackModelling.
- Added plots for data, model and smooth model(x-z, y-z, and x-y).
- Added the `poststack_model.npz` in `testdata`.",True,28,https://api.github.com/repos/PyLops/pylops-mpi/pulls/28,https://github.com/PyLops/pylops-mpi/pull/28,closed,120,0,2,8,5,15,0,0,[],2023-07-06 15:21:59+00:00,2023-07-09 03:28:31+00:00,216392.0,"2 days, 12:06:32","[{'comment_id': 1255337869, 'comment_body': 'You could just smooth the 3d model instead of smoothing the 2d one and then making it 3d', 'comment_created': datetime.datetime(2023, 7, 7, 6, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1256328716, 'comment_body': '`3-D` -> `3D` \r\n`a profile of the subsurface acoustic impedence.` -> `a 3D model of the subsurface acoustic impedence`', 'comment_created': datetime.datetime(2023, 7, 7, 19, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1256329363, 'comment_body': 'capital W', 'comment_created': datetime.datetime(2023, 7, 7, 19, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1256329771, 'comment_body': ' Making m a 3-D model', 'comment_created': datetime.datetime(2023, 7, 7, 19, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1256331428, 'comment_body': 'always better to use @ instead of * (I know sometimes we still have some * in pylops here and there...)', 'comment_created': datetime.datetime(2023, 7, 7, 19, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1256333229, 'comment_body': 'I would show m, mback and d in this order', 'comment_created': datetime.datetime(2023, 7, 7, 19, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1256334585, 'comment_body': ""This isn't used anywhere, same for `d_dense_local`"", 'comment_created': datetime.datetime(2023, 7, 7, 19, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1256344892, 'comment_body': 'I would suggest to make imports from full paths:\r\n```\r\nfrom pylops.utils.wavelets import ricker\r\nfrom pylops.avo.poststack import PoststackLinearModelling\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 19, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1257258065, 'comment_body': 'I have done it on all three axes taking `nsmoothy, nsmoothx, nsmoothz = 5, 30, 20`\r\n', 'comment_created': datetime.datetime(2023, 7, 8, 12, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1257258102, 'comment_body': 'Done...', 'comment_created': datetime.datetime(2023, 7, 8, 12, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1257258172, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2023, 7, 8, 12, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1257258296, 'comment_body': 'Yup noted will use @ everywhere from now onwards', 'comment_created': datetime.datetime(2023, 7, 8, 12, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1257258385, 'comment_body': 'Done rearranged the plots', 'comment_created': datetime.datetime(2023, 7, 8, 12, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1257316578, 'comment_body': '@mrava87 should we keep this or remove this?', 'comment_created': datetime.datetime(2023, 7, 8, 17, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1257317398, 'comment_body': 'I would keep it, as a way to show how you can equivalently do it in pylops (for small 3d models) and that you get the same result :)', 'comment_created': datetime.datetime(2023, 7, 8, 17, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}]","[{'commit_sha': 'c55f5ba4516cb97aeea715adbd3c45f8c21b437a', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de80b3c6516d6fd20bc8794578a5431145b49abb', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '671cd96aee8c4736e783819b2cea9b787c0a7fbc', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26ae24a1a653d21abcfe9c0b0dc7c15967a8e0da', 'committer_username': 'mrava87', 'committer_name': 'Matteo Ravasi', 'committer_email': None, 'commit_date': datetime.datetime(2016, 10, 7, 7, 36, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b36857d4d3733af1d4f05bebfa2baf90a092f1c4', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd91776890350904ce73780f73657bd4f4342485', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2f52a75f040805608ca901b032c15699e053975', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80c3f59d85146517289833b379bdbc26b77ac699', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1433501595,Updated Inversion Example using CGLS solver,"#34 Part-1
- Updated the example to use inversion using CGLS
- Also reduced the model shape(reduces time in building the sphinx docs, this was also implemented in this [example](https://pylops.readthedocs.io/en/stable/tutorials/poststack.html)) 
- Added the plot for inversion...",True,38,https://api.github.com/repos/PyLops/pylops-mpi/pulls/38,https://github.com/PyLops/pylops-mpi/pull/38,closed,134,15,2,6,1,0,0,0,[],2023-07-13 17:15:26+00:00,2023-07-16 07:04:45+00:00,222559.0,"2 days, 13:49:19",[],"[{'commit_sha': '6f82cb2ed01ad95678aa35397010a1b5a79c946b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdac07db212640a0f25cb43a5cdef1dc91927632', 'committer_username': 'mrava87', 'committer_name': 'Matteo Ravasi', 'committer_email': None, 'commit_date': datetime.datetime(2016, 10, 7, 7, 36, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50e85f2e9e598b50f79428ed0e159f484b79d3cc', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79aa44de80dae15b02d777684d59a82a63faa728', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eaf912b523eb3c3b325f21824f9b5e6f74c6627', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '900fab23a65f04762618b15f4c546d8b2cdbea91', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1448619125,Added LSM and Updated CGLS to work with broadcasted arrays,"For #46
- Updated CGLS to work with broadcasted arrays
- Added a test to verify the above using MPIHStack
- Added LSM in tutorials section.",True,50,https://api.github.com/repos/PyLops/pylops-mpi/pulls/50,https://github.com/PyLops/pylops-mpi/pull/50,closed,317,6,3,5,2,5,0,0,[],2023-07-25 15:00:53+00:00,2023-07-27 14:10:01+00:00,169748.0,"1 day, 23:09:08","[{'comment_id': 1276254154, 'comment_body': 'nstot?', 'comment_created': datetime.datetime(2023, 7, 27, 13, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1276262377, 'comment_body': 'Add short docstring', 'comment_created': datetime.datetime(2023, 7, 27, 13, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1276268090, 'comment_body': 'Also, it may be good to call this test `test_cgls_broadcastdata`', 'comment_created': datetime.datetime(2023, 7, 27, 13, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1276328018, 'comment_body': 'Missed this one, thanks for pointing this out.\r\nCorrected it...', 'comment_created': datetime.datetime(2023, 7, 27, 14, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}, {'comment_id': 1276329912, 'comment_body': 'Done...\r\nAlso added the example for `broadcastmodel`', 'comment_created': datetime.datetime(2023, 7, 27, 14, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': 'f04385ab87a0c14f9209f1a8f364ae0e5bb8cfb8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c452666e2644a93cb7fdbe77c68a56c85b208b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426b561710923d271e6f59ea240a63061e5e805c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8933e5c53a1bdfd927eea5c113a1f6410171140', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3cd3d1271a93f9a3c74a232b317c98fe00e065', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1396586669,Display gallery examples using mpi,"Like we had discussed..
- Added the `note` to `examples/README.rst`
- Added mpi_examples.sh which runs all the files in the folder, one can run using `sh mpi_examples.sh <num_processes>`
- Also added `run_examples` in the `Makefile`.
- Also changed the `NUM_PROCESSES` in `Makefile` to 3 for quicker results..",True,24,https://api.github.com/repos/PyLops/pylops-mpi/pulls/24,https://github.com/PyLops/pylops-mpi/pull/24,closed,33,2,3,5,9,2,0,0,[],2023-06-17 03:10:58+00:00,2023-07-11 05:50:41+00:00,2083183.0,"24 days, 2:39:43","[{'comment_id': 1258656962, 'comment_body': 'since you made a new command in the Makefile, makes sense to either add a comment about it here or in the main README under the doc section', 'comment_created': datetime.datetime(2023, 7, 10, 17, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1259115101, 'comment_body': 'I have added it over here, I think it would be better as it is for gallery examples....', 'comment_created': datetime.datetime(2023, 7, 11, 2, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rohanbabbar04', 'type': 'User'}]","[{'commit_sha': '7ac36a2062d21a4adcf5067714d2c0910f48ac1b', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c115ea4bb948277236a5cd3e435d85a39cc6293', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3387d50c009445af40e5c2a7cda724b2af88a9f3', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '803e4553eb88144e910813ee0f25d014545e50ed', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c37fa50189e6ef13f6de1b3d1531fea5aaef2b1', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1426164426,All tests now use assert_allclose,"- Some tests were not using `assert_allclose`, better to use `assert_allclose` for `DistributedArray` to check for accurate results. (Since we use it for all our other tests.)",True,32,https://api.github.com/repos/PyLops/pylops-mpi/pulls/32,https://github.com/PyLops/pylops-mpi/pull/32,closed,20,17,1,1,0,0,0,0,[],2023-07-09 03:51:12+00:00,2023-07-09 03:58:09+00:00,417.0,0:06:57,[],"[{'commit_sha': 'ce2eb7c43cbbfe849e8b1d1ac3c54beaaaee73ee', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1431295723,Inconsistency in broadcast,- Currently we assume that the person will input equal arrays at each rank,True,37,https://api.github.com/repos/PyLops/pylops-mpi/pulls/37,https://github.com/PyLops/pylops-mpi/pull/37,closed,29,2,1,3,10,0,0,0,[],2023-07-12 13:29:32+00:00,2023-07-19 03:35:39+00:00,569167.0,"6 days, 14:06:07",[],"[{'commit_sha': 'dcecd9cf7e40247244f61bcca1c5d3d41ed855b4', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '987438251b0fd2ba4363fcccf93954dd4b6dde0d', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4458304a3344727cce5bd494f2be40aced9308ba', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24
1453734613,Added MPIFirstDerivative,"Taking into consideration #49 
- Added `MPIFirstDerivative`
- Added tests and updated docs..",True,55,https://api.github.com/repos/PyLops/pylops-mpi/pulls/55,https://github.com/PyLops/pylops-mpi/pull/55,closed,626,1,7,16,28,4,0,0,[],2023-07-28 12:14:20+00:00,2023-08-04 03:40:35+00:00,573975.0,"6 days, 15:26:15","[{'comment_id': 1278518929, 'comment_body': 'mmh if the array is of `Partition.BROADCAST`, what does `x.axis` really mean? I guess from how DistributedArray is implemented right now, one could choose any axis, but here this would lead to problems... see my general comment', 'comment_created': datetime.datetime(2023, 7, 30, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1278519084, 'comment_body': 'is this really needed... if I look at 138, it seems to me you are setting the entire array, so we may be able to avoid setting it to zero first', 'comment_created': datetime.datetime(2023, 7, 30, 6, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1278519900, 'comment_body': 'add short doctoring', 'comment_created': datetime.datetime(2023, 7, 30, 6, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}, {'comment_id': 1278520231, 'comment_body': 'We may want to also add a test (just for one of the kind) where the input array is Nd (say 2d)... I think, this is where the problem I mentioned in the general comment will show up if you were to have x as a DistributedArray with axis!=0... tests are a useful way to catch issues, not only to check correctness.\r\n\r\nOf course, the test to add will be with axis=0, but I guess you get my point ;)', 'comment_created': datetime.datetime(2023, 7, 30, 6, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mrava87', 'type': 'User'}]","[{'commit_sha': '6492e1871f8963e98f9295301ca11031eed6a778', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2903bbe0ef1a2688c20aa8abfa7eb32cf336cc24', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90020c3447f3e24b6be0d13c7625fc6f9bdaa3f6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4c2810e0a4af3a49c4c5029f6bb995d492138b8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d2938684026625b556616e2747ffc0d081fad75', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12456c3f603dfe4fc3dd68eda0359392e21bdc1e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8462958e52c55d734bf533c221ddb36f93373bf6', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa560dfb498d4a45f31bdd8bc347550fae04d6c1', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5014a61376ca0bd1ef8924faff758c9712645f7c', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42aa9b490a02ca071da81d167dac3da685f75718', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f948c32d10a0157fa5d8e07cbd82d8f377be5bc7', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bbf19ac2104c279489de931f0fc245bda873f9f', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6788377d91d8ef7c52fb576202b644aac4af4f8', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbce2be740ed31b59ee0a9d63f7b15c6c3aa7a62', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af71a9598201caf7e63e33f195170ff40d0a379e', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c07885c5ba44cad513ea460950536072d60859', 'committer_username': 'rohanbabbar04', 'committer_name': 'Rohan Babbar ', 'committer_email': 'rohanbabbar0408@gmail.com', 'commit_date': datetime.datetime(2021, 1, 14, 3, 48, 54, tzinfo=datetime.timezone.utc)}]",Rohan Babbar ,77425744,rohanbabbar0408@gmail.com,User,,36,,28,24

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
638831778,pylops-mpi,PyLops/pylops-mpi,Python,1,13,2,3,293,3,10,0,"[{'id': 1888886429, 'number': 102, 'closed': datetime.datetime(2024, 5, 26, 13, 53, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 26, 12, 15, 32, tzinfo=datetime.timezone.utc), 'time_taken': 5885.0, 'time_delta': '1:38:05', 'additions': 38, 'deletions': 38, 'state': 'closed'}, {'id': 1824654652, 'number': 96, 'closed': datetime.datetime(2024, 4, 16, 6, 36, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 16, 6, 24, 43, tzinfo=datetime.timezone.utc), 'time_taken': 713.0, 'time_delta': '0:11:53', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1821533615, 'number': 95, 'closed': datetime.datetime(2024, 4, 14, 19, 44, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 13, 17, 2, 44, tzinfo=datetime.timezone.utc), 'time_taken': 96100.0, 'time_delta': '1 day, 2:41:40', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1803024842, 'number': 90, 'closed': datetime.datetime(2024, 4, 12, 18, 38, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 2, 17, 50, 21, tzinfo=datetime.timezone.utc), 'time_taken': 866884.0, 'time_delta': '10 days, 0:48:04', 'additions': 220, 'deletions': 70, 'state': 'closed'}, {'id': 1787692334, 'number': 89, 'closed': datetime.datetime(2024, 3, 29, 18, 49, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 23, 6, 58, 59, tzinfo=datetime.timezone.utc), 'time_taken': 561016.0, 'time_delta': '6 days, 11:50:16', 'additions': 246, 'deletions': 8, 'state': 'closed'}, {'id': 1598449390, 'number': 84, 'closed': datetime.datetime(2023, 11, 28, 21, 2, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 13, 9, 5, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1339031.0, 'time_delta': '15 days, 11:57:11', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1491559075, 'number': 78, 'closed': datetime.datetime(2023, 8, 28, 8, 4, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 7, 41, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1365.0, 'time_delta': '0:22:45', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1488347754, 'number': 77, 'closed': datetime.datetime(2023, 8, 28, 4, 33, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 16, 20, 30, tzinfo=datetime.timezone.utc), 'time_taken': 303165.0, 'time_delta': '3 days, 12:12:45', 'additions': 16, 'deletions': 1, 'state': 'closed'}, {'id': 1482961665, 'number': 75, 'closed': datetime.datetime(2023, 8, 21, 14, 20, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 14, 7, 9, tzinfo=datetime.timezone.utc), 'time_taken': 774.0, 'time_delta': '0:12:54', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1481710583, 'number': 73, 'closed': datetime.datetime(2023, 8, 20, 17, 56, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 20, 7, 55, 17, tzinfo=datetime.timezone.utc), 'time_taken': 36090.0, 'time_delta': '10:01:30', 'additions': 346, 'deletions': 2, 'state': 'closed'}, {'id': 1480967634, 'number': 71, 'closed': datetime.datetime(2023, 8, 18, 19, 2, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 18, 18, 54, 26, tzinfo=datetime.timezone.utc), 'time_taken': 495.0, 'time_delta': '0:08:15', 'additions': 159, 'deletions': 668, 'state': 'closed'}, {'id': 1478565235, 'number': 69, 'closed': datetime.datetime(2023, 8, 17, 8, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 7, 54, 9, tzinfo=datetime.timezone.utc), 'time_taken': 440.0, 'time_delta': '0:07:20', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 1476912769, 'number': 68, 'closed': datetime.datetime(2023, 8, 25, 15, 6, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 16, 6, 33, 43, tzinfo=datetime.timezone.utc), 'time_taken': 808373.0, 'time_delta': '9 days, 8:32:53', 'additions': 43, 'deletions': 20, 'state': 'closed'}, {'id': 1475479215, 'number': 66, 'closed': datetime.datetime(2023, 8, 15, 6, 41, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 15, 6, 32, 21, tzinfo=datetime.timezone.utc), 'time_taken': 557.0, 'time_delta': '0:09:17', 'additions': 674, 'deletions': 21, 'state': 'closed'}, {'id': 1475461963, 'number': 65, 'closed': datetime.datetime(2023, 8, 15, 6, 17, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 15, 6, 3, 48, tzinfo=datetime.timezone.utc), 'time_taken': 820.0, 'time_delta': '0:13:40', 'additions': 21, 'deletions': 0, 'state': 'closed'}, {'id': 1473968654, 'number': 64, 'closed': datetime.datetime(2023, 8, 15, 7, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 14, 8, 17, 37, tzinfo=datetime.timezone.utc), 'time_taken': 83783.0, 'time_delta': '23:16:23', 'additions': 540, 'deletions': 2, 'state': 'closed'}, {'id': 1472126082, 'number': 61, 'closed': datetime.datetime(2023, 8, 13, 3, 45, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 17, 20, 5, tzinfo=datetime.timezone.utc), 'time_taken': 123914.0, 'time_delta': '1 day, 10:25:14', 'additions': 154, 'deletions': 57, 'state': 'closed'}, {'id': 1467253648, 'number': 60, 'closed': datetime.datetime(2023, 8, 9, 13, 36, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 8, 17, 24, 40, tzinfo=datetime.timezone.utc), 'time_taken': 72727.0, 'time_delta': '20:12:07', 'additions': 235, 'deletions': 3, 'state': 'closed'}, {'id': 1462504429, 'number': 58, 'closed': datetime.datetime(2023, 8, 6, 5, 40, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 7, 59, 46, tzinfo=datetime.timezone.utc), 'time_taken': 164426.0, 'time_delta': '1 day, 21:40:26', 'additions': 426, 'deletions': 1, 'state': 'closed'}, {'id': 1455749894, 'number': 57, 'closed': datetime.datetime(2023, 7, 31, 10, 49, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 8, 2, 57, tzinfo=datetime.timezone.utc), 'time_taken': 9986.0, 'time_delta': '2:46:26', 'additions': 21, 'deletions': 15, 'state': 'closed'}, {'id': 1453734613, 'number': 55, 'closed': datetime.datetime(2023, 8, 4, 3, 40, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 12, 14, 20, tzinfo=datetime.timezone.utc), 'time_taken': 573975.0, 'time_delta': '6 days, 15:26:15', 'additions': 626, 'deletions': 1, 'state': 'closed'}, {'id': 1453679239, 'number': 54, 'closed': datetime.datetime(2023, 7, 28, 11, 48, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 11, 27, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1277.0, 'time_delta': '0:21:17', 'additions': 1123, 'deletions': 33, 'state': 'closed'}, {'id': 1452159701, 'number': 53, 'closed': datetime.datetime(2023, 7, 27, 15, 2, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 14, 53, 41, tzinfo=datetime.timezone.utc), 'time_taken': 556.0, 'time_delta': '0:09:16', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1448619125, 'number': 50, 'closed': datetime.datetime(2023, 7, 27, 14, 10, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 25, 15, 0, 53, tzinfo=datetime.timezone.utc), 'time_taken': 169748.0, 'time_delta': '1 day, 23:09:08', 'additions': 317, 'deletions': 6, 'state': 'closed'}, {'id': 1447155549, 'number': 49, 'closed': datetime.datetime(2023, 7, 27, 13, 36, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 24, 18, 12, 2, tzinfo=datetime.timezone.utc), 'time_taken': 242665.0, 'time_delta': '2 days, 19:24:25', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 1442167747, 'number': 48, 'closed': datetime.datetime(2023, 7, 21, 8, 8, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 5, 51, 35, tzinfo=datetime.timezone.utc), 'time_taken': 94619.0, 'time_delta': '1 day, 2:16:59', 'additions': 208, 'deletions': 8, 'state': 'closed'}, {'id': 1438818958, 'number': 45, 'closed': datetime.datetime(2023, 7, 19, 3, 44, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 8, 40, 5, tzinfo=datetime.timezone.utc), 'time_taken': 68690.0, 'time_delta': '19:04:50', 'additions': 150, 'deletions': 1, 'state': 'closed'}, {'id': 1437710988, 'number': 44, 'closed': datetime.datetime(2023, 7, 19, 7, 48, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 17, 17, 8, 1, tzinfo=datetime.timezone.utc), 'time_taken': 139243.0, 'time_delta': '1 day, 14:40:43', 'additions': 182, 'deletions': 0, 'state': 'closed'}, {'id': 1435944553, 'number': 43, 'closed': datetime.datetime(2023, 7, 16, 7, 31, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 15, 41, 43, tzinfo=datetime.timezone.utc), 'time_taken': 56972.0, 'time_delta': '15:49:32', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 1435757868, 'number': 42, 'closed': datetime.datetime(2023, 7, 16, 5, 14, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 8, 1, 7, tzinfo=datetime.timezone.utc), 'time_taken': 76411.0, 'time_delta': '21:13:31', 'additions': 34, 'deletions': 11, 'state': 'closed'}, {'id': 1435672429, 'number': 41, 'closed': datetime.datetime(2023, 7, 16, 4, 48, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 3, 56, 5, tzinfo=datetime.timezone.utc), 'time_taken': 89532.0, 'time_delta': '1 day, 0:52:12', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1433501595, 'number': 38, 'closed': datetime.datetime(2023, 7, 16, 7, 4, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 13, 17, 15, 26, tzinfo=datetime.timezone.utc), 'time_taken': 222559.0, 'time_delta': '2 days, 13:49:19', 'additions': 134, 'deletions': 15, 'state': 'closed'}, {'id': 1431295723, 'number': 37, 'closed': datetime.datetime(2023, 7, 19, 3, 35, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 13, 29, 32, tzinfo=datetime.timezone.utc), 'time_taken': 569167.0, 'time_delta': '6 days, 14:06:07', 'additions': 29, 'deletions': 2, 'state': 'closed'}, {'id': 1431107924, 'number': 36, 'closed': datetime.datetime(2023, 7, 14, 4, 57, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 11, 32, 25, tzinfo=datetime.timezone.utc), 'time_taken': 149109.0, 'time_delta': '1 day, 17:25:09', 'additions': 194, 'deletions': 1, 'state': 'closed'}, {'id': 1427905250, 'number': 35, 'closed': datetime.datetime(2023, 7, 10, 17, 31, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 17, 22, 40, tzinfo=datetime.timezone.utc), 'time_taken': 550.0, 'time_delta': '0:09:10', 'additions': 32, 'deletions': 27, 'state': 'closed'}, {'id': 1426164426, 'number': 32, 'closed': datetime.datetime(2023, 7, 9, 3, 58, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 9, 3, 51, 12, tzinfo=datetime.timezone.utc), 'time_taken': 417.0, 'time_delta': '0:06:57', 'additions': 20, 'deletions': 17, 'state': 'closed'}, {'id': 1424007385, 'number': 29, 'closed': datetime.datetime(2023, 7, 8, 9, 23, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 7, 5, 17, 34, tzinfo=datetime.timezone.utc), 'time_taken': 101184.0, 'time_delta': '1 day, 4:06:24', 'additions': 526, 'deletions': 0, 'state': 'closed'}, {'id': 1423084776, 'number': 28, 'closed': datetime.datetime(2023, 7, 9, 3, 28, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 15, 21, 59, tzinfo=datetime.timezone.utc), 'time_taken': 216392.0, 'time_delta': '2 days, 12:06:32', 'additions': 120, 'deletions': 0, 'state': 'closed'}, {'id': 1420666824, 'number': 27, 'closed': datetime.datetime(2023, 7, 5, 17, 31, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 8, 39, 10, tzinfo=datetime.timezone.utc), 'time_taken': 31941.0, 'time_delta': '8:52:21', 'additions': 100, 'deletions': 0, 'state': 'closed'}, {'id': 1409255679, 'number': 26, 'closed': datetime.datetime(2023, 7, 3, 3, 3, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 27, 7, 18, 21, tzinfo=datetime.timezone.utc), 'time_taken': 503103.0, 'time_delta': '5 days, 19:45:03', 'additions': 893, 'deletions': 9, 'state': 'closed'}, {'id': 1408209979, 'number': 25, 'closed': datetime.datetime(2023, 6, 27, 7, 4, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 26, 15, 34, 31, tzinfo=datetime.timezone.utc), 'time_taken': 55811.0, 'time_delta': '15:30:11', 'additions': 709, 'deletions': 4, 'state': 'closed'}, {'id': 1396586669, 'number': 24, 'closed': datetime.datetime(2023, 7, 11, 5, 50, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 17, 3, 10, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2083183.0, 'time_delta': '24 days, 2:39:43', 'additions': 33, 'deletions': 2, 'state': 'closed'}, {'id': 1391053228, 'number': 23, 'closed': datetime.datetime(2023, 6, 13, 17, 53, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 13, 17, 37, 58, tzinfo=datetime.timezone.utc), 'time_taken': 913.0, 'time_delta': '0:15:13', 'additions': 45, 'deletions': 12, 'state': 'closed'}, {'id': 1389149601, 'number': 22, 'closed': datetime.datetime(2023, 6, 13, 10, 57, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 17, 50, 17, tzinfo=datetime.timezone.utc), 'time_taken': 61613.0, 'time_delta': '17:06:53', 'additions': 112, 'deletions': 12, 'state': 'closed'}, {'id': 1387494081, 'number': 20, 'closed': datetime.datetime(2023, 6, 11, 11, 24, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 11, 11, 15, 36, tzinfo=datetime.timezone.utc), 'time_taken': 529.0, 'time_delta': '0:08:49', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 1387114895, 'number': 18, 'closed': datetime.datetime(2023, 6, 10, 15, 35, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 10, 11, 20, 3, tzinfo=datetime.timezone.utc), 'time_taken': 15332.0, 'time_delta': '4:15:32', 'additions': 45, 'deletions': 3, 'state': 'closed'}, {'id': 1384289902, 'number': 13, 'closed': datetime.datetime(2023, 6, 10, 11, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 11, 32, 12, tzinfo=datetime.timezone.utc), 'time_taken': 172128.0, 'time_delta': '1 day, 23:48:48', 'additions': 39, 'deletions': 0, 'state': 'closed'}, {'id': 1382197045, 'number': 12, 'closed': datetime.datetime(2023, 6, 7, 14, 21, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 8, 39, 15, tzinfo=datetime.timezone.utc), 'time_taken': 20553.0, 'time_delta': '5:42:33', 'additions': 54, 'deletions': 0, 'state': 'closed'}, {'id': 1380246444, 'number': 11, 'closed': datetime.datetime(2023, 6, 19, 3, 25, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 6, 6, 27, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1112243.0, 'time_delta': '12 days, 20:57:23', 'additions': 135, 'deletions': 37, 'state': 'closed'}, {'id': 1378180421, 'number': 10, 'closed': datetime.datetime(2023, 6, 5, 3, 53, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 3, 42, 55, tzinfo=datetime.timezone.utc), 'time_taken': 630.0, 'time_delta': '0:10:30', 'additions': 37, 'deletions': 13, 'state': 'closed'}, {'id': 1377863081, 'number': 8, 'closed': datetime.datetime(2023, 6, 5, 7, 59, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 17, 45, 17, tzinfo=datetime.timezone.utc), 'time_taken': 51246.0, 'time_delta': '14:14:06', 'additions': 541, 'deletions': 1, 'state': 'closed'}, {'id': 1376202854, 'number': 7, 'closed': datetime.datetime(2023, 6, 5, 15, 8, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 2, 19, 5, 48, tzinfo=datetime.timezone.utc), 'time_taken': 244957.0, 'time_delta': '2 days, 20:02:37', 'additions': 225, 'deletions': 70, 'state': 'closed'}, {'id': 1374311806, 'number': 6, 'closed': datetime.datetime(2023, 6, 2, 17, 55, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 1, 15, 26, 52, tzinfo=datetime.timezone.utc), 'time_taken': 95313.0, 'time_delta': '1 day, 2:28:33', 'additions': 48, 'deletions': 25, 'state': 'closed'}, {'id': 1370584699, 'number': 2, 'closed': datetime.datetime(2023, 5, 31, 10, 36, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 14, 31, 41, tzinfo=datetime.timezone.utc), 'time_taken': 72291.0, 'time_delta': '20:04:51', 'additions': 482, 'deletions': 0, 'state': 'closed'}]"
