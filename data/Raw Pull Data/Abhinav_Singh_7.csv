pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
475346017,Implementing Jaeger Tracing in RGW,Continuing #35860 ,False,36878,https://api.github.com/repos/ceph/ceph/pulls/36878,https://github.com/ceph/ceph/pull/36878,closed,3086,1686,99,7,60,127,5,0,"[{'name': 'rgw'}, {'name': 'needs-review'}, {'name': 'needs-rebase'}, {'name': 'stale'}, {'name': 'tracing'}]",2020-08-28 11:18:08+00:00,2021-07-21 17:01:06+00:00,28273378.0,"327 days, 5:42:58","[{'comment_id': 479808959, 'comment_body': '@suab321321 you might need to specify to add opentracing library and includedirs in this target. Please refer previous version of code', 'comment_created': datetime.datetime(2020, 8, 30, 19, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 479848686, 'comment_body': '@ideepika I m doing this in one place inside `ExternalProjectHelper.cmake` which is called from `IncludeJaeger.cmake`', 'comment_created': datetime.datetime(2020, 8, 31, 1, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 483981693, 'comment_body': 'I would like to see a namespace qualified (not sure.., e.g.) jaeger_tracing::Span rather than namespace-lifted Span, to avoid namespace clutter, and to make it easy to find it', 'comment_created': datetime.datetime(2020, 9, 5, 19, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mattbenjamin', 'type': 'User'}, {'comment_id': 483981720, 'comment_body': 'ditto, suppressing further examples', 'comment_created': datetime.datetime(2020, 9, 5, 19, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mattbenjamin', 'type': 'User'}, {'comment_id': 483983001, 'comment_body': 'noted\r\n', 'comment_created': datetime.datetime(2020, 9, 5, 19, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 483983060, 'comment_body': '@mattbenjamin  should I do those to helper functions too', 'comment_created': datetime.datetime(2020, 9, 5, 19, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 483991716, 'comment_body': 'depends if their origin is clear, but most likely, yes--especially if you shorten the namespace', 'comment_created': datetime.datetime(2020, 9, 5, 21, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mattbenjamin', 'type': 'User'}, {'comment_id': 484016596, 'comment_body': 'okay', 'comment_created': datetime.datetime(2020, 9, 6, 3, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484054386, 'comment_body': '```suggestion\r\n#include <cstring>\r\n```', 'comment_created': datetime.datetime(2020, 9, 6, 10, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484054406, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 9, 6, 10, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484054621, 'comment_body': 'why do you implement in header. can be moved to cc?', 'comment_created': datetime.datetime(2020, 9, 6, 10, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484054651, 'comment_body': 'nullptr', 'comment_created': datetime.datetime(2020, 9, 6, 10, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484054977, 'comment_body': 'if you want to use a singleton, keep it inside the cc file.\r\nyou can wrap it with function, so it does not look like a singleton to the users.\r\nalso prevent from anyone changing it in ways that are not desirable.', 'comment_created': datetime.datetime(2020, 9, 6, 11, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484055064, 'comment_body': 'this will also allow you to remove many of the includes here, and move them in the cc file only', 'comment_created': datetime.datetime(2020, 9, 6, 11, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484055379, 'comment_body': 'please follow the our brackets/block [coding style](https://github.com/ceph/ceph/blob/master/CodingStyle)', 'comment_created': datetime.datetime(2020, 9, 6, 11, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484055581, 'comment_body': 'this does not protect you from multiple initializations. ', 'comment_created': datetime.datetime(2020, 9, 6, 11, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484055784, 'comment_body': 'why create a local variable?\r\njust return the Span object', 'comment_created': datetime.datetime(2020, 9, 6, 11, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484057467, 'comment_body': ""passing a unique pointer as reference is usually an indications that something is wrong here.\r\nif you don't want to pass ownership, pass a a bare pointer, if you want to pass ownership pass unique pointer by value"", 'comment_created': datetime.datetime(2020, 9, 6, 11, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484057756, 'comment_body': 'why do you init here?\r\nis it done for reconnections?', 'comment_created': datetime.datetime(2020, 9, 6, 11, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484057901, 'comment_body': '[nit] why `span_1`? why not `span`?', 'comment_created': datetime.datetime(2020, 9, 6, 11, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484057958, 'comment_body': 'what are the new parameters on top of `span_1``?', 'comment_created': datetime.datetime(2020, 9, 6, 11, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484058813, 'comment_body': ""why do you pass span to  functions that don't use it?"", 'comment_created': datetime.datetime(2020, 9, 6, 11, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484059518, 'comment_body': 'My current implementation is invloves passing Span as optional_parameter to functions instead of the previous one which used stack. Majarity functions are just inherited from other classes so to make them compile I need to overload those functions too with spans and it includes functions which doesnt need tracing', 'comment_created': datetime.datetime(2020, 9, 6, 11, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484059550, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 6, 11, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484059756, 'comment_body': 'init means connecting jaeger backend cant do it in common_init as it runs just one time when server starts, internally `init` checks if the server is already been initialized if yes it wont initialize again', 'comment_created': datetime.datetime(2020, 9, 6, 11, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060012, 'comment_body': 'I just want a const reference here so that the child_span can use this to refer\r\nhttps://github.com/jaegertracing/jaeger-client-cpp/blob/master/examples/App.cpp', 'comment_created': datetime.datetime(2020, 9, 6, 11, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060119, 'comment_body': 'so this is for retry in case the initial connection failed?\r\nwhat about the case that the initial connection was ok, but disconnected after that?\r\nis there an internal reconnect mechanism for opentracer?', 'comment_created': datetime.datetime(2020, 9, 6, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484060121, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 6, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060302, 'comment_body': 'it does at the start of the function there is a atomic variable to check if it been initialized before\r\n`if(jaeger_initialized) return;`', 'comment_created': datetime.datetime(2020, 9, 6, 11, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060333, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 6, 11, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060429, 'comment_body': 'But then it will give me multiple definations error so I chose to declare in .h file', 'comment_created': datetime.datetime(2020, 9, 6, 11, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060442, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 6, 11, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060462, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 6, 11, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060841, 'comment_body': 'but race condition can still happen. you set the variable after you actually initialize', 'comment_created': datetime.datetime(2020, 9, 6, 11, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484060931, 'comment_body': 'My main objective of having tracer.cc is to define the declared extern variable, should I just move those rgw_common.cc?', 'comment_created': datetime.datetime(2020, 9, 6, 11, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484060936, 'comment_body': 'declare as static global variable in cc file\r\ndo not expose directly in header file\r\nexpose functionality via functions', 'comment_created': datetime.datetime(2020, 9, 6, 11, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484061089, 'comment_body': 'then just pass a const bare pointer. there is no ownership passing here', 'comment_created': datetime.datetime(2020, 9, 6, 12, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484062803, 'comment_body': 'Nope this mechanism is not there, jaeger uses UDP connection to pass span\r\ndata to server so reliability is a issue here', 'comment_created': datetime.datetime(2020, 9, 6, 12, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484063193, 'comment_body': 'By initialied before I means it checks if value is true or not. Do you mean I m assigning value to it before intializing it? ', 'comment_created': datetime.datetime(2020, 9, 6, 12, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 484088091, 'comment_body': 'i mean that if 2 threads are going to call this function, there is a chance that both will initialize before one of them sets the atomic boolean', 'comment_created': datetime.datetime(2020, 9, 6, 16, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 487177434, 'comment_body': 'this cant be done because the parent_span is is a nullptr as default value so  `&parent_span` will cause crash, and this will happen when we `WITH_JAEGER` flag off. So I think it is safe pass them as reference.', 'comment_created': datetime.datetime(2020, 9, 11, 17, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 487179119, 'comment_body': 'these are default ones as c++ doesnt allow named parameter so I had pass the default parameter of the all the optional parameter before actually passing the original span parameter', 'comment_created': datetime.datetime(2020, 9, 11, 17, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 487532763, 'comment_body': 'if we do not have a reconnect mechanism, why do we need to call init on every request?', 'comment_created': datetime.datetime(2020, 9, 13, 13, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 487537217, 'comment_body': ""i don't understand how passing a bare pointer is causing a crash?\r\nIMO, best practice around unique_ptr is to have it as a local variable in the function where you allocate it, and pass it as a bare pointer to all other functions.\r\nif it is nullptr by default, you can check if it is null before you use it.\r\ni don't see how pointer ownership needs to be handled by anyone else than the first function?"", 'comment_created': datetime.datetime(2020, 9, 13, 14, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 487543035, 'comment_body': 'actually its purpose is to be called once only, but I cant put this inside common_init.cc because this will run only during start and if by any chance it misses to connect at that time then the whole server is needed to be restarted again for reconnection,\r\nputtin it inside asio_frontend because in this way there will be a way to check for connection if not connected on everry request, and you know a atomic bool flag is already there to check if it is connected inside init_tracer() method', 'comment_created': datetime.datetime(2020, 9, 13, 15, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 487544771, 'comment_body': ""1.Reference passing does change owernship of smart pointers.\r\n2.the checking method will add a extra line of code which can eliminated if I use my reference passing mechanism.\r\n\r\nI m not passing it as std::move which causes the ownership to change.\r\n\r\nhttps://stackoverflow.com/questions/17368644/passing-smart-pointers-by-reference#:~:text=It's%20ok%20to%20pass%20a,corruption%20if%20you%20did%20that."", 'comment_created': datetime.datetime(2020, 9, 13, 15, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 488458456, 'comment_body': ""1. right, but if you don't want to change ownership you don't need a smart pointer in the API to begin with\r\n2. i dont get that, if the pointer is null you need to check it regardless of whether it is a unique pointer or not\r\n\r\nthe stackoverflow comment discussion says:\r\n* don't pass them by-value\r\n* ok to pass by reference (unless you pass into a reference data member)\r\n\r\nIf something is OK it means you CAN do that, not that you SHOULD\r\nI don't see any point in using them in the API at all. except for introducing unnecessary confusion as for why do you use them. when someone sees a unique_ptr used in the API, they assume that there is some ownership change in the functions, which is not the case here.\r\n"", 'comment_created': datetime.datetime(2020, 9, 15, 7, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 488461287, 'comment_body': '> actually its purpose is to be called once only, but I cant put this inside common_init.cc because this will run only during start and if by any chance it misses to connect at that time then the whole server is needed to be restarted again for reconnection,\r\n\r\nif the transport is over UDP, what would happen during the connection process?\r\n\r\n> puttin it inside asio_frontend because in this way there will be a way to check for connection if not connected on everry request, and you know a atomic bool flag is already there to check if it is connected inside init_tracer() method\r\n\r\nnote that the atomic bool does not protect you from race condition when multiple call to asio_frontend are done at the same time in different threads.\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 15, 7, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 488683211, 'comment_body': '@yu\r\nI could have done things here like this \r\n```\r\nif(parent_span)\r\n  child(""name"",parent_span)` \r\n```\r\neverywhere, which is just makes the source code a little uglier and long too, doing function call according to me is much clean :)\r\nSecond yes passing reference to of unique_ptr is bad, but only if we are storing it somewhere like either calling a constructor with this reference or using it initialize a unique_ptr, but in no way I m storing this reference, this reference is used by jaeger internal library call which I think only extracts the id of the parent_span to make child--parent relationship into its backend, also the use of `const` confirms this that in no way there will be a change of ownership as std::move also gets ruled beacuse of it.\r\n\r\nThe main strong reason I m using it because I saw that jaeger-client-cpp itself uses this to in its example code. https://github.com/jaegertracing/jaeger-client-cpp/blob/master/examples/App.cpp the example\r\n', 'comment_created': datetime.datetime(2020, 9, 15, 13, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 488697398, 'comment_body': ""i dont understand why you need to check the pointer before passing it in.\r\njust pass nullptr.\r\nyou need to check for null only before you dereference the pointer.\r\n\r\non top of that, you need to check if a unique_ptr is null before dereferencing it as well, so i don't understand why it makes the code uglier?"", 'comment_created': datetime.datetime(2020, 9, 15, 14, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 488711801, 'comment_body': 'Yeah sorry my bad, I was speaking without testing it, there is no need for checking null condition while calling. But dont you think that this wont affect anything, because both will be working fine :)', 'comment_created': datetime.datetime(2020, 9, 15, 14, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 488748707, 'comment_body': 'functionally both are working the same.\r\nhowever, adding unnecessary complexity to APIs is always bad.\r\nanyone reading the code will have to dig into it and figure out why you pass the unique_ptr, and whether you have ownership change to the pointer - this is unnecessary mental burden\r\n', 'comment_created': datetime.datetime(2020, 9, 15, 15, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494211398, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 9, 24, 10, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494211588, 'comment_body': 'please remove empty line', 'comment_created': datetime.datetime(2020, 9, 24, 10, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494211942, 'comment_body': 'please split to header and cc file', 'comment_created': datetime.datetime(2020, 9, 24, 10, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494212122, 'comment_body': 'where do you use `tracer`?', 'comment_created': datetime.datetime(2020, 9, 24, 10, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494212559, 'comment_body': 'please add error handling. add error message to debug log ', 'comment_created': datetime.datetime(2020, 9, 24, 10, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494213025, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 24, 10, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 494213632, 'comment_body': 'it is required this is the main containers for all the Spans', 'comment_created': datetime.datetime(2020, 9, 24, 10, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 494213745, 'comment_body': 'I dont need a .cc file for anything should i just make .cc file and one line of including .h file?', 'comment_created': datetime.datetime(2020, 9, 24, 10, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 494215292, 'comment_body': 'can you show where it is used in the code?', 'comment_created': datetime.datetime(2020, 9, 24, 10, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494216097, 'comment_body': 'you **do** need cc file - this will minimize dependencies.\r\nother files that include tracer.h should not have dependency with jaeger', 'comment_created': datetime.datetime(2020, 9, 24, 10, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494216176, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 9, 24, 10, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494216265, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 9, 24, 10, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494216337, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 9, 24, 10, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494216495, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 9, 24, 10, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494239267, 'comment_body': '```suggestion\r\n  static inline std::unique_ptr<Span> child_span(const char* span_name, const Span* parent_span){\r\n```', 'comment_created': datetime.datetime(2020, 9, 24, 11, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494243427, 'comment_body': '[nit] you can use `auto` or maybe `const auto` here and in all other places where you create a new span or child span', 'comment_created': datetime.datetime(2020, 9, 24, 11, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494244670, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 9, 24, 11, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494245315, 'comment_body': 'you have the span in req_state, why do you also need it as a parameter?\r\nthis question apply to other places in the code', 'comment_created': datetime.datetime(2020, 9, 24, 11, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494824058, 'comment_body': '`s/JaegerTracer.rst/jaegertracing.rst`\r\n\r\n- we would want to keep it neutral as a `intro and how to guide to using distributed tracing in Ceph` you may want to rephrase and add a `rgw tracing` section.\r\n- can you turn steps to command users can directly copy and use. \r\n- can you add the example script directly, instead of link', 'comment_created': datetime.datetime(2020, 9, 25, 8, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 494861529, 'comment_body': ""won't need our intent behind code in developer's guide, we want them to:\r\n\r\n1. get started with tracing\r\n2. let them know a bit about the components and architecture of tracing library"", 'comment_created': datetime.datetime(2020, 9, 25, 9, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 494862980, 'comment_body': 'Span is being used in other parts of Ceph as well this will lead to conflict \r\n`\r\n```suggestion\r\n typedef std::unique_ptr<opentracing::Span> jspan;\r\n```', 'comment_created': datetime.datetime(2020, 9, 25, 9, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 494877124, 'comment_body': '```suggestion\r\n  static inline void finish_span(Span* span)\r\n```', 'comment_created': datetime.datetime(2020, 9, 25, 9, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 494879446, 'comment_body': 'please remove extra lines, also can you update code to follow:  https://github.com/ceph/ceph/blob/master/CodingStyle', 'comment_created': datetime.datetime(2020, 9, 25, 9, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 494892057, 'comment_body': 'if I understand correctly, you are using parent_span as const, then how would it be adapted to have another reference later or do you intend to keep them null?\r\n```suggestion\r\n  void execute(const jaeger_tracing::Span* parent_span = nullptr) override;\r\n```', 'comment_created': datetime.datetime(2020, 9, 25, 10, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 494914040, 'comment_body': 'agree. docs here should describe what a developer should do if they want to add tracing to a new function', 'comment_created': datetime.datetime(2020, 9, 25, 11, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 494916156, 'comment_body': 'i think there should be 2 different docs:\r\n* developer guide: give some background on architecture and explain how to trace new functions and paths\r\n* user guide (new doc): info on how to turn tracing on/off (via config) and how to configure the tracing ecosystem', 'comment_created': datetime.datetime(2020, 9, 25, 11, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 495174982, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 25, 18, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495176078, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2020, 9, 25, 18, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495177670, 'comment_body': 'noted\r\n', 'comment_created': datetime.datetime(2020, 9, 25, 19, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495177735, 'comment_body': 'noted\r\n', 'comment_created': datetime.datetime(2020, 9, 25, 19, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495178159, 'comment_body': 'the span in req_state is just a root_span, which wont serve the purpose of parent_span here', 'comment_created': datetime.datetime(2020, 9, 25, 19, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495178418, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 25, 19, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495178519, 'comment_body': '@yuval can you explain what needs to be changed', 'comment_created': datetime.datetime(2020, 9, 25, 19, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495187745, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 25, 19, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495194525, 'comment_body': '@ideepika  \r\nfucn a(parent_span){\r\nSpan childspan=childspann(parent_span);\r\nfuncb(childspan); now this child span is carrying the load of parent_span for new function,not the parameter parent_span\r\n}', 'comment_created': datetime.datetime(2020, 9, 25, 19, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495196677, 'comment_body': '```\r\nopentracing::Tracer::InitGlobal(\r\n        std::static_pointer_cast<opentracing::Tracer>(tracer));\r\n```', 'comment_created': datetime.datetime(2020, 9, 25, 19, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495848705, 'comment_body': ""@suab321321 since the spans are designed to be unique_ptr's when we create them and so forth, I think we can typedef jsan completely \r\n```suggestion\r\n  typedef std::unique_ptr<opentracing::Span> jspan;\r\n```\r\nif otherwise, can you explain your intent"", 'comment_created': datetime.datetime(2020, 9, 28, 10, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495861123, 'comment_body': 'i think these were introduced by mistake, can you revert them back?', 'comment_created': datetime.datetime(2020, 9, 28, 11, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495861680, 'comment_body': 'not related', 'comment_created': datetime.datetime(2020, 9, 28, 11, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495870517, 'comment_body': 'umm, I cannot find span this function, is it tracing handle_data in subroutine?', 'comment_created': datetime.datetime(2020, 9, 28, 11, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495870704, 'comment_body': 'not related\r\n', 'comment_created': datetime.datetime(2020, 9, 28, 11, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495873029, 'comment_body': '```suggestion\r\n                    const OpenParams& params = {},\r\n                    const jaeger_tracing::jspan* const parent_span = nullptr);\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495874960, 'comment_body': '```suggestion\r\n    int open(const OpenParams& params = {},\r\n    const jaeger_tracing::jspan* const parent_span = nullptr);\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495875270, 'comment_body': '```suggestion\r\n                               const OpenParams& params, \r\n                               const jaeger_tracing::jspan* const parent_span)\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495875827, 'comment_body': 'not related', 'comment_created': datetime.datetime(2020, 9, 28, 11, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495876187, 'comment_body': '```suggestion\r\n                                 optional_yield y, \r\n                                 const jaeger_tracing::jspan* const parent_span = nullptr) override;\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495876277, 'comment_body': '```suggestion\r\n                                   optional_yield y, \r\n                                   const jaeger_tracing::jspan* const parent_span = nullptr) override;\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495876589, 'comment_body': '```suggestion\r\n                                                    optional_yield y, \r\n                                                    const jaeger_tracing::jspan* parent_span)\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495876935, 'comment_body': '```suggestion\r\n                                                  optional_yield y, \r\n                                                  const jaeger_tracing::jspan* parent_span)\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495877294, 'comment_body': '```suggestion\r\n                                   optional_yield y, \r\n                                   const jaeger_tracing::jspan* const parent_span = nullptr) = 0;\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495877647, 'comment_body': '```suggestion\r\n                                 optional_yield y, \r\n                                 const jaeger_tracing::jspan* const parent_span = nullptr) = 0;\r\n```', 'comment_created': datetime.datetime(2020, 9, 28, 11, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495878411, 'comment_body': '[nit] since the parameter is long, can you make it multiline, for readibility. I have dropped a few suggestions, thx', 'comment_created': datetime.datetime(2020, 9, 28, 11, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495879562, 'comment_body': 'since right now we are not sure we need a yaml input file, let\'s input the parms this way: \r\n```\r\nconstexpr auto kConfigYAML = R""cfg(\r\n            disabled: false\r\n            sampler:\r\n                type: const\r\n                param: 1\r\n            reporter:\r\n                queueSize: 100\r\n                bufferFlushInterval: 10\r\n                logSpans: false\r\n                localAgentHostPort: 127.0.0.1:6831\r\n            headers:\r\n                jaegerDebugHeader: debug-id\r\n                jaegerBaggageHeader: baggage\r\n                TraceContextHeaderName: trace-id\r\n                traceBaggageHeaderPrefix: ""testctx-""\r\n            baggage_restrictions:\r\n                denyBaggageOnInitializationFailure: false\r\n                hostPort: 127.0.0.1:5778\r\n                refreshInterval: 60\r\n            )cfg"";\r\n\r\n        const auto config = jaegertracing::Config::parse(YAML::Load(kConfigYAML));\r\n        auto tracer = jaegertracing::Tracer::make(""postgresql"", config);\r\n        opentracing::Tracer::InitGlobal(tracer);\r\n```\r\nhttps://github.com/ringerc/jaeger-cpp-client/commit/2bb946b75e4647b193084d2524dbe0949b05a293', 'comment_created': datetime.datetime(2020, 9, 28, 11, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495881077, 'comment_body': 'we can have one init function, but call the same using `jaeger_tracing::init_jaeger` ?', 'comment_created': datetime.datetime(2020, 9, 28, 11, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495884699, 'comment_body': 'i think NULL is not required here', 'comment_created': datetime.datetime(2020, 9, 28, 11, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495885866, 'comment_body': 'not related', 'comment_created': datetime.datetime(2020, 9, 28, 12, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495887520, 'comment_body': 'is this for rgw performance testing with jaeger?\r\n', 'comment_created': datetime.datetime(2020, 9, 28, 12, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495890505, 'comment_body': ""okay, so it's not actually the parent that is being passed in these function, in that case can you change parent_span to just span, it might confuse in thinking the current span is the parent span"", 'comment_created': datetime.datetime(2020, 9, 28, 12, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495921433, 'comment_body': '@suab321321 why not use `jaegertracing::init_tracer`', 'comment_created': datetime.datetime(2020, 9, 28, 13, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ideepika', 'type': 'User'}, {'comment_id': 495962148, 'comment_body': '`unique_ptr<jaeger_tracing::jspan>` unique_ptr which but I m using `auto` to keep it simple\r\n`jaeger_tracing::opentracing::Span` this is raw pointer that is passed around as a pointer to functions, so I have choose to trypedef the second one otherwise the functions will look ugly, and for the first one I m already using auto instead of writing those', 'comment_created': datetime.datetime(2020, 9, 28, 14, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495962579, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 28, 14, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495962807, 'comment_body': 'noted\r\n', 'comment_created': datetime.datetime(2020, 9, 28, 14, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495964130, 'comment_body': 'as the classes of rgw is very interelated through inheritance, defining the virtual functions, etc so I had to give them these parameters otherwise my code wont compile', 'comment_created': datetime.datetime(2020, 9, 28, 14, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495964225, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 28, 14, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495964442, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 28, 14, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495965504, 'comment_body': 'this just a work around when WITH_JAEGER is not defined as I m not using `#ifdef WITH_JAEGER` anywhere in the code', 'comment_created': datetime.datetime(2020, 9, 28, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495967743, 'comment_body': 'as c++ does not have the named parameter so I had to give all the paramtere a value to ultimately get to my parent_span. Value NULL is default value if nothing is passed', 'comment_created': datetime.datetime(2020, 9, 28, 14, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 495967818, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 28, 14, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 496264711, 'comment_body': 'parent_span is still good because they will act as a parent_span parent for the current function in which they have received as parameter', 'comment_created': datetime.datetime(2020, 9, 28, 22, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 496488161, 'comment_body': 'try to minimize these. are you sure that ""handle_data()"" needs tracing?\r\nplease see this comment: https://github.com/ceph/ceph/pull/36878#issuecomment-698271375', 'comment_created': datetime.datetime(2020, 9, 29, 7, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 496490056, 'comment_body': ""you don't need this include"", 'comment_created': datetime.datetime(2020, 9, 29, 7, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 496490199, 'comment_body': 'move this include to cc file', 'comment_created': datetime.datetime(2020, 9, 29, 7, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 497062023, 'comment_body': 'noted', 'comment_created': datetime.datetime(2020, 9, 29, 21, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 497062168, 'comment_body': 'I need otherwise it wont compile', 'comment_created': datetime.datetime(2020, 9, 29, 21, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'suab321321', 'type': 'User'}, {'comment_id': 497281924, 'comment_body': 'maybe you need that in the cc file, but not here', 'comment_created': datetime.datetime(2020, 9, 30, 6, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}]","[{'commit_sha': '39961ebd5f9d3f39fd11536d8961e9d63ff94739', 'committer_username': 'suab321321', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 23, 7, 56, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fb15366b997aa429037f3ed68a42662a155d5dc', 'committer_username': 'suab321321', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 23, 7, 56, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f52c43d3f3ed95a4390e5af2f48982f3a9fc9316', 'committer_username': 'suab321321', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 23, 7, 56, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db6b5321bbe3d4d619af3e857b7475ed43e81cf3', 'committer_username': 'suab321321', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 23, 7, 56, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fe6e3d7550eb0f380654c1b81d2036f418687d', 'committer_username': 'suab321321', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 23, 7, 56, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb38b44d2073e8681e34588d15c844132f35e71', 'committer_username': 'suab321321', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 23, 7, 56, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7e2c23900f867dd468b9cb149bed4b53f4fa18', 'committer_username': 'suab321321', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 23, 7, 56, 7, tzinfo=datetime.timezone.utc)}]",,52123334,,User,,18,,3,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2310495,ceph,ceph/ceph,C++,5929,13764,657,1921,147745,935,218,935,"[{'id': 498617359, 'number': 37569, 'closed': datetime.datetime(2022, 3, 8, 18, 36, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 6, 15, 3, 22, tzinfo=datetime.timezone.utc), 'time_taken': 44767965.0, 'time_delta': '518 days, 3:32:45', 'additions': 2632, 'deletions': 1192, 'state': 'closed'}, {'id': 475346017, 'number': 36878, 'closed': datetime.datetime(2021, 7, 21, 17, 1, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 11, 18, 8, tzinfo=datetime.timezone.utc), 'time_taken': 28273378.0, 'time_delta': '327 days, 5:42:58', 'additions': 3086, 'deletions': 1686, 'state': 'closed'}, {'id': 475334637, 'number': 36876, 'closed': datetime.datetime(2020, 8, 28, 11, 1, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 10, 52, 1, tzinfo=datetime.timezone.utc), 'time_taken': 554.0, 'time_delta': '0:09:14', 'additions': 3034, 'deletions': 1691, 'state': 'closed'}, {'id': 442259234, 'number': 35860, 'closed': datetime.datetime(2020, 9, 14, 9, 33, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 19, 53, 33, tzinfo=datetime.timezone.utc), 'time_taken': 6529209.0, 'time_delta': '75 days, 13:40:09', 'additions': 3060, 'deletions': 1696, 'state': 'closed'}, {'id': 385158776, 'number': 33803, 'closed': datetime.datetime(2020, 10, 4, 2, 41, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 16, 6, 18, tzinfo=datetime.timezone.utc), 'time_taken': 18182104.0, 'time_delta': '210 days, 10:35:04', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 385140290, 'number': 33798, 'closed': datetime.datetime(2020, 3, 7, 15, 47, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 12, 32, 12, tzinfo=datetime.timezone.utc), 'time_taken': 11704.0, 'time_delta': '3:15:04', 'additions': 22, 'deletions': 4, 'state': 'closed'}]"
