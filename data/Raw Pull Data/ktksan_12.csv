pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
455312523,feat: Add BeforeAfterEvent,"Adds AbstractBeforeAfterEvent : Immutable event to notify a change in a certain value.
This is a generic event and more specific events implementing this event should be fired and reacted to.",True,4095,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4095,https://github.com/MovingBlocks/Terasology/pull/4095,closed,35,0,1,1,2,7,2,0,"[{'name': 'Topic: Architecture'}, {'name': 'Type: Improvement'}]",2020-07-22 19:30:50+00:00,2020-07-27 10:28:51+00:00,399481.0,"4 days, 14:58:01","[{'comment_id': 459635366, 'comment_body': 'Did you ever work with [Generics](https://www.baeldung.com/java-generics), as in, implemented a generic class? I\'d think this would be a good case where we can use that - don\'t fix the event to be based on float right away.\r\n\r\nSo here\'s my suggestion:\r\n```suggestion\r\npublic abstract class BeforeAfterEvent<T> implements Event {\r\n```\r\n\r\n- make the class abstract to ensure nobody can create a `new BeforeAfterEvent(""foo"", ""bar"")` out of thin air, but has to extend it to use it.\r\n- shorten the name to `BeforeAfterEvent` - I don\'t see any good value in explicitly prefixing the ""Abstract"" part, and the inheritance line will read a little bit cleaner\r\n  ```java\r\n  public class HealthChangedEvent extends BeforeAfterEvent<Float> { ... }\r\n  ```\r\n- make the type of the changed value generic `<T>`. this allows to reuse the same base class regardless whether the value is an integer, a float, a string, or anything else. However, this implies that we cannot offer the `getChange` on this base class.\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 18, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459635728, 'comment_body': 'If the class works with a generic `<T>` these values become of type `T`.\r\n```suggestion\r\n    protected final T oldValue;\r\n    protected final T newValue;\r\n```\r\n\r\nIf subclasses should be able to access `oldValue` and `newValue` those should be protected instead of private.', 'comment_created': datetime.datetime(2020, 7, 23, 18, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459636156, 'comment_body': 'Same here:\r\n```suggestion\r\n    AbstractBeforeAfterEvent(final T oldValue, final T newValue) {\r\n```\r\n\r\nWe can also mark them final as we are not going to change them ever in this event.', 'comment_created': datetime.datetime(2020, 7, 23, 18, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459641861, 'comment_body': ""If we want this convenience functionality you could introduce a \r\n\r\n```java\r\npublic abstract class FloatBeforeAfterEvent extends BeforeAfterEvent<Float> { ... }\r\n```\r\n\r\nfor this purpose. \r\n\r\nFor calculating the factor you could consider to return infinity in case the old value was zero, something like this (there's a difference between positive and negative infinity, though):\r\n\r\n```java\r\n    public float getFactor() {\r\n        return oldValue != 0 ? newValue / oldValue : Float.POSITIVE_INFINITY;\r\n    }\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 18, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459703518, 'comment_body': ""Nope I certainly haven't worked with Generics üòÖ... And I did absolutely everything wrong I see üòÖ\r\nAnd Now the component based alteration effect pr thing  (Class<C> componentClass) makes sense..\r\nThanks for explaining all this in such great detail!"", 'comment_created': datetime.datetime(2020, 7, 23, 20, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 459723712, 'comment_body': ""I see, Again thanks for explaining!\r\nBut for this PR I don't think we should introduce FloatBeforeAfterEvent just for a getChange/Factor() method... \r\nThe whole point of using generics I think is we don't need to have separate events for different datatypes.. \r\nSo I think we can leave those separate functionalities to the specific events that extend this event."", 'comment_created': datetime.datetime(2020, 7, 23, 20, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 459745101, 'comment_body': ""> And I did absolutely everything wrong\r\n\r\nThat's not true - basically everything was there, and it made it easy for me to add all those comments about fancy features :sweat_smile: I hope you'll learn one thing or the other, and please don't hesitate if you have questions (and please ask about things like `Class componentClass` if they are unclear :wink: )"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'd05976eb2ea98ad06742e80e33de6c4c30acae19', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
465069884,Spawns Igloos in Snow Biome,"The PR spawns igloos in the Snow Biome.
 Igloos are very rare and represent remaining traces of abandoned settlements in the Snow Biome.
This is the first example of using Structural Templates during WorldGen.

To Test: 
The Snow biome starts at height >= SeaLevel + 96 which is roughly equal to 1381~140 in y-coordinate.
Currently the igloos are set to have a very low probability of spawn, so it might be difficult to find one. I'd suggest enabling hspeed and flight and just traverse the snow biome and try to spot one. Following is an example of how it looks:
![image](https://user-images.githubusercontent.com/50916693/89718928-e5d40300-d9e0-11ea-9d89-b08b24eaaa35.png)

 In case it still can't be found, try changing line 64 in Igloo Provider:
>                     if (noise.noise(wx, wz) > 0.9999f && (surfaceHeight >= seaLevel + 96f ||
and change it to the following in your local branch:
>                     if (noise.noise(wx, wz) > 0.999f && (surfaceHeight >= seaLevel + 96f ||
",True,28,https://api.github.com/repos/Terasology/ClimateConditions/pulls/28,https://github.com/Terasology/ClimateConditions/pull/28,closed,435,1,6,3,1,22,0,0,[],2020-08-08 20:10:17+00:00,2020-08-22 19:20:19+00:00,1206602.0,"13 days, 23:10:02","[{'comment_id': 467565423, 'comment_body': ""Didn't see any items in the chest or the barrel... Guess that might be a current general bug, though :thinking: "", 'comment_created': datetime.datetime(2020, 8, 9, 10, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 467568486, 'comment_body': 'I think we should add a note here or in the class description that this relates to the igloo structure template, and that the size of the igloo is defined by the template. Just to be sure that future contributors get this right, or that one can spot bugs in case the template or this class changes without changing the other...\r\n', 'comment_created': datetime.datetime(2020, 8, 9, 10, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467570756, 'comment_body': ""this is some implicit knowledge from the implementation of our current default world rasterizer. I'd like to add at least a `//TODO: ...` comment here to derive the height from other properties."", 'comment_created': datetime.datetime(2020, 8, 9, 11, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467570833, 'comment_body': 'So the `SNOW` biome always qualifies for placement, that sounds good üëç ', 'comment_created': datetime.datetime(2020, 8, 9, 11, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467570961, 'comment_body': 'placing the igloo ""in the ground"" definitely works fine here. In the future, we might improve placement to flat areas and don\'t place them into slopes.', 'comment_created': datetime.datetime(2020, 8, 9, 11, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467571310, 'comment_body': 'I hope that we will get away from hard-coding snow above `sealevel + 96f` and rather place it based on climate information in the future.\r\nTo avoid ""breaking"" igloo generation when doing so because that ""snowlevel"" is still hard-coded here, I\'m thinking that we should consider referencing a check for snow here and implementing this check in some more general place in `ClimateConditions`. Thus, this general place could be the source of truth of how `ClimateConditions` ""looks for"" snow. And then this can be changed and everything else that uses this check is automatically aligned.\r\nDoes that make sense to you?', 'comment_created': datetime.datetime(2020, 8, 9, 11, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 467571323, 'comment_body': 'Why `+ 3` ?', 'comment_created': datetime.datetime(2020, 8, 9, 11, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 467571506, 'comment_body': 'nice, this works really well! üëç \r\n\r\n**Potential Follow-ups:** Pinging @AndyTechGuy and @Sin3point14 for some discussion and ideas on how to generalize this for arbitrary structure templates ü§ì One thing coming to my mind is to get the actual template from the facet (or the objects stored in the facet) instead of hard-coding it. We may then be able to provide a common base class for structure-template world rasterizers for reuse by other modules.', 'comment_created': datetime.datetime(2020, 8, 9, 11, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467619340, 'comment_body': ""Umm, I'm not so sure...\r\nNo other thing in climate conditions is really checking for presence of snow anymore at the moment (maybe temperature and humidity stuff but that has a whole lot of other things which are being re-examined at the moment by RatMoleRat I think..)\r\nAnd since this is the only place where we're checking snow , doing so in a separate space won't make much sense...\r\nAlso even if the snow biome is changed I do have an OR condition which checks if biome = snow. So, igloo qualifies for placement both in case height is greater than seaLevel + 96 or even if just the biome is snow......\r\nAdding a TODO: here would make more sense in my opinion...."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467619609, 'comment_body': ""That's just a random number.. that is done mostly to prevent same noise being generated by various different facets and then the positions overlapping that just starts throwing a lot of NPEs... \r\nit wouldn't make a difference even if the number was say 10 or 9313 or 213...\r\n"", 'comment_created': datetime.datetime(2020, 8, 9, 19, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467620212, 'comment_body': ""Yeah sure but from what I've observed the way the world is generated right now (as far as perlin generator is concerned), there aren't a lot of flat areas, there are just constantly rising mountains everywhere no flat areas with stable heights. Thus very low probability of igloo facet placing and then the even lower possibility that the found place would be a flat area would probably end up resulting in close to no igloos(it's actually still 1-2 in one snow biome area but then it would be further lower)... I think having well balanced flat areas at various heights should be a task with higher priority if and when possible."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467620629, 'comment_body': ""I did once keep it in the structure class but I just felt that then the prefab manager would be called every time the structure is placed since the class will be initialized every time..... and at the time I was placing a lot of structures... so since I wasn't really using it anywhere else I thought it be best to call it just once in the rasterizer and for borders I created the extra variable in the structure class .."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467621142, 'comment_body': ""No..... that's not a bug.. I think there must be some extra piece of logic in ST for placing these items inside there, and since I only extracted the structure building part from there, it doesn't work here,  because I'm pretty sure they were there when I placed it using the spawner from toolbox.. I'll try to find it...."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467621769, 'comment_body': ""I'm a little confused.., you mean we should derive the seaLevel + 96 height form some other class right?\r\nIf that's the case, I think the change should first be made in the solid rasterizer: https://github.com/Terasology/CoreWorlds/blob/4419b057d731dbbd35e523c11c227f2dd9599843/src/main/java/org/terasology/core/world/generator/rasterizers/SolidRasterizer.java#L116\r\nand define a constant like SNOW_BIOME_THRESHOLD = seaLevel + 96 and use that here like \r\n>                     } else if (depth == 0 && height >= SNOW_BIOME_THRESHOLD) {\r\n\r\nand then use that in here(in igloo provider)"", 'comment_created': datetime.datetime(2020, 8, 9, 19, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467621891, 'comment_body': 'Ooohh... I missed that üòÖ', 'comment_created': datetime.datetime(2020, 8, 9, 19, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467623956, 'comment_body': ""Yeah, after some testing I felt it was difficult to find an igloo because of the probability anyway, and snow blocks themselves are really high up on the mountains, so the player won't end up stumbling into one very easily unless extremely lucky.\r\nAnd after seeing the igloos placed while flying around in the biome, the placement felt just what I wanted it to be, sometimes on plain areas and sometimes hidden in the mountains.. giving a proper abandoned feel to them..\r\nOnes in with mountain blocks above the igloo(mini cave like thingies) could've been a result of landslides, etc over a whole lot of years.. story wise..."", 'comment_created': datetime.datetime(2020, 8, 9, 20, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 471129669, 'comment_body': 'For ""magic numbers"" like that please create a constant and name it something like `ARBITRARY_OVERLAP_OFFSET` to make it more clear what it does :-)', 'comment_created': datetime.datetime(2020, 8, 16, 16, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 471131066, 'comment_body': 'If I understand it right joining in late here then yeah if `96` is the same number here and in CoreWorlds IMHO it would make sense to make a constant over there then also use that constant here. \r\n\r\nAt the same time I concur with the desire to _eventually_ get away from such crude ways to designate a given height as ""Okay magically now it is snow due to height!"" disregarding other climate details - but yeah that might be hard to really do much about here at the moment other than maybe leaving a TODO or two for future considerations :-)', 'comment_created': datetime.datetime(2020, 8, 16, 16, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 471412269, 'comment_body': '+1 on ""magic numbers"" - could you please the necessary modifications for this PR? ', 'comment_created': datetime.datetime(2020, 8, 17, 11, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'casals', 'type': 'User'}, {'comment_id': 471413693, 'comment_body': ""Hm.. I'm still with @jdrueckert on this. Even if it's there's no one checking for snow atm, let's try to avoi localized hardcoding - for the sake of future contributors. :) Also, on line 64, could you please take the same approach for arbitraty numbers that @Cervator suggested below (for `sealevel + 96f`)?"", 'comment_created': datetime.datetime(2020, 8, 17, 11, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'casals', 'type': 'User'}, {'comment_id': 471438197, 'comment_body': 'I\'m still don\'t think we need to check for snow in a separate place, the issue here is the fact that : ""seaLevel + 96"" has been used to check if a biome is in fact the snow biome, but that has been hard coded here only because it has been done so in coreWorlds. \r\nI propose a constant be defined in the CoreWorlds itself which can then be used here: \r\nsee :  https://github.com/Terasology/ClimateConditions/pull/28/files#r467621769\r\nwhich would then mean another arbitrary constant won\'t be required here..\r\nBut I\'d like to do that in a separate PR, I don\'t want this to get blocked form the CoreWorlds PR....\r\nHmmm but I think I can define an constant here now, SNOW_BIOME_THRESHOLD = seaLevel + 96\r\nand in another PR I could update the value of the constant to a similar constant introduced in the CoreWorlds from a separate PR.\r\nIs that fine @casals and @Cervator ?', 'comment_created': datetime.datetime(2020, 8, 17, 12, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 471441307, 'comment_body': ""That's fine for me (reg. both the constant and taking the verification to another discussion/PR)"", 'comment_created': datetime.datetime(2020, 8, 17, 12, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'casals', 'type': 'User'}]","[{'commit_sha': '87fe6a6bbf8ddc224d21d6a7685b5795c80d2fe3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e96da1b823ff168b81a068f4223f8b077e8d1d9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d230e5c4ae12ba6310e44c8dbec79f8f1d1e8f2', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
464295668,"Add oasis, bigger lakes",,True,6,https://api.github.com/repos/Terasology/Lakes/pulls/6,https://github.com/Terasology/Lakes/pull/6,closed,234,120,11,5,0,14,0,0,[],2020-08-06 22:35:12+00:00,2020-08-22 21:30:23+00:00,1378511.0,"15 days, 22:55:11","[{'comment_id': 467454067, 'comment_body': 'We can bring this in-line with many other modules of the basic line-up and just put ""The Terasology Foundation"" here (don\'t want to rob you of your author tag, I\'ll leave this comment up to you üòâ ).', 'comment_created': datetime.datetime(2020, 8, 8, 11, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467454422, 'comment_body': 'What is the factor `0.1f` used for here? Is this scaling the noise to make the lakes a bit bigger?', 'comment_created': datetime.datetime(2020, 8, 8, 11, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467455250, 'comment_body': ""This piece of the code looks alright, but I'd like to make a couple of suggestions to improve readability and make life simpler for further extensions.\r\n\r\n- rename `noiseValue` >>> `probablity` to make it clearer what this value is used for\r\n- extract the calculation (with the `if-else`) to a private method which gets the position and the biome facet to compute the probability based on that:\r\n  ```java\r\n  float probability = computeProbabilityFor(pos, biomeFacet);\r\n  ```\r\n- I'd already take the lookup of the biome id out into a local variable to so that the comparison becomes a bit shorter. It also allows to use the derived biome for other `else if` checks easily\r\n  ```java\r\n  String biomeId = biomeFacet.getWorld(pos.x(), pos.z()).getId();\r\n  float probability;\r\n  if (biomeId.equals(CoreBiome.DESERT.getId())) {\r\n\tprobability= noise.noise(pos.x() * 0.1f, pos.y(), pos.z() * 0.1f);\r\n  } else if (biomeId.equals(...)) {\r\n\t// not now, but for future extensions\r\n  } else {\r\n\tprobability= noise.noise(pos.x() * 0.5f, pos.y(), pos.z() * 0.5f);\r\n  }\r\n  return probability;\r\n  ```"", 'comment_created': datetime.datetime(2020, 8, 8, 11, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467456467, 'comment_body': ""I'm wondering whether we could use something from https://github.com/Terasology/SurfaceFacets for this check? ü§î might be an improvement for the future though..."", 'comment_created': datetime.datetime(2020, 8, 8, 11, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467456565, 'comment_body': 'Variables and fields should always start with a lower case character. In this, case I would even got for the ""long"" name for clarity.\r\n\r\n```suggestion\r\n        Rect2i boundingBox = Rect2i.createFromMinAndMax(pos.x() - 3, pos.z() - 3, pos.x() + 3, pos.z() + 3);\r\n```', 'comment_created': datetime.datetime(2020, 8, 8, 11, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467456605, 'comment_body': ""While we're at it ^^\r\n\r\n```suggestion\r\n    protected boolean checkCorners(Rect2i boundingBox, BaseFieldFacet2D facet) {\r\n```"", 'comment_created': datetime.datetime(2020, 8, 8, 11, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467456768, 'comment_body': 'I think instead of creating a new facet this should rather update the `TreeFacet` to remove any trees from the area, or place additional trees around the lakes in the desert, a.k.a., oasis.', 'comment_created': datetime.datetime(2020, 8, 8, 11, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 470909367, 'comment_body': 'this is used to control the rarity of lakes. Lava Lakes were a bit too common', 'comment_created': datetime.datetime(2020, 8, 14, 23, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sin3point14', 'type': 'User'}, {'comment_id': 470910556, 'comment_body': ""sounds great, i'll do this"", 'comment_created': datetime.datetime(2020, 8, 15, 0, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sin3point14', 'type': 'User'}, {'comment_id': 470910698, 'comment_body': ""well yeah the way gradient is checked is specific to a facet, so that's an issue..."", 'comment_created': datetime.datetime(2020, 8, 15, 0, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sin3point14', 'type': 'User'}, {'comment_id': 470910769, 'comment_body': 'actually thanks, i was unclear to what this expanded to', 'comment_created': datetime.datetime(2020, 8, 15, 0, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sin3point14', 'type': 'User'}, {'comment_id': 470911854, 'comment_body': 'sure, done', 'comment_created': datetime.datetime(2020, 8, 15, 0, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sin3point14', 'type': 'User'}, {'comment_id': 470911911, 'comment_body': 'yeah, fixed this', 'comment_created': datetime.datetime(2020, 8, 15, 0, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sin3point14', 'type': 'User'}, {'comment_id': 475136666, 'comment_body': 'Trying to avoid commenting on existing style issues and magic numbers, fixing even more of those would probably be a separate effort :-) But this one is new, maybe this should be a named constant to better indicate what it is for?', 'comment_created': datetime.datetime(2020, 8, 22, 20, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}]","[{'commit_sha': 'd8f81a48c97024abc3f2dc1dc567d401d0423719', 'committer_username': 'sin3point14', 'committer_name': 'Manas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 24, 17, 30, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91a42da8effd1dfa443cac1f3aba607691e8aa13', 'committer_username': 'sin3point14', 'committer_name': 'Manas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 24, 17, 30, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be673bd59619bb64f9c91e5de75a14f95b5245bb', 'committer_username': 'sin3point14', 'committer_name': 'Manas', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 24, 17, 30, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fe73359cf85a0cdd272fa7924034655ccea9b8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '001fbd61d4d4729ad09d39379101ae104d895209', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",Manas,43549821,,User,,68,,12,66
466858953,Adds new method in AbstractValueModifiableEvent to obtain result value without capping,"Adds a new getResultValueWithoutCapping() method which returns result value without capping the negative values to zero. 
With this PR, the event shall support all values both positive and negative.
Formula for calculating the result value int the new getResultValueWithoutCapping() method would be:
>  result = (<baseValue> + Œ£ <modifier>) * Œ† <multiplier> + Œ£ <postModifier>

instead of the one in the original getResultValue() : 

> result = max(0, (<baseValue> + Œ£ <modifier>) * Œ† <multiplier> + Œ£ <postModifier>)

In short: This means the event now has two methods for calculating the result values:
> event.getResultValue()    // always positive
event.getResultValueWithoutCapping()  // can also be negative 

To Test : see https://github.com/MovingBlocks/Terasology/pull/4123#issuecomment-674527341
Updated : Detailed testing instructions : https://github.com/Terasology/ClimateConditions/pull/29#issuecomment-674875942",True,4123,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4123,https://github.com/MovingBlocks/Terasology/pull/4123,closed,28,6,1,3,6,2,1,0,[{'name': 'Topic: Architecture'}],2020-08-12 15:48:36+00:00,2020-08-23 15:26:06+00:00,949050.0,"10 days, 23:37:30","[{'comment_id': 471021997, 'comment_body': 'Rather than duplicate the calculation (invites bugs) would it make sense to have `getResultValue` call `getResultValueWithoutCapping` then simply cap and return the result?', 'comment_created': datetime.datetime(2020, 8, 15, 18, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 471022479, 'comment_body': 'If you just have one method call the other you could probably also save the duplication in the javadoc with a `@see` tag or whichever the appropriate one is. Not that it is necessarily bad to be thorough but it is _such_ a typical bug when you have two similar things then end up forgetting a spot :-)', 'comment_created': datetime.datetime(2020, 8, 15, 18, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}]","[{'commit_sha': 'e9e7ac930862f3defd90bca38c05bc918cd9349d', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c231f3a4ce4b26c452163400229fa18b1d97ea10', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227d39006e4c99028f383d31333a42bb1e203221', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
466865455,Remove negative value capping of summation of modifiers in OnEffectModifyEvent,"Remove negative value capping of summation of modifiers in getMagnitudeResultValue()  method in the OnEffectModifyEvent.

However, the capping in getDurationResultValue() remains as is.",True,24,https://api.github.com/repos/Terasology/AlterationEffects/pulls/24,https://github.com/Terasology/AlterationEffects/pull/24,closed,1,3,1,1,2,0,0,0,[],2020-08-12 16:00:22+00:00,2020-08-23 09:10:38+00:00,925816.0,"10 days, 17:10:16",[],"[{'commit_sha': 'cb6d4736612c40f3148e4a18ebd93428fed693b7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
466888525,Fix AffectBodyTemperatureEvent after change in AbstractValueModifiableEvent,"1. This is a follow up PR for and depends on: https://github.com/MovingBlocks/Terasology/pull/4123

2. Also sends out the correct values in onEffectModifyEvent in BodyTemperatureAlterationEffect
(Realized why the zero values were sent out after working in the Equipments module)",True,29,https://api.github.com/repos/Terasology/ClimateConditions/pulls/29,https://github.com/Terasology/ClimateConditions/pull/29,closed,8,25,4,3,2,0,0,0,[],2020-08-12 16:45:30+00:00,2020-08-23 09:10:35+00:00,923105.0,"10 days, 16:25:05",[],"[{'commit_sha': '5735917e546f8e4b4c7d6eef510718227b077104', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28b37c3c27353dd4c9188d8c238b2b25eb1881e0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a6003f2f36fcb048a1ae80e722ad20e07f6e06d', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
466881449,"Adds delta prefabs for items : wool vest, arabic thawb and changes magnitude attribute to float datatype","1. Change Magnitude attribute to float datatype from the original int. AlterationEffects already support float magnitudes, this being int in Equipments just hinders the proper mapping of equipment effects to alteration effects.
2. Add delta prefabs for items : WoolVest, ArabicThawb and use  BodyTemperatureAlterationEffect for the items.
The items are used to prevent running into extreme body temperatures and the resulting effects.",True,125,https://api.github.com/repos/Terasology/Equipment/pulls/125,https://github.com/Terasology/Equipment/pull/125,closed,65,3,6,3,1,0,0,0,[],2020-08-12 16:30:37+00:00,2020-08-12 22:20:42+00:00,21005.0,5:50:05,[],"[{'commit_sha': '2a24dfbc3fdb8778ed1ad1b42d5792e5c8226c24', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f771188b5d7f845ba9a05ba6ff4234e2a4f2b490', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bfca2820e3e2db5f77ab4d8e84fb873ddae7bc9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
471293195,Adds thermiaHud which displays thermiaIcons in case of extreme body temperatures,"This PR introduces thermia Hud which displays thermiaIcons in case of Hypo/Hyperthermia along with the level of respective thermia in effect. The icons disable when the temperature returns to the normal body temperature range. 

This has been made as a first step to get rid of the chat log spamming method of keeping a track of body temperatures.
The PR currently uses dummy icons for the same which should later be updated after appropriate artwork.
As of now the chat log should not be removed because the environment temperatures vary unpredictably and it would be very difficult to attain a certain temperature in order to experience the various the various thermia effects in playtests, etc.

To test:  
For easy testing: comment out the following if condition to keep a track of body temperatures at all times: 
https://github.com/Terasology/ClimateConditions/blob/8e2151018c5042dc98f3308f2aebe3d33a8972d9/src/main/java/org/terasology/climateConditions/BodyTemperatureSystem.java#L91

Find a spot with high/low environment temperature to quickly reach a state of hype/hypothermia and see the icon along with the level displayed in the middle left corner of the screen.",True,31,https://api.github.com/repos/Terasology/ClimateConditions/pulls/31,https://github.com/Terasology/ClimateConditions/pull/31,closed,156,0,5,1,0,0,0,0,[],2020-08-20 23:37:59+00:00,2020-08-22 19:37:35+00:00,158376.0,"1 day, 19:59:36",[],"[{'commit_sha': 'dc82375263df07aa06100772495d8d7732bddf83', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
423140830,"feat: Add HypothermiaComponent and attach it to player in ""danger zone""","Adds a HypothermiaComponent to the player entity when the player enters ""danger zone"".
For testing purposes the danger zone currently is set to the area of the world above location.y > 60.",True,8,https://api.github.com/repos/Terasology/ClimateConditions/pulls/8,https://github.com/Terasology/ClimateConditions/pull/8,closed,67,0,2,14,0,10,1,0,[{'name': 'Type: Improvement'}],2020-05-26 11:13:28+00:00,2020-05-26 16:00:56+00:00,17248.0,4:47:28,"[{'comment_id': 430406046, 'comment_body': ""I don't think we need this event. The fact that _hypothermia_ effects the player is given by adding the component. Reacting to this event is the same as reacting to \r\n\r\n```java\r\n@ReceiveEvent\r\npublic void onHypothermia(OnAddedComponent event, EntityRef entity, HypothermiaComponent hypothermia) { ... }\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 13, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430407248, 'comment_body': ""I'd call this `observeDangerZone` or something like that, because it adds _and_ removes the component, if necessary. `manageHypthermia` might also be okay."", 'comment_created': datetime.datetime(2020, 5, 26, 13, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430409016, 'comment_body': 'I would just add a TODO comment here about the alternative of binding the effect to a biome. \r\n\r\n```suggestion\r\n    public void addHypothermia(MovedEvent event, EntityRef player, LocationComponent location, CharacterMovementComponent movement) {\r\n        //TODO: react on OnBiomeChangedEvent to handle the danger zone\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 13, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430409330, 'comment_body': ""As stated above, I'd just add a TODO comment and figure this out later / in another PR.\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 13, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430411445, 'comment_body': ""If you use `addOrSaveComponent` you don't have do check whether it existed before üòâ \r\n\r\n```suggestion\r\n                player.addOrSaveComponent(new HypothermiaComponent());\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 13, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430411919, 'comment_body': ""Let's inline this\r\n\r\n```suggestion\r\n        float lastHeight = height - event.getDelta().getY();\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 13, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430412361, 'comment_body': 'This event is not needed (see comment above).', 'comment_created': datetime.datetime(2020, 5, 26, 13, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430447613, 'comment_body': 'This condition is always true, as addding the component to the paramter list guarantees that this is the case üòâ ', 'comment_created': datetime.datetime(2020, 5, 26, 14, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430458182, 'comment_body': ""This import is\r\na) not required for this PR and \r\nb) even leads to a compile error due to `BiomesAPI` not being a dependency in `module.txt`\r\n\r\nDue to a) you can simply remove it manually or use Intellij's import optimizations."", 'comment_created': datetime.datetime(2020, 5, 26, 14, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 430459187, 'comment_body': 'also not required in this PR I think', 'comment_created': datetime.datetime(2020, 5, 26, 14, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40148a8063af94aebd41409c54e36544dd0f24d0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091ed0bcfd1a7a3d76deedd0cfbd989e27219293', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '343e3b168ea917686b8f660b4a40fc4306e5ecf8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d5405f4a2d8fe75af5a6f3845c9b1f50da74c9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a5ce0078a098662c9c471961d5ec442c208e97', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd150521c6a6b99e23117a4efd4772d228c6aaeab', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7313d35e86330f82b4f6e9b805f7288a10799e4', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21857ef5b9b1f76d2cc13997531e71c888fc9ea5', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
423152074,feat: Show breathing effect on Hypothermia,"This PR is a part of the Hypothermia Effects and will be dependent on:
https://github.com/Terasology/ClimateConditions/pull/8",True,9,https://api.github.com/repos/Terasology/ClimateConditions/pulls/9,https://github.com/Terasology/ClimateConditions/pull/9,closed,126,0,4,31,0,13,1,0,[{'name': 'Type: Improvement'}],2020-05-26 11:38:29+00:00,2020-05-31 12:17:43+00:00,434354.0,"5 days, 0:39:14","[{'comment_id': 430618645, 'comment_body': 'As in the other PR, having `HypothermiaComponent` ensures taht the entity has it.\r\n```suggestion      \r\n        delayManager.addPeriodicAction(player, VISIBLE_BREATH_ACTION_ID, initialDelay, breathInterval);\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 18, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430622804, 'comment_body': 'I think both `onPeriodicBreath` and `updateVisibleBreathEffect` would be better off it their own system `VisibleBreathingSystem`. The action id `VISIBLE_BREATH_ACTION_ID` should also be in that system.\r\n\r\nReason being is that although it is triggered by hypothermia, applying the effect itself is unrelated to that condition. Thus, we can separate the concerns early on here.', 'comment_created': datetime.datetime(2020, 5, 26, 18, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430623747, 'comment_body': 'As you want to access the `LocationComponent` in this method, add it as method parameter to save a few lines üòâ \r\n\r\n```suggestion\r\n    @ReceiveEvent\r\n    public void onPeriodicBreath(PeriodicActionTriggeredEvent event, EntityRef player, LocationComponent location) {\r\n        if (event.getActionId().equals(VISIBLE_BREATH_ACTION_ID)) {\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 18, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 431777858, 'comment_body': 'This should not be done here, but rather dual to the approach with `onAddedComponent`. To be fair, the event you are looking for is not ~~`OnRemovedComponent`~~ but `BeforeRemoveComponent`.', 'comment_created': datetime.datetime(2020, 5, 28, 11, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 431780690, 'comment_body': ""I think for clarity I'd not do a static import of `VISIBLE_BREATH_ACTION_ID` but only import `VisibleBreathingSystem` and reference this as\r\n```suggestion\r\n        delayManager.addPeriodicAction(player, VisibleBreathingSystem.VISIBLE_BREATH_ACTION_ID, initialDelay, breathInterval);\r\n```\r\n\r\nThis makes it clearer where this constant is coming from."", 'comment_created': datetime.datetime(2020, 5, 28, 11, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432134806, 'comment_body': ""On a second thought: my initial review suggested to introduce a coupling between `HypothermiaSystem` and `VisibleBreathingSystem`. Actually, there is no reason why `HypothermiaSystem` should even know that visible breath is a thing. \r\n\r\nTherefore, both of these methods should be moved to `VisibleBreathingSystem`, and we don't need any cross-imports anymore. \r\n\r\n(... still learning some best practices myself here)"", 'comment_created': datetime.datetime(2020, 5, 28, 21, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432136441, 'comment_body': 'The player needs to have location component, otherwise rendering their breath does not make much sense. We can make use of the event filtering when we require this already in `onPeriodicBreath`.\r\n\r\nAs a consequence, this method would get the location component as parameter rather than retrieve it from the entity. ', 'comment_created': datetime.datetime(2020, 5, 28, 21, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432136758, 'comment_body': '```suggestion\r\n    public void onPeriodicBreath(PeriodicActionTriggeredEvent event, EntityRef player, LocationComponent location) {\r\n        if (event.getActionId().equals(VISIBLE_BREATH_ACTION_ID)) {\r\n            updateVisibleBreathEffect(player, location);\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 21, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432141915, 'comment_body': 'We got some new `EntityRef::update` and `EntityRef::upsert` methods that could be useful there, introduced recently in https://github.com/MovingBlocks/Terasology/pull/3977.\r\n\r\n```suggestion\r\n\t\tplayer.upsert(VisibleBreathComponent.class, maybeComponent => {\r\n\t\t\tVisibleBreathComponent component = maybeComponent.orElse(new VisibleBreathComponent());\r\n\t\t\tcomponent.particleEntity = particleEntity;\r\n\t\t\treturn component;\r\n\t\t});\r\n```\r\n\r\nThe idea of both `update` and `upsert` is to encapsule the process of getting, modifying, and finally saving a component to an entity. \r\n`upsert` in particular allows to work on a component that might or might not be present (the Optional `maybeComponent`). As a result, it expects that you return a component (either the updated one, or the one that should be inserted). \r\n\r\n```java\r\nVisibleBreathComponent component = maybeComponent.orElse(new VisibleBreathComponent());\r\n```\r\n... extracts the component from the entity, if present, or creates a new component otherwise. We can work with that component as before, e.g., by setting the particle entity. \r\nFinally, we return the component which gets automatically saved.', 'comment_created': datetime.datetime(2020, 5, 28, 21, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432145071, 'comment_body': 'See the comment below for a more detailed explanation, but this can also use `update` or `upsert`. \r\nAs it is currently written here, it will fail if the component is not present on the entity (NPE when accessing `velocity`). \r\nThe main difference between `update` and `upsert` is that the former will only ""execute"" if the entity already has the component. If not, nothing will happen. \r\n\r\nWithout suggesting anything here, it\'s up to you to decide which of both is the right one to use here. I\'ll give an example for `update` as that is closer to the current code:\r\n\r\n```suggestion\r\n        particleEntity.update(VelocityRangeGeneratorComponent.class, velocity => {\r\n\t        direction.scale(0.5f);\r\n\t        direction.addY(0.5f);\r\n\t        velocity.minVelocity = direction;\r\n\t        direction.scale(1.5f);\r\n\t        velocity.maxVelocity = direction;\r\n        });\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 21, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432145487, 'comment_body': 'I think this will change `direction` in place, and with that it will change `velocity.minVelocity` - is that intended?', 'comment_created': datetime.datetime(2020, 5, 28, 21, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432401014, 'comment_body': ""I don't quite understand which direction statement are you talking about here so I'll explain what I intended instead.\r\n\r\nvelocity.minVelocity = direction*(0.5) + 0.5y\r\nvelocity.maxVelocity = (velocity.minVelocity)* 1.5  =  ((direction*(0.5)) + 0.5y) * 1.5\r\n\r\nNote: direction here is the original direction i.e. the direction before line 56."", 'comment_created': datetime.datetime(2020, 5, 29, 10, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 432940229, 'comment_body': '```suggestion\r\n        delayManager.addPeriodicAction(player, VisibleBreathingSystem.VISIBLE_BREATH_ACTION_ID, initialDelay, breathInterval);\r\n```', 'comment_created': datetime.datetime(2020, 5, 31, 12, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a0a6bd08410685176cdb5b0e58d71b9410647b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40148a8063af94aebd41409c54e36544dd0f24d0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091ed0bcfd1a7a3d76deedd0cfbd989e27219293', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '343e3b168ea917686b8f660b4a40fc4306e5ecf8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d5405f4a2d8fe75af5a6f3845c9b1f50da74c9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a5ce0078a098662c9c471961d5ec442c208e97', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd150521c6a6b99e23117a4efd4772d228c6aaeab', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e338ffc31167bd2acc34265ddac4dfc54f4b8895', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4434ab4d0b015cc57fbe87832bfc17d75bab3337', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7313d35e86330f82b4f6e9b805f7288a10799e4', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21857ef5b9b1f76d2cc13997531e71c888fc9ea5', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34749281662af01e3ea720d047a96a67038f38df', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a27a35d6d93bb7643efc4d36ff70b351ee2e1e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc9953aa22966621ee513ca6f22c07a12a08320', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cd65431d8c886a1c804bd9f1802ce8db2f1247', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5588c8dba5b02dc1f7f5e74b4699f1c22eaedc04', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2bd93a4b7b32998e5e6c6604605ae9a1085237f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0838ff6cf32449c1436c496455cd8048bd8a15eb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73b263c76c779b878e59e92218937512fff19ba3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ceb200ddea3f1681cc4d3f3042373a882e0141', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53f47841fe8be80272fdea9505bb21047741b56', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d908a84667642d1b69ee6ba4632fc116cd75202', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b088a6cab52054eac5beded76a602644c030f376', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e811ee107b2fa2dad21425cdd5871ff9a950dc', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82c9c02488604023ea63964687b9a60e0d2f07f1', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
423163744,feat: Apply periodic damage(frostbite) on Hypothermia,"This PR adds periodic damage + stun of 0.5 seconds + heartbeat sound (current character death sound). 
This PR is a part of the HypothermiaEffects and is dependent on PR: https://github.com/Terasology/ClimateConditions/pull/8/commits/9f2d5fa618ef3afa78305c4ef9ae44ea46a386de",True,10,https://api.github.com/repos/Terasology/ClimateConditions/pulls/10,https://github.com/Terasology/ClimateConditions/pull/10,closed,103,2,4,19,0,17,1,0,[{'name': 'Type: Improvement'}],2020-05-26 12:04:40+00:00,2020-05-30 17:34:15+00:00,365375.0,"4 days, 5:29:35","[{'comment_id': 430618535, 'comment_body': 'newline :wink: ', 'comment_created': datetime.datetime(2020, 5, 26, 18, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 430622962, 'comment_body': 'Are these values likely to change? If not, consider making them constants.', 'comment_created': datetime.datetime(2020, 5, 26, 18, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 430626371, 'comment_body': 'If you add the periodic action when the `HypothermiaComponent` is added, consider removing the periodic effect when the `HypothermiaComponent` is removed again', 'comment_created': datetime.datetime(2020, 5, 26, 18, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 430630975, 'comment_body': 'We never use `hypothermia`, so we can specify that the `HypothermiaComponent` needs to be present directly next to `ReceiveEvent`.\r\n```suggestion\r\n    @ReceiveEvent(components = {HypothermiaComponent.class})\r\n    public void onHypothermia(OnAddedComponent event, EntityRef player){\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 18, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 430631581, 'comment_body': '```suggestion\r\n    public void playFrostbiteSound(EntityRef entity) {\r\n```\r\nIntellij code optimization (Ctrl+Alt+L) is your friend :wink: ', 'comment_created': datetime.datetime(2020, 5, 26, 18, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 430632369, 'comment_body': ""We check that the player has the `HypothermiaComponent` directly on receiving the event, so we don't need to check again here :slightly_smiling_face: \r\n```suggestion\r\n        delayManager.addPeriodicAction(player, FROSTBITE_DAMAGE_ACTION_ID, initialDelay, healthDecreaseInterval);\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 18, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 430633894, 'comment_body': 'As the periodic frostbite is only enabled when the `HypothermiaComponent` is added and that one already check the ""danger zone"", you don\'t need to check it again here.\r\n```suggestion\r\n            applyFrostbiteDamagePlayer(player);\r\n            applyStunEffect(player, 1000);\r\n            playFrostbiteSound(player);\r\n```\r\nAlso, the comment concerning the stunning was mentioning the wrong duration and is generally not necessary as the method name describes well enough what\'s happening :wink: ', 'comment_created': datetime.datetime(2020, 5, 26, 18, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 432148311, 'comment_body': 'üëç I really like how you structured this handler. Really concise, and one can understand what is happening when the periodic action triggers!', 'comment_created': datetime.datetime(2020, 5, 28, 22, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432151047, 'comment_body': ""Repeating what I just wrote on the other PR regarding visible breath here. On a second thought, I'd come to the conclusion that all this might be better off in a separate system for the same reason as explained in the other PR (decoupling)."", 'comment_created': datetime.datetime(2020, 5, 28, 22, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432152929, 'comment_body': ""That .... works? I still don't understand AlterationEffects - do you @jdrueckert?"", 'comment_created': datetime.datetime(2020, 5, 28, 22, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432153389, 'comment_body': 'If the player does not have a `CharacterSoundComponent` this will throw a NPE.\r\n```suggestion\r\n        if (characterSounds != null && characterSounds.deathSounds.size() > 0) {\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 22, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432396755, 'comment_body': 'From what we have seen till yet, AlterationEffects work completely fine as long as they are applied for a definite duration. The only trouble is when we want them to go on for an indefinite duration. ', 'comment_created': datetime.datetime(2020, 5, 29, 10, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 432630585, 'comment_body': ""I think with with `static final` Checkstyle would complain that it is a constant now, and should be all caps. I'd leave this change out of this PR.\r\n```suggestion\r\n    private final float thresholdHeight = 60f;\r\n```"", 'comment_created': datetime.datetime(2020, 5, 29, 17, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432630854, 'comment_body': 'Was that removed by accident? I think now the player is slowed down all the time o.O\r\n```suggestion\r\n    @ReceiveEvent(components = {HypothermiaComponent.class})\r\n```', 'comment_created': datetime.datetime(2020, 5, 29, 17, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432631443, 'comment_body': 'This is a method and should start with a lower-case letter.\r\n```suggestion\r\n    public void beforeRemoveHypothermia(BeforeRemoveComponent event, EntityRef player, HypothermiaComponent hypothermia) {\r\n```', 'comment_created': datetime.datetime(2020, 5, 29, 17, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432631867, 'comment_body': ""Also, as you have the component in the annotation and you don't access it in the method body, it should be removed from the parameter list.\r\n```suggestion\r\n    public void beforeRemoveHypothermia(BeforeRemoveComponent event, EntityRef player) {\r\n```"", 'comment_created': datetime.datetime(2020, 5, 29, 17, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 432641172, 'comment_body': 'Yes, while I was changing all this, I messed up my workspace, so I commited and pushed everything without checking. Sorry for that üòÖ.', 'comment_created': datetime.datetime(2020, 5, 29, 17, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da324509e5cc0bbfd59c82814451e9b0538faa', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc8563ecb2719592433a845c0b7d8db478a3f99', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5890374536a2e683a437f162a81ac64823a0f60', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11adfb275d9e72f68f1803f9d48aa0491a7d051', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7358dbd5b876a9bb4b97ba2e968e6edcf7e8414c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc1066ffae5abf29ee0c2c038b95b8d7263d551', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a4162dca0128b87e8694707c9761ed15276e9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0968c685b6b308a8a772646f3dff0ee81419b1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44316fc62e47bb8acb52442f4f70ec03c2cba40b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab70de9e782c910588d775f6abb5b110d479f9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc4f68fde1b3d76edb81a9b53a624089bc199a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1eada701c10620b2d0805a8ea7b15241adf17a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abbbeca573c60702f47929857fc2c2f7eba78b8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
423180320,feat: Slow down player with Hypothermia,"This PR slows down the movement and jump speed of the player while it has the HypothermiaComponent.
This PR is a part of the HypothermiaEffects and is dependent on the PR: https://github.com/Terasology/ClimateConditions/pull/8/commits/9f2d5fa618ef3afa78305c4ef9ae44ea46a386de",True,11,https://api.github.com/repos/Terasology/ClimateConditions/pulls/11,https://github.com/Terasology/ClimateConditions/pull/11,closed,20,4,1,13,0,14,1,0,[{'name': 'Type: Improvement'}],2020-05-26 12:40:07+00:00,2020-05-28 11:40:50+00:00,169243.0,"1 day, 23:00:43","[{'comment_id': 430607655, 'comment_body': ""You can add the required components either here in the annotation or as method parameters to ensure that it is only called if the entity has the listed components. \r\n\r\nThe main difference is that listing it in the annotation states that the components needs to be present, but you don't want to access it, whereas a method parameter indicates that you want to read or write the component.\r\n\r\n```suggestion\r\n    @ReceiveEvent(components = {HypothermiaComponent.class})\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 18, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430608234, 'comment_body': ""As the comment states exactly what is written in code I don't think its really necessary here.\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 18, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430609479, 'comment_body': 'As stated above, this second check is not necessary if the component is listed in the annotation or as parameter.\r\n```suggestion\r\n        if (event.getMovementMode() == MovementMode.WALKING) {\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 18, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430609792, 'comment_body': 'See comment above üòâ \r\n```suggestion\r\n    @ReceiveEvent(components = {HypothermiaComponent.class)})\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 18, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430610118, 'comment_body': '```suggestion\r\n        event.multiply(JumpSpeedMultiplier);\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 18, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430610448, 'comment_body': 'Start import (and I think some more classes not really used)', 'comment_created': datetime.datetime(2020, 5, 26, 18, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430611172, 'comment_body': 'These are fields and should start with a lower case letter:\r\n\r\n```suggestion\r\n    private float walkSpeedMultiplier = 0.6f;\r\n    private float jumpSpeedMultiplier = 0.7f;\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 18, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 430618178, 'comment_body': 'Was limiting the effect to affect only the movement mode ""walking"" a deliberate decision? If so, I\'d like to learn why :slightly_smiling_face: ', 'comment_created': datetime.datetime(2020, 5, 26, 18, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 431033870, 'comment_body': ""Yeah I'll take care about the star import next time, I don't know intellij automatically uses star imports for some reason.."", 'comment_created': datetime.datetime(2020, 5, 27, 11, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 431035255, 'comment_body': ""Well not really, but Walking and Running both come under Walking and I haven't seen any water bodies in Snow yet so... didn't add any alteration for swimming yet... And when and if I do add alteration for swimming.. I'd like to modify it a bit more... The water + snow should have a stronger effect on the body of the player thing..."", 'comment_created': datetime.datetime(2020, 5, 27, 11, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 431039258, 'comment_body': 'Sounds like that you can want to add another module with cloth and ""cold"" resistance :)\r\nAnd wet factor....\r\nAhh, just another random idea  :P', 'comment_created': datetime.datetime(2020, 5, 27, 11, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DarkWeird', 'type': 'User'}, {'comment_id': 431298384, 'comment_body': ""Don't know about another module üòÖ but would definitely want the wet factor thing in extreme cold to have a magnified effect on the player.."", 'comment_created': datetime.datetime(2020, 5, 27, 16, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 431338287, 'comment_body': ""I see :+1: \r\nI'm still not entirely sure hypothermia should _only_ be related to the biome being a snow biome, but we can come back to that later, so that's fine for now :slightly_smiling_face: "", 'comment_created': datetime.datetime(2020, 5, 27, 17, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 431771326, 'comment_body': '@DarkWeird bringin clothing into the equation is exactly what @ktksan put into their proposal üòâ \r\n\r\nAnother approach on this could be to let the effect apply to any movement mode, and then refine it further from top-to-bottom, so to say. But as @jdrueckert said, we can come back to this later üôÉ ', 'comment_created': datetime.datetime(2020, 5, 28, 11, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40148a8063af94aebd41409c54e36544dd0f24d0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07534b98440a6059d7e8e8ed55e4f02c6e981e89', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41890d1194aa9a5c02cad8fcf506b97f6e4615b7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61319d0cc17e40a835eb2b7282e913d972c5022b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4e8c029271d375e34e2da6b0efda65b39ca2cb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3debcb73f5256857ed4045bc2dab67bf001f94', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c688cd148cd0831f6f3427818452bbb003755790', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
426003989,Documentation for Hypothermia System,,True,12,https://api.github.com/repos/Terasology/ClimateConditions/pulls/12,https://github.com/Terasology/ClimateConditions/pull/12,closed,34,2,5,44,1,11,0,0,[],2020-06-01 14:08:18+00:00,2020-06-06 21:14:58+00:00,457600.0,"5 days, 7:06:40","[{'comment_id': 434828901, 'comment_body': '```suggestion\r\n}\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 20, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 434839034, 'comment_body': '```suggestion\r\n/**\r\n * Adds frostbite to the player.\r\n * Frostbite is a periodic effect that, e.g., damages and stuns the player.\r\n * Is only active iff the player has a {@link HypothermiaComponent}.\r\n */\r\n```\r\n\r\nWith ""iff"" being ""if and only if"".', 'comment_created': datetime.datetime(2020, 6, 3, 20, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 434843743, 'comment_body': '```suggestion\r\n/**\r\n * Increases the game difficulty in locations with extreme cold climate.\r\n * Is added/removed by the {@link HypothermiaSystem} when the player enters/leaves a ""danger zone"".\r\n */\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 20, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 434846240, 'comment_body': ""```suggestion\r\n/**\r\n * Adds a {@link HypothermiaComponent} to the player.\r\n * Hypothermia occurs in locations with extremely cold climate and, e.g., slows the player's movements.\r\n */\r\n```"", 'comment_created': datetime.datetime(2020, 6, 3, 20, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 434849070, 'comment_body': '```suggestion\r\n    /**\r\n     * Modifies the walking/running speed of the player.\r\n     * Is only active iff the player has a {@link HypothermiaComponent}.\r\n     */\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 20, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 434849951, 'comment_body': '```suggestion\r\n    /**\r\n     * Modifies the jump speed of the player.\r\n     * Is only active iff the player has a {@link HypothermiaComponent}.\r\n     */\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 20, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 434856667, 'comment_body': '```suggestion\r\n/**\r\n * Augments the world with a visible breath particle effect.\r\n * Is added/updated by the {@link VisibleBreathingSystem} periodically.\r\n */\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 21, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 434860068, 'comment_body': '```suggestion\r\n/**\r\n * Adds a {@link VisibleBreathComponent} to the player.\r\n * Visible breath is a periodic action adding a visible breath particle effect.\r\n * Is active only iff the player has a {@link HypothermiaComponent}\r\n */\r\n```\r\n\r\nActually when thinking about this and the ""increases difficulty"" part of the hypothermia component, I realized, that visible breath should be decoupled from hypothermia. Hypothermia is an ""illness"" that negatively affects a player - visible breath is independent of that and appears whenever it is cold enough, independent of whether or not the player has hypothermia.', 'comment_created': datetime.datetime(2020, 6, 3, 21, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 435489721, 'comment_body': 'Well, that `modifySpeed` modifies the speed should be no surprise. However, in what way does it modify it? In particular, we are **decreasing** the **walk speed**.', 'comment_created': datetime.datetime(2020, 6, 4, 19, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 435490436, 'comment_body': 'Same as above:  `modifyJumpSpeed` modifies the jump speed - no surprises there. But in what way? Another clue here might be the fact that we are not modifying any physical ability of the character but reacting to the respective events.', 'comment_created': datetime.datetime(2020, 6, 4, 19, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 435491949, 'comment_body': '""Augments the world"" sounds a bit ... broad and unspecific. I\'d be a bit more specific and explain that this only has the desired effect if the entity also has a `LocationComponent` that determines the location and direction of the effect.', 'comment_created': datetime.datetime(2020, 6, 4, 19, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a0a6bd08410685176cdb5b0e58d71b9410647b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40148a8063af94aebd41409c54e36544dd0f24d0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091ed0bcfd1a7a3d76deedd0cfbd989e27219293', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '343e3b168ea917686b8f660b4a40fc4306e5ecf8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d5405f4a2d8fe75af5a6f3845c9b1f50da74c9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a5ce0078a098662c9c471961d5ec442c208e97', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd150521c6a6b99e23117a4efd4772d228c6aaeab', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e338ffc31167bd2acc34265ddac4dfc54f4b8895', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4434ab4d0b015cc57fbe87832bfc17d75bab3337', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7313d35e86330f82b4f6e9b805f7288a10799e4', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21857ef5b9b1f76d2cc13997531e71c888fc9ea5', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34749281662af01e3ea720d047a96a67038f38df', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a27a35d6d93bb7643efc4d36ff70b351ee2e1e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc9953aa22966621ee513ca6f22c07a12a08320', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cd65431d8c886a1c804bd9f1802ce8db2f1247', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5588c8dba5b02dc1f7f5e74b4699f1c22eaedc04', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2bd93a4b7b32998e5e6c6604605ae9a1085237f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0838ff6cf32449c1436c496455cd8048bd8a15eb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73b263c76c779b878e59e92218937512fff19ba3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ceb200ddea3f1681cc4d3f3042373a882e0141', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53f47841fe8be80272fdea9505bb21047741b56', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d908a84667642d1b69ee6ba4632fc116cd75202', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b088a6cab52054eac5beded76a602644c030f376', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e811ee107b2fa2dad21425cdd5871ff9a950dc', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82c9c02488604023ea63964687b9a60e0d2f07f1', 'committer_username': 'skaldarnar', 'committer_name': 'Tobias Nett', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 18, 10, 28, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ecc2e54bb3ff668b31ad42587a15910b3617268', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0365f965d9133186827b18659c8cf7cd5f25510', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ef87b35f1a1defa145e0bbb0d6694bfe34f32a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4163812ef5073b7b7aed97fe4c3d58004c7c4cf3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79931823a1f4d93136bfa7436c12ccadf0f159af', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110512978e521f9a549edb62ef37861d6e432c37', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e065c78d797382136760a432d98422ea34e4dbd', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8dacd0761242ab72687fb0b51732a0cdf770a64', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55a351d60a1dda58dcb112a3d458cde688ff130b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e0c2d8d91bda198f5661aeca567eddbb2a428c7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '443faba6680821d2ec72b860ac69e2e869848231', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b473f21899d0e5fef28684b4d83fb76d8ecfff8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '784c0f95c28717d4bcdf5dad9dbbdafddffbaf67', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
427736527,Add Hyperthermia Component when player enters Desert Biome ,"This PR is a part of the Extreme Climate Effects - Desert. 
Adds Hyperthermia  Component to player entity when player enters Desert. 
Also reduces movement speed and jump speed owing to obstruction due to the Desert sand.",True,15,https://api.github.com/repos/Terasology/ClimateConditions/pulls/15,https://github.com/Terasology/ClimateConditions/pull/15,closed,98,0,3,24,0,4,0,0,[],2020-06-04 10:22:11+00:00,2020-06-06 21:16:35+00:00,212064.0,"2 days, 10:54:24","[{'comment_id': 435530908, 'comment_body': 'see above', 'comment_created': datetime.datetime(2020, 6, 4, 20, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 435531291, 'comment_body': 'see above', 'comment_created': datetime.datetime(2020, 6, 4, 20, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 435531533, 'comment_body': ""I don't think you need that here (yet) üòâ "", 'comment_created': datetime.datetime(2020, 6, 4, 20, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 435532634, 'comment_body': 'Display names are subject to change and internationalization. I\'d suggest creating a new constant of type `Name` for desert (should be ""CoreWorlds:Desert"" I think) and comparing with the biome id instead of the display name.', 'comment_created': datetime.datetime(2020, 6, 4, 20, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da324509e5cc0bbfd59c82814451e9b0538faa', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc8563ecb2719592433a845c0b7d8db478a3f99', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5890374536a2e683a437f162a81ac64823a0f60', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11adfb275d9e72f68f1803f9d48aa0491a7d051', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7358dbd5b876a9bb4b97ba2e968e6edcf7e8414c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc1066ffae5abf29ee0c2c038b95b8d7263d551', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a4162dca0128b87e8694707c9761ed15276e9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0968c685b6b308a8a772646f3dff0ee81419b1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44316fc62e47bb8acb52442f4f70ec03c2cba40b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab70de9e782c910588d775f6abb5b110d479f9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc4f68fde1b3d76edb81a9b53a624089bc199a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1eada701c10620b2d0805a8ea7b15241adf17a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abbbeca573c60702f47929857fc2c2f7eba78b8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cb959acf082f89fc40ae701a87607fad51efd5d', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e60d28f57abc9458f4f78e9d0bafef616e942b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b7ec72e414f89f571a1e8d0567b5e0aa2f8c55', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41dfa1d0b7a2ba9beb705abe23c89fbcd5c4ed17', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '679c947d2ad1c71559fb679b086678ec346d4376', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
431614269,Use AffectThirstEvent,"This PR along with PR: https://github.com/Terasology/Thirst/pull/16 introduces AffectThirstEvent which works similar to AffectJumpForceEvent and GetMaxSpeedEvent.
 
Closes #16 ",True,19,https://api.github.com/repos/Terasology/ClimateConditions/pulls/19,https://github.com/Terasology/ClimateConditions/pull/19,closed,12,4,2,24,0,1,0,0,[],2020-06-09 08:14:12+00:00,2020-06-10 09:18:34+00:00,90262.0,"1 day, 1:04:22","[{'comment_id': 437695978, 'comment_body': 'please add this multiplier to the other ""configured"" multipliers of this class', 'comment_created': datetime.datetime(2020, 6, 9, 20, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da324509e5cc0bbfd59c82814451e9b0538faa', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc8563ecb2719592433a845c0b7d8db478a3f99', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5890374536a2e683a437f162a81ac64823a0f60', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11adfb275d9e72f68f1803f9d48aa0491a7d051', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7358dbd5b876a9bb4b97ba2e968e6edcf7e8414c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc1066ffae5abf29ee0c2c038b95b8d7263d551', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a4162dca0128b87e8694707c9761ed15276e9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0968c685b6b308a8a772646f3dff0ee81419b1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44316fc62e47bb8acb52442f4f70ec03c2cba40b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab70de9e782c910588d775f6abb5b110d479f9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc4f68fde1b3d76edb81a9b53a624089bc199a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1eada701c10620b2d0805a8ea7b15241adf17a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abbbeca573c60702f47929857fc2c2f7eba78b8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce30c8c717b58f0724dc5e6690de912d7c2c20c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d9c91865062e37a3d212a2031e07eba53f4b05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90647f79eaf4451f804f523d05ed77347c1ef1c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87264d487d39c794bf49ab4802e74cc8a47e7982', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ac2c77a9bd1ee5abfdf18fc29668cdfe4e9022', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
431883555,feat: Weaken player when they have Hyperthermia,"This PR weakens the player entity while the player has a Hyperthermia Component by reducing the max health, current health and regen rate of the player. 
The reduced health is still mapped to an equal no. of hearts as in the original health bar. Which means if the maxHealth is now changed to 80, each heart in the health bar which was worth 10 hit points originally is now worth 8 hit points after the change.
Thus on the front end the player has a similar health component as before but on the back end everything is scaled by 0.8 times. Thus all types of damage would essentially feel like they are scaled to 1/0.8 i.e 1.25 times.",True,20,https://api.github.com/repos/Terasology/ClimateConditions/pulls/20,https://github.com/Terasology/ClimateConditions/pull/20,closed,30,0,1,32,4,9,1,0,[{'name': 'Type: Improvement'}],2020-06-09 15:26:15+00:00,2020-06-28 12:18:24+00:00,1630329.0,"18 days, 20:52:09","[{'comment_id': 438998006, 'comment_body': ""With this implementation the current health will drop with the weakening effect kicking in - probably even beyond the new value of `maxHealth`. Is that intended?\r\n\r\nFor instance, if the player's health is at ‚ô•Ô∏è 80/100 when the hyperthermia component is added it would result in the player's health being ‚ô•Ô∏è 64/80. Imho it should be ‚ô•Ô∏è 80/80, though.\r\n\r\nThus, I'd say the new `currentHealth` should be the minimum of `currentHealth` and the new `maxHealth`."", 'comment_created': datetime.datetime(2020, 6, 11, 18, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 438998437, 'comment_body': ""Same here - or rather: don't do anything. The current health should stay as is, and regen will recover over time."", 'comment_created': datetime.datetime(2020, 6, 11, 18, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 439039833, 'comment_body': ""Yes that is intended.\r\nI did originally set it to minimum of current health and new maxHealth but then I kind of thought a few things...\r\n1. if current health is 90 before change and new maxHealth is 80 then on screen... the player originally had 9 hearts out of 10 and then after weakening the player will have 10 whole hearts which would be worth 80 hit points.. But it would kind of feel like the player has regenerated...\r\n2. Since I'm calling this weakening of the whole body, let's say the original damage was caused by some bruises due to falling, etc. Now, I'm saying the whole body has weakened which means every muscle in the body individually has also weakened similarly the regen has weakened.... so the whole health is brought down to 80% of original... that is the bruised muscles remain bruised + are weakened due to overheating of body...\r\nThis was what I thought while writing this method... although, I don't know which one would be better but this explanation coupled with the visual reason made me write the method as I did."", 'comment_created': datetime.datetime(2020, 6, 11, 20, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 439326973, 'comment_body': 'This, I agree to.', 'comment_created': datetime.datetime(2020, 6, 12, 10, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 439331846, 'comment_body': 'No wait, this is weird. Either both need to change or neither one does.. \r\nCould you please read the above comment and tell me your thoughts, whether the current health should be scaled or not.', 'comment_created': datetime.datetime(2020, 6, 12, 10, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 439499308, 'comment_body': ""I would argue that (1) is no good reason for the code being that way. This rather indicates that the curren UI system for health (and/or bars in general) is not flexible enough to express what we want to do here. \r\n\r\nPersonally, I think that improving this could also become a part of your project, as the overall goal is to build a solid foundation of gameplay features, and I'd rather have a small but noticable improvement that many fancy features under the hood we cannot convey to the player.\r\n\r\nI think (2) depends on how one subjectively looks at it. I'd argue that the bruises you mention are accounted for by having reduced health. Weakening the body now implies that I cannot recover from these bruises (get back to full health), but it does imply taking damage in some way. \r\n\r\nThus, I'll stick to my suggestions as made yesterday üòâ "", 'comment_created': datetime.datetime(2020, 6, 12, 15, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 439555346, 'comment_body': ""Yeah, well that does make more sense. Will look into the UI System then.\r\nThere's a tiny little thing I had in mind, just to keep in mind. As long as we do not have a temperature system which has levels of the extreme effects, this feature might become weird. Right now, the player shall weaken as soon as he/she enters the desert. Now, if the player is playing on the boundary of desert and forest, s/he shall essentially end up receiving a damage of 20 hit points if desert is entered and then exited from immediately after, since we won't be scaling back the health and let regen do the work."", 'comment_created': datetime.datetime(2020, 6, 12, 17, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 442373279, 'comment_body': ""We'll have the temperature system soon enough to overcome this obstacle. For now, getting a proper visual representatation of this feature is of higher priority to me that optimizing the gameplay right now although we have planned with a different logic in the background anyways...\r\n\r\nHow's the UI work going?"", 'comment_created': datetime.datetime(2020, 6, 18, 17, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442848379, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da324509e5cc0bbfd59c82814451e9b0538faa', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc8563ecb2719592433a845c0b7d8db478a3f99', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5890374536a2e683a437f162a81ac64823a0f60', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11adfb275d9e72f68f1803f9d48aa0491a7d051', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7358dbd5b876a9bb4b97ba2e968e6edcf7e8414c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc1066ffae5abf29ee0c2c038b95b8d7263d551', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a4162dca0128b87e8694707c9761ed15276e9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0968c685b6b308a8a772646f3dff0ee81419b1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44316fc62e47bb8acb52442f4f70ec03c2cba40b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab70de9e782c910588d775f6abb5b110d479f9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc4f68fde1b3d76edb81a9b53a624089bc199a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1eada701c10620b2d0805a8ea7b15241adf17a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abbbeca573c60702f47929857fc2c2f7eba78b8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce30c8c717b58f0724dc5e6690de912d7c2c20c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d9c91865062e37a3d212a2031e07eba53f4b05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '908ee8f214e03bfe6502aabf22b7ce7acd074394', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dd76bd78967d04feb09826d36c99fd5626421de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c5e12d8929c417ec603d9e1b80722ae2543f8e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32386f84aeb55bba3a06719d335e30e1922237cd', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f3449aff9051f78aa06a83b007c88ffac6a37d', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f2b9208034a8bc1ee6be1c98265b4f7a0161d3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '258ec2aaa5e9d71fda4241c6e5fba763ba331297', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad75b66bd98709da64cb09430ef76df5ba28586b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48cb2709f157acb65e7c66aa48bb4e32de6f9e3e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b35f37acca12c4bb989a835c05abf42146983a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449b27ae1ec6f1c9f6f9aece789f45cb3ae5b9ee', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
442812290,Relocates multipliers and adds Hyperthermia Docs,"Relocates multiplier variables into their respective Hypo/Hyperthermia Components. 
Adds documentation for Hyperthermia Effects.",True,22,https://api.github.com/repos/Terasology/ClimateConditions/pulls/22,https://github.com/Terasology/ClimateConditions/pull/22,closed,60,33,4,7,0,5,0,0,[],2020-07-01 16:34:29+00:00,2020-07-08 19:06:04+00:00,613895.0,"7 days, 2:31:35","[{'comment_id': 449787408, 'comment_body': 'This sounds like it should be the documentation for `weakenPlayer` instead of `onHyperthermia`', 'comment_created': datetime.datetime(2020, 7, 4, 16, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449787599, 'comment_body': 'This sounds like it should be the documentation for `removePlayerWeakness` instead of `beforeRemoveHyperthermia`', 'comment_created': datetime.datetime(2020, 7, 4, 16, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449787671, 'comment_body': ""While we're at it, can we align `weakenPlayer` and `removePlayerWeakness` :sweat_smile: "", 'comment_created': datetime.datetime(2020, 7, 4, 16, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449789899, 'comment_body': ""Yeah I know, but I just thought if more effects were to be added then... \r\n Weakens the player by reducing the maxHealth of the player and newEffect ( for eg. blurs player vision) when {@link HyperthermiaComponent} is added.\r\n\r\nwould sound like documentation for onHyperthermia (these effects are added because of hyerthermia) and then the function names automatically express what they're doing.."", 'comment_created': datetime.datetime(2020, 7, 4, 17, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 449789904, 'comment_body': ""Yeah I sort of couldn't think of an opposite to weakenPlayer üòÖ, I mean strengthen Player sounds a little different than what the function does....\r\nAnd addPlayerWeakness also sounded weird to me .."", 'comment_created': datetime.datetime(2020, 7, 4, 17, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': '40f1359c7cc41ade8dbc64c08a4e4fac759824f1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2746ca142bb41c40cc525fbdf9dcd0a4ee682212', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65ff5a234a83d42f7352c021f658f7f924d217d9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7269b0fe313d75cd9873bff6711470a4e0fdde3c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c054418c431125910dccc27275186e0e1b1efb7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c99faef6c3c69236e0c8f8ee970f8b4604f7df8c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f75686780d3dc508c3a1a4a3dd892045a9a066c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
431611280,Add AffectThirstEvent,"This PR introduces AffectThirstEvent which is sent out by the ThirstAuthoritySystem to allow for other systems to modify thirst decay.
This works similar to GetMaxSpeedEvent and AffectJumpForceEvent",True,16,https://api.github.com/repos/Terasology/Thirst/pulls/16,https://github.com/Terasology/Thirst/pull/16,closed,33,1,2,2,1,0,1,0,[{'name': 'Type: Improvement'}],2020-06-09 08:08:28+00:00,2020-06-09 20:22:09+00:00,44021.0,12:13:41,[],"[{'commit_sha': '5f58b35187f4ecddb09f570dd299e1c32e936be5', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '012fdbc898c7cfa355bdeeda66c9a520103a2037', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
433812897,Add AffectHungerEvent,This event is sent out by the HungerAuthoritySystem for other systems to modify the expected hunger decay.,True,19,https://api.github.com/repos/Terasology/Hunger/pulls/19,https://github.com/Terasology/Hunger/pull/19,closed,44,10,2,2,2,3,0,0,[],2020-06-12 17:53:00+00:00,2020-06-17 19:33:05+00:00,438005.0,"5 days, 1:40:05","[{'comment_id': 439847130, 'comment_body': 'this is only used in `onPeriodicActionTriggered` and thus can be method-local.', 'comment_created': datetime.datetime(2020, 6, 14, 16, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 439847151, 'comment_body': '```suggestion\r\n                final float expectedDecay = (healthDecreaseInterval * hunger.foodDecayPerSecond) / 1000;\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 16, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 439847274, 'comment_body': 'I don\'t think we need to change the value of the ""expected decay"". We use it to trigger `AffectHungerEvent` and afterwards are only interested in the result.\r\n\r\n```suggestion\r\n                hunger.lastCalculatedFood = Math.max(0, hunger.lastCalculatedFood - affectHungerEvent.getResultValue());\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 16, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': '3eccc7bb8a65116694c048c6a9e3580cff34ea72', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ae1161e28bc6524a429378a1966b98e90fcfa6', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
434014206,fix: Send AffectThirstEvent more often,"There was a slight error in AffectThirst which I just noticed. 
In the current condition affect thirst is sent out only when the player changes mode of movement (walking / running) which means thirst won't be modified if the player does not change the movement mode. This fixes the same.",True,17,https://api.github.com/repos/Terasology/Thirst/pulls/17,https://github.com/Terasology/Thirst/pull/17,closed,6,5,1,6,1,8,1,0,[{'name': 'Type: Bug'}],2020-06-13 14:36:35+00:00,2020-06-29 20:22:01+00:00,1403126.0,"16 days, 5:45:26","[{'comment_id': 439849977, 'comment_body': ""I don't see why this should be a class member - it is only used in `characterMoved` method.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 6, 14, 17, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 439851800, 'comment_body': 'While this ""fixes"" your problem that `AffectThirstEvent` is only called once (or when changing the movement mode) \r\n\r\nI\'m wondering why it is **not called** when the periodic action is resolved? That would also solve your problem, I guess ü§î At least, it should be consistent to _always_ send out `AffectThirstEvent` whenever we calculate and set the values on the thirst component.', 'comment_created': datetime.datetime(2020, 6, 14, 17, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 439852011, 'comment_body': 'Is `event.isRunning()` ever false? I think running is always active at the moment, so this should basically be a constant value? üßê After all, reacting to the `CharacterMoveInputEvent` (i.e., the _input_ event of the player hitting a button üôÑ ) might be the wrong level of abstraction.\r\n\r\nInstead, the thirst system itself could react to the `AffectThirstEvent` and modify the value depending on the movement movement mode (or any other information taken from some component). ', 'comment_created': datetime.datetime(2020, 6, 14, 17, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 440021507, 'comment_body': ""event.isRunning() returns 1 while running and 0 while walking I guess .....(that's what the code seems to rely on).."", 'comment_created': datetime.datetime(2020, 6, 15, 8, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 440021517, 'comment_body': ""I kind of don't understand where that is taking place.... For hunger, it takes place along with hunger damage which has a period of 3 seconds. But, the thirst damage has a period of 60 seconds, so that can't be the only place where thirst is being updated, because I can see it updating every second or so.....\r\nChanging the values of the thirst component automatically resulted in a change in the thirst decay... Now, the thirst decay occurs every second(or less) even while the player is stationary, just the decay per second changes value every time the player moves(if needed). "", 'comment_created': datetime.datetime(2020, 6, 15, 8, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 441796692, 'comment_body': ""I'm wondering whether it would make sense to align this with `Hunger` by reducing the period of the thirst damage periodic action and only checking the thirst then ü§î I'm absolutely not sure, whether it's currently possible in-game to really run (without adjusting the speed via `setSpeedMultiplier`)... So _maybe_ we just get rid of that differentiation and (re-)introduce it for both Hunger and Thirst, once we actually _can_ have different movement modes in-game ü§∑\u200d‚ôÄÔ∏è "", 'comment_created': datetime.datetime(2020, 6, 17, 19, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 442371373, 'comment_body': ""ehm - I'm puzzled by how this actually works at all üßê  You are right, the periodic action triggers only once per minute (I guess to have a slow decay when just idling). \r\n\r\nI fear fixing this turns out to be more elaborate work than initially planned üôÑ I'm tending towards the steps proposed by @jdrueckert:\r\n\r\n- don't differentiate between running and walking (likely without effect anyways)\r\n- reduce the interval of the periodic event (align with Hunger)\r\n- only update the thirst value in a single place (taking elapsed time into account)\r\n- add proper documentation for both system"", 'comment_created': datetime.datetime(2020, 6, 18, 16, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442749849, 'comment_body': ""I would like to point out that the thirst actually decays in a very small interval (sub second), If you test out this PR and set the thirst multiplier in HyperthermiaSystem to 10 - 15, you can clearly see thirst decaying on a sub-second interval with a high rate. But the method that deals the thirst damage is not the one causing the decay since it has a period of 60 seconds. So there must be some other system which is causing the thirst decay. (thirst aurthority system probably only changes the thirst component of the entity and then some other system does the actual decaying part). However, I still do not get which is this other system.\r\nFollowing this another thing popped into my mind: what if Hunger also changes in a similar way: even if the period of the hunger damage is 3 seconds, there could be some other system entirely which is decaying hunger in a sub-second interval..\r\nAnd about isRunning(), won't it be easier to just to fix isRunning()?, I mean we can toggle walking/running in game, so we could simply change the value of  _running_ (the bool variable which is returned by isRunning) either by sending out an event or fixing whatever is in-place at the moment and not working..."", 'comment_created': datetime.datetime(2020, 6, 19, 10, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': '5f58b35187f4ecddb09f570dd299e1c32e936be5', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '012fdbc898c7cfa355bdeeda66c9a520103a2037', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0436ac2b8aa087173610cb59d2c8382c96609136', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9844143713d7a42ffc920cfaa210f00412fb5f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f502175292efd527c37468baa828abf7593bd8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6030461a12701d48149f1dc788106b98d4ec8d8f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
437108739,Health HUD: change maximum icons when maxHealth of entity is changed.,This PR changes the maximum number of health icons that are displayed whenever the maxHealth of an entity is changed.,True,45,https://api.github.com/repos/Terasology/Health/pulls/45,https://github.com/Terasology/Health/pull/45,closed,104,0,4,8,2,5,0,0,[],2020-06-19 13:41:20+00:00,2020-06-27 19:04:30+00:00,710590.0,"8 days, 5:23:10","[{'comment_id': 443709315, 'comment_body': 'IMO it makes sense if other entities are able to ""join the discussion"", so consider making this an `AbstractValueModifiableEvent` and adjust the Health-internal receiver to be the last entity reacting to this event (see comments above)', 'comment_created': datetime.datetime(2020, 6, 22, 17, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 443710203, 'comment_body': 'this should be the last receiver of the event, so that no other entity can affect the max health after we updated the bar, so we should\r\n- have the lowest priority\r\n- consume the event', 'comment_created': datetime.datetime(2020, 6, 22, 17, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 443711362, 'comment_body': 'ideally, other entities should be notified when such a change took place, so we should send out a notification event (immutable) after changing max health - we can further consider whether or not to let the ui update react to that instead of the change event', 'comment_created': datetime.datetime(2020, 6, 22, 17, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 446517035, 'comment_body': 'AbstractValueModifiableEvent is not consumable though...  But, Changed the priority.', 'comment_created': datetime.datetime(2020, 6, 27, 11, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 446556819, 'comment_body': '```suggestion\r\n}\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 27, 19, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': 'f242f14b94bd22325364156134fbc9b60ac63a26', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90712bd8a5b268e140c40193b4e74d1fc7276543', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1955041579917388801a2fe4d066fe32aad54b1e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799375228704b6c991395eec131e9ccd69eb72bd', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0f445cd6b460138028d76336f5ea978e935f19', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53eb506bd97e878c489cb0656a773ae343d94ce3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc9615f206a1c840351f0903ba43b7d63d34223', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33010cd8c0d5f968d44d3fc39310197167d8868', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
437442020,Add setMaxIcons to UIIconBar,This PR adds a setMaxIcons() method to UIIconBar.java.,True,4058,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4058,https://github.com/MovingBlocks/Terasology/pull/4058,closed,12,5,1,4,0,0,2,0,"[{'name': 'Topic: UI/UX'}, {'name': 'Type: Improvement'}]",2020-06-20 17:59:07+00:00,2020-06-22 10:13:42+00:00,144875.0,"1 day, 16:14:35",[],"[{'commit_sha': '341df945f90b4c7404f71fef9775c75f5be92d0a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f15fca0c6652ed0cba5e44c7ca64f655b8a3ea0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe91e9ceb04255fa53d5bf6155f1b180e6fe0bc0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '938c5c12600dfe1c4d73d69c1b52eaa580cf565b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
440961083,doc: fix JavaDoc for maxHealth,,True,46,https://api.github.com/repos/Terasology/Health/pulls/46,https://github.com/Terasology/Health/pull/46,closed,3,3,1,11,0,0,1,0,[{'name': 'Type: Bug'}],2020-06-27 20:53:56+00:00,2020-06-28 12:13:50+00:00,55194.0,15:19:54,[],"[{'commit_sha': 'f242f14b94bd22325364156134fbc9b60ac63a26', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90712bd8a5b268e140c40193b4e74d1fc7276543', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1955041579917388801a2fe4d066fe32aad54b1e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799375228704b6c991395eec131e9ccd69eb72bd', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0f445cd6b460138028d76336f5ea978e935f19', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53eb506bd97e878c489cb0656a773ae343d94ce3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc9615f206a1c840351f0903ba43b7d63d34223', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33010cd8c0d5f968d44d3fc39310197167d8868', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c21b461322c446dfa0a7034220d239bd2bfd8bf', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa69f2e34d259d956c1477c340452846f86e58dd', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fa342c5edeba3a1e7490597c9f6b3c84a713c19', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
443351249,feat: Adjust currentHealth on MaxHealthChanged,The PR reduces the currentHealth of the entity to the newMaxHealth in case the currentHealth is greater than newMaxHealth.,True,47,https://api.github.com/repos/Terasology/Health/pulls/47,https://github.com/Terasology/Health/pull/47,closed,23,7,2,20,1,10,1,0,[{'name': 'Type: Improvement'}],2020-07-02 08:12:20+00:00,2020-07-13 09:12:51+00:00,954031.0,"11 days, 1:00:31","[{'comment_id': 449786651, 'comment_body': '1. please first change the values and send out the notification(s) afterwards\r\n2. if current health is changed, we need to send out a notification for that too', 'comment_created': datetime.datetime(2020, 7, 4, 16, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449786930, 'comment_body': ""Also just realized (must've missed that before), we have a `HealthChanged` event in `Health`, so maybe the corresponding event for max health should be `MaxHealthChanged` instead of `OnMaxHealthChanged`..."", 'comment_created': datetime.datetime(2020, 7, 4, 16, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449794295, 'comment_body': 'I tried using git reset -- HEAD command for this file \r\nbut for some reason, this still shows up here.......üòÖ', 'comment_created': datetime.datetime(2020, 7, 4, 18, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 449794942, 'comment_body': 'Never mind, done. I realized I was comparing it to my fork...', 'comment_created': datetime.datetime(2020, 7, 4, 18, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 450326027, 'comment_body': ""1. Do we really want to use a `DoDamageEvent` here? The health change is not really damage-inflicted, is it? :thinking: \r\n2. Tbh I'm not entirely sure whether this should be in `changeMaxHealth` or rather in `onMaxHealthChanged`..."", 'comment_created': datetime.datetime(2020, 7, 6, 16, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 450345911, 'comment_body': ""1. Yeah, I think we are doing damage, since maxHealth is being reduced damage is being dealt, and well the DoDamageEvent does have a prefab which stores information regarding the type of damage being dealt. And hence the maxHealthReductionDamagePrefab is enough to convey a damage is being dealt which is because we are reducing the player's maxHealth and the currentHealth is greater than the new maxHealth. Another thought, reducingMaxHealth is in itself a damage in a way just a little more permanent than a regular one. \r\n\r\n2. I think CurrentHealth should not be greater than maxHealth at any point of time another event handler can react to, thus the change should happen before a notification for maxHealth change is sent. So that if any of the event handlers reacts to the notification, then at the time currentHealth does not exceed the maxHealth even there."", 'comment_created': datetime.datetime(2020, 7, 6, 16, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 451762186, 'comment_body': ""wrt (2) okay fair point.\r\nwrt (1) I disagree in that we're doing damage. IMO not all health decreases are inflicted by damage - the English language knows many subtle differences here. From how I interpret it, damage is something that is inflicted from outside, either on purpose or by accident. Here however, the max health is impacted resulting in the actual health going down as well. Realistic examples might be becoming weaker with age or due to an illness - that's a difference to getting hit by somebody or something and suffering damage as a result."", 'comment_created': datetime.datetime(2020, 7, 8, 19, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 452180838, 'comment_body': 'Actually, I do not disagree with you in terms of whether it is actually a ""damage""... I mean I was leaning towards not calling it damage in the first place which is why I didn\'t use DoDamageEvent in my first iteration of the method.\r\n\r\nBut, only reason I think doDamageEvent should be used is because when currentHealth is changed, a HealthChangedEvent needs to be sent out. Now, this event is never used directly, 2 other events - OnDamagedEvent, OnRestored event implement this event. So I had to use either of the 2, among which OnDamagedEvent is clearly a better choice. Now, since we are already sending an OnDamagedEvent, I figured I might as well send a prefab specifying the type of damage which is a parameter of DoDamageEvent (actually now I see, OnDamagedEvent also has the damageType parameter).... \r\nSideNote: I could\'ve used HealthChangedEvent directly but the event does not specify whether the change in health was incremental or decremental.\r\nSo.. my options are:\r\n1. leave it as is.\r\n2. Use HealthChangedEvent directly (which doesn\'t specify the type of change)\r\n3. Use OnDamagedEvent directly (which would also be more or less same as the current situation only difference - the currentHealth will be reduced here and not in the DamageAuthoritySystem).. ', 'comment_created': datetime.datetime(2020, 7, 9, 12, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 453359684, 'comment_body': 'Thanks for the explanation! \r\n\r\nNitpick question: What happens if we send a DoDamageEvent with amount zero? Is that automatically canceled, or does that result in some audio cue of being hurt without actually being hurt?', 'comment_created': datetime.datetime(2020, 7, 12, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 453368450, 'comment_body': 'Yep 0 damage us ignored https://github.com/Terasology/Health/blob/178462a516e6b58d60bb2355709de916262236da/src/main/java/org/terasology/logic/health/DamageAuthoritySystem.java#L128-L129', 'comment_created': datetime.datetime(2020, 7, 12, 22, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': 'f242f14b94bd22325364156134fbc9b60ac63a26', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90712bd8a5b268e140c40193b4e74d1fc7276543', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1955041579917388801a2fe4d066fe32aad54b1e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799375228704b6c991395eec131e9ccd69eb72bd', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0f445cd6b460138028d76336f5ea978e935f19', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53eb506bd97e878c489cb0656a773ae343d94ce3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc9615f206a1c840351f0903ba43b7d63d34223', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33010cd8c0d5f968d44d3fc39310197167d8868', 'committer_username': 'jdrueckert', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 7, 14, 31, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c21b461322c446dfa0a7034220d239bd2bfd8bf', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa69f2e34d259d956c1477c340452846f86e58dd', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fa342c5edeba3a1e7490597c9f6b3c84a713c19', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3bae6952e972b387e6c801c8abdbf6218793b7c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef8777fb35887f26af36a18f6c837ee15698f111', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '177bac6963e11c1c9c14912c0220ffef4fca752f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cfbdbf4025696e5ff2a01f81530f580bec557df', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae552310ea164c466003afc75b4623acd8e96115', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d47b0e29516984c5cc38892ad65f516c1f0607', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c06f53c89fb651501d7187af8379d8b26ce0da3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9615d31b9094401704c965af87981933428260a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd35d739631256fbc68915859f81b27da866198', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
439147886,Items for Overcoming Extreme Climatic Obstacles,"This PR adds items for Overcoming Extreme Climatic Obstacles namely : Waterskin, WoolVest, WoodenShoes, ArabicThawb.
The PR only includes the item prefabs and their respective crafting recipes.
Note: The png images added in textures are temporary for testing the droppingand crafting the items. These images need proper artwork which then needs to be added in the ManualLabor.png grid and ManualLabor.atlas and then the prefabs of the items need to be modified accordingly.",True,30,https://api.github.com/repos/Terasology/ManualLabor/pulls/30,https://github.com/Terasology/ManualLabor/pull/30,closed,125,1,13,7,7,5,0,0,[],2020-06-24 11:34:13+00:00,2020-07-08 19:07:15+00:00,1236782.0,"14 days, 7:33:02","[{'comment_id': 450320800, 'comment_body': 'Same issue as with the items in `WildAnimals`: The item itself has no knowledge about what effect it has... actually there can be situations (`AlterationEffects` not enabled) where the item will have no effect at all...', 'comment_created': datetime.datetime(2020, 7, 6, 15, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 450322034, 'comment_body': 'see above', 'comment_created': datetime.datetime(2020, 7, 6, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 450322134, 'comment_body': 'see above', 'comment_created': datetime.datetime(2020, 7, 6, 15, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 450323201, 'comment_body': ""I'd think you'd maybe need some kind of (leather?) straps to fasten the shoe to the foot :thinking: "", 'comment_created': datetime.datetime(2020, 7, 6, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 450826043, 'comment_body': 'Strings should work I guess... like just tie them to the foot..', 'comment_created': datetime.datetime(2020, 7, 7, 12, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': 'c66ff54944419e9f11dd393ced7cb73f160df7b9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c523967bf9be6511f674c13787f61f0f46ed9f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74b7111d7a5ef3c2b50069aee41320a457f0c58', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc93067771930dc95923e950008fcc403c5a38c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a30911b9b103eae99eca1be19a3263a5736e7c84', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a10e1587f99f09726e2af24bec5a13199db71f9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04dcdc3bf0f8c7f32956cf112c972e28ece90cb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
439149076,Items for Overcoming Extreme Climatic Obstacles,"This PR is a support PR for : https://github.com/Terasology/ManualLabor/pull/30
NOTE; the png textures are temporary and are to be treated as placeholders for final artwork.",True,56,https://api.github.com/repos/Terasology/WildAnimals/pulls/56,https://github.com/Terasology/WildAnimals/pull/56,closed,116,1,6,7,2,4,0,0,[],2020-06-24 11:36:19+00:00,2020-07-06 15:54:35+00:00,1052296.0,"12 days, 4:18:16","[{'comment_id': 445702439, 'comment_body': ""Please don't overwrite the old item drop, I believe e.g. MR depends on deer dropping meat as a food source.\r\n`DropGrammar` should allow you to\r\n- either add multiple drops\r\n- or (which I'd prefer) drop each of the two possible drops (meet, hide) with a certain probability"", 'comment_created': datetime.datetime(2020, 6, 25, 16, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 447549966, 'comment_body': ""Yes I've added the two possible drops but both these drops will have their individual probability of drop which would be independent of each other, which means at any point of time, there can be either one of the two items, both items together, or even none at all.\r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 9, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 449787842, 'comment_body': '`deerHide` has no information about when it\'s dropped. So something like ""the skin of a deer"" would be more suitable I\'d say.', 'comment_created': datetime.datetime(2020, 7, 4, 16, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449787904, 'comment_body': 'see above, maybe rather ""soft, thick hair that grows on the bodies of sheep""', 'comment_created': datetime.datetime(2020, 7, 4, 16, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': '522b362b6e8fd9a735793286bb0ff8b78e847245', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ebf6355c21f86b6af4dd6dd403b845427001430', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c91b05b9d9edbe4cf8cc62d8598e82827347581', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c18737af5f90f687d691f74217a782a30182117', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f1bbff6c7672ff84cd52170230490ddb084d70', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d5b57a4731d01dcda72f34fdd4ffbecf653273', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd0bd0365538eec38ad947426f875ef52f0cf916', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
453712190,Add a separate texture for empty state of the Waterskin item,"Adds a separate texture for the empty state of the Waterskin.
// Note: the texture is just a place holder. After proper artwork is completed, it will be required to be added in ManualLabor.png and ManualLabor.atlas.  And the texture in the Waterskin.prefab will need to be updated accordingly.",True,34,https://api.github.com/repos/Terasology/ManualLabor/pulls/34,https://github.com/Terasology/ManualLabor/pull/34,closed,5,4,2,12,0,1,0,0,[],2020-07-20 18:25:22+00:00,2020-07-23 16:51:07+00:00,253545.0,"2 days, 22:25:45","[{'comment_id': 457612229, 'comment_body': 'texture with hole -> texture for when the item is filled.\r\nhttps://github.com/Terasology/Fluid/blob/00e18ab0acd8adfbe54847aeab4c4c90ae07f8e1/src/main/java/org/terasology/fluid/component/FluidContainerItemComponent.java#L45-L46\r\n\r\nthe fluidMin/SizePerc s are required as they are checked if null when setting the icon for filled item.\r\nhttps://github.com/Terasology/Fluid/blob/00e18ab0acd8adfbe54847aeab4c4c90ae07f8e1/src/main/java/org/terasology/fluid/system/FluidClientSystem.java#L103-L106\r\n\r\nMaterialFluidItemContainer is not needded as it is only used in the system which adds a tint overlay in items (water tint in woodenCup and Bucket) ', 'comment_created': datetime.datetime(2020, 7, 20, 18, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': 'c66ff54944419e9f11dd393ced7cb73f160df7b9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c523967bf9be6511f674c13787f61f0f46ed9f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74b7111d7a5ef3c2b50069aee41320a457f0c58', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc93067771930dc95923e950008fcc403c5a38c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a30911b9b103eae99eca1be19a3263a5736e7c84', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a10e1587f99f09726e2af24bec5a13199db71f9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04dcdc3bf0f8c7f32956cf112c972e28ece90cb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ebc611d9700d0c9ba0e11c1e00495d63e9b2bb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b1467c4e26cbddb8eefb4b8d0ea104e14df3f9a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9168ddfd7efd46b7cff18ad779e71f0cbef11fc0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68b8a45e05b7a030eb81a07e760f7bbdac230f6a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7301d51e2353e30c84d801d3850e8012eca5b130', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
450145653,fix: Wooden Cup texture in ManualLabor.png,"While adding items for overcoming obstacles in: https://github.com/Terasology/ManualLabor/pull/30, the texture of the new item- woolVest ended up slightly occupying a small part of the woodenCup's texture slot in ManualLabor.png, hence a black bar appears on top of the woodenCup at the moment.
This PR fixes the same by slightly moving the woolVest texture upwards so that it is out of the woodenCup's texture slot.",True,33,https://api.github.com/repos/Terasology/ManualLabor/pulls/33,https://github.com/Terasology/ManualLabor/pull/33,closed,0,0,1,9,0,0,0,0,[],2020-07-16 12:10:23+00:00,2020-07-16 17:57:50+00:00,20847.0,5:47:27,[],"[{'commit_sha': 'c66ff54944419e9f11dd393ced7cb73f160df7b9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c523967bf9be6511f674c13787f61f0f46ed9f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74b7111d7a5ef3c2b50069aee41320a457f0c58', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc93067771930dc95923e950008fcc403c5a38c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a30911b9b103eae99eca1be19a3263a5736e7c84', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a10e1587f99f09726e2af24bec5a13199db71f9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04dcdc3bf0f8c7f32956cf112c972e28ece90cb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ebc611d9700d0c9ba0e11c1e00495d63e9b2bb', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b1467c4e26cbddb8eefb4b8d0ea104e14df3f9a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
449118901,Add Filling Bar to Fluid Container Items,"The PR adds a Filling Amount Bar over the fluid container item in the inventory.

![image](https://user-images.githubusercontent.com/29981695/87822387-aa2a9b00-c871-11ea-9631-1c436e2cd191.png)

To test: 
Since as of now, fluid containers are directly completely filled, following can be used to test:
1.temporarily change prefab of items to change current volume of the containers.
OR
2.Activate IRLCorp module, use fluidTank, woodenBucket, woodenCup to fill in varying amounts.. for eg. fill tank with bucket(+1000)
remove some using woodenCup(-300) = Net +700,  fill woodenBucket to see the partially filled bar.",True,20,https://api.github.com/repos/Terasology/Fluid/pulls/20,https://github.com/Terasology/Fluid/pull/20,closed,45,2,1,3,2,7,1,0,[{'name': 'Type: Improvement'}],2020-07-14 21:17:28+00:00,2020-07-17 19:11:27+00:00,251639.0,"2 days, 21:53:59","[{'comment_id': 454651935, 'comment_body': 'This extra 1000 was probably used to convert litres into ml, but I think as of now, the fluidContainerItems use ml..\r\nhttps://github.com/Terasology/ManualLabor/blob/6314132942b9503c95b6198552b3713e75eee389/assets/prefabs/items/WoodenCup.prefab#L32', 'comment_created': datetime.datetime(2020, 7, 14, 21, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 456339047, 'comment_body': 'What is the `1f * ...` for? Both `volume` and `maxVolume` are floating point numbers, so the division should just work fine (see https://github.com/Terasology/Fluid/blob/develop/src/main/java/org/terasology/fluid/component/FluidContainerItemComponent.java#L33-L37)\r\n\r\n```suggestion\r\n        float fillingPercentage = fluidContainer.volume / fluidContainer.maxVolume;\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 9, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456344672, 'comment_body': ""I'd rather use less-than comparison here (`<`). The percentage should never be above 1, but anyways...\r\n\r\nDeciding on when exactly to show the filling bar is another topic (not to be solved in this PR - let's get this merged!). With the current approach, if no bar is visible the container is completely filled. In all other cases, the bar is visible (also if the filling amount is 0).\r\nIf we keep the assumption that fluid container items will always have different visual representations for filled (cup or bucket with blue fluid layer) and empty (empty cup or bucket) we may just display the bar in case the current filling is `0 < volume < 1`."", 'comment_created': datetime.datetime(2020, 7, 17, 9, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456347196, 'comment_body': 'It would be nice to add a static method to the Terasology NUI Color class `Color::getHSBColor`. I cannot imagine this is the only place where we are doing something like this... ü§î  ', 'comment_created': datetime.datetime(2020, 7, 17, 10, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456352068, 'comment_body': ""I'd prefer to use a simple blue color for the filling. If you want to stick to a gradient, maybe we can use one from dark to light blue (change the **B**rightness instead of the **H**ue in HSB color)."", 'comment_created': datetime.datetime(2020, 7, 17, 10, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456591155, 'comment_body': ""The purpose of gradient was to have different colors(red, yellow, green) conveying the amount filled just by looking at the color... red signifying dangerously low or near empty .... yellow meaning -  you've got some left, green - you've got enough water or near full...\r\nIf we're using only blue color, I don't think the gradient would be much help in creating the desired effect.\r\nSo I'll go ahead with a simple blue color."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 456600777, 'comment_body': 'So just want me to add something like this in Color.java right?:\r\n>  public Color getHSBColor(float h, float s, float b) {\r\n        final java.awt.Color awtColor = java.awt.Color.getHSBColor(h, s, b);\r\n        return new Color(awtColor.getRed(), awtColor.getGreen(), awtColor.getBlue());\r\n    }', 'comment_created': datetime.datetime(2020, 7, 17, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': '067d75fbc3aa75a5501bc04286cf3bb9f8eccbe6', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b9be870904d7d0183a220722ab83d5ed34f24c1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '213c7614f155cc490798f9e03ffdd73754cbe481', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
447068838,Adds Levels to Hypothermia and Hyperthermia,"This PR introduces levels to Hypothermia and Hyperthermia Effects.
Adds new allEffectModifier and level attributes to Hypo/HyperthermiaComponents, allEffectModifier directly impacts the magnitude of difficulty relating to each effect.
for e.g. an allEffectModifier = 2 value, increases the damage due to frostbite to double and decreases walkSpeedMultiplier to half in case of higher level of hyporthermia..
As of now, allEffectModifier value remains same as Hypo/Hyperthermia level value.. 1 being normal and 2 being critical.

Depends on: https://github.com/Terasology/ClimateConditions/pull/17

Can work independently, but to convey the nature of usage, branched off from there.

The changes corresponding to this PR alone are in files: HypothermiaComponent, HyperthermiaComponent, HypothermiaSystem, HyperthermiaSystem, Frostbite System, BodyTemperatureSystem(since this is a large file, I've left a comment on the related part of the file) ",False,24,https://api.github.com/repos/Terasology/ClimateConditions/pulls/24,https://github.com/Terasology/ClimateConditions/pull/24,closed,349,25,13,41,1,1,0,0,[],2020-07-09 20:09:36+00:00,2020-07-09 20:30:26+00:00,1250.0,0:20:50,"[{'comment_id': 452474872, 'comment_body': 'Following two methods of BodyTemperatureSystem.java contain the changes that employ the introduced Hypo/Hyperthermia levels...', 'comment_created': datetime.datetime(2020, 7, 9, 20, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da324509e5cc0bbfd59c82814451e9b0538faa', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc8563ecb2719592433a845c0b7d8db478a3f99', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5890374536a2e683a437f162a81ac64823a0f60', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11adfb275d9e72f68f1803f9d48aa0491a7d051', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7358dbd5b876a9bb4b97ba2e968e6edcf7e8414c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc1066ffae5abf29ee0c2c038b95b8d7263d551', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a4162dca0128b87e8694707c9761ed15276e9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0968c685b6b308a8a772646f3dff0ee81419b1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44316fc62e47bb8acb52442f4f70ec03c2cba40b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab70de9e782c910588d775f6abb5b110d479f9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc4f68fde1b3d76edb81a9b53a624089bc199a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1eada701c10620b2d0805a8ea7b15241adf17a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abbbeca573c60702f47929857fc2c2f7eba78b8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce30c8c717b58f0724dc5e6690de912d7c2c20c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfdbc1b62a6bae48ce93c46847657cf00bcb464', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba79e7a3babda32a4e4731ffa11fcff3c786340', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6067711fed96fabd961e144875e1f080b7808633', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a971f4980fbca252891b73b84eed49391bff83d6', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6fb9a35adaa4fd388bacd6393747ec8dd2ee8c2', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb410ebc682b0628751fc8d9c88fceffe4bbca3a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad31700d8d10e02817dddf6fe374eceb5d077ad', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e87213c5ce1aad2ea47c83c362ef7fe64694da2', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b241eccf1bd12e2f8e6c6486c32b107066cc05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5ef8bdb32f4cc75d3e2ccb6175ba281df51e131', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6715106a5b84996977bd4e912e350d81d37757de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43c916911848ff6d5ba47ebf73ca914a7fd1e5f6', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b87147484a88d490791766393549ee436e8a113', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f372bbb08085f1b13348b278da4d4f23bebdcce7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97f73757475364abe1a12e19c4f628eff657bc31', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb4f5c2bf826d34c0cfcd52690a87926bd145388', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e102dd884b4c2d310970675521a27060b723d6f8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adabbd749dec3caac3ebac4387b20df2c2d5741f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fc01b3e1f5ed07416e46615381f8763b4389c1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e6e9397905d62dba49fd1f16c9319fc058192e0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e279496cade8caf38e79e563ab9dfc95071d761', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
429161531,feat: Introduce Body Temperature System,"This is a prototype for a system to keep a check on body temperature of the player entity.
Currently the temperature is updated every second and displayed in the chat message every 10 seconds along with the environment temperature for that location. ",True,17,https://api.github.com/repos/Terasology/ClimateConditions/pulls/17,https://github.com/Terasology/ClimateConditions/pull/17,closed,342,61,10,44,2,77,1,0,[{'name': 'Type: Improvement'}],2020-06-06 12:05:44+00:00,2020-07-28 19:11:20+00:00,4518336.0,"52 days, 7:05:36","[{'comment_id': 436302000, 'comment_body': ""not sure whether I'm missing something, or you don't use these :thinking: "", 'comment_created': datetime.datetime(2020, 6, 6, 21, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436302308, 'comment_body': ""Let's not couple this with player spawn. In a multiplayer setup this might result in additionally required checks whether the periodic action already exists or in the multiple instances of this periodic action.\r\nSo I'd propose to use the pre-system functionality for adding this periodic action."", 'comment_created': datetime.datetime(2020, 6, 6, 21, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436302334, 'comment_body': 'Displaying the body temperature should not be a separate periodic action but rather a (debug) log when the update action triggers.', 'comment_created': datetime.datetime(2020, 6, 6, 21, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436302463, 'comment_body': ""If having that information in the in-game text field helps you during development, that's fine, but eventually this should - if at all - be a (debug) log"", 'comment_created': datetime.datetime(2020, 6, 6, 21, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436302563, 'comment_body': 'I believe we should implement a `BodyTemperatureComponent` and check that the player has one here. Gameplays that want to enable this mechanism can then add this component in their `player.prefab`', 'comment_created': datetime.datetime(2020, 6, 6, 21, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436369682, 'comment_body': 'Yes obviously, I figured you might also want to take a look at the rate of change of temperature (too fast / too slow etc..) It helps while running around to get an idea of the temperature at various points in the world and well again the rate at which the temperature is changing.', 'comment_created': datetime.datetime(2020, 6, 7, 14, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 436385688, 'comment_body': 'why do you need to replicate these values?', 'comment_created': datetime.datetime(2020, 6, 7, 17, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436385881, 'comment_body': 'formatting looks a bit off', 'comment_created': datetime.datetime(2020, 6, 7, 17, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436386091, 'comment_body': 'why though? you can simply display the temperatures in `onTemperatureUpdate` before/after you update the body temperature, right? :thinking: ', 'comment_created': datetime.datetime(2020, 6, 7, 17, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436386206, 'comment_body': 'why get entities with `WorldComponent` :thinking: not sure I understand the intention here :sweat_smile: ', 'comment_created': datetime.datetime(2020, 6, 7, 17, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436387472, 'comment_body': ""I'm not sure how multiplayer works, but here, if I check all the player entities.. then there's a chance every time a new player joins a server, a new body update periodic action will be added which would act on all player entities. Since, we need to add the periodic action in postBegin(), the only way to make it act on the player entity is to use entity manager to get all entities with CharacterAliveComponent and some other components which would not single out the player alone it would get all similar entities (i.e. all other players on the server).\r\nI figured this must be true for other systems so I checked how they tackle it, and then the thirstAuthoritySystem did this, so I figured the WorldComponent must mean the world and hence I did what I did."", 'comment_created': datetime.datetime(2020, 6, 7, 18, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 436387500, 'comment_body': 'yes, but every second was a bit too much...\r\n', 'comment_created': datetime.datetime(2020, 6, 7, 18, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 436387609, 'comment_body': 'I know, but when I changed it, then again used ctrl+alt+l , it changed back to this.', 'comment_created': datetime.datetime(2020, 6, 7, 18, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 436387973, 'comment_body': ""Since we are considering multiple players, in the docs it was written, the information is not automatically updated on the server..... and to let all other players and server know, we need to use replicate....and well  this I felt is necessary for the part of the code where you've commented about the use of WorldComponent(onTemperatureUpdate)."", 'comment_created': datetime.datetime(2020, 6, 7, 18, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 436388328, 'comment_body': ""oh no! If you can find out which setting it is that thinks it should use that leading-comma style, I think we would all be happy to turn it off.\r\n\r\nI think I've looked for it before. It seems like it must be under Editor / Code Style / Java, but I haven't found anything in there that mentions commas."", 'comment_created': datetime.datetime(2020, 6, 7, 18, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 436388397, 'comment_body': 'huh weird', 'comment_created': datetime.datetime(2020, 6, 7, 18, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436388475, 'comment_body': 'oh I see, okay, makes sense - we just need to remember getting rid of it again before merging this :wink: ', 'comment_created': datetime.datetime(2020, 6, 7, 18, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436389474, 'comment_body': ""I see, tbh I forgot that the delayManager expects an entity on which to trigger the periodic action.\r\nIt's absolutely correct to not do this on any player but on the world instead :+1:\r\nI currently don't know a better way to do this, so it's fine to do it like the thirst authority system."", 'comment_created': datetime.datetime(2020, 6, 7, 18, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 436389731, 'comment_body': ""I'd propose to not do this. IMO `BodyTemperatureComponent` should be added by a gameplay that wants to activate this effect in the player delta prefab (this definitely needs to be documented). If player's don't have that component, it should simply not work on them."", 'comment_created': datetime.datetime(2020, 6, 7, 18, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 442374919, 'comment_body': ""I think @keturn switched the default template for the license header to a way shorter format - I don't know when/how IntelliJ picks this up, though, or where it is configured ü§î "", 'comment_created': datetime.datetime(2020, 6, 18, 17, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442377096, 'comment_body': ""Nitpicking on naming here ü§ì \r\n\r\nI think having a `bodyTemperature` on the `BodyTemperatureComponent` component is kind of _done twice_. I usually name variable corresponding to components without the `Component` prefix, so this could end up in code like this:\r\n\r\n```java\r\nBodyTemperatureComponent bodyTemperature = entity.getComponent(BodyTemperatureComponent.class);\r\nif (bodyTemperature.bodyTemperature > 0.5) { ... }\r\n```\r\n\r\nIf this reflects the state, I'd rather name it something like `current` so that the access reads more like this:\r\n\r\n```java\r\nbodyTemperature.current\r\n```"", 'comment_created': datetime.datetime(2020, 6, 18, 17, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442377582, 'comment_body': 'üëç nice to see Javadoc', 'comment_created': datetime.datetime(2020, 6, 18, 17, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442378349, 'comment_body': ""I would move this into it's own class to avoid having inner classes or enums. This is not private information, although it is just used within the context of this event. "", 'comment_created': datetime.datetime(2020, 6, 18, 17, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442379615, 'comment_body': ""I'd like to put some emphasis on providing **two events** for the body temperature system - one for the numeric change and one translating the numeric change into the abstract category. \r\n\r\nWhile you may just want to use the categories, exposing the numeric underlying numeric change may be crucial for other modules (to come). More importantly, separating the logic by these events prepares us to easily allow for extensions here."", 'comment_created': datetime.datetime(2020, 6, 18, 17, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442380527, 'comment_body': ""I'm honestly not sure what a better practice is here. As this can only be set in the constructor, and is only read, we may as well make this a \r\n\r\n```suggestion\r\n    public final BodyTemperatureLevel bodyTemperatureLevel;\r\n```\r\n\r\nand don't provide the getter method. I don't know what's better, though ü§∑\u200d‚ôÇÔ∏è "", 'comment_created': datetime.datetime(2020, 6, 18, 17, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442393189, 'comment_body': 'These events should go into the respective Hypo-/Hyperthermia systems. \r\n\r\nThink about the logical units you are working with. Although this is in the same module there is no constraint that forces you to set hypo-/hyperthermia with the body temperature. In fact, we tried to decouple those from the underlying temperature system.\r\n\r\nIdeally, those would be added in a separate PR.', 'comment_created': datetime.datetime(2020, 6, 18, 17, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442394288, 'comment_body': '`getEntitiesWith(..)` accepts multiple components that need to be present. Looking at the code below you expect that at least `LocationComponent` and `BodyTemperatureComponent` are present (access to fields of these components without a null-check beforehand).', 'comment_created': datetime.datetime(2020, 6, 18, 17, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442394678, 'comment_body': ""Why is this a class member? I'd assume it is only needed locally inside of `onTemperatureUpdate `"", 'comment_created': datetime.datetime(2020, 6, 18, 17, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442395561, 'comment_body': 'You are comparing with strictly smaller and striclty greater here (and below) - what happens in case either value is exactly `0.3`?', 'comment_created': datetime.datetime(2020, 6, 18, 17, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442396878, 'comment_body': 'In addition, the event should contain both values for _before_ (old) and _after_ (new).', 'comment_created': datetime.datetime(2020, 6, 18, 17, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442397900, 'comment_body': ""I'd move the logic to derive the level from the temperature value to some method `lookupLevel(float value)` and simply call that twice for the old and new value. Luckily, comparing enums for equality is simple so this whole block becomes something like this:\r\n\r\n```java\r\nBodyTemperatureLevel before = lookupLevel(btc.bodyTemperature);\r\nBodyTemperatureLevel after = lookupLevel(btc.bodyTemperature + delta);\r\n\r\nif (before != after) {\r\n  entity.send(new BodyTemperatureChangedEvent(before, after))\r\n}\r\n```\r\n\r\nThe event should hold both values for _before_ and _after_."", 'comment_created': datetime.datetime(2020, 6, 18, 17, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442398274, 'comment_body': ""Spamming the chat is most likely not the best way to indicate this to the player, but we'll find another way around this üòâ "", 'comment_created': datetime.datetime(2020, 6, 18, 17, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 442473425, 'comment_body': 'Yep, that PR got merged a couple weeks ago. Make sure your Terasology repo is up-to-date with `develop`, and if it the default doesn\'t change automatically, see Settings / Editor / Copyright and set the default copyright profile to ""Terasology Foundation.""', 'comment_created': datetime.datetime(2020, 6, 18, 20, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'keturn', 'type': 'User'}, {'comment_id': 443236871, 'comment_body': ""The numeric value would keep on changing every second, do we want to send out an event every second signifying change in numeric values?\r\nAlso AffectBodyTemperatureEvent will be sent out every second anyway(although fAacing some issues with that right now), couldn't the other systems just utilize that when need arises?"", 'comment_created': datetime.datetime(2020, 6, 21, 16, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 446674079, 'comment_body': ""I don't think this makes a problem, but personally I cringe when I see identifiers with spaces üòÖ "", 'comment_created': datetime.datetime(2020, 6, 28, 17, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 446678985, 'comment_body': 'Maybe it makes sense to provide a variant of `getTemperature` that takes a vector to just call it like this:\r\n\r\n```suggestion\r\n                float envTemperature = climateConditionsSystem.getTemperature(location.getLocalPosition());\r\n```', 'comment_created': datetime.datetime(2020, 6, 28, 17, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 446679049, 'comment_body': 'Same for humidity\r\n\r\n```suggestion\r\n                float envHumidity = climateConditionsSystem.getHumidity(location.getLocalPosition());\r\n```', 'comment_created': datetime.datetime(2020, 6, 28, 17, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 446679099, 'comment_body': 'Why is this part commented out?', 'comment_created': datetime.datetime(2020, 6, 28, 17, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 446679656, 'comment_body': 'I think this should happen before the event is sent out to notify about the change...', 'comment_created': datetime.datetime(2020, 6, 28, 17, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 446831399, 'comment_body': ""That would've required an extra variable in the mix with not much utility, but sure alright I think that would be more appropriate."", 'comment_created': datetime.datetime(2020, 6, 29, 7, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 446833481, 'comment_body': "">  deltaTemp = affectBodyTemperatureEvent.getResultValue();\r\n\r\nThat's because here for some reason I was getting some weird values as in for a few seconds it would return an expected value of deltaTemp however after then for a few seconds deltaTemp would simply become zero and there'll be no change and then the oscialltion continues between an expected value and zero every few seconds. I haven't pinpointed the problem yet but I'll check that again."", 'comment_created': datetime.datetime(2020, 6, 29, 7, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 446839723, 'comment_body': 'Ohh I thought it\'s a convention to name static final variables with all caps and then I noticed a lot of the Periodic Action Ids were named in a similar fashion (""....._UPDATE_ACTION_ID "") üòÖ. So would you prefer If I just remove the action id part or should I convert it to pascal case?', 'comment_created': datetime.datetime(2020, 6, 29, 7, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 447233178, 'comment_body': 'Oh, I was talking about `""Body Temperature Update""` and not `BODY_TEMPERATURE_UPDATE_ACTION_ID` üòÖ Out of habit I would try to make the action ID as unique as possible (probably using a similar pattern as for our resource URNs) \r\n```suggestion\r\n    public static final String BODY_TEMPERATURE_UPDATE_ACTION_ID = ""climateConditions:bodyTemperatureUpdate"";\r\n```\r\n\r\nTo the extreme, you could use a random UUID and the only way to reference the action is via this constant\r\n```suggestion\r\n    public static final String BODY_TEMPERATURE_UPDATE_ACTION_ID = ""1bd16c1b-c662-4aae-8683-1467bc850ce4"";\r\n```\r\n\r\nHowever, I\'m not sure whether the id is printed out in some error cases, and using an UUID here would make it way harder to track down the problem...\r\n\r\nIn any case, this can be seen as an implementation detail that can be changed anytime.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 447235498, 'comment_body': 'That is weird üßê Either we\'re missing something about how the events are handled OR something is modifying/""canceling"" the `AffectBodyTemperatureEvent` - which would make me wonder where that should be happening...', 'comment_created': datetime.datetime(2020, 6, 29, 20, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 447237136, 'comment_body': 'What do you think about interleaving the statements as follows:\r\n\r\n```java\r\n                BodyTemperatureLevel before = lookupLevel(bodyTemperature.current);\r\n\r\n                bodyTemperature.current = bodyTemperature.current + deltaTemp;\r\n                entity.saveComponent(bodyTemperature);\r\n                BodyTemperatureLevel after = lookupLevel(bodyTemperature.current);\r\n\r\n                if (before != after) {\r\n                    entity.send(new BodyTemperatureChangedEvent(before, after));\r\n                    bodyTemperature.currentLevel = after;\r\n                }\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 20, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 447584351, 'comment_body': ""I don't know... but I checked and the AffectBodyTemperatureEvent itself is not being used anywhere else.."", 'comment_created': datetime.datetime(2020, 6, 30, 10, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 448634606, 'comment_body': 'fixed. AbstractValueModifiableEvent.getResultValue() at some point removes negative values..', 'comment_created': datetime.datetime(2020, 7, 1, 21, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 448886118, 'comment_body': 'I see - `AbstractValueModifiableEvent` has that ""documented"" as line comment but not as method contract üôÑ  will fix that...', 'comment_created': datetime.datetime(2020, 7, 2, 9, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 448904039, 'comment_body': 'Created https://github.com/MovingBlocks/Terasology/pull/4063 to discuss different options to go forward. Please join the discussion üôÉ ', 'comment_created': datetime.datetime(2020, 7, 2, 10, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 449857765, 'comment_body': 'still sticking to this opinion', 'comment_created': datetime.datetime(2020, 7, 5, 9, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449859256, 'comment_body': 'Can the `affectBodyTemperatureEvent` only work with positive input? Or why do we do this here?', 'comment_created': datetime.datetime(2020, 7, 5, 10, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449859557, 'comment_body': 'IMO this check should be the result of receiving the `BodyTemperatureValueChangedEvent`\r\n(like ""oh the value changed, this means the level could\'ve changed, let\'s check that)', 'comment_created': datetime.datetime(2020, 7, 5, 10, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449859632, 'comment_body': 'That sounds like a good candidate for one function with a switch statement? :thinking: ', 'comment_created': datetime.datetime(2020, 7, 5, 10, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449859726, 'comment_body': 'Guess this is more of a mapping than a lookup. Lookup sounds like you check what the current body temperature level of a player is instead of checking which body temperature level a temperature maps to.', 'comment_created': datetime.datetime(2020, 7, 5, 10, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 449862730, 'comment_body': 'That has already been removed though... ü§®', 'comment_created': datetime.datetime(2020, 7, 5, 10, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 449862881, 'comment_body': ""Yeah AbstractValueModifiableEvent doesn't work with negative values... but right now I'm making some changes so that at least the AffectBodyTemperature would work without doing this.."", 'comment_created': datetime.datetime(2020, 7, 5, 10, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 456820729, 'comment_body': ""Why do we need to keep this state? Can't we resolve this property directly from the modifiable event itself?"", 'comment_created': datetime.datetime(2020, 7, 18, 19, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456820857, 'comment_body': 'Ah, I see - the modifiable event does only allow for positive numbers? and this is our way to allow for negative values by making it positive in the underlying event and keeping the state ... üßê what about changing `AbstractValueModifiableEvent` instead?', 'comment_created': datetime.datetime(2020, 7, 18, 19, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456821176, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 18, 19, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456821325, 'comment_body': 'As asked in another review already, maybe implementations like this can be simplified by extending a `AbstractBeforeAfterEvent<T>`? ü§î ', 'comment_created': datetime.datetime(2020, 7, 18, 19, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456821372, 'comment_body': 'As this event is called `BodyTemperatureValueChangedEvent` getter and setter could be named simpler imho:\r\n\r\n```suggestion\r\n    public float getNewValue() {\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 19, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456821521, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 18, 19, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456821754, 'comment_body': ""I don't like that we need to do this check here (i.e., the fact that we need to know that a negative value is a special case)... I'm wondering whether we can just override the getter(s) of the event to do that calculation silently... ü§î "", 'comment_created': datetime.datetime(2020, 7, 18, 19, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456821896, 'comment_body': 'As commented further below, maybe we can hide this inside the event? Would it make sense to override `getResultValue` to multiply with `-1` if the value should be negative? ', 'comment_created': datetime.datetime(2020, 7, 18, 19, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 456827167, 'comment_body': 'I believe you opened this: https://github.com/MovingBlocks/Terasology/pull/4063 for a similar purpose...\r\nAnd... I actually did leave a comment there.... So... I am on board with changing the AbstarctValueModifiableEvent but we have to be careful in case some other system uses this positive only thing.........', 'comment_created': datetime.datetime(2020, 7, 18, 20, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 456827399, 'comment_body': ""I guess we can do this silently by adding a AffectBodyTemperatureEvent :: getResultValue() of its own.... I think... I'll try something.."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 456828894, 'comment_body': ""Yeah I think they can, So should I go ahead and add such an event? \r\nIf yes would that system be somewhere here?: engine\\src\\main\\java\\org\\terasology\\entitySystem\\event\\\r\nI ask because this seems like a place for very core kinda events and has only 3 events in there so trying to inquire if there's a better location for the same..."", 'comment_created': datetime.datetime(2020, 7, 18, 21, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 456831045, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 18, 21, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 461173881, 'comment_body': 'I was about to ask for JavaDoc here, but I\'m honestly a bit puzzled what would add value here ü§î It obviously is a ""change to the body temperature"", there are not special cases (like the zero level for X-thermia)....\r\n\r\nMaybe mention the possible **value range** (or what the range is tied to), and when this event is (supposed to be) sent out?', 'comment_created': datetime.datetime(2020, 7, 27, 21, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 461176033, 'comment_body': ""Yeah, we'll keep this here as it is for now. MovingBlocks/Terasology#4063 does still cap the value at minimum zero, so if we need negative values that's the only way to go... \r\nThe more I think about this the more I want to change the underlying event... I'll ping you on a PR as soon as I have one ready üòâ "", 'comment_created': datetime.datetime(2020, 7, 27, 21, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 461195530, 'comment_body': 'I think this should also get some JavaDoc, stating what the range and interpretation of the `current` temperature is. You may also state which system is (supposed to be) managing this component (not intended for direct write access).', 'comment_created': datetime.datetime(2020, 7, 27, 22, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 461212444, 'comment_body': 'Hah, here we have the chat messages to be replaced with some icon placeholder in the UI ü§ì üòÉ different PR, though üòâ ', 'comment_created': datetime.datetime(2020, 7, 27, 22, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 461212870, 'comment_body': 'Should this be in level 3 already when added in critical high state?\r\n```suggestion\r\n                player.addOrSaveComponent(new HyperthermiaComponent(3));\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 22, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 461213547, 'comment_body': ""Do we send a `HypothermiaLevelChanged` event in case we add or remove the component yet? I think that would be nice for system so that they can rely on this one event and don't have to track the state of the component itself."", 'comment_created': datetime.datetime(2020, 7, 27, 22, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 461618802, 'comment_body': ""Yeah, about that... if this is removed, it will be very hard to change body temperatures according to one's will in order to see all the effects during the play test...\r\nCurrently the env. temperatures are not very uniformly distributed according to biomes..  And if this is removed, a separate UI for env. temperature would also be required and while for displaying body temperature, using a UI wouldn't be a big problem as it won't have drastic transitions, the env. temp just keeps changing  drastically.... so that won't be very good.... so i think.. It would still require the numeric value,  otherwise color would just keep changing....\r\nI'm not sure.. what do you think?"", 'comment_created': datetime.datetime(2020, 7, 28, 14, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 461778140, 'comment_body': '> when the periodic action with actionId = BODY_TEMPERATURE_UPDATE_ACTION_ID is triggered\r\n\r\nThis is somewhat of an implementation detail... ü§î it would be nice to write something like ""once a second"" or so, but that obviously can change unnoticed leaving the documentation out of date... ', 'comment_created': datetime.datetime(2020, 7, 28, 18, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 461779237, 'comment_body': ""Hm, we could use a color gradient like you used for the filling icon thing in the first iteration... this would probably lead to funny color changes, but in the end it's just supposed to be a bit nicer than the plain chat message ^^"", 'comment_created': datetime.datetime(2020, 7, 28, 18, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'd2f5584129c4f71968f284ffac96940a67fff3ea', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8933d08370ff7d35e82f84ecb50e47c1b1052e05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fd6737b2a2dee8cb8c2b5270aefc7df6e89a40', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e27d07ba63165d36851457078c9ce2906edbe16e', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2d5fa618ef3afa78305c4ef9ae44ea46a386de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c45a8d450c997a1ac500c38dcf79ed07feb29', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96da324509e5cc0bbfd59c82814451e9b0538faa', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc8563ecb2719592433a845c0b7d8db478a3f99', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5890374536a2e683a437f162a81ac64823a0f60', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11adfb275d9e72f68f1803f9d48aa0491a7d051', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7358dbd5b876a9bb4b97ba2e968e6edcf7e8414c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc1066ffae5abf29ee0c2c038b95b8d7263d551', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a4162dca0128b87e8694707c9761ed15276e9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0968c685b6b308a8a772646f3dff0ee81419b1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44316fc62e47bb8acb52442f4f70ec03c2cba40b', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab70de9e782c910588d775f6abb5b110d479f9c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc4f68fde1b3d76edb81a9b53a624089bc199a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1eada701c10620b2d0805a8ea7b15241adf17a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1abbbeca573c60702f47929857fc2c2f7eba78b8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce30c8c717b58f0724dc5e6690de912d7c2c20c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfdbc1b62a6bae48ce93c46847657cf00bcb464', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba79e7a3babda32a4e4731ffa11fcff3c786340', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6067711fed96fabd961e144875e1f080b7808633', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a971f4980fbca252891b73b84eed49391bff83d6', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6fb9a35adaa4fd388bacd6393747ec8dd2ee8c2', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb410ebc682b0628751fc8d9c88fceffe4bbca3a', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad31700d8d10e02817dddf6fe374eceb5d077ad', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e87213c5ce1aad2ea47c83c362ef7fe64694da2', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b241eccf1bd12e2f8e6c6486c32b107066cc05', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5ef8bdb32f4cc75d3e2ccb6175ba281df51e131', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6715106a5b84996977bd4e912e350d81d37757de', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43c916911848ff6d5ba47ebf73ca914a7fd1e5f6', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b87147484a88d490791766393549ee436e8a113', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f372bbb08085f1b13348b278da4d4f23bebdcce7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97f73757475364abe1a12e19c4f628eff657bc31', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb4f5c2bf826d34c0cfcd52690a87926bd145388', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e102dd884b4c2d310970675521a27060b723d6f8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adabbd749dec3caac3ebac4387b20df2c2d5741f', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fc01b3e1f5ed07416e46615381f8763b4389c1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff14237a64db37899cd151c8439df15afdc6e1d8', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b791b1f4592cd5a1f4856302ba35853698eba94', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd99dadb0a410e018c5772de4d9bfc53d00b05f62', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd602ae76745cf9fdc920e9478530675ab3465baf', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '803e9bef027caae69c6d8758902e9894c7069687', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
460441143,feat: Reset Body Temperature on player death,"This PR introduces a method in the BodyTemperatureSystem which resets body temperature when the player dies, thus removing any Hypo/Hyperthermia Components attached to the player and any related effects.",True,26,https://api.github.com/repos/Terasology/ClimateConditions/pulls/26,https://github.com/Terasology/ClimateConditions/pull/26,closed,16,4,1,1,0,0,0,0,[],2020-07-31 19:43:12+00:00,2020-08-01 09:31:40+00:00,49708.0,13:48:28,[],"[{'commit_sha': 'ca7e8a3cf59636341ff9e62300e77b5cd84905d9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
455312523,feat: Add BeforeAfterEvent,"Adds AbstractBeforeAfterEvent : Immutable event to notify a change in a certain value.
This is a generic event and more specific events implementing this event should be fired and reacted to.",True,4095,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4095,https://github.com/MovingBlocks/Terasology/pull/4095,closed,35,0,1,1,2,7,2,0,"[{'name': 'Topic: Architecture'}, {'name': 'Type: Improvement'}]",2020-07-22 19:30:50+00:00,2020-07-27 10:28:51+00:00,399481.0,"4 days, 14:58:01","[{'comment_id': 459635366, 'comment_body': 'Did you ever work with [Generics](https://www.baeldung.com/java-generics), as in, implemented a generic class? I\'d think this would be a good case where we can use that - don\'t fix the event to be based on float right away.\r\n\r\nSo here\'s my suggestion:\r\n```suggestion\r\npublic abstract class BeforeAfterEvent<T> implements Event {\r\n```\r\n\r\n- make the class abstract to ensure nobody can create a `new BeforeAfterEvent(""foo"", ""bar"")` out of thin air, but has to extend it to use it.\r\n- shorten the name to `BeforeAfterEvent` - I don\'t see any good value in explicitly prefixing the ""Abstract"" part, and the inheritance line will read a little bit cleaner\r\n  ```java\r\n  public class HealthChangedEvent extends BeforeAfterEvent<Float> { ... }\r\n  ```\r\n- make the type of the changed value generic `<T>`. this allows to reuse the same base class regardless whether the value is an integer, a float, a string, or anything else. However, this implies that we cannot offer the `getChange` on this base class.\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 18, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459635728, 'comment_body': 'If the class works with a generic `<T>` these values become of type `T`.\r\n```suggestion\r\n    protected final T oldValue;\r\n    protected final T newValue;\r\n```\r\n\r\nIf subclasses should be able to access `oldValue` and `newValue` those should be protected instead of private.', 'comment_created': datetime.datetime(2020, 7, 23, 18, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459636156, 'comment_body': 'Same here:\r\n```suggestion\r\n    AbstractBeforeAfterEvent(final T oldValue, final T newValue) {\r\n```\r\n\r\nWe can also mark them final as we are not going to change them ever in this event.', 'comment_created': datetime.datetime(2020, 7, 23, 18, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459641861, 'comment_body': ""If we want this convenience functionality you could introduce a \r\n\r\n```java\r\npublic abstract class FloatBeforeAfterEvent extends BeforeAfterEvent<Float> { ... }\r\n```\r\n\r\nfor this purpose. \r\n\r\nFor calculating the factor you could consider to return infinity in case the old value was zero, something like this (there's a difference between positive and negative infinity, though):\r\n\r\n```java\r\n    public float getFactor() {\r\n        return oldValue != 0 ? newValue / oldValue : Float.POSITIVE_INFINITY;\r\n    }\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 18, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 459703518, 'comment_body': ""Nope I certainly haven't worked with Generics üòÖ... And I did absolutely everything wrong I see üòÖ\r\nAnd Now the component based alteration effect pr thing  (Class<C> componentClass) makes sense..\r\nThanks for explaining all this in such great detail!"", 'comment_created': datetime.datetime(2020, 7, 23, 20, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 459723712, 'comment_body': ""I see, Again thanks for explaining!\r\nBut for this PR I don't think we should introduce FloatBeforeAfterEvent just for a getChange/Factor() method... \r\nThe whole point of using generics I think is we don't need to have separate events for different datatypes.. \r\nSo I think we can leave those separate functionalities to the specific events that extend this event."", 'comment_created': datetime.datetime(2020, 7, 23, 20, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 459745101, 'comment_body': ""> And I did absolutely everything wrong\r\n\r\nThat's not true - basically everything was there, and it made it easy for me to add all those comments about fancy features :sweat_smile: I hope you'll learn one thing or the other, and please don't hesitate if you have questions (and please ask about things like `Class componentClass` if they are unclear :wink: )"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}]","[{'commit_sha': 'd05976eb2ea98ad06742e80e33de6c4c30acae19', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
466881449,"Adds delta prefabs for items : wool vest, arabic thawb and changes magnitude attribute to float datatype","1. Change Magnitude attribute to float datatype from the original int. AlterationEffects already support float magnitudes, this being int in Equipments just hinders the proper mapping of equipment effects to alteration effects.
2. Add delta prefabs for items : WoolVest, ArabicThawb and use  BodyTemperatureAlterationEffect for the items.
The items are used to prevent running into extreme body temperatures and the resulting effects.",True,125,https://api.github.com/repos/Terasology/Equipment/pulls/125,https://github.com/Terasology/Equipment/pull/125,closed,65,3,6,3,1,0,0,0,[],2020-08-12 16:30:37+00:00,2020-08-12 22:20:42+00:00,21005.0,5:50:05,[],"[{'commit_sha': '2a24dfbc3fdb8778ed1ad1b42d5792e5c8226c24', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f771188b5d7f845ba9a05ba6ff4234e2a4f2b490', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bfca2820e3e2db5f77ab4d8e84fb873ddae7bc9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
466858953,Adds new method in AbstractValueModifiableEvent to obtain result value without capping,"Adds a new getResultValueWithoutCapping() method which returns result value without capping the negative values to zero. 
With this PR, the event shall support all values both positive and negative.
Formula for calculating the result value int the new getResultValueWithoutCapping() method would be:
>  result = (<baseValue> + Œ£ <modifier>) * Œ† <multiplier> + Œ£ <postModifier>

instead of the one in the original getResultValue() : 

> result = max(0, (<baseValue> + Œ£ <modifier>) * Œ† <multiplier> + Œ£ <postModifier>)

In short: This means the event now has two methods for calculating the result values:
> event.getResultValue()    // always positive
event.getResultValueWithoutCapping()  // can also be negative 

To Test : see https://github.com/MovingBlocks/Terasology/pull/4123#issuecomment-674527341
Updated : Detailed testing instructions : https://github.com/Terasology/ClimateConditions/pull/29#issuecomment-674875942",True,4123,https://api.github.com/repos/MovingBlocks/Terasology/pulls/4123,https://github.com/MovingBlocks/Terasology/pull/4123,closed,28,6,1,3,6,2,1,0,[{'name': 'Topic: Architecture'}],2020-08-12 15:48:36+00:00,2020-08-23 15:26:06+00:00,949050.0,"10 days, 23:37:30","[{'comment_id': 471021997, 'comment_body': 'Rather than duplicate the calculation (invites bugs) would it make sense to have `getResultValue` call `getResultValueWithoutCapping` then simply cap and return the result?', 'comment_created': datetime.datetime(2020, 8, 15, 18, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 471022479, 'comment_body': 'If you just have one method call the other you could probably also save the duplication in the javadoc with a `@see` tag or whichever the appropriate one is. Not that it is necessarily bad to be thorough but it is _such_ a typical bug when you have two similar things then end up forgetting a spot :-)', 'comment_created': datetime.datetime(2020, 8, 15, 18, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}]","[{'commit_sha': 'e9e7ac930862f3defd90bca38c05bc918cd9349d', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c231f3a4ce4b26c452163400229fa18b1d97ea10', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227d39006e4c99028f383d31333a42bb1e203221', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
466865455,Remove negative value capping of summation of modifiers in OnEffectModifyEvent,"Remove negative value capping of summation of modifiers in getMagnitudeResultValue()  method in the OnEffectModifyEvent.

However, the capping in getDurationResultValue() remains as is.",True,24,https://api.github.com/repos/Terasology/AlterationEffects/pulls/24,https://github.com/Terasology/AlterationEffects/pull/24,closed,1,3,1,1,2,0,0,0,[],2020-08-12 16:00:22+00:00,2020-08-23 09:10:38+00:00,925816.0,"10 days, 17:10:16",[],"[{'commit_sha': 'cb6d4736612c40f3148e4a18ebd93428fed693b7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
466888525,Fix AffectBodyTemperatureEvent after change in AbstractValueModifiableEvent,"1. This is a follow up PR for and depends on: https://github.com/MovingBlocks/Terasology/pull/4123

2. Also sends out the correct values in onEffectModifyEvent in BodyTemperatureAlterationEffect
(Realized why the zero values were sent out after working in the Equipments module)",True,29,https://api.github.com/repos/Terasology/ClimateConditions/pulls/29,https://github.com/Terasology/ClimateConditions/pull/29,closed,8,25,4,3,2,0,0,0,[],2020-08-12 16:45:30+00:00,2020-08-23 09:10:35+00:00,923105.0,"10 days, 16:25:05",[],"[{'commit_sha': '5735917e546f8e4b4c7d6eef510718227b077104', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28b37c3c27353dd4c9188d8c238b2b25eb1881e0', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a6003f2f36fcb048a1ae80e722ad20e07f6e06d', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
465069884,Spawns Igloos in Snow Biome,"The PR spawns igloos in the Snow Biome.
 Igloos are very rare and represent remaining traces of abandoned settlements in the Snow Biome.
This is the first example of using Structural Templates during WorldGen.

To Test: 
The Snow biome starts at height >= SeaLevel + 96 which is roughly equal to 1381~140 in y-coordinate.
Currently the igloos are set to have a very low probability of spawn, so it might be difficult to find one. I'd suggest enabling hspeed and flight and just traverse the snow biome and try to spot one. Following is an example of how it looks:
![image](https://user-images.githubusercontent.com/50916693/89718928-e5d40300-d9e0-11ea-9d89-b08b24eaaa35.png)

 In case it still can't be found, try changing line 64 in Igloo Provider:
>                     if (noise.noise(wx, wz) > 0.9999f && (surfaceHeight >= seaLevel + 96f ||
and change it to the following in your local branch:
>                     if (noise.noise(wx, wz) > 0.999f && (surfaceHeight >= seaLevel + 96f ||
",True,28,https://api.github.com/repos/Terasology/ClimateConditions/pulls/28,https://github.com/Terasology/ClimateConditions/pull/28,closed,435,1,6,3,1,22,0,0,[],2020-08-08 20:10:17+00:00,2020-08-22 19:20:19+00:00,1206602.0,"13 days, 23:10:02","[{'comment_id': 467565423, 'comment_body': ""Didn't see any items in the chest or the barrel... Guess that might be a current general bug, though :thinking: "", 'comment_created': datetime.datetime(2020, 8, 9, 10, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 467568486, 'comment_body': 'I think we should add a note here or in the class description that this relates to the igloo structure template, and that the size of the igloo is defined by the template. Just to be sure that future contributors get this right, or that one can spot bugs in case the template or this class changes without changing the other...\r\n', 'comment_created': datetime.datetime(2020, 8, 9, 10, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467570756, 'comment_body': ""this is some implicit knowledge from the implementation of our current default world rasterizer. I'd like to add at least a `//TODO: ...` comment here to derive the height from other properties."", 'comment_created': datetime.datetime(2020, 8, 9, 11, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467570833, 'comment_body': 'So the `SNOW` biome always qualifies for placement, that sounds good üëç ', 'comment_created': datetime.datetime(2020, 8, 9, 11, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467570961, 'comment_body': 'placing the igloo ""in the ground"" definitely works fine here. In the future, we might improve placement to flat areas and don\'t place them into slopes.', 'comment_created': datetime.datetime(2020, 8, 9, 11, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467571310, 'comment_body': 'I hope that we will get away from hard-coding snow above `sealevel + 96f` and rather place it based on climate information in the future.\r\nTo avoid ""breaking"" igloo generation when doing so because that ""snowlevel"" is still hard-coded here, I\'m thinking that we should consider referencing a check for snow here and implementing this check in some more general place in `ClimateConditions`. Thus, this general place could be the source of truth of how `ClimateConditions` ""looks for"" snow. And then this can be changed and everything else that uses this check is automatically aligned.\r\nDoes that make sense to you?', 'comment_created': datetime.datetime(2020, 8, 9, 11, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 467571323, 'comment_body': 'Why `+ 3` ?', 'comment_created': datetime.datetime(2020, 8, 9, 11, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 467571506, 'comment_body': 'nice, this works really well! üëç \r\n\r\n**Potential Follow-ups:** Pinging @AndyTechGuy and @Sin3point14 for some discussion and ideas on how to generalize this for arbitrary structure templates ü§ì One thing coming to my mind is to get the actual template from the facet (or the objects stored in the facet) instead of hard-coding it. We may then be able to provide a common base class for structure-template world rasterizers for reuse by other modules.', 'comment_created': datetime.datetime(2020, 8, 9, 11, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 467619340, 'comment_body': ""Umm, I'm not so sure...\r\nNo other thing in climate conditions is really checking for presence of snow anymore at the moment (maybe temperature and humidity stuff but that has a whole lot of other things which are being re-examined at the moment by RatMoleRat I think..)\r\nAnd since this is the only place where we're checking snow , doing so in a separate space won't make much sense...\r\nAlso even if the snow biome is changed I do have an OR condition which checks if biome = snow. So, igloo qualifies for placement both in case height is greater than seaLevel + 96 or even if just the biome is snow......\r\nAdding a TODO: here would make more sense in my opinion...."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467619609, 'comment_body': ""That's just a random number.. that is done mostly to prevent same noise being generated by various different facets and then the positions overlapping that just starts throwing a lot of NPEs... \r\nit wouldn't make a difference even if the number was say 10 or 9313 or 213...\r\n"", 'comment_created': datetime.datetime(2020, 8, 9, 19, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467620212, 'comment_body': ""Yeah sure but from what I've observed the way the world is generated right now (as far as perlin generator is concerned), there aren't a lot of flat areas, there are just constantly rising mountains everywhere no flat areas with stable heights. Thus very low probability of igloo facet placing and then the even lower possibility that the found place would be a flat area would probably end up resulting in close to no igloos(it's actually still 1-2 in one snow biome area but then it would be further lower)... I think having well balanced flat areas at various heights should be a task with higher priority if and when possible."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467620629, 'comment_body': ""I did once keep it in the structure class but I just felt that then the prefab manager would be called every time the structure is placed since the class will be initialized every time..... and at the time I was placing a lot of structures... so since I wasn't really using it anywhere else I thought it be best to call it just once in the rasterizer and for borders I created the extra variable in the structure class .."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467621142, 'comment_body': ""No..... that's not a bug.. I think there must be some extra piece of logic in ST for placing these items inside there, and since I only extracted the structure building part from there, it doesn't work here,  because I'm pretty sure they were there when I placed it using the spawner from toolbox.. I'll try to find it...."", 'comment_created': datetime.datetime(2020, 8, 9, 19, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467621769, 'comment_body': ""I'm a little confused.., you mean we should derive the seaLevel + 96 height form some other class right?\r\nIf that's the case, I think the change should first be made in the solid rasterizer: https://github.com/Terasology/CoreWorlds/blob/4419b057d731dbbd35e523c11c227f2dd9599843/src/main/java/org/terasology/core/world/generator/rasterizers/SolidRasterizer.java#L116\r\nand define a constant like SNOW_BIOME_THRESHOLD = seaLevel + 96 and use that here like \r\n>                     } else if (depth == 0 && height >= SNOW_BIOME_THRESHOLD) {\r\n\r\nand then use that in here(in igloo provider)"", 'comment_created': datetime.datetime(2020, 8, 9, 19, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467621891, 'comment_body': 'Ooohh... I missed that üòÖ', 'comment_created': datetime.datetime(2020, 8, 9, 19, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 467623956, 'comment_body': ""Yeah, after some testing I felt it was difficult to find an igloo because of the probability anyway, and snow blocks themselves are really high up on the mountains, so the player won't end up stumbling into one very easily unless extremely lucky.\r\nAnd after seeing the igloos placed while flying around in the biome, the placement felt just what I wanted it to be, sometimes on plain areas and sometimes hidden in the mountains.. giving a proper abandoned feel to them..\r\nOnes in with mountain blocks above the igloo(mini cave like thingies) could've been a result of landslides, etc over a whole lot of years.. story wise..."", 'comment_created': datetime.datetime(2020, 8, 9, 20, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 471129669, 'comment_body': 'For ""magic numbers"" like that please create a constant and name it something like `ARBITRARY_OVERLAP_OFFSET` to make it more clear what it does :-)', 'comment_created': datetime.datetime(2020, 8, 16, 16, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 471131066, 'comment_body': 'If I understand it right joining in late here then yeah if `96` is the same number here and in CoreWorlds IMHO it would make sense to make a constant over there then also use that constant here. \r\n\r\nAt the same time I concur with the desire to _eventually_ get away from such crude ways to designate a given height as ""Okay magically now it is snow due to height!"" disregarding other climate details - but yeah that might be hard to really do much about here at the moment other than maybe leaving a TODO or two for future considerations :-)', 'comment_created': datetime.datetime(2020, 8, 16, 16, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 471412269, 'comment_body': '+1 on ""magic numbers"" - could you please the necessary modifications for this PR? ', 'comment_created': datetime.datetime(2020, 8, 17, 11, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'casals', 'type': 'User'}, {'comment_id': 471413693, 'comment_body': ""Hm.. I'm still with @jdrueckert on this. Even if it's there's no one checking for snow atm, let's try to avoi localized hardcoding - for the sake of future contributors. :) Also, on line 64, could you please take the same approach for arbitraty numbers that @Cervator suggested below (for `sealevel + 96f`)?"", 'comment_created': datetime.datetime(2020, 8, 17, 11, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'casals', 'type': 'User'}, {'comment_id': 471438197, 'comment_body': 'I\'m still don\'t think we need to check for snow in a separate place, the issue here is the fact that : ""seaLevel + 96"" has been used to check if a biome is in fact the snow biome, but that has been hard coded here only because it has been done so in coreWorlds. \r\nI propose a constant be defined in the CoreWorlds itself which can then be used here: \r\nsee :  https://github.com/Terasology/ClimateConditions/pull/28/files#r467621769\r\nwhich would then mean another arbitrary constant won\'t be required here..\r\nBut I\'d like to do that in a separate PR, I don\'t want this to get blocked form the CoreWorlds PR....\r\nHmmm but I think I can define an constant here now, SNOW_BIOME_THRESHOLD = seaLevel + 96\r\nand in another PR I could update the value of the constant to a similar constant introduced in the CoreWorlds from a separate PR.\r\nIs that fine @casals and @Cervator ?', 'comment_created': datetime.datetime(2020, 8, 17, 12, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ktksan', 'type': 'User'}, {'comment_id': 471441307, 'comment_body': ""That's fine for me (reg. both the constant and taking the verification to another discussion/PR)"", 'comment_created': datetime.datetime(2020, 8, 17, 12, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'casals', 'type': 'User'}]","[{'commit_sha': '87fe6a6bbf8ddc224d21d6a7685b5795c80d2fe3', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e96da1b823ff168b81a068f4223f8b077e8d1d9', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d230e5c4ae12ba6310e44c8dbec79f8f1d1e8f2', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
471293195,Adds thermiaHud which displays thermiaIcons in case of extreme body temperatures,"This PR introduces thermia Hud which displays thermiaIcons in case of Hypo/Hyperthermia along with the level of respective thermia in effect. The icons disable when the temperature returns to the normal body temperature range. 

This has been made as a first step to get rid of the chat log spamming method of keeping a track of body temperatures.
The PR currently uses dummy icons for the same which should later be updated after appropriate artwork.
As of now the chat log should not be removed because the environment temperatures vary unpredictably and it would be very difficult to attain a certain temperature in order to experience the various the various thermia effects in playtests, etc.

To test:  
For easy testing: comment out the following if condition to keep a track of body temperatures at all times: 
https://github.com/Terasology/ClimateConditions/blob/8e2151018c5042dc98f3308f2aebe3d33a8972d9/src/main/java/org/terasology/climateConditions/BodyTemperatureSystem.java#L91

Find a spot with high/low environment temperature to quickly reach a state of hype/hypothermia and see the icon along with the level displayed in the middle left corner of the screen.",True,31,https://api.github.com/repos/Terasology/ClimateConditions/pulls/31,https://github.com/Terasology/ClimateConditions/pull/31,closed,156,0,5,1,0,0,0,0,[],2020-08-20 23:37:59+00:00,2020-08-22 19:37:35+00:00,158376.0,"1 day, 19:59:36",[],"[{'commit_sha': 'dc82375263df07aa06100772495d8d7732bddf83', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
461867090,fix: Remove frostbite when Hypothermia level decreases,Tiny copy paste error üòÖ,True,27,https://api.github.com/repos/Terasology/ClimateConditions/pulls/27,https://github.com/Terasology/ClimateConditions/pull/27,closed,26,19,2,3,0,2,1,0,[{'name': 'Type: Bug'}],2020-08-02 22:05:57+00:00,2020-08-08 10:53:38+00:00,478061.0,"5 days, 12:47:41","[{'comment_id': 464312766, 'comment_body': ""Maybe let's switch the level variables so that it's aligned with the one above - guess that's easier to see the difference.\r\n```suggestion\r\n        } else if (oldLevel == 3 && oldLevel > newLevel) {\r\n```"", 'comment_created': datetime.datetime(2020, 8, 3, 9, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}, {'comment_id': 464313182, 'comment_body': ""We don't have strict code style guidelines, but I believe it's more common to have a space between `if` and the opening brance:\r\n```suggestion\r\n        if (newLevel == 3 && oldLevel < newLevel) {\r\n```"", 'comment_created': datetime.datetime(2020, 8, 3, 9, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdrueckert', 'type': 'User'}]","[{'commit_sha': '3c21e59f7bc219e8f8fd997e577996ce3c0367d1', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787f10997f0230045b0fc2128cb822f102472b28', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df31c7282cf1c5ee482278e38addd04a7435c5a7', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4
461037206,feat: Add Climate Conditions dependency to JS,"Adds CC dependency to JS, thus introducing the Body Temperature System along with Hypo/Hyperthermia Components and hence related effects to the JS game mode.",True,38,https://api.github.com/repos/Terasology/JoshariasSurvival/pulls/38,https://github.com/Terasology/JoshariasSurvival/pull/38,closed,1,0,1,1,0,0,0,0,[],2020-08-01 11:38:05+00:00,2020-08-01 15:22:29+00:00,13464.0,3:44:24,[],"[{'commit_sha': '1b3531e62bef132acd7c471c9257ebdb253e054c', 'committer_username': 'ktksan', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 22, 13, 35, 16, tzinfo=datetime.timezone.utc)}]",,50916693,,User,,25,,0,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1438007,Terasology,MovingBlocks/Terasology,Java,1334,3659,188,339,12023,469,57,35,"[{'id': 466858953, 'number': 4123, 'closed': datetime.datetime(2020, 8, 23, 15, 26, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 15, 48, 36, tzinfo=datetime.timezone.utc), 'time_taken': 949050.0, 'time_delta': '10 days, 23:37:30', 'additions': 28, 'deletions': 6, 'state': 'closed'}, {'id': 455312523, 'number': 4095, 'closed': datetime.datetime(2020, 7, 27, 10, 28, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 19, 30, 50, tzinfo=datetime.timezone.utc), 'time_taken': 399481.0, 'time_delta': '4 days, 14:58:01', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 437442020, 'number': 4058, 'closed': datetime.datetime(2020, 6, 22, 10, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 17, 59, 7, tzinfo=datetime.timezone.utc), 'time_taken': 144875.0, 'time_delta': '1 day, 16:14:35', 'additions': 12, 'deletions': 5, 'state': 'closed'}]"
25703707,ClimateConditions,Terasology/ClimateConditions,Java,6,0,19,16,74,3,4,1,"[{'id': 471293195, 'number': 31, 'closed': datetime.datetime(2020, 8, 22, 19, 37, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 23, 37, 59, tzinfo=datetime.timezone.utc), 'time_taken': 158376.0, 'time_delta': '1 day, 19:59:36', 'additions': 156, 'deletions': 0, 'state': 'closed'}, {'id': 466888525, 'number': 29, 'closed': datetime.datetime(2020, 8, 23, 9, 10, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 16, 45, 30, tzinfo=datetime.timezone.utc), 'time_taken': 923105.0, 'time_delta': '10 days, 16:25:05', 'additions': 8, 'deletions': 25, 'state': 'closed'}, {'id': 465069884, 'number': 28, 'closed': datetime.datetime(2020, 8, 22, 19, 20, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 20, 10, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1206602.0, 'time_delta': '13 days, 23:10:02', 'additions': 435, 'deletions': 1, 'state': 'closed'}, {'id': 461867090, 'number': 27, 'closed': datetime.datetime(2020, 8, 8, 10, 53, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 22, 5, 57, tzinfo=datetime.timezone.utc), 'time_taken': 478061.0, 'time_delta': '5 days, 12:47:41', 'additions': 26, 'deletions': 19, 'state': 'closed'}, {'id': 460441143, 'number': 26, 'closed': datetime.datetime(2020, 8, 1, 9, 31, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 19, 43, 12, tzinfo=datetime.timezone.utc), 'time_taken': 49708.0, 'time_delta': '13:48:28', 'additions': 16, 'deletions': 4, 'state': 'closed'}, {'id': 447077361, 'number': 25, 'closed': datetime.datetime(2020, 7, 27, 21, 0, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 20, 28, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1557128.0, 'time_delta': '18 days, 0:32:08', 'additions': 171, 'deletions': 30, 'state': 'closed'}, {'id': 447068838, 'number': 24, 'closed': datetime.datetime(2020, 7, 9, 20, 30, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 20, 9, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1250.0, 'time_delta': '0:20:50', 'additions': 349, 'deletions': 25, 'state': 'closed'}, {'id': 444406300, 'number': 23, 'closed': datetime.datetime(2020, 8, 8, 10, 49, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 5, 13, 15, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2928834.0, 'time_delta': '33 days, 21:33:54', 'additions': 292, 'deletions': 0, 'state': 'closed'}, {'id': 442812290, 'number': 22, 'closed': datetime.datetime(2020, 7, 8, 19, 6, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 16, 34, 29, tzinfo=datetime.timezone.utc), 'time_taken': 613895.0, 'time_delta': '7 days, 2:31:35', 'additions': 60, 'deletions': 33, 'state': 'closed'}, {'id': 431883555, 'number': 20, 'closed': datetime.datetime(2020, 6, 28, 12, 18, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 15, 26, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1630329.0, 'time_delta': '18 days, 20:52:09', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 431614269, 'number': 19, 'closed': datetime.datetime(2020, 6, 10, 9, 18, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 8, 14, 12, tzinfo=datetime.timezone.utc), 'time_taken': 90262.0, 'time_delta': '1 day, 1:04:22', 'additions': 12, 'deletions': 4, 'state': 'closed'}, {'id': 429161531, 'number': 17, 'closed': datetime.datetime(2020, 7, 28, 19, 11, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 12, 5, 44, tzinfo=datetime.timezone.utc), 'time_taken': 4518336.0, 'time_delta': '52 days, 7:05:36', 'additions': 342, 'deletions': 61, 'state': 'closed'}, {'id': 427744238, 'number': 16, 'closed': datetime.datetime(2020, 6, 10, 9, 18, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 10, 36, 57, tzinfo=datetime.timezone.utc), 'time_taken': 513696.0, 'time_delta': '5 days, 22:41:36', 'additions': 60, 'deletions': 2, 'state': 'closed'}, {'id': 427736527, 'number': 15, 'closed': datetime.datetime(2020, 6, 6, 21, 16, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 10, 22, 11, tzinfo=datetime.timezone.utc), 'time_taken': 212064.0, 'time_delta': '2 days, 10:54:24', 'additions': 98, 'deletions': 0, 'state': 'closed'}, {'id': 426759526, 'number': 14, 'closed': datetime.datetime(2020, 6, 4, 10, 37, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 18, 32, 58, tzinfo=datetime.timezone.utc), 'time_taken': 144284.0, 'time_delta': '1 day, 16:04:44', 'additions': 197, 'deletions': 4, 'state': 'closed'}, {'id': 426102144, 'number': 13, 'closed': datetime.datetime(2020, 6, 4, 10, 23, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 16, 57, 22, tzinfo=datetime.timezone.utc), 'time_taken': 235569.0, 'time_delta': '2 days, 17:26:09', 'additions': 128, 'deletions': 4, 'state': 'closed'}, {'id': 426003989, 'number': 12, 'closed': datetime.datetime(2020, 6, 6, 21, 14, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 14, 8, 18, tzinfo=datetime.timezone.utc), 'time_taken': 457600.0, 'time_delta': '5 days, 7:06:40', 'additions': 34, 'deletions': 2, 'state': 'closed'}, {'id': 423180320, 'number': 11, 'closed': datetime.datetime(2020, 5, 28, 11, 40, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 12, 40, 7, tzinfo=datetime.timezone.utc), 'time_taken': 169243.0, 'time_delta': '1 day, 23:00:43', 'additions': 20, 'deletions': 4, 'state': 'closed'}, {'id': 423163744, 'number': 10, 'closed': datetime.datetime(2020, 5, 30, 17, 34, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 12, 4, 40, tzinfo=datetime.timezone.utc), 'time_taken': 365375.0, 'time_delta': '4 days, 5:29:35', 'additions': 103, 'deletions': 2, 'state': 'closed'}, {'id': 423152074, 'number': 9, 'closed': datetime.datetime(2020, 5, 31, 12, 17, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 11, 38, 29, tzinfo=datetime.timezone.utc), 'time_taken': 434354.0, 'time_delta': '5 days, 0:39:14', 'additions': 126, 'deletions': 0, 'state': 'closed'}, {'id': 423140830, 'number': 8, 'closed': datetime.datetime(2020, 5, 26, 16, 0, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 11, 13, 28, tzinfo=datetime.timezone.utc), 'time_taken': 17248.0, 'time_delta': '4:47:28', 'additions': 67, 'deletions': 0, 'state': 'closed'}, {'id': 420676656, 'number': 7, 'closed': datetime.datetime(2020, 5, 20, 11, 4, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 11, 3, 49, tzinfo=datetime.timezone.utc), 'time_taken': 44.0, 'time_delta': '0:00:44', 'additions': 318, 'deletions': 1, 'state': 'closed'}, {'id': 416665301, 'number': 5, 'closed': datetime.datetime(2020, 5, 31, 13, 58, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 11, 31, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1650404.0, 'time_delta': '19 days, 2:26:44', 'additions': 394, 'deletions': 1, 'state': 'closed'}]"
59223318,Lakes,Terasology/Lakes,Java,7,1,20,11,45,2,3,0,[]
17649379,AlterationEffects,Terasology/AlterationEffects,Java,8,2,19,18,74,3,7,3,"[{'id': 466865455, 'number': 24, 'closed': datetime.datetime(2020, 8, 23, 9, 10, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 16, 0, 22, tzinfo=datetime.timezone.utc), 'time_taken': 925816.0, 'time_delta': '10 days, 17:10:16', 'additions': 1, 'deletions': 3, 'state': 'closed'}]"
62096335,Equipment,Terasology/Equipment,Java,42,4,20,60,190,1,5,0,"[{'id': 480655332, 'number': 129, 'closed': datetime.datetime(2020, 9, 7, 21, 8, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 6, 5, 10, 20, tzinfo=datetime.timezone.utc), 'time_taken': 143894.0, 'time_delta': '1 day, 15:58:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 466881449, 'number': 125, 'closed': datetime.datetime(2020, 8, 12, 22, 20, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 16, 30, 37, tzinfo=datetime.timezone.utc), 'time_taken': 21005.0, 'time_delta': '5:50:05', 'additions': 65, 'deletions': 3, 'state': 'closed'}]"
74308191,Thirst,Terasology/Thirst,Java,8,0,20,16,51,2,4,0,"[{'id': 434014206, 'number': 17, 'closed': datetime.datetime(2020, 6, 29, 20, 22, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 14, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1403126.0, 'time_delta': '16 days, 5:45:26', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 431611280, 'number': 16, 'closed': datetime.datetime(2020, 6, 9, 20, 22, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 8, 8, 28, tzinfo=datetime.timezone.utc), 'time_taken': 44021.0, 'time_delta': '12:13:41', 'additions': 33, 'deletions': 1, 'state': 'closed'}, {'id': 403362395, 'number': 14, 'closed': datetime.datetime(2020, 4, 15, 17, 32, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 19, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 80665.0, 'time_delta': '22:24:25', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 399892067, 'number': 12, 'closed': datetime.datetime(2020, 4, 9, 22, 24, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 20, 36, 13, tzinfo=datetime.timezone.utc), 'time_taken': 265675.0, 'time_delta': '3 days, 1:47:55', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
13895163,Hunger,Terasology/Hunger,Java,10,1,19,24,89,0,4,0,"[{'id': 433812897, 'number': 19, 'closed': datetime.datetime(2020, 6, 17, 19, 33, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 17, 53, tzinfo=datetime.timezone.utc), 'time_taken': 438005.0, 'time_delta': '5 days, 1:40:05', 'additions': 44, 'deletions': 10, 'state': 'closed'}]"
187074454,Health,Terasology/Health,Java,14,0,23,15,210,3,2,0,"[{'id': 443351249, 'number': 47, 'closed': datetime.datetime(2020, 7, 13, 9, 12, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 8, 12, 20, tzinfo=datetime.timezone.utc), 'time_taken': 954031.0, 'time_delta': '11 days, 1:00:31', 'additions': 23, 'deletions': 7, 'state': 'closed'}, {'id': 440961083, 'number': 46, 'closed': datetime.datetime(2020, 6, 28, 12, 13, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 20, 53, 56, tzinfo=datetime.timezone.utc), 'time_taken': 55194.0, 'time_delta': '15:19:54', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 437108739, 'number': 45, 'closed': datetime.datetime(2020, 6, 27, 19, 4, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 13, 41, 20, tzinfo=datetime.timezone.utc), 'time_taken': 710590.0, 'time_delta': '8 days, 5:23:10', 'additions': 104, 'deletions': 0, 'state': 'closed'}]"
27113352,ManualLabor,Terasology/ManualLabor,Java,11,0,18,19,146,4,7,0,"[{'id': 453712190, 'number': 34, 'closed': datetime.datetime(2020, 7, 23, 16, 51, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 18, 25, 22, tzinfo=datetime.timezone.utc), 'time_taken': 253545.0, 'time_delta': '2 days, 22:25:45', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 450145653, 'number': 33, 'closed': datetime.datetime(2020, 7, 16, 17, 57, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 12, 10, 23, tzinfo=datetime.timezone.utc), 'time_taken': 20847.0, 'time_delta': '5:47:27', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 439147886, 'number': 30, 'closed': datetime.datetime(2020, 7, 8, 19, 7, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 11, 34, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1236782.0, 'time_delta': '14 days, 7:33:02', 'additions': 125, 'deletions': 1, 'state': 'closed'}, {'id': 402226299, 'number': 28, 'closed': datetime.datetime(2020, 4, 17, 13, 31, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 18, 5, 55, tzinfo=datetime.timezone.utc), 'time_taken': 501924.0, 'time_delta': '5 days, 19:25:24', 'additions': 2, 'deletions': 0, 'state': 'closed'}]"
27751758,WildAnimals,Terasology/WildAnimals,Java,23,4,22,26,184,6,10,3,"[{'id': 439149076, 'number': 56, 'closed': datetime.datetime(2020, 7, 6, 15, 54, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 11, 36, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1052296.0, 'time_delta': '12 days, 4:18:16', 'additions': 116, 'deletions': 1, 'state': 'closed'}]"
16919535,Fluid,Terasology/Fluid,Java,9,2,20,16,112,1,4,0,"[{'id': 449118901, 'number': 20, 'closed': datetime.datetime(2020, 7, 17, 19, 11, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 21, 17, 28, tzinfo=datetime.timezone.utc), 'time_taken': 251639.0, 'time_delta': '2 days, 21:53:59', 'additions': 45, 'deletions': 2, 'state': 'closed'}, {'id': 402221711, 'number': 16, 'closed': datetime.datetime(2020, 4, 17, 13, 30, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 17, 29, 5, tzinfo=datetime.timezone.utc), 'time_taken': 504092.0, 'time_delta': '5 days, 20:01:32', 'additions': 21, 'deletions': 7, 'state': 'closed'}]"
26296831,JoshariasSurvival,Terasology/JoshariasSurvival,Java,10,1,21,15,82,22,6,0,"[{'id': 461037206, 'number': 38, 'closed': datetime.datetime(2020, 8, 1, 15, 22, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 1, 11, 38, 5, tzinfo=datetime.timezone.utc), 'time_taken': 13464.0, 'time_delta': '3:44:24', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
