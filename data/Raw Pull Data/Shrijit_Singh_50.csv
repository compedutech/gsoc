pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
475956873,Add support for executors,"This project was a part of GSoC 2020 under the mentorship of @kunaltyagi & @SergioRAgostinho ðŸŽ‰ ðŸ¥³

For future reference, development took place on https://github.com/shrijitsingh99/unified-executors",False,4369,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4369,https://github.com/PointCloudLibrary/pcl/pull/4369,open,2344,6,26,1,1,11,4,0,"[{'name': 'needs: more work'}, {'name': 'module: common'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-08-30 20:05:54+00:00,,0.0,,"[{'comment_id': 479861727, 'comment_body': 'Just a minor update needed: the trait takes a tuple element-type, not a tuple element. Update needed in 2 places', 'comment_created': datetime.datetime(2020, 8, 31, 2, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 479862175, 'comment_body': 'tuple of the types (not elements) you want to filter\r\n\r\nAdd a note that the types need to be default ctor-able (or a todo to remove this restriction)', 'comment_created': datetime.datetime(2020, 8, 31, 2, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 479976413, 'comment_body': '`pcl::` should not be required.', 'comment_created': datetime.datetime(2020, 8, 31, 8, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479977273, 'comment_body': 'This should be removed from here and be logged in the issue tracker.', 'comment_created': datetime.datetime(2020, 8, 31, 8, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479977653, 'comment_body': 'same comment', 'comment_created': datetime.datetime(2020, 8, 31, 8, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479978245, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 8, 31, 8, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479980884, 'comment_body': 'pcl:: should not be required.', 'comment_created': datetime.datetime(2020, 8, 31, 8, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479981151, 'comment_body': 'same comment here', 'comment_created': datetime.datetime(2020, 8, 31, 8, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 479981250, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 8, 31, 8, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 480168671, 'comment_body': 'code based todo are easier to search for ðŸ˜„ ', 'comment_created': datetime.datetime(2020, 8, 31, 14, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 480206869, 'comment_body': 'no strong opinion about it', 'comment_created': datetime.datetime(2020, 8, 31, 15, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}]","[{'commit_sha': 'faa5159095adecfaa9c2f3dcff2b02b3a4fff520', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
475958647,Integrate executors with filters,Preliminary support for executors in filters,False,4370,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4370,https://github.com/PointCloudLibrary/pcl/pull/4370,open,2686,169,40,2,1,0,4,0,"[{'name': 'needs: code review'}, {'name': 'needs: pr merge'}, {'name': 'module: filters'}, {'name': 'priority: gsoc'}]",2020-08-30 20:20:33+00:00,,0.0,,[],"[{'commit_sha': '0752fc09fef02895f37e58d18958208c2e555ad1', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d6a0418db8340a9ef558652d8c0d6cf929384f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
475960461,Add omp and inline executor support for functor filter,"OpenMP executor offers a good boost due to parallelization up to 8 threads. After that the gains are marginal.
Benchmarks to come in a later PR.",False,4371,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4371,https://github.com/PointCloudLibrary/pcl/pull/4371,open,2837,225,42,3,1,0,4,0,"[{'name': 'needs: code review'}, {'name': 'needs: pr merge'}, {'name': 'module: filters'}, {'name': 'priority: gsoc'}]",2020-08-30 20:36:35+00:00,,0.0,,[],"[{'commit_sha': '0752fc09fef02895f37e58d18958208c2e555ad1', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d6a0418db8340a9ef558652d8c0d6cf929384f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18a16c1d622da55a59b3b71b55f89576ed066209', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
421077181,Add a job for clang in Ubuntu 18.04,As discussed in [#4081](https://github.com/PointCloudLibrary/pcl/pull/4081#issuecomment-626897659),True,4131,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4131,https://github.com/PointCloudLibrary/pcl/pull/4131,closed,238,210,8,13,5,7,3,0,"[{'name': 'needs: code review'}, {'name': 'module: ci'}, {'name': 'priority: gsoc'}]",2020-05-20 23:57:33+00:00,2020-05-29 19:41:59+00:00,762266.0,"8 days, 19:44:26","[{'comment_id': 428814989, 'comment_body': '```suggestion\r\n    displayName: GCC\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 17, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 429307269, 'comment_body': 'Shall I do this for the rest too?', 'comment_created': datetime.datetime(2020, 5, 22, 15, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 429627732, 'comment_body': 'I think we should keep the name `Build GCC`  since it implies it is the build stage in the pipeline.', 'comment_created': datetime.datetime(2020, 5, 24, 11, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 429683910, 'comment_body': 'If you look at the synopsis shown, it seems redundant.  But if you look at the [extended information](https://dev.azure.com/PointCloudLibrary/pcl/_build/results?buildId=16460&view=results), it seems necessary.\r\n\r\n<img width=""433"" alt=""Screen Shot 2020-05-25 at 8 06 06"" src=""https://user-images.githubusercontent.com/2657068/82766982-a7f22480-9e5e-11ea-881a-16a105e43fbe.png"">', 'comment_created': datetime.datetime(2020, 5, 24, 23, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 429684432, 'comment_body': ""One or two lines explaining the reasoning behind the way the tests are run would be helpful. Eg: allows Mac, Windows and Ubuntu to be run in parallel. Placement of Ubuntu-clang job reduces need of parallel CI jobs and doesn't impact total time per run under ideal conditions."", 'comment_created': datetime.datetime(2020, 5, 24, 23, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 430111246, 'comment_body': ""The Github one can be changed I think if we properly integrate with Github workflow.\r\n[Here](https://github.com/github/VisualStudio/pull/2512/checks?check_run_id=653837445) they have seemed to integrate properly with workflow. \r\nChanging it also might create problems if we have a separate stage for text in the future \r\n\r\nIt's not a big issue anyway will leave finally call to you."", 'comment_created': datetime.datetime(2020, 5, 26, 1, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 430420377, 'comment_body': ""> It's not a big issue anyway\r\n\r\nYeah. Plus that example is of GitHub actions. Something very different (and quite similar)"", 'comment_created': datetime.datetime(2020, 5, 26, 13, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'c8a872cbddab0c02b04138bac32d04c8ca9fa871', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21dad8701263251a9d5b54b23d45f5dd4beb11fa', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c79be11125f240ac8909d6766de20cf315374aa9', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a041d3eaca46b16aab548eccb11ef238615f4e4', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4464cbcc9197696a6db149c8c23609982dd40bd', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3000409ec7195643d67aab09978b59bc77f78600', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2508cb8c11d1df6772eb6ddf2d558f7f02dbda', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3759594b35a14918d6e7c7487c147fe897f2db7', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc78589a4e02529ea8f438dff14d77fe318126e3', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de378bfabeff1e9ef1b62c25d5f3f6cde440d81c', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bff175c875d723b49f25710765ba1c16727e2bc', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '149e0dd031d086f5dabaf1daf67b600147ffc03b', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '054aea93778fa9f49f31e115bbcf71122582b0d0', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
421073811,Fix CUDA incompatibility issues with Eigen and GCC,As discussed in #4101 ,True,4130,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4130,https://github.com/PointCloudLibrary/pcl/pull/4130,closed,28,4,2,5,9,6,2,0,"[{'name': 'module: ci'}, {'name': 'priority: gsoc'}]",2020-05-20 23:44:03+00:00,2020-05-22 10:00:53+00:00,123410.0,"1 day, 10:16:50","[{'comment_id': 428369812, 'comment_body': 'Why did you repeat L4 here?', 'comment_created': datetime.datetime(2020, 5, 20, 23, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 428370288, 'comment_body': 'Not needed now, earlier I was checking if the flag was set to then install Eigen 3.3.7', 'comment_created': datetime.datetime(2020, 5, 20, 23, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 428376899, 'comment_body': 'Install optionally using:\r\n```sh\r\n[ `apt show libeigen3-dev 2>/dev/null | grep \'^version\' -i | awk -F\'[ -.]\' \'{print $4}\'` -lt 7 ] && echo ""Need to install 3.3.7""\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 0, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 428473468, 'comment_body': '```suggestion\r\n  wget -qO- https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz | tar xz \\\r\n```\r\n\r\nAlso, the whitespace is not uniform', 'comment_created': datetime.datetime(2020, 5, 21, 6, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 428814401, 'comment_body': 'Any benefits to changing this?', 'comment_created': datetime.datetime(2020, 5, 21, 17, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 429102329, 'comment_body': ""Maybe not although I believe I'm the one who suggested the change on Discord. I recall there were some compilation issues between 9.0 and 9.2 and I would assume people would pick the highest minor version when picking CUDA 9. That's also the only one in the 9.X releases that PyTorch is supporting. "", 'comment_created': datetime.datetime(2020, 5, 22, 8, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}]","[{'commit_sha': '91c33ab90a74e004fb2b878afed2e22d7a8c2074', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479835b2ce02c5430641dfc8e2d3d44fd62f3a4f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e5fb666f821d570924e2b2cc7152d7752c0e60e', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e402a020be099ba184f85b3bd8150679bc6cd58f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4ae108c1b9347ea23f6e18946bcfcfc255b7383', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
418337722,Add support for CUDA in CI,"Updated Dockerfile for CUDA 10.2 support
Updated Eigen version to resolve CUDA conflict
Updated GCC version to resolved build errors in GPU module",True,4101,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4101,https://github.com/PointCloudLibrary/pcl/pull/4101,closed,11,2,3,1,9,11,4,0,"[{'name': 'needs: code review'}, {'name': 'changelog: new feature'}, {'name': 'module: ci'}, {'name': 'priority: gsoc'}]",2020-05-15 02:16:44+00:00,2020-05-30 11:27:34+00:00,1329050.0,"15 days, 9:10:50","[{'comment_id': 426342839, 'comment_body': 'Why not use shell comparison along with `cut -d. -f1`?', 'comment_created': datetime.datetime(2020, 5, 18, 2, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 426343000, 'comment_body': ""I know CUDA isn't ready for 20.04 yet, but I'd like there to be a CI with default Eigen version too, for making sure we don't break dependencies unknowingly.\r\n\r\nMy comment wrt Eigen was that you were installing eigen (and still are) in 2 ways: manually and via apt"", 'comment_created': datetime.datetime(2020, 5, 18, 2, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 427410562, 'comment_body': ""bash doesn't support floating-point math. I could just do integer comparison but used python just in case in the future we want to do floating point comparision."", 'comment_created': datetime.datetime(2020, 5, 19, 15, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 427412493, 'comment_body': ""You don't need floating point op. If you supply `.` as delimited and get the first field, that's the major version"", 'comment_created': datetime.datetime(2020, 5, 19, 15, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 427418766, 'comment_body': ""> I know CUDA isn't ready for 20.04 yet, but I'd like there to be a CI with default Eigen version too, for making sure we don't break dependencies unknowingly.\r\n\r\nI am not quite sure what you mean.Do you meant a separate pipeline for the default version or just use the one from apt in Ubuntu 20?\r\n\r\n> My comment wrt Eigen was that you were installing eigen (and still are) in 2 ways: manually and via apt\r\n\r\nThanks! DIdn't notice this, will remove the one from apt."", 'comment_created': datetime.datetime(2020, 5, 19, 16, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 427421006, 'comment_body': 'Eigen 3.3.7 will have bug fixes more than just for CUDA. We need to make sure we have a lower Eigen version compilation (without CUDA) to prevent accidental non-support', 'comment_created': datetime.datetime(2020, 5, 19, 16, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 427441822, 'comment_body': 'Agreed, So then we can have separate pipeline (without CUDA) in the baseline Ubuntu version and a separate pipeline for CUDA. Did you have something else in mind?', 'comment_created': datetime.datetime(2020, 5, 19, 16, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 427459074, 'comment_body': 'No, you pretty much nailed it.', 'comment_created': datetime.datetime(2020, 5, 19, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 428217887, 'comment_body': ""Didn't remove default Eigen from apt since it will still be used on 16.04. Currently, it seems simpler for both version Eigen to exist in the image and we use the one we want."", 'comment_created': datetime.datetime(2020, 5, 20, 18, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 428227814, 'comment_body': '```suggestion\r\n          BUILD_GPU: ON\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 18, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 428229267, 'comment_body': 'Please mention why this is being added', 'comment_created': datetime.datetime(2020, 5, 20, 18, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': '6296439c6c2ccd49238a704943f3f44205314f09', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
400558580,Re-add temporary fix for skipping of tests,Resolves #3878 ,True,3886,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/3886,https://github.com/PointCloudLibrary/pcl/pull/3886,closed,2,0,1,1,0,0,1,0,[{'name': 'module: ci'}],2020-04-07 23:58:38+00:00,2020-04-11 08:12:07+00:00,288809.0,"3 days, 8:13:29",[],"[{'commit_sha': 'fdabb5318e08da9d2c5d6af208fb2d9e91f7eedf', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
393422683,Convert CI to multi-stage pipelines ,"Reference: #3594
~~Depends on #3783~~ Merged.

Currently getting SSH key error ([CI](https://dev.azure.com/shrijitsingh99/shrijitsingh99/_build/results?buildId=296&view=results)), most likely as the build is running on my own pipeline which doesn't have permission.

Without documentation [CI Results](https://dev.azure.com/shrijitsingh99/shrijitsingh99/_build/results?buildId=292&view=results)",True,3795,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/3795,https://github.com/PointCloudLibrary/pcl/pull/3795,closed,86,64,7,14,33,10,2,0,"[{'name': 'needs: code review'}, {'name': 'module: ci'}]",2020-03-25 07:14:18+00:00,2020-04-06 07:13:46+00:00,1036768.0,"11 days, 23:59:28","[{'comment_id': 397774781, 'comment_body': 'New line here', 'comment_created': datetime.datetime(2020, 3, 25, 11, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 398032646, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 3, 25, 17, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 398317425, 'comment_body': 'Seems unneeded since the pool is in each ""task""', 'comment_created': datetime.datetime(2020, 3, 26, 4, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 398400375, 'comment_body': ""I didn't quite get it, do you mean tasks predefined by [Azure](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#task)?"", 'comment_created': datetime.datetime(2020, 3, 26, 8, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 398408158, 'comment_body': ""The pool isn't needed since each `format`, `windows`, `mac`, `documentation`, etc. have their own pools."", 'comment_created': datetime.datetime(2020, 3, 26, 8, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 398417583, 'comment_body': 'We could instead remove the pool from the individual jobs and define it globally, so that all jobs will use the default pool until specified otherwise like in `windows` and `mac`.\r\nHaving it global will be beneficial in case we want to update the pool version, them we have to do it only one place since `documentation`, `format`, etc. share same pool.', 'comment_created': datetime.datetime(2020, 3, 26, 9, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 398512728, 'comment_body': 'IMO, this adds a hidden dependency', 'comment_created': datetime.datetime(2020, 3, 26, 11, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 398564693, 'comment_body': '> adds a hidden dependency\r\n\r\nTrue, didn\'t consider that.\r\nUpdated it in 82d25e1. ""Explicit is better than implicit""\r\n\r\n', 'comment_created': datetime.datetime(2020, 3, 26, 13, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 400129590, 'comment_body': ""Needs a '\\n' at the end"", 'comment_created': datetime.datetime(2020, 3, 30, 11, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 401925198, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 4, 1, 21, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}]","[{'commit_sha': '92b09df6df152ebbd02504fa721b8cf05a69297d', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bff9ce4321a34c60fd24a9b0305a705f46f6731', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58a12057401451bff3fccb620b0d021babd191ab', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f4f3e9789cee6ef6e1f834f329dc914da55563f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd641ec53e0356e143f818910e8a8529330f08576', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f06315caf58de518f5ea38e8fd93aa6304dae3', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a877b2ba4deb32d6ca531a655bcb240f7b6df0de', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c530864fd11ca7fda2896fa6b4cee87dd09b122b', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2907aa21686c939f233b2543bc8da696e01d303f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62eb823b62cdbc0f585f4b36635fdb0b02330bca', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72ee979580c20eea46a37bc2a43554083c5249b', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f6778a614cc20ae2dcadcd4c6f1d37be8171c78', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c23cef325291767ce4554172755e93c929c1b0d', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae2c3b04c6cf47713daefa003040c0e7ae392af', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
392909953,Temporary fix for skipping of certain tests,A temporary workaround until a more permanent solution is available for issue #3727,True,3789,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/3789,https://github.com/PointCloudLibrary/pcl/pull/3789,closed,2,0,1,1,0,0,1,0,[{'name': 'module: ci'}],2020-03-24 10:39:14+00:00,2020-03-24 12:22:25+00:00,6191.0,1:43:11,[],"[{'commit_sha': '0ae0f99513f9133f88221e753fe8c4f010a4b3d5', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
392416092,Simplify Ubuntu CI using matrix strategy,"As per discussions in #3595 
Currently using private docker images, will update it to PCL images before PR as PCL images lack clang currently.
Ubuntu CI: [Link](https://dev.azure.com/shrijitsingh99/shrijitsingh99/_build?definitionId=10&_a=summary)",True,3783,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/3783,https://github.com/PointCloudLibrary/pcl/pull/3783,closed,30,53,3,2,5,1,2,0,"[{'name': 'changelog: enhancement'}, {'name': 'module: ci'}]",2020-03-23 14:21:24+00:00,2020-03-25 16:10:32+00:00,179348.0,"2 days, 1:49:08","[{'comment_id': 397767178, 'comment_body': '```suggestion\r\n        16.04 GCC:\r\n```\r\n\r\n1. Let\'s have the full version, 16 or 19 is ambiguous.\r\n2. ""ubuntu"" in the name is superfluous because it is already in the `displayName`\r\n\r\n![image](https://user-images.githubusercontent.com/1241736/77529408-d61fac00-6e8f-11ea-831c-84e5f4555c3a.png)\r\n', 'comment_created': datetime.datetime(2020, 3, 25, 10, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'taketwo', 'type': 'User'}]","[{'commit_sha': '060992f5f5d7a747761a36d56b907634d76fd4fd', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a9a154fd82c4f5b931796f18c83cd10afc5e10d', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
387676046,Update build type to release & remove multi-step build in CI,"Resolves #3656.
Edit: Changed build type for all OS and removed the multi-step builds since there were no longer any OOM issues.",True,3745,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/3745,https://github.com/PointCloudLibrary/pcl/pull/3745,closed,20,24,9,4,17,27,1,0,[{'name': 'module: ci'}],2020-03-13 09:28:28+00:00,2020-03-23 12:29:47+00:00,874879.0,"10 days, 3:01:19","[{'comment_id': 392117944, 'comment_body': ""These commands are to prevent out of memory (RAM) issues, your PR is to address out of HDD space. There's no reason to touch these at the moment."", 'comment_created': datetime.datetime(2020, 3, 13, 9, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 392119112, 'comment_body': ""Removed it from the PR. I was testing it out and wasn't getting any memory issues. Will test out more and if necessary create a new issue."", 'comment_created': datetime.datetime(2020, 3, 13, 9, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 392122279, 'comment_body': 'Oh ok. Well, test away then. :)', 'comment_created': datetime.datetime(2020, 3, 13, 9, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 393790464, 'comment_body': 'Please divide this on multiple lines too (similar to other yaml files, one definition/option per line)', 'comment_created': datetime.datetime(2020, 3, 17, 16, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 393806590, 'comment_body': 'Does MSVC automatically perform parallelism? If so, we might want to increase the jobs (from 2 to what MSVC uses) on other systems, and if no, add jobs.', 'comment_created': datetime.datetime(2020, 3, 17, 16, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 393807167, 'comment_body': 'Did you try 3 or more jobs? With Release, lesser RAM is used, so maybe we can have more parallel jobs (same applies to other CI)', 'comment_created': datetime.datetime(2020, 3, 17, 16, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 393808111, 'comment_body': '```suggestion\r\n    LeafNode* leaf_node = nullptr;\r\n```', 'comment_created': datetime.datetime(2020, 3, 17, 16, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 393826638, 'comment_body': ""No didn't try as the pipelines run [Standard_DS2_v2](https://docs.microsoft.com/en-us/azure/virtual-machines/dv2-dsv2-series#dsv2-series) which have 2 vCPUs only, so adding more jobs beyond 2 shouldn't give any speedup.\r\nWill benchmark though, just to be sure."", 'comment_created': datetime.datetime(2020, 3, 17, 16, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 393831132, 'comment_body': 'I was actually looking for this info. Where did you find this?', 'comment_created': datetime.datetime(2020, 3, 17, 17, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 393833274, 'comment_body': ""I have no idea if it does parallelize automatically, intuitively it shouldn't. Someone with more idea on this should give feedback. Will make it -j2 for time being and see build times."", 'comment_created': datetime.datetime(2020, 3, 17, 17, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 393836357, 'comment_body': 'It may be that multiline commands are not supported on Windows. Otherwise, I would have written this way when I created the job. But also things may have changed since then. Anyway, please do try to split, this is just a warning.', 'comment_created': datetime.datetime(2020, 3, 17, 17, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'taketwo', 'type': 'User'}, {'comment_id': 393838136, 'comment_body': 'https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops', 'comment_created': datetime.datetime(2020, 3, 17, 17, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 393841927, 'comment_body': 'Fixed f4f5428f3a8c72d23c2717c6445546ce1607eea1', 'comment_created': datetime.datetime(2020, 3, 17, 17, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 393883583, 'comment_body': 'Did some benchmarks, no speedup when jobs are increased beyond vCPU count.', 'comment_created': datetime.datetime(2020, 3, 17, 18, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 393926240, 'comment_body': 'This section of CMakeLists (supposedly) takes care of parallelizm for MSVC:\r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/2133857dd8ddd0e80602fc1602651a5afb10f934/CMakeLists.txt#L166-L187', 'comment_created': datetime.datetime(2020, 3, 17, 19, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'taketwo', 'type': 'User'}, {'comment_id': 393977304, 'comment_body': 'It works now, you just have to use `^` instead of `\\` for newlines.', 'comment_created': datetime.datetime(2020, 3, 17, 21, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 394142289, 'comment_body': ""This is a potentially dangerous change. You're implicitly relying on the original author not using negative numbers for status checks. Any idea how many warnings this was generating before? How feasible is it to apply casts solely on the locations in which warnings were triggered? "", 'comment_created': datetime.datetime(2020, 3, 18, 7, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 394142337, 'comment_body': 'Same comment here.', 'comment_created': datetime.datetime(2020, 3, 18, 7, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 394175682, 'comment_body': 'The array_defs.h file shows extensive checks for negative values and casts to `unsigned`', 'comment_created': datetime.datetime(2020, 3, 18, 8, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 394185989, 'comment_body': 'My issue is that ""extensive"" does not imply ""complete"". If a single case is missed then we potentially introduced a silent issue. Hence, my original question, how feasible is it to just address the warnings individually?', 'comment_created': datetime.datetime(2020, 3, 18, 8, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 394789617, 'comment_body': ""I understand it could quite possibly lead to some silent error. The author should have used unsigned types from the beginning, which would prevent corner cases and reduced the number of checks required, but anyway that's not the point here I guess.\r\nHave applied casts to where it was needed only now (58a56c1d)."", 'comment_created': datetime.datetime(2020, 3, 19, 4, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 394792522, 'comment_body': 'Fixed by 58a56c1d', 'comment_created': datetime.datetime(2020, 3, 19, 5, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 394818960, 'comment_body': 'Some parenthesis and static_cast maybe', 'comment_created': datetime.datetime(2020, 3, 19, 6, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 394893418, 'comment_body': 'What warning/error does it gives?\r\nm_count is int, 1 is int? and i is int - given to a method ""move"", which accepts an int?\r\nAnd casting a int to unsigned int, which is then parsed to a method that accepts a int, doesn\'t seem to make sense?\r\n\r\nThe same Move method is called on line 492 as well as 1403 - but those doesn\'t require the cast?', 'comment_created': datetime.datetime(2020, 3, 19, 9, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 394957011, 'comment_body': '> What warning/error does it gives?\r\n\r\n error: assuming signed overflow does not occur when assuming that (X + c) < X is always false [-Werror=strict-overflow]\r\n\r\n> m_count is int, 1 is int? and i is int - given to a method ""move"", which accepts an int?\r\n> And casting a int to unsigned int, which is then parsed to a method that accepts a int, doesn\'t seem to make sense?\r\n\r\nBy casting m_count to unsigned int, i and 1 also get cast to unsigned get added then cast to int from which the compiler can infer that the ele_cnt argument in Move function will always be positive.\r\n\r\n> The same Move method is called on line 492 as well as 1403 - but those doesn\'t require the cast?\r\nThe warnings come due to the memory functions being called in GetCapacity and Move.\r\n\r\nYeah in line 492 and 1403, the dest_i argument of Move function, is set to i whereas in Insert it is i + 1. So if i = 0, then when in Insert, dest_i = i+ 1 and the condition `if ( capacity > m_capacity )` becomes true as m_capacity is 0 by default so the setCapacity function gets called which contains `memset`.  \r\nNot sure exactly what all optimizations the compiler is doing to create such a situation\r\n\r\nThis issue can be looked into more extensively but that would better be better suited for a separate issue. The current solution solves the warning and hopefully till my understanding doesn\'t cause any other issues.', 'comment_created': datetime.datetime(2020, 3, 19, 11, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 395072801, 'comment_body': '> Some parenthesis and static_cast maybe\r\n\r\nDone (e6c13c8)', 'comment_created': datetime.datetime(2020, 3, 19, 14, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 395083945, 'comment_body': 'Since we are in the conditional branch ` if ( i < m_count-1 )` we are at least sure that  `m_count-1-i` is positive. But this is indeed weird af.', 'comment_created': datetime.datetime(2020, 3, 19, 14, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}]","[{'commit_sha': 'cf54d1ed8b2565d394b1ea4ab904b3c164039938', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f39996bbe9caed44efcc950f54f00f878fe88710', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b77beea8c499dc61b885232fd0a06cb10a68ad0', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d1fb6b4156514caa591b826961ac7aedb53cc19', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
421077181,Add a job for clang in Ubuntu 18.04,As discussed in [#4081](https://github.com/PointCloudLibrary/pcl/pull/4081#issuecomment-626897659),True,4131,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4131,https://github.com/PointCloudLibrary/pcl/pull/4131,closed,238,210,8,13,5,7,3,0,"[{'name': 'needs: code review'}, {'name': 'module: ci'}, {'name': 'priority: gsoc'}]",2020-05-20 23:57:33+00:00,2020-05-29 19:41:59+00:00,762266.0,"8 days, 19:44:26","[{'comment_id': 428814989, 'comment_body': '```suggestion\r\n    displayName: GCC\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 17, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 429307269, 'comment_body': 'Shall I do this for the rest too?', 'comment_created': datetime.datetime(2020, 5, 22, 15, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 429627732, 'comment_body': 'I think we should keep the name `Build GCC`  since it implies it is the build stage in the pipeline.', 'comment_created': datetime.datetime(2020, 5, 24, 11, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 429683910, 'comment_body': 'If you look at the synopsis shown, it seems redundant.  But if you look at the [extended information](https://dev.azure.com/PointCloudLibrary/pcl/_build/results?buildId=16460&view=results), it seems necessary.\r\n\r\n<img width=""433"" alt=""Screen Shot 2020-05-25 at 8 06 06"" src=""https://user-images.githubusercontent.com/2657068/82766982-a7f22480-9e5e-11ea-881a-16a105e43fbe.png"">', 'comment_created': datetime.datetime(2020, 5, 24, 23, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 429684432, 'comment_body': ""One or two lines explaining the reasoning behind the way the tests are run would be helpful. Eg: allows Mac, Windows and Ubuntu to be run in parallel. Placement of Ubuntu-clang job reduces need of parallel CI jobs and doesn't impact total time per run under ideal conditions."", 'comment_created': datetime.datetime(2020, 5, 24, 23, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 430111246, 'comment_body': ""The Github one can be changed I think if we properly integrate with Github workflow.\r\n[Here](https://github.com/github/VisualStudio/pull/2512/checks?check_run_id=653837445) they have seemed to integrate properly with workflow. \r\nChanging it also might create problems if we have a separate stage for text in the future \r\n\r\nIt's not a big issue anyway will leave finally call to you."", 'comment_created': datetime.datetime(2020, 5, 26, 1, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 430420377, 'comment_body': ""> It's not a big issue anyway\r\n\r\nYeah. Plus that example is of GitHub actions. Something very different (and quite similar)"", 'comment_created': datetime.datetime(2020, 5, 26, 13, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'c8a872cbddab0c02b04138bac32d04c8ca9fa871', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21dad8701263251a9d5b54b23d45f5dd4beb11fa', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c79be11125f240ac8909d6766de20cf315374aa9', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a041d3eaca46b16aab548eccb11ef238615f4e4', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4464cbcc9197696a6db149c8c23609982dd40bd', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3000409ec7195643d67aab09978b59bc77f78600', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2508cb8c11d1df6772eb6ddf2d558f7f02dbda', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3759594b35a14918d6e7c7487c147fe897f2db7', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc78589a4e02529ea8f438dff14d77fe318126e3', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de378bfabeff1e9ef1b62c25d5f3f6cde440d81c', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bff175c875d723b49f25710765ba1c16727e2bc', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '149e0dd031d086f5dabaf1daf67b600147ffc03b', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '054aea93778fa9f49f31e115bbcf71122582b0d0', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
455530232,Switch PassthroughFilter to use FunctorFilter internally,"TODO:
1. Update docs",False,4287,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4287,https://github.com/PointCloudLibrary/pcl/pull/4287,open,68,196,3,7,1,21,4,0,"[{'name': 'needs: author reply'}, {'name': 'module: filters'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-07-23 07:34:16+00:00,,0.0,,"[{'comment_id': 459267268, 'comment_body': 'Errrr... maybe move all this content to the main header :smile: ', 'comment_created': datetime.datetime(2020, 7, 23, 7, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459267865, 'comment_body': 'Keep the stub with a warning and indirection', 'comment_created': datetime.datetime(2020, 7, 23, 7, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459275037, 'comment_body': 'This logic might be duplicated', 'comment_created': datetime.datetime(2020, 7, 23, 7, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459275259, 'comment_body': 'index_t?', 'comment_created': datetime.datetime(2020, 7, 23, 7, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459275901, 'comment_body': 'This logic might be redundant. If not, use `isXYZFinite` instead', 'comment_created': datetime.datetime(2020, 7, 23, 7, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459276247, 'comment_body': ""Choose a condition based on this. That'd be faster"", 'comment_created': datetime.datetime(2020, 7, 23, 7, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459278297, 'comment_body': 'Deprecation in v1.13?', 'comment_created': datetime.datetime(2020, 7, 23, 8, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 459283706, 'comment_body': 'Can we move this check out of the loop?', 'comment_created': datetime.datetime(2020, 7, 23, 8, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459359289, 'comment_body': 'Switched to `isXYZFinite`. Any reason behind this check being redundant?', 'comment_created': datetime.datetime(2020, 7, 23, 10, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 459361763, 'comment_body': ""I didn't follow."", 'comment_created': datetime.datetime(2020, 7, 23, 10, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 459362328, 'comment_body': 'No, it has to be computed for every point i.e. offset `pt_data`', 'comment_created': datetime.datetime(2020, 7, 23, 10, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 459363251, 'comment_body': ""I think `int` is a better fit since it explicitly relies on check for `-1` if the field  name hasn't been set. "", 'comment_created': datetime.datetime(2020, 7, 23, 10, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 459369098, 'comment_body': 'You dropped a few', 'comment_created': datetime.datetime(2020, 7, 23, 10, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459369347, 'comment_body': 'You can include the main header here', 'comment_created': datetime.datetime(2020, 7, 23, 10, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459369499, 'comment_body': 'Note: ABI breakage', 'comment_created': datetime.datetime(2020, 7, 23, 11, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459369723, 'comment_body': ""14. Else, it'd cause a removal in 13"", 'comment_created': datetime.datetime(2020, 7, 23, 11, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459591653, 'comment_body': ""I thought this was handled in some common way somewhere since it's a very frequent condition. But apparently not."", 'comment_created': datetime.datetime(2020, 7, 23, 16, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459592064, 'comment_body': ""Make a lambda based on this condition since it doesn't change between 2 iterations on the cloud."", 'comment_created': datetime.datetime(2020, 7, 23, 16, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459595693, 'comment_body': ""I don't like the fact that this incurs a few shared_ptr copies and some vector allocations and requires a move on L56"", 'comment_created': datetime.datetime(2020, 7, 23, 17, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459601028, 'comment_body': 'Is the finite-check part of the condition or part of a separate filter. As in, which represents this better:\r\n```cpp\r\nreturn condition(cloud, idx);\r\n// OR\r\nreturn isXYZFinite(cloud[idx]) && condition(cloud, idx);\r\n```\r\nBecause technically, `isXYZFinite(cloud[idx])` is a passthrough filter with min and max values `-FLT_MAX` and `FLT_MAX`. :thinking: ', 'comment_created': datetime.datetime(2020, 7, 23, 17, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 459603086, 'comment_body': ""The check of `NaN` can be removed, since NaN comparison gives false for all comparisons and C++ assumes IEEE floats. It's dead code that compiler will remove either way.\r\n\r\nPS: I was assuming that `field_name` would be only x, y or z and we're already checking for that before. Ignore the point made regarding moving outside the loop"", 'comment_created': datetime.datetime(2020, 7, 23, 17, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': '18f885166e4a1afe4b34d13c11f2ef2a39347838', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28a547548222df082dc9cd20e4da1d5ed3756e92', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4d803c304328a158b2f55da22994b8e60f18102', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09ad7ed54551c76120f1e98b7a4c31628808ddf1', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b871913f210f54fdd495c22ad85ff4f6bf0548b5', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4734e5e26f1ae9f2dd004fd3b44f9a78ed1db51', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708ef74c6414a13cd440f471d406f71d14c6c0f1', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
451881772,Merge FPFHEstimationOMP into FPFHEstimation,"Merges both classes and removes code duplication

TODO:
1. Update docs
2. Update docstrings if needed
3. Discuss and update deprecation policy accordingly",False,4281,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4281,https://github.com/PointCloudLibrary/pcl/pull/4281,open,82,448,7,3,1,3,6,0,"[{'name': 'changelog: enhancement'}, {'name': 'needs: more work'}, {'name': 'module: features'}, {'name': 'changelog: deprecation'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-07-18 11:34:31+00:00,,0.0,,"[{'comment_id': 456866001, 'comment_body': ""The number here is for removal. Release in 1.12 and removal in 1.13 doesn't sound great. Make it the 1.14 at least"", 'comment_created': datetime.datetime(2020, 7, 19, 6, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456867571, 'comment_body': 'Please benchmark this. Should not have adverse effects, but just to be sure', 'comment_created': datetime.datetime(2020, 7, 19, 6, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456867634, 'comment_body': 'Outdent the block please', 'comment_created': datetime.datetime(2020, 7, 19, 6, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': '84933c8291cd654d608017e4cd7fe44c56125322', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62ed27fbb342445dc8e87984e8f9eff6365925a', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4440c4e53aa67df41f2b99ec3aa85f6f3f9c9f70', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
451681183,Merge NormalEstimationOMP into NormalEstimation,"Merges both classes and removes code dupilcation

TODO:
1. Update docs
2. Update docstrings if needed
3. Discuss and update deprecation policy accordingly",False,4279,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4279,https://github.com/PointCloudLibrary/pcl/pull/4279,open,76,357,17,3,1,12,6,0,"[{'name': 'changelog: enhancement'}, {'name': 'needs: more work'}, {'name': 'module: features'}, {'name': 'changelog: deprecation'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-07-18 04:02:37+00:00,,0.0,,"[{'comment_id': 456751603, 'comment_body': 'A separate ctor instead of an overloaded default ctor is better', 'comment_created': datetime.datetime(2020, 7, 18, 5, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456824504, 'comment_body': ""If `setNumberOfThreads()` isn't called and no value is supplied to the constructor, the algorithm won't be run? Shouldn't it just default to one thread?\r\n\r\nCan we maybe add { } for better readability?"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'larshg', 'type': 'User'}, {'comment_id': 456864253, 'comment_body': 'Moving the `if` to be closer to the top might be better', 'comment_created': datetime.datetime(2020, 7, 19, 5, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456864366, 'comment_body': '@SergioRAgostinho Would you prefer this approach or the approach where the `setNumberOfThreads` is visible only in the derived class made for OMP?', 'comment_created': datetime.datetime(2020, 7, 19, 5, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 460292092, 'comment_body': 'why?', 'comment_created': datetime.datetime(2020, 7, 24, 21, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 460293016, 'comment_body': 'If the point is to try to enforce consistency, the latter. Only OMP classes need to worry about how many threads are running. \r\n\r\nEdit: My idea was not to deprecate the OMP version. The OMP class should be the one exposing controls to tweak the number of threads. \r\n\r\nI would defer getting rid of classes with OMP suffix after the introduction of executors for each class. ', 'comment_created': datetime.datetime(2020, 7, 24, 21, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 460369572, 'comment_body': ""Default arguments have some counter-intuitive behavior:\r\n* Future change in default value doesn't affect user's pre-compiled code. So code working with a.b.0 and a.b.1 can have different behavior if the defaults are changed (which is not a ABI/API breakage)\r\n\r\nand some nice properties in refactoring:\r\n* Allows the overloaded ctor to protected, giving access only to derived class (if we don't deprecate the OMP class)"", 'comment_created': datetime.datetime(2020, 7, 25, 5, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 460369683, 'comment_body': '@shrijitsingh99 Could you please `undeprecate` the OMP class?', 'comment_created': datetime.datetime(2020, 7, 25, 5, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 460370381, 'comment_body': ""I didn't understand the discussion. What do you mean by derived class for OMP?\n\nTo clarify, these PRs are meant as basework for integration with executors. The ideas was to get the design of this combined class approved then integrate with executors then merge with master.\nApologize for that, I should have clarified it early on."", 'comment_created': datetime.datetime(2020, 7, 25, 6, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 460371289, 'comment_body': ""> then integrate with executors then merge with master.\r\n\r\nIf I understood Sergio correctly, OMP class should not be deprecated till the executors are integrated.\r\n\r\n> What do you mean by derived class for OMP?\r\n\r\nThe OMP class derives from the base class. It adds only a ctor and overloads where needed to expose controls to OMP which are hidden in the base class.\r\n\r\nBenefits:\r\n* doesn't break API to users till executors are ready\r\n* removes 2 implementations and any chance of them diverging\r\n* still has 1 class for you to add executors to"", 'comment_created': datetime.datetime(2020, 7, 25, 6, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 460389588, 'comment_body': ""Oh okay so that's just removing the deprecation warning then, right?\n\n"", 'comment_created': datetime.datetime(2020, 7, 25, 10, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 460411007, 'comment_body': '* Remove deprecation warnings\r\n* Let OMP class handle the num_thread related stuff (setting/changing, etc.)', 'comment_created': datetime.datetime(2020, 7, 25, 14, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'b110050fe94873e79b3409e537c7b7538180d01f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f4c1fe3cf0e07f214d52ec0f8c6f513281bf24', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51539cfb027c299dba5e29fd98860dcf35092a67', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80
448012939,Modularize euclidean clustering,"Continuing discussion from https://github.com/shrijitsingh99/pcl/pull/4
",False,4268,https://api.github.com/repos/PointCloudLibrary/pcl/pulls/4268,https://github.com/PointCloudLibrary/pcl/pull/4268,open,192,294,4,19,4,44,5,0,"[{'name': 'changelog: enhancement'}, {'name': 'needs: more work'}, {'name': 'module: segmentation'}, {'name': 'status: stale'}, {'name': 'priority: gsoc'}]",2020-07-13 03:28:11+00:00,,0.0,,"[{'comment_id': 453418072, 'comment_body': ""There's `pcl::ignore`\r\n\r\nAlso, `extract_all` or `filter_all` or something similar would be a better name in this context"", 'comment_created': datetime.datetime(2020, 7, 13, 3, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 453418692, 'comment_body': 'These error messages are so wrong. Please add a note in API docs to reflect that the clouds/indices are different based on size only, and not the content', 'comment_created': datetime.datetime(2020, 7, 13, 3, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 453419111, 'comment_body': 'Split into 3 functions: one with and one without indices and the third one with common implementation using `ConstCloudIterator` without any check', 'comment_created': datetime.datetime(2020, 7, 13, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 453419544, 'comment_body': '`getNormalVector{3,4}fMap()`', 'comment_created': datetime.datetime(2020, 7, 13, 3, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 453420032, 'comment_body': 'Better name. This is essentially thresholding on cos distance', 'comment_created': datetime.datetime(2020, 7, 13, 3, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 453420203, 'comment_body': 'You should pre-compute the `cos(eps_angle)` before-hand. `acos` is expensive', 'comment_created': datetime.datetime(2020, 7, 13, 3, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 453456436, 'comment_body': 'Should we also not perform angle wrap for `eps_angle` since user is free to pass a negative angle too.', 'comment_created': datetime.datetime(2020, 7, 13, 6, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 453456940, 'comment_body': 'Updated the error message.\r\n> add a note in API docs\r\n\r\nWere you talking about the error message or something else?', 'comment_created': datetime.datetime(2020, 7, 13, 6, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 453459733, 'comment_body': ""In the doxygen comment, add that if the tree isn't built on the indices and cloud, things can go very wrong. For speed reasons, we only check the sizes and not the content"", 'comment_created': datetime.datetime(2020, 7, 13, 6, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454092508, 'comment_body': 'Wrapped from 0 to PI.', 'comment_created': datetime.datetime(2020, 7, 14, 4, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 454092539, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 7, 14, 4, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 454153481, 'comment_body': '> a functor specifying a criterion that must be satisfied by all point added to the cluster\r\n\r\nreplace in all other occurrences ', 'comment_created': datetime.datetime(2020, 7, 14, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454154930, 'comment_body': ""This looks suspicious, eps usually represents a very small quantity and here you're taking the max of something which the name implies it should be small and M_PI which is large. Basically it will always be M_PI.\r\n\r\nEdit: I just read the function signature and realized that the issue is in this variables name. "", 'comment_created': datetime.datetime(2020, 7, 14, 7, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454156103, 'comment_body': 'merged to master in the meantime', 'comment_created': datetime.datetime(2020, 7, 14, 7, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454159771, 'comment_body': 'This shared pointer is being initialized to null and immediately used in the next line.', 'comment_created': datetime.datetime(2020, 7, 14, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454207084, 'comment_body': 'It should be `std::min()`. Should I change it to min or is there something else needed to be done.', 'comment_created': datetime.datetime(2020, 7, 14, 8, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 454207450, 'comment_body': 'Will rebase, once issues are resolved.', 'comment_created': datetime.datetime(2020, 7, 14, 8, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 454212967, 'comment_body': 'Both readers have come to a different conclusion :fearful: ', 'comment_created': datetime.datetime(2020, 7, 14, 9, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454214008, 'comment_body': 'For pointers, I prefer auto: `auto name = make_shared<Type>(args);` (I always prefer auto :laughing: )', 'comment_created': datetime.datetime(2020, 7, 14, 9, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454216488, 'comment_body': ""Please reword to be in a passive voice. This example is not quite right but should point you in the correct direction:\r\n```\r\nThe cloud/indices being passed here must be the same ones used to build the tree. PCL warns if the error is explicit (sizes are equal), but doesn't check for deep equality in the interest of performance.\r\n```"", 'comment_created': datetime.datetime(2020, 7, 14, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454218405, 'comment_body': 'The name `getSortedResults` is worse compared to `areResultsSorted`, but the function returns a bool. Just `index_t nn_start_index = tree->getSortedResults();` should suffice, right?', 'comment_created': datetime.datetime(2020, 7, 14, 9, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454219073, 'comment_body': ""Should we take the iterator by value or mutable reference? @SergioRAgostinho I don't now how easily copyable the iterator is"", 'comment_created': datetime.datetime(2020, 7, 14, 9, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454219992, 'comment_body': 'Convert to for loop?\r\n```cpp\r\nfor (index_t sq_idx; sq_idx < indices.size(); ++sq_idx) { ... }\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 9, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454222199, 'comment_body': ""What's the constraints on the functor? Does `[]{return true;}` suffice? Will `[](MyClass ...A){return AnotherClass{A...};}` work?\r\n\r\nTighten the interface appropriately:\r\n* enough leeway for user\r\n* no need to read the documentation based on error message"", 'comment_created': datetime.datetime(2020, 7, 14, 9, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454225141, 'comment_body': ""I'd advice to put `j` after `nn_indices` to be consistent and to put `cloud` as the first parameter (to show `i` belongs to the cloud)"", 'comment_created': datetime.datetime(2020, 7, 14, 9, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454669050, 'comment_body': ""As a reader the current form makes it more obvious what the line does - especially since `getSortedResults` has a confusing name. Direct conversion from `bool` to index type does work in this case, but IME it's the kind of conversation which is hard to understand at first sight when reading the code, while having the ternary makes it more obvious. I believe that the optimizer will generate the same code for both."", 'comment_created': datetime.datetime(2020, 7, 14, 21, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Morwenn', 'type': 'User'}, {'comment_id': 454832856, 'comment_body': 'It looks like a simple pointer copy. \r\n\r\nEdit: Cloud iterator is buggy and it is going to double free the same pointer if a copy is made. :man_facepalming: \r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/009d73dbb51fcea8dbf8daeb1229dbb48e0f3870/common/include/pcl/cloud_iterator.h#L116-L186\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 15, 6, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454837761, 'comment_body': ""Let's stick to a reference in that case"", 'comment_created': datetime.datetime(2020, 7, 15, 7, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 454912220, 'comment_body': '> It should be `std::min()`. Should I change it to min or is there something else needed to be done.\r\n\r\nIndeed you should change to min. eps is supposed to be a maximum threshold (very poor choice of name)', 'comment_created': datetime.datetime(2020, 7, 15, 9, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 454944464, 'comment_body': ""It's an internal variable. Go ahead with a rename to `max_angle` or `upper_bound_angle` or something similar"", 'comment_created': datetime.datetime(2020, 7, 15, 10, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456116731, 'comment_body': 'Done. Pick it up form https://github.com/PointCloudLibrary/pcl/blob/c262ec63b1e95bf629b1011a25e87df0ade4e9f1/filters/include/pcl/filters/functor_filter.h#L16-L21\r\nSlighlty off topic, whats the reason for using `pcl::remove_cvref_t` and then adding `const` and `&`?\r\n', 'comment_created': datetime.datetime(2020, 7, 16, 22, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 456123010, 'comment_body': 'Changed to `min()` and renamed to `max_angle`', 'comment_created': datetime.datetime(2020, 7, 16, 22, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 456123106, 'comment_body': 'Better now?', 'comment_created': datetime.datetime(2020, 7, 16, 22, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrijitsingh99', 'type': 'User'}, {'comment_id': 456138948, 'comment_body': ""With `const` and reference collapsing rules, isn't this the same as `const remove_volatile_t<pcl::PointCloud<PointT>>&,`?"", 'comment_created': datetime.datetime(2020, 7, 16, 23, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Morwenn', 'type': 'User'}, {'comment_id': 456313866, 'comment_body': 'same comment here.', 'comment_created': datetime.datetime(2020, 7, 17, 8, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 456325045, 'comment_body': 'It is. Which leads to the next question, why do you care if the user supplies a type which is volatile?', 'comment_created': datetime.datetime(2020, 7, 17, 9, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 456327793, 'comment_body': ""You need to move the implementation of this method to the .hpp file. There's no solid reason to keep it in the .h file"", 'comment_created': datetime.datetime(2020, 7, 17, 9, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 456336910, 'comment_body': ""I'm not liking this pattern where you pass the cloud iterator as an argument, but still pass the whole point cloud as well to the function. Please change to the following.\r\n```cpp\r\nextractEuclideanClusters(const PointCloud<PointT> &cloud, const Indices &indices, [...]);\r\n```\r\n\r\nOverloads which don't have indices in their function signature, should supply empty indices to this method. You call the appropriate constructor for CloudIterator after checking if `indices` is empty or not."", 'comment_created': datetime.datetime(2020, 7, 17, 9, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SergioRAgostinho', 'type': 'User'}, {'comment_id': 456354699, 'comment_body': ""That's a brain-fart. The remove_cvref was meant for something else, but in refactoring from old version to the newer simplified checker implementation, it managed to slip through."", 'comment_created': datetime.datetime(2020, 7, 17, 10, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456356651, 'comment_body': ""I think the `cloudIterator` is not well engineered enough for this.\r\n\r\nLet's kill the idea of using the cloudIterator in public interface and hide it. It's still useful for removing common code, but beyond that, `cloud` is needed for size check as well as passing to the user's lambda"", 'comment_created': datetime.datetime(2020, 7, 17, 10, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456358184, 'comment_body': ""> Overloads which don't have indices in their function signature, should supply empty indices to this method\r\n\r\nThat's a problematic behavior chain in pipelines. If after filtering/previous segmentation my indices became empty, now this clustering would run on the entire point cloud :scream: "", 'comment_created': datetime.datetime(2020, 7, 17, 10, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456358442, 'comment_body': 'Spelling error', 'comment_created': datetime.datetime(2020, 7, 17, 10, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}, {'comment_id': 456377173, 'comment_body': ""I think it's more about `remove_cvref_t` being used to strip `const` and reference qualifiers, and nobody gives a thought about `volatile`. As far as I'm concerned I wouldn't consider `volatile` in such a case and would go with `const pcl::PointCloud<PointT>&?` directly."", 'comment_created': datetime.datetime(2020, 7, 17, 11, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Morwenn', 'type': 'User'}, {'comment_id': 456381698, 'comment_body': ""Just chiming in, being the author of the original snippet this is copied from: it's a mistake from when I was taking in the functor itself (`typename FunctorT`) and needed this to get arguments and constrain the input to `const PointCloud<PointT>&` (no volatile allowed). But the design changed, and got simplified thanks to the reviews but this managed to slip in.\r\n\r\nWe know the type here, and remove_X is doing nothing of value here"", 'comment_created': datetime.datetime(2020, 7, 17, 11, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kunaltyagi', 'type': 'User'}]","[{'commit_sha': 'd54bb58f68b38a07868a2f9150fe377119e878a3', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7a763e204d4471683012cf8ab8468ad53ed3b8', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a985a573e2149b304f23d5cd524320750d20e9da', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '242b8f51d247857352340cbc4159f3fb53ef016e', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03535065ead058b0ecef097b92dde0e776e38aab', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4f96b1ee4f4ef3b625fbfb6b523df4bc7ec9350', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7d683809f5a706702c73236f3a16c919a5ee495', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4282d2f9efd287820a1443d5ee1c3b297dde7cde', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbf3b4b4f8dfba98b93a896b872d971a79aff93f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20ac71cadaf49d5929c9706f740af8552082bcc4', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795b5458f22c68724221f4413c44714017dd8b47', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd3bc6b4b090f166c5a47d21369c87a5c6dba2e9', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b5155d3291d50d35b5b89a1cdcbf84e1069631', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4f5045821bb80079cec7b7bc110c0e4bb7b896', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2bcb28eb41c3453cd3a5972979cc479d84dcb1f', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95204a31a2861882a91c352d08a3fee61e0915ed', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0128a1ffea185e88e32e3f26e69f5c26998c8cc8', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228fae439671fb610fcc861bf1284ce97b4d98de', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6283ca2594de7cd6b516a5f4d47b5c7bdba7cbc', 'committer_username': 'shrijitsingh99', 'committer_name': 'Shrijit Singh', 'committer_email': 'shrijitsingh99@gmail.com', 'commit_date': datetime.datetime(2014, 12, 28, 20, 23, tzinfo=datetime.timezone.utc)}]",Shrijit Singh,10333131,shrijitsingh99@gmail.com,User,,73,,40,80

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8162615,pcl,PointCloudLibrary/pcl,C++,4602,9789,426,671,14449,571,1,144,"[{'id': 475960461, 'number': 4371, 'closed': None, 'created': datetime.datetime(2020, 8, 30, 20, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2837, 'deletions': 225, 'state': 'open'}, {'id': 475958647, 'number': 4370, 'closed': None, 'created': datetime.datetime(2020, 8, 30, 20, 20, 33, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2686, 'deletions': 169, 'state': 'open'}, {'id': 475956873, 'number': 4369, 'closed': None, 'created': datetime.datetime(2020, 8, 30, 20, 5, 54, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2344, 'deletions': 6, 'state': 'open'}, {'id': 474654053, 'number': 4361, 'closed': None, 'created': datetime.datetime(2020, 8, 27, 12, 4, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 424, 'deletions': 0, 'state': 'open'}, {'id': 474326036, 'number': 4359, 'closed': None, 'created': datetime.datetime(2020, 8, 26, 23, 26, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 253, 'deletions': 0, 'state': 'open'}, {'id': 473532512, 'number': 4355, 'closed': datetime.datetime(2020, 8, 26, 8, 20, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 22, 9, 45, tzinfo=datetime.timezone.utc), 'time_taken': 36621.0, 'time_delta': '10:10:21', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 473137681, 'number': 4352, 'closed': None, 'created': datetime.datetime(2020, 8, 25, 11, 32, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 177, 'deletions': 0, 'state': 'open'}, {'id': 464561840, 'number': 4312, 'closed': datetime.datetime(2020, 8, 7, 11, 52, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 11, 51, 54, tzinfo=datetime.timezone.utc), 'time_taken': 15.0, 'time_delta': '0:00:15', 'additions': 931, 'deletions': 1, 'state': 'closed'}, {'id': 455530232, 'number': 4287, 'closed': None, 'created': datetime.datetime(2020, 7, 23, 7, 34, 16, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 68, 'deletions': 196, 'state': 'open'}, {'id': 451881772, 'number': 4281, 'closed': None, 'created': datetime.datetime(2020, 7, 18, 11, 34, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 82, 'deletions': 448, 'state': 'open'}, {'id': 451681183, 'number': 4279, 'closed': None, 'created': datetime.datetime(2020, 7, 18, 4, 2, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 76, 'deletions': 357, 'state': 'open'}, {'id': 448054989, 'number': 4269, 'closed': datetime.datetime(2020, 7, 13, 14, 56, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 6, 6, tzinfo=datetime.timezone.utc), 'time_taken': 31843.0, 'time_delta': '8:50:43', 'additions': 12, 'deletions': 35, 'state': 'closed'}, {'id': 448012939, 'number': 4268, 'closed': None, 'created': datetime.datetime(2020, 7, 13, 3, 28, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 192, 'deletions': 294, 'state': 'open'}, {'id': 447966054, 'number': 4267, 'closed': datetime.datetime(2020, 7, 12, 22, 57, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 22, 57, 20, tzinfo=datetime.timezone.utc), 'time_taken': 14.0, 'time_delta': '0:00:14', 'additions': 973, 'deletions': 39, 'state': 'closed'}, {'id': 442736387, 'number': 4236, 'closed': datetime.datetime(2020, 7, 1, 14, 26, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 14, 25, 42, tzinfo=datetime.timezone.utc), 'time_taken': 39.0, 'time_delta': '0:00:39', 'additions': 994, 'deletions': 4, 'state': 'closed'}, {'id': 439923662, 'number': 4229, 'closed': datetime.datetime(2020, 7, 19, 5, 50, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 10, 17, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2057588.0, 'time_delta': '23 days, 19:33:08', 'additions': 45, 'deletions': 85, 'state': 'closed'}, {'id': 438840689, 'number': 4222, 'closed': datetime.datetime(2020, 6, 23, 21, 50, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 21, 49, 34, tzinfo=datetime.timezone.utc), 'time_taken': 27.0, 'time_delta': '0:00:27', 'additions': 994, 'deletions': 4, 'state': 'closed'}, {'id': 429165569, 'number': 4170, 'closed': datetime.datetime(2020, 6, 7, 5, 6, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 12, 13, 41, tzinfo=datetime.timezone.utc), 'time_taken': 60798.0, 'time_delta': '16:53:18', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 422439267, 'number': 4143, 'closed': datetime.datetime(2021, 8, 12, 8, 22, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 16, 47, 31, tzinfo=datetime.timezone.utc), 'time_taken': 38417681.0, 'time_delta': '444 days, 15:34:41', 'additions': 25, 'deletions': 8, 'state': 'closed'}, {'id': 422400357, 'number': 4142, 'closed': datetime.datetime(2021, 8, 28, 14, 46, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 11, 36, 43, tzinfo=datetime.timezone.utc), 'time_taken': 39841779.0, 'time_delta': '461 days, 3:09:39', 'additions': 18, 'deletions': 20, 'state': 'closed'}, {'id': 421077181, 'number': 4131, 'closed': datetime.datetime(2020, 5, 29, 19, 41, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 23, 57, 33, tzinfo=datetime.timezone.utc), 'time_taken': 762266.0, 'time_delta': '8 days, 19:44:26', 'additions': 238, 'deletions': 210, 'state': 'closed'}, {'id': 421073811, 'number': 4130, 'closed': datetime.datetime(2020, 5, 22, 10, 0, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 23, 44, 3, tzinfo=datetime.timezone.utc), 'time_taken': 123410.0, 'time_delta': '1 day, 10:16:50', 'additions': 28, 'deletions': 4, 'state': 'closed'}, {'id': 418337722, 'number': 4101, 'closed': datetime.datetime(2020, 5, 30, 11, 27, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 2, 16, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1329050.0, 'time_delta': '15 days, 9:10:50', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 412203633, 'number': 4006, 'closed': datetime.datetime(2020, 5, 21, 8, 6, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 1, 16, 39, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1697213.0, 'time_delta': '19 days, 15:26:53', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 412178467, 'number': 4004, 'closed': None, 'created': datetime.datetime(2020, 5, 1, 15, 35, 29, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 38, 'deletions': 0, 'state': 'open'}, {'id': 409097580, 'number': 3980, 'closed': datetime.datetime(2020, 5, 21, 8, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 26, 14, 57, 4, tzinfo=datetime.timezone.utc), 'time_taken': 2135516.0, 'time_delta': '24 days, 17:11:56', 'additions': 14, 'deletions': 4, 'state': 'closed'}, {'id': 407357838, 'number': 3962, 'closed': datetime.datetime(2021, 3, 29, 2, 12, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 15, 15, 30, tzinfo=datetime.timezone.utc), 'time_taken': 29415422.0, 'time_delta': '340 days, 10:57:02', 'additions': 0, 'deletions': 6, 'state': 'closed'}, {'id': 404756727, 'number': 3934, 'closed': datetime.datetime(2020, 5, 21, 8, 22, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 21, 34, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2976438.0, 'time_delta': '34 days, 10:47:18', 'additions': 103, 'deletions': 476, 'state': 'closed'}, {'id': 400558580, 'number': 3886, 'closed': datetime.datetime(2020, 4, 11, 8, 12, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 7, 23, 58, 38, tzinfo=datetime.timezone.utc), 'time_taken': 288809.0, 'time_delta': '3 days, 8:13:29', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 399997307, 'number': 3873, 'closed': datetime.datetime(2020, 4, 7, 21, 56, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 7, 2, 13, 26, tzinfo=datetime.timezone.utc), 'time_taken': 70992.0, 'time_delta': '19:43:12', 'additions': 19, 'deletions': 14, 'state': 'closed'}, {'id': 399303431, 'number': 3867, 'closed': datetime.datetime(2020, 5, 24, 2, 36, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 5, 23, 35, 12, tzinfo=datetime.timezone.utc), 'time_taken': 4158054.0, 'time_delta': '48 days, 3:00:54', 'additions': 213, 'deletions': 167, 'state': 'closed'}, {'id': 398920730, 'number': 3865, 'closed': None, 'created': datetime.datetime(2020, 4, 5, 6, 0, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 139, 'deletions': 36, 'state': 'open'}, {'id': 393717255, 'number': 3802, 'closed': datetime.datetime(2020, 3, 26, 8, 35, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 17, 14, 10, tzinfo=datetime.timezone.utc), 'time_taken': 55301.0, 'time_delta': '15:21:41', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 393422683, 'number': 3795, 'closed': datetime.datetime(2020, 4, 6, 7, 13, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 7, 14, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1036768.0, 'time_delta': '11 days, 23:59:28', 'additions': 86, 'deletions': 64, 'state': 'closed'}, {'id': 393416163, 'number': 3794, 'closed': datetime.datetime(2020, 3, 25, 6, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 6, 53, 53, tzinfo=datetime.timezone.utc), 'time_taken': 187.0, 'time_delta': '0:03:07', 'additions': 961, 'deletions': 789, 'state': 'closed'}, {'id': 392909953, 'number': 3789, 'closed': datetime.datetime(2020, 3, 24, 12, 22, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 10, 39, 14, tzinfo=datetime.timezone.utc), 'time_taken': 6191.0, 'time_delta': '1:43:11', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 392416092, 'number': 3783, 'closed': datetime.datetime(2020, 3, 25, 16, 10, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 23, 14, 21, 24, tzinfo=datetime.timezone.utc), 'time_taken': 179348.0, 'time_delta': '2 days, 1:49:08', 'additions': 30, 'deletions': 53, 'state': 'closed'}, {'id': 387676046, 'number': 3745, 'closed': datetime.datetime(2020, 3, 23, 12, 29, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 9, 28, 28, tzinfo=datetime.timezone.utc), 'time_taken': 874879.0, 'time_delta': '10 days, 3:01:19', 'additions': 20, 'deletions': 24, 'state': 'closed'}, {'id': 386913047, 'number': 3731, 'closed': None, 'created': datetime.datetime(2020, 3, 11, 20, 47, 59, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 63, 'deletions': 22, 'state': 'open'}, {'id': 381094132, 'number': 3693, 'closed': datetime.datetime(2020, 2, 28, 8, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 21, 57, 58, tzinfo=datetime.timezone.utc), 'time_taken': 38914.0, 'time_delta': '10:48:34', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 381077797, 'number': 3692, 'closed': datetime.datetime(2020, 3, 3, 14, 41, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 21, 17, 18, tzinfo=datetime.timezone.utc), 'time_taken': 408229.0, 'time_delta': '4 days, 17:23:49', 'additions': 123, 'deletions': 140, 'state': 'closed'}, {'id': 380690409, 'number': 3685, 'closed': datetime.datetime(2020, 2, 27, 12, 51, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 7, 53, 49, tzinfo=datetime.timezone.utc), 'time_taken': 17860.0, 'time_delta': '4:57:40', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 380688313, 'number': 3684, 'closed': datetime.datetime(2020, 2, 27, 7, 49, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 7, 48, 9, tzinfo=datetime.timezone.utc), 'time_taken': 82.0, 'time_delta': '0:01:22', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 380638620, 'number': 3683, 'closed': datetime.datetime(2020, 2, 28, 8, 37, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 5, 0, 49, tzinfo=datetime.timezone.utc), 'time_taken': 99408.0, 'time_delta': '1 day, 3:36:48', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 379817290, 'number': 3677, 'closed': datetime.datetime(2020, 2, 26, 16, 36, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 21, 40, 32, tzinfo=datetime.timezone.utc), 'time_taken': 68183.0, 'time_delta': '18:56:23', 'additions': 106, 'deletions': 23, 'state': 'closed'}, {'id': 379772196, 'number': 3676, 'closed': datetime.datetime(2020, 2, 27, 11, 48, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 25, 19, 58, 43, tzinfo=datetime.timezone.utc), 'time_taken': 143373.0, 'time_delta': '1 day, 15:49:33', 'additions': 19, 'deletions': 21, 'state': 'closed'}, {'id': 378777300, 'number': 3665, 'closed': datetime.datetime(2020, 3, 3, 8, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 1, 18, 4, tzinfo=datetime.timezone.utc), 'time_taken': 717965.0, 'time_delta': '8 days, 7:26:05', 'additions': 95, 'deletions': 133, 'state': 'closed'}]"
