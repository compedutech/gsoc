pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
457576751,"A new gate_sequence_product, Simulator and Results Class","**Checklist**
Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR.

- [x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md)
- [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).
You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically
- [x] Please add tests to cover your changes if applicable.
- [x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.

**Description**
There are three major parts to this PR (more or less interlinked): 

- Adds `Simulator` class to abstract away circuit run functionality. This enables future contributors to add to exact simulation (and potentially other ways of simulation) easily. It also has a `step` function which allows to go over the circuit step-by-step which could enable interesting visualisations.
- Adds `Result` class as a wrapper around results obtained from circuit simulations. 
- Adds a more efficient mode to `gate_sequence_product` function which allows for faster pre-computation of unitaries.

**Changelog**
Added `Simulator`, `Result` class 
Added new mode to `gate_sequence_product`, `QubitCircuit.propagators`
",True,1331,https://api.github.com/repos/qutip/qutip/pulls/1331,https://github.com/qutip/qutip/pull/1331,closed,1093,119,6,17,5,23,1,0,[{'name': 'qip'}],2020-07-28 06:00:56+00:00,2020-09-30 15:24:39+00:00,5563423.0,"64 days, 9:23:43","[{'comment_id': 475191288, 'comment_body': '```suggestion\r\n        Check if list of unitaries needs to be expanded to full dimension.\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 8, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192043, 'comment_body': ""The name `_gate_sequence_product_expanded` and `_gate_sequence_product` are a bit confusing to me (maybe it's only me?). It sounds like `_gate_sequence_product_expanded` will expand the unitaries, but it is the other way around, isn't it?\r\n\r\nWhat about\r\n\r\n- `_gate_sequence_product_expanded` -> `_gate_sequence_product`\r\n\r\n- `_gate_sequence_product` -> `_gate_sequence_product_with_expansion`"", 'comment_created': datetime.datetime(2020, 8, 23, 8, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192642, 'comment_body': ""Could you add some more inline docs? Probably also an example in docstrings? It's a bit hard to get what is going on here."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192686, 'comment_body': 'Public or private?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475193002, 'comment_body': '```suggestion\r\ndef _gate_sequence_product(U_list, ind_list, tot_num_qubits=None):\r\n```\r\nMaybe this is a better name. Also in the code.\r\n\r\nBTW, it seems like this parameter is not used by any other function.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475193479, 'comment_body': ""Please don't forget to update the documentation. In particular, I'm very interested in when will this be beneficial compared to the old one. In which case will this be more efficient?"", 'comment_created': datetime.datetime(2020, 8, 23, 9, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475194304, 'comment_body': 'It\'s better to use the full name `density matrix` here.\r\n```suggestion\r\n            raise TypeError(""State is not a ket or a density matrix."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 9, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475194323, 'comment_body': 'Same', 'comment_created': datetime.datetime(2020, 8, 23, 9, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475195518, 'comment_body': 'Maybe it is enough to have `get_probability/get_probabilities`?. The class is called `Result`. `get_result` sounds like we return everything, but we may add more attributes later.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475195776, 'comment_body': 'I suggest adding an attribute `final_state`, to be consistent with the result of `mesolve`. In addition to `state` or replace `state`. Or maybe we can directly use that class instead of building a new one??', 'comment_created': datetime.datetime(2020, 8, 23, 9, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196380, 'comment_body': 'Doc missing', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196402, 'comment_body': 'Doc', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196569, 'comment_body': 'Looks like `U_list` is a replacement of `qc`? Do we still need `qc` if `U_list` is given? \r\n\r\nBy reading the use scenario in this file, I feel like there is no need to have a parameter called `U_list`, we can support `qc` be both `QubitCircuit` or a list of unitaries. Did I miss anything?', 'comment_created': datetime.datetime(2020, 8, 23, 9, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475197081, 'comment_body': '`initialize` should be enough I think?', 'comment_created': datetime.datetime(2020, 8, 23, 9, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475197153, 'comment_body': 'Doc out-of-date', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475198685, 'comment_body': '```suggestion\r\n        mode: Boolean, optional\r\n            Specify if input state (and therefore computation) is in\r\n            state-vector mode or in density matrix mode. If in the density matrix\r\n            mode and given a state vector input, the output is\r\n            a density matrix.\r\n\r\n```\r\n\r\nI find the doc not clear enough here. It would be better to highlight more the difference between the ket and dm mode. It is not just two representation. In ket mode, measurement is a projective measurement, where the result is recorded. While in dm mode, measurement operation works like `measure and then forget the results`. This should be made clearer.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475203236, 'comment_body': 'Could also add here (or inline doc with \\#) that how we divide the circuit? E.g. at each classical control or measurement. ', 'comment_created': datetime.datetime(2020, 8, 23, 10, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 482645529, 'comment_body': 'Yep, thanks for spotting this, do not need this parameter anymore', 'comment_created': datetime.datetime(2020, 9, 3, 1, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 482645664, 'comment_body': 'I have a few comments on this in the documentation. ', 'comment_created': datetime.datetime(2020, 9, 3, 1, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 482646133, 'comment_body': ""I kept `U_list` argument in the optional case where a user calculated it for some reason before hand. Should we remove it? Maybe not needed anymore. Don't think it goes well with the other options anymore. "", 'comment_created': datetime.datetime(2020, 9, 3, 1, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 483141954, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 9, 3, 17, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 484383092, 'comment_body': 'I guess this is only for local test', 'comment_created': datetime.datetime(2020, 9, 7, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 484456664, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 9, 7, 14, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}]","[{'commit_sha': '95dbb78a130f2b51f89e3afec8b154e86520b051', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cbce15d2f93328bda362c9f66dc5fae87cea2a7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '121b40d0e83d1a2f598ce06c59d9cc049ea0410c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '749afba6e54393d442a788680cc891acc0fee9a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '86225d2531b429702827e2fd3a0d44d0dbf61b69', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '300aec46f7a135d74e76e042f853b7b27974a9a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3bea32cdd56a5dff2d4e7366619bc4baf4284015', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b766058d29a2cbee879b3cf47280b729a07686c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '481bea5dbfb99642b4f348c478d0a1987b189131', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '088bc8f28b942afd583bd1ab2e22f2b5d53a23c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4c4001d8e71fd7500be4b5dc4d44d66f8355c666', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7576ba35d20c738de0e93f41c69142beffec62a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3ccdd7dcb28d1a50ddc8f02aa7241671d424393a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a941b072a9a79bf0ddaa56904d185379847c3d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ace2fd05b8ac3ae053aa53c35f4db8350a6e1ec7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e66d4b727b0c2200fd131556c57505d73d41de18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '573901fb4b1b25739c4848abd9ecf0492c194ea1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0
457576751,"A new gate_sequence_product, Simulator and Results Class","**Checklist**
Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR.

- [x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md)
- [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).
You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically
- [x] Please add tests to cover your changes if applicable.
- [x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.

**Description**
There are three major parts to this PR (more or less interlinked): 

- Adds `Simulator` class to abstract away circuit run functionality. This enables future contributors to add to exact simulation (and potentially other ways of simulation) easily. It also has a `step` function which allows to go over the circuit step-by-step which could enable interesting visualisations.
- Adds `Result` class as a wrapper around results obtained from circuit simulations. 
- Adds a more efficient mode to `gate_sequence_product` function which allows for faster pre-computation of unitaries.

**Changelog**
Added `Simulator`, `Result` class 
Added new mode to `gate_sequence_product`, `QubitCircuit.propagators`
",True,1331,https://api.github.com/repos/qutip/qutip/pulls/1331,https://github.com/qutip/qutip/pull/1331,closed,1093,119,6,17,5,23,1,0,[{'name': 'qip'}],2020-07-28 06:00:56+00:00,2020-09-30 15:24:39+00:00,5563423.0,"64 days, 9:23:43","[{'comment_id': 475191288, 'comment_body': '```suggestion\r\n        Check if list of unitaries needs to be expanded to full dimension.\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 8, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192043, 'comment_body': ""The name `_gate_sequence_product_expanded` and `_gate_sequence_product` are a bit confusing to me (maybe it's only me?). It sounds like `_gate_sequence_product_expanded` will expand the unitaries, but it is the other way around, isn't it?\r\n\r\nWhat about\r\n\r\n- `_gate_sequence_product_expanded` -> `_gate_sequence_product`\r\n\r\n- `_gate_sequence_product` -> `_gate_sequence_product_with_expansion`"", 'comment_created': datetime.datetime(2020, 8, 23, 8, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192642, 'comment_body': ""Could you add some more inline docs? Probably also an example in docstrings? It's a bit hard to get what is going on here."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192686, 'comment_body': 'Public or private?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475193002, 'comment_body': '```suggestion\r\ndef _gate_sequence_product(U_list, ind_list, tot_num_qubits=None):\r\n```\r\nMaybe this is a better name. Also in the code.\r\n\r\nBTW, it seems like this parameter is not used by any other function.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475193479, 'comment_body': ""Please don't forget to update the documentation. In particular, I'm very interested in when will this be beneficial compared to the old one. In which case will this be more efficient?"", 'comment_created': datetime.datetime(2020, 8, 23, 9, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475194304, 'comment_body': 'It\'s better to use the full name `density matrix` here.\r\n```suggestion\r\n            raise TypeError(""State is not a ket or a density matrix."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 9, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475194323, 'comment_body': 'Same', 'comment_created': datetime.datetime(2020, 8, 23, 9, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475195518, 'comment_body': 'Maybe it is enough to have `get_probability/get_probabilities`?. The class is called `Result`. `get_result` sounds like we return everything, but we may add more attributes later.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475195776, 'comment_body': 'I suggest adding an attribute `final_state`, to be consistent with the result of `mesolve`. In addition to `state` or replace `state`. Or maybe we can directly use that class instead of building a new one??', 'comment_created': datetime.datetime(2020, 8, 23, 9, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196380, 'comment_body': 'Doc missing', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196402, 'comment_body': 'Doc', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196569, 'comment_body': 'Looks like `U_list` is a replacement of `qc`? Do we still need `qc` if `U_list` is given? \r\n\r\nBy reading the use scenario in this file, I feel like there is no need to have a parameter called `U_list`, we can support `qc` be both `QubitCircuit` or a list of unitaries. Did I miss anything?', 'comment_created': datetime.datetime(2020, 8, 23, 9, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475197081, 'comment_body': '`initialize` should be enough I think?', 'comment_created': datetime.datetime(2020, 8, 23, 9, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475197153, 'comment_body': 'Doc out-of-date', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475198685, 'comment_body': '```suggestion\r\n        mode: Boolean, optional\r\n            Specify if input state (and therefore computation) is in\r\n            state-vector mode or in density matrix mode. If in the density matrix\r\n            mode and given a state vector input, the output is\r\n            a density matrix.\r\n\r\n```\r\n\r\nI find the doc not clear enough here. It would be better to highlight more the difference between the ket and dm mode. It is not just two representation. In ket mode, measurement is a projective measurement, where the result is recorded. While in dm mode, measurement operation works like `measure and then forget the results`. This should be made clearer.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475203236, 'comment_body': 'Could also add here (or inline doc with \\#) that how we divide the circuit? E.g. at each classical control or measurement. ', 'comment_created': datetime.datetime(2020, 8, 23, 10, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 482645529, 'comment_body': 'Yep, thanks for spotting this, do not need this parameter anymore', 'comment_created': datetime.datetime(2020, 9, 3, 1, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 482645664, 'comment_body': 'I have a few comments on this in the documentation. ', 'comment_created': datetime.datetime(2020, 9, 3, 1, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 482646133, 'comment_body': ""I kept `U_list` argument in the optional case where a user calculated it for some reason before hand. Should we remove it? Maybe not needed anymore. Don't think it goes well with the other options anymore. "", 'comment_created': datetime.datetime(2020, 9, 3, 1, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 483141954, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 9, 3, 17, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 484383092, 'comment_body': 'I guess this is only for local test', 'comment_created': datetime.datetime(2020, 9, 7, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 484456664, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 9, 7, 14, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}]","[{'commit_sha': '95dbb78a130f2b51f89e3afec8b154e86520b051', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cbce15d2f93328bda362c9f66dc5fae87cea2a7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '121b40d0e83d1a2f598ce06c59d9cc049ea0410c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '749afba6e54393d442a788680cc891acc0fee9a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '86225d2531b429702827e2fd3a0d44d0dbf61b69', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '300aec46f7a135d74e76e042f853b7b27974a9a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3bea32cdd56a5dff2d4e7366619bc4baf4284015', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b766058d29a2cbee879b3cf47280b729a07686c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '481bea5dbfb99642b4f348c478d0a1987b189131', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '088bc8f28b942afd583bd1ab2e22f2b5d53a23c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4c4001d8e71fd7500be4b5dc4d44d66f8355c666', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7576ba35d20c738de0e93f41c69142beffec62a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3ccdd7dcb28d1a50ddc8f02aa7241671d424393a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a941b072a9a79bf0ddaa56904d185379847c3d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ace2fd05b8ac3ae053aa53c35f4db8350a6e1ec7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e66d4b727b0c2200fd131556c57505d73d41de18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '573901fb4b1b25739c4848abd9ecf0492c194ea1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0
457576751,"A new gate_sequence_product, Simulator and Results Class","**Checklist**
Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR.

- [x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md)
- [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).
You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically
- [x] Please add tests to cover your changes if applicable.
- [x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.

**Description**
There are three major parts to this PR (more or less interlinked): 

- Adds `Simulator` class to abstract away circuit run functionality. This enables future contributors to add to exact simulation (and potentially other ways of simulation) easily. It also has a `step` function which allows to go over the circuit step-by-step which could enable interesting visualisations.
- Adds `Result` class as a wrapper around results obtained from circuit simulations. 
- Adds a more efficient mode to `gate_sequence_product` function which allows for faster pre-computation of unitaries.

**Changelog**
Added `Simulator`, `Result` class 
Added new mode to `gate_sequence_product`, `QubitCircuit.propagators`
",True,1331,https://api.github.com/repos/qutip/qutip/pulls/1331,https://github.com/qutip/qutip/pull/1331,closed,1093,119,6,17,5,23,1,0,[{'name': 'qip'}],2020-07-28 06:00:56+00:00,2020-09-30 15:24:39+00:00,5563423.0,"64 days, 9:23:43","[{'comment_id': 475191288, 'comment_body': '```suggestion\r\n        Check if list of unitaries needs to be expanded to full dimension.\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 8, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192043, 'comment_body': ""The name `_gate_sequence_product_expanded` and `_gate_sequence_product` are a bit confusing to me (maybe it's only me?). It sounds like `_gate_sequence_product_expanded` will expand the unitaries, but it is the other way around, isn't it?\r\n\r\nWhat about\r\n\r\n- `_gate_sequence_product_expanded` -> `_gate_sequence_product`\r\n\r\n- `_gate_sequence_product` -> `_gate_sequence_product_with_expansion`"", 'comment_created': datetime.datetime(2020, 8, 23, 8, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192642, 'comment_body': ""Could you add some more inline docs? Probably also an example in docstrings? It's a bit hard to get what is going on here."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475192686, 'comment_body': 'Public or private?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475193002, 'comment_body': '```suggestion\r\ndef _gate_sequence_product(U_list, ind_list, tot_num_qubits=None):\r\n```\r\nMaybe this is a better name. Also in the code.\r\n\r\nBTW, it seems like this parameter is not used by any other function.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475193479, 'comment_body': ""Please don't forget to update the documentation. In particular, I'm very interested in when will this be beneficial compared to the old one. In which case will this be more efficient?"", 'comment_created': datetime.datetime(2020, 8, 23, 9, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475194304, 'comment_body': 'It\'s better to use the full name `density matrix` here.\r\n```suggestion\r\n            raise TypeError(""State is not a ket or a density matrix."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 23, 9, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475194323, 'comment_body': 'Same', 'comment_created': datetime.datetime(2020, 8, 23, 9, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475195518, 'comment_body': 'Maybe it is enough to have `get_probability/get_probabilities`?. The class is called `Result`. `get_result` sounds like we return everything, but we may add more attributes later.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475195776, 'comment_body': 'I suggest adding an attribute `final_state`, to be consistent with the result of `mesolve`. In addition to `state` or replace `state`. Or maybe we can directly use that class instead of building a new one??', 'comment_created': datetime.datetime(2020, 8, 23, 9, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196380, 'comment_body': 'Doc missing', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196402, 'comment_body': 'Doc', 'comment_created': datetime.datetime(2020, 8, 23, 9, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475196569, 'comment_body': 'Looks like `U_list` is a replacement of `qc`? Do we still need `qc` if `U_list` is given? \r\n\r\nBy reading the use scenario in this file, I feel like there is no need to have a parameter called `U_list`, we can support `qc` be both `QubitCircuit` or a list of unitaries. Did I miss anything?', 'comment_created': datetime.datetime(2020, 8, 23, 9, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475197081, 'comment_body': '`initialize` should be enough I think?', 'comment_created': datetime.datetime(2020, 8, 23, 9, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475197153, 'comment_body': 'Doc out-of-date', 'comment_created': datetime.datetime(2020, 8, 23, 9, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475198685, 'comment_body': '```suggestion\r\n        mode: Boolean, optional\r\n            Specify if input state (and therefore computation) is in\r\n            state-vector mode or in density matrix mode. If in the density matrix\r\n            mode and given a state vector input, the output is\r\n            a density matrix.\r\n\r\n```\r\n\r\nI find the doc not clear enough here. It would be better to highlight more the difference between the ket and dm mode. It is not just two representation. In ket mode, measurement is a projective measurement, where the result is recorded. While in dm mode, measurement operation works like `measure and then forget the results`. This should be made clearer.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475203236, 'comment_body': 'Could also add here (or inline doc with \\#) that how we divide the circuit? E.g. at each classical control or measurement. ', 'comment_created': datetime.datetime(2020, 8, 23, 10, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 482645529, 'comment_body': 'Yep, thanks for spotting this, do not need this parameter anymore', 'comment_created': datetime.datetime(2020, 9, 3, 1, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 482645664, 'comment_body': 'I have a few comments on this in the documentation. ', 'comment_created': datetime.datetime(2020, 9, 3, 1, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 482646133, 'comment_body': ""I kept `U_list` argument in the optional case where a user calculated it for some reason before hand. Should we remove it? Maybe not needed anymore. Don't think it goes well with the other options anymore. "", 'comment_created': datetime.datetime(2020, 9, 3, 1, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 483141954, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 9, 3, 17, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 484383092, 'comment_body': 'I guess this is only for local test', 'comment_created': datetime.datetime(2020, 9, 7, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 484456664, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 9, 7, 14, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}]","[{'commit_sha': '95dbb78a130f2b51f89e3afec8b154e86520b051', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cbce15d2f93328bda362c9f66dc5fae87cea2a7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '121b40d0e83d1a2f598ce06c59d9cc049ea0410c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '749afba6e54393d442a788680cc891acc0fee9a5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '86225d2531b429702827e2fd3a0d44d0dbf61b69', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '300aec46f7a135d74e76e042f853b7b27974a9a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3bea32cdd56a5dff2d4e7366619bc4baf4284015', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5b766058d29a2cbee879b3cf47280b729a07686c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '481bea5dbfb99642b4f348c478d0a1987b189131', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '088bc8f28b942afd583bd1ab2e22f2b5d53a23c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4c4001d8e71fd7500be4b5dc4d44d66f8355c666', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7576ba35d20c738de0e93f41c69142beffec62a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3ccdd7dcb28d1a50ddc8f02aa7241671d424393a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a941b072a9a79bf0ddaa56904d185379847c3d9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ace2fd05b8ac3ae053aa53c35f4db8350a6e1ec7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e66d4b727b0c2200fd131556c57505d73d41de18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '573901fb4b1b25739c4848abd9ecf0492c194ea1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0
435594053,OpenQASM read capability,"**Description**
The OpenQASM 2.0 standard is described [here](https://github.com/Qiskit/openqasm/blob/master/spec/qasm2.rst). 
The purpose of this PR is to create a full implementation of a OpenQASM parser that reads 
a .qasm circuit into a QubitCircuit. This function lives in qutip/qip/qasm.py. There are a number of 
internal functions that enable this conversion but the only api-exposed function is supposed to be 
`read_qasm` which takes in a .qasm file and returns a fully-formed QubitCircuit object. Currently, the heft of the work is done with processing user-defined gates and adding them to the circuit (as well as measurements, but they need to have #1274 on measurements merged before I can enable that functionality). I still need to add features pertaining to initialization of qubits as well as classical control. 



**Related issues or PRs**
There was a related PR #1140 which purportedly worked with OpenQASM 1.0 but this one deviates from it largely while adding additional features as well as the ability to process user-defined gates and a comparatively robust parser. 
**Changelog**
Added read_qasm function to read .qasm files into QubitCircuit",True,1291,https://api.github.com/repos/qutip/qutip/pulls/1291,https://github.com/qutip/qutip/pull/1291,closed,1082,45,13,20,18,16,1,0,[{'name': 'qip'}],2020-06-17 04:24:02+00:00,2020-07-21 07:15:09+00:00,2947867.0,"34 days, 2:51:07","[{'comment_id': 442163966, 'comment_body': 'I prefer the QasmGate style name', 'comment_created': datetime.datetime(2020, 6, 18, 11, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ajgpitch', 'type': 'User'}, {'comment_id': 442164355, 'comment_body': 'maybe `token_cmds` is a better abbr.', 'comment_created': datetime.datetime(2020, 6, 18, 11, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ajgpitch', 'type': 'User'}, {'comment_id': 442164651, 'comment_body': '`QasmProcessor`', 'comment_created': datetime.datetime(2020, 6, 18, 11, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ajgpitch', 'type': 'User'}, {'comment_id': 442166526, 'comment_body': ""Comments should be read like a command to the code that follows. I don't where I read this, but I am sure it's in [pep8](https://www.python.org/dev/peps/pep-0008/#comments) somewhere.\r\n(I want to do that thing that @nathanshammah showed us where we make suggested changes. Cant see the option)\r\n`Process the register tokens: map them to the QubitCircuit index of the respective registers.`\r\n"", 'comment_created': datetime.datetime(2020, 6, 18, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ajgpitch', 'type': 'User'}, {'comment_id': 442168513, 'comment_body': 'as previous', 'comment_created': datetime.datetime(2020, 6, 18, 11, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ajgpitch', 'type': 'User'}, {'comment_id': 452375488, 'comment_body': ""It's a little easier to read what's going on if you spell this like\r\n```python\r\npath = Path(__file__).parent / 'qasm_files' / filename\r\nwith pytest.raises(error) as exc_info:\r\n    read_qasm(path)\r\nassert error_message in str(exc_info.value)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 17, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 452884223, 'comment_body': ""Better make it clear that here we mean the classical registers.\r\n\r\nHowever, I'm wondering if a warning here is too much here. If I understand correctly from our last meeting, the result is still correct. It's just not with the same register name as in QASM. If this is the case, it's enough to give an explanation in the doc. Users who know what they are doing can play in the way they want.\r\n\r\nIt would also be helpful to show in the doc how to define QASM file to circumvent this problem. (E.g. define all classical registers as binary bits `creg c[1]`)"", 'comment_created': datetime.datetime(2020, 7, 10, 14, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 452885177, 'comment_body': 'If `read_qasm` is the only public API that we want to be accessible to normal users, specify the public API at the beginning with `__all__= [""read_qasm""]`. Only those specified functions/classes will be imported by `from qutip.qip.qasm import *`.', 'comment_created': datetime.datetime(2020, 7, 10, 14, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 452890915, 'comment_body': '```suggestion\r\n        "".inc"" extension, especially to specify gate definitions in terms of\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 14, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 452893751, 'comment_body': '`list of int` should be good enough I guess? Not sure if one use the plural here ;)', 'comment_created': datetime.datetime(2020, 7, 10, 14, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 452894872, 'comment_body': 'What does reset means here? Does this reinitialize the qubit to 0 state?', 'comment_created': datetime.datetime(2020, 7, 10, 14, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 453043661, 'comment_body': 'Yep, that is what reset is meant to do? I did not think to accommodate it since it seems like a scarcely used feature and did not merit a separate kind of processing with QuTiP. What do you think? Maybe a warning is appropriate here? Or an error?', 'comment_created': datetime.datetime(2020, 7, 10, 19, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 453044842, 'comment_body': ""The same is also true for qubit registers! The only difference is that in that case you can't control on multiple qubits explicitly (without it being implicit in a gate). "", 'comment_created': datetime.datetime(2020, 7, 10, 19, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 453174565, 'comment_body': 'I see. that makes sense. Is the converted circuit still the correct one in terms of the final result?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 453174902, 'comment_body': 'If `reset` is not supported, i.e. qasm circuit with `reset` will be wrong in QuTiP, it deserves a `NotImplementedError`.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 453407170, 'comment_body': 'Yes, that is the case ! ', 'comment_created': datetime.datetime(2020, 7, 13, 2, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}]","[{'commit_sha': '500ca8f5dd4a8eea1288ff44b957deb36875d3ea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6227843abfdcce7237e8a3fbdd72eedeae926b6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ca4aeae52bc5374ef5ace4dc3d15671da26a10d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '40d7a580b9cc0c5d6ec8513047a6201b3e54d427', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dcace9e8a0b39b05f4438ea59cfa6124b23f52d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3cb98ef87e4a3199b7486bb5ba3410ae4c1233f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83dd7a25460f321b84505be11bced5f36def5482', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2c9c5a5ee086ed290ae19fc20a97e6508f057ffd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc9a060bd436ce52d753a3731ecbe49cfabf55bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '18cfd12374bbb41552995cf9ce160f8d52a0676f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f2178d5d2278ceb31e27e2e4ddd4ff52a4dd874', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '11638957a0d9843b0004144785b1d91d5def72db', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4dbbd8e7c7d7854b2f13bb0898d882486c016e27', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4528a7a683be1e9fbeb8a772a9b18027227562a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e53ba99748a23ad70675e6bef9de450e3c532bdb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5fc72e0eb25c93213122fa3e9ea8a05db5575f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b11c945cdb9b4730b41c57cf71500b3520d1e0be', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c64f031c623458c656796734666a81c5e868c137', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6465361b0a688ba70c26684d55023f008cc8267d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4255f638b86530edc7e68f2c172b55328278e0ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0
447369069,OpenQASM Output Functionality,"**Checklist**
Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR.

- [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md)
- [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).
You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically
- [ ] Please add tests to cover your changes if applicable.
- [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.

**Description**
This PR is supposed to address the OpenQASM output functionality. It introduces the class `QasmOutput` and the primary functions:

- `print_qasm(qc)` : prints the QASM output of `QubitCircuit`.
- `save_qasm(qc, file_loc)` : saves the QASM output of `QubitCircuit` to a file.

Two [OpenQASM](https://github.com/Qiskit/openqasm) features are missing from this PR that might need to be addressed in a future PR, the possibility of exporting gates with classical control and exporting QuTiP's user-defined gates. 

**Related issues or PRs**
This is a companion to PR #1291 and includes the code from it.

**Changelog**
Added QASM output functions.",True,1318,https://api.github.com/repos/qutip/qutip/pulls/1318,https://github.com/qutip/qutip/pull/1318,closed,1479,72,13,36,11,22,1,0,[{'name': 'qip'}],2020-07-10 10:47:54+00:00,2020-08-01 06:54:55+00:00,1886821.0,"21 days, 20:07:01","[{'comment_id': 457963428, 'comment_body': '```suggestion\r\n    Tokenize (break into several parts a string of) a single line of QASM code.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457963628, 'comment_body': '```suggestion\r\n        The tokens (parts) corresponding to the qasm line taken as input.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457963737, 'comment_body': '```suggestion\r\n        One line of QASM code to be broken into ""tokens"".\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457964007, 'comment_body': '```suggestion\r\n    Tokenize QASM code for processing, i.e. break it into several parts.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457964121, 'comment_body': '```suggestion\r\n        Lines of QASM code.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457964283, 'comment_body': '```suggestion\r\n        List of tokens corresponding to each QASM line taken as input.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457964513, 'comment_body': '```suggestion\r\n    tokens for the arguments and registers separately.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457965344, 'comment_body': '```suggestion\r\n        Process register tokens: map them to the :class:`.QubitCircuit` indices\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457965830, 'comment_body': '```suggestion\r\n            Token list corresponding to qubit/cbit register invocations.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457966855, 'comment_body': '```suggestion\r\n    a :class:`.QubitCircuit` and state inputs as specified in the\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457967146, 'comment_body': '```suggestion\r\n        Returns a :class:`.QubitCircuit` object specified in the QASM file.\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457967466, 'comment_body': '```suggestion\r\n        qc: :class:`.QubitCircuit`\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457967589, 'comment_body': '```suggestion\r\n    qc: :class:`.QubitCircuit`\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457967650, 'comment_body': '```suggestion\r\n    qc: :class:`.QubitCircuit`\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 457967730, 'comment_body': '```suggestion\r\n    qc: :class:`.QubitCircuit`\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 9, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nathanshammah', 'type': 'User'}, {'comment_id': 459630406, 'comment_body': 'There is no function called `write_qasm`.', 'comment_created': datetime.datetime(2020, 7, 23, 18, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 459634090, 'comment_body': 'Will it be possible to move these private methods to qasm.py instead of leaving them here in the circuit class? This class is quite heavily loaded. I see that all of these methods take the `qasm_out` object. So a better design could be making them methods of `QasmOutput` class that take a `QubitCircuit` as input, right?', 'comment_created': datetime.datetime(2020, 7, 23, 18, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 459636785, 'comment_body': 'Very nice!', 'comment_created': datetime.datetime(2020, 7, 23, 18, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 459637793, 'comment_body': 'The name `str_qasm` is a little bit confusing to me. Probably `circuit_to_qasm_str`? Your take.', 'comment_created': datetime.datetime(2020, 7, 23, 18, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 459641410, 'comment_body': 'Sounds good! ', 'comment_created': datetime.datetime(2020, 7, 23, 18, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 459643335, 'comment_body': 'Hmm, I mostly just wanted to have the `_qasm_out` function in the circuit.py file since that makes the code quite modular (you can just call the same function for each circuit ""object""). I could definitely move these functions to the qasm.py file but then I\'d probably also have to move the `_qasm_out` function there which I\'m not in complete favor of. What do you think? \r\n\r\nFor what it\'s worth, this will look a lot less clunky after we separate `Gate`, `Measurement` and `QubitCircuit` classes ! ', 'comment_created': datetime.datetime(2020, 7, 23, 18, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 459732834, 'comment_body': '>I mostly just wanted to have the _qasm_out function in the circuit.py file since that makes the code quite modular (you can just call the same function for each circuit ""object"").\r\n\r\nI agree with this, having a `qasm_out`-like method for Gate and Measurement is indeed a neat solution. \r\n\r\nWhat I\'m thinking is more about ""what is the class QasmOutput meant to do?"". In particular, where should we put all definitions of `qutip_gate to qasm_gate`. At the moment, `_GATE_NAME_TO_QASM_NAME ` is located in `qasm.py`, while other definitions are in `_qasm_defns` and `_qasm_defn_resolve` are inside `Gate`. Personally I find putting them at the same place a better solution.\r\n\r\n> For what it\'s worth, this will look a lot less clunky after we separate Gate, Measurement and QubitCircuit classes !\r\n\r\nIndeed!', 'comment_created': datetime.datetime(2020, 7, 23, 21, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}]","[{'commit_sha': '500ca8f5dd4a8eea1288ff44b957deb36875d3ea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6227843abfdcce7237e8a3fbdd72eedeae926b6a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ca4aeae52bc5374ef5ace4dc3d15671da26a10d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '40d7a580b9cc0c5d6ec8513047a6201b3e54d427', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dcace9e8a0b39b05f4438ea59cfa6124b23f52d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3cb98ef87e4a3199b7486bb5ba3410ae4c1233f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83dd7a25460f321b84505be11bced5f36def5482', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2c9c5a5ee086ed290ae19fc20a97e6508f057ffd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc9a060bd436ce52d753a3731ecbe49cfabf55bb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '18cfd12374bbb41552995cf9ce160f8d52a0676f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f2178d5d2278ceb31e27e2e4ddd4ff52a4dd874', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '11638957a0d9843b0004144785b1d91d5def72db', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4dbbd8e7c7d7854b2f13bb0898d882486c016e27', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4528a7a683be1e9fbeb8a772a9b18027227562a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e53ba99748a23ad70675e6bef9de450e3c532bdb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5fc72e0eb25c93213122fa3e9ea8a05db5575f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b11c945cdb9b4730b41c57cf71500b3520d1e0be', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c64f031c623458c656796734666a81c5e868c137', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6465361b0a688ba70c26684d55023f008cc8267d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4255f638b86530edc7e68f2c172b55328278e0ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '74d1153c50897e83a72b59357896e7c94c3c6fd5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c4e4ff27401eec0455ff353d8cd6dcaac58987f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '43b4068d7075ab77d68c1843b5526ce32267d8e8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d2f8412f59198c2cac45bab9264bc494d4d2d9d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '57a5070c6e70d2e75b82ab40bc3de08231a2c162', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '976d9a71dd7b44cf58a4996d4046d67b75324c00', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '00cc864c514b8ceb9dcce0e5ac805c2bdd12145b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '52bc2b7f5381e368a99b93d3c8710cd8af8f070e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '11afb58b9ee09c0acacd59c46da6087bd0b24fe8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2563d6354e9aeb9172f475e3dea4443e1f6c7bf9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a742d1da63ee8b5e89c1c86577149c181afe1e24', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c0a1e7a8d7120ff4575356d0441f498af650d64', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ec8c7b95e05a9c1270448c15b44dcb655ba38c04', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9a9ab9e48536ec82d6731755b1f73f9cc00936fd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fe5f526ea16419c4e97fe62a9f4e8b2032489348', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fe5bbb3c1a0777f0cfbc56a06a8a280ba0be6730', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0
444990313,qasm notebook,"As per issue #110, this PR is meant to add examples for QASM import/export. I also plan to add some examples of the particularities of dealing with QISKIT and CIRQ and how they interface with the QASM format. Right now, it only contains reading from QASM files. ",True,111,https://api.github.com/repos/qutip/qutip-notebooks/pulls/111,https://github.com/qutip/qutip-notebooks/pull/111,closed,520,0,5,3,7,6,0,0,[],2020-07-06 20:39:37+00:00,2021-04-02 10:05:06+00:00,23289929.0,"269 days, 13:25:29","[{'comment_id': 464598141, 'comment_body': '<p>Suggestion: you could add</p><p> </p><ul><li>For this demonstration, we already saved a few qasm circuit examples in the directory <code>qasm_files</code>. You can find more examples at [<a href=""https://github.com/Qiskit/openqasm"" target=""_blank"">OpenQASM repository</a> Let\'s start off by reading one of the example:</li><li>Add a section name: QASM Import</li></ul>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/qutip/qutip-notebooks/pull/111/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'3\'/>', 'comment_created': datetime.datetime(2020, 8, 3, 18, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 464598143, 'comment_body': '<blockquote>To read it, we use the <code>read_qasm</code> function with the arguments being the file path,</blockquote><p>Maybe its better to use ""To import it""? The term ""read"" might be confused with read a string from file<code>qasm_file.read()</code>  </p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/qutip/qutip-notebooks/pull/111/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'5\'/>', 'comment_created': datetime.datetime(2020, 8, 3, 18, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 464598146, 'comment_body': ""<p>I'm a bit confused by this sentence</p><blockquote>&nbsp;QASM skips the include command for the file qelib1.inc and converts all custom gates specified in them directly into QuTiP gates.</blockquote><p>If we skip <code>qelib1.inc</code>, how can we convert the gates specified in this header file?</p><p> </p><blockquote>It is recommended to use the <code>read_qasm</code> function in this mode.  </blockquote><p>Could you elaborate a bit more here? Do we support other mode? Or is there API functions other than <code>read_qasm</code> that we would like the users to know?</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/qutip/qutip-notebooks/pull/111/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='7'/>"", 'comment_created': datetime.datetime(2020, 8, 3, 18, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 464598149, 'comment_body': ""<p>There is a warning message here, explain that it is expected?</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/qutip/qutip-notebooks/pull/111/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='20'/>"", 'comment_created': datetime.datetime(2020, 8, 3, 18, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 464598151, 'comment_body': '<blockquote> QuTiP also produces custom gate definitions for gates not provided in the <code>qelib1.inc</code> ""header"" file.</blockquote><p>Do we support exporting QuTiP customized gates or not? Could you make it a bit more clearer in the text?</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/qutip/qutip-notebooks/pull/111/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'23\'/>', 'comment_created': datetime.datetime(2020, 8, 3, 18, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 472981787, 'comment_body': "">Could you elaborate a bit more here? Do we support other mode? Or is there API functions \r\n  other than read_qasm that we would like the users to know?\r\n\r\nI am omitting this comment for now since the usage of alternative modes is not super useful. I will still keep the `mode` argument as it's potentially useful in the futue\r\n "", 'comment_created': datetime.datetime(2020, 8, 19, 12, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}]","[{'commit_sha': '97b2d80ed3aa518b7dee1f25b4430d933d9ef25b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c850137c23f99fd1234812a63c972b328657b546', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c0cd2605e7cdd20aaf2dc68193a4b9a090334bd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0
465242478,Changing ipython directives to doctest/plot directives.,"This pull request addresses #115, it changes almost all ipython directives to doctest directives. ",True,120,https://api.github.com/repos/qutip/qutip-doc/pulls/120,https://github.com/qutip/qutip-doc/pull/120,closed,3237,1540,34,12,10,28,0,0,[],2020-08-10 02:21:52+00:00,2021-02-18 08:40:22+00:00,16611510.0,"192 days, 6:18:30","[{'comment_id': 470994820, 'comment_body': ""Here you change between testcode and doctest. And sometimes the code is given with `>>>` while sometimes not. I'm wondering if this might be confusing?"", 'comment_created': datetime.datetime(2020, 8, 15, 14, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 470995310, 'comment_body': 'Is there supposed to be a plot?', 'comment_created': datetime.datetime(2020, 8, 15, 14, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 470995482, 'comment_body': 'Is there a plot?', 'comment_created': datetime.datetime(2020, 8, 15, 14, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 470995882, 'comment_body': 'The rendered html also has `# doctest: +NORMALIZE_WHITESPACE`. Are they supposed to be rendered?', 'comment_created': datetime.datetime(2020, 8, 15, 14, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 470995946, 'comment_body': 'Are `# doctest: +SKIP` supposed to appear in the rendered HTML?', 'comment_created': datetime.datetime(2020, 8, 15, 14, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 470999732, 'comment_body': ""I'm not sure if we are expecting a plot here."", 'comment_created': datetime.datetime(2020, 8, 15, 15, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 470999740, 'comment_body': 'Same. ', 'comment_created': datetime.datetime(2020, 8, 15, 15, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 470999743, 'comment_body': 'Same. ', 'comment_created': datetime.datetime(2020, 8, 15, 15, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471000002, 'comment_body': '`guide/scripts/floquet_ex1.py` and `guide/scripts/floquet_ex2.py` are not rendered correctly on my machine. This is probably not your concern in this PR. Just write it here as a reminder.', 'comment_created': datetime.datetime(2020, 8, 15, 15, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471000893, 'comment_body': 'nofig', 'comment_created': datetime.datetime(2020, 8, 15, 15, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471000965, 'comment_body': 'nofig', 'comment_created': datetime.datetime(2020, 8, 15, 15, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471001121, 'comment_body': 'nofig', 'comment_created': datetime.datetime(2020, 8, 15, 15, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471003940, 'comment_body': 'same thing in this file with figure.', 'comment_created': datetime.datetime(2020, 8, 15, 15, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471005100, 'comment_body': ""- Just to verify if I understand it correctly, because it is random, this won't need a test, so your skipped it.\r\n- From the rendered version, it is a bit hard to distinguish which lines are inputs and which are outputs. Is there a way to make it clearer?"", 'comment_created': datetime.datetime(2020, 8, 15, 15, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471005591, 'comment_body': 'The rendering fails in this block.\r\n\r\n> \\# equivalent to es2.value(0.0)\r\n\r\nmaybe this need to be\r\n\r\n> \\>\\>\\> # equivalent to es2.value(0.0)\r\n', 'comment_created': datetime.datetime(2020, 8, 15, 15, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471008599, 'comment_body': 'In the case of testing a random generation, you could also try to set a random seed (in a hidden block) and then test it.', 'comment_created': datetime.datetime(2020, 8, 15, 16, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471009266, 'comment_body': 'Here and in the following lines, is there a way to distinguish input and output in the rendered version?', 'comment_created': datetime.datetime(2020, 8, 15, 16, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471010481, 'comment_body': ""> From the rendered version, it is a bit hard to distinguish which lines are inputs and which are outputs. Is there a way to make it clearer?\r\n\r\nMaybe I can try comments but not inherently.\r\n\r\n> Just to verify if I understand it correctly, because it is random, this won't need a test, so your skipped it.\r\n\r\nYeah, maybe I can try random seed. \r\n"", 'comment_created': datetime.datetime(2020, 8, 15, 16, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 471010671, 'comment_body': 'None of the code here is supposed to be executed, they could be replaced with something like code-blocks, I kept it like that cause it renders nicer. ', 'comment_created': datetime.datetime(2020, 8, 15, 16, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 471010934, 'comment_body': ""> * I noticed that some blocks using `plot` have no plots. In the rendered file they appear with a `source code` at the end, which belongs to the plot directive. It breaks the flow of the text a bit. Then I realized that you probably just want to keep the same namespace. If there is no easy way around it, just ignore those comments of mine.\r\n\r\n\r\n`plot` is used regardless of whether there needs to be a plot or not so that all the code is in the same namespace, we can work around it but don't need to, let me try to see if I can remove the `source code` thing at the end. \r\n\r\n\r\n> * If we are about to use `>>>` to indicate input code, it would be good to be consistent throughout the doc. I noticed that in `testcode` blocks you are writing the input without `>>>`. Is it possible also use `>>>`?\r\n\r\nIt isn't possible to use `>>>` with `testcode`. I decided between the `testcode` and `doctest` as when it was useful, i.e. `doctest` when multiple things are to be output in quick succession and `testcode` otherwise. \r\n\r\n> * We can also add these conventions to `directives.rst`, or other guides for doc contributors.\r\n\r\nI'll add some of these suggestions to the doc. \r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 15, 16, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 471011207, 'comment_body': ""Is it appearing for you? It is not supposed to appear and isn't for me right now. "", 'comment_created': datetime.datetime(2020, 8, 15, 16, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 471011244, 'comment_body': ""Is it appearing for you? It is not supposed to appear and isn't for me right now. "", 'comment_created': datetime.datetime(2020, 8, 15, 16, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 471011677, 'comment_body': ""Is it okay if none of the plot directives show the link to source code? There isn't an easy way to do it for individual blocks."", 'comment_created': datetime.datetime(2020, 8, 15, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 471023447, 'comment_body': ""> Is it okay if none of the plot directives show the link to source code? There isn't an easy way to do it for individual blocks.\r\n\r\nThat would be excellent. If that is too much work you can also leave it. I get now that you want to keep the namespace."", 'comment_created': datetime.datetime(2020, 8, 15, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471032384, 'comment_body': ""![image](https://user-images.githubusercontent.com/12125783/90321346-081dd180-df49-11ea-988d-18d58c7cc853.png)\r\n\r\nIt rendered like this for me. It is not for you? That's weird.\r\n\r\nBTW, why skipping the test here?"", 'comment_created': datetime.datetime(2020, 8, 15, 20, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 471654383, 'comment_body': 'Yeah, they arent rendering for me when in html mode atleast. \r\n\r\nI am skipping the tests because they seem to be glitching a bit (the plots are not being tested anyway given we dont have any meaninful output values for them). They will be ""tested"" when doing *make html* anyway. ', 'comment_created': datetime.datetime(2020, 8, 17, 17, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 471655054, 'comment_body': 'Do you mean it is incorrect on the website as well? \r\nhttp://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html\r\n\r\nRight now, for me, it is showing the same as there. ', 'comment_created': datetime.datetime(2020, 8, 17, 17, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 475188518, 'comment_body': '```suggestion\r\nThere are two Sphinx directives that can be used to write code examples\r\n```\r\nI only see ""two"" here?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}]","[{'commit_sha': 'ead4ae98dff691464e01e33d3aae3cd57190bf9b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '64cb4f0ebde0f99c4ff7aba95389f8394db6c3c3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7fdedccc4ee0d090c366aa3d5f71a108cf41a0f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c92f0a35f68e3db7e20e06024ea04ac67293820', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cd0536b615bb3b5dfc06a708f70608071abaf45c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '10d0200d4e670f066814d8829f0a3d07c79e27f0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a607db03eb1a36e528b8bdd1a619164bdf20558d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '712db1e9144603e861129cfc3b72baa0f28efa30', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28f2dcd5ee827c9193a8a3ee858f414863e9b7b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '825da7d960a9f9c052845d66b1b7892338f73cd1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '445bccae0fd8da9690893d282167035dee50d016', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b9a4ee03449ae8fc71852335cb95b9ce5ba95f0f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0
469755913,small changes to docstrings,"**Description**
This PR makes small changes to docstrings to work with doctest (and run doctests on docstrings when possible). This is corresponding with the [ipython_to_doctest](https://github.com/qutip/qutip-doc/pull/120) PR in qutip-doc. 


**Related issues or PRs**
https://github.com/qutip/qutip-doc/pull/120

**Changelog**
fix docstrings for doctest",True,1344,https://api.github.com/repos/qutip/qutip/pulls/1344,https://github.com/qutip/qutip/pull/1344,closed,88,92,11,1,5,3,0,0,[],2020-08-18 21:26:58+00:00,2020-09-07 12:05:23+00:00,1694305.0,"19 days, 14:38:25","[{'comment_id': 472966655, 'comment_body': '@BoxiLi here is an explicit example', 'comment_created': datetime.datetime(2020, 8, 19, 11, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}, {'comment_id': 475177309, 'comment_body': 'Just a question, why does the old one fail the test here?', 'comment_created': datetime.datetime(2020, 8, 23, 6, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BoxiLi', 'type': 'User'}, {'comment_id': 475341843, 'comment_body': ""I did not try it out individually, only changed it to make it more robust. I am also thinking how to avoid using numpy testing for these kinds of tests cause as numpy and qutip is updated a lot of doctest style tests might keep failing because they don't work in an approximate fashion. "", 'comment_created': datetime.datetime(2020, 8, 24, 4, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sarsid', 'type': 'User'}]","[{'commit_sha': '37ec44b98e10c1f0dc1392255472edb40eddd584', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sidhant Saraogi,13864125,,User,,15,,2,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
6136261,qutip,qutip/qutip,Python,631,1664,77,168,11094,139,19,20,"[{'id': 469755913, 'number': 1344, 'closed': datetime.datetime(2020, 9, 7, 12, 5, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 21, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1694305.0, 'time_delta': '19 days, 14:38:25', 'additions': 88, 'deletions': 92, 'state': 'closed'}, {'id': 457576751, 'number': 1331, 'closed': datetime.datetime(2020, 9, 30, 15, 24, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 6, 0, 56, tzinfo=datetime.timezone.utc), 'time_taken': 5563423.0, 'time_delta': '64 days, 9:23:43', 'additions': 1093, 'deletions': 119, 'state': 'closed'}, {'id': 447369069, 'number': 1318, 'closed': datetime.datetime(2020, 8, 1, 6, 54, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 10, 47, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1886821.0, 'time_delta': '21 days, 20:07:01', 'additions': 1479, 'deletions': 72, 'state': 'closed'}, {'id': 435594053, 'number': 1291, 'closed': datetime.datetime(2020, 7, 21, 7, 15, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 4, 24, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2947867.0, 'time_delta': '34 days, 2:51:07', 'additions': 1082, 'deletions': 45, 'state': 'closed'}, {'id': 422586244, 'number': 1274, 'closed': datetime.datetime(2020, 7, 2, 20, 39, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 7, 12, 15, tzinfo=datetime.timezone.utc), 'time_taken': 3331609.0, 'time_delta': '38 days, 13:26:49', 'additions': 1408, 'deletions': 509, 'state': 'closed'}, {'id': 392674958, 'number': 1211, 'closed': datetime.datetime(2020, 3, 27, 21, 3, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 23, 22, 38, 28, tzinfo=datetime.timezone.utc), 'time_taken': 339894.0, 'time_delta': '3 days, 22:24:54', 'additions': 14, 'deletions': 6, 'state': 'closed'}]"
12991714,qutip-notebooks,qutip/qutip-notebooks,Jupyter Notebook,235,234,29,30,485,24,2,7,"[{'id': 444990313, 'number': 111, 'closed': datetime.datetime(2021, 4, 2, 10, 5, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 20, 39, 37, tzinfo=datetime.timezone.utc), 'time_taken': 23289929.0, 'time_delta': '269 days, 13:25:29', 'additions': 520, 'deletions': 0, 'state': 'closed'}, {'id': 422587472, 'number': 108, 'closed': datetime.datetime(2021, 4, 2, 9, 37, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 7, 15, 34, tzinfo=datetime.timezone.utc), 'time_taken': 26965334.0, 'time_delta': '312 days, 2:22:14', 'additions': 820, 'deletions': 2295, 'state': 'closed'}]"
6153598,qutip-doc,qutip/qutip-doc,Python,58,36,15,32,1022,0,6,0,"[{'id': 465242478, 'number': 120, 'closed': datetime.datetime(2021, 2, 18, 8, 40, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 2, 21, 52, tzinfo=datetime.timezone.utc), 'time_taken': 16611510.0, 'time_delta': '192 days, 6:18:30', 'additions': 3237, 'deletions': 1540, 'state': 'closed'}, {'id': 429024257, 'number': 117, 'closed': datetime.datetime(2021, 2, 18, 8, 39, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 6, 51, 26, tzinfo=datetime.timezone.utc), 'time_taken': 22211261.0, 'time_delta': '257 days, 1:47:41', 'additions': 4222, 'deletions': 1832, 'state': 'closed'}]"
