pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
418559886,Add DNS SD discovery support,,True,24,https://api.github.com/repos/michaelrsweet/pappl/pulls/24,https://github.com/michaelrsweet/pappl/pull/24,closed,241,0,1,1,0,1,0,0,[],2020-05-15 12:20:26+00:00,2020-05-18 13:07:59+00:00,262053.0,"3 days, 0:47:33","[{'comment_id': 426610767, 'comment_body': ""Minor nit - keep preprocessor directives at the left margin. Some compilers don't like the indentation."", 'comment_created': datetime.datetime(2020, 5, 18, 13, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}]","[{'commit_sha': '319447928da5fa46929cd9fedb1d86e62c2e8ce0', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
433808716,Support papplDeviceOpen for socket URI,,True,29,https://api.github.com/repos/michaelrsweet/pappl/pulls/29,https://github.com/michaelrsweet/pappl/pull/29,closed,140,1,1,1,1,5,0,0,[],2020-06-12 17:41:46+00:00,2020-06-14 13:59:33+00:00,159467.0,"1 day, 20:17:47","[{'comment_id': 439620726, 'comment_body': 'Need the port number from the resolve as well.', 'comment_created': datetime.datetime(2020, 6, 12, 20, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 439621035, 'comment_body': 'Also save port number.', 'comment_created': datetime.datetime(2020, 6, 12, 20, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 439621135, 'comment_body': 'Also save port number.', 'comment_created': datetime.datetime(2020, 6, 12, 20, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 439623000, 'comment_body': 'You need to look at the device URI. Something of the form ""socket://blabla._pdl-datastream._tcp.domain"" needs to be resolved, while ""socket://hostname-or-ip"" or ""socket://hostname-or-ip:port"". In CUPS, looked for ""._tcp"" in the host field and did a resolve if I found that string.\r\n', 'comment_created': datetime.datetime(2020, 6, 12, 20, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 439828950, 'comment_body': 'Maybe look for ""._tcp."" to make sure you have a period after the ""._tcp""', 'comment_created': datetime.datetime(2020, 6, 14, 13, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}]","[{'commit_sha': '03ebb80d92e69b714a7af61b61fb45d94a60221a', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
435691403,Add SNMP support,,True,31,https://api.github.com/repos/michaelrsweet/pappl/pulls/31,https://github.com/michaelrsweet/pappl/pull/31,closed,413,3,1,1,5,20,0,0,[],2020-06-17 08:33:30+00:00,2020-06-23 12:20:00+00:00,531990.0,"6 days, 3:46:30","[{'comment_id': 441482157, 'comment_body': ""Can't use `alarm` for a variety of reasons. Make a dummy http_addrlist_t (with a single IPv4 address) and use httpAddrConnect instead.\r\n"", 'comment_created': datetime.datetime(2020, 6, 17, 11, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441482597, 'comment_body': 'Need to use device error callback.\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 11, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441484233, 'comment_body': ""Should use `_PAPPL_` prefix, and probably `_PAPPL_SNMP_QUERY_foo` to make the meaning clear (SNMP-specific, and what we're using the request ID for...)\r\n"", 'comment_created': datetime.datetime(2020, 6, 17, 11, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441485293, 'comment_body': ""This seems non-optimal to me to convert the OID array to a string and then compare strings? Wouldn't it be better to compare the int arrays?\r\n"", 'comment_created': datetime.datetime(2020, 6, 17, 11, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441486604, 'comment_body': ""I don't think we need the make and model here; the PAPPL device interface just deals with device URIs and 1284 IDs..."", 'comment_created': datetime.datetime(2020, 6, 17, 11, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441487789, 'comment_body': ""You really don't want to connect to the device when discovering - that will wake it up fully (as opposed to just waking up the NIC) and is something we want to avoid.\r\n\r\nIf you want to confirm port 9100 support, look for the corresponding Printer/Host/PWG MIB OIDs that tell you what ports the printer is listening on."", 'comment_created': datetime.datetime(2020, 6, 17, 11, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441488224, 'comment_body': 'Use a single ""last_count"" and ""timeout"" variable for both DNS-SD and SNMP.', 'comment_created': datetime.datetime(2020, 6, 17, 11, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441488412, 'comment_body': 'How about `snmp_sock` or something more descriptive?\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 11, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441488809, 'comment_body': 'Why do we care about the make and model here?\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 11, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441489241, 'comment_body': '`sysname` if you are using the SYSNAME property to populate this...', 'comment_created': datetime.datetime(2020, 6, 17, 11, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 441490367, 'comment_body': 'In keeping with the naming scheme we have going, maybe call this `_pappl_snmp_dev_s` and `_pappl_snmp_dev_t`?\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 11, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 442213726, 'comment_body': 'If you are going to allocate this, you need to free it. But you can just have this as a local variable instead with no allocation...\r\n', 'comment_created': datetime.datetime(2020, 6, 18, 13, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 442214293, 'comment_body': 'You can also do ""addrlist.addr = addr"" since C supports copying of structs in assignments (gets internally mapped to a memcpy equivalent...)\r\n', 'comment_created': datetime.datetime(2020, 6, 18, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 442230725, 'comment_body': ""I don't see this OID listed by any of my network printers...\r\n\r\n.1.3.6.1.4.1.2699.1.2.1.3.1.1.6.1.1 is the PWG Printer Port Monitor MIB version.\r\n\r\n.1.3.6.1.4.1.641.1.5.7.11.0 is a Lexmark-specific version.\r\n\r\n.1.3.6.1.4.1.10642.20.10.20.15.2.1.10.1 is a Zebra-specific version.\r\n\r\n.1.3.6.1.4.1.683.6.3.1.4.17.0 (SNMPv2-SMI::enterprises.683.6.3.1.4.17.0) appears to be a common OID for the TCP/IP raw port number with network label printers. See <http://oid-info.com/get/1.3.6.1.4.1.683.6.3.1.4.17>.\r\n"", 'comment_created': datetime.datetime(2020, 6, 18, 13, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 442232786, 'comment_body': 'These are specific to the device code, so the enum should be defined there...', 'comment_created': datetime.datetime(2020, 6, 18, 13, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 442808163, 'comment_body': 'Port number is an integer in the MIBs. I guess you could check the type and convert as needed, just in case, but you definitely need to handle integers...\r\n', 'comment_created': datetime.datetime(2020, 6, 19, 12, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 443760086, 'comment_body': 'Just noticed this - it should be the port number you discovered via SNMP, so pass it in as an argument here I guess?\r\n', 'comment_created': datetime.datetime(2020, 6, 22, 18, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 443760642, 'comment_body': ""Port number can be different than 9100. You don't want to use port 515 or 631, but anything else should be a valid raw socket port number."", 'comment_created': datetime.datetime(2020, 6, 22, 18, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 443760826, 'comment_body': 'Pass in the port number here...', 'comment_created': datetime.datetime(2020, 6, 22, 18, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 443761470, 'comment_body': 'Probably set the default port value to 9100 here...', 'comment_created': datetime.datetime(2020, 6, 22, 18, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}]","[{'commit_sha': 'c5a5ea112b6b1b3c220c715c946ff13f116a1cbc', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
422386883,Added papplMain feature,"`delete` and `default`(set) respond successful-ok but fail to make changes.
Also, to allow a server to run, the system needs the driver callback to exist so had to use testpappl/pwg driver to fix it.
@michaelrsweet Could you suggest changes, if any?",True,26,https://api.github.com/repos/michaelrsweet/pappl/pulls/26,https://github.com/michaelrsweet/pappl/pull/26,closed,2276,7,13,4,4,33,0,0,[],2020-05-24 09:27:39+00:00,2020-06-12 15:29:45+00:00,1663326.0,"19 days, 6:02:06","[{'comment_id': 429638698, 'comment_body': 'Good catch on this one!', 'comment_created': datetime.datetime(2020, 5, 24, 13, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429638824, 'comment_body': 'Except for the main ""pappl.h"" and ""pappl-private.h"" headers, header files should be named without the prefix because they\'ll get installed under a ""pappl"" directory.', 'comment_created': datetime.datetime(2020, 5, 24, 13, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429638912, 'comment_body': 'Should just be ""main.o"" or several ""main-FOO.o"" files. No need for a ""pappl-"" prefix.', 'comment_created': datetime.datetime(2020, 5, 24, 13, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429639013, 'comment_body': 'Not sure that all of the entry points need to be public API.', 'comment_created': datetime.datetime(2020, 5, 24, 13, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429639192, 'comment_body': 'Hmm, we need to think about how we want to configure the defaults for the server, probably passed to papplMain()...\r\n', 'comment_created': datetime.datetime(2020, 5, 24, 13, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429639509, 'comment_body': ""We need to do something different for that. The idea is that a printer application would initialize default settings and then run papplMain() (or maybe pass those defaults to papplMain), so we need to support arbitrary drivers from those printer applications. Plus, the testsuite directory isn't public API...\r\n"", 'comment_created': datetime.datetime(2020, 5, 24, 13, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429639767, 'comment_body': 'If ""pappl-main.h"" (renamed to ""main.h"") is a public header, it needs to include ""pappl.h"", not ""pappl-private.h"". Private definitions go in a header named ""xxx-private.h"" which will include ""xxx.h"" and potentially ""pappl-private.h"" or ""base-private.h"" as appropriate.\r\n\r\nSince ""<spawn.h>"" is needed for the internal implementation of the code and not for the public API, that include belongs either in the private header (common to all of the main functions) or in the source file that uses it.\r\n', 'comment_created': datetime.datetime(2020, 5, 24, 14, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429640080, 'comment_body': 'Library globals are generally a no-no. *if* you need this put is in a private header file, add ""extern"", prefix it with an underscore, use TitleCase naming (per the ""CONTRIBUTING.md"" file), annotate the visibility as private the the shared library, and place the descriptive comment *after* the definition for the code documentation tool. For example:\r\n\r\n```\r\nextern char *_papplPath _PAPPL_PRIVATE;  // Path to self\r\n```\r\n', 'comment_created': datetime.datetime(2020, 5, 24, 14, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429640248, 'comment_body': 'As I mentioned in a previous comment, I think the sub-commands should all be private API (starting with an underscore and using _PAPPL_PRIVATE for visibility). For example:\r\n\r\n```\r\nextern int _papplMainAdd(int num_options, cups_option_t *options) _PAPPL_PRIVATE;\r\n```\r\n', 'comment_created': datetime.datetime(2020, 5, 24, 14, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429640396, 'comment_body': 'These functions should be static to the source file using them or properly named as private API, e.g., ""_papplCopyStdin"", although I don\'t think copy_stdin needs to be available outside a single source file.', 'comment_created': datetime.datetime(2020, 5, 24, 14, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429640463, 'comment_body': 'This should be configurable, perhaps as an argument to the papplMain function.', 'comment_created': datetime.datetime(2020, 5, 24, 14, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429640559, 'comment_body': 'Again, thanks for catching this!\r\n', 'comment_created': datetime.datetime(2020, 5, 24, 14, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 429640861, 'comment_body': 'Make a separate test program that uses the PWG test driver with papplMain. testpappl will eventually include a lot more unit test functionality beyond what papplMain offers.', 'comment_created': datetime.datetime(2020, 5, 24, 14, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430336183, 'comment_body': ""I've been making obviously boolean arguments/return values use the `bool` type in PAPPL (a bit of an upgrade to the original LPrint code...)"", 'comment_created': datetime.datetime(2020, 5, 26, 11, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430337827, 'comment_body': ""(Global comment) We need to pass in `basename(argv[0])` for all of the error messages, so that the printer application's name is used as the prefix instead of 'papplMain'. I suggest updating the prototypes for all of the sub-commands to accept a program name that papplMain() gets from basename(argv[0])...\r\n"", 'comment_created': datetime.datetime(2020, 5, 26, 11, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430338840, 'comment_body': 'I think we should get the device ID from papplDeviceList instead of needing it from the command-line. An empty/NULL device ID string is also OK for papplPrinterCreate.\r\n', 'comment_created': datetime.datetime(2020, 5, 26, 11, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430340257, 'comment_body': ""This needs to be configurable, and the default shouldn't be a PAPPL copyright otherwise we'll get lots of support requests in the future for somebody else's printer application that uses PAPPL... (speaking from experience on past projects...)  "", 'comment_created': datetime.datetime(2020, 5, 26, 11, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430340409, 'comment_body': 'This also needs to be configurable.', 'comment_created': datetime.datetime(2020, 5, 26, 11, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430341024, 'comment_body': 'I don\'t think we need an option for this - it\'s useful for the test framework but a deployed printer application will likely have another way to ""reset"" the configuration with suitable warnings to the user.\r\n', 'comment_created': datetime.datetime(2020, 5, 26, 11, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430341672, 'comment_body': 'Maybe this can be passed to papplMain instead?\r\n', 'comment_created': datetime.datetime(2020, 5, 26, 11, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430344293, 'comment_body': ""Should have a way to pass in server options, software name/version (which gets copied to the system version number info), a callback for unknown sub-commands (to allow for expansion), a callback to show program usage, the name of the state file, and the driver callback data pointer. Maybe more - think about what you'd need when writing a printer application, what things you are likely to customize or would be unique to each printer application.\r\n "", 'comment_created': datetime.datetime(2020, 5, 26, 11, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430345163, 'comment_body': ""This needs to use a unique base name for each printer application, probably based on the printer application name (back to that `basename(argv[0])` I've been talking about...)\r\n"", 'comment_created': datetime.datetime(2020, 5, 26, 11, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 430345723, 'comment_body': 'This needs to be a callback, or perhaps this calls the callback to add application-specific sub-commands and options?\r\n', 'comment_created': datetime.datetime(2020, 5, 26, 11, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 433178964, 'comment_body': 'I think like the _papplMainActionTarget convention best, so can you update these to be consistent throughout?\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 11, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 433180613, 'comment_body': '""auto_start"" should be type `bool`.', 'comment_created': datetime.datetime(2020, 6, 1, 11, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 433182208, 'comment_body': ""This should already be defined in system.h, so it shouldn't be redefined here (particularly with a different prototype...)\r\n"", 'comment_created': datetime.datetime(2020, 6, 1, 11, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 433182956, 'comment_body': 'What\'s the difference between a usage callback and an error callback in this context?\r\n\r\nAlso, these need ""void *data"" arguments (at least) to provide a way for the caller to provide additional context.\r\n\r\nFinally, if they are specific to the papplMain interface, use ""pappl_main_foo_cb_t"".', 'comment_created': datetime.datetime(2020, 6, 1, 11, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 433185184, 'comment_body': 'There needs to be a better way to initialize the system object, when needed. Perhaps a callback for creating the system object and setting values prior to the papplSystemRun call? Something like:\r\n\r\n    typedef pappl_system_t *(*pappl_main_system_cb_t)(int num_options, cups_option_t *options, void *data);\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 11, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 433438323, 'comment_body': 'I just kept the two for expansion as you mentioned earlier.\r\nShould I remove one?', 'comment_created': datetime.datetime(2020, 6, 1, 19, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JaiLuthra1', 'type': 'User'}, {'comment_id': 436407758, 'comment_body': 'Not sure about the subcommand_cb argument - if it is meant to be a callback for other sub-commands then it needs to get the options, files, and sub-command in addition to a void * data parameter.\r\n\r\nAlso, you need to provide the data point in papplMain, otherwise how does papplMain know what value to send to the callbacks?\r\n', 'comment_created': datetime.datetime(2020, 6, 7, 22, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 436407824, 'comment_body': 'ShowJobs -> ListJobs or ListPrinters -> ShowPrinters for consistency.\r\n\r\nAlso, what about a ShowDevices command?\r\n', 'comment_created': datetime.datetime(2020, 6, 7, 22, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 436407856, 'comment_body': 'Probably this should be named _papplMainGetSetDefaultPrinter since it gets or sets the default printer, right?\r\n', 'comment_created': datetime.datetime(2020, 6, 7, 22, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 436910184, 'comment_body': 'Sub-commands should not use -- option prefix. Think git and other one-executable utilities.\r\n', 'comment_created': datetime.datetime(2020, 6, 8, 18, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}]","[{'commit_sha': '309527a0a3820bbe16dab76a93a6776fb4061291', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3029669dc6682a309916a0d8cc2c66231f55905a', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0eee1e9912a24b3281630024153955dfe21e8a6', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b97493bf1aa14a1a734770a78e9ea28b17517a', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
440374308,Add PCL driver,,True,32,https://api.github.com/repos/michaelrsweet/pappl/pulls/32,https://github.com/michaelrsweet/pappl/pull/32,closed,1056,1,3,2,3,32,0,0,[],2020-06-26 04:30:02+00:00,2020-07-05 19:49:12+00:00,832750.0,"9 days, 15:19:10","[{'comment_id': 446460631, 'comment_body': 'This should be a *separate* program from the testmainloop code...', 'comment_created': datetime.datetime(2020, 6, 27, 0, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446460788, 'comment_body': 'This should be separate from the testpappl program.', 'comment_created': datetime.datetime(2020, 6, 27, 0, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446461966, 'comment_body': 'The example should not include private headers. The point is to provide an example of how to use PAPPL to make a printer application using just the public API headers.', 'comment_created': datetime.datetime(2020, 6, 27, 0, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446641781, 'comment_body': 'Add black toner for grayscale printer.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446641972, 'comment_body': 'I would just make the version number ""1.0"" for this.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446642043, 'comment_body': ""This part isn't necessary for the example; we have it for the unit test in order to make sure the context pointer comes through..."", 'comment_created': datetime.datetime(2020, 6, 28, 12, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446643121, 'comment_body': 'I\'m thinking we want to encourage developers to store their printer application state in a more stable, per-user location... I hesitate to use something like ""~/.hp_printer_app.state"", since both Linux and macOS have different conventions to avoid polluting the home directory... I\'ll add papplSystemGet/SetStateDirectory functions (which will use the right default locations per platform/user) and then you can just pass the relative path (""hp_printer_app.state"") here and in the load call below to get the desired behavior without special-casing.\r\n', 'comment_created': datetime.datetime(2020, 6, 28, 12, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446643257, 'comment_body': 'I think you can just use the model names in the lists and not bother with the resolution/colorspace information.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446643379, 'comment_body': ""Not sure we need to log this here since PAPPL logs it already, and many of the values won't be set anyways...\r\n"", 'comment_created': datetime.datetime(2020, 6, 28, 12, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446643571, 'comment_body': 'As I mention in a later comment, don\'t use the ""-NNNdpi"" and ""-colorspace"" convention from the PWG unit tests. Just compare model names and add all of the applicable resolutions/colorspaces.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446643606, 'comment_body': 'The deskjet model does color, the rest are just grayscale...\r\n', 'comment_created': datetime.datetime(2020, 6, 28, 12, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446644277, 'comment_body': ""I don't think you've initialized the ready media size_name fields... Here I would default the paper trays to US Letter (north america) or A4 (everywhere else) and the envelope tray to #10 (north america) or DL (everywhere else). Seems like I should add API for getting these sorts of defaults:\r\n\r\n```\r\nextern pwg_media_t *papplGetDefaultDocumentSize(void);\r\nextern pwg_media_t *papplGetDefaultEnvelopeSize(void);\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 28, 12, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446644382, 'comment_body': 'Use `strlcpy(driver_data->make_and_model, ""bla bla bla"", sizeof(driver_data->make_and_model));` instead of snprintf.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446644404, 'comment_body': 'Use `strlcpy(driver_data->make_and_model, ""bla bla bla"", sizeof(driver_data->make_and_model));` instead of snprintf.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446644412, 'comment_body': 'Use `strlcpy(driver_data->make_and_model, ""bla bla bla"", sizeof(driver_data->make_and_model));` instead of snprintf.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446644675, 'comment_body': ""This will need some work - the B&W modes are fine since PAPPL will dither grayscale to B&W for you, but the DeskJet driver asks for grayscale or RGB so you'll need to do the dithering here...\r\n"", 'comment_created': datetime.datetime(2020, 6, 28, 12, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446644739, 'comment_body': ""You won't get CMY data from PAPPL..."", 'comment_created': datetime.datetime(2020, 6, 28, 12, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 446644947, 'comment_body': ""Probably don't want to do anything here, just include comments about what could be done.\r\n"", 'comment_created': datetime.datetime(2020, 6, 28, 12, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 447721090, 'comment_body': '@michaelrsweet I looked at dithering in rastertopclx filter from cups-filters. Would that work or we need something different?', 'comment_created': datetime.datetime(2020, 6, 30, 14, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JaiLuthra1', 'type': 'User'}, {'comment_id': 447743911, 'comment_body': 'Yes that would work, as would adapting the simple ordered dither matrix in the options structure.', 'comment_created': datetime.datetime(2020, 6, 30, 14, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449246915, 'comment_body': 'In this case, you need to dither each color component (RGB) separately to produce bitmaps for CMY, and then use an AND mask of the CMY bytes to create K (black). It would also be better to allocate the line buffer in the start page function and make it part of the pcl data struct.\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 20, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449247150, 'comment_body': 'This code can be removed - there is no 2-bit per component mode supported by PAPPL.', 'comment_created': datetime.datetime(2020, 7, 2, 20, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449680041, 'comment_body': '@michaelrsweet So, does this mean `pixels` has data of the form RGBRGBRGBRGB... and we need to separately dither the R,G and B parts into say, rline, bline and gline respectively and then create `line`, rather pcl->line using an AND mask of these?', 'comment_created': datetime.datetime(2020, 7, 3, 18, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JaiLuthra1', 'type': 'User'}, {'comment_id': 449694965, 'comment_body': 'Yes, RGBRGBRGB..., which can be directly dithered to CMY. Then the K plane can be generated by AND\'ing the CMY planes (and you then bitwise AND the CMY planes by the ones-complement of the K plane, e.g. ""CMY &= ~K"").\r\n', 'comment_created': datetime.datetime(2020, 7, 3, 20, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449788476, 'comment_body': 'OK, this actually needs to be CUPS_CSPACE_SRGB since that is the color space being advertised in the setup callback. Also, there is no need to have a separate set of CMYK buffers since planes[] contains the necessary buffers.', 'comment_created': datetime.datetime(2020, 7, 4, 16, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449788719, 'comment_body': 'cupsBytesPerLine is the source size. The output planes will be 1-bit per component, so you want to calculate the byte length of a line, e.g., `length = (header->cupsWidth + 7) / 8;`.\r\n', 'comment_created': datetime.datetime(2020, 7, 4, 17, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449788887, 'comment_body': 'and then use the same length here to calculate the offset.', 'comment_created': datetime.datetime(2020, 7, 4, 17, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449788920, 'comment_body': 'OK, so you need to dither for both RGB and 8-bit gray/black - only the 1-bit black raster data can be sent directly.', 'comment_created': datetime.datetime(2020, 7, 4, 17, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449788941, 'comment_body': 'You can dither all three colors in one loop....', 'comment_created': datetime.datetime(2020, 7, 4, 17, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449789174, 'comment_body': ""Minor optimization - save a copy of ~K in the 'byte' variable, then you can mask using the variable. Compilers aren't always smart enough to optimize away the `~*kptr`.\r\n\r\nAlso, if you dither all three colors above, then you can generate K in the same loop as well..."", 'comment_created': datetime.datetime(2020, 7, 4, 17, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449789261, 'comment_body': ""and you don't need to copy to a separate line buffer..."", 'comment_created': datetime.datetime(2020, 7, 4, 17, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 449789508, 'comment_body': 'This should be toner, not ink.', 'comment_created': datetime.datetime(2020, 7, 4, 17, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}]","[{'commit_sha': '16d8d95394d787c4411adab86374989bcb8e326f', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091f6d24e091eb0febe356e29505a4e40deaabfe', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
448092281,Add snapcraft.yaml and systemd support.,,True,1,https://api.github.com/repos/michaelrsweet/hp-printer-app/pulls/1,https://github.com/michaelrsweet/hp-printer-app/pull/1,closed,53,0,3,1,0,0,1,0,[{'name': 'enhancement'}],2020-07-13 08:30:02+00:00,2020-07-13 13:50:20+00:00,19218.0,5:20:18,[],"[{'commit_sha': 'caf803624fb0b91285d77765c9cf306d8c218f21', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
449534925,Add design and man page content,,True,2,https://api.github.com/repos/michaelrsweet/hp-printer-app/pulls/2,https://github.com/michaelrsweet/hp-printer-app/pull/2,closed,139,1,2,2,0,0,0,0,[],2020-07-15 14:52:04+00:00,2020-07-15 14:56:03+00:00,239.0,0:03:59,[],"[{'commit_sha': '47fbb6c50350b0cd424d448757041372fead2197', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8b81bc993e67f481b07a5215e4f86e8bb3f8e2', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
455575087,Add device auto-setup,,False,36,https://api.github.com/repos/michaelrsweet/pappl/pulls/36,https://github.com/michaelrsweet/pappl/pull/36,closed,432,14,11,2,20,13,2,1,"[{'name': 'enhancement'}, {'name': 'priority-low'}]",2020-07-23 09:10:50+00:00,2023-02-28 20:44:05+00:00,82121595.0,"950 days, 11:33:15","[{'comment_id': 459620526, 'comment_body': ""OK, forking like this won't work on all platforms... If you want to run this in the background, put it in a thread instead with pthread_create()."", 'comment_created': datetime.datetime(2020, 7, 23, 17, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 459621061, 'comment_body': '... and closing stdin/out/err is generally frowned upon since you might have random IO getting sent over whatever files end up on descriptors 0-2.', 'comment_created': datetime.datetime(2020, 7, 23, 17, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 459622962, 'comment_body': 'In general, printers should not be automatically deleted when they are ""off-line"" or not connected, since that is likely a temporary situation. Better to just set the printer state to ""stopped"" and add the ""offline"" state reason keyword. (both of these things would need to be added to PAPPL...)\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 17, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 459624590, 'comment_body': 'That won\'t work when printing from stdin... Maybe add an ""auto-add"" subcommand?', 'comment_created': datetime.datetime(2020, 7, 23, 17, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 459625264, 'comment_body': 'Maybe just ""pappl_ml_driver_cb_t""?\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 17, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 463969051, 'comment_body': 'OK, we can\'t extend Pause-Printer this way. The ""printer-state-reasons"" attribute is a status attribute, so there is no way to directly manipulate its values like this.\r\n\r\nI\'ll think about this some more, but for now let\'s not worry about setting the ""offline"" value. If we do, it should be an automatic thing where we call papplDeviceList to see if the USB printer is still there.', 'comment_created': datetime.datetime(2020, 8, 1, 14, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 463969081, 'comment_body': ""Same here, you can't extend Resume-Printer this way..."", 'comment_created': datetime.datetime(2020, 8, 1, 14, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 463969265, 'comment_body': 'I am really uncomfortable adding libusb-specific code here, particularly when it makes the auto-add command stick around forever...\r\n', 'comment_created': datetime.datetime(2020, 8, 1, 14, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 463969483, 'comment_body': ""Probably also a good idea to add the smi2699-device-command attribute - I'm surprised I hadn't added them already...\r\n"", 'comment_created': datetime.datetime(2020, 8, 1, 14, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 468057813, 'comment_body': ""Why don't you do a papplSystemFindPrinter with the device URI string in the device_autoadd_cb function instead? This makes the complexity O(n^2) and will be really slow with large numbers of printers and devices."", 'comment_created': datetime.datetime(2020, 8, 10, 17, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 468058367, 'comment_body': 'papplSystemFindPrinter supports lookup by device URI.', 'comment_created': datetime.datetime(2020, 8, 10, 17, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 468059002, 'comment_body': 'or if you sort the devices array by device URI, you can do a cupsArrayFind on the device URI (which is significantly faster).\r\n', 'comment_created': datetime.datetime(2020, 8, 10, 17, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}, {'comment_id': 468060182, 'comment_body': 'How do you stop monitoring?', 'comment_created': datetime.datetime(2020, 8, 10, 17, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michaelrsweet', 'type': 'User'}]","[{'commit_sha': '04abc46fa757cd257ae9e053685786d497b57a8d', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc6c6d6e05ca9c72792b6d4696600e7161ef416', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
469255973,Introduced rastertops filter function,,True,282,https://api.github.com/repos/OpenPrinting/cups-filters/pulls/282,https://github.com/OpenPrinting/cups-filters/pull/282,closed,544,461,4,1,2,1,0,0,[],2020-08-18 07:15:06+00:00,2020-08-19 07:57:45+00:00,88959.0,"1 day, 0:42:39","[{'comment_id': 472489266, 'comment_body': 'When logging, please start the log messages with ""rastertops: "", for example here do\r\n```\r\nif (doc->logfunc) doc->logfunc(doc->logdata, FILTER_LOGLEVEL_ERROR,\r\n￼\t\t  ""rastertops: out of memory\\n"");\r\n```\r\nThis makes it easier to see from which filter function a log message comes, especially when calling a chain of filters.\r\nSee also the other filter functions.\r\nCould you correct this with all log messages? Thanks.', 'comment_created': datetime.datetime(2020, 8, 18, 20, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tillkamppeter', 'type': 'User'}]","[{'commit_sha': 'aab0624d62cdbf8721dc1ea8d098f815fc763dde', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
471797083,Introduced rastertopdf filter function,,True,288,https://api.github.com/repos/OpenPrinting/cups-filters/pulls/288,https://github.com/OpenPrinting/cups-filters/pull/288,closed,481,355,7,1,2,4,0,0,[],2020-08-21 18:43:25+00:00,2020-08-22 06:53:59+00:00,43834.0,12:10:34,"[{'comment_id': 474977556, 'comment_body': 'The output format should not be determined by an environment variable within a filter function. Generally filter functions should not be controlled by environment variables.\r\nTo run filters in different modes, or generally to pass control parameters to them, the filter call scheme contains:\r\n```\r\n                  void *parameters);\r\n```\r\nSo for this filter the user supplies the output mode through the filter parameters.\r\nSimply do right in the beginning of the main function:\r\n```\r\nif (parameters)\r\n  outformat = (OutFormatType)(*parameters);\r\nelse\r\n  outformat = OUTPUT_FORMAT_PDF;\r\n```\r\nThe filter function has to be called with the parameters pointer pointing to a variable of the type `OutFormatType`, set to the desired output type. If it is set to an invalid type or if NULL is supplied as parameters pointer, the output typr defaults to standard PDF.\r\nIn the wrapper program to get a CUPS filter from this you call:\r\nIn `rastertopdf`\r\n```\r\noutformat = OUTPUT_FORMAT_PDF;\r\nret = filterCUPSWrapper(argc, argv, rastertopdf, &outformat, &JobCanceled);\r\n```\r\nIn `rastertopclm`\r\n```\r\noutformat = OUTPUT_FORMAT_PCLM;\r\nret = filterCUPSWrapper(argc, argv, rastertopdf, &outformat, &JobCanceled);\r\n```\r\nWrapper scripts are then not needed any more.', 'comment_created': datetime.datetime(2020, 8, 21, 21, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tillkamppeter', 'type': 'User'}, {'comment_id': 475052266, 'comment_body': '@tillkamppeter Done. Also the filterCupsWrapper needed a fix to pass the parameters. Done that too.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JaiLuthra1', 'type': 'User'}, {'comment_id': 475055802, 'comment_body': 'Now it is all correct. Thank you.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tillkamppeter', 'type': 'User'}, {'comment_id': 475055859, 'comment_body': 'And also thanks for fixing my little oversight in filterCupsWrapper().', 'comment_created': datetime.datetime(2020, 8, 22, 6, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tillkamppeter', 'type': 'User'}]","[{'commit_sha': '1b782558360f0b91f7af4c3baa07ebea8c6c3180', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36
471953938,Add cancel job function,#288.,True,289,https://api.github.com/repos/OpenPrinting/cups-filters/pulls/289,https://github.com/OpenPrinting/cups-filters/pull/289,closed,90,8,2,1,0,0,0,0,[],2020-08-22 07:43:57+00:00,2020-08-22 07:48:48+00:00,291.0,0:04:51,[],"[{'commit_sha': 'ee1600b727b6bab2e20219ed76d8f1c55107d3fb', 'committer_username': 'JaiLuthra1', 'committer_name': 'Jai Luthra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 9, 13, 17, 26, tzinfo=datetime.timezone.utc)}]",Jai Luthra,43112385,,User,,24,,16,36

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
243025018,pappl,michaelrsweet/pappl,C,48,306,25,18,1584,27,11,8,"[{'id': 455575087, 'number': 36, 'closed': datetime.datetime(2023, 2, 28, 20, 44, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 9, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 82121595.0, 'time_delta': '950 days, 11:33:15', 'additions': 432, 'deletions': 14, 'state': 'closed'}, {'id': 447250172, 'number': 34, 'closed': datetime.datetime(2020, 7, 13, 8, 35, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 6, 21, 12, tzinfo=datetime.timezone.utc), 'time_taken': 267281.0, 'time_delta': '3 days, 2:14:41', 'additions': 52, 'deletions': 1, 'state': 'closed'}, {'id': 440374308, 'number': 32, 'closed': datetime.datetime(2020, 7, 5, 19, 49, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 4, 30, 2, tzinfo=datetime.timezone.utc), 'time_taken': 832750.0, 'time_delta': '9 days, 15:19:10', 'additions': 1056, 'deletions': 1, 'state': 'closed'}, {'id': 435691403, 'number': 31, 'closed': datetime.datetime(2020, 6, 23, 12, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 8, 33, 30, tzinfo=datetime.timezone.utc), 'time_taken': 531990.0, 'time_delta': '6 days, 3:46:30', 'additions': 413, 'deletions': 3, 'state': 'closed'}, {'id': 433808716, 'number': 29, 'closed': datetime.datetime(2020, 6, 14, 13, 59, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 17, 41, 46, tzinfo=datetime.timezone.utc), 'time_taken': 159467.0, 'time_delta': '1 day, 20:17:47', 'additions': 140, 'deletions': 1, 'state': 'closed'}, {'id': 422386883, 'number': 26, 'closed': datetime.datetime(2020, 6, 12, 15, 29, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 9, 27, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1663326.0, 'time_delta': '19 days, 6:02:06', 'additions': 2276, 'deletions': 7, 'state': 'closed'}, {'id': 418559886, 'number': 24, 'closed': datetime.datetime(2020, 5, 18, 13, 7, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 12, 20, 26, tzinfo=datetime.timezone.utc), 'time_taken': 262053.0, 'time_delta': '3 days, 0:47:33', 'additions': 241, 'deletions': 0, 'state': 'closed'}]"
278658296,hp-printer-app,michaelrsweet/hp-printer-app,C,6,31,7,4,79,2,1,0,"[{'id': 449534925, 'number': 2, 'closed': datetime.datetime(2020, 7, 15, 14, 56, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 14, 52, 4, tzinfo=datetime.timezone.utc), 'time_taken': 239.0, 'time_delta': '0:03:59', 'additions': 139, 'deletions': 1, 'state': 'closed'}, {'id': 448092281, 'number': 1, 'closed': datetime.datetime(2020, 7, 13, 13, 50, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 8, 30, 2, tzinfo=datetime.timezone.utc), 'time_taken': 19218.0, 'time_delta': '5:20:18', 'additions': 53, 'deletions': 0, 'state': 'closed'}]"
105824994,cups-filters,OpenPrinting/cups-filters,C,124,153,24,67,9098,95,2,5,"[{'id': 485822300, 'number': 307, 'closed': datetime.datetime(2020, 9, 12, 9, 0, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 12, 8, 31, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1735.0, 'time_delta': '0:28:55', 'additions': 29, 'deletions': 49, 'state': 'closed'}, {'id': 475737258, 'number': 301, 'closed': datetime.datetime(2020, 8, 29, 7, 40, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 29, 7, 31, 55, tzinfo=datetime.timezone.utc), 'time_taken': 488.0, 'time_delta': '0:08:08', 'additions': 460, 'deletions': 552, 'state': 'closed'}, {'id': 471955352, 'number': 290, 'closed': datetime.datetime(2020, 8, 22, 8, 11, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 7, 59, 56, tzinfo=datetime.timezone.utc), 'time_taken': 718.0, 'time_delta': '0:11:58', 'additions': 43, 'deletions': 1, 'state': 'closed'}, {'id': 471953938, 'number': 289, 'closed': datetime.datetime(2020, 8, 22, 7, 48, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 7, 43, 57, tzinfo=datetime.timezone.utc), 'time_taken': 291.0, 'time_delta': '0:04:51', 'additions': 90, 'deletions': 8, 'state': 'closed'}, {'id': 471797083, 'number': 288, 'closed': datetime.datetime(2020, 8, 22, 6, 53, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 18, 43, 25, tzinfo=datetime.timezone.utc), 'time_taken': 43834.0, 'time_delta': '12:10:34', 'additions': 481, 'deletions': 355, 'state': 'closed'}, {'id': 469255973, 'number': 282, 'closed': datetime.datetime(2020, 8, 19, 7, 57, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 7, 15, 6, tzinfo=datetime.timezone.utc), 'time_taken': 88959.0, 'time_delta': '1 day, 0:42:39', 'additions': 544, 'deletions': 461, 'state': 'closed'}, {'id': 465043147, 'number': 274, 'closed': datetime.datetime(2020, 8, 8, 16, 35, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 15, 27, 54, tzinfo=datetime.timezone.utc), 'time_taken': 4057.0, 'time_delta': '1:07:37', 'additions': 1, 'deletions': 7, 'state': 'closed'}, {'id': 380230746, 'number': 211, 'closed': datetime.datetime(2020, 2, 26, 13, 32, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 12, 51, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2455.0, 'time_delta': '0:40:55', 'additions': 41, 'deletions': 35, 'state': 'closed'}, {'id': 378963522, 'number': 209, 'closed': datetime.datetime(2020, 2, 24, 12, 42, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 12, 26, 50, tzinfo=datetime.timezone.utc), 'time_taken': 943.0, 'time_delta': '0:15:43', 'additions': 74, 'deletions': 10, 'state': 'closed'}, {'id': 370784574, 'number': 200, 'closed': datetime.datetime(2020, 2, 4, 14, 0, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 4, 11, 26, 6, tzinfo=datetime.timezone.utc), 'time_taken': 9276.0, 'time_delta': '2:34:36', 'additions': 24, 'deletions': 4, 'state': 'closed'}, {'id': 369928743, 'number': 198, 'closed': datetime.datetime(2020, 2, 1, 22, 3, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 1, 19, 4, 45, tzinfo=datetime.timezone.utc), 'time_taken': 10712.0, 'time_delta': '2:58:32', 'additions': 67, 'deletions': 1, 'state': 'closed'}, {'id': 369052901, 'number': 197, 'closed': datetime.datetime(2020, 1, 30, 13, 14, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 30, 12, 42, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1920.0, 'time_delta': '0:32:00', 'additions': 32, 'deletions': 9, 'state': 'closed'}, {'id': 368163989, 'number': 196, 'closed': datetime.datetime(2020, 1, 29, 10, 15, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 18, 31, 34, tzinfo=datetime.timezone.utc), 'time_taken': 56641.0, 'time_delta': '15:44:01', 'additions': 69, 'deletions': 3, 'state': 'closed'}, {'id': 367377038, 'number': 195, 'closed': datetime.datetime(2020, 1, 27, 9, 20, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 8, 53, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1587.0, 'time_delta': '0:26:27', 'additions': 14, 'deletions': 2, 'state': 'closed'}, {'id': 364796264, 'number': 191, 'closed': datetime.datetime(2020, 1, 20, 13, 2, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 20, 11, 55, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4032.0, 'time_delta': '1:07:12', 'additions': 28, 'deletions': 9, 'state': 'closed'}, {'id': 363589877, 'number': 190, 'closed': datetime.datetime(2020, 1, 16, 12, 26, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 16, 11, 13, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4400.0, 'time_delta': '1:13:20', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 363075448, 'number': 189, 'closed': datetime.datetime(2020, 1, 15, 11, 32, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 10, 52, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2408.0, 'time_delta': '0:40:08', 'additions': 10, 'deletions': 0, 'state': 'closed'}]"
