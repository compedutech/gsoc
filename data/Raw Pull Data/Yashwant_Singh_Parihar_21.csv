pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
464586852,R bindings,"Hi @coatless @eddelbuettel @rcurtin , I think so we ready for our final step. :) 
This PR adds R bindings to mlpack. Here's an example usage from @rcurtin's julia bindings PR :smile::

```R
R version 4.0.2 (2020-06-22) -- ""Taking Off Again""
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(mlpack)
> x <- matrix(rexp(1000, rate=.1), nrow=10)
> pca(x, verbose=TRUE, new_dimensionality=5)
[INFO ] Performing PCA on dataset...
[INFO ] 72.0016% of variance retained (5 dimensions).
$output
            [,1]      [,2]        [,3]       [,4]       [,5]
 [1,] 111.667141 -11.65468  12.0705689  -8.472432  19.570236
 [2,] -20.948960  14.12169 -18.4961187  27.159226  -7.702679
 [3,] -61.017751 -81.38778 -17.9509279 -20.468096  16.520563
 [4,] -18.417396  29.84052  41.0875320  -8.433435  48.420332
 [5,]  18.359201 -28.26317  -0.3566754 -58.028579  -7.920467
 [6,] -39.205519  29.39570  75.0991434   1.771608  -7.283641
 [7,]  -5.009963  45.03162 -44.8698549  -1.245450  15.697076
 [8,]  -6.844800  32.32820 -62.9257916   7.394938   5.893395
 [9,]   4.144613  14.69571   4.6391430 -18.892109 -73.807397
[10,]  17.273434 -44.10780  11.7029811  79.214330  -9.387417
```
And another one with a model for same PR:

```R            _
R version 4.0.2 (2020-06-22) -- ""Taking Off Again""
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
> library(mlpack)
> library(data.table)
> x <- fread('./vc2.csv')
> y <- fread('./vc2_labels.txt')
> out1 <- perceptron(training=x, labels=y, verbose=T)
[INFO ] Training perceptron on dataset '6x207 matrix' with labels in '1x207 matrix' for a maximum of 1000 iterations.
> out2 <- perceptron(input_model=out1$output_model, verbose=T, test=x)
[INFO ] Using saved perceptron from PerceptronModel model at 0x55b51a9071f0.
[INFO ] Classifying dataset '6x207 matrix'.
> sum(out2$output == y)
[1] 129
```
In order to get documentation about a method, you can use:
```R
> ?mlpack::pca
```
or
```R
> library(mlpack)
> ?pca
```
Here is an example for the auto-generated R file:https://gist.github.com/4967c5939ba054bc868415d1e3e5c956

If you want to build these and run them, you can follow this procedure:

* Download R from https://cran.r-project.org and install all dependencies required by the bindings using:
```sh
R -e ""install.packages(c('Rcpp', 'RcppArmadillo', 'RcppEnsmallen', 'BH', 'roxygen2', 'testthat'))""
```
* Configure mlpack with `-DBUILD_R_BINDINGS=ON` (optionally `-DBUILD_MARKDOWN_BINDINGS=ON` if you want to see that output).
* Build with make R, and if you want make test will test the R bindings also.
* Once the R bindings are built, then you can run them by (from the build directory) `cd src/mlpack/bindings/R/mlpack/` && `R CMD INSTALL .` then you can do using mlpack and play with it.

Here we have also need to do some discussion before merging the PR.

- [x] Package name -- Currently we are building the package under the name `mlpack`, But I am maintaining this auto-generated package under the name [RcppMLPACK](https://github.com/Yashwants19/RcppMLPACK).
- [x] License -- RcppMLPACK was using `GPL>=2`, but mlpack is using `BSD 3-Clause`.
- [ ] Some of bindings name : `kmeans`, `det` creates a clash.
```sh
> library(mlpack)

Attaching package: ‘mlpack’

The following object is masked from ‘package:stats’:

    kmeans

The following object is masked from ‘package:base’:

    det

```

- [x] Test `nmf` bindings for R before merging this PR.
- [x] Required version of R for the package.
- [ ] Deployment of the package.
 I am not sure if I am missing something here, but we can update the task list if requires.
",True,2556,https://api.github.com/repos/mlpack/mlpack/pulls/2556,https://github.com/mlpack/mlpack/pull/2556,closed,8316,458,165,60,36,99,2,0,"[{'name': 'c: binding'}, {'name': 't: added feature'}]",2020-08-07 12:50:01+00:00,2020-08-30 15:11:41+00:00,1995700.0,"23 days, 2:21:40","[{'comment_id': 467173402, 'comment_body': '```suggestion\r\n  * Added bindings for _R_ during Google Summer of Code (#2556).\r\n  \r\n  * Added common striptype function for all bindings (#2556).\r\n  \r\n  * Refactored common utility function of bindings to bindings/util (#2556).\r\n  \r\n  * Renamed InformationGain to HoeffdingInformationGain in methods/hoeffding_trees/information_gain.hpp (#2556).\r\n  \r\n  * Added macro for changing stream of printing and warnings/errors (#2556).\r\n```\r\n\r\nI think these should be broken out more. There is a lot that was done inside of this PR.\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 17, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 467173954, 'comment_body': '```suggestion\r\n```\r\nI agree with @eddelbuettel. No need to remove `r-base-core`.', 'comment_created': datetime.datetime(2020, 8, 7, 17, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 467174762, 'comment_body': '```suggestion\r\n  } else if (is.data.frame(x)) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 17, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 467174924, 'comment_body': '```suggestion\r\n    y <- data.matrix(x) # requires R 4.0.0 for factor conversion.\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 17, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 467176803, 'comment_body': '```suggestion\r\n    stop(""Input must be either a `matrix` or `data.frame` not `"", class(x)[1], ""`."", call. = FALSE)\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 17, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 467182287, 'comment_body': 'I think we can directly use `$(SHLIB_OPENMP_CXXFLAGS)` without evoking the wraith of CRAN.\r\n\r\nWe may need to revisit this during the CRAN submission and add in a `Makevars.in` and `configure{.ac}` to determine if we should substitute in `@OPENMP_FLAG@`. \r\n\r\nhttps://github.com/RcppCore/RcppArmadillo/blob/eb0687bb6feb672151b1c1a42d79625a2ee027bb/src/Makevars.in#L3-L4', 'comment_created': datetime.datetime(2020, 8, 7, 17, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 467423329, 'comment_body': 'Thank you for splitting this. :+1: ', 'comment_created': datetime.datetime(2020, 8, 8, 9, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 467423460, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 8, 9, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469913583, 'comment_body': ""Looks weird. You are in  'if py == 3.7' block calling 3.5.  Should Python be versioned via a variable?"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 470268052, 'comment_body': ""Are you sure we should make this change to `PYTHON_EXECUTABLE`?  I remember there was a reason that it was set to `/opt/hostedtoolcache/...`, but I can't remember what the exact reason was.  I'm a bit afraid that changing it might cause the Python build to break (or be more likely to break); I remember a period a few months ago where we had to keep fixing it... :)"", 'comment_created': datetime.datetime(2020, 8, 13, 21, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470268992, 'comment_body': ""Agreed, maybe we should stick with the previous version?  That said, maybe there is a reason to switch, I'm just not sure about it though. :+1:"", 'comment_created': datetime.datetime(2020, 8, 13, 21, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470269641, 'comment_body': 'Ack, I hate to say it, but this particular `FindR` script is licensed under the LGPL, which is actually incompatible with the BSD license under which the rest of mlpack is licensed.  Is it possible that you could find a `FindR.cmake` script that is BSD-licensed (or equivalent), or maybe write one by hand?  Sorry for the inconvenience. :(', 'comment_created': datetime.datetime(2020, 8, 13, 21, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470270136, 'comment_body': 'I think I mentioned this in a previous PR, but thank you again for catching this!', 'comment_created': datetime.datetime(2020, 8, 13, 21, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470272755, 'comment_body': 'These ""post-configuration"" scripts that we have to include for each binding type are getting a bit long; I wonder if it makes sense to refactor them as macros in each `src/mlpack/bindings/<lang>/CMakeLists.txt` script and then call them here?  Maybe we can open an issue for it; let me know what you think.', 'comment_created': datetime.datetime(2020, 8, 13, 21, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470273709, 'comment_body': '```suggestion\r\n    stop(""Input must be either a `matrix` or `data.frame` not `"",\r\n        class(x)[1], ""`."", call. = FALSE)\r\n```\r\nThis wraps to fit the 80-character style guide. :)', 'comment_created': datetime.datetime(2020, 8, 13, 22, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470274363, 'comment_body': 'I know you did a bunch of work to make this function right, but hopefully soon we can remove it and replace with cereal (#2458). :)', 'comment_created': datetime.datetime(2020, 8, 13, 22, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470275133, 'comment_body': 'Ahhh, I never noticed this before.  This will cause a copy of a matrix every time we go between R and C++.  I was hoping maybe we could avoid this entirely, but, that depends a little bit on how R represents matrices.  @eddelbuettel @coatless let me know what you think:\r\n\r\nArmadillo represents matrices in column-major form, so in mlpack we typically exploit this representation by saying ""a point in your dataset corresponds to a column"".  On the other hand, languages like Python use row-major representation, and so ""a point in your dataset corresponds to a row""---which also much more closely matches textbooks and literature in machine learning.  I assume R uses a row-major representation too, and that points correspond to a row?\r\n\r\nWhen that is the case, if we can get the underlying memory pointer to the R matrix, we can simply pass that to C++, and then ""logically"" transpose the matrix by saying that in C++, our matrix has number of rows equal to the number of columns in the row-major language, and number of columns equal to the number of rows in the row-major language.  In memory ordering it turns out to be the same, and in this way we are able to avoid the copy.\r\n\r\nIs there a reason we can\'t do that from R?  There may be things I am overlooking; I don\'t know what Rcpp is doing under the hood when this is called:\r\n\r\n```\r\nIO_SetParamMat <- function(paramName, paramValue) {\r\n    invisible(.Call(\'_RcppMLPACK_IO_SetParamMat\', PACKAGE = \'RcppMLPACK\', paramName, paramValue))\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 22, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470322293, 'comment_body': "">  I don't know what Rcpp is doing\r\n\r\nI can help. We have documentation on that -- and eventually settled on _very clean_ zero copy constructors (including the C++ niceties such as `const` and `&` -- I call them niceties because R, really, just has C pointer under that).\r\n\r\nSo in short, by keeping columns we are zero copy.  But once we have to tranpose, we lose that.  Very sad."", 'comment_created': datetime.datetime(2020, 8, 14, 0, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 470357422, 'comment_body': ""I see---I did some reading, and R appears to be column major, but still represents a point in a dataframe as a row.  So if this is the case, the memory layout is wrong for mlpack's needs, and we will be forced to transpose any input matrix.\r\n\r\nCorrect me if I'm wrong on that."", 'comment_created': datetime.datetime(2020, 8, 14, 1, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470373244, 'comment_body': 'That is, I believe, the conclusion we always arrived at.', 'comment_created': datetime.datetime(2020, 8, 14, 2, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 470651864, 'comment_body': ""Sounds good.  I'll go ahead and resolve this then. :+1:"", 'comment_created': datetime.datetime(2020, 8, 14, 14, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470704640, 'comment_body': 'I am not sure, but I just noticed that we not building python-bindings for linux from last 1 month, I am really sorry If I overlooked something.', 'comment_created': datetime.datetime(2020, 8, 14, 15, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 470706552, 'comment_body': ""> Looks weird. You are in 'if py == 3.7' block calling 3.5. Should Python be versioned via a variable?\r\n\r\n:sweat_smile: Oops, I missed this I will make the required changes."", 'comment_created': datetime.datetime(2020, 8, 14, 15, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 470743290, 'comment_body': 'We removed the python2.7 build due to some version with setuptools: https://github.com/mlpack/mlpack/pull/2430', 'comment_created': datetime.datetime(2020, 8, 14, 16, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470744834, 'comment_body': ""Wondering if you can just use `python -m pip install --upgrade pip` since we dropped the python2.7 build, it should be the only python version that is installed, so we don't even have to check if we are building with python3."", 'comment_created': datetime.datetime(2020, 8, 14, 17, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 470750917, 'comment_body': ""Hi @zoq, If I am not wrong I was one of part of that PR's discussion. I am saying that we are not building python-binding in Linux-Python from last one month, cmake is failing to find `distuitls` package.  \r\n\r\nThis was the last time we have successfully build the python-binding: https://dev.azure.com/mlpack/mlpack/_build/results?buildId=3282&view=logs&j=688aac9a-3c6e-57ec-6cd1-1ef0ff8c8547&t=defb0889-3fa1-5309-fa2f-afe77f761eeb&l=180\r\n\r\nAnd This is when we are start failing: https://dev.azure.com/mlpack/mlpack/_build/results?buildId=3284&view=logs&j=688aac9a-3c6e-57ec-6cd1-1ef0ff8c8547&t=defb0889-3fa1-5309-fa2f-afe77f761eeb&l=255"", 'comment_created': datetime.datetime(2020, 8, 14, 17, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 472533095, 'comment_body': '@Yashwants19 The link for the build doesn\'t seem to work; it says ""build not found"".  Anyway, I just checked the build in another PR, and you\'re right! https://dev.azure.com/mlpack/mlpack/_build/results?buildId=3987&view=logs&jobId=688aac9a-3c6e-57ec-6cd1-1ef0ff8c8547&j=688aac9a-3c6e-57ec-6cd1-1ef0ff8c8547&t=defb0889-3fa1-5309-fa2f-afe77f761eeb\r\n\r\nWhen I look at the CMake output there, it doesn\'t actually find `distutils` so it aborts building the Python bindings.\r\n\r\nThanks for noticing this!', 'comment_created': datetime.datetime(2020, 8, 18, 22, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472533313, 'comment_body': 'Agreed with @zoq here; we should be able to avoid specifying the Python version in these calls (I think).', 'comment_created': datetime.datetime(2020, 8, 18, 22, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472535260, 'comment_body': 'Correct me if I\'m wrong on this, but if this is only used in `print_R.cpp` (which I think it is), then we can just use `std::cout` instead of `MLPACK_COUT_STREAM`.  `MLPACK_COUT_STREAM` should only be needed for code that is called directly from R.\r\n\r\nI have some memory of commenting about this already, so I don\'t remember if we decided anything there.  The only reason I would suggest to stick with `std::cout` in these cases that aren\'t called from R is that it\'s a bit more ""expected"" from someone reading the bindings code, instead of them encountering `MLPACK_COUT_STREAM` and thinking either ""what is `MLPACK_COUT_STREAM`?"" or ""wait, will this function be called directly from R?""\r\n\r\nAnyway, you make the choice of what to do; I think the code is fine either way; but I thought it might be helpful to provide my perspective and write the comment. :smile:', 'comment_created': datetime.datetime(2020, 8, 18, 22, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472536720, 'comment_body': '```suggestion\r\n   *  ""param_name"" = IO_GetParam<Type>(""paramName"")\r\n```\r\nI think the backslashes before the `<` and `>` aren\'t necessary---we don\'t need to escape them.  The things between `<>`s here are just placeholders, indicating that, e.g., `<Type>` represents the type of the parameter.  (I see this pattern in a few places throughout the documentation.)\r\n\r\nIt seems a bit strange that we would generate this code with quotes on the left-hand side, but, we already know it works, so, it seems ok to me. :)', 'comment_created': datetime.datetime(2020, 8, 18, 22, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472537801, 'comment_body': 'Ahhh, nice catch!', 'comment_created': datetime.datetime(2020, 8, 18, 22, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472538143, 'comment_body': 'TODO: check this in generated output', 'comment_created': datetime.datetime(2020, 8, 18, 22, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472551060, 'comment_body': 'Thank you! :+1:', 'comment_created': datetime.datetime(2020, 8, 18, 23, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472551329, 'comment_body': '```suggestion\r\n    []() { return """"; }, {});\r\n```\r\nI noticed an extra space on this line. :)', 'comment_created': datetime.datetime(2020, 8, 18, 23, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472552449, 'comment_body': 'Thanks for the warning fix here. :)', 'comment_created': datetime.datetime(2020, 8, 18, 23, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472553086, 'comment_body': 'Nice spacing fix catch here. :+1:', 'comment_created': datetime.datetime(2020, 8, 18, 23, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472553521, 'comment_body': 'I agree, probably best to remove the Go binding for now---having one of the options output to a file is a bit weird.', 'comment_created': datetime.datetime(2020, 8, 18, 23, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472558287, 'comment_body': 'Ahh, I accidentally broke this regex because my repository is in `/home/ryan/src/mlpack/`, so this results in files like `src/adaboost.cpp` having includes like this:\r\n\r\n```\r\n#include <mlpackmlpack/methods/adaboost/adaboost_main.cpp>\r\n```\r\n\r\nThe suggestion is one way to fix it; you can also try some other way if you like.  This approach is at least a little safer since it strips off the name given exactly as it is in `SOURCE_DIR`.\r\n\r\n```suggestion\r\n# Extract the required part from *main.cpp.\r\n# Example: mlpack/methods/adaboost/adaboost_main.cpp\r\nstring(REGEX REPLACE ""${SOURCE_DIR}\\\\/src\\\\/"" """" INCLUDE_FILE \r\n    ""${PROGRAM_MAIN_FILE}"")\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 0, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472570166, 'comment_body': ""This doesn't display quite right:\r\n\r\nhttp://mlpack2.ratml.org/doc/mlpack-git/r_documentation.html#data-formats\r\n\r\nI think that if you use backticks for types here, everything should work.  Take a look at `mlpack::bindings::julia::PrintTypeDoc()` to see what I mean."", 'comment_created': datetime.datetime(2020, 8, 19, 0, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 472573033, 'comment_body': '- yes: if you want just Python 3 in Debian/Ubuntu, say `python3`. It rotate to whatever is deemed official, and importantly `pip3` etc use the same\r\n\r\n- any object code that ends up _in the R package_ so that the R package check sees it (_i.e._ part of the main internal shared library from the package that R loads) needs to replace `std::cout` with `MLPACK_COUT_STREAM`.  Other code does not\r\n\r\n- the link to the docs is great; examples included and rendered is fabulous (one nit: ""quickstart"" mentions all the other languages, should there be an R link? Maybe that was you reference to ""older version use to render this view..."")\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 0, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 472576814, 'comment_body': '> any object code that ends up in the R package so that the R package check sees it (i.e. part of the main internal shared library from the package that R loads) needs to replace std::cout with MLPACK_COUT_STREAM. Other code does not\r\n\r\nYep, unless I am mistaken, this code shouldn\'t end up in the R package.  @Yashwants19 of course, correct me if I\'m wrong.\r\n\r\n> the link to the docs is great; examples included and rendered is fabulous (one nit: ""quickstart"" mentions all the other languages, should there be an R link? Maybe that was you reference to ""older version use to render this view..."")\r\n\r\nPrecisely, if we were to merge this and the website rebuilt, the R quickstart should be linked just fine. :+1:', 'comment_created': datetime.datetime(2020, 8, 19, 1, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 473860154, 'comment_body': 'I have revert these changes here, as I have open a PR(#2568) for the same. ', 'comment_created': datetime.datetime(2020, 8, 20, 10, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473860235, 'comment_body': 'I have revert these changes here, as I have open a PR(#2568) for the same. ', 'comment_created': datetime.datetime(2020, 8, 20, 10, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473860595, 'comment_body': 'I have updated this with the compatible `license`, Let me know what do you think.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473860760, 'comment_body': 'This sounds awesome, we must open a issue for the same. :+1: ', 'comment_created': datetime.datetime(2020, 8, 20, 10, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473861065, 'comment_body': 'Here I have a question, should we provide a copy of `cereal` with package, if I am not mistaken -- [Rcereal](https://github.com/wush978/Rcereal) is not maintain anymore.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473861265, 'comment_body': 'This file and some other files are travelling with `R_option.hpp` in the package, which creates ""warning"" regarding `std::cout`.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473861356, 'comment_body': 'I have updated these comments. Previously it was creating some `doxygen` error, but those are resolved now.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473861463, 'comment_body': ':)', 'comment_created': datetime.datetime(2020, 8, 20, 10, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473861561, 'comment_body': 'Agree. :+1: ', 'comment_created': datetime.datetime(2020, 8, 20, 10, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473861639, 'comment_body': 'I have updated this. Thank you for noticing this.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473864364, 'comment_body': 'BTW #2458 Is giving some great results with the R-Bindings. I have tried to apply cereal serialization on R-bindings [here](https://github.com/Yashwants19/RcppMLPACK/pull/13) with some edits. It got some awesome results, by the help of cereal serialization we were successful in reducing the size of `mlpack.so` file:\r\n* Linux (without strip) from 365.9Mb to 322.7Mb\r\n* Linux (with strip, but locally) from 42.7Mb to 17.0Mb\r\n* macOS from 44.7Mb to 24.3Mb\r\n* Windows from 54.0Mb to 30.9Mb\r\n\r\nFor more information you can compare both checks here: \r\n  1) [Github action](https://github.com/Yashwants19/RcppMLPACK/runs/898506733?check_suite_focus=true) with boost serialization.\r\n  2) [Github action](https://github.com/Yashwants19/RcppMLPACK/runs/997991588?check_suite_focus=true) with cereal serialization.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 474722701, 'comment_body': 'This should be:\r\n\r\n```suggestion\r\n        brew cask install r\r\n```\r\n\r\nThe _r_ formula is using a different compiled binary compared to the cask version for homebrew.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 474758885, 'comment_body': 'Done. Thank you for the suggestion. :)', 'comment_created': datetime.datetime(2020, 8, 21, 15, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 475209549, 'comment_body': ""you can say 'ubuntu-latest' too, currently still 18.04, hopefully soon 20.04 -- and using latest should mean it never gets stale."", 'comment_created': datetime.datetime(2020, 8, 23, 11, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 475209714, 'comment_body': 'Lowercase \'It\' here.\r\n\r\nAlso, `R CMD check` wants a ""normal sentence""  so see what the former does.  \r\n\r\nAlso, \'R bindings\' redundant ... in the description of the R package ;-)', 'comment_created': datetime.datetime(2020, 8, 23, 11, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 475235150, 'comment_body': 'Hi @coatless @eddelbuettel @rcurtin, I am really sorry, I am mistakenly pushed this file. I must discuss before any action. Here\'s idea for the deployment -- we can use ""Passing data between jobs in a workflow"" functionality provided by github actions, Here In this I am trying to build `mlpack-${MLPACK_VERSION}.tar.gz` using our build system and upload this as artifact, which can further used by `R-CMD-check` jobs for checking the package \'as-cran\', further at the release we can also use this artifact for cran submit.\r\nJust an idea , I am not 100% sure. I have also tried these workflows [here](https://github.com/Yashwants19/mlpack/actions/runs/220641547) in [#PR](https://github.com/Yashwants19/mlpack/pull/11). By this we might not require any different repository for R-bindings.\r\n \r\nHere is currently running one (https://github.com/Yashwants19/mlpack/runs/1018548044).\r\n\r\nLet know what do you think? ', 'comment_created': datetime.datetime(2020, 8, 23, 15, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 475235225, 'comment_body': 'I will update this as suggested. :)', 'comment_created': datetime.datetime(2020, 8, 23, 15, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 475237469, 'comment_body': 'If this seems incorrect, I will revert these changes.', 'comment_created': datetime.datetime(2020, 8, 23, 16, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 475289894, 'comment_body': 'If you remove the `R-bindings for`, you can just go with the ""usual"" `mlpack is a fast, flexible machine learning library ...`.', 'comment_created': datetime.datetime(2020, 8, 24, 0, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475290114, 'comment_body': ""#2568 is merged now (thanks again!), so I'll go ahead and resolve this conversation. :+1:"", 'comment_created': datetime.datetime(2020, 8, 24, 0, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475290301, 'comment_body': 'Looks better to me.  Thanks! :+1:', 'comment_created': datetime.datetime(2020, 8, 24, 0, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475290531, 'comment_body': '@Yashwants19 great question. Having said this, what you have done by creating [persisting workflow data using artifacts](https://docs.github.com/en/actions/configuring-and-managing-workflows/persisting-workflow-data-using-artifacts) is the right approach. In essence, you obtain the bindings from mlpack and, then, pass the built package onto a workflow just for checking. Thus, we can separately verify two stages independent of each other: binding build for R and `R CMD check <mlpack>`.', 'comment_created': datetime.datetime(2020, 8, 24, 0, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 475291987, 'comment_body': 'https://github.com/mlpack/mlpack/issues/2581', 'comment_created': datetime.datetime(2020, 8, 24, 0, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475292175, 'comment_body': ""Awesome!  Let's handle the cereal discussion once #2458 is merged, but I think maybe the best option will be to simply package it with mlpack, unless we want to also resurrect and maintain Rcereal (not sure what's easier; I assume just bundling a cereal version would be easiest)."", 'comment_created': datetime.datetime(2020, 8, 24, 0, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475292250, 'comment_body': 'Ah, got it, in this case, we have to use `MLPACK_COUT_STREAM`.  Thanks for clarifying! :+1:', 'comment_created': datetime.datetime(2020, 8, 24, 0, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475292284, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 8, 24, 0, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475292512, 'comment_body': 'Oops, I usually mean to go through my ""TODO"" review comments and fix them.  In this case I think the output looks just fine so I\'ll resolve the comment.', 'comment_created': datetime.datetime(2020, 8, 24, 0, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475297367, 'comment_body': 'Looks better now.  Thanks! :+1: http://mlpack2.ratml.org/doc/mlpack-git/r_documentation.html#data-formats', 'comment_created': datetime.datetime(2020, 8, 24, 1, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475298844, 'comment_body': '```suggestion\r\n          ""2-d `matrix`)."";\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 1, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 475298871, 'comment_body': '```suggestion\r\n          ""2-d `matrix`)."";\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 1, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 475299075, 'comment_body': '```suggestion\r\n    return ""A boolean flag option (i.e. `TRUE` or `FALSE`)."";\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 1, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 475299124, 'comment_body': '```suggestion\r\n          ""`matrix` or a `data.frame` with one dimension of size 1)."";\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 1, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 475299143, 'comment_body': '```suggestion\r\n          ""`matrix` or a `data.frame` with one dimension of size 1)."";\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 1, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 475300876, 'comment_body': ""Nice, this looks pretty reasonable to me!  It looks like, at the moment, there is no step to upload to CRAN, but as you said we can do that manually at release time.\r\n\r\nA couple high-level questions (I am not very familiar with Github actions):\r\n\r\n1. Do we have to do anything to the repository to install the action?  I can do that now for the sake of testing.\r\n2. Should we transition all of our Azure test jobs from `.ci/` to a Github action?  (I am not sure if there is some easy 1-1 mapping.)  If that's true, certainly no need to do it here---we could open another issue somewhere to discuss."", 'comment_created': datetime.datetime(2020, 8, 24, 1, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475324864, 'comment_body': ""`mlpack is a fast, flexible machine learning library ...` is causing a 'NOTE' in `R CMD check .`.\r\n``` \r\n The Description field should not start with the package name,\r\n    'This package' or similar\r\n```\r\nI can revert this. :+1: \r\n"", 'comment_created': datetime.datetime(2020, 8, 24, 3, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 475328084, 'comment_body': ""Here @coatless might provide us more insight that -- what will be the best for our community and how to trigger this specific build :smile: , as Its seems that he is a pro in 'github actions'. And I had started github action wokflows for `RcppMLPACK` by getting inspired from some of his work only. He is the best. :)"", 'comment_created': datetime.datetime(2020, 8, 24, 3, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 475640139, 'comment_body': 'I have revert these changes.', 'comment_created': datetime.datetime(2020, 8, 24, 14, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 475928666, 'comment_body': '```suggestion\r\non:\r\n  workflow_dispatch:\r\n  push:\r\n```\r\n\r\nEnable a manual approach to triggering the GitHub Action.', 'comment_created': datetime.datetime(2020, 8, 24, 22, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 475929672, 'comment_body': ""@rcurtin in order:\r\n\r\n> Do we have to do anything to the repository to install the action?\r\n\r\nNope! Nothing needs to be installed. We only need to setup configuration files. That said, if you want the action to run on this PR, the action must be setup prior to the PR.\r\n\r\n> Should we transition all of our Azure test jobs from .ci/ to a Github action? (I am not sure if there is some easy 1-1 mapping.)\r\n\r\nAnother project @rcurtin :) Let's chat sometime soon about potentially having students work on projects during the year. "", 'comment_created': datetime.datetime(2020, 8, 24, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 476047505, 'comment_body': 'How about: \r\n\r\n```md\r\nDescription: Bindings for the R language that connect into mlpack, which is a fast, flexible machine learning library... \r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 1, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 476052074, 'comment_body': ""Nowmatter what we pick now something like this will come up anyway on the 'new package' review at CRAN (due if we upload as `mlpack` which is 'new') so I would suggest to top splitting hairs now, get this merged and worry about the description text another time."", 'comment_created': datetime.datetime(2020, 8, 25, 1, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 477734169, 'comment_body': ""Agreed, that sounds good to me. :+1:  I guess once this is merged, then the action will start running on other PRs.  I think it's ok to not run on this PR; I believe everything already works."", 'comment_created': datetime.datetime(2020, 8, 27, 0, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 477865885, 'comment_body': 'Should I change the Maintainer to: `Ryan Curtin <ryan@ratml.org>`, as auto-generated `DESCRIPTION` file will show Maintainer as: `mlpack Team <mlpack-git@lists.mlpack.org>`.', 'comment_created': datetime.datetime(2020, 8, 27, 1, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 477868620, 'comment_body': 'Per CRAN Policy it ought to be an individual address anand not a list.\r\n\r\nSo, yay, Ryan it is.', 'comment_created': datetime.datetime(2020, 8, 27, 1, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'eddelbuettel', 'type': 'User'}, {'comment_id': 477878713, 'comment_body': 'I will make the changes. Thank You :)', 'comment_created': datetime.datetime(2020, 8, 27, 1, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 477887296, 'comment_body': 'Last think that I have to point out is -- After the [discussion](https://github.com/Yashwants19/RcppMLPACK/pull/11#discussion_r456810544), I have removed `ftrack-macro-expansion=0` from this file, which was resolving memory issue on Windows for CI.\r\nNote : Locally on my system it is working fine without this flag.', 'comment_created': datetime.datetime(2020, 8, 27, 1, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 477893504, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 1, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 477970749, 'comment_body': ""@Yashwants19 if you like, you can do it.  I am already the maintainer of too many things. :)  I can do it if needed though---but as is probably clear from this whole summer, I don't know all that much about R and I know even less about CRAN. :smile:"", 'comment_created': datetime.datetime(2020, 8, 27, 2, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 478078920, 'comment_body': 'One more question(I am really sorry for too many questions) -- I guess CRAN will not run these examples as none of dataset given in example are valid/available. If it runs the examples should I replace this with `\\dontrun{}`.\r\n\r\nExample: https://gist.github.com/4967c5939ba054bc868415d1e3e5c956#file-lmnn-r-L133', 'comment_created': datetime.datetime(2020, 8, 27, 4, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 478461491, 'comment_body': ""@Yashwants19 we like questions. Keep asking them!\r\n\r\nFor the question contents itself, yes. We will need to switch to `\\dontrun` from `\\donttest`. I'm not sure CRAN will like that though. We could maybe make a case that the unit tests from `mlpack` central should cover each individual function. \r\n\r\nOtherwise, I think we'd have to make sure each example was ran on a data set. "", 'comment_created': datetime.datetime(2020, 8, 27, 14, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 478468450, 'comment_body': ""In general, we don't have support to make each of these examples into something that would directly run, since they don't contain any setup or dataset loading, etc.  If the CRAN maintainers are worried about the tests, the argument that we would need to make is that (a) we have tests ensuring that options of each type make it to mlpack correctly and back (in `src/mlpack/bindings/R/tests/`), and (b) each individual binding is tested thoroughly in a language-agnostic way in `src/mlpack/tests/main_tests/`.  So, if all the types make it to mlpack correctly, then the language-agnostic tests in `src/mlpack/tests/main_tests/` pretty much cover everything.\r\n\r\nSome testable examples that we do have are the quickstart examples."", 'comment_created': datetime.datetime(2020, 8, 27, 14, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 478549984, 'comment_body': 'Done. I have switch `\\donttest` to `\\dontrun` in the last commit.', 'comment_created': datetime.datetime(2020, 8, 27, 16, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 479331360, 'comment_body': 'For the safe side should I check the package using `devtools::check_win_devel()`, or should we continue without this flag? ', 'comment_created': datetime.datetime(2020, 8, 28, 14, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 479473445, 'comment_body': ""It seems like `-ftrack-macro-expansion` is only relevant for printing error messages.  I'm surprised that `0` causes a failure, since that just disables tracking.  Anyway, I have no idea if this will matter for CRAN; @coatless or @eddelbuettel will have a better idea."", 'comment_created': datetime.datetime(2020, 8, 28, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 479637712, 'comment_body': ""I have tried `devtools::check_win_devel()` for the package:\r\nWithout `ftrack-macro-expansion=0` flag: I have got the same memory error.\r\nhttps://win-builder.r-project.org/k0ha3e9083DC/\r\ncheck result: https://win-builder.r-project.org/k0ha3e9083DC/00check.log\r\ninstall log: https://win-builder.r-project.org/k0ha3e9083DC/00install.out\r\n\r\nWith `ftrack-macro-expansion=0` flag: it worked\r\nhttps://win-builder.r-project.org/fd7zTJ71ITh4\r\ncheck result: https://win-builder.r-project.org/fd7zTJ71ITh4/00check.log\r\n\r\nNow the final call is of @coatless and @eddelbuettel. If we are okay without this flag, we are ready for merge, else I will update the `Makevars.win` file and add this flag, then we will be ready for merge.\r\n\r\nNOTE: It was confirmed in one of [comment](https://github.com/Yashwants19/RcppMLPACK/pull/11#discussion_r456811337) by @coatless that CRAN doesn't hate this flag.\r\n"", 'comment_created': datetime.datetime(2020, 8, 29, 10, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 479700070, 'comment_body': ""Sounds good to me---since the build is passing now, I think we can go with it as you have it now, and if there's an issue with CRAN later, we can resolve it then. :+1:"", 'comment_created': datetime.datetime(2020, 8, 29, 23, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 479709414, 'comment_body': ""If it's required to ensure the build passes, lets leave it in. We're going to probably need a few back'n'forths with CRAN to get the package listed."", 'comment_created': datetime.datetime(2020, 8, 30, 1, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'coatless', 'type': 'User'}, {'comment_id': 479711148, 'comment_body': 'Sounds awesome, Thank you for all the clarification. :)', 'comment_created': datetime.datetime(2020, 8, 30, 2, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}]","[{'commit_sha': 'e2f79f3ae5e358622b10dad428564324b58a184c', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcf7e9c302149332025e285f829377698b3dd982', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00743d05faea6709a61fae1801607fae6f2fbcf7', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b205faab09799791d31ee8c9684bf2d263f6e25', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca60a1aaa7104f45997e4c012427b5bf4edb79d', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03e5788589d6d161185aeba92a6bb7af4103bf06', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eac61ee0a31cd07a45df6f0e08eb7a642c81c7e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c636d19a0dab406708171db0074bb742f8a17b9d', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '231cae0ba465ff308f0b933bc29ba22e6e54cff9', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d3d7cb52eceb7db66d27724fee7b2dd0e61b815', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e4ae87a87ac8b13fc5b7cd77014dfc4b98223e2', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e11da9c26e4274c111daad8f75d55040c770ab', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80cde823dd0401b28dbed2170a8bc0194fc9b52b', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12a65de6fcc8caf5d9a869babb54ab8e75814142', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd8966b939784cbfe2aab448c206c1206dafc154', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95432d82fe09eefb1af403445f63bd9f43dd1731', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3314a9c9e2a441e339f056eb0000db4856786278', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621bf6bb67a52fd0c697aacc15a4a71ac56ea31d', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '547923b0dcf6e4e46f52622350f8e74fe30ece24', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ee12beb48ead3c3de0b8b1c623fb40219ab910', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4346ac411dfbf16e34cd857964f43330f0db67f3', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f782ad95fc8af41ca23b8ca45442a36808a5a0', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a1069bc8d9790ad176338f3a3b016eb5ba91e03', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cbed0e380c653027bdab598e544e97e6af4d738', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e25b1d4bfc52672cd7ef7c013409f94d7ecd0a82', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e990d509aeff6bc0021af6d031c27c468e2958a', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d50c195d6b53b3793f132a8f252640d8f45d764', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68a96ccbbb475d7f3aa013e703fa7f93c4df372', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd31426c9b70dada0d6b261e87520d5fdb4d6faa', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '550f65f7d4cb39aaf05758b4288f13b65578e669', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08dd01dbba789410d89cd7284cfcd29424cea04', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '523c4c81fea01553b34feaf250ccaec8aca123db', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f280e24c68ab6f63288239ae01f98b3b90663bb1', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bc13b48ed46ee7c7c4c7d6f46df28698289b806', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9261418500c82c549303aeb6c523185d5b570eaa', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b78bd74a328467fe5e1164e52b173dd8a7f0a4', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaccc4e9d379ccc66fa5bc96d4bb58e702045a0e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7eee58cea0956c01dfee52014d2d311fb3f0421', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf6694d6ad22475b7c9c283079f818f7ca8374b7', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72912e61cd112fe47f5c8be7a51198a4ddf1529f', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d9945bd6fbf5bb86c56c5f56f43e62cdeebeb8e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9370961b0eea0381fe2eb782242a09456f7bb742', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a35505df115e07da54dfe910261e92b7c493ac0', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '002c1bbdefd3a7f1903a65c7d28356a42a27f6e8', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2a1ddff369e8e3020d68b0a0da9cdded9c16f7e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452d795f4856c03e748c50a9abea8605d78d8639', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929c73d214a57d8ba51cae545b78877c87bb04f0', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c91fecc85cc7806c3bba3d261ec0d9878cba135d', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8711fe1e38f3aaccafb8e5588e2f99ddfc6b3320', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9967575a5315b8740474dcf146393e27a62c2b', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc91fc4e143d3f16b618b581cf520b0b36c2d23', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3fc1b9df01011c8d9058416ca52ee53288fa89b', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8126a57cef82a7336d786426e0e3984ae421e2ba', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a321484f9e4e19d6570c5ab70b8d4856fd91341', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36173a39e86dc5713b1599aba745c3309179def8', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297d2f50af6b5ea50945e7db42ccafcddc597512', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e732960bdc3b1382361ded62f52807c460f7cdd2', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dde6fafa295363fd1423dfe62e5ab7c0a2c61621', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38187e40180a59707667d1b0c81d7ca5d50d0708', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8a4b036288859a045bd9b1414af06ba5adb5e6f', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}]",Yashwant Singh Parihar,25639321,Yashwantsingh.sngh@gmail.com,User,,19,,9,13
468428601,Force CMake to show error when it didn't find python/modules.,"While cmaking If we intentionally mention `-DBUILD_PYTHON_BINDINGS=ON`, and if CMake is not able to find python or required python-modules, then it not showing any error. Hence I have tried to fix the problem in this PR.

Thank You.",True,2568,https://api.github.com/repos/mlpack/mlpack/pulls/2568,https://github.com/mlpack/mlpack/pull/2568,closed,51,32,7,10,2,7,3,0,"[{'name': 'c: build system'}, {'name': 'c: binding'}, {'name': 't: added feature'}]",2020-08-16 10:48:41+00:00,2020-08-21 22:18:02+00:00,473361.0,"5 days, 11:29:21","[{'comment_id': 471149178, 'comment_body': 'Wondering if we should be more specifc here, since we already know which package is missing? Not sure a user will lookup a couple of lines to see what package it was, I might be wrong.', 'comment_created': datetime.datetime(2020, 8, 16, 19, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471263121, 'comment_body': 'Hey @zoq I have tried your suggestion in 9bdd243. Let me know what do you think?', 'comment_created': datetime.datetime(2020, 8, 17, 6, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 473399975, 'comment_body': ""I think this comment might be accurate for other languages (I think it was originally written for Julia or Go then adapted here?  I feel like I've seen it before), but not for Python.  We directly use setuptools in the build process, so it is necessary during the build process.  (The code is just fine, I'm only commenting on the comment. :))"", 'comment_created': datetime.datetime(2020, 8, 19, 22, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 473400800, 'comment_body': '```suggestion\r\n    message(FATAL_ERROR ""\\nCould not Build Python Bindings; the following modules are not available: ${PY_NOT_FOUND_MSG}"")\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 22, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 473400976, 'comment_body': '```suggestion\r\n    not_found_return(""Not building Python bindings; the following modules are not available: ${PY_NOT_FOUND_MSG}"")\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 22, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 473800747, 'comment_body': 'I am really sorry, I totally missed this. I have updated the comment in the last commit. :)', 'comment_created': datetime.datetime(2020, 8, 20, 9, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 474821602, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2020, 8, 21, 17, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'b044523c20b081a4f750130553fff0f1bb40afb3', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a646a79daa25c4385025bd98d7f4f7c9d1e36b8e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f8fe7bb0bed9cc1021e09b5dd67d11ba1146c7', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904ec45bfb3e0ac7a5038433334a644044ba9cbb', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bdd24339be192ef20901c625fd4a1c838f76d31', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c65014e53e475d67034c1cc806e74ff555b29a34', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2740589aca84726c3d268de5c3f64850c427dc7', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2ffc556200f9e92a35213e94e6b551567e96d9', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d095152cd8c43f4383613d1e9a092d3384b0d99', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '731f03a2a18977846fa5476d31fa2e3df76155fe', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}]",Yashwant Singh Parihar,25639321,Yashwantsingh.sngh@gmail.com,User,,19,,9,13
465122424,(GSoC Week 11 -12) Refactor ProgramInfo() to separate out all the different information.,"Hi @coatless @eddelbuettel @rcurtin, As discussed in #2521 I have tried to refactor the `ProgramInfo()` into different macros in this PR. R-binding does not require this refactoring directly, but still it can be considered as a stretch goal. :)

Thank You.",True,2558,https://api.github.com/repos/mlpack/mlpack/pulls/2558,https://github.com/mlpack/mlpack/pull/2558,closed,1927,1110,87,17,5,60,1,0,[{'name': 't: added feature'}],2020-08-09 08:10:54+00:00,2020-08-19 22:39:03+00:00,916089.0,"10 days, 14:28:09","[{'comment_id': 468027008, 'comment_body': 'Nice, thank you for adding this! :+1:', 'comment_created': datetime.datetime(2020, 8, 10, 16, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468029646, 'comment_body': ""I don't think we need to change this part---the `@section` just defines the section name in the Doxygen documentation: https://www.mlpack.org/doc/mlpack-git/doxygen/classmlpack_1_1IO.html#programinfo"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468030876, 'comment_body': 'Honestly I think maybe just `BINDING_NAME()` is a sufficient name here; the `P` seems unnecessary to me. :)', 'comment_created': datetime.datetime(2020, 8, 10, 16, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468031842, 'comment_body': 'We could change this to `MARKDOWN_BINDING_NAME` to avoid the name collision with `BINDING_NAME` if you think the change above is a good idea. :+1:', 'comment_created': datetime.datetime(2020, 8, 10, 16, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468187493, 'comment_body': '```suggestion\r\n@c <mlpack/core/util/mlpack_main.hpp> header.  The macros\r\nare of the form\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468188102, 'comment_body': '```suggestion\r\n  // Program Name.\r\n  BINDING_PNAME(""Random Numbers"");\r\n\r\n  // Short description.\r\n  BINDING_SHORT_DESC(""An implementation of Random Numbers"");\r\n\r\n  // Long description.\r\n  BINDING_LONG_DESC(\r\n      ""This program generates random numbers with a ""\r\n```\r\nJust some quick fixes to match the indentation that was previously used.  I guess, if you wanted, we could also ""de-indent"" all of it.', 'comment_created': datetime.datetime(2020, 8, 10, 21, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468188273, 'comment_body': '```suggestion\r\n  // Example.\r\n  BINDING_EXAMPLE(\r\n```\r\nA similar spacing fix as above. :+1:', 'comment_created': datetime.datetime(2020, 8, 10, 21, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468188552, 'comment_body': '```suggestion\r\nThen as arguments to the macros, the name, description, and sometimes the\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468188692, 'comment_body': '```suggestion\r\nThis means that after the @c BINDING_LONG_DESC() and @c BINDING_EXAMPLE() macros\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468188832, 'comment_body': '```suggestion\r\n// The BINDING_PNAME(), BINDING_SHORT_DESC(), BINDING_LONG_DESC(), BINDING_EXAMPLE(),\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468189042, 'comment_body': '```suggestion\r\n - (optional) the BINDING_EXAMPLE() macro that defines example usages\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468189205, 'comment_body': '```suggestion\r\n - (optional) the BINDING_SEE_ALSO() macro that defines ""see also"" links\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468189333, 'comment_body': '```suggestion\r\nregister the given see-also link.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468191301, 'comment_body': 'For the CLI bindings, you had put two line endings after the long description and between each example.  Should we do the same here?', 'comment_created': datetime.datetime(2020, 8, 10, 21, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468199501, 'comment_body': ""It might be simpler to collect all of the information relevant to binding information in one struct, like `util::BindingDetails` or something like that.  That would also make it easier to add new things (if we needed to do that in the future), and here in `markdown::BindingInfo` you'd only need a function like `GetBindingDetails()` and `RegisterBindingDetails()`.  Let me know if I overlooked something there; just an idea. :+1:"", 'comment_created': datetime.datetime(2020, 8, 10, 21, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468200106, 'comment_body': ""Should we also use two line breaks here?  I'm not sure what the right thing is, so correct me if I overlooked something and it was previously only one line break."", 'comment_created': datetime.datetime(2020, 8, 10, 21, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468200389, 'comment_body': '```suggestion\r\n  cout << endl;\r\n```\r\nSimple style fix. :)', 'comment_created': datetime.datetime(2020, 8, 10, 21, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468201730, 'comment_body': ""Let me know what you think, but I think maybe it might be easier to maintain this with some kind of `BindingDetails` struct or something that collects all of this information in it.  It would also reduce the number of methods added to `IO`.  However I am not sure if there's a technical difficulty that I've missed in thinking about this---but I think it *should* be possible to wrap all these in one class without any problem. :+1:"", 'comment_created': datetime.datetime(2020, 8, 10, 21, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468202716, 'comment_body': ""(This applies to each of these macros)  Would you mind updating the documentation for this?  e.g., change `Document an executable` to `Specify the short description of a binding`.  (Also we should probably use the word `binding` not `executable` since it's not just command-line programs anymore.) :+1:"", 'comment_created': datetime.datetime(2020, 8, 10, 21, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468202852, 'comment_body': '```suggestion\r\n#endif\r\n\r\n/**\r\n```\r\nJust a simple spacing fix. :)', 'comment_created': datetime.datetime(2020, 8, 10, 21, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468203467, 'comment_body': '```suggestion\r\n#endif\r\n\r\n/**\r\n```\r\nAnother spacing fix. :)', 'comment_created': datetime.datetime(2020, 8, 10, 21, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468203925, 'comment_body': 'This might be a little clearer:\r\n```suggestion\r\n * Implementation of mutiple classes that store information related to a binding.\r\n * The classes register themselves with IO when constructed.\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468204168, 'comment_body': '```suggestion\r\n  ProgramName();\r\n  \r\n  std::string programName;\r\n```\r\nJust adding some spacing for style. :)', 'comment_created': datetime.datetime(2020, 8, 10, 21, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468204255, 'comment_body': '```suggestion\r\n  ShortDescription();\r\n  \r\n  std::string shortDescription;\r\n```\r\nSame here. :)', 'comment_created': datetime.datetime(2020, 8, 10, 21, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468204347, 'comment_body': '```suggestion\r\n  LongDescription();\r\n  \r\n  std::function<std::string()> longDescription;\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468204399, 'comment_body': '```suggestion\r\n  Example();\r\n  \r\n  std::function<std::string()> example;\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468204477, 'comment_body': '```suggestion\r\n  SeeAlso();\r\n\r\n  std::string description;\r\n  std::string link;\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 21, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468204550, 'comment_body': '```suggestion\r\n};\r\n\r\n```\r\nAnd one more spacing fix. :)', 'comment_created': datetime.datetime(2020, 8, 10, 21, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468985417, 'comment_body': 'I will revert these changes.', 'comment_created': datetime.datetime(2020, 8, 12, 3, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 468985954, 'comment_body': 'Sounds good, I will try to apply `sed --regex`  for this. :)', 'comment_created': datetime.datetime(2020, 8, 12, 3, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 468986040, 'comment_body': 'I will make the changes.', 'comment_created': datetime.datetime(2020, 8, 12, 3, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469151855, 'comment_body': ':)', 'comment_created': datetime.datetime(2020, 8, 12, 10, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469151962, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469152485, 'comment_body': '`sed  --regex` worked properly, 😄 ', 'comment_created': datetime.datetime(2020, 8, 12, 10, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469152677, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469153250, 'comment_body': 'This looks great, thank you for the suggestion. :+1:', 'comment_created': datetime.datetime(2020, 8, 12, 10, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469154210, 'comment_body': 'I have added `endl` after this. 👍 ', 'comment_created': datetime.datetime(2020, 8, 12, 10, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469156261, 'comment_body': 'In some last commit, I have tried to collect all the information in one `struct`, Please let me know whether my approach is correct or not.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469156744, 'comment_body': 'Done. Thanks for the suggestion. :+1:', 'comment_created': datetime.datetime(2020, 8, 12, 10, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469157125, 'comment_body': 'I have updated the documentation as suggested.', 'comment_created': datetime.datetime(2020, 8, 12, 10, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 469159223, 'comment_body': 'I have tried this approach in some last commit, Let know what do you think?', 'comment_created': datetime.datetime(2020, 8, 12, 10, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 470260780, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 8, 13, 21, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470262140, 'comment_body': 'Yeah, this looks like it works just fine.  Nice work! :+1:', 'comment_created': datetime.datetime(2020, 8, 13, 21, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470262634, 'comment_body': '```suggestion\r\nstruct BindingDetails;\r\n```\r\nOops, looks like a typo. :)  Although, if the build passed without the right name here, maybe it is an unnecessary forward declaration and we can remove it?', 'comment_created': datetime.datetime(2020, 8, 13, 21, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470263164, 'comment_body': ""```suggestion\r\n  //! Name of the binding.\r\n```\r\nMaybe you meant something else; let me know if this isn't a good suggestion. :+1:"", 'comment_created': datetime.datetime(2020, 8, 13, 21, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470263308, 'comment_body': '```suggestion\r\n  //! A short two-sentence description of the binding, what it does, and what\r\n```\r\nJust a little pedantry since we are making bindings for any language now, not just for command-line programs. :+1:', 'comment_created': datetime.datetime(2020, 8, 13, 21, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470263788, 'comment_body': 'Looks great! :+1:', 'comment_created': datetime.datetime(2020, 8, 13, 21, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470454481, 'comment_body': 'Removed. :)', 'comment_created': datetime.datetime(2020, 8, 14, 7, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 470454819, 'comment_body': 'Your suggestions are always awesome. :)', 'comment_created': datetime.datetime(2020, 8, 14, 7, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 470455366, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 14, 7, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 471035407, 'comment_body': 'This should be tabbed twice (4 spaces).', 'comment_created': datetime.datetime(2020, 8, 15, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471035419, 'comment_body': 'This should be tabbed twice (4 spaces).', 'comment_created': datetime.datetime(2020, 8, 15, 21, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471035488, 'comment_body': '```suggestion\r\n  // Print the description.\r\n```', 'comment_created': datetime.datetime(2020, 8, 15, 21, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471035568, 'comment_body': '```suggestion\r\n  //! A set of pairs of strings with useful ""see also"" information; each pair\r\n```', 'comment_created': datetime.datetime(2020, 8, 15, 21, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471035742, 'comment_body': ""Just realized the documentation isn't correct, `@param defaultModule Name of the default module.` do you mind to fix it here as well?"", 'comment_created': datetime.datetime(2020, 8, 15, 21, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471035842, 'comment_body': 'Looks like there is no `seeAlso` parameter.', 'comment_created': datetime.datetime(2020, 8, 15, 21, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471065651, 'comment_body': 'Done. :)', 'comment_created': datetime.datetime(2020, 8, 16, 4, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 471065664, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 16, 4, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 471065677, 'comment_body': 'Fixed in the last commit.', 'comment_created': datetime.datetime(2020, 8, 16, 4, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 471065738, 'comment_body': 'Updated with proper parameters. :)', 'comment_created': datetime.datetime(2020, 8, 16, 5, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}]","[{'commit_sha': 'f0945a8500524db5b5f1a5b9ef3cbc4aafcd39fd', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '242822774fbf6b9f3a1fd9da8a2516959aeb534b', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9adce8e5dedcc41e45c8adb2459ace1557562a0', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850423a50c1d18e8cba62479d53f6919f53139c3', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cc548a53046f20b3f6bfbac2ee5c299ad73c8a', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e04bb13d22b1009654608ebfe284a6013e9c34b', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ecf8c058af07436709acee2afabf610fd9b193f', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1de6c688cd84860c11152099c443af66b4e520', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60f75a42515d83992a46becc0fef7f62494ffbf', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8eeb1988b676b1e935bfb4ac62c3d4b32953d0d', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8935de54ac01097bc137376828843fc3e89c238e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab2d2a2f4ea6e68c8dc32aca9663486c54fa9b7b', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e22ec9b5d56da0590f950320c0a904e3ba7a26', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e38c6b1dbf14dfb5a6a3e1ff85d546cd82b4539f', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffa4a7cfc16e3a081966547c7457a9bc12379b45', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e15ae4f6b7761d013040709d039564003e5ec8e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346bbcf4ee272ad845c88127927317928dda5799', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}]",Yashwant Singh Parihar,25639321,Yashwantsingh.sngh@gmail.com,User,,19,,9,13
453630571,Fix ModelType Julia Documentation.,"Hi @rcurtin, I think so we are not printing model type correctly [here](https://github.com/mlpack/mlpack.jl/blob/ab0a526f5936aa8829becd32dd3f5143c80532ac/src/adaboost.jl#L104). It is printing `unknow_` and not `AdaBoostModel` in Julia documentation. I have tried to resolve this issue in the PR.

Thank You.",True,2530,https://api.github.com/repos/mlpack/mlpack/pulls/2530,https://github.com/mlpack/mlpack/pull/2530,closed,2,1,1,1,0,0,5,0,"[{'name': 's: needs review'}, {'name': 'c: automatic bindings'}, {'name': 'c: binding'}, {'name': 'c: documentation'}, {'name': 't: bugfix'}]",2020-07-20 16:44:57+00:00,2020-07-21 04:30:48+00:00,42351.0,11:45:51,[],"[{'commit_sha': 'b5001ee87f3e85414fa5d28f6299095914463d97', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}]",Yashwant Singh Parihar,25639321,Yashwantsingh.sngh@gmail.com,User,,19,,9,13
452603738,Fix Bad Regex from CLI11.,"While rebasing R-binding, I found that some of the CLIs are accidentally missed. Hence I have tried to fix those misses in this PR.

Thank You.",True,2520,https://api.github.com/repos/mlpack/mlpack/pulls/2520,https://github.com/mlpack/mlpack/pull/2520,closed,76,76,21,1,0,0,2,0,"[{'name': 'c: documentation'}, {'name': 's: unanswered'}]",2020-07-19 14:52:40+00:00,2020-07-21 00:15:18+00:00,120158.0,"1 day, 9:22:38",[],"[{'commit_sha': '76627bd415ae43d2d3e03cb902db8d16daabd84a', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}]",Yashwant Singh Parihar,25639321,Yashwantsingh.sngh@gmail.com,User,,19,,9,13
441007032,Fix pointer error in Go-bindings,"Hi @lozhnikov @rcurtin, As discussed in #2482, I have tried to fix the bug here.",True,2483,https://api.github.com/repos/mlpack/mlpack/pulls/2483,https://github.com/mlpack/mlpack/pull/2483,closed,2,5,1,1,1,0,2,0,"[{'name': 'c: automatic bindings'}, {'name': 't: bugfix'}]",2020-06-28 05:57:50+00:00,2020-06-29 13:14:20+00:00,112590.0,"1 day, 7:16:30",[],"[{'commit_sha': '26c78186cc643bc42e72eba7c5d85b0bcc8f6170', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}]",Yashwant Singh Parihar,25639321,Yashwantsingh.sngh@gmail.com,User,,19,,9,13
435182010,:rocket: Add Go bindings for some missed models.,"Hi @rcurtin, while working on R bindings I found that we missed some models in Go binding. Later the I realise that these models required some extra efforts, as gmm_train, gmm_generate define the same  function and struct two times in the package which is not valid in Go even after they are unexported. Hence I define a file models.go which will take care of every models define in package.

Further one more thing that I feel odd is when a user build go-bindings from source then he/she may not able use the same import name (mlpack.org/v1/mlpack) as we documented in website. And when we copy bindings to our go-bindings repo we have to change one import in `go_binding_test.go` which manual, and not automatically. Hence I changed the folder name for the go-bindings from `mlpack` to `mlpack.org/v1/mlpack`. This is member's/ contributor's call I can revert changes here if anybody doesn't like the idea.
I am really sorry for the missed/commented models. 

Thank You.",True,2460,https://api.github.com/repos/mlpack/mlpack/pulls/2460,https://github.com/mlpack/mlpack/pull/2460,closed,451,915,30,6,13,29,2,0,"[{'name': 'c: automatic bindings'}, {'name': 't: bugfix'}]",2020-06-16 12:30:39+00:00,2020-06-23 00:03:30+00:00,559971.0,"6 days, 11:32:51","[{'comment_id': 441162190, 'comment_body': '```suggestion\r\n# AppendModel.cmake: append model definition and gettter setter methods for\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 21, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 441164510, 'comment_body': 'Maybe it would be useful to add some reference to the function that computes `goStrippedType` here?', 'comment_created': datetime.datetime(2020, 6, 16, 21, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 441164811, 'comment_body': '```suggestion\r\n          if (NOT ""${MODEL_SAFE_TYPE}"" MATCHES ""[^A-Z]"")\r\n```\r\n\r\nI think that will work... not sure though...', 'comment_created': datetime.datetime(2020, 6, 16, 21, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 441171630, 'comment_body': 'Maybe it would be useful to note here that we put our build results into `src/mlpack.org/v1/mlpack/` so that setting `GOPATH` to the build directory works?', 'comment_created': datetime.datetime(2020, 6, 16, 22, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 441172438, 'comment_body': ""Hmm, I think that there are no cases where we have bindings that don't have Armadillo parameters, but it's nice to be specific like this.  Are you sure that it's okay to avoid importing Gonum even if some of the mlpack support functions take Gonum objects as parameters?"", 'comment_created': datetime.datetime(2020, 6, 16, 22, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 441173871, 'comment_body': 'I think we can probably remove this entire file now---or did I overlook something?', 'comment_created': datetime.datetime(2020, 6, 16, 22, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 441700189, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 17, 17, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 441700573, 'comment_body': 'Added a reference to the function.', 'comment_created': datetime.datetime(2020, 6, 17, 17, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 441700752, 'comment_body': 'It works.:)', 'comment_created': datetime.datetime(2020, 6, 17, 17, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 441704761, 'comment_body': ""I think so hmm_train doesn't use armadillo parameter."", 'comment_created': datetime.datetime(2020, 6, 17, 17, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 441705516, 'comment_body': ""Sorry I didn't get this. Is it regarding to add comment here?"", 'comment_created': datetime.datetime(2020, 6, 17, 17, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 441710598, 'comment_body': 'Thank you for pointing this out. Previously this file was also used for generating .h/.cpp files, But now I used similar approach used by julia for generating .h/.cpp files. This approach will also save some time for build the go-bindings .', 'comment_created': datetime.datetime(2020, 6, 17, 17, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 443061001, 'comment_body': 'Yeah, I think it would be nice if you could add a comment about why we are putting builds results into the directory `src/mlpack.org/v1/mlpack/` instead of just `go/mlpack` or something. :+1:', 'comment_created': datetime.datetime(2020, 6, 19, 22, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443061330, 'comment_body': ""You're right, nice call; that one takes in a string.  However I can see we're not currently building the HMM bindings for Go.  Maybe we should enable that and by building those we'll test to make sure avoiding importing Gonum is okay?  Or maybe there was some other issue for why we don't build the HMM bindings; I'm not sure."", 'comment_created': datetime.datetime(2020, 6, 19, 22, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443102723, 'comment_body': ""Sorry I didn't informed but previously with `GMM`, I had also added Go-bindings for `HMM` too."", 'comment_created': datetime.datetime(2020, 6, 20, 5, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 443102821, 'comment_body': 'Updated this comment, You can take a look :).', 'comment_created': datetime.datetime(2020, 6, 20, 5, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 443232703, 'comment_body': 'Looks great, thank you! :+1:', 'comment_created': datetime.datetime(2020, 6, 21, 15, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443232759, 'comment_body': 'Awesome, great to add those too!', 'comment_created': datetime.datetime(2020, 6, 21, 15, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443667231, 'comment_body': '@Yashwants19 nice catch!  Do you think it would be better to instead call `not_found_return()` here?  Then hopefully none of the go-related targets even get added in CMake.', 'comment_created': datetime.datetime(2020, 6, 22, 16, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443667443, 'comment_body': ""I imagine that this shouldn't be needed because of the `FATAL_ERROR` that comes next?"", 'comment_created': datetime.datetime(2020, 6, 22, 16, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443726700, 'comment_body': ""If we use `not_found_return()` here, we are still building all go-shared library, because `BUILD_GO_SHLIB=ON` and hence we are adding all the go related targets.  BTW we are calling `not_found_return()` [here](https://github.com/mlpack/mlpack/blob/60ac0bea5cc100edbf8f8be7dd048449c9c66ff5/src/mlpack/bindings/go/CMakeLists.txt#L40), if cmake doesn't found any of the dependencies."", 'comment_created': datetime.datetime(2020, 6, 22, 17, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 443733562, 'comment_body': ""Ok, sorry, maybe I was getting a little confused.  Thanks for the clarifications.  But I still haven't figured out why this is needed---`BUILD_GO_SHLIB` is only ever referenced from `src/mlpack/bindings/go/CMakeLists.txt`, so if we call `not_found_return()`, then it won't ever be used anyway since `not_found_return()` will stop any further processing of `src/mlpack/bindings/go/CMakeLists.txt`.  So I don't think I understand why we need to set it to `OFF`?"", 'comment_created': datetime.datetime(2020, 6, 22, 17, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443735513, 'comment_body': ""No problem I can remove this, but there is no harm too. \r\nAs when user use `-DBUILD_GO_BINDINGS=ON` and if it cause `FATAL_ERROR`, Again if user use `-DBUILD_GO_BINDINGS=OFF` without specifying `-DBUILD_GO_SHLIB=ON` but still we are building all the go shared libraries because `-DBUILD_GO_SHLIB=ON` internally. But it doesn't seem a practical situation, your call I can remove this."", 'comment_created': datetime.datetime(2020, 6, 22, 18, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 443740122, 'comment_body': ""I see, I did a bit of digging.  It turns out one of my assumptions is wrong:  I had thought that `not_found_return()` would exit the current CMake file.  But it turns out that this is not true!  I wonder if `not_found_return()` actually has to be a macro.  In any case, it's not a big deal, the changes you made seem to work fine.\r\n\r\nWhatever you want to do here is fine with me, it works either way.  I think that the discussion here covers the other comment too. :+1:"", 'comment_created': datetime.datetime(2020, 6, 22, 18, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443746265, 'comment_body': 'I had use `BUILD_GO_SHLIB` because when we ask the user to download go-bindings, then we also ask the user to build these go-shared libraries on their own, and this option will help the user to just build the shared libraries required by the go-bindings and not the complete go-bindings (.go and .h files).', 'comment_created': datetime.datetime(2020, 6, 22, 18, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 443747551, 'comment_body': 'That\'s fair, all I mean is, if `not_found_return()` actually *did* stop processing `src/mlpack/bindings/go/CMakeLists.txt`, then we wouldn\'t need to set `BUILD_GO_SHLIB` like you did in this change.  I think the change you made is just fine, but another option could be to ""fix"" `not_found_return()` so it actually stops processing the file, and then these changes wouldn\'t be needed.', 'comment_created': datetime.datetime(2020, 6, 22, 18, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443757221, 'comment_body': 'Currently `not_found_return()` depends on both `BUILD_GO_BINDNIGS` and  `BUILD_GO_SHLIB` for stop processing the file.\r\nIt seems that `not_found_return()` must only depend  on `BUILD_GO_BINDNIGS`. If you don\'t mind, then I can open a PR afterwards for the ""fix"".', 'comment_created': datetime.datetime(2020, 6, 22, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 443888589, 'comment_body': ""Either way is fine---the change you've made here seems to work.  In fact this is already approved so I'll go ahead and merge this now, and if you want to provide another update later feel free."", 'comment_created': datetime.datetime(2020, 6, 23, 0, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443888651, 'comment_body': ""I think it's fine as is, no worries. :+1:"", 'comment_created': datetime.datetime(2020, 6, 23, 0, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '3da07cf45a43599b0fa8a9e4211d1761712d7e84', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e793bed4aee2245e0d7e092053460811cd07ae52', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fcbc7de3b806b25224c79bf62a75366818589dc', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1f5dd773a3b258615d70c6ae1151819dfa8a3c', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d472518125fd813393bf52190bf3452f851b51', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ac0bea5cc100edbf8f8be7dd048449c9c66ff5', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}]",Yashwant Singh Parihar,25639321,Yashwantsingh.sngh@gmail.com,User,,19,,9,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1592,4981,183,321,30199,25,11,15,"[{'id': 606939959, 'number': 2899, 'closed': datetime.datetime(2021, 4, 3, 3, 6, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 1, 5, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 164711.0, 'time_delta': '1 day, 21:45:11', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 604932324, 'number': 2896, 'closed': datetime.datetime(2021, 4, 5, 4, 14, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 31, 3, 53, 55, tzinfo=datetime.timezone.utc), 'time_taken': 433230.0, 'time_delta': '5 days, 0:20:30', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 554627134, 'number': 2806, 'closed': datetime.datetime(2021, 3, 21, 5, 20, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 14, 4, 2, 39, tzinfo=datetime.timezone.utc), 'time_taken': 5707096.0, 'time_delta': '66 days, 1:18:16', 'additions': 32, 'deletions': 19, 'state': 'closed'}, {'id': 545200683, 'number': 2780, 'closed': datetime.datetime(2020, 12, 25, 13, 0, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 24, 8, 2, 53, tzinfo=datetime.timezone.utc), 'time_taken': 104268.0, 'time_delta': '1 day, 4:57:48', 'additions': 83, 'deletions': 2, 'state': 'closed'}, {'id': 522314747, 'number': 2719, 'closed': datetime.datetime(2020, 11, 21, 3, 0, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 17, 10, 48, 30, tzinfo=datetime.timezone.utc), 'time_taken': 317503.0, 'time_delta': '3 days, 16:11:43', 'additions': 2, 'deletions': 14, 'state': 'closed'}, {'id': 513561339, 'number': 2689, 'closed': datetime.datetime(2020, 11, 3, 23, 23, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 1, 5, 58, 36, tzinfo=datetime.timezone.utc), 'time_taken': 235520.0, 'time_delta': '2 days, 17:25:20', 'additions': 92, 'deletions': 0, 'state': 'closed'}, {'id': 512766456, 'number': 2685, 'closed': datetime.datetime(2020, 11, 18, 2, 59, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 30, 5, 27, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1632774.0, 'time_delta': '18 days, 21:32:54', 'additions': 38, 'deletions': 13, 'state': 'closed'}, {'id': 508006621, 'number': 2680, 'closed': datetime.datetime(2020, 10, 24, 16, 8, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 22, 4, 38, 35, tzinfo=datetime.timezone.utc), 'time_taken': 214172.0, 'time_delta': '2 days, 11:29:32', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 498659348, 'number': 2661, 'closed': datetime.datetime(2020, 10, 11, 17, 6, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 6, 15, 52, 48, tzinfo=datetime.timezone.utc), 'time_taken': 436441.0, 'time_delta': '5 days, 1:14:01', 'additions': 30, 'deletions': 11, 'state': 'closed'}, {'id': 497902428, 'number': 2659, 'closed': datetime.datetime(2020, 10, 10, 1, 27, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 5, 14, 37, 38, tzinfo=datetime.timezone.utc), 'time_taken': 384608.0, 'time_delta': '4 days, 10:50:08', 'additions': 15, 'deletions': 35, 'state': 'closed'}, {'id': 496840605, 'number': 2648, 'closed': datetime.datetime(2020, 10, 4, 6, 47, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 11, 10, 32, tzinfo=datetime.timezone.utc), 'time_taken': 157027.0, 'time_delta': '1 day, 19:37:07', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 495951809, 'number': 2642, 'closed': datetime.datetime(2020, 10, 2, 10, 34, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 1, 4, 57, 3, tzinfo=datetime.timezone.utc), 'time_taken': 106648.0, 'time_delta': '1 day, 5:37:28', 'additions': 62, 'deletions': 8, 'state': 'closed'}, {'id': 468428601, 'number': 2568, 'closed': datetime.datetime(2020, 8, 21, 22, 18, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 10, 48, 41, tzinfo=datetime.timezone.utc), 'time_taken': 473361.0, 'time_delta': '5 days, 11:29:21', 'additions': 51, 'deletions': 32, 'state': 'closed'}, {'id': 465122424, 'number': 2558, 'closed': datetime.datetime(2020, 8, 19, 22, 39, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 8, 10, 54, tzinfo=datetime.timezone.utc), 'time_taken': 916089.0, 'time_delta': '10 days, 14:28:09', 'additions': 1927, 'deletions': 1110, 'state': 'closed'}, {'id': 464586852, 'number': 2556, 'closed': datetime.datetime(2020, 8, 30, 15, 11, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 12, 50, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1995700.0, 'time_delta': '23 days, 2:21:40', 'additions': 8316, 'deletions': 458, 'state': 'closed'}, {'id': 453630571, 'number': 2530, 'closed': datetime.datetime(2020, 7, 21, 4, 30, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 16, 44, 57, tzinfo=datetime.timezone.utc), 'time_taken': 42351.0, 'time_delta': '11:45:51', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 452603738, 'number': 2520, 'closed': datetime.datetime(2020, 7, 21, 0, 15, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 14, 52, 40, tzinfo=datetime.timezone.utc), 'time_taken': 120158.0, 'time_delta': '1 day, 9:22:38', 'additions': 76, 'deletions': 76, 'state': 'closed'}, {'id': 441007032, 'number': 2483, 'closed': datetime.datetime(2020, 6, 29, 13, 14, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 5, 57, 50, tzinfo=datetime.timezone.utc), 'time_taken': 112590.0, 'time_delta': '1 day, 7:16:30', 'additions': 2, 'deletions': 5, 'state': 'closed'}, {'id': 435182010, 'number': 2460, 'closed': datetime.datetime(2020, 6, 23, 0, 3, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 12, 30, 39, tzinfo=datetime.timezone.utc), 'time_taken': 559971.0, 'time_delta': '6 days, 11:32:51', 'additions': 451, 'deletions': 915, 'state': 'closed'}, {'id': 404520326, 'number': 2373, 'closed': datetime.datetime(2020, 4, 20, 19, 26, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 16, 29, 57, tzinfo=datetime.timezone.utc), 'time_taken': 356184.0, 'time_delta': '4 days, 2:56:24', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 391884506, 'number': 2320, 'closed': datetime.datetime(2020, 3, 23, 15, 56, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 21, 17, 4, 49, tzinfo=datetime.timezone.utc), 'time_taken': 168703.0, 'time_delta': '1 day, 22:51:43', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 387196933, 'number': 2282, 'closed': datetime.datetime(2020, 3, 12, 17, 33, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 11, 46, 58, tzinfo=datetime.timezone.utc), 'time_taken': 20792.0, 'time_delta': '5:46:32', 'additions': 15, 'deletions': 12, 'state': 'closed'}, {'id': 386695719, 'number': 2278, 'closed': datetime.datetime(2020, 3, 17, 14, 49, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 13, 39, 54, tzinfo=datetime.timezone.utc), 'time_taken': 522594.0, 'time_delta': '6 days, 1:09:54', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 306249731, 'number': 1973, 'closed': datetime.datetime(2019, 8, 11, 15, 1, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 11, 1, 33, 18, tzinfo=datetime.timezone.utc), 'time_taken': 48515.0, 'time_delta': '13:28:35', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 294214536, 'number': 1947, 'closed': datetime.datetime(2019, 7, 6, 11, 2, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 7, 3, 15, 10, 35, tzinfo=datetime.timezone.utc), 'time_taken': 244317.0, 'time_delta': '2 days, 19:51:57', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 290455940, 'number': 1935, 'closed': datetime.datetime(2019, 10, 9, 2, 6, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 21, 4, 20, 35, tzinfo=datetime.timezone.utc), 'time_taken': 9495974.0, 'time_delta': '109 days, 21:46:14', 'additions': 1445, 'deletions': 1, 'state': 'closed'}, {'id': 287963200, 'number': 1922, 'closed': datetime.datetime(2019, 6, 16, 15, 4, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 13, 14, 49, 29, tzinfo=datetime.timezone.utc), 'time_taken': 260099.0, 'time_delta': '3 days, 0:14:59', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 284284929, 'number': 1916, 'closed': datetime.datetime(2019, 6, 21, 1, 3, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 1, 17, 5, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1670260.0, 'time_delta': '19 days, 7:57:40', 'additions': 342, 'deletions': 106, 'state': 'closed'}, {'id': 280184493, 'number': 1899, 'closed': datetime.datetime(2019, 7, 6, 20, 25, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 5, 19, 17, 34, 41, tzinfo=datetime.timezone.utc), 'time_taken': 4157459.0, 'time_delta': '48 days, 2:50:59', 'additions': 650, 'deletions': 1, 'state': 'closed'}, {'id': 274078754, 'number': 1884, 'closed': datetime.datetime(2020, 6, 14, 14, 38, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 27, 3, 20, 19, tzinfo=datetime.timezone.utc), 'time_taken': 35810276.0, 'time_delta': '414 days, 11:17:56', 'additions': 8123, 'deletions': 67, 'state': 'closed'}, {'id': 259470182, 'number': 1765, 'closed': datetime.datetime(2019, 5, 20, 1, 52, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 8, 13, 7, 46, tzinfo=datetime.timezone.utc), 'time_taken': 6266670.0, 'time_delta': '72 days, 12:44:30', 'additions': 951, 'deletions': 40, 'state': 'closed'}, {'id': 257447215, 'number': 1750, 'closed': datetime.datetime(2019, 3, 19, 15, 12, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 1, 13, 40, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1560747.0, 'time_delta': '18 days, 1:32:27', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 252598578, 'number': 1717, 'closed': datetime.datetime(2019, 3, 28, 15, 43, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 2, 13, 8, 16, 21, tzinfo=datetime.timezone.utc), 'time_taken': 3742030.0, 'time_delta': '43 days, 7:27:10', 'additions': 832, 'deletions': 110, 'state': 'closed'}, {'id': 251097477, 'number': 1711, 'closed': datetime.datetime(2019, 2, 21, 15, 3, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 2, 7, 12, 32, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1218629.0, 'time_delta': '14 days, 2:30:29', 'additions': 143, 'deletions': 3, 'state': 'closed'}]"
