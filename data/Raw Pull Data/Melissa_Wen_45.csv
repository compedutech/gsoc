pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
417936000,src: add grep utility to explore feature,"This patch expands the feature -explore- adding the grep utility
for searching plain-text data in files that are not under git.
Related to #61 

Signed-off-by: Melissa Wen <melissa.srw@gmail.com>",False,178,https://api.github.com/repos/kworkflow/kworkflow/pulls/178,https://github.com/kworkflow/kworkflow/pull/178,closed,229,25,5,1,13,14,0,0,[],2020-05-14 11:34:24+00:00,2020-06-07 13:50:09+00:00,2081745.0,"24 days, 2:15:45","[{'comment_id': 425492185, 'comment_body': 'There is an extra space here', 'comment_created': datetime.datetime(2020, 5, 14, 23, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 425492448, 'comment_body': 'You forgot to add the function documentation.', 'comment_created': datetime.datetime(2020, 5, 14, 23, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 425494740, 'comment_body': 'in this case, it could be nice if we also support `-g`, i.e., `kw e -g lala` or `kw e --grep lala`.', 'comment_created': datetime.datetime(2020, 5, 15, 0, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 425495584, 'comment_body': 'Since you decided to use `cmd_manager` you can use the flag `TEST_MODE` for implementing a new test that validate the command correctness. Take a look at `mk_test`, test `mk_kernel_uninstall_Test` for reference.', 'comment_created': datetime.datetime(2020, 5, 15, 0, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 425496144, 'comment_body': 'To make this test a little bit more robust, I recommend you to add a full text in `tests/samples` and use it for validating your grep function.', 'comment_created': datetime.datetime(2020, 5, 15, 0, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 425919483, 'comment_body': 'We currently don use the `-w` flag in the ""git grepping mode"". So, for consistency, I think we should remove it here or add it in the git-grep search as well. Personally, I prefer not to use `-w`, since we wouldn\'t allow users to search for ""non-words"". And they can always resort to something like `""\\bpattern\\b""`, to simulate the same effect, without `-w`.', 'comment_created': datetime.datetime(2020, 5, 15, 16, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'matheustavares', 'type': 'User'}, {'comment_id': 426447241, 'comment_body': 'I agree with the homogeneity for the feature as a whole. So, I will remove -w in my next version', 'comment_created': datetime.datetime(2020, 5, 18, 8, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'melissawen', 'type': 'User'}, {'comment_id': 429553939, 'comment_body': 'See the comments about this function implementation below.', 'comment_created': datetime.datetime(2020, 5, 23, 15, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 429555319, 'comment_body': 'This condition is always false because `$(in_git_work_tree)` is empty. Inside `in_git_work_tree` you did not return anything, `exit 1` or `exit 0` only change the value inside the variable `$?` and with `$(in_git_work_tree)` you\'re not checking for this value. If you want to test what I mean, just create tags (`make tags`) in your kernel repository and try to use your implementation for searching `vkms_vblank_simulate`; in my case I got:\r\n\r\n```bash\r\nkw e  vkms_vblank_simulate drivers/gpu/drm/vkms/\r\ndrivers/gpu/drm/vkms/vkms_crtc.c:10:static enum hrtimer_restart vkms_vblank_simulate(struct hrtimer *timer)\r\ndrivers/gpu/drm/vkms/vkms_crtc.c:65:    out->vblank_hrtimer.function = &vkms_vblank_simulate;\r\ntags:4871065:vkms_vblank_simulate       drivers/gpu/drm/vkms/vkms_crtc.c        /^static enum hrtimer_restart vkms_vblank_simulate(struct hrtimer *timer)$/;""   f       typeref:enum:hrtimer_restart    file:   signature:(struct hrtimer * timer)\r\nrtimer_restart    file:   signature:(struct hrtimer * timer)\r\n```\r\nMy suggestion for fixing this issue:\r\n\r\n```bash\r\n# This function is responsible for checking if the folder is under git control.\r\nfunction in_git_work_tree\r\n{\r\n  output=$(git rev-parse --is-inside-work-tree 2>/dev/null)\r\n  ret=""$?""\r\n\r\n  # If git rev-parse --is-inside-work-tree executes without issue it will\r\n  # return 0, however, we can get false as an output.\r\n  if [[ ""$ret"" -eq 0 && ""$output"" -eq ""true"" ]]; then\r\n    return 0\r\n  fi\r\n\r\n  return 1\r\n}\r\n\r\n# This function detects if the files are under the git repository\r\n# control and properly handles the search using git grep tool.\r\n#\r\n# @regex Specifies the regex that we want to search in the files\r\n# @path Narrow down the search\r\n# @flag How to display a command, the default value is ""SILENT"". For more\r\n#       options see `src/kwlib.sh` function `cmd_manager`\r\nfunction explore_files_under_git()\r\n{\r\n  local regex=""$1""\r\n  local path=""$2""\r\n  local flag=""$3""\r\n\r\n  # Silent by default\r\n  flag=${flag:-""SILENT""}\r\n\r\n  # If user only set regex value\r\n  path=${path:-"".""}\r\n\r\n  output=$(in_git_work_tree)\r\n  if [[ ""$?"" != 0 ]]; then\r\n    cmd_manager ""$flag"" ""git grep --no-index -e \\""$regex\\"" -nI $patch""\r\n  else\r\n    cmd_manager ""$flag"" ""git grep -e \\""$regex\\"" -nI $path""\r\n  fi\r\n}\r\n```\r\n ', 'comment_created': datetime.datetime(2020, 5, 23, 15, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 429555385, 'comment_body': 'Document the return value, for example\r\n\r\n```\r\n...\r\n# Returns:\r\n# Explain the return\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 15, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 429555613, 'comment_body': 'Add the flag `--color` to make the final results a little bit better.', 'comment_created': datetime.datetime(2020, 5, 23, 15, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 429555753, 'comment_body': 'You should extend the below line with `~~~~~`, otherwise you will break the documentation style. For example, try `kw man` after installing your changes and you will see that this section is broken.', 'comment_created': datetime.datetime(2020, 5, 23, 15, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 429557120, 'comment_body': 'In your code you used `cmd_manager`, this feature provides support for `TEST_MODE` which enables us to test the command sequence. I recommend you to add extra tests taking advantage of this feature, I wrote the below example for helping you to understand how to do it:\r\n\r\n```bash\r\nfunction explore_grep_cmd_Test\r\n{\r\n  local ID\r\n  local -r current_path=""$PWD""\r\n  local expected_cmd=""grep --color -nrI . -e \\""GNU grep\\""""\r\n\r\n  cd ""$test_path""\r\n\r\n  ID=1\r\n  output=$(explore --grep ""GNU grep"" ""."" ""TEST_MODE"")\r\n  assertEquals ""($ID)"" ""$expected_cmd"" ""$output""\r\n  cd ""$current_path""\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 15, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 429557151, 'comment_body': 'You did not use these variables, you can drop it.', 'comment_created': datetime.datetime(2020, 5, 23, 15, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}]","[{'commit_sha': '986a1b168cb36ea2c3a783007e7ec8ce5af375d1', 'committer_username': 'melissawen', 'committer_name': 'Melissa Wen', 'committer_email': None, 'commit_date': datetime.datetime(2012, 12, 9, 22, 14, 34, tzinfo=datetime.timezone.utc)}]",Melissa Wen,3003316,,User,,13,,1,32
413043996,kw: small issue on u/mount alert message,"After u/mount command an alert is exibited, however the alert
showed a message of -build (sic) completion-. This patch solve this
small issue.

Signed-off-by: Melissa Wen <melissa.srw@gmail.com>",False,176,https://api.github.com/repos/kworkflow/kworkflow/pulls/176,https://github.com/kworkflow/kworkflow/pull/176,closed,2,2,1,1,2,0,0,0,[],2020-05-04 16:07:57+00:00,2020-05-12 11:35:47+00:00,674870.0,"7 days, 19:27:50",[],"[{'commit_sha': '93c1039bac75f5b60e2f4482e4d6cc8dee4a644f', 'committer_username': 'melissawen', 'committer_name': 'Melissa Wen', 'committer_email': None, 'commit_date': datetime.datetime(2012, 12, 9, 22, 14, 34, tzinfo=datetime.timezone.utc)}]",Melissa Wen,3003316,,User,,13,,1,32
420286500,Add support for deployment in a debian-VM,"This is a proposal to make kw support the deployment in the vm space. This may partially solve issue #139, as it does not include Arch-vm yet.

Signed-off-by: Melissa Wen <melissa.srw@gmail.com>",False,181,https://api.github.com/repos/kworkflow/kworkflow/pulls/181,https://github.com/kworkflow/kworkflow/pull/181,closed,397,83,7,2,4,42,0,0,[],2020-05-19 18:20:41+00:00,2020-12-26 15:24:10+00:00,19083809.0,"220 days, 21:03:29","[{'comment_id': 432964302, 'comment_body': 'modules_install() function only cares about installing modules which is a simple `make modules_install`. Based on that, there is no good reason to restrict the module installation. Maybe, just make sure that ""${configurations[mount_point]}"" has a valid parameter before call `module_install_to`', 'comment_created': datetime.datetime(2020, 5, 31, 16, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432964546, 'comment_body': 'keep in mind that we want to keep kw default support to Arch and Debian based systems, for this reason, you can change ""debian"" to ""none"".', 'comment_created': datetime.datetime(2020, 5, 31, 16, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432964564, 'comment_body': 'add new line', 'comment_created': datetime.datetime(2020, 5, 31, 16, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432965029, 'comment_body': 'You probably don\'t want to return ""1"", since it means ""EPERM 1 Operation not permitted"". I recommend you to validate the correct behavior of `vm_install_kernel` with something like this:\r\n```bash\r\nvm_install_kernel ""$name"" ""$local"" ""$architecture"" ""$flag""\r\nif [[ ""$?"" != 0 ]]; then\r\n say something\r\n return ERROR_CODE\r\nfi\r\n```', 'comment_created': datetime.datetime(2020, 5, 31, 16, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432965481, 'comment_body': 'I got confused when I read this comment because it does not describe the `if` behavior.', 'comment_created': datetime.datetime(2020, 5, 31, 17, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432965613, 'comment_body': 'All this ""configuration"" access is a little bit annoying to read, add `configurations[mount_point]}/boot/` in a variable or something a little bit easier to read.', 'comment_created': datetime.datetime(2020, 5, 31, 17, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432965662, 'comment_body': 'Do not forget to use """" around bash variables.', 'comment_created': datetime.datetime(2020, 5, 31, 17, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432966425, 'comment_body': 'tbh, after I completely read this function I could not strongly justify its existence since it has a lot of code duplication from `install_kernel`. For example, in the `install_kernel` you have:\r\n\r\n```bash\r\n  # Copy kernel image\r\n  if [[ -f ""/boot/vmlinuz-$name"" ]]; then\r\n    cmd=""$sudo_cmd cp /boot/vmlinuz-$name /boot/vmlinuz-$name.old""\r\n    cmd_manager ""$flag"" ""$cmd""\r\n  f\r\n\r\n  if [[ ! -z ""$local"" ]]; then\r\n    [[ ! -z ""$architecture"" ]] && architecture=""x86_64""\r\n    cmd=""$sudo_cmd cp -v arch/$architecture/boot/bzImage /boot/vmlinuz-$name""\r\n    cmd_manager ""$flag"" ""$cmd""\r\n  else\r\n    cmd=""$sudo_cmd cp -v vmlinuz-$name /boot/vmlinuz-$name""\r\n    cmd_manager ""$flag"" ""$cmd""\r\n  fi\r\n```\r\nYou probably can reuse the above code if you try to create a prefix variable in the path. For example:\r\n```bash\r\nif [[ ""$local"" == \'vm\' ]]; then\r\n[..]\r\npath_prefix=""${configurations[mount_point]}""\r\n[..]\r\nfi\r\n[..]\r\ncmd=""$sudo_cmd cp $path_prefix/boot/vmlinuz-$name $path_prefix/boot/vmlinuz-$name.old""\r\n[..]\r\ncmd=""$sudo_cmd cp -v vmlinuz-$name $path_prefix/boot/vmlinuz-$name""\r\n[..]\r\netc\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 31, 17, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432967364, 'comment_body': 'I\'ve to admit that I don\'t like this asymmetry with `vm_umount`, maybe we can try to find an elegant solution for this problem. Maybe something like the pseudo-code:\r\n\r\n```bash\r\n# in the file src/mk.sh\r\nfunction kernel_deploy\r\n{\r\n[..]\r\nif [[ is_vm_deploy ]]; then\r\n   vm_mount\r\nfi\r\n[..]\r\nmodules_install """" ""$target"" ""$remote""\r\n[..]\r\nif [[ ""$modules"" == 0 ]]; then\r\n    name=$(make kernelrelease)\r\n    kernel_install ""$reboot"" ""$name"" """" ""$target"" ""$remote""\r\nfi\r\nif [[ there_is_something_mounted ]]; then\r\n   vm_umount\r\nfi\r\n}\r\n\r\n# src/plugins/kernel_install/debian.sh\r\nif [[ there_is_something_mounted ]]; then\r\n   vm_umount\r\nfi\r\n sleep 0.5s\r\n[..]\r\n```', 'comment_created': datetime.datetime(2020, 5, 31, 17, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432967541, 'comment_body': 'You probably don\'t want to ""exit"" from here. Try something like this:\r\n\r\n```bash\r\nvm_update_boot_loader ""$name"" ""$cmd""\r\nif [[ ""$?"" != 0 ]]; then\r\n...\r\nreturn ERRNO_CODE\r\nfi\r\nreturn 0', 'comment_created': datetime.datetime(2020, 5, 31, 17, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432967785, 'comment_body': 'For this part I recommend:\r\n1. Add all of this in a guestfish command in a variable and use `cmd_manager`;\r\n2. Validate `${configurations[qemu_path_image]}` to make sure that is a valid path;\r\n3. After the execution of this command, validate the return ""$?""', 'comment_created': datetime.datetime(2020, 5, 31, 17, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 432967868, 'comment_body': 'Add documentation about the guestfish command that you use.', 'comment_created': datetime.datetime(2020, 5, 31, 17, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 436350460, 'comment_body': 'I did this from our discussion of aborting the process as soon as I know that it cannot be completed. That is, to cancel early in the process and not in the middle of it.  The previous behavior was to install modules and, after that, check if the distro is valid, aborting the deployment in the middle of the ""bd --vm"" execution. However, I will work on the arch version, and, probably, it will not be necessary. ', 'comment_created': datetime.datetime(2020, 6, 7, 10, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'melissawen', 'type': 'User'}, {'comment_id': 437402761, 'comment_body': 'I ""exited"" because the process is complete and the remain operations after that are related to local deploy and not vm deploy (ie: I want to skip everything after that point). ', 'comment_created': datetime.datetime(2020, 6, 9, 13, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'melissawen', 'type': 'User'}, {'comment_id': 447876705, 'comment_body': 'drop the extra space', 'comment_created': datetime.datetime(2020, 6, 30, 17, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 447877749, 'comment_body': 'Maybe we could have an extra level of validation here by adding:\r\n```\r\nreturn ""$?""\r\n```\r\nwith that, we can validate the result in the function that invokes this one.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 447879229, 'comment_body': ""We don't need '!', '.' is enough."", 'comment_created': datetime.datetime(2020, 6, 30, 18, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 447883113, 'comment_body': ""I have seen this function multiple times in your code and I strongly suggest you encapsulate it in a single function with a simple interface. Maybe you could rename `vm_mount` and `vm_umont` for `vm_mount_entry` and `vm_umount_exit` (I'm not sure about these names). These function implementation could be something like that:\r\n\r\n```bash\r\nvm_mount_entry()\r\n{\r\n VM is already mounted?\r\n YES -> Do nothing\r\n NO -> Mount it\r\n return SOMETHING\r\n}\r\n\r\nvm_umount_exit()\r\n{\r\n VM is already umounted?\r\n YES -> Umount it\r\n NO -> Do nothing\r\n return SOMETHING\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 6, 30, 18, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 447883994, 'comment_body': 'I think we should keep the log output. Maybe we can catch the entire output in a variable, and only print it if we got an error.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 447884300, 'comment_body': 'Rename `$local` to `$target` in this entire script.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 447885611, 'comment_body': '`cp -v .config $path_prefix/boot/config-$name` -> `cp -v .config ""$path_prefix/boot/config-$name""`\r\nAdd quotes.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 448510375, 'comment_body': 'When I deployed to a remote machine, I got this error:\r\n\r\n```\r\ndistro_deploy.sh: line 162: vm_umount: command not found\r\n```\r\n\r\nI think vm_umount get invoke here. If you want to reproduce this bug:\r\n1. Enable remote deploy\r\n2. Turn a Arch VM machine on\r\n3. After you have a connection, deploy it using the remote option.\r\n\r\nYou should see the error at the end of the deploy.', 'comment_created': datetime.datetime(2020, 7, 1, 17, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 449794938, 'comment_body': 'How about including it directly in the original vm_u/mount command and then returning some number to enable the caller to treats the ""do nothing""?', 'comment_created': datetime.datetime(2020, 7, 4, 18, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'melissawen', 'type': 'User'}, {'comment_id': 523439095, 'comment_body': 'You forgot to add ""dracut"" in the setup as a new dependency. Add it in the array `arch_packages` inside `setup.h`.\r\nAdditionally, I noticed that I need to install dracut inside the VM. Is that expected?', 'comment_created': datetime.datetime(2020, 11, 14, 16, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523440055, 'comment_body': 'In the file `documentation/content/codingstyle.rst`, we reference this function; I know that was just an example. Still, I think it is a good idea to replace that reference from our documentation.', 'comment_created': datetime.datetime(2020, 11, 14, 17, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523440512, 'comment_body': 'Why did you decide to use 126? From errno documentation we have:\r\n`ENOKEY 126 Required key not available`\r\nMaybe keep it as 125:\r\n`ECANCELED 125 Operation canceled`\r\n\r\nHowever, maybe make more sense to exit using `""$ret""`.\r\n', 'comment_created': datetime.datetime(2020, 11, 14, 17, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523440647, 'comment_body': 'I think this command came from the dawn of kw, and it does not make sense anymore. Feel free to drop it.', 'comment_created': datetime.datetime(2020, 11, 14, 17, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523440739, 'comment_body': 'Use double quote around `$ret`, i.e., `""$ret""`. See: https://github.com/koalaman/shellcheck/wiki/Sc2086', 'comment_created': datetime.datetime(2020, 11, 14, 17, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523441271, 'comment_body': 'Since you changed plenty of things in this function, I recommend you to add code documentation on top of this function. For reference, take a look at the documentation in the function `get_remote_info`.', 'comment_created': datetime.datetime(2020, 11, 14, 17, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523444495, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 11, 14, 17, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523445358, 'comment_body': 'Could you update this comment? Just try to make it evident that the below condition will create a backup from the current kernel (`*.old`) before replacing it.', 'comment_created': datetime.datetime(2020, 11, 14, 17, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523446360, 'comment_body': 'I don\'t think we should return an error here. Suppose that invoke `vm_umount` twice, the first time it will successfully umount, but the second time there is nothing to umount, we will get an error code. I think you can keep `return ""$ret""` at the end of the function and also drop `return ""$ret""` inside the function. In fact, this situation happens inside the plugin:\r\nkernel_install() -> plugin install_kernel() -> vm_umount\r\n...\r\nkernel_install() invokes vm_umount in the end', 'comment_created': datetime.datetime(2020, 11, 14, 18, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523446814, 'comment_body': '/performes/performs/', 'comment_created': datetime.datetime(2020, 11, 14, 18, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523446883, 'comment_body': 'Also document the return value.', 'comment_created': datetime.datetime(2020, 11, 14, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523447089, 'comment_body': 'Use double-quotes', 'comment_created': datetime.datetime(2020, 11, 14, 18, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523755892, 'comment_body': ""This condition breaks the reboot option in a remote machine. If you want to avoid the reboot option in a VM, maybe you should consider something like `$target != vm`.\r\nAdditionally, since you're here, replace `=` for `==` in the reboot comparison."", 'comment_created': datetime.datetime(2020, 11, 15, 13, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523758666, 'comment_body': 'Maybe change to something like this:\r\n`warning "" -> Updating grub and boot files for $name, this can take a few minutes. Please, be patient...""`', 'comment_created': datetime.datetime(2020, 11, 15, 13, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 523761160, 'comment_body': 'I think we can improve this function in two different areas:\r\n1. Let\'s make it parameterizable by allowing qemu info to be passed via parameters;\r\n2. Let\'s use `cmd_manager()` because we can use the flag TEST_MODE, which will produce a string that allows us to implement an unit test for this function.\r\n\r\nThe following code is functional and illustrates what I mean:\r\n```bash\r\nfunction vm_mount\r\n{\r\n  local flag=""$1""\r\n  local qemu_img_path=""$2""\r\n  local mount_point_path=""$3""\r\n  local ret\r\n  local guestmount_cmd\r\n\r\n  flag=${flag:-""""}\r\n  qemu_img_path=""${qemu_img_path:-${configurations[qemu_path_image]}}""\r\n  mount_point_path=""${mount_point_path:-${configurations[mount_point]}}""\r\n\r\n  [[ $(findmnt ""$mount_point_path"") ]] && return 125\r\n\r\n  mkdir -p $mount_point_path\r\n\r\n  say ""Mount $qemu_img_path in $mount_point_path""\r\n\r\n  guestmount_cmd=""guestmount -a $qemu_img_path -i $mount_point_path 2>&1""\r\n  cmd_manager ""$flag"" ""$guestmount_cmd""\r\n  if [[ ""$ret"" ]] ; then\r\n    complain ""Something went wrong when tried to mount $qemu_img_path in $mount_point_path""\r\n    return ""$ret""\r\n  fi\r\n\r\n  return 0\r\n}\r\n```\r\n\r\nWith that, you can implement an unit test (take a look at `kernel_install_Test` in the file `mk_test.sh` for an example on how to implement a test for this function).', 'comment_created': datetime.datetime(2020, 11, 15, 13, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 524274556, 'comment_body': 'Also, the same set of comments that I made for `vm_mount`, applies here.', 'comment_created': datetime.datetime(2020, 11, 16, 13, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rodrigosiqueira', 'type': 'User'}, {'comment_id': 525177709, 'comment_body': ""it isn't necessary on our local/host machine, only arch VM needs dracut installed. any suggestion on how to inform users?"", 'comment_created': datetime.datetime(2020, 11, 17, 14, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'melissawen', 'type': 'User'}, {'comment_id': 525223068, 'comment_body': 'I used 126 from this reference: https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html\r\n`""If a command is found but is not executable, the return status is 126."" `Is not the right reference?\r\nAnyway, I will replace for `""$ret""`', 'comment_created': datetime.datetime(2020, 11, 17, 15, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'melissawen', 'type': 'User'}, {'comment_id': 525347672, 'comment_body': 'Just to let you know, I still need to apply it', 'comment_created': datetime.datetime(2020, 11, 17, 17, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'melissawen', 'type': 'User'}]","[{'commit_sha': '92e799df711988762c744646f5d149a497188860', 'committer_username': 'melissawen', 'committer_name': 'Melissa Wen', 'committer_email': None, 'commit_date': datetime.datetime(2012, 12, 9, 22, 14, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a091e83e090c6abb2f71a1990958e80dea5c85d4', 'committer_username': 'melissawen', 'committer_name': 'Melissa Wen', 'committer_email': None, 'commit_date': datetime.datetime(2012, 12, 9, 22, 14, 34, tzinfo=datetime.timezone.utc)}]",Melissa Wen,3003316,,User,,13,,1,32

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
133577268,kworkflow,kworkflow/kworkflow,Shell,89,127,10,43,1063,183,2,13,"[{'id': 1508917757, 'number': 915, 'closed': datetime.datetime(2023, 9, 9, 22, 46, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 9, 19, 27, 35, tzinfo=datetime.timezone.utc), 'time_taken': 11956.0, 'time_delta': '3:19:16', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 1500399540, 'number': 907, 'closed': datetime.datetime(2023, 9, 9, 13, 29, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 3, 22, 49, 16, tzinfo=datetime.timezone.utc), 'time_taken': 484805.0, 'time_delta': '5 days, 14:40:05', 'additions': 3, 'deletions': 6, 'state': 'closed'}, {'id': 1500031217, 'number': 906, 'closed': datetime.datetime(2023, 9, 6, 0, 42, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 2, 17, 33, 50, tzinfo=datetime.timezone.utc), 'time_taken': 284908.0, 'time_delta': '3 days, 7:08:28', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1500030273, 'number': 905, 'closed': datetime.datetime(2023, 9, 2, 17, 30, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 2, 17, 29, 51, tzinfo=datetime.timezone.utc), 'time_taken': 50.0, 'time_delta': '0:00:50', 'additions': 10510, 'deletions': 3301, 'state': 'closed'}, {'id': 1131542599, 'number': 744, 'closed': datetime.datetime(2022, 12, 12, 18, 54, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 22, 10, 36, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1757880.0, 'time_delta': '20 days, 8:18:00', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1130345779, 'number': 743, 'closed': datetime.datetime(2022, 12, 31, 15, 51, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 16, 59, 10, tzinfo=datetime.timezone.utc), 'time_taken': 3451926.0, 'time_delta': '39 days, 22:52:06', 'additions': 27, 'deletions': 0, 'state': 'closed'}, {'id': 1130237198, 'number': 742, 'closed': datetime.datetime(2022, 11, 23, 13, 57, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 15, 37, 47, tzinfo=datetime.timezone.utc), 'time_taken': 166784.0, 'time_delta': '1 day, 22:19:44', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 599031210, 'number': 207, 'closed': datetime.datetime(2021, 3, 24, 3, 55, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 23, 17, 3, 15, tzinfo=datetime.timezone.utc), 'time_taken': 39156.0, 'time_delta': '10:52:36', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 599003085, 'number': 206, 'closed': datetime.datetime(2021, 3, 23, 16, 28, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 23, 16, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 156.0, 'time_delta': '0:02:36', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 556191533, 'number': 203, 'closed': datetime.datetime(2021, 1, 16, 17, 15, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 16, 15, 36, 38, tzinfo=datetime.timezone.utc), 'time_taken': 5924.0, 'time_delta': '1:38:44', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 420286500, 'number': 181, 'closed': datetime.datetime(2020, 12, 26, 15, 24, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 18, 20, 41, tzinfo=datetime.timezone.utc), 'time_taken': 19083809.0, 'time_delta': '220 days, 21:03:29', 'additions': 397, 'deletions': 83, 'state': 'closed'}, {'id': 417936000, 'number': 178, 'closed': datetime.datetime(2020, 6, 7, 13, 50, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 11, 34, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2081745.0, 'time_delta': '24 days, 2:15:45', 'additions': 229, 'deletions': 25, 'state': 'closed'}, {'id': 415560266, 'number': 177, 'closed': datetime.datetime(2020, 5, 15, 0, 11, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 11, 19, 41, tzinfo=datetime.timezone.utc), 'time_taken': 478327.0, 'time_delta': '5 days, 12:52:07', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 413043996, 'number': 176, 'closed': datetime.datetime(2020, 5, 12, 11, 35, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 4, 16, 7, 57, tzinfo=datetime.timezone.utc), 'time_taken': 674870.0, 'time_delta': '7 days, 19:27:50', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
