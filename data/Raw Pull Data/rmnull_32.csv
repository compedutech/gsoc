pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
470129301,Patchelf compatible saver,"## What the PR implements  
An alternative to existing implementation that is aimed to produce bit to bit equivalence with patchelf patched binaries.
(read as `C-cC-v patchelf`)
The idea is to invoke it only when  `patchelf_compatible: true` is passed to `patcher.save`


## so what is not working / completed
* All operations related to `needed`(set,add,replace,remove)
* set `soname`

this was not implemented as we don't these options in brew.
I had to focus on where i spent my time, if you wish this will be implemented


## Other notes
Majority of the code is just patchelf translated to ruby.
And uses only few of the API defined by `patchelf.rb`
not really, we use all the structs, and section and segment class, but don't relay on them for reading 
data(iirc only `.header`, `.name`, `self_endian` and `elf_class` are looked up).
With that said, i would like to know what are the things that need to be done so that this PR
can be merged with existing implementation.


## The story(free to skip) :yawning_face: 
I'm sorry about not implementing the promised missing method.
my unconcern about the time period allotted for gsoc(and lax approach towards the work)
put me in a tight spell, the only way mentors agreed they could test the work i produced is correct
is by having byte to byte equality with ELFs patched using patchelf, which meant i write code that
emulates patchelf in ruby. 
Plus they prefer the work be merged here,
 quoting the discussion
> > We can vendor your patchelf.rb into Homebrew/brew without it first being merged upstream, but it’d be better if it were merged upstream.
>
> I’d like to avoid this when possible. I’d be pretty strongly :-1: unless there’s a open pull request upstream that’s passing all their contribution guidelines/CI tests.
",True,28,https://api.github.com/repos/david942j/patchelf.rb/pulls/28,https://github.com/david942j/patchelf.rb/pull/28,closed,1291,66,9,38,14,56,0,0,[],2020-08-19 12:23:39+00:00,2020-08-27 12:05:03+00:00,690084.0,"7 days, 23:41:24","[{'comment_id': 472990374, 'comment_body': ""sorry about this, i'll open a PR for this in `rbelftools`"", 'comment_created': datetime.datetime(2020, 8, 19, 12, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 473042485, 'comment_body': ""You may not notice but I put the third party headers before (with a blank line) our own headers.\r\n\r\n```\r\nrequire 'elftools/constants'\r\nrequire 'elftools/elf_file'\r\nrequire 'elftools/structs'\r\nrequire 'elftools/util'\r\nrequire 'fileutils'\r\n\r\nrequire 'patchelf/helper'\r\n```"", 'comment_created': datetime.datetime(2020, 8, 19, 13, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473045145, 'comment_body': ""It's fine ;), but please add a `TODO: remove after rbelftools import this` on the top module"", 'comment_created': datetime.datetime(2020, 8, 19, 13, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473045963, 'comment_body': 'add description on what this module is expected to achieve (..port Unix patchelf to Ruby..)', 'comment_created': datetime.datetime(2020, 8, 19, 13, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473046438, 'comment_body': ""uhm I don't get this comment"", 'comment_created': datetime.datetime(2020, 8, 19, 13, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473046852, 'comment_body': '{AltSaver}', 'comment_created': datetime.datetime(2020, 8, 19, 13, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473048101, 'comment_body': ""do we need `rb+`? Isn't it read-only?"", 'comment_created': datetime.datetime(2020, 8, 19, 13, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473053256, 'comment_body': 'Add a TODO here, to have us (when I revisit here someday in the future) know this is not implemented because of time but not hardness or other reasons.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473055048, 'comment_body': ""'wb' is enough, we don't read it (so '+' is not needed)"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473055579, 'comment_body': '!= (same below)', 'comment_created': datetime.datetime(2020, 8, 19, 14, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473056405, 'comment_body': 'remove debug code ;) (same below)', 'comment_created': datetime.datetime(2020, 8, 19, 14, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473059418, 'comment_body': '""by Unix patchelf"", to be accurate.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 473211664, 'comment_body': ""oops, before monkey patching ELFTools::Constants i had tried my hand at refinements on ELFTools,\r\nthat's left over piece :bow: "", 'comment_created': datetime.datetime(2020, 8, 19, 17, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 473211893, 'comment_body': 'got it ', 'comment_created': datetime.datetime(2020, 8, 19, 17, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 473217805, 'comment_body': ""good catch, this is also left over bit from initial plan of reading and writing into file directly without using an intermediate buffer, that didn't work out well btw(im sure you agree that's was a horrible idea)"", 'comment_created': datetime.datetime(2020, 8, 19, 17, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 474187662, 'comment_body': 'Nit: Update this to note that it can return `nil`, per the comments in the body.', 'comment_created': datetime.datetime(2020, 8, 20, 18, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 474188364, 'comment_body': 'Just an idle thought: does it make sense to make these common section names into constants somewhere?', 'comment_created': datetime.datetime(2020, 8, 20, 18, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 474189207, 'comment_body': 'Upping this.', 'comment_created': datetime.datetime(2020, 8, 20, 18, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 474401312, 'comment_body': ""Agree, but I don't know where to define these is better, maybe need to add constants.rb"", 'comment_created': datetime.datetime(2020, 8, 21, 4, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 475096653, 'comment_body': 'Yeah, a `constants.rb` makes sense to me!', 'comment_created': datetime.datetime(2020, 8, 22, 14, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 475196192, 'comment_body': '@david942j  do you know why this is done :/\r\n\r\nLink to the original source,\r\nhttps://github.com/NixOS/patchelf/blob/53a9eb840562ece3ccd4cf9e3885f7de605a4c5d/src/patchelf.cc#L901-L916\r\nJust to be clear, i understand why section headers have to be moved to end(patchelf operates by writing replaced section data soon after the segment headers hence there is a possibility for these to be overwritten).\r\nWhat confuses me is they expand the size of file by \r\neverything that comes before section headers including section headers.\r\nbut they only copy  section headers to end of file :/\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 23, 9, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 475642158, 'comment_body': '(This can be done in a follow-up, IMO).', 'comment_created': datetime.datetime(2020, 8, 24, 14, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 476000316, 'comment_body': 'Add todo/comment that this test should be modified after soname changing is supported in AltSaver', 'comment_created': datetime.datetime(2020, 8, 25, 0, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 476000828, 'comment_body': 'Add comment that this error comes from new_load_method', 'comment_created': datetime.datetime(2020, 8, 25, 0, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 476001578, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 25, 0, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 476003660, 'comment_body': ""Usually I won't agree to put global-level settings in a single class, but fine for now"", 'comment_created': datetime.datetime(2020, 8, 25, 0, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 476006535, 'comment_body': 'What does this line mean?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 476019459, 'comment_body': 'nit: directly return seg_idx here', 'comment_created': datetime.datetime(2020, 8, 25, 0, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 476019834, 'comment_body': 'nit: and replace this with nil', 'comment_created': datetime.datetime(2020, 8, 25, 0, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 476222887, 'comment_body': ""it actually refers to the next line which seeks the buffer to next dyn position.\r\nWe may see the `.seek` as redundant, as reading one dyn tag, buffer pos will be in next dyn position,\r\nwe seek anyway as `@buffer`'s position may have been changed by the calling function.\r\nIt's just lazy programming to assure the dyn positions are read from correct position.\r\n"", 'comment_created': datetime.datetime(2020, 8, 25, 7, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 476226966, 'comment_body': ""> Usually I won't agree to put global-level settings in a single class, but fine for now\r\n\r\nI agree, in another PR we'll fix  this issue, along with `on_error: :silent` we could just modify the logger level there(how come i missed that before)"", 'comment_created': datetime.datetime(2020, 8, 25, 7, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 476535515, 'comment_body': '@david942j \r\ni confirmed with @woodruffw  that 2 matching needed are equal regardless of order.\r\nHe claims returning in ELF file offset order makes sense to him.\r\n\r\nAnyway, i ignored his second statement and\r\nreplaced `.eq` with `match_array` as the new implementation makes it return it in different order\r\nbut the content is same.', 'comment_created': datetime.datetime(2020, 8, 25, 15, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 476542655, 'comment_body': ""idk what's the standard path for interpreter that covers all architecture.\r\nwill this be okay for now?"", 'comment_created': datetime.datetime(2020, 8, 25, 15, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 476548644, 'comment_body': ""There's no reliable universal interpreter path, even on the same architecture (different distros have been known to place it in different locations). I think the unit test should check for the presence of that file and error if it isn't there, since that indicates a test environment issue."", 'comment_created': datetime.datetime(2020, 8, 25, 15, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 476556484, 'comment_body': ""> There's no reliable universal interpreter path, even on the same architecture (different distros have been known to place it in different locations).\r\n\r\n:sweat: \r\n\r\n>  I think the unit test should check for the presence of that file and error if it isn't there, since that indicates a test environment issue.\r\n\r\nagree, guessing by the other ELFs that share the same interpreter path, the tests should run fine on travis.\r\n"", 'comment_created': datetime.datetime(2020, 8, 25, 15, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 476661347, 'comment_body': 'Perhaps `NixOS/patchelf` to specify the C++ implementation? https://github.com/NixOS/patchelf', 'comment_created': datetime.datetime(2020, 8, 25, 18, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 476666667, 'comment_body': ""`/lib64/ld-linux-x86-64.so.2` is compatible with all common distributions on x86-64, but there's always weird exceptions."", 'comment_created': datetime.datetime(2020, 8, 25, 18, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 476668666, 'comment_body': '@sjackman done the same, the file referred by github is old.', 'comment_created': datetime.datetime(2020, 8, 25, 18, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 477006054, 'comment_body': ""As `syncthing` is a x86-64 binary, I think use `/lib64/ld-linux-x86-64.so.2` is good enough. We only need to ensure it's runnable on CI."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477008382, 'comment_body': 'Uhm why these changes?\r\nMy original design is set the ""unneeded"" tags as IGRNOE, then we can append newly needed tags by occupying IGNOREd tags if any. This could prevent unnecessary tags to be appended to the dynamic table.', 'comment_created': datetime.datetime(2020, 8, 26, 3, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477008773, 'comment_body': ""It's fine, but I don't understand why this change is needed though (see my comments in lib/patchelf/saver.rb)"", 'comment_created': datetime.datetime(2020, 8, 26, 3, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477009817, 'comment_body': '`nil` is needed before this `end`, otherwise the return value will be the one returned by `phdrs_by_type`, which is an array of indexes', 'comment_created': datetime.datetime(2020, 8, 26, 3, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477010606, 'comment_body': ""(Accidentally deleted my previous comment)\r\nI would say it's a bug in NixOS/patchelf."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477076244, 'comment_body': '> My original design is set the ""unneeded"" tags as IGRNOE, then we can append newly needed tags by occupying IGNOREd tags if any.\r\n\r\nohkay, sorry i missed this aspect.', 'comment_created': datetime.datetime(2020, 8, 26, 6, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 477098272, 'comment_body': 'restored it to original state after the new changes.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 477101110, 'comment_body': ""thanks, i'll enquire there."", 'comment_created': datetime.datetime(2020, 8, 26, 7, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 477338941, 'comment_body': 'to produce', 'comment_created': datetime.datetime(2020, 8, 26, 14, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477344526, 'comment_body': 'would be finding', 'comment_created': datetime.datetime(2020, 8, 26, 14, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477344826, 'comment_body': 'Due to\r\n\r\nit ""is""?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477345544, 'comment_body': 'can be patched and executed.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477346716, 'comment_body': 'recreate->reproduce', 'comment_created': datetime.datetime(2020, 8, 26, 14, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477347074, 'comment_body': 'a simple', 'comment_created': datetime.datetime(2020, 8, 26, 14, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477347258, 'comment_body': 'This', 'comment_created': datetime.datetime(2020, 8, 26, 14, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477347904, 'comment_body': 'the last', 'comment_created': datetime.datetime(2020, 8, 26, 14, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477350146, 'comment_body': 'This file is complained by rubocop :p', 'comment_created': datetime.datetime(2020, 8, 26, 14, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'david942j', 'type': 'User'}, {'comment_id': 477406749, 'comment_body': ""awww, wasn't aware `arr[x..]` is a new syntax  :sweat: \r\nfixed now"", 'comment_created': datetime.datetime(2020, 8, 26, 15, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}]","[{'commit_sha': '8a0b94626f0df65a53517c8e97995e94ae34412b', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ca283a7697654bc6b50f6eb7dda6825371cbaf', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5d030b5cf913f22d03d65893d154d16d5995190', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52219c04902c281b71d92752a2149313048ffe58', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2c516f9df9f6af42119d77373e8339811f2a2c6', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b987aad1a06d5b79915ffe737eedc1db00280723', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9ec52e45dd4821cb5a23fe1ccaab42a0c56c3d', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f1b0498ea413310596677c666fe46ab5d17ad4f', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54f3d1460e5d9456befe8bb21ddbfcfd51fa4590', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '019d6336d38242251d8352f23b810e4c436a0af4', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e30ebea1151c1467df9599e4ee6fae774312548b', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9bfe4eab527a9e5ac3ad12c4a08fb451dc0dc8a', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98c846588ab2b4229c66ff2270ed9729f77d05b3', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce410ab685715ec271d59299f1e70651d4f7604', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced0182e32e31c5e799f7a1c09cea1ffca8ccb04', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ffe8952971318b404879da6cfa2a06de3899aa', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86bf5d70ee5b070178d8f68e2a1264e049614018', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94c7b1bfc66667e238df879b91f7ad7bb65d33cf', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef242cf072209a5d1ef77cec53580e53593e97a', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '548356a5614118005fa9272268b84db632da8869', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '234e679a2e33f20907aa2e9e871b284187bf2c00', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efaacd6f074a14899f4f69b9c97ee881c33dd5a4', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd57c79e952591b4318740ddcc9d38ce9d068c3', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ed4f9d2df4a681b1bddbd5a1e802d86e934f5c4', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cf5d31429ce50f3df361d8fbfe45fdec45cd49', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aab70cb534d443620fa87449ffb85cbb574ae9dc', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce11db97ee52696d1dd205b06f78fd29d4738523', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e17526bd9f8d89f37f3c93e2c1a2e437e4289fab', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a2cc7c2afb718e8752ab8169b544a9b453901f', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4098fd9d04e211e94b8f42fab69a3fa31d5ae56d', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482342e9768a424393a421ca45f8a79ac4b3cd85', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c32d2210044a7ed2b8d22a0faaff96f63d1918', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1100880c69007124de24246d74335f1fa1763b0', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59b304951a89d92a990057cb7ae006d88b4f1fc9', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d111950c94a07a31a11f22f925adf11cbee24f', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5745f1859cb07fda503ce2887deb452ac30701a', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed97cb2b0c4445d7f7c60f500b51302a4953702f', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090d497f23b82211969fd5246d36ca755b86f0a2', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}]",rm∅,8173131,,User,,24,,28,17
392784196,Use patchelf.rb to set interpreter instead of patchelf. First step towards shelless elftools,"Add a new gem requirement to [patchelf.rb](https://github.com/david942j/patchelf.rb),

`patchelf` command was used to update the name of interpreter and replace DT_RPATH.
Same features of [patchelf.rb](https://github.com/david942j/patchelf.rb), was used as a substitute.

- [x] Have you followed the guidelines in our [Contributing](https://github.com/Homebrew/brew/blob/master/CONTRIBUTING.md) document?
- [x] Have you checked to ensure there aren't other open [Pull Requests](https://github.com/Homebrew/brew/pulls) for the same change?
- [x] Have you added an explanation of what your changes do and why you'd like us to include them?
- [ ] Have you written new tests for your changes? [Here's an example](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/PATH_spec.rb).
- [x] Have you successfully run `brew style` with your changes locally?
- [x] Have you successfully run `brew tests` with your changes locally?

-----
",True,7213,https://api.github.com/repos/Homebrew/brew/pulls/7213,https://github.com/Homebrew/brew/pull/7213,closed,36,12,3,1,43,38,2,0,"[{'name': 'gsoc-outreachy'}, {'name': 'outdated'}]",2020-03-24 05:25:41+00:00,2020-08-28 07:31:40+00:00,13572359.0,"157 days, 2:05:59","[{'comment_id': 397169870, 'comment_body': '```suggestion\r\ngem ""patchelf""\r\n```', 'comment_created': datetime.datetime(2020, 3, 24, 13, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 397170114, 'comment_body': 'What if this fails? Will it raise an exception?', 'comment_created': datetime.datetime(2020, 3, 24, 13, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 397271366, 'comment_body': ""There's no official documentation, glancing over the source code, it won't throw an exception. \r\nBased on the assumption that the file is executable,\r\nrpath, interpreter section exists( checked above ),\r\n and we have write permission to directory."", 'comment_created': datetime.datetime(2020, 3, 24, 16, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 397678724, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 3, 25, 8, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 398046046, 'comment_body': ""Some of the path changes here indicate that we might need to split the `setup.rb` between Linux and macOS -- I'm guessing that changing from `universal-darwin-19` to `x86_64-linux` here and below is going to make loading these on macOS fail 🙂 "", 'comment_created': datetime.datetime(2020, 3, 25, 17, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 398109567, 'comment_body': ""@woodruffw because these are native extensions for things that aren't vendored it's actually fine: it'll just end up fixing them on Linux when you e.g. `brew audit`. It'd be better if these were macOS paths but I can fix that easily enough."", 'comment_created': datetime.datetime(2020, 3, 25, 19, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 398158259, 'comment_body': '`DT_RPATH` is much preferred over `DT_RUNPATH` because `DT_RUNPATH` can be overridden by `LD_LIBRARY_PATH`, and that can often cause breakage and a frequent source of support requests from users. `DT_RPATH` cannot be overridden by `LD_LIBRARY_PATH`.', 'comment_created': datetime.datetime(2020, 3, 25, 20, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 398159265, 'comment_body': ""I'm a bit concerned that if the RPATH did not change but the interpreter did change, then it would incorrectly return early, when it should in fact patch the ELF file."", 'comment_created': datetime.datetime(2020, 3, 25, 20, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 398179326, 'comment_body': 'good catch. Just did a force push with interpreter check ', 'comment_created': datetime.datetime(2020, 3, 25, 21, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 398180285, 'comment_body': ' we continue using  DT_RPATH ?', 'comment_created': datetime.datetime(2020, 3, 25, 21, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 398253734, 'comment_body': ""> it'll just end up fixing them on Linux when you e.g. `brew audit`. It'd be better if these were macOS paths but I can fix that easily enough.\r\n\r\nGood to know!"", 'comment_created': datetime.datetime(2020, 3, 26, 0, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 465962447, 'comment_body': ""You can leave this chunk as is. `patchelf` modifying itself makes me a bit nervous, and it's not needed. The `patchelf` bottle is built not to require relocation."", 'comment_created': datetime.datetime(2020, 8, 5, 19, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 465963539, 'comment_body': 'Please revert unnecessary changes, like this one.', 'comment_created': datetime.datetime(2020, 8, 5, 19, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 465966412, 'comment_body': 'Rather than using a member variable `@set`, instead factor out a function that returns `[new_interpreter, new-rpath]`, and then implement `relocate_dynamic_linkage_using_patchelf` and `relocate_dynamic_linkage_using_patchelf_rb`. The function `relocate_dynamic_linkage_using_patchelf` should be as similar as possible to the current existing logic.', 'comment_created': datetime.datetime(2020, 8, 5, 19, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 465967651, 'comment_body': 'sorry, that was unintentional ', 'comment_created': datetime.datetime(2020, 8, 5, 19, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 468838320, 'comment_body': 'Handle the case when `new_interpreter` is `nil`.', 'comment_created': datetime.datetime(2020, 8, 11, 20, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 468838685, 'comment_body': 'Be sure to test this function `save_using_patchelf` on both ELF executables and ELF libraries.', 'comment_created': datetime.datetime(2020, 8, 11, 20, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 468840958, 'comment_body': 'Rebase this PR onto `origin/master`.', 'comment_created': datetime.datetime(2020, 8, 11, 20, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 468841691, 'comment_body': '```suggestion\r\n    new_interpreter = nil if old_interpreter == new_interpreter\r\n    file.patch! new_interpreter, new_rpath\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 468842246, 'comment_body': 'to prevent running `patchelf --set-interpreter new_interpreter` unnecessarily.', 'comment_created': datetime.datetime(2020, 8, 11, 20, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 471140271, 'comment_body': 'Bump', 'comment_created': datetime.datetime(2020, 8, 16, 17, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 471140513, 'comment_body': ""```suggestion\r\n    patcher.rpath = new_rpath\r\n```\r\nI don't believe `new_rpath` can ever be `nil`."", 'comment_created': datetime.datetime(2020, 8, 16, 17, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 471140667, 'comment_body': ""This chunk doesn't look right to me. What's going on here?"", 'comment_created': datetime.datetime(2020, 8, 16, 17, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 472389411, 'comment_body': 'Yeah, this probably needs to be reverted. ', 'comment_created': datetime.datetime(2020, 8, 18, 18, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 475819911, 'comment_body': 'This needs to be bumped to the latest work on https://github.com/david942j/patchelf.rb/pull/28, right?', 'comment_created': datetime.datetime(2020, 8, 24, 18, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 475822062, 'comment_body': ""yep, working on it, ditching few commits, plus i'm not sure whether we wait for upstream to merge.\r\nand then vendor it.\r\ni think we better for @sjackman "", 'comment_created': datetime.datetime(2020, 8, 24, 18, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 475828398, 'comment_body': ""> yep, working on it, ditching few commits, plus i'm not sure whether we wait for upstream to merge.\r\n> and then vendor it.\r\n\r\nLet's keep this PR up-to-date with your branch. Once upstream merges it, we can vendor here."", 'comment_created': datetime.datetime(2020, 8, 24, 18, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'woodruffw', 'type': 'User'}, {'comment_id': 476658150, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 25, 18, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sjackman', 'type': 'User'}, {'comment_id': 476776085, 'comment_body': 'it can be nil when `interpreter` is changed but there was no rpath,  i believe we have binaries with no no rpath, otherwise why do we have safety guards like `if old_rpath`', 'comment_created': datetime.datetime(2020, 8, 25, 21, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 478219105, 'comment_body': ""Note to self: don't merge until this is merged upstream."", 'comment_created': datetime.datetime(2020, 8, 27, 7, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 478219593, 'comment_body': 'This will break when we upgrade to Ruby 2.7. Please instead do:\r\n\r\n```suggestion\r\n    file.patch!(interpreter: interpreter, rpath: rpath)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 7, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 478220173, 'comment_body': '```suggestion\r\n    return if interpreter.blank? && rpath.blank?\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 7, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 478220872, 'comment_body': '```suggestion\r\n    odie ""Could not locate patchelf, please: brew install patchelf."" if patchelf.blank?\r\n    \r\n    args = []\r\n    args << ""--set-interpreter"" << new_interpreter if new_interpreter.present?\r\n    args << ""--force-rpath"" << ""--set-rpath"" << new_rpath if new_rpath.present?\r\n\r\n    Homebrew.safe_system(patchelf, *args, to_s)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 7, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 478221160, 'comment_body': '```suggestion\r\n    patcher.interpreter = new_interpreter if new_interpreter.present?\r\n    patcher.rpath = new_rpath if new_rpath.present?\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 7, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 478221368, 'comment_body': ""I presume this can all go away once it's vendored."", 'comment_created': datetime.datetime(2020, 8, 27, 7, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 478611617, 'comment_body': ""@MikeMcQuaid what's the advantage of using `<<` over `.push`\r\n"", 'comment_created': datetime.datetime(2020, 8, 27, 18, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}, {'comment_id': 478612579, 'comment_body': 'No real advantage, just we use it more commonly ', 'comment_created': datetime.datetime(2020, 8, 27, 18, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'MikeMcQuaid', 'type': 'User'}, {'comment_id': 478614121, 'comment_body': 'makes sense, thanks.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rmNULL', 'type': 'User'}]","[{'commit_sha': '649e02ba3db4a714f346e83e46a86c34f3b9e9ad', 'committer_username': 'rmNULL', 'committer_name': 'rm∅', 'committer_email': None, 'commit_date': datetime.datetime(2014, 7, 15, 20, 9, 4, tzinfo=datetime.timezone.utc)}]",rm∅,8173131,,User,,24,,28,17

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
163915146,patchelf.rb,david942j/patchelf.rb,Ruby,7,25,3,10,68,2,1,0,"[{'id': 475205967, 'number': 30, 'closed': datetime.datetime(2020, 8, 30, 16, 45, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 6, 54, 15, tzinfo=datetime.timezone.utc), 'time_taken': 208282.0, 'time_delta': '2 days, 9:51:22', 'additions': 33, 'deletions': 9, 'state': 'closed'}, {'id': 473546005, 'number': 29, 'closed': datetime.datetime(2020, 8, 27, 12, 43, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 22, 49, 19, tzinfo=datetime.timezone.utc), 'time_taken': 136440.0, 'time_delta': '1 day, 13:54:00', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 470129301, 'number': 28, 'closed': datetime.datetime(2020, 8, 27, 12, 5, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 12, 23, 39, tzinfo=datetime.timezone.utc), 'time_taken': 690084.0, 'time_delta': '7 days, 23:41:24', 'additions': 1291, 'deletions': 66, 'state': 'closed'}, {'id': 457862594, 'number': 27, 'closed': datetime.datetime(2020, 7, 28, 16, 15, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 14, 50, 47, tzinfo=datetime.timezone.utc), 'time_taken': 5066.0, 'time_delta': '1:24:26', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 456120905, 'number': 26, 'closed': datetime.datetime(2020, 7, 27, 0, 42, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 7, 19, 38, tzinfo=datetime.timezone.utc), 'time_taken': 235352.0, 'time_delta': '2 days, 17:22:32', 'additions': 39, 'deletions': 13, 'state': 'closed'}, {'id': 448529602, 'number': 23, 'closed': datetime.datetime(2020, 7, 15, 4, 1, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 22, 23, 49, tzinfo=datetime.timezone.utc), 'time_taken': 106679.0, 'time_delta': '1 day, 5:37:59', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 448214431, 'number': 22, 'closed': datetime.datetime(2020, 7, 13, 13, 16, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 12, 10, 5, tzinfo=datetime.timezone.utc), 'time_taken': 3995.0, 'time_delta': '1:06:35', 'additions': 34, 'deletions': 7, 'state': 'closed'}, {'id': 447857549, 'number': 21, 'closed': datetime.datetime(2020, 7, 13, 12, 8, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 6, 21, 6, tzinfo=datetime.timezone.utc), 'time_taken': 107252.0, 'time_delta': '1 day, 5:47:32', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 447769443, 'number': 20, 'closed': datetime.datetime(2020, 7, 13, 0, 8, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 13, 38, 47, tzinfo=datetime.timezone.utc), 'time_taken': 124174.0, 'time_delta': '1 day, 10:29:34', 'additions': 42, 'deletions': 3, 'state': 'closed'}, {'id': 436712775, 'number': 18, 'closed': datetime.datetime(2020, 6, 20, 6, 59, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 19, 15, 55, tzinfo=datetime.timezone.utc), 'time_taken': 128628.0, 'time_delta': '1 day, 11:43:48', 'additions': 2, 'deletions': 0, 'state': 'closed'}]"
53238813,brew,Homebrew/brew,Ruby,9517,40595,714,1203,41602,57,15,14,"[{'id': 475477299, 'number': 8524, 'closed': datetime.datetime(2020, 8, 28, 20, 7, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 15, 37, 31, tzinfo=datetime.timezone.utc), 'time_taken': 16228.0, 'time_delta': '4:30:28', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 475411787, 'number': 8522, 'closed': datetime.datetime(2020, 9, 2, 16, 21, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 13, 38, 5, tzinfo=datetime.timezone.utc), 'time_taken': 441823.0, 'time_delta': '5 days, 2:43:43', 'additions': 81, 'deletions': 4, 'state': 'closed'}, {'id': 465816022, 'number': 8295, 'closed': datetime.datetime(2020, 8, 11, 8, 16, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 1, 51, 6, tzinfo=datetime.timezone.utc), 'time_taken': 23110.0, 'time_delta': '6:25:10', 'additions': 97, 'deletions': 6, 'state': 'closed'}, {'id': 464756834, 'number': 8251, 'closed': datetime.datetime(2020, 8, 7, 20, 32, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 18, 40, tzinfo=datetime.timezone.utc), 'time_taken': 6774.0, 'time_delta': '1:52:54', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 464314207, 'number': 8241, 'closed': datetime.datetime(2020, 8, 10, 8, 26, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 23, 36, 23, tzinfo=datetime.timezone.utc), 'time_taken': 291027.0, 'time_delta': '3 days, 8:50:27', 'additions': 6, 'deletions': 97, 'state': 'closed'}, {'id': 457959632, 'number': 8123, 'closed': datetime.datetime(2020, 7, 29, 10, 31, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 17, 50, 14, tzinfo=datetime.timezone.utc), 'time_taken': 60068.0, 'time_delta': '16:41:08', 'additions': 4, 'deletions': 40, 'state': 'closed'}, {'id': 456680010, 'number': 8086, 'closed': datetime.datetime(2020, 7, 26, 0, 40, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 23, 26, 22, tzinfo=datetime.timezone.utc), 'time_taken': 4440.0, 'time_delta': '1:14:00', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 456535730, 'number': 8081, 'closed': datetime.datetime(2020, 8, 23, 9, 3, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 0, 6, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2537846.0, 'time_delta': '29 days, 8:57:26', 'additions': 17, 'deletions': 5, 'state': 'closed'}, {'id': 452576050, 'number': 8034, 'closed': datetime.datetime(2020, 7, 22, 8, 58, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 13, 53, 33, tzinfo=datetime.timezone.utc), 'time_taken': 241517.0, 'time_delta': '2 days, 19:05:17', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 448550136, 'number': 7996, 'closed': datetime.datetime(2020, 7, 15, 7, 58, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 23, 12, 41, tzinfo=datetime.timezone.utc), 'time_taken': 117957.0, 'time_delta': '1 day, 8:45:57', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 447168636, 'number': 7970, 'closed': datetime.datetime(2020, 7, 24, 22, 53, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 1, 12, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1287672.0, 'time_delta': '14 days, 21:41:12', 'additions': 106, 'deletions': 43, 'state': 'closed'}, {'id': 447138533, 'number': 7969, 'closed': datetime.datetime(2020, 7, 12, 2, 2, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 23, 13, 11, tzinfo=datetime.timezone.utc), 'time_taken': 182988.0, 'time_delta': '2 days, 2:49:48', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 438264160, 'number': 7798, 'closed': datetime.datetime(2020, 7, 12, 2, 3, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 1, 46, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1642601.0, 'time_delta': '19 days, 0:16:41', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 438201704, 'number': 7797, 'closed': datetime.datetime(2020, 6, 26, 13, 48, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 22, 7, 31, tzinfo=datetime.timezone.utc), 'time_taken': 315652.0, 'time_delta': '3 days, 15:40:52', 'additions': 24, 'deletions': 27, 'state': 'closed'}, {'id': 437684141, 'number': 7782, 'closed': datetime.datetime(2020, 6, 23, 12, 40, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 5, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 113566.0, 'time_delta': '1 day, 7:32:46', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 437616532, 'number': 7780, 'closed': datetime.datetime(2020, 6, 22, 20, 59, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 23, 34, 7, tzinfo=datetime.timezone.utc), 'time_taken': 77137.0, 'time_delta': '21:25:37', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 437595204, 'number': 7779, 'closed': datetime.datetime(2020, 6, 22, 19, 43, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 20, 16, 46, tzinfo=datetime.timezone.utc), 'time_taken': 84433.0, 'time_delta': '23:27:13', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 437294587, 'number': 7774, 'closed': datetime.datetime(2020, 6, 19, 22, 19, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 21, 3, 7, tzinfo=datetime.timezone.utc), 'time_taken': 4585.0, 'time_delta': '1:16:25', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 427625405, 'number': 7687, 'closed': datetime.datetime(2020, 6, 4, 8, 21, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 6, 48, 36, tzinfo=datetime.timezone.utc), 'time_taken': 5561.0, 'time_delta': '1:32:41', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 426586384, 'number': 7678, 'closed': datetime.datetime(2020, 6, 19, 16, 20, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 13, 31, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1478968.0, 'time_delta': '17 days, 2:49:28', 'additions': 55, 'deletions': 6, 'state': 'closed'}, {'id': 424063785, 'number': 7656, 'closed': datetime.datetime(2020, 5, 28, 7, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 19, 15, 4, tzinfo=datetime.timezone.utc), 'time_taken': 43797.0, 'time_delta': '12:09:57', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 418293986, 'number': 7575, 'closed': datetime.datetime(2020, 5, 15, 0, 52, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 23, 22, 30, tzinfo=datetime.timezone.utc), 'time_taken': 5392.0, 'time_delta': '1:29:52', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 392784196, 'number': 7213, 'closed': datetime.datetime(2020, 8, 28, 7, 31, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 5, 25, 41, tzinfo=datetime.timezone.utc), 'time_taken': 13572359.0, 'time_delta': '157 days, 2:05:59', 'additions': 36, 'deletions': 12, 'state': 'closed'}]"
