pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
673214576,Fix #3290: Add support for generic regex pattern matching,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #3290: Add support for generic regex pattern matching

The script traverses different layers of the codebase to check for any prohibited file content and file naming patterns.
To run the script, use:

`bazel run //scripts:regex_pattern_validation_check -- $(pwd)`

For testing the script, automated tests have been added.
To execute the tests, use:

`bazel test //scripts/src/javatests/org/oppia/android/scripts/regex:RegexPatternValidationCheckTest`

**Note:** We are generating the test assets dynamically at the time of executing them. The test assets are automatically deleted, when the test finishes.

Screenshot of all new tests added passing locally:

![image](https://user-images.githubusercontent.com/55937724/124961407-0ebea700-e03b-11eb-93c9-eda406571ad1.png)

![image](https://user-images.githubusercontent.com/55937724/124961303-e8990700-e03a-11eb-8cbc-d8184d955676.png)


## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3340,https://api.github.com/repos/oppia/oppia-android/pulls/3340,https://github.com/oppia/oppia-android/pull/3340,closed,988,161,19,55,27,330,0,1,[],2021-06-18 06:51:18+00:00,2021-07-08 21:13:53+00:00,1779755.0,"20 days, 14:22:35","[{'comment_id': 654960891, 'comment_body': 'can give better naming than `i`', 'comment_created': datetime.datetime(2021, 6, 20, 16, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961042, 'comment_body': 'can we use this string from outside this class or some other source?', 'comment_created': datetime.datetime(2021, 6, 20, 16, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961110, 'comment_body': 'add kdocs', 'comment_created': datetime.datetime(2021, 6, 20, 16, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961116, 'comment_body': 'add kdocs', 'comment_created': datetime.datetime(2021, 6, 20, 16, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961159, 'comment_body': 'add kdocs', 'comment_created': datetime.datetime(2021, 6, 20, 16, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961289, 'comment_body': 'we can describe arguments required by this function in kdocs', 'comment_created': datetime.datetime(2021, 6, 20, 16, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961319, 'comment_body': 'we can describe arguments required by this function in kdocs', 'comment_created': datetime.datetime(2021, 6, 20, 16, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961528, 'comment_body': '```suggestion\r\n  fun testFileNamePattern_validFileNamePattern_fileNamePatternIsCorrect() {\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961583, 'comment_body': '```suggestion\r\n  fun testFileNamePattern_prohibitedFileNamePattern_fileNamePatternIsNotCorrect() {\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654961725, 'comment_body': '```suggestion\r\n  fun testFileContent_noSupportLibraryImport_fileContentIsCorrect() {\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 16, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654980544, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 19, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 654980559, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 19, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 654980577, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 19, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 654980595, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 19, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 654980604, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 19, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 654980611, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 19, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 654980629, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 20, 19, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 655822393, 'comment_body': 'All public members should have KDocs, including for scripts. Please add here & elsewhere.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655822510, 'comment_body': 'Nit: remove unnecessary newline at the beginning of the method for consistency with other methods in the codebase.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655822622, 'comment_body': ""More Kotlin idiomatic: ``val allowedDirectories = mutableListOf<String>()``\r\n\r\nHowever, given how this is being initialized could you maybe instead do:\r\n\r\n```kotlin\r\nval allowedDirectories = args.drop(1)\r\n```\r\n\r\nNow it's immutable, and avoids needing to do the extra for-loop."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655825397, 'comment_body': ""It's a bit more idiomatic to avoid vars in general, but it's not as easy here. ``any`` is an immediate go-to for cases like this (in place of ``forEach``), but it will short-circuit rather than find all failures. We could instead use ``fold``:\r\n\r\n```kotlin\r\nval hasFilenameCheckFailure = getFilenameChecks().fold(initial = false) { isFailing, check ->\r\n  // Run check regardless of current failing state for more comprehensive error reporting.\r\n  val checkFailed = checkProhibitedNamePattern(repoPath, searchFiles, check)\r\n  return@fold isFailing || checkFailed\r\n}\r\n```\r\n\r\nDitto for file contents, then you can fail the script conditionally based on whether either flag is true."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655825613, 'comment_body': 'Nit on naming: ``get`` usually refers to methods that are trivially retrieving data. Instead, consider: ``retrieveFilenameChecks`` since that more explicitly implies work is being done to fetch the data being returned & to not be confused with a simple getter.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655825860, 'comment_body': 'I suggest factoring this & the common code below into a private helper to be shared by both.\r\n\r\nSomething that might help: https://github.com/oppia/oppia-android/blob/f9eb3cdcba174fdd78690af33ffe3c7a8b547a10/utility/src/main/java/org/oppia/android/util/extensions/BundleExtensions.kt#L32.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655826347, 'comment_body': ""Here & elsewhere: these should be private. The only member in this class that should be public is ``main``.\r\n\r\n(Note that it's always fine to have KDocs on private members, it's just not strictly required)."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655826473, 'comment_body': ""The return type isn't needed here (& usually not included): ``@return whether the check has passed`` is sufficient."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655826561, 'comment_body': 'The summary fragment should end with punctuation.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655826673, 'comment_body': 'at-clauses do not end with punctuation unless they are multi-sentence.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655826864, 'comment_body': 'Suggest passing in the FilenameCheck object to simplify the contract slightly.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655826975, 'comment_body': 'I suggest also using fold here & elsewhere to avoid vars.\r\n\r\nAlternatively, you could try something like this:\r\n\r\n```kotlin\r\nval matchedFiles = searchFiles.filter { file ->\r\n  val filePath = it.toString().removePrefix(repoPath)\r\n  return@filter prohibitedFilenameRegex.matches(filePath)\r\n}\r\n// Now, log the failure for each matched file, or combined all matched files into one list for a single error message.\r\n```\r\n\r\nThis might be an interesting approach for here & below since it avoids repeating the same error message over and over. WDYT?', 'comment_created': datetime.datetime(2021, 6, 22, 2, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655827713, 'comment_body': 'Would it be easier just to pre-process the list of files & pass that in vs. doing it here? Though, given that you need to be able to open the file below, you could introduce a new class (maybe RepoFile) that extracts both out of these methods to better frame the responsibilities of the individual helper methods.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655829612, 'comment_body': ""This is another bit of logic that would be nice to extract into a helper class like RepoFile:\r\n\r\n```kotlin\r\nprivate class RepoFile(...) {\r\n  /** ... */\r\n  fun enumerateLines(callback: (String, Int) -> Unit) { ... }\r\n}\r\n```\r\n\r\nAlso, if you'd like to avoid the var here you could do something like:\r\n\r\n```kotlin\r\nFile(it.toString()).bufferedReader().lineSequence().foldIndexed ....\r\n```\r\n\r\nSince [``foldIndexed``](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/fold-indexed.html) provides the line index within the reader, and lets you avoid the ``contentCheckFailedFlag`` variable. That being said, the callback approach above would probably be simpler (and could be done by via a forEachIndexed call on the line sequence of the file to avoid a lineNumber var)."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655829971, 'comment_body': ""Nit: I suggest just returning here since the extra val doesn't add much in terms of readability or code organization."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655830376, 'comment_body': ""Shouldn't exemptions be per-check? In that case, we should be defining them as part of the proto/textproto file. Otherwise, we'd be exempting files for every regex check which doesn't sound correct to me.\r\n\r\nThe per-regex check exemption seems nice, though, since we'd use this in the future for new checks added."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655830867, 'comment_body': 'Or:\r\n\r\n```kotlin\r\nreturn allowedDirectories.any { pathString.startsWith(it) }\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 2, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655831000, 'comment_body': 'Here & elsewhere: please fix the KDoc formatting.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655831502, 'comment_body': '```suggestion\r\n      println(\r\n        ""Prohibited filename pattern: [ROOT]/$filePath\\nFailure message: $errorToShow\\n""\r\n      )\r\n```\r\n\r\nHere & elsewhere: prefer breaking at the higher syntactal element (e.g. the ``(`` here) before the lower element (the string).', 'comment_created': datetime.datetime(2021, 6, 22, 2, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655831807, 'comment_body': ""This is the KDoc for the immediate next element, but it's not describing that constant. This probably should be on the object, or rephrased for the constants."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655831915, 'comment_body': 'Why do we need these?', 'comment_created': datetime.datetime(2021, 6, 22, 2, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655832347, 'comment_body': 'Please add punctuation at the end of proto doc comments. Ditto elsewhere in the PR.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655832607, 'comment_body': ""This package doesn't seem correct--ditto for 'model' above. Shouldn't the package be 'proto' and the java_package match the containing folder?"", 'comment_created': datetime.datetime(2021, 6, 22, 2, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655832746, 'comment_body': 'Please double check indentation. We should indent consistently, and in this case, proto files are 2-space indented.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655832834, 'comment_body': 'Here & next: helpers should be private.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655833307, 'comment_body': ""Prefer using ``assertThrows`` from Truth for exceptions rather than ExpectedException. In fact, we could add ExpectedException to the list of prohibited patterns because it has one main drawback: it doesn't let you control where in the test the exception will occur. In longer tests this can result in tests unintentionally passing due to throwing a generic exception earlier than expected.\r\n\r\nSee uses of ``assertThrows`` elsewhere in the codebase for an idea on usage (we have a custom helper that we use for Kotlin typing)."", 'comment_created': datetime.datetime(2021, 6, 22, 2, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655833553, 'comment_body': ""This val isn't used. Should we maybe verify that the directory exists here as a sanity check?"", 'comment_created': datetime.datetime(2021, 6, 22, 2, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 655834335, 'comment_body': 'We should have a way to verify the console output from the script. Could we maybe redirect the system standard/error outputs to an in-memory stream so that we can validate the console output? This will make nicer tests since it lets us verify that a pass is actually a pass, that we have multiple failures when there are multiple failures, and that the output is correctly formatted.\r\n\r\nPlease also add tests to verify output format & multiple errors can be properly thrown.', 'comment_created': datetime.datetime(2021, 6, 22, 2, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 656546264, 'comment_body': '@BenHenning \r\nThanks, done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656546476, 'comment_body': 'Okay, added.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656546570, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 22, 20, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656546729, 'comment_body': 'This seems neat. Updated.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656546830, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 22, 20, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656547027, 'comment_body': 'Thanks, done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656547173, 'comment_body': 'noted, updated now.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656547460, 'comment_body': 'removed, and will remember not to include it next time.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656547680, 'comment_body': 'noted, now updated.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656547776, 'comment_body': 'noted, now done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656547870, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 22, 20, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656549147, 'comment_body': 'This seems neat for the Filename checks, but my only concern is for the FileContent checks. As, we also have to log the line number, so it will be best, if we log its failure as soon as we encounter it.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656549695, 'comment_body': 'Added a helper class `RepoFile`, which contains all the helper functions for file collection and other related work. PTAL.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656551300, 'comment_body': 'I would really love to go by the `foldIndexed` approach. My primary reason for choosing this is that, for the new contributors, this approach is easier to understand. I myself was facing difficulty in the first look of understanding the first approach.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656551396, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 22, 20, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656551766, 'comment_body': 'Revamped to be based on a per-regex approach. PTAL.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656552053, 'comment_body': 'This looks neat, thanks.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656552150, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656552245, 'comment_body': 'okay, noted.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656552319, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656553735, 'comment_body': 'This was based on [this](https://github.com/oppia/oppia-android/pull/3340#discussion_r654961042) comment. It also helps in asserting the check passed/failed message string in the tests. ', 'comment_created': datetime.datetime(2021, 6, 22, 20, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656553828, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656554134, 'comment_body': ""Apologies! made this mistake in a hurry.\r\nIt's now rectified."", 'comment_created': datetime.datetime(2021, 6, 22, 20, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656554211, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656554265, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656554532, 'comment_body': 'Revamped to use `assertThrows` instead of `ExceptedException`. PTAL.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656555360, 'comment_body': ""Apologies! we don't need to save it in a val. Now updated.\r\nWe are creating a `testfiles` temporary directory before every test. And in this directory we are keeping all the dynamically generated assets."", 'comment_created': datetime.datetime(2021, 6, 22, 20, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 656556718, 'comment_body': 'done.\r\nThe tests now verify the console output too for every pass and failure in addition to check the result status of the script.\r\nAlso, a test is added for multiple failures. PTAL.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657634905, 'comment_body': 'This seems to be an action of an individual developer. Are we comfortable adding that to our repo? @anandwana001 @BenHenning ', 'comment_created': datetime.datetime(2021, 6, 24, 5, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 657741600, 'comment_body': ""I think it's good to use it, we already use this at multiple places and everything is working fine till now. Also, no security issues. "", 'comment_created': datetime.datetime(2021, 6, 24, 8, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657746076, 'comment_body': '```suggestion\r\n/** \r\n * Script for ensuring that prohibited file contents and\r\n * file naming patterns are not present in the codebase.\r\n */\r\n```\r\n\r\nFormatting', 'comment_created': datetime.datetime(2021, 6, 24, 8, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657750882, 'comment_body': 'comments inside the function should have format using `//`\r\n\r\n```suggestion\r\n      // path of the repo to be analyzed.\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 8, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657751979, 'comment_body': 'a comment will be helpful why `args.drop(1)`', 'comment_created': datetime.datetime(2021, 6, 24, 8, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657753508, 'comment_body': '`all files` we can write which all files `all kotlin files` or whatever files we are including in this `all`.', 'comment_created': datetime.datetime(2021, 6, 24, 8, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657755017, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 8, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657755062, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 8, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657755101, 'comment_body': 'Apologies!, this was also done, just missed adding a comment here.', 'comment_created': datetime.datetime(2021, 6, 24, 8, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657755473, 'comment_body': 'don\'t use named arguments here,\r\nwe generally use named arguments where we have primitive arguments or arguments which might confuse developers,\r\n\r\n example `function(a,0,""Hi"")` now, here a developer cannot understand directly that what is `a`, what is `0` or what is `Hi` so in such case named arguments are helpful to use. ', 'comment_created': datetime.datetime(2021, 6, 24, 8, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657758817, 'comment_body': '```suggestion\r\n      filenameCheck: FilenameCheck,\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 8, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657759051, 'comment_body': '```suggestion\r\n        .fold(initial = false) { isFailing, fileContentCheck ->\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 8, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657759322, 'comment_body': ""don't use named arguments.\r\nReason explaind above"", 'comment_created': datetime.datetime(2021, 6, 24, 8, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657764023, 'comment_body': 'Use Kotlin idiomatic way\r\n\r\n1. explicitly return - in this, we use a qualifier with the `return` like we are doing right now `return@fold`. \r\n2. implicit return - \r\n```suggestion\r\n          isFailing || checkFailed\r\n```\r\n\r\nreturn statement without qualifier is  - return from the innermost fun (ignoring lambdas).', 'comment_created': datetime.datetime(2021, 6, 24, 9, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657764861, 'comment_body': '```suggestion\r\n      fileContentCheck: FileContentCheck,\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657765274, 'comment_body': '```suggestion\r\n        .fold(initial = false) { isFailing, fileNameCheck ->\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657765786, 'comment_body': 'no empty lines required', 'comment_created': datetime.datetime(2021, 6, 24, 9, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657767112, 'comment_body': 'Could we move private functions outside companion object?\r\nWDYT?', 'comment_created': datetime.datetime(2021, 6, 24, 9, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657767456, 'comment_body': '```suggestion\r\n     * Helper function to parse the textproto file to a proto class.\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657768073, 'comment_body': 'can we remove this suppressing?\r\nWDYT?', 'comment_created': datetime.datetime(2021, 6, 24, 9, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657772598, 'comment_body': '```suggestion\r\n     * @return file name pattern is correct or not\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657774650, 'comment_body': 'better naming for `acc` and `lineStr` required', 'comment_created': datetime.datetime(2021, 6, 24, 9, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657774992, 'comment_body': '```suggestion\r\n      var contentCheckFailedFlag = false\r\n      \r\n      val fileNameRegex = prohibitedContentObj.getFilenameRegex().toRegex()\r\n      \r\n      val prohibitedContentRegex = prohibitedContentObj.getProhibitedContentRegex().toRegex()\r\n      \r\n      val matchedFiles = searchFiles.filter {\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657775420, 'comment_body': 'add comment on why `+ 1` is required', 'comment_created': datetime.datetime(2021, 6, 24, 9, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657775719, 'comment_body': 'better name then `it`', 'comment_created': datetime.datetime(2021, 6, 24, 9, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657776630, 'comment_body': 'Does `println()` will work here?\r\nWDYT?', 'comment_created': datetime.datetime(2021, 6, 24, 9, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657778168, 'comment_body': '```suggestion\r\n            repoPath\r\n          )\r\n        )\r\n      }\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657778462, 'comment_body': 'no extra empty line', 'comment_created': datetime.datetime(2021, 6, 24, 9, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657778846, 'comment_body': '```suggestion\r\n    private fun logProhibitedContentFailure(\r\n      lineNumber: Int,\r\n      errorToShow: String,\r\n      filePath: String\r\n    ) {\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657779407, 'comment_body': '```suggestion\r\n      fun collectSearchFiles(\r\n        repoPath: String,\r\n        allowedDirectories: List<String>\r\n      ): List<File> {\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657780004, 'comment_body': '```suggestion\r\n            allowedDirectories\r\n          )\r\n            && it.isFile\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657780112, 'comment_body': 'no extra line', 'comment_created': datetime.datetime(2021, 6, 24, 9, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657785790, 'comment_body': '```suggestion\r\n      val failureMessage =\r\n        """"""\r\n      Prohibited content usage found on line no. $lineNumber\r\n      File: [ROOT]/$filePath\r\n      Failure message: $errorToShow\r\n      """""".trimIndent()\r\n      println(failureMessage)\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 9, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657786240, 'comment_body': 'You can use this, its just more kotlin way to print message. ', 'comment_created': datetime.datetime(2021, 6, 24, 9, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657786396, 'comment_body': '```suggestion\r\n  /** Helper class which contains all the file related helper methods. */\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657788282, 'comment_body': ""`file related helper methods.` doesn't sounds good to me. \r\n\r\nCan be more descriptive"", 'comment_created': datetime.datetime(2021, 6, 24, 9, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657788954, 'comment_body': 'can we give a more understandable name to `it`', 'comment_created': datetime.datetime(2021, 6, 24, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657790344, 'comment_body': ""It will be good to perform the multiple operations in multiple line, though we can perform in single go but it's not much readable. \r\n\r\n```\r\nreturn File(repoPath).walk().filter { it ->\r\n          checkIfAllowedDirectory(\r\n            retrieveFilePath(it, repoPath),\r\n            allowedDirectories\r\n          )\r\n            && it.isFile\r\n        }.toList()\r\n```\r\nget the output of `checkIfAllowedDirectory` and put it in a val and then compare it with ` && it.isFile`. This way the function will be more readable. \r\n"", 'comment_created': datetime.datetime(2021, 6, 24, 9, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657791034, 'comment_body': '```suggestion\r\n       * @return check if path is allowed to be analyzed or not\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657792140, 'comment_body': 'can we use some other word instead of `layer` here, not able to understand what does layer means. ', 'comment_created': datetime.datetime(2021, 6, 24, 9, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657792781, 'comment_body': 'we should create this class as a separate file. ', 'comment_created': datetime.datetime(2021, 6, 24, 9, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657794465, 'comment_body': 'add kdoc, refere other test file if required.', 'comment_created': datetime.datetime(2021, 6, 24, 9, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657795318, 'comment_body': 'Add a screenshot showing all these test cases are passing on local. ', 'comment_created': datetime.datetime(2021, 6, 24, 9, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657795845, 'comment_body': 'do we need two different `@Before` functions or can we combine them?', 'comment_created': datetime.datetime(2021, 6, 24, 9, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657796925, 'comment_body': 'Keep these at the top before putting any functions \r\nso format of test file will be like:\r\n\r\n1. properties\r\n2. functions', 'comment_created': datetime.datetime(2021, 6, 24, 9, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657799326, 'comment_body': '```suggestion\r\n      runScript(\r\n        testDirectoryPath = tempFolder.getRoot().toString() + ""/testfiles"",\r\n        allowedDirectories = arrayOf(""data"")\r\n      )\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657799603, 'comment_body': 'add kdoc', 'comment_created': datetime.datetime(2021, 6, 24, 9, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657800560, 'comment_body': 'follow test function name convention\r\n\r\nhttps://github.com/oppia/oppia-android/wiki/Oppia-Android-Testing#naming-convention', 'comment_created': datetime.datetime(2021, 6, 24, 9, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657801002, 'comment_body': '```suggestion\r\n    ).isEqualTo(\r\n      outContent.toString().trim()\r\n    )\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657801124, 'comment_body': 'no extra empty lines', 'comment_created': datetime.datetime(2021, 6, 24, 9, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657801433, 'comment_body': '```suggestion\r\n  private fun runScript(\r\n    testDirectoryPath: String = tempFolder.getRoot().toString(),\r\n    allowedDirectories: Array<String> = arrayOf(""testfiles"")\r\n  ) {\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657882092, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657882328, 'comment_body': 'added', 'comment_created': datetime.datetime(2021, 6, 24, 12, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657883716, 'comment_body': 'Actually, we are making this script extremely generic, so that it is not hardcoded to work on only a particular file extension. Hence, it will collect all types of files, and will then filter them out based on the corresponding requirements of file content or file pattern check. I Hope, this clears.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657883880, 'comment_body': 'Okay, noted.\r\nNow updated, PTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657884043, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657884105, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657884231, 'comment_body': 'removed.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657884446, 'comment_body': 'This looks really neat. Thanks.\r\nNow updated, PTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657884524, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657884585, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657884637, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 24, 12, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657886514, 'comment_body': 'Ah! if we move them outside the companion object then these functions have to be referenced by an instance of the class. This will look comparatively less clean compared to the current approach. These are helper functions that are specifically created for this class, hence it makes sense to reference them directly in the `main` function without involving the reference of any object.\r\nConcluding, I think it will be best if we keep them inside the `companion object` only.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657887218, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890075, 'comment_body': 'Removing this, gives a warning during the compilation of the script. This is actually added to suppress that warning. We are doing the same thing in the existing code too.\r\nhttps://github.com/oppia/oppia-android/blob/f9eb3cdcba174fdd78690af33ffe3c7a8b547a10/utility/src/main/java/org/oppia/android/util/extensions/BundleExtensions.kt#L38\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 12, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890181, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890392, 'comment_body': 'changed the names, PTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890465, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890551, 'comment_body': 'added', 'comment_created': datetime.datetime(2021, 6, 24, 12, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890620, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890907, 'comment_body': 'Yes, it will work fine. Refactored. PTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657890977, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891030, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 24, 12, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891099, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891189, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891377, 'comment_body': 'okay, done.\r\nPTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891438, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 24, 12, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891661, 'comment_body': 'This looks neat. Thanks.\r\nUpdated, PTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891861, 'comment_body': 'changed it to a better description. PTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891923, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657891966, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892028, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892108, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892161, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892228, 'comment_body': 'okay, done.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892362, 'comment_body': 'combined, PTAL.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892416, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892553, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892632, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892831, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657892995, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657893048, 'comment_body': 'removed', 'comment_created': datetime.datetime(2021, 6, 24, 12, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657893124, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 12, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658898128, 'comment_body': ""This method will only be used in `RegexPatternValidationCheck` class, right? \r\nMaking them static by keeping them inside the companion object doesn't look good to me. \r\n\r\nWe usually keep things inside companion object which we want other classes in the same package to access without creating an object of that particular class; example - `CLASS_NAME.FUNCTION()`. \r\n\r\nSo, here we don't want any other class to access this method, and we are making it private too, so I didn't see any good case to keep it inside the companion object. \r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 25, 16, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658898686, 'comment_body': 'Could you add what warning it is giving after removing it? ', 'comment_created': datetime.datetime(2021, 6, 25, 16, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658901581, 'comment_body': 'Also, \r\n\r\n```diff\r\n-  print(""Filename pattern violation: $errorToShow\\n"")\r\n+ println(""Filename pattern violation: $errorToShow"")\r\n\r\n- print(""Prohibited file: [ROOT]/${RepoFile.retrieveFilePath(it, repoPath)}\\n"")\r\n+ println(""Prohibited file: [ROOT]/${RepoFile.retrieveFilePath(it, repoPath)}"")\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 16, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658905231, 'comment_body': 'The screenshot says executed 0 out of 1 test passes. We have a total of 5 tests, could you confirm and check if all the 5 tests are passing on Bazel or not?', 'comment_created': datetime.datetime(2021, 6, 25, 16, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658906900, 'comment_body': 'leave a line above', 'comment_created': datetime.datetime(2021, 6, 25, 16, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658907097, 'comment_body': 'no empty line needed here', 'comment_created': datetime.datetime(2021, 6, 25, 16, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658907302, 'comment_body': 'apply to other return statements as well', 'comment_created': datetime.datetime(2021, 6, 25, 16, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658916327, 'comment_body': 'I am not sure why this is showing this, but here `OK (5 tests)` is in the screenshot. I have also confirmed running the tests locally, all of them are passing on Bazel.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658927671, 'comment_body': '```\r\nscripts/src/java/org/oppia/android/scripts/RegexPatternValidationCheck.kt:106:17: warning: unchecked cast: MessageLite! to T\r\n      }.build() as T\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 17, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658929765, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658930962, 'comment_body': 'Updated, PTAL.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658931421, 'comment_body': 'Moved them outside the `companion object`. PTAL.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658931598, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659355424, 'comment_body': 'keep it in the same line above, and could you please set up macro and use it as mentioned in my earlier reviews? ', 'comment_created': datetime.datetime(2021, 6, 27, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659359201, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659359347, 'comment_body': 'Also, I ran all the kotlin files under `ktlint` https://github.com/oppia/oppia-android/wiki/Ktlint-Guide#commands formatting check. and it is now not giving any errors.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659933124, 'comment_body': ""This should also be run on ``testing``, ``scripts``, and ``model`` subpackages. For the last one, I'm sure we'll introduce prohibited checks for proto files, too."", 'comment_created': datetime.datetime(2021, 6, 28, 16, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659934437, 'comment_body': ""Is it possible to move this to a common Bazel file (maybe in model/) that both domain's version of this & this can share? I'd prefer not to actually duplicate the code here if possible."", 'comment_created': datetime.datetime(2021, 6, 28, 16, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659935042, 'comment_body': 'These should be in a BUILD file within src/j/o/o/a/scripts/ next to RegexPatternValidationCheck like in #3374.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659935536, 'comment_body': ""Suggest using the main_class approach of #3374 since it's more Kotlin-idiomatic (i.e. having a top-level main() function instead of one within a companion object)."", 'comment_created': datetime.datetime(2021, 6, 28, 16, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659936570, 'comment_body': 'What about domain & testing?\r\n\r\nWe should probably use an exclude-list pattern instead of include-list since we want to prohibit activities everywhere except app & testing.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659937101, 'comment_body': '```suggestion\r\n      // Path of the repo to be analyzed.\r\n```\r\n\r\nNote the capitalization. Ditto elsewhere (for internal consistency & consistency with the rest of the codebase).', 'comment_created': datetime.datetime(2021, 6, 28, 16, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659937363, 'comment_body': '```suggestion\r\n      val regexPatternValidationCheck = RegexPatternValidationCheck()\r\n```\r\n\r\nCan be simplified a bit.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659938569, 'comment_body': '```suggestion\r\n    // This cast is type-safe since proto guarantees type consistency from mergeFrom(), and this method is bounded by the generic type T.\r\n    @Suppress(""UNCHECKED_CAST"")\r\n```\r\n\r\nMight need line wrapping. This comment is useful--whenever we suppress legitimate warnings, we should explain why that\'s fine to do.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659939155, 'comment_body': ""```suggestion\r\n    return matchedFiles.isNotEmpty()\r\n```\r\n\r\nMore idiomatic. Also, I don't think the ``toList`` conversion is needed since ``List.filter`` returns a ``List``."", 'comment_created': datetime.datetime(2021, 6, 28, 16, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659939786, 'comment_body': 'Ditto here & elsewhere in the PR.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659940886, 'comment_body': 'Ah, this is a really nice idea for cleanly formatting output lines. Could we maybe align the text with the ``""""""``?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659941452, 'comment_body': '```suggestion\r\n/** Helper class for managing & accessing files within the project repository. */\r\n```\r\n\r\nI think this might be slightly clearer. Also, note the ending punctuation.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659941930, 'comment_body': 'Does this need to be public or can it be private?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659942370, 'comment_body': ""Please add tests for this class since it's now a top-level component of the package.\r\n\r\nAlso, suggest naming it 'RepositoryFile' given that it could potentially be used by other scripts in the future."", 'comment_created': datetime.datetime(2021, 6, 28, 16, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659942863, 'comment_body': 'Maybe: ``isWithinAllowedDirectory`` for the method name, instead?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659943108, 'comment_body': 'Perhaps: ``retrieveRelativeFilePath``?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659943518, 'comment_body': 'In that case, please fix the KDocs for the vals & the object.\r\n\r\nAlso, could we just make them top-level constants instead of wrapping them in an object?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659996825, 'comment_body': 'Here & below--can we not just reference System directly? Why does it need to be fully qualified?', 'comment_created': datetime.datetime(2021, 6, 28, 17, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659997426, 'comment_body': ""Suggest passing in a List instead of Array since that's a bit more fitting the contract of the directories list.\r\n\r\nYou can convert it using ``toTypedArray()``"", 'comment_created': datetime.datetime(2021, 6, 28, 17, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 659999717, 'comment_body': ""You could instead say ``//`` instead of [ROOT] since that's the Bazel way to reference the root (& people should become more familiar with using it over time)."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660000789, 'comment_body': 'Here & above: I suggest using a more compiler-esque way to reference the error by listing the file first. For example:\r\n\r\n```\r\nFile name/path violation: <error>\r\n- //<file_1>\r\n- //<file_2>\r\n...\r\n```\r\n\r\nAnd\r\n\r\n```\r\n//<file>:<line_number>: <error_message>\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 17, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660047328, 'comment_body': 'Another thought on usage. Why not just pass in the root directory and perform a recursive check vs. each package?', 'comment_created': datetime.datetime(2021, 6, 28, 19, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660054757, 'comment_body': '@BenHenning \r\nAh! I thought this too, but there were some good reasons to not go by the recursive checking. First, it saves us from traversing many unwanted directories like `.github`, `.gitsecret`, `.idea`, `bazel-out` (as it will be created after compiling the scripts) and many other files at the root level files. So, rather than excluding so many files and directories, it is better to specify only the directories on which we want the particular script check to run. This was also the reason for which the `RepoFile` class was created so that every script check can work only on the directories we specify and not on each and every directory and file. This was the reason why a helper function `checkAllowedDirectory` was introduced. \r\nThis maintains uniformity across all the scripts written as it gives more genericness. So checking every package might be true for the regex check, but it may not be required for the other checks, so if we go by the current approach, we will be able to maintain uniformity and cleanliness. Hence, because of these reasons, I would really prefer to go by the current approach i.e specifying the packages/directories.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660147534, 'comment_body': ""Hmm, but one big problem with an include-list approach (the current) vs. an exclude-list approach (the one you described) is that in the former we need to remember to update the command to include new directories or they won't be checked. This isn't ideal as it requires a human to remember to do something whereas there's a path forward where we can ensure it's automated to reduce the risk of checks being missed.\r\n\r\nTo that end, I think the include-all-and-exclude approach is probably more resilient to failure. I definitely agree with your genericness argument, and there may be a way to get both: now that we have a general-purpose repository file class, we can consolidate exclusion to only the directories which should always be ignored by all checks. I think that's .github, .idea, and .bazel* files.\r\n\r\nWDYT?"", 'comment_created': datetime.datetime(2021, 6, 28, 22, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660185624, 'comment_body': ""The type can be removed here, and 'public' is redundant (& can therefore be removed)."", 'comment_created': datetime.datetime(2021, 6, 28, 23, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660846201, 'comment_body': 'Makes sense.\r\nAlso, one thing, it might be better not to keep the `.github` directory in the excluded directory, as we might have to recurse over it for the TODO checks, and it possesses no harm to the other script checks.', 'comment_created': datetime.datetime(2021, 6, 29, 17, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660942405, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660942510, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943062, 'comment_body': 'Splitted them into sub packages as suggested on #3341. Also, corresponding BUILD files added. ', 'comment_created': datetime.datetime(2021, 6, 29, 20, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943152, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943230, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943388, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943462, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943619, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943706, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943778, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660943943, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660944060, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660944286, 'comment_body': 'Converted to private.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660944358, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660944453, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660944542, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660944997, 'comment_body': 'Removed. Apologies! as this was added by the auto competition of Android studio.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660945087, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660945327, 'comment_body': 'We are logging the absolute path now, as suggested latest.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660945405, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660945516, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660948224, 'comment_body': '@BenHenning My only intention to add the test rule here was that because, it needs the `REGEX_PATTERN_CHECK_ASSETS` as a `data` dependency. Hence, it has to be at the root level BUILD. Also, to maintain uniformness, it seems good to add all the test rules here only. Let me know your thoughts.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660951383, 'comment_body': '@BenHenning \r\nDone.', 'comment_created': datetime.datetime(2021, 6, 29, 20, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661206747, 'comment_body': ""Suggest instead making this say something along the lines of ``Static analysis check configuration files.`` & remove the section header above. I don't foresee having many lines corresponding to these configurations, so I don't think it yet makes sense to organize them into their own section."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661208287, 'comment_body': 'I feel like these are lacking in context. I suggest providing a basic example for each in the docstring to elaborate a bit on exactly what these values are.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661209165, 'comment_body': 'Please add a file-level doc comment explaining what this package is for.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661209852, 'comment_body': ""I suggest making a top-level scripts_visibility, instead, and using that for common dependencies. Otherwise, it's a bit of an inversion having packages open access to specific sibling packages."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661210188, 'comment_body': ""Prefer splitting these into distinct libraries if they have no commonality (e.g. 'repository_file' and 'result_constants')."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661210417, 'comment_body': 'Note KDoc capitalization--please fix.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661210631, 'comment_body': 'Can be private (always prefer to minimize visibility--only expose what needs to be exposed).', 'comment_created': datetime.datetime(2021, 6, 30, 7, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661210869, 'comment_body': ""Some of these aren't directories--please remove those & only keep directories."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661211404, 'comment_body': ""I don't believe there's a bazel directory, but there are bazel-bin, bazel-oppia-android, and bazel-out that should be ignored."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661211620, 'comment_body': 'This is fine to include in checks.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661212409, 'comment_body': ""Some additional context might be nice to add, e.g.:\r\n\r\n``Files that are generated or can't be altered in style/best practices (such as those managed by Android Studio) are automatically exempted.``"", 'comment_created': datetime.datetime(2021, 6, 30, 7, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661212533, 'comment_body': '```suggestion\r\n     * @return all files which need to be checked\r\n```\r\n\r\nNit on grammar.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661212922, 'comment_body': 'Maybe instead name as: ``expectedExtension`` with an additional detail in the param comment to specify ``. This defaults to the empty string which signifies no extension restriction.``', 'comment_created': datetime.datetime(2021, 6, 30, 7, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661213062, 'comment_body': 'Are these files or directories?', 'comment_created': datetime.datetime(2021, 6, 30, 7, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661214778, 'comment_body': ""I think it might also be acceptable to share the 'scripts_visibility' for proto libraries that we discussed above. It's a bit more open access than we technically need, but it's also easier to maintain & replicate for consistency."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661215444, 'comment_body': ""Prefer: ``regex_pattern_validation_check_lib``. Generally, it's often best to keep close to the name of the thing being built."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661215939, 'comment_body': 'We could introduce a separate visibility in the scripts directory called ``oppia_script_lib_visibility``. See my PR for an existing working package group meant for this purpose.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661216305, 'comment_body': 'Please capitalize here & elsewhere for consistency.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661218290, 'comment_body': '``Helper function`` is imlpied, Suggest:\r\n\r\n``Calls [RepositoryFile.collectSearchFiles] for the test root directory and returns the result.``\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661219112, 'comment_body': ""There's a more Truth-idiomatic way to check this:\r\n\r\n```kotlin\r\nassertThat(collectedFiles).doesNotContain(file)\r\n```\r\n\r\nDitto for the test above (except you probably want ``contains``)."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661220028, 'comment_body': 'More idiomatic: ``""${tempFolder.root}/testfiles/""\r\n\r\nDitto below.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661220668, 'comment_body': 'Also, are all of the parameters being tested? Consider instead of having a helper, calling this method directly in tests & then add more tests as needed to verify all the different behavioral cases you can come up with based on different combinations of parameters that can be passed in.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661221292, 'comment_body': 'I find this output much cleaner--thanks!', 'comment_created': datetime.datetime(2021, 6, 30, 7, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661222038, 'comment_body': ""Suggest also adding a test for the testing module since that's a special case that should pass."", 'comment_created': datetime.datetime(2021, 6, 30, 7, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661225690, 'comment_body': ""When would we look through ``.github/``? I'm concerned with including that since it includes copies of files from the repository (though not in an easy-to-read format). Given it's mainly Git metadata, it doesn't seem pertinent to static analysis checks or am I missing something?"", 'comment_created': datetime.datetime(2021, 6, 30, 8, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661226994, 'comment_body': '```suggestion\r\n      File(file.toString())\r\n          .bufferedReader()\r\n          .lineSequence()\r\n```\r\n\r\nAnd then ``.foldIndexed(...)`` would be aligned with ``lineSequence``. This is generally how formatting in these cases should look.', 'comment_created': datetime.datetime(2021, 6, 30, 8, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661230197, 'comment_body': ""Tests should always be next to their production implementations (we don't do this today elsewhere because we're in a mid-migration state from Gradle to Bazel, but the design proposed here is the recommended best practice). Could we move ``REGEX_PATTERN_CHECK_ASSETS`` to a Bazel file within scripts/regex & import it?"", 'comment_created': datetime.datetime(2021, 6, 30, 8, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661360074, 'comment_body': ""These are files. Let me make it a bit more clear. `alwaysExcludeDirectoryList` is a list of directories that will always be exempted for each and every check, whereas, `exemptionsList` is an optional argument which provides every script check the liberty to exempt whatever files they want during the analysis. For example: for the case of `TestFileCheck`, when calling this helper method to collect the files, we will pass the `TEST_FILES_EXEMPTIONS_LIST`, so that we don't analyze them for the check. This way, we have made it customizable to work for any check. I hope that this sounds neat. Let me know your thoughts."", 'comment_created': datetime.datetime(2021, 6, 30, 11, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661543909, 'comment_body': 'I think this can be resolved now, as per our discussion.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661544201, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661544292, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661544398, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661544492, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661544601, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661544996, 'comment_body': 'Apologies! Just missed it. Updated.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661545112, 'comment_body': 'Apologies! Just missed it. Updated.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661545257, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661545360, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661545542, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661545644, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661545809, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661545919, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661546048, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661546186, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661546462, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661546557, 'comment_body': 'Apologies! Just missed it. Updated.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661546898, 'comment_body': 'Outdated.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661547021, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661548178, 'comment_body': 'Removed the helper function, and added plenty of extra tests to test all the parameters.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661548484, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661548692, 'comment_body': 'Noted.\r\nNow, updated.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661559140, 'comment_body': ""@BenHenning \r\nI tried defining a macro in a new Bazel file from where we could directly retrieve the `REGEX_PATTERN_ASSETS`.\r\nhttps://github.com/oppia/oppia-android/pull/3340/files#diff-3f5a0e252580a7a62a0de8d7b8ada4bc0c1885d1c4846dc06bc14139a9690cfaR7\r\nIf we define the `kt_jvm_test` in the root BUILD.bazel file of scripts then everything works fine. But if I try to define the test rule in the `regex` subpackage, then the bazel pipeline to process the textproto assets is not working. This is because it is not able to find an `assets` directory at the subpackage level. Therefore, I was left with no other choice but to define the test rule here. Please guide me on how can we achieve this in a clean way as per the best practices.\r\n \r\nI also tried shifting the `assets` directory to the regex subpackage level, but that will not work for the root level binary rule, as it can't cross the subpackage boundary to reference the assets. Therefore, this also doesn't seems good.\r\nPlease share your thoughts!"", 'comment_created': datetime.datetime(2021, 6, 30, 14, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661561536, 'comment_body': '@BenHenning \r\nThe sole reason for adding this was because many of the subpackage libraries need other subpackage libraries as a dep (for example: libraries of `common` package are needed by `regex_pattern_validation_check_lib`), so in order to make them visible to each other, we probably have to include the sub-packages too in this package group.\r\nDoes this sounds good?', 'comment_created': datetime.datetime(2021, 6, 30, 15, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662001088, 'comment_body': ""This additional documentation is really helpful. This actually seems to be a Bazel path prefix, so I suggest calling it proto_dep_bazel_target_prefix to clarify. We're overloading the term 'path' to mean both filesystem and Bazel paths, so we should try to be more specific."", 'comment_created': datetime.datetime(2021, 7, 1, 6, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662001500, 'comment_body': ""We should have two different package groups for this purpose, but I think you can wait for my PR at this point since you need it to pass CI on this PR, anyway, and it sets up a lot of this by building on the approach you've established here."", 'comment_created': datetime.datetime(2021, 7, 1, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662002676, 'comment_body': ""Multi-line at-param continuation is +4 spaces from the '@' symbol."", 'comment_created': datetime.datetime(2021, 7, 1, 6, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662002994, 'comment_body': 'Just ``setUp`` is fine (and conventional with what we name this elsewhere).', 'comment_created': datetime.datetime(2021, 7, 1, 6, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662004062, 'comment_body': ""Is there a failure condition that we can test? E.g. what if we try getting the relative file path for a file which doesn't have a common directory with the root?"", 'comment_created': datetime.datetime(2021, 7, 1, 6, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662004163, 'comment_body': '```suggestion\r\n   * path to the test directory.\r\n```\r\n\r\nNote KDoc line alignment.', 'comment_created': datetime.datetime(2021, 7, 1, 6, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662004565, 'comment_body': 'Suggest also referencing the documentation in model/BUILD.bazel since that provides a lot of context for how to add new proto libraries.', 'comment_created': datetime.datetime(2021, 7, 1, 6, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662004915, 'comment_body': 'Please add EOF newline (allf files should always have an EOF newline).', 'comment_created': datetime.datetime(2021, 7, 1, 6, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662116997, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 9, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662117072, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 1, 9, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662117138, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 9, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662117215, 'comment_body': 'Noted. Done', 'comment_created': datetime.datetime(2021, 7, 1, 9, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662117307, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 9, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662117617, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 9, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662117702, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 9, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662526025, 'comment_body': 'This is now resolved! as per our discussion on the `kt_jvm_library` approach.', 'comment_created': datetime.datetime(2021, 7, 1, 18, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664301449, 'comment_body': '```suggestion\r\nMacros for preparing & creating textproto-converted assets to include in any module.\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 7, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664302206, 'comment_body': 'Could you add ``:regex_check_assets`` as a runtime dep instead of passing the assets along in ``data`` again? Ideally we should avoid passing in the assets twice.', 'comment_created': datetime.datetime(2021, 7, 6, 7, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664303447, 'comment_body': '```suggestion\r\n     * @return whether the specified path should be analyzed per allow rules\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 7, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664304636, 'comment_body': '```suggestion\r\nfile path/name and content are used in the codebase.\r\n```\r\n\r\nNit on grammar.', 'comment_created': datetime.datetime(2021, 7, 6, 7, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664305290, 'comment_body': '```suggestion\r\n * Script for ensuring that prohibited file contents and file naming patterns are not present in the\r\n * codebase.\r\n```\r\n\r\nMore content can fit on the first line.', 'comment_created': datetime.datetime(2021, 7, 6, 7, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664305529, 'comment_body': '```suggestion\r\n  val repoPath = ""${args[0]}/""\r\n```\r\n\r\nBit more Kotlin-idiomatic.', 'comment_created': datetime.datetime(2021, 7, 6, 7, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664305975, 'comment_body': ""Suggest: ``loadProto()`` or ``retrieveProto`` per my earlier feedback regarding 'get-' named methods."", 'comment_created': datetime.datetime(2021, 7, 6, 7, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664307765, 'comment_body': ""```suggestion\r\n  fun testRepoFile_specifyMultipleParams_collectedFilesComplyWithAllSpecs() {\r\n```\r\n\r\nAlternative that fits within the line. There's usually a way to get these method names to fit. :)"", 'comment_created': datetime.datetime(2021, 7, 6, 7, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664309591, 'comment_body': ""Could these be defined under scripts/.../regex? That seems like a better place since it's another library to include in both tests & the binary."", 'comment_created': datetime.datetime(2021, 7, 6, 7, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664311658, 'comment_body': 'I think the current version is sufficiently clear--thanks.', 'comment_created': datetime.datetime(2021, 7, 6, 7, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664331250, 'comment_body': ""@BenHenning \r\nAh! actually, this was the main issue. The pipeline will not work here because it looks for the assets at the location where it is called from the BUILD.bazel file, and since the assets are present at the root level of scripts and if we shift this to scripts/.../regex, then it actually fails to find those, as the assets are present some levels up. Therefore, it looks like we can't define it at scripts/.../regex "", 'comment_created': datetime.datetime(2021, 7, 6, 8, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664355015, 'comment_body': 'Here & in other PRs: please omit unless you need ``assertThrows``.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664357227, 'comment_body': '@BenHenning \r\nHm. On doing this, for some reason it is not able to find the generated `.pb` files at the run time. When we run the `kt_jvm_binary`. It is giving this error when we add `regex_check_assets` as a runtime dep, instead of adding as `data`\r\n```\r\nException in thread ""main"" java.io.FileNotFoundException: scripts/assets/filename_pattern_validation_checks.pb (No such file or directory)\r\n        at java.base/java.io.FileInputStream.open0(Native Method)\r\n        at java.base/java.io.FileInputStream.open(FileInputStream.java:219)\r\n        at java.base/java.io.FileInputStream.<init>(FileInputStream.java:157)\r\n        at org.oppia.android.scripts.regex.RegexPatternValidationCheckKt.loadProto(RegexPatternValidationCheck.kt:98)\r\n        at org.oppia.android.scripts.regex.RegexPatternValidationCheckKt.retrieveFilenameChecks(RegexPatternValidationCheck.kt:65)\r\n        at org.oppia.android.scripts.regex.RegexPatternValidationCheckKt.main(RegexPatternValidationCheck.kt:35)\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 8, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664357337, 'comment_body': ""Why can't we make the macros use a relative path from the root of the Bazel repository to the locations of the textproto files? I don't understand why any of the current code would require things to be in the same directory."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664357894, 'comment_body': ""Looking at this again, we ought to combine this with the other Bazel file. I don't see a reason why 2 files are needed for defining the textproto data files. See other discussion thread for trying to consolidate everything to the scripts/regex package."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664431569, 'comment_body': ""Actually, I tried shiftng everything under scripts/.../regex. Doing this results in this error:\r\n\r\n`GenerateBinaryProtoFromText scripts/src/java/org/oppia/android/scripts/regex/assets/filename_pattern_validation_checks.pb failed: missing input file '//scripts/src/java/org/oppia/android/scripts/regex:assets/filename_pattern_validation_checks.textproto'`\r\n\r\nI have pushed all the new changes temporarily PTAL.\r\n\r\nWe could rectify this by removing the `regex_assets.bzl` file and keep everything in the `script_assets.bzl`. Just like it is done currently in the `domain` layer.\r\nThis will maintain uniformity for all the coming scripts. "", 'comment_created': datetime.datetime(2021, 7, 6, 10, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664433066, 'comment_body': ""Also, I tried giving a relative path: `//scripts/assets`.\r\nThis gives the following error:\r\n\r\n`ERROR: /home/dell/Desktop/staticanalysis/oppia-android/scripts/BUILD.bazel:47:65: //scripts:generate_binary_proto_for_text_proto_regex_pattern_assets_file_content_validation_checks: label '//scripts/assets/file_content_validation_checks.pb' is not in the current package`\r\n"", 'comment_created': datetime.datetime(2021, 7, 6, 10, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664461040, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664461124, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664461275, 'comment_body': 'Done, thanks.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664461326, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664461378, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664461514, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664463019, 'comment_body': 'Combined to a single one.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664464181, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666041795, 'comment_body': ""Probably a limitation in our custom rule. It seems like this won't be an option for now, then."", 'comment_created': datetime.datetime(2021, 7, 8, 9, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666042096, 'comment_body': 'Nit: prefer keeping this on one line if it fits.', 'comment_created': datetime.datetime(2021, 7, 8, 9, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666043943, 'comment_body': ""Prefer naming this & the lite proto library based on the filename, e.g. ``filename_pattern_validation_checks_proto`` (structure is sort of implied with 'proto' in the name)."", 'comment_created': datetime.datetime(2021, 7, 8, 9, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666083164, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666083448, 'comment_body': ""This doesn't fits in one line, therefore had to do this."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}]","[{'commit_sha': '225a4fc070efb18dda2f4e08d76ac94b2b0321aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638895fa2e461aae4b2d9f6e519e8349e0b3d282', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fd706805e82358fb0cb4be551e3fe10ae6ee2c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e77646138df0189eacb8c3a029bf26615abb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44e0150e382ab0bd4a085ad21b371fe78c63ca2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d38f1393f18d709a32940cf14f0c45b1a43bc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173fe5314ae3b57a55d49d150f95e3efed2ac5da', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618e380d8c52b3bdb31c0b85a253ab6177cc221b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3830ac088920f22e8c7bd59dc70a05ce1ea16f7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb93c0a1ce2044bdd7fe1a3a5c4955313f02d6fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7342c16b93a5bf6c827b5cd50c1e495f5442986', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e593b8f1a108a3c48794f840966e718f8b426b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1765798791e95d8f1ce539dd3fc750390c4883', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb0418a90c5f1d5ab9ca69f5d11fe6b16c76fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325f28c5033d45fba09dc6fa076749dcf590828d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f8ea697bd66cf4e9e94dc1398560de400b32fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1970eb4ff4fc47f743607a66ff25932882f15d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f440a33e6036b742a58f68b12d0adc704764c10b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163310e09894c653122d2e0512dd47b9b6f087e1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381853cd318e67681b24fcb4db203017eff05b75', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01a238b9a361ac0f9da3667908bb081e89268c3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c0bfdcbce2a52ca0ccc128207acb19ff7fb37f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e64dc566fdb74ca1a1a28b8f25aebadbb64065', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8740a48fee209a8c9f278437a9efc9e874bd09cb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe17ed93aa4c70a35cec1af86dcea32e63874118', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248266a80f213d7d9d533151a2093294379bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9375775c4d793a3910c9e15cb7859705a5080356', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc5eb0484a8ff458e82b843461b4f0b36ecdc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81152127ddaf0e80d47b3af2f9375556c36d0b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb20d3a95a18a22c7f3044f8863bb14abbce1a0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a0166b859381c43c31d1421bab0c84ce90fd52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac402d40f3145ffc588260f0e7db08ba664d103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32910ea758b73537bf79ec2002f33c32d07dabb5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b749db4d5f8378dd5ba1abf5ed6325e12619569', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10020344a811138759eb925c4f08692dda4eeb0a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dbe3ed6975861bfcd425a6efb7f9b84786a419', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d66e01918ab83227f4d64eeb8f58718e9d4bf9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae1f8d504a8a357c4d09d0842df078722d621c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd6b4ea459b3907682c3f7fc06f4f9db05d9c85', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73b1fe4ca38ae0dd5bbbe896a383cb9559b103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1637ccd5dfe39a17512b45ba44bcd9ade9e47ac1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba990ef364db43eb200e5f04d6a3adcdd36c5b3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262a4ecc2478e1f3ee8ebc65e35e1f7145ea3f4b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c1042f98839936b79672aec59f90a18675819', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345946123ddaa5d17c58cc9858637c433ef607e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e519791e12af1e9f30d891dfc4d554d3b93fd7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55757024e7b905f6bf1eae7057a48598ac61e02', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5db31908babb9012fcf155b14da2a24bb537a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7f9fca129fd7d6e420af5f274f16ee3ea0b945', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70c88051d4ba8bd4a3b7cd9f43414f27896ea94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c1df5b6d3b373dfc3ae5e876f786e175faa482', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed9d9a851cf821e352a9ae12d0db1eabc04f34c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30158c0a9065520ef7226f9663289c033e82084', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ef42f0af3e7be963c5971bf27efa2ad129720', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e108adc274c85d6719fe3e61aca03682aa0b52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}]",Sparsh Agrawal,55937724,,User,,26,,37,93
673559545,Fix #3291: Add check for XML syntax validation,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->

Fixes #3291: Add check for XML syntac validation

The script traverses different layers of the codebase to check for the syntax correctness of XML files
To run the script, use:

`bazel run //scripts:xml_syntax_check -- $(pwd)`

For testing the script, automated tests have been added.
To execute the tests, use:

`bazel test //scripts/src/javatests/org/oppia/android/scripts/xml:XmlSyntaxCheckTest`

**Note:** We are generating the test assets dynamically at the time of executing them. The test assets are automatically deleted, when the test finishes.

**Blocked on:** #3340 

Screenshot of new tests passing locally:

![image](https://user-images.githubusercontent.com/55937724/123278466-97f6b980-d524-11eb-8b0c-c149292fd126.png)


## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.",True,3341,https://api.github.com/repos/oppia/oppia-android/pulls/3341,https://github.com/oppia/oppia-android/pull/3341,closed,464,0,8,94,15,113,0,1,[],2021-06-18 15:19:40+00:00,2021-07-08 22:04:52+00:00,1752312.0,"20 days, 6:45:12","[{'comment_id': 654965975, 'comment_body': ""data domain doesn't have any res file, utility does file dimen and string XML file if we are checking that else no needed, we can keep the check only for app module. "", 'comment_created': datetime.datetime(2021, 6, 20, 17, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 655100423, 'comment_body': ""Yes! they don't have any res files, but my only concern was that these layers do have the `AndroidManifest.xml` file present, so I thought of including them too in the XML syntax check. \r\nWDYT?"", 'comment_created': datetime.datetime(2021, 6, 21, 6, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657804347, 'comment_body': 'add kdocs', 'comment_created': datetime.datetime(2021, 6, 24, 9, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657804578, 'comment_body': 'single line comment `//`', 'comment_created': datetime.datetime(2021, 6, 24, 9, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657805069, 'comment_body': '```suggestion\r\n      val hasXmlSyntaxFailure = searchFiles.fold(initial = false) { isFailing, file ->\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657805377, 'comment_body': '```suggestion\r\n      fun collectSearchFiles(\r\n        repoPath: String,\r\n        allowedDirectories: List<String>\r\n      )\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657805621, 'comment_body': '```suggestion\r\n            allowedDirectories\r\n          )\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657986480, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 14, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657986580, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 14, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657986692, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 14, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657986760, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 14, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657987001, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 14, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658908996, 'comment_body': 'correct format - https://kotlinlang.org/docs/kotlin-doc.html#kdoc-syntax', 'comment_created': datetime.datetime(2021, 6, 25, 16, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658909650, 'comment_body': 'can we separate out this class?', 'comment_created': datetime.datetime(2021, 6, 25, 16, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658943512, 'comment_body': 'Separated. PTAL.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658943643, 'comment_body': 'Apologies! Corrected. PTAL.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659497933, 'comment_body': 'Looking for @BenHenning thoughts on this', 'comment_created': datetime.datetime(2021, 6, 28, 5, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659498306, 'comment_body': 'arguments name should be readable', 'comment_created': datetime.datetime(2021, 6, 28, 5, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659517890, 'comment_body': 'Done. Made them more descriptive.', 'comment_created': datetime.datetime(2021, 6, 28, 6, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660046811, 'comment_body': 'Should this also be ``if: always()`` in #3340?', 'comment_created': datetime.datetime(2021, 6, 28, 19, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660048503, 'comment_body': 'Hmm. I just left a comment in #3340 about passing in the root directory and just recursing among that. If we validate all XML files then this slight oddity is less noticeable (since we do ultimately want all XML files to be valid). Would that mitigate the concern here?', 'comment_created': datetime.datetime(2021, 6, 28, 19, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660048797, 'comment_body': 'Ditto here--these should be at the file level.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660048941, 'comment_body': 'Both of these need KDocs.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660049340, 'comment_body': 'Maybe ``XML_SYNTAX_CHECK_PASSED_OUTPUT_INDICATOR`` might be a bit clearer on how this is being used. WDYT?\r\n\r\nDitto for the others.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660051173, 'comment_body': ""For this & the regex pattern: see other test targets in the codebase to ensure we naming these consistently.\r\n\r\nThis should be XmlSyntaxCheckTest (to match the name of the test).\r\n\r\n/cc @fsharpasharp as well since tests are an intentional deviation in naming strategy so that it's easier to create grouped test commands."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660051756, 'comment_body': 'Hmm. Could you try something: if you add an empty BUILD.bazel file in org/, org/oppia, and org/oppia/android, can you omit this test_class and still run the test?', 'comment_created': datetime.datetime(2021, 6, 28, 19, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660052252, 'comment_body': 'This should be in its own library & added as a dep so it can be shared between different scripts that need it. Ditto for any of the other generic classes (prefer using libraries over duplicating sources--this will make the build perform more efficiently).', 'comment_created': datetime.datetime(2021, 6, 28, 19, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660052838, 'comment_body': 'Here & everywhere else: KDocs should fit the full 100 character limit before being line-wrapped just like code (prefer not prematurely line-wrapping).', 'comment_created': datetime.datetime(2021, 6, 28, 19, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660053195, 'comment_body': ""Does ``repoPath`` need to be public? In general, prefer to keep everything with as minimal visibility as necessary to simplify your public contract (put another way: everything that's public needs to be tested thoroughly since other components can use them)."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660054289, 'comment_body': ""It seems that this class is specific to XML. Consider naming it: XmlSyntaxErrorHandler so that it's not confused among other error handling happening for other scripts.\r\n\r\nThis might also be a good indication that we need to do further subpackaging. What do you think about:\r\n\r\norg.oppia.android.apps.scripts.regex\r\norg.oppia.android.apps.scripts.xml\r\norg.oppia.android.apps.scripts.common <-- common utilities shared between the scripts\r\n\r\nFor organizing the scripts?"", 'comment_created': datetime.datetime(2021, 6, 28, 19, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660054454, 'comment_body': ""Is this correct? Nothing seems to be returned. (If the return value is Unit or Nothing then ``@return`` shouldn't be in the KDoc)."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660054842, 'comment_body': 'I suggest formatting this message similarly to the version suggested in #3340.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660058717, 'comment_body': 'I apparently need to reopen this since GitHub now longer allows multiple conversations for a single line of code (see: https://github.community/t/please-re-add-multiple-comments-per-line/187397).\r\n\r\nNit on naming: ``XmlSyntaxCheck`` per camel-casing rules: https://developer.android.com/kotlin/style-guide#camel_case', 'comment_created': datetime.datetime(2021, 6, 28, 19, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660059806, 'comment_body': 'Please fix single line comment casing & line wrapping per earlier comments here & in #3340.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660061143, 'comment_body': ""Should we maybe create a new builder for each file instead of sharing them? I'm not sure whether the builders are meant to be reused like this (or are they?)."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660062040, 'comment_body': ""I wonder if maybe a cleaner way of handling this is to collect all the errors from the error handler, and if any are present then we determine it's a failure & log them. This keeps the logging & the logic in the same file since the error handler just becomes a cataloging utility, and it avoids using exceptions for control flow (which is considered a bad practice in Effective Java)."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660062199, 'comment_body': ""Also, please add tests for this file (but I suggest looking at my comment in the main script class first since this class's contract could be simplified which would result in simpler tests)."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660062956, 'comment_body': 'For this & the regex check script: the main function should be documented as well. See my PR for an idea on how to do this--it\'s nice to document the actual usage of the script in the KDoc of main() since that\'s essentially how to ""call"" it.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660063493, 'comment_body': ""``validXml``\r\n\r\nDitto elsewhere (make sure 'xml' is following expected camel case naming rules for all identifiers where it's used, including variables)."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660063734, 'comment_body': 'Maybe use ``""""""`` syntax, instead? Ditto for the other tests.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660064308, 'comment_body': 'This can fit on one line--suggest doing that here & elsewhere (including #3340).\r\n\r\nAlso, maybe directly import the constant to avoid needing to qualify it (though that may be eliminated, anyway, if we stop using the constants object).', 'comment_created': datetime.datetime(2021, 6, 28, 19, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660065064, 'comment_body': ""I'm starting to change my thinking on this. Instead of ``//`` maybe we should actually just fully qualify it (e.g. absolute path).\r\n\r\nFor the tests, you can just use multiple ``contains`` checks instead of validating the exact output, and the contains can just verify ``testfiles/TestFile.xml`` is present. Ditto for other tests & #3340.\r\n\r\nWDYT?"", 'comment_created': datetime.datetime(2021, 6, 28, 19, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660065171, 'comment_body': '``xmlSyntaxIsIncorrect``\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660066493, 'comment_body': ""This error actually seems wrong--shouldn't it be mentioning that the closing tag is missing or wrong rather than missing a ``>``?"", 'comment_created': datetime.datetime(2021, 6, 28, 19, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660184826, 'comment_body': 'Following up: you can simplify this a bit (and the extra BUILD files aren\'t needed since I think this directory structure is better fitting what Bazel expects). See:\r\n\r\n```bazel\r\nkt_jvm_test(\r\n    name = ""ComputeAffectedTestsTest"",\r\n    srcs = [""ComputeAffectedTestsTest.kt""],\r\n    deps = [\r\n        "":compute_affected_tests_lib"",\r\n        ""//third_party:com_google_truth_truth"",\r\n        ""//third_party:org_jetbrains_kotlin_kotlin-test-junit"",\r\n    ],\r\n)\r\n```\r\n\r\nThat works for me when running locally:\r\n\r\n```shell\r\nbazel test //scripts/src/java/org/oppia/android/scripts/ci:ComputeAffectedTestsTest\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 23, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660548119, 'comment_body': 'Yes, this might seem a bit incorrect, but the same error message can be reproduced on several of the online XML validators too. When we do the same syntax error, all of them report the same error message: \r\n""The end-tag for element type ""shape"" must end with a \'>\' delimiter.""\r\nhttps://www.xmlvalidation.com/index.php?id=1&L=0\r\nhttps://www.liquid-technologies.com/online-xml-validator\r\nhttps://www.truugo.com/xml_validator/\r\nhttps://onlinexmltools.com/validate-xml\r\n\r\nWill it be fine, to go with this? as it seems pretty difficult to dig on how we can change this, as this is reported by the parser. ', 'comment_created': datetime.datetime(2021, 6, 29, 12, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660804177, 'comment_body': ""This sounds neat to me. Here is what I am thinking, we will maintain a mutable list of errors in the `XmlSyntaxErrorHandler`, and whenever any exception is raised by the parser, we will simply add it to the list. After the parsing is done, we will just collect the list of all the errors received by the error handler and then log them and fail the script if it's the case. How does this sound?\r\n\r\nAlso, one thing that we have to take care of is that, for every `fatalError` in the Xml syntax, if the override `fatalError` method of our error handler isn't throwing any exception,  then the default error handler throws a `SaxParseException`. So, in order to make our script continue to work without being terminated in between, we have to wrap the parsing line of code in a try-catch block, just like this:\r\n```kotlin\r\ntry {\r\n builder.parse('path_to_xml')\r\n} catch (e: SaxParseException){}\r\n```\r\nPlease let me know your thoughts on this overall approach."", 'comment_created': datetime.datetime(2021, 6, 29, 17, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661245490, 'comment_body': 'Both sound good to me, and I agree with the overall approach being proposed here.', 'comment_created': datetime.datetime(2021, 6, 30, 8, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661245965, 'comment_body': ""Yeah, I don't think we have any choice here. I just wanted to make sure that this is working as intended, even if it isn't ideal. Thanks for clarifying."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 661822387, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661822495, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661822593, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661822712, 'comment_body': 'SGTM. DONE.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661822782, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661822899, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661823001, 'comment_body': 'Outdated.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661823109, 'comment_body': 'Done. noted.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661823260, 'comment_body': 'Outdated. Tests added too.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661823414, 'comment_body': 'SGTM. DONE.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661823548, 'comment_body': 'Removed. noted.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661823615, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661823719, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824296, 'comment_body': ""I think it's fine to use a single builder, as we are doing nothing more than checking an Xml file can be parsed successfully or not."", 'comment_created': datetime.datetime(2021, 6, 30, 21, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824414, 'comment_body': 'Implemented.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824510, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824562, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824639, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824704, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824782, 'comment_body': 'SGTM. DONE.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661824837, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 661825110, 'comment_body': 'I think we can resolve this now.', 'comment_created': datetime.datetime(2021, 6, 30, 21, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662006840, 'comment_body': 'Nit: please add spaces between the constants such that it looks like this:\r\n\r\n```kotlin\r\n/** KDoc...*/\r\nconstant\r\n\r\n/** KDoc... */\r\nconstant\r\n\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 6, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662006882, 'comment_body': 'EOF newline here also.', 'comment_created': datetime.datetime(2021, 7, 1, 6, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662007582, 'comment_body': ""```suggestion\r\nPackage for XML syntax based checks.\r\n```\r\n\r\n(XML is technically capitalized when documenting it, but it should be 'Xml' when in an identifier per identifier camel-casing guidelines)."", 'comment_created': datetime.datetime(2021, 7, 1, 6, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662007769, 'comment_body': 'Why not just include this in xml_syntax_check_lib? Will it ever be used anywhere else?', 'comment_created': datetime.datetime(2021, 7, 1, 6, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662008052, 'comment_body': 'Ditto here & elsewhere for XML.', 'comment_created': datetime.datetime(2021, 7, 1, 6, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662009041, 'comment_body': 'Hmm parsing the system ID like this seems a bit hacky. I wonder if we could instead create a separate error handler for each file (by using a separate document builder) so that we know exactly which file corresponds to each error? While a bit more cumbersome, that relies less on an identifier happening to include the filename (which sounds like something that could potentially change in the future).', 'comment_created': datetime.datetime(2021, 7, 1, 6, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662009983, 'comment_body': 'Could be made a bit more concise I think:\r\n\r\n```suggestion\r\n * Custom XML parser error handler which collects syntax errors as they occur for later processing.\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 6, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662010213, 'comment_body': ""```suggestion\r\n   * @return a list of all the errors collected by the error handler\r\n```\r\n\r\nWe don't specify the type in `@return` clauses."", 'comment_created': datetime.datetime(2021, 7, 1, 6, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662010598, 'comment_body': 'Prefer:\r\n\r\n```kotlin\r\nassertThat(errorList).isEmpty()\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 6, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662011131, 'comment_body': 'Bit more Kotlin-idiomatic to do ``errorList.first()`` or ``errorList.single()`` in these cases.', 'comment_created': datetime.datetime(2021, 7, 1, 6, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662011343, 'comment_body': '```suggestion\r\n  fun testXmlErrorHandler_multipleInvalidXmlFiles_errorHandlerShouldCollectAllErrors() {\r\n```\r\n\r\nTypo in test name.', 'comment_created': datetime.datetime(2021, 7, 1, 6, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662067914, 'comment_body': 'Update: We are now using a new builder for every file.', 'comment_created': datetime.datetime(2021, 7, 1, 7, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662068211, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 7, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662068279, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 7, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662068856, 'comment_body': ""Ah! this lib is also used in `XmlSyntaxErrorHandlerTest`, so that's why I decided to separate it out."", 'comment_created': datetime.datetime(2021, 7, 1, 8, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662068981, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 8, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662069075, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 8, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662069149, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 8, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662069412, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 8, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662069528, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 8, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662069593, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 8, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662070140, 'comment_body': 'This is outdated, as we are using a separate error handler for every file, so we are not using the same handler for multiple files.', 'comment_created': datetime.datetime(2021, 7, 1, 8, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662071486, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 8, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664327897, 'comment_body': 'Got it. In that case, let\'s strike ""_lib"" from the library name since it\'s not needed here. We only use that for the root script libraries since they have binary targets with the same name which could introduce confusion in the build graph. By default, we don\'t include ""_lib"" since it\'s redundant.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664328232, 'comment_body': 'Could this be ``oppia_script_test_visibility`` instead?', 'comment_created': datetime.datetime(2021, 7, 6, 8, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664329235, 'comment_body': ""It'd be more Kotlin-idiomatic to compute the errors list as a result of this overall expression (similar to how we use fold/reduce/map/flatMap elsewhere). I suggest trying to rearrange this logic to compute the resulting list rather than mutating it within lambdas."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664332470, 'comment_body': 'Here & elsewhere: we should try to avoid exceeding the column limit, and in this case I think it\'s avoidable. Consider changing this to:\r\n\r\n```kotlin\r\nassertThat(outContent.toString()).contains(""${retrieveTestFilesDirectoryPath()}/TestFile1.xml:6:8: The end-tag"")\r\nassertThat(outContent.toString()).contains(""The end-tag for element type ""shape"" must end with a \'>\' delimiter."")\r\n```\r\n\r\nIn this case I don\'t think it\'s important to necessarily verify the exact error since that\'s dependent on the XML parser, but it is important to verify the formatting & presence of the error since that\'s influenced by code we maintain.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664333028, 'comment_body': '```suggestion\r\n    assertThat(errorList.size).hasSize(1)\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 8, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664333962, 'comment_body': 'Suggest adding tests for multiple errors, and for warning/error/fatal error cases (consider that if any lines of code in XmlSyntaxErrorHandler are commented out then at least 1 test should fail).', 'comment_created': datetime.datetime(2021, 7, 6, 8, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664334482, 'comment_body': ""I suggest adding a comment both here within the catch block & in the production version to explain why it's okay & correct to ignore the caught exception."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664524279, 'comment_body': ""Ah! I just dug a bit deep into this and realized that, for our use case, only `fatalError` is essential to us. Because, whenever there is any syntactically incorrect XML present, then always a `fatalError` is thrown, and for this case as we are only concerned of the syntax error hence, all our errors in testing will be of type `fatalError` only. \r\nAlso, there won't be the case of multiple failures in a single XML file because, as soon as the parser encounters a `fatalError` it stops the further processing of XML.\r\nHence, it seems like we won't need tests for multiple failures as we will never get more than a single error and also the use cases of `warning` and `error` are irrelevant for our case. \r\nI was probably thinking of removing them from the syntax error handler but it is compulsory to override them."", 'comment_created': datetime.datetime(2021, 7, 6, 12, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664541944, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664542218, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664542319, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664542707, 'comment_body': 'Revamped the tests to check output format, pass status and failures.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664542838, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664542942, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 665199802, 'comment_body': 'Added tests for all cases. PTAL.', 'comment_created': datetime.datetime(2021, 7, 7, 9, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 665894156, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 6, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 665894328, 'comment_body': 'This is corrected now.', 'comment_created': datetime.datetime(2021, 7, 8, 6, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666048657, 'comment_body': ""It feels a bit like fatal error is missing here. Maybe add a separate test for it even though it's technically covered in parsing test above (consider that implementation changes may result in the above error no longer being a fatal error which technically would reduce behavioral coverage in this test suite)."", 'comment_created': datetime.datetime(2021, 7, 8, 9, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666088091, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}]","[{'commit_sha': '225a4fc070efb18dda2f4e08d76ac94b2b0321aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638895fa2e461aae4b2d9f6e519e8349e0b3d282', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fd706805e82358fb0cb4be551e3fe10ae6ee2c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e77646138df0189eacb8c3a029bf26615abb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44e0150e382ab0bd4a085ad21b371fe78c63ca2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d38f1393f18d709a32940cf14f0c45b1a43bc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173fe5314ae3b57a55d49d150f95e3efed2ac5da', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618e380d8c52b3bdb31c0b85a253ab6177cc221b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3830ac088920f22e8c7bd59dc70a05ce1ea16f7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb93c0a1ce2044bdd7fe1a3a5c4955313f02d6fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7342c16b93a5bf6c827b5cd50c1e495f5442986', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e593b8f1a108a3c48794f840966e718f8b426b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1765798791e95d8f1ce539dd3fc750390c4883', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb0418a90c5f1d5ab9ca69f5d11fe6b16c76fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325f28c5033d45fba09dc6fa076749dcf590828d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f8ea697bd66cf4e9e94dc1398560de400b32fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1970eb4ff4fc47f743607a66ff25932882f15d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e64aa432702b74d10adc4450134f7bc0a3626f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f440a33e6036b742a58f68b12d0adc704764c10b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255773d7d5b0a76f1d33071ae8f7c9346efac04c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2a1783049b815943654248b57521c7edeeb416', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163310e09894c653122d2e0512dd47b9b6f087e1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6131c1da8e22181f0f84d86eeaafd6229c4a1395', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb5fc5515e370659911e037d9456d9afc77cbfb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe42a64d41cc7fd1fe3ddfc1c5e90a6ae767191b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381853cd318e67681b24fcb4db203017eff05b75', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59494f75978df055aacee7645301063869d88ca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293ab92579fac6263fb3047e43174c05103456b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01a238b9a361ac0f9da3667908bb081e89268c3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cb290d5faf9225cfe9c007f35daa77955fd99f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4ac03ce0f279e5600241188b389a09106653b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c0bfdcbce2a52ca0ccc128207acb19ff7fb37f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbf66098cb7c357a425e5f1b84bbf3512256272', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56cf6d012e779afc4b18bc0ee8ed8e7d7613246c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e64dc566fdb74ca1a1a28b8f25aebadbb64065', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2f287d6b4071487f05836150d7c8f47f19593e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36033efbe9f03ac83ff7e87ce036e52beff0e527', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8740a48fee209a8c9f278437a9efc9e874bd09cb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6671857acc36b0c9c2b4333b8423c75dd64b5b09', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe17ed93aa4c70a35cec1af86dcea32e63874118', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6860083409d18ccc73255aa2110e8e0121a3e5de', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afc018349e7ce1e7e4500e7657948fb79b843e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248266a80f213d7d9d533151a2093294379bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9375775c4d793a3910c9e15cb7859705a5080356', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc5eb0484a8ff458e82b843461b4f0b36ecdc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81152127ddaf0e80d47b3af2f9375556c36d0b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb20d3a95a18a22c7f3044f8863bb14abbce1a0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a0166b859381c43c31d1421bab0c84ce90fd52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac402d40f3145ffc588260f0e7db08ba664d103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32910ea758b73537bf79ec2002f33c32d07dabb5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b749db4d5f8378dd5ba1abf5ed6325e12619569', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c08868bd241c8f82e7120924e468c56cff3185c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add1ed7892e88c197faf8756fee99250a7345d9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2f808e9ddebc7b440e3df5a311868762670f6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10020344a811138759eb925c4f08692dda4eeb0a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11010b12c0c457e5c22efb5c78f01705bbdc7192', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4b0ecf0c212258ade5b38e3e1ef714f68499ac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dbe3ed6975861bfcd425a6efb7f9b84786a419', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d73c9d3514b20eb870299d59e5b2943cade17a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d66e01918ab83227f4d64eeb8f58718e9d4bf9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae1f8d504a8a357c4d09d0842df078722d621c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e201a3d55b3ebff97894b23534ecafc21294e423', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d839ce5d48118f98e925915f01e5368274a5c1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd6b4ea459b3907682c3f7fc06f4f9db05d9c85', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e38f796b4724b15dc3ec55d07e0b5f201e66d6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73b1fe4ca38ae0dd5bbbe896a383cb9559b103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1637ccd5dfe39a17512b45ba44bcd9ade9e47ac1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba990ef364db43eb200e5f04d6a3adcdd36c5b3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262a4ecc2478e1f3ee8ebc65e35e1f7145ea3f4b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5887ccedf81c19429913965616bbe6317da101', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb05552bf6c0d60d9732787112c78091c3c0c3e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c1042f98839936b79672aec59f90a18675819', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb88fe87b0ad0a2af091e5eb6f012009c4799ed', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345946123ddaa5d17c58cc9858637c433ef607e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c5f9672882f5800485169914973933f9a053df', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e519791e12af1e9f30d891dfc4d554d3b93fd7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55757024e7b905f6bf1eae7057a48598ac61e02', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5db31908babb9012fcf155b14da2a24bb537a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37cca31b1605b0647f8187e2c4ee514f6870532', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7f9fca129fd7d6e420af5f274f16ee3ea0b945', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70c88051d4ba8bd4a3b7cd9f43414f27896ea94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70413bc9cf96d56a3424428284e21c08def4814', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c1df5b6d3b373dfc3ae5e876f786e175faa482', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5849bc0402af2c3be92a4ad55cc1fc4148a1f74d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed9d9a851cf821e352a9ae12d0db1eabc04f34c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab0b700f04aba3e120b0e840572f31de9f95760', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30158c0a9065520ef7226f9663289c033e82084', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ef42f0af3e7be963c5971bf27efa2ad129720', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd873ecd582353add4fcc5ed0295283b422d95d5d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8bf3a71adb8d4b1032e30704fce1b04c47a1ad', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e108adc274c85d6719fe3e61aca03682aa0b52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ddf5607e5769754309298bd15e04532753a4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34d46b339fe9e3fbb849916a27830302a945683', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6a60773a6af9ea0cfb1311c076d8c3f4154c22', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}]",Sparsh Agrawal,55937724,,User,,26,,37,93
673680703,Fix #3292: Add check for test files presence for prod files,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->

Fixes #3292: Add check for test files presence for prod files

The script traverses different layers of the codebase to check for the presence of test files for prod files.

**Note:** It works on the logic of searching Filename+'Test'.kt in the codebase, to ensure the test file presence.
The files listed in the `test_file_exemptions.textproto` will be skipped for this check, and currently, all the prod files which were failing this check, have been added to this list so that the workflow doesn't fail. 
We can remove any file from the exemption list, where we think that we can't go without a test file for that prod file, or if a test file is now added for that particular file.

To run the script, use:

`bazel run //scripts:test_file_check -- $(pwd)`

For testing the script, automated tests have been added.
To execute the tests, use:

`bazel test //scripts/src/javatests/org/oppia/android/scripts/testfile:TestFileCheckTest`

**Note:** We are generating the test assets dynamically at the time of executing them. The test assets are automatically deleted, when the test finishes.

**Blocked on:** #3341 #3340

Screenshot of all new added tests passing successfully on local:

![image](https://user-images.githubusercontent.com/55937724/123287748-99c47b00-d52c-11eb-8c60-4bf1a1f53050.png)

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.",True,3343,https://api.github.com/repos/oppia/oppia-android/pulls/3343,https://github.com/oppia/oppia-android/pull/3343,closed,1014,1,10,140,26,88,0,1,[],2021-06-18 19:25:25+00:00,2021-07-09 00:41:52+00:00,1746987.0,"20 days, 5:16:27","[{'comment_id': 654962726, 'comment_body': 'do we need a class or could we use `object`? ', 'comment_created': datetime.datetime(2021, 6, 20, 17, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 654962777, 'comment_body': 'add kdocs', 'comment_created': datetime.datetime(2021, 6, 20, 17, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 655106925, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 21, 6, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 655107079, 'comment_body': 'Okay!\r\nChanged it to an object', 'comment_created': datetime.datetime(2021, 6, 21, 6, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 657808318, 'comment_body': 'add kdocs', 'comment_created': datetime.datetime(2021, 6, 24, 10, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657808658, 'comment_body': '```suggestion\r\n  )\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 10, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657809114, 'comment_body': 'no empty line', 'comment_created': datetime.datetime(2021, 6, 24, 10, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657809173, 'comment_body': 'add kdocs', 'comment_created': datetime.datetime(2021, 6, 24, 10, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657809725, 'comment_body': '```suggestion\r\n      fun collectSearchFiles(\r\n        repoPath: String,\r\n        allowedDirectories: List<String>, exemptionsList: Array<String>\r\n      )\r\n        : List<File> {\r\n        return File(repoPath).walk().filter { it ->\r\n          checkIfAllowedDirectory(\r\n            retrieveFilePath(it, repoPath),\r\n            allowedDirectories\r\n          )\r\n            && it.isFile\r\n            && it.name.endsWith("".kt"")\r\n            && it.name !in exemptionsList\r\n        }.toList()\r\n      }\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 10, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657810412, 'comment_body': 'can be private function', 'comment_created': datetime.datetime(2021, 6, 24, 10, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 657810528, 'comment_body': 'can be private function', 'comment_created': datetime.datetime(2021, 6, 24, 10, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 658037307, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 15, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658037388, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 15, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658037508, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 15, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658037632, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 15, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658037709, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 15, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658038709, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 15, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 658038810, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 24, 15, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660073502, 'comment_body': ""Please make sure all of the scripts classes have tests--we shouldn't add new files here often."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660074199, 'comment_body': ""```suggestion\r\n  /**\r\n   * List of files which should be exempted for the test file check.\r\n   *\r\n   * NOTE TO DEVELOPERS: New files should rarely be added here. In general, all new new files should have tests. If you think there's a valid exception, please specifically call this out in your PR description.\r\n   */\r\n```\r\n\r\nThe notice is important to inform developers when to change this list. The suggestion may need line wrapping."", 'comment_created': datetime.datetime(2021, 6, 28, 19, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660074402, 'comment_body': 'Perhaps: ``ScriptExemptions``?', 'comment_created': datetime.datetime(2021, 6, 28, 19, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660075221, 'comment_body': 'Please make sure this class has a special codeowners at the end of the CODEOWNERS file & add me as the codeowner. Since this is an exemption list we should make sure that the codeowners for this file are making sure we don\'t extend the list unless absolutely necessary.\r\n\r\nDitto for the textproto files from #3340. I suspect you could create a new CODEOWNERS section at the bottom called ""Static analysis check configurations"" or something like that.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660075681, 'comment_body': 'Please file an issue to add test suites with all of these listed as checkboxes. We can split that up into groups of starter issues later once we have a clear set of instructions for how to resolve these. Please also add a TODO here referencing that issue.\r\n\r\nI suggest doing this after removing the scripts files from the list below.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660076218, 'comment_body': '```suggestion\r\n      val prodFilesList = mutableListOf<String>()\r\n```\r\n\r\nMore idiomatic. Ditto elsewhere.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 660076944, 'comment_body': 'Prefer ``isNotEmpty``', 'comment_created': datetime.datetime(2021, 6, 28, 19, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 662211161, 'comment_body': 'SGTM. Done', 'comment_created': datetime.datetime(2021, 7, 1, 11, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662211310, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662211393, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 11, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662211473, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 11, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662211561, 'comment_body': 'Okay, will do.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662211648, 'comment_body': 'Outdated.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662211719, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 11, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 662212639, 'comment_body': '@BenHenning Added these two files because they only contain constants or a list of constants. So, I think it is fine to exempt from the check.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664346590, 'comment_body': 'Please add EOF newline.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664347653, 'comment_body': ""Hmm. Should these have relative paths to the project root? I'm thinking about the case where two files happen to have the same name (it's technically possible).\r\n\r\nAlso, once we figure out the final format (i.e. relative paths) & layout (i.e. textproto per other comment), please lexicographically sort these so that they're easier to find (the paths will really help with that, I think)."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664349003, 'comment_body': 'How hard would it be to move this to be a textproto, instead? Keeping all script configurations within textproto files seems kind of nice.\r\n\r\nIf we went that route, I suggest moving the \'NOTE TO DEVELOPERS\' bit as output for the script itself. E.g. something like:\r\n\r\n""File X does not have a corresponding test file. If this is correct, please update scripts/assets/script_exemptions.textproto. Note that, in general, all new files should have tests. If you choose to add an exemption, please specifically call this out in your PR description.""\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2021, 7, 6, 8, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664349648, 'comment_body': 'Are these still needed?', 'comment_created': datetime.datetime(2021, 7, 6, 8, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664350360, 'comment_body': ""The constants one came to mind to me as well--we may need to find a way to properly exempt files which do not ever need to have tests. Maybe if the file doesn't have an interface, annotation, function, or class?\r\n\r\nOr, maybe we should just move the constants to their corresponding files instead of having a shared constants file. Does that file actually provide any specific benefits?"", 'comment_created': datetime.datetime(2021, 7, 6, 8, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664352005, 'comment_body': 'Ditto here (per a comment from an earlier PR): prefer creating the two lists here in a more Kotlin-idiomatic way.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664352577, 'comment_body': 'Perhaps instead: ``computeExpectedTestFileName`` might be clearer? We actually expect such a file to exist.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664353320, 'comment_body': 'I think you could alternatively pass in the actual ``File`` and use ``File.nameWithoutExtension`` to simplify this a bit.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664353855, 'comment_body': '```suggestion\r\n    println(""No test file(s) found for:"")\r\n```\r\n\r\nTo fix grammar. I suggest double-checking your other scripts\' outputs to verify the same issue doesn\'t exist for them.', 'comment_created': datetime.datetime(2021, 7, 6, 8, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664359036, 'comment_body': ""We ought to have at least 1 test for exemptions (though there are clearly too many to test them all, and we don't necessarily want to test all of them, anyway)."", 'comment_created': datetime.datetime(2021, 7, 6, 8, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 664743553, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664743631, 'comment_body': 'Outdated.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664743808, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664743848, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664743899, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664744309, 'comment_body': ""Will remove them, once I take a merge from #3340. so that, the checks won't fali."", 'comment_created': datetime.datetime(2021, 7, 6, 17, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664744657, 'comment_body': 'Sounds good to me. Revamped to the textproto approach. PTAL.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664751180, 'comment_body': 'Revamped to relative path approach, is also lexicographically sorted.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664751283, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 664751880, 'comment_body': 'Will remove the constants file as it is not of any benefit.\r\nWill do this after merging this PR with #3340.', 'comment_created': datetime.datetime(2021, 7, 6, 17, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 665236520, 'comment_body': ""They are kotlin files and they don't have a corresponding TestFile present, so it looks like we need to add them to the exemption list."", 'comment_created': datetime.datetime(2021, 7, 7, 10, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 665237340, 'comment_body': 'Update: This is now removed.', 'comment_created': datetime.datetime(2021, 7, 7, 10, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 665706658, 'comment_body': 'Issue filed: https://github.com/oppia/oppia-android/issues/3436', 'comment_created': datetime.datetime(2021, 7, 7, 21, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666050965, 'comment_body': 'This should also be marked as testonly. Ditto for earlier PRs if it applies.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666051252, 'comment_body': ""Should this be restricted to test visibility since that's the only place where it's needed? Ditto for earlier PRs if applicable."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666051850, 'comment_body': 'Maybe pull this into the PR where RepositoryFile was introduced for simplicity?', 'comment_created': datetime.datetime(2021, 7, 8, 10, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666052127, 'comment_body': ""Same as earlier PR: strike 'structure' since we generally just base the target name on the proto filename."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666052405, 'comment_body': 'This seems too vague--please add more details.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666052649, 'comment_body': ""What is an exemption? What's being exempted? How is it formatted? More details and a potential rename are needed here, I think.\r\n\r\nConsider that this is the documentation for how to fill in the textproto file. Missing details makes that potentially much more difficult."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666053784, 'comment_body': '```suggestion\r\nLibraries corresponding to test file-related checks, such as ensuring that all the production (all kotlin files)\r\n```\r\n\r\n(This package documentation could be a bit more vague rather than overly specific to the current script since more scripts may be added in the future).', 'comment_created': datetime.datetime(2021, 7, 8, 10, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666054240, 'comment_body': 'I suggest using string interpolation here, too.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666055503, 'comment_body': 'Reminder to update this per my earlier comment for the production package documentation for this package.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666055605, 'comment_body': 'Needed?', 'comment_created': datetime.datetime(2021, 7, 8, 10, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666056739, 'comment_body': 'Suggest extracting the path + filename - extension to a variable and using it both here & the error message above (in case it moves--both should stay in sync).', 'comment_created': datetime.datetime(2021, 7, 8, 10, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666057784, 'comment_body': ""Similar to earlier tests, we should actually validate that we're providing sufficient context & verifying the script's formulated error messages. Those are specifically designed to convey information in a certain way & it's important to continue that.\r\n\r\nIt's less important to verify the output of downstream libraries that produce errors for us (such as for the XML check), but the errors we output should be validated.\r\n\r\nDitto for earlier PRs if applicable."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666058427, 'comment_body': ""It's a bit pathalogical, but maybe add a test for an empty directory."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666185893, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666186033, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666186260, 'comment_body': 'Done in the regex-checks PR.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666186350, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666186527, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666186716, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666186821, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666187233, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666187332, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666188141, 'comment_body': ""Yes, it's needed here, as we are throw error when the script fails, so we need to assert that in the tests."", 'comment_created': datetime.datetime(2021, 7, 8, 13, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666188236, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666188504, 'comment_body': 'Apologies! This is now rectified and updated. PTAL.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666188592, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666430110, 'comment_body': ""As discussed in meeting, prefer to make these structures & their documentation specific to individual checks since it seems preferable to have distinct textprotos for each exemption list. Keeping the containing proto file generic seems fine.\r\n\r\nDitto for the field name (consider like 'exemptedFilePath' or similar)."", 'comment_created': datetime.datetime(2021, 7, 8, 18, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666430268, 'comment_body': 'Please capitalize Kotlin here & elsewhere.', 'comment_created': datetime.datetime(2021, 7, 8, 18, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666530200, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 21, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666530372, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 21, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 666549662, 'comment_body': 'Nit: combine these into one doc comment rather than having the extra line between them.\r\n\r\nThough, please do wrap at the 100 character limit like normal.\r\n\r\nAlso, nit on phrasing:\r\n\r\n```\r\nExemptions indicate files for which we should not check for having test files.\r\n```\r\n\r\n(Slightly reworded for clarity).', 'comment_created': datetime.datetime(2021, 7, 8, 22, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 666563469, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 8, 22, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}]","[{'commit_sha': '225a4fc070efb18dda2f4e08d76ac94b2b0321aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638895fa2e461aae4b2d9f6e519e8349e0b3d282', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fd706805e82358fb0cb4be551e3fe10ae6ee2c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e77646138df0189eacb8c3a029bf26615abb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44e0150e382ab0bd4a085ad21b371fe78c63ca2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d38f1393f18d709a32940cf14f0c45b1a43bc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173fe5314ae3b57a55d49d150f95e3efed2ac5da', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618e380d8c52b3bdb31c0b85a253ab6177cc221b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3830ac088920f22e8c7bd59dc70a05ce1ea16f7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb93c0a1ce2044bdd7fe1a3a5c4955313f02d6fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7342c16b93a5bf6c827b5cd50c1e495f5442986', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e593b8f1a108a3c48794f840966e718f8b426b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1765798791e95d8f1ce539dd3fc750390c4883', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb0418a90c5f1d5ab9ca69f5d11fe6b16c76fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325f28c5033d45fba09dc6fa076749dcf590828d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f8ea697bd66cf4e9e94dc1398560de400b32fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1970eb4ff4fc47f743607a66ff25932882f15d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e64aa432702b74d10adc4450134f7bc0a3626f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f440a33e6036b742a58f68b12d0adc704764c10b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255773d7d5b0a76f1d33071ae8f7c9346efac04c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2a1783049b815943654248b57521c7edeeb416', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c5f6f4ef974654a141140564420898247e2a00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163310e09894c653122d2e0512dd47b9b6f087e1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6131c1da8e22181f0f84d86eeaafd6229c4a1395', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb5fc5515e370659911e037d9456d9afc77cbfb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412077587c9f96712a7b68d7294bf0b68dc346b0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c98cf2f4c08b63f3e477b5a17398da8472e92e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1d24aa9b17a2bc343df48ab91ad6f875059ec9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe42a64d41cc7fd1fe3ddfc1c5e90a6ae767191b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e12f24752a17fed3abbfdb3171dc5516958235fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdb165e67558c7503b780be7d432d60cf8d2431', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381853cd318e67681b24fcb4db203017eff05b75', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59494f75978df055aacee7645301063869d88ca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293ab92579fac6263fb3047e43174c05103456b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f393e1ed626bded942544d8c8afabb9db5a6f142', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d607edd524bf80c625a447b13de9b4cbf6a06f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01a238b9a361ac0f9da3667908bb081e89268c3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cb290d5faf9225cfe9c007f35daa77955fd99f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4ac03ce0f279e5600241188b389a09106653b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b07156e5e36e8855538f0d193ccef117d3e724', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feacee172a50f57fee990548a33aa1b6833a3e5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fbc73d451b93fb2272781afe2ae4318437d844', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c0bfdcbce2a52ca0ccc128207acb19ff7fb37f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbf66098cb7c357a425e5f1b84bbf3512256272', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56cf6d012e779afc4b18bc0ee8ed8e7d7613246c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3c47d4a94832767db398b669c486aaf7241ca1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e64dc566fdb74ca1a1a28b8f25aebadbb64065', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2f287d6b4071487f05836150d7c8f47f19593e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36033efbe9f03ac83ff7e87ce036e52beff0e527', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161f8ecf4d45094523fcfd37d95d15b82d8768a6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996694b5c7671859ae139113c89cca4875404d4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8740a48fee209a8c9f278437a9efc9e874bd09cb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6671857acc36b0c9c2b4333b8423c75dd64b5b09', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11963c8424afa6494a68a964e174c7794890d3c0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe17ed93aa4c70a35cec1af86dcea32e63874118', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6860083409d18ccc73255aa2110e8e0121a3e5de', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4083244112545b473a2d371b69a10301eb694db9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afc018349e7ce1e7e4500e7657948fb79b843e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13e3f36d140bc282855a8479db80e81e76d4c30', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248266a80f213d7d9d533151a2093294379bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9375775c4d793a3910c9e15cb7859705a5080356', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc5eb0484a8ff458e82b843461b4f0b36ecdc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81152127ddaf0e80d47b3af2f9375556c36d0b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb20d3a95a18a22c7f3044f8863bb14abbce1a0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a0166b859381c43c31d1421bab0c84ce90fd52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac402d40f3145ffc588260f0e7db08ba664d103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32910ea758b73537bf79ec2002f33c32d07dabb5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b749db4d5f8378dd5ba1abf5ed6325e12619569', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c08868bd241c8f82e7120924e468c56cff3185c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add1ed7892e88c197faf8756fee99250a7345d9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2f808e9ddebc7b440e3df5a311868762670f6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10020344a811138759eb925c4f08692dda4eeb0a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11010b12c0c457e5c22efb5c78f01705bbdc7192', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4b0ecf0c212258ade5b38e3e1ef714f68499ac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaf8df8bf19eb7750b7d9d507615a5f1df319dc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3042f2ed10e2f41ed17cad034e6ecc670bd384b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49745a46ce7cef6e16ea2e3951945d0f5c534f80', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dbe3ed6975861bfcd425a6efb7f9b84786a419', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d73c9d3514b20eb870299d59e5b2943cade17a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a9c601375176cd296e06a2e286b6043d35dcec2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d66e01918ab83227f4d64eeb8f58718e9d4bf9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae1f8d504a8a357c4d09d0842df078722d621c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e201a3d55b3ebff97894b23534ecafc21294e423', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d839ce5d48118f98e925915f01e5368274a5c1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd6b4ea459b3907682c3f7fc06f4f9db05d9c85', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e38f796b4724b15dc3ec55d07e0b5f201e66d6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73de95813c7906ca9505a6839c565bece9350efb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e67cab3975c7279716ba998506970454540c2d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73b1fe4ca38ae0dd5bbbe896a383cb9559b103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1637ccd5dfe39a17512b45ba44bcd9ade9e47ac1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba990ef364db43eb200e5f04d6a3adcdd36c5b3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262a4ecc2478e1f3ee8ebc65e35e1f7145ea3f4b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5887ccedf81c19429913965616bbe6317da101', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb05552bf6c0d60d9732787112c78091c3c0c3e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de21e33b909ef78f437e9c893de5ea6bd49bf742', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '130c0d9c9ce1cae0eeaeb8c1327a2000eec42271', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c1042f98839936b79672aec59f90a18675819', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb88fe87b0ad0a2af091e5eb6f012009c4799ed', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f7d73625a53dde50a5640383ab2d0b04aa25ae', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345946123ddaa5d17c58cc9858637c433ef607e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c5f9672882f5800485169914973933f9a053df', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a8d529ce8fb9f6a4ce78acf19a67dd04076e00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e519791e12af1e9f30d891dfc4d554d3b93fd7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55757024e7b905f6bf1eae7057a48598ac61e02', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5db31908babb9012fcf155b14da2a24bb537a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37cca31b1605b0647f8187e2c4ee514f6870532', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2186d74e070f9bad06db0c1ef2b49f46f6f7d43', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7f9fca129fd7d6e420af5f274f16ee3ea0b945', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70c88051d4ba8bd4a3b7cd9f43414f27896ea94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70413bc9cf96d56a3424428284e21c08def4814', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8bcf56548bbb8719d626ba6af6db2df38ad4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c1df5b6d3b373dfc3ae5e876f786e175faa482', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5849bc0402af2c3be92a4ad55cc1fc4148a1f74d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e09e83731630c03caa19cbdd069441ee1a59d810', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637606c453d14145c1d9003f9a7f4e74653db4bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed9d9a851cf821e352a9ae12d0db1eabc04f34c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab0b700f04aba3e120b0e840572f31de9f95760', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30158c0a9065520ef7226f9663289c033e82084', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ef42f0af3e7be963c5971bf27efa2ad129720', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd873ecd582353add4fcc5ed0295283b422d95d5d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8bf3a71adb8d4b1032e30704fce1b04c47a1ad', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1cbd98d25f0242950cd5ad22f016bbab9960ec', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e108adc274c85d6719fe3e61aca03682aa0b52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ddf5607e5769754309298bd15e04532753a4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594d31a2fd06e7b43ce58c32ad1dec0d6fb35df9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1940980fb00120e10e3254f3f8aa4defeee85777', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34d46b339fe9e3fbb849916a27830302a945683', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0b960edcb94bf20ab7e522c9db751cbb1eba0c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ea8ae7023c92c9ded8effd4f9efae46b785890', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72e5a98b1174794f570dde0f10a39774e58c60f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d0b425d342892218f5fbdfe4b6f4d87708d803', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c32c921aa438bcb4ddb1e9de94d0872d44ff9338', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99a316f8c11f4e28bf155b6ae5b225da036bdb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6a60773a6af9ea0cfb1311c076d8c3f4154c22', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bdea697d4bc7112f71b0e068c9df6d67eef7df6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f13ff8d25df992a2afa0a2105e869970fb4bf67', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fc1e9e4846a5fbb15722a7e3b1da1d91a19399', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a1f139227871bf4e20ea768e933e085d0a5712', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd079ca8565ed08841134daf96d08b79165f9a4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f286c73f9f47d8a9dc4e3df5e5ee91cb22134c1c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}]",Sparsh Agrawal,55937724,,User,,26,,37,93
674402195,Fix #3300: Add check for accessibility label for activities,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->

Fixes #3300: Add check for accessibility labels for activities

The script parses the `AndroidManifest.xml` file of the `app` layer to ensure that the `activity` elements are defined with accessibility labels.

**Note:** The Activities listed in the `ACCESSIBILITY_LABEL_CHECK_EXEMPTIONS_LIST` will be skipped for this check, and currently, all the activities which were failing this check, have been added to this list so that the workflow doesn't fail.
We can remove any Activity from the exemption list, where we think that we can't go without a label for that Activity, or if a label is added for that Activity.

To run the script, use:

`bazel run //scripts:accessibility_label_check -- $(pwd) app/src/main/AndroidManifest.xml`

For testing the script, automated tests have been added.
To execute the tests, use:

`bazel test //scripts:AccessibilityLabelCheckTest`

**Note:** We are generating the test assets dynamically at the time of executing them. The test assets are automatically deleted when the test finishes.

SS when the CI check fails:

![image](https://user-images.githubusercontent.com/55937724/125578039-f9d3f1fc-ddf4-4694-9ef0-61ed8ca4423d.png)


## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3352,https://api.github.com/repos/oppia/oppia-android/pulls/3352,https://github.com/oppia/oppia-android/pull/3352,closed,807,6,11,182,16,83,0,1,[],2021-06-21 09:55:03+00:00,2021-07-29 18:22:56+00:00,3313673.0,"38 days, 8:27:53","[{'comment_id': 659356587, 'comment_body': 'kdocs', 'comment_created': datetime.datetime(2021, 6, 27, 18, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659356773, 'comment_body': 'any time you want to mention any argument in comment, put argument name, not the argument type \r\n\r\n```suggestion\r\n   * The [nodeList] is not iterable. This helper\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 18, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659356895, 'comment_body': 'kdoc', 'comment_created': datetime.datetime(2021, 6, 27, 18, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659356999, 'comment_body': 'kdoc', 'comment_created': datetime.datetime(2021, 6, 27, 18, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659357121, 'comment_body': 'named argument', 'comment_created': datetime.datetime(2021, 6, 27, 18, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659357337, 'comment_body': '`activityAreNotDefinedWithAccessibilityLabels`\r\n\r\n`activityAre` - Update based on what we are testing, singular or plural. ', 'comment_created': datetime.datetime(2021, 6, 27, 18, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659357527, 'comment_body': 'also write positive test, that all activities have labels. ', 'comment_created': datetime.datetime(2021, 6, 27, 18, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 659364573, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659364578, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659364579, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659364583, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659364591, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659364806, 'comment_body': ""Apologies! I didn't catch this correctly. This test actually does the same thing which you suggested. Here all the activities are defined with the label, and we are asserting that the script check is successful here. Please let me know if this isn't still clear."", 'comment_created': datetime.datetime(2021, 6, 27, 19, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659668665, 'comment_body': 'Name this val as `completeActivityList`', 'comment_created': datetime.datetime(2021, 6, 28, 10, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 659668908, 'comment_body': 'Name this val as `activityListWithoutLabel`', 'comment_created': datetime.datetime(2021, 6, 28, 10, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 659669236, 'comment_body': 'I think internal comments are not needed as the `val` names are already clear.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 659672137, 'comment_body': 'Suggestion:\r\nWrite it as below as it becomes more readable\r\n```\r\n    return IntStream.range(0, nodeList.getLength())\r\n      .mapToObj(nodeList::item)\r\n      .collect(Collectors.toList())\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 10, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 659674897, 'comment_body': 'Remove this entire `if` and simply write\r\n```\r\n    return activityPath !in ExemptionsList.ACCESSIBILITY_LABEL_CHECK_EXEMPTIONS_LIST && \r\n      attributesList.getNamedItem(""android:label"") == null\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 10, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 659685636, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659685704, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659685762, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659685842, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659685920, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 659686064, 'comment_body': 'Done, thanks.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 660297886, 'comment_body': 'Resolving after confirming this has been done.', 'comment_created': datetime.datetime(2021, 6, 29, 5, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 660298667, 'comment_body': '`an` instead of `a`\r\n\r\n`Checks whether an activity element has a missing label.`', 'comment_created': datetime.datetime(2021, 6, 29, 5, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 663708394, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 5, 7, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 668823618, 'comment_body': '@rt4914 Can we resolve this now?', 'comment_created': datetime.datetime(2021, 7, 13, 14, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 672844473, 'comment_body': '@rt4914 do we already have issues tracking these?', 'comment_created': datetime.datetime(2021, 7, 20, 6, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672845278, 'comment_body': 'Rather than \'app-level manifest\', I suggest framing it as the \'main manifest of the app\' since there won\'t be an ""app layer"" or ""app module"" in the future.\r\n\r\nThat being said, I think we should actually make this generic & allow any number of manifests to be passed in (& test multiple in the tests). Longer term, we\'ll be moving away from a single manifest to multiple that are merged together using the Bazel Android manifest merging. This actually lets us properly exclude test activities from the production build that we ship to users. Rather than needing to update this check then, it\'d be great if we could just support it in the initial version. Do you have any concerns with this?', 'comment_created': datetime.datetime(2021, 7, 20, 6, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672845507, 'comment_body': 'Nit: fix typo in variable name.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672845798, 'comment_body': 'Ending should be ``TextProto`` (as separate words in the identifier).\r\n\r\nDitto in the function below with the parameter of the same name.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672846211, 'comment_body': 'The name is a bit grammatically off. Maybe: ``checkIfActivityIsMissingAccessibilityLabel`` or ``isActivityMissingAccessibilityLabel``?', 'comment_created': datetime.datetime(2021, 7, 20, 6, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672846763, 'comment_body': ""I suggest extracting the 'removePrefix.replace()' transformation to a separate variable so that the if-check can fit on one line (for better readability/code clarity)."", 'comment_created': datetime.datetime(2021, 7, 20, 6, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672847177, 'comment_body': 'Please only wrap KDoc lines when they reach the 100 character boundary, or when a new paragraph is needed (in which case an empty line should separate the paragraphs).', 'comment_created': datetime.datetime(2021, 7, 20, 6, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672847703, 'comment_body': 'We could use an extension function here:\r\n\r\n```suggestion\r\nprivate fun NodeList.toListOfNodes(): List<Node> {\r\n  return IntStream.range(0, getLength()).mapToObj(this::item).collect(Collectors.toList())\r\n}\r\n```\r\n\r\nAlso, a more Kotlin idiomatic approach would probably be to use an IntRange instead:\r\n\r\n```suggestion\r\nprivate fun NodeList.toListOfNodes(): List<Node> = (0 until getLength()).map(this::item)\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 6, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672849367, 'comment_body': 'Please de-duplicate with the code above doing the same thing (I suggest using a data class or helper to avoid needing duplicate the code in both places).', 'comment_created': datetime.datetime(2021, 7, 20, 6, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672849907, 'comment_body': '```suggestion\r\nprivate fun loadAccessibilityLabelExemptionsProto(\r\n  accessibilityLabelExemptiontextProto: String\r\n): AccessibilityLabelExemptions {\r\n  val protoBinaryFile = File(""$accessibilityLabelExemptiontextProto.pb"")\r\n  val builder = AccessibilityLabelExemptions.getDefaultInstance().newBuilderForType()\r\n   // This cast is type-safe since proto guarantees type consistency from mergeFrom(),\r\n  // and this method is bounded by the generic type T.\r\n  @Suppress(""UNCHECKED_CAST"")\r\n  val protoObj: AccessibilityLabelExemptions =\r\n    FileInputStream(protoBinaryFile).use {\r\n      builder.mergeFrom(it)\r\n    }.build() as AccessibilityLabelExemptions\r\n  return protoObj\r\n}\r\n```\r\n\r\nPrefer breaking at the arguments to avoid needing to indent the entire function body.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672851208, 'comment_body': ""I suggest renaming the existing file & creating a new one--we shouldn't be reusing the same .proto file in multiple libraries. That leads to duplicate build graph work, and potentially duplicate symbols/single version violations in the graph which can actually cause runtime issues in the worst cases."", 'comment_created': datetime.datetime(2021, 7, 20, 6, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672852017, 'comment_body': ""I suggest removing all the cruft that's not actually needed for the purpose of these tests."", 'comment_created': datetime.datetime(2021, 7, 20, 6, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672852383, 'comment_body': '```suggestion\r\nTests corresponding to accessibility label check that ensures all the activities in the codebase\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 6, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 672855479, 'comment_body': ""Is this sufficient? I believe the name can also be an absolute, rather than relative, path. Also, shouldn't we be taking into consideration the path of the manifest file to ensure the fully qualified activity package can be computed? For example, a manifest under ``app/src/main/java/org/oppia/android/splash`` could just reference '.SplashActivity' since it's in the same package."", 'comment_created': datetime.datetime(2021, 7, 20, 6, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 673331860, 'comment_body': 'Revamped the approach to make it generic, now we can pass multiple manifests.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673331972, 'comment_body': 'Outdated.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673332464, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673332633, 'comment_body': 'This is outdated.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673332774, 'comment_body': 'This is outdated.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673332912, 'comment_body': 'This is outdated.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673333185, 'comment_body': 'This looks neat. Done.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673333333, 'comment_body': 'This is outdated.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673333440, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673333713, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673333884, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673334022, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 673336256, 'comment_body': 'The approach is now revamped. Now for every activity, we compute the fully qualified package name, by parsing the manifest file and obtaining the value from the `package` attribute. Through this approach, the example you stated above works fine, also added tests for the same for verification.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 674458629, 'comment_body': ""```suggestion\r\n *   bazel run //scripts:accessibility_label_check -- <path_to_directory_root> <paths_to_manifest\r\n```\r\n\r\nHowever, it should be something like:\r\n\r\n``[paths to manifest files...]`` to indicate that it's space-separated."", 'comment_created': datetime.datetime(2021, 7, 22, 2, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674458887, 'comment_body': 'Why is this needed? I suggest adding a brief line comment to provide context.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674459270, 'comment_body': 'It seems a bit odd to call plus directly. Could we just use the ``+`` operator instead?', 'comment_created': datetime.datetime(2021, 7, 22, 2, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674459386, 'comment_body': 'Are both of these cases covered in tests?', 'comment_created': datetime.datetime(2021, 7, 22, 2, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674459912, 'comment_body': '```suggestion\r\n    return@flatMap doc.getElementsByTagName(""activity"").toListOfNodes().mapNotNull { activityNode ->\r\n```\r\n\r\nOptional, but I find the extra ``return`` can help with clarity for longer lambdas.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674460116, 'comment_body': '```suggestion\r\n  val accessibilityLabelExemptionTextProtoFilePath = ""scripts/assets/accessibility_label_exemptions""\r\n```\r\n\r\nDitto elsewhere this same name is used. The name wasn\'t indicating what it contained before--I missed this in the last pass.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674460229, 'comment_body': 'Ditto here for \'plus\'. I also assume you could just do ``""- $repoPath$activityPath""`` instead.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674466681, 'comment_body': ""Not for all.\r\nFor example:\r\n`HomeActivity` does not need a label as it works correctly even without it for A11y users.\r\n`NavigationDrawerTestActivity ` we don't need labels for them.\r\n\r\n\r\nSo what are your thoughts on both of these? Should we still add labels for all the files?"", 'comment_created': datetime.datetime(2021, 7, 22, 2, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 674498619, 'comment_body': ""We probably shouldn't be assuming repoPath ends in a path separator. Suggest instead doing something like:\r\n\r\n```kotlin\r\nval repoRoot = File(repoPath)\r\nval missingAccessibilityLabelActivities = ... {\r\n  val file = File(repoRoot, relativePath)\r\n  ...\r\n```\r\n\r\nTo improve the script's robustness."", 'comment_created': datetime.datetime(2021, 7, 22, 4, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674501762, 'comment_body': '```suggestion\r\n  fun testAccessibilityLabel_accessibilityLabelNotDefinedForExemptedActivity_checkShouldPass() {\r\n```\r\n\r\nNote capitalization.', 'comment_created': datetime.datetime(2021, 7, 22, 5, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674502073, 'comment_body': 'Do you think it might be worth outputting the relative paths such that copying them into the exemptions file will just work?', 'comment_created': datetime.datetime(2021, 7, 22, 5, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 676013808, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013815, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013843, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013847, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013853, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013859, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013862, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013864, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013891, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676013899, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 24, 15, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 677962009, 'comment_body': 'Here & elsewhere: consider using the ``apply{}`` pattern to construct the proto in one statement.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677963366, 'comment_body': ""I think we can ignore the test activities--they're reasonable exemptions (eventually we'll probably delete them by utilizing a generic replacement, anyway).\r\n\r\nFor the others, shouldn't we always have an accessibility label to be explicit? If so, then we ought to have a TODO for each of the non-test activities to ensure we can remove them from this exemption list & only leave test activities.\r\n\r\nWDYT?"", 'comment_created': datetime.datetime(2021, 7, 28, 4, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677968839, 'comment_body': ""Can you also add a test where the activity's reference is fully qualified rather than relative?"", 'comment_created': datetime.datetime(2021, 7, 28, 4, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 678032569, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 7, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678032840, 'comment_body': 'This was already added, renamed it now to give a better context.', 'comment_created': datetime.datetime(2021, 7, 28, 7, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678363055, 'comment_body': 'Yes your suggestion makes sense.\r\n\r\nFiled an issue: https://github.com/oppia/oppia-android/issues/3602', 'comment_created': datetime.datetime(2021, 7, 28, 14, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rt4914', 'type': 'User'}, {'comment_id': 679386481, 'comment_body': 'Thanks @rt4914!', 'comment_created': datetime.datetime(2021, 7, 29, 18, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}]","[{'commit_sha': '225a4fc070efb18dda2f4e08d76ac94b2b0321aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638895fa2e461aae4b2d9f6e519e8349e0b3d282', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fd706805e82358fb0cb4be551e3fe10ae6ee2c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e77646138df0189eacb8c3a029bf26615abb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44e0150e382ab0bd4a085ad21b371fe78c63ca2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d38f1393f18d709a32940cf14f0c45b1a43bc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173fe5314ae3b57a55d49d150f95e3efed2ac5da', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618e380d8c52b3bdb31c0b85a253ab6177cc221b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3830ac088920f22e8c7bd59dc70a05ce1ea16f7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb93c0a1ce2044bdd7fe1a3a5c4955313f02d6fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7342c16b93a5bf6c827b5cd50c1e495f5442986', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e593b8f1a108a3c48794f840966e718f8b426b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1765798791e95d8f1ce539dd3fc750390c4883', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb0418a90c5f1d5ab9ca69f5d11fe6b16c76fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325f28c5033d45fba09dc6fa076749dcf590828d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f8ea697bd66cf4e9e94dc1398560de400b32fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1970eb4ff4fc47f743607a66ff25932882f15d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e64aa432702b74d10adc4450134f7bc0a3626f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f440a33e6036b742a58f68b12d0adc704764c10b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255773d7d5b0a76f1d33071ae8f7c9346efac04c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2a1783049b815943654248b57521c7edeeb416', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c5f6f4ef974654a141140564420898247e2a00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163310e09894c653122d2e0512dd47b9b6f087e1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6131c1da8e22181f0f84d86eeaafd6229c4a1395', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb5fc5515e370659911e037d9456d9afc77cbfb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412077587c9f96712a7b68d7294bf0b68dc346b0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c98cf2f4c08b63f3e477b5a17398da8472e92e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1762c326988b3aacd184782f127d1b833e84a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5229ac9ab27b4f9b37a6cca053d789de06b33ea5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1d24aa9b17a2bc343df48ab91ad6f875059ec9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08cf6c3b34946f1f525ea4275c4f0001c071ed31', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72e419b955751cd2be7c317b9ed74a63b4fed03', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8472abab84b36104249f9490b5c2ce7f98eb75a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe42a64d41cc7fd1fe3ddfc1c5e90a6ae767191b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e12f24752a17fed3abbfdb3171dc5516958235fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdb165e67558c7503b780be7d432d60cf8d2431', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf2726026e93fc00aad537b2fd3410c587f8286', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3424be79267cc7bb8ce66354a15e9ee523011b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381853cd318e67681b24fcb4db203017eff05b75', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59494f75978df055aacee7645301063869d88ca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293ab92579fac6263fb3047e43174c05103456b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f393e1ed626bded942544d8c8afabb9db5a6f142', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d607edd524bf80c625a447b13de9b4cbf6a06f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01a238b9a361ac0f9da3667908bb081e89268c3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cb290d5faf9225cfe9c007f35daa77955fd99f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4ac03ce0f279e5600241188b389a09106653b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b07156e5e36e8855538f0d193ccef117d3e724', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feacee172a50f57fee990548a33aa1b6833a3e5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fbc73d451b93fb2272781afe2ae4318437d844', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c0bfdcbce2a52ca0ccc128207acb19ff7fb37f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbf66098cb7c357a425e5f1b84bbf3512256272', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56cf6d012e779afc4b18bc0ee8ed8e7d7613246c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3c47d4a94832767db398b669c486aaf7241ca1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e64dc566fdb74ca1a1a28b8f25aebadbb64065', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2f287d6b4071487f05836150d7c8f47f19593e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36033efbe9f03ac83ff7e87ce036e52beff0e527', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161f8ecf4d45094523fcfd37d95d15b82d8768a6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996694b5c7671859ae139113c89cca4875404d4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8740a48fee209a8c9f278437a9efc9e874bd09cb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6671857acc36b0c9c2b4333b8423c75dd64b5b09', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11963c8424afa6494a68a964e174c7794890d3c0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8aa5e499345b0bbc634d6dbd4e3d83d1c033664', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b784525daf4a3e3d71572bfc7d7badef9c874f9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe17ed93aa4c70a35cec1af86dcea32e63874118', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6860083409d18ccc73255aa2110e8e0121a3e5de', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4083244112545b473a2d371b69a10301eb694db9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6f3e8e29d7b241eed140483ec9662f3b384c1b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65efa4c8d84d4b4e456289b001e7838c9b4a21b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afc018349e7ce1e7e4500e7657948fb79b843e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13e3f36d140bc282855a8479db80e81e76d4c30', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6132e5dc355d1176721fb58d5924855be83fd6ee', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a5b47e05609ef4d73a5e51d60f263ed4bbb8082', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248266a80f213d7d9d533151a2093294379bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9375775c4d793a3910c9e15cb7859705a5080356', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc5eb0484a8ff458e82b843461b4f0b36ecdc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81152127ddaf0e80d47b3af2f9375556c36d0b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb20d3a95a18a22c7f3044f8863bb14abbce1a0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a0166b859381c43c31d1421bab0c84ce90fd52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac402d40f3145ffc588260f0e7db08ba664d103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32910ea758b73537bf79ec2002f33c32d07dabb5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b749db4d5f8378dd5ba1abf5ed6325e12619569', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c08868bd241c8f82e7120924e468c56cff3185c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add1ed7892e88c197faf8756fee99250a7345d9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2f808e9ddebc7b440e3df5a311868762670f6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10020344a811138759eb925c4f08692dda4eeb0a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11010b12c0c457e5c22efb5c78f01705bbdc7192', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4b0ecf0c212258ade5b38e3e1ef714f68499ac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaf8df8bf19eb7750b7d9d507615a5f1df319dc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3042f2ed10e2f41ed17cad034e6ecc670bd384b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49745a46ce7cef6e16ea2e3951945d0f5c534f80', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dbe3ed6975861bfcd425a6efb7f9b84786a419', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d73c9d3514b20eb870299d59e5b2943cade17a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a9c601375176cd296e06a2e286b6043d35dcec2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d66e01918ab83227f4d64eeb8f58718e9d4bf9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae1f8d504a8a357c4d09d0842df078722d621c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e201a3d55b3ebff97894b23534ecafc21294e423', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d839ce5d48118f98e925915f01e5368274a5c1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd6b4ea459b3907682c3f7fc06f4f9db05d9c85', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e38f796b4724b15dc3ec55d07e0b5f201e66d6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73de95813c7906ca9505a6839c565bece9350efb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e67cab3975c7279716ba998506970454540c2d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73b1fe4ca38ae0dd5bbbe896a383cb9559b103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1637ccd5dfe39a17512b45ba44bcd9ade9e47ac1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba990ef364db43eb200e5f04d6a3adcdd36c5b3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262a4ecc2478e1f3ee8ebc65e35e1f7145ea3f4b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5887ccedf81c19429913965616bbe6317da101', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb05552bf6c0d60d9732787112c78091c3c0c3e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de21e33b909ef78f437e9c893de5ea6bd49bf742', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '130c0d9c9ce1cae0eeaeb8c1327a2000eec42271', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c1042f98839936b79672aec59f90a18675819', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb88fe87b0ad0a2af091e5eb6f012009c4799ed', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f7d73625a53dde50a5640383ab2d0b04aa25ae', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345946123ddaa5d17c58cc9858637c433ef607e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c5f9672882f5800485169914973933f9a053df', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a8d529ce8fb9f6a4ce78acf19a67dd04076e00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e785d54b5680129ba101080c4ce7c2dbe5902e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1321979ee6ec5f004e3cd417cf0335dafa2668', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e519791e12af1e9f30d891dfc4d554d3b93fd7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55757024e7b905f6bf1eae7057a48598ac61e02', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5db31908babb9012fcf155b14da2a24bb537a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37cca31b1605b0647f8187e2c4ee514f6870532', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2186d74e070f9bad06db0c1ef2b49f46f6f7d43', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7f9fca129fd7d6e420af5f274f16ee3ea0b945', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70c88051d4ba8bd4a3b7cd9f43414f27896ea94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70413bc9cf96d56a3424428284e21c08def4814', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8bcf56548bbb8719d626ba6af6db2df38ad4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c1df5b6d3b373dfc3ae5e876f786e175faa482', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5849bc0402af2c3be92a4ad55cc1fc4148a1f74d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e09e83731630c03caa19cbdd069441ee1a59d810', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637606c453d14145c1d9003f9a7f4e74653db4bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed9d9a851cf821e352a9ae12d0db1eabc04f34c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab0b700f04aba3e120b0e840572f31de9f95760', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30158c0a9065520ef7226f9663289c033e82084', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ef42f0af3e7be963c5971bf27efa2ad129720', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd873ecd582353add4fcc5ed0295283b422d95d5d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8bf3a71adb8d4b1032e30704fce1b04c47a1ad', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1cbd98d25f0242950cd5ad22f016bbab9960ec', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e108adc274c85d6719fe3e61aca03682aa0b52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ddf5607e5769754309298bd15e04532753a4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594d31a2fd06e7b43ce58c32ad1dec0d6fb35df9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1940980fb00120e10e3254f3f8aa4defeee85777', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34d46b339fe9e3fbb849916a27830302a945683', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0b960edcb94bf20ab7e522c9db751cbb1eba0c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ea8ae7023c92c9ded8effd4f9efae46b785890', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72e5a98b1174794f570dde0f10a39774e58c60f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d0b425d342892218f5fbdfe4b6f4d87708d803', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c32c921aa438bcb4ddb1e9de94d0872d44ff9338', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99a316f8c11f4e28bf155b6ae5b225da036bdb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6a60773a6af9ea0cfb1311c076d8c3f4154c22', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bdea697d4bc7112f71b0e068c9df6d67eef7df6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f13ff8d25df992a2afa0a2105e869970fb4bf67', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fc1e9e4846a5fbb15722a7e3b1da1d91a19399', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a1f139227871bf4e20ea768e933e085d0a5712', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd079ca8565ed08841134daf96d08b79165f9a4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f286c73f9f47d8a9dc4e3df5e5ee91cb22134c1c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db928cb81c9e58901ea78fc610d332c3cc8b2db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d2d9ddb2307b5e3b56ce74d4f95fe682d8d1a6c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a331ffa0a7753d0bc7eb4034874fca32f29bd4db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484891e4c09afc77a5062d8269ad26dcd9a85c00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a7495d8901c24b4611cec155c2b9ee0a9cda9e3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99883731821742f2d7dbf9a2af8cd84a84b58be9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb4dd663d76d00ecdb6285c3ef70f390430c974', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b8e2c2b498b6bfa1abe2b3945dedc3e4b2272f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34798e8d2271a3eee830ddaaedc46c54f8fc0b5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcba69f2560efb05817697997320960bb563ed94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09d0d429948c713b91256b72b144ab1f0e7add7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c944564734be9aa46bf029cf14e6789ced95a7c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b042bbacda53392004ecf3b302d0eda71071147c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9c38348bf845320c88eeefdb4eb77b8bb48b61', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2b163ff874154f84f1c3671c549a044753f990', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b012d04acb78c74a281c70dc15ec14a6f5da81be', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eacacba40004c180d47cb7cbad068de4206c0474', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a4b8d28790a76c56204dca2b248bc2c2ce7166', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43cf46446b481d864a330ec652559573ddc74ee0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3b03ff023227cf7d0d13b607dc376d1c5cb45f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa7eadb884a73eb89a84a1367c0d39794f12b1f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb4e1cc91dc5c81e865ce426378f8b40a657386', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffef7438b56546d91020522cfaf42283339da9a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f0f05c6adf996be8b55330d973fd58d121b2ec4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '015d7174ec174eb0ab0eac57cab7ef8e503ea467', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb67d44be5a73495adc90a3b172111310ceca7d6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb68dcdb2d83fcf572074aef06aab81851cfbca6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}]",Sparsh Agrawal,55937724,,User,,26,,37,93
691955773,Fix #3304: Add check to ensure KDoc presence for non-private members,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->

Fixes #3304: Add check to ensure KDoc presence for non-private members

Script for ensuring that KDocs are present on all non-private:
- Classes
- Functions
- Values/fields
- Explicit constructors
- Companion objects
- Nested classes
- Enums
- Annotations
- Interfaces

Note: If any of the above member has an override modifier present, then it is automatically
exempted for the KDoc check.

Usage:
`bazel run //scripts:kdoc_check -- <path_to_directory_root>`

Arguments:
- path_to_directory_root: directory path to the root of the Oppia Android repository.

Example:
`bazel run //scripts:kdoc_check -- $(pwd)`

For testing the script, automated tests have been added.
To execute the tests, use:

`bazel test //scripts/src/javatests/org/oppia/android/scripts/kdoc:KDocCheckTest`

**Note:** We are generating the test assets dynamically at the time of executing them. The test assets are automatically deleted when the test finishes.

SS when the CI check fails:

![image](https://user-images.githubusercontent.com/55937724/126044224-5cc1c960-d8e5-4bbb-a3da-e05b92bef934.png)

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3499,https://api.github.com/repos/oppia/oppia-android/pulls/3499,https://github.com/oppia/oppia-android/pull/3499,closed,2308,216,11,203,7,88,0,1,[],2021-07-17 16:27:12+00:00,2021-07-30 10:40:34+00:00,1102402.0,"12 days, 18:13:22","[{'comment_id': 674516138, 'comment_body': ""Maybe instead: 'KDoc validity check' would be clearer? The current name is a bit too non-specific, and we do want to eventually extend this script to include other checks.\r\n\r\nDitto for the step name above & class/library names elsewhere in the PR."", 'comment_created': datetime.datetime(2021, 7, 22, 5, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674517047, 'comment_body': ""This & the test counterpart should be more generic: this package contains scripts corresponding to KDocs in the codebase. Presence is one such example, and there may be more in the future.\r\n\r\nThat being said, I actually suggest making this package even more generic. Could we call it 'docs'? We probably will only ever have one script for verifying KDocs, but I could see the need for validating other forms of documentation & comments in the future."", 'comment_created': datetime.datetime(2021, 7, 22, 5, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674517520, 'comment_body': ""@prayutsu will we need to also update the license textproto file, or will you be doing that in a later PR (given that there's no CI check currently to ensure it stays up-to-date?)."", 'comment_created': datetime.datetime(2021, 7, 22, 5, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674520442, 'comment_body': 'Is this docstring correct?', 'comment_created': datetime.datetime(2021, 7, 22, 6, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674520520, 'comment_body': ""It's just one file, right?"", 'comment_created': datetime.datetime(2021, 7, 22, 6, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674521056, 'comment_body': 'Typo: Generates', 'comment_created': datetime.datetime(2021, 7, 22, 6, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674521736, 'comment_body': 'Could we use [``File.readText()``](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/read-text.html) instead?', 'comment_created': datetime.datetime(2021, 7, 22, 6, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674522302, 'comment_body': 'This if-check should have curly braces. We only omit curly braces on statements if they fit entirely on one line.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674522668, 'comment_body': 'I suggest converting this if-else-if block into a ``when`` block.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674522994, 'comment_body': ""I'm not sure how to understand what this method is meant to do from the name alone. Could you rename it to be something more specific as to what it's actually doing? Generally, method names are verb phrases since they describe an action that's taking place."", 'comment_created': datetime.datetime(2021, 7, 22, 6, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674523082, 'comment_body': '```suggestion\r\nprivate fun checkIfKDocIsMissing(\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 6, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674523126, 'comment_body': 'Can this fit on one line?', 'comment_created': datetime.datetime(2021, 7, 22, 6, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674523436, 'comment_body': ""Is the companion check needed? I'm guessing regular object declarations should also have KDocs."", 'comment_created': datetime.datetime(2021, 7, 22, 6, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674523594, 'comment_body': '```suggestion\r\n * Returns whether an element is required to be checked for a KDoc presence.\r\n```', 'comment_created': datetime.datetime(2021, 7, 22, 6, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674523988, 'comment_body': 'Why is the doNotAnalyze check needed?', 'comment_created': datetime.datetime(2021, 7, 22, 6, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674524164, 'comment_body': 'From a proto file?', 'comment_created': datetime.datetime(2021, 7, 22, 6, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674524240, 'comment_body': 'Typo: TextProto\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674525022, 'comment_body': '```suggestion\r\n  // Also, note that the exemptions in the text proto file are maintained in lexicographical order.\r\n```\r\n\r\nDitto below.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674525297, 'comment_body': 'As mentioned earlier, this docstring is a bit too specific to the exact check being implemented. Please generalize it.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674533083, 'comment_body': 'Other tests that I think are worth adding:\r\n- A block comment instead of a KDoc (to ensure KDocs are specifically checked).\r\n- Inject primary constructor (just to make sure nothing special is triggered in that situation)\r\n- Object vals\r\n- Constants\r\n- Companion objects\r\n- Nested interfaces\r\n- Nested annotations\r\n- All other special case annotations not already tested below (all of them ought to be checked)\r\n- The special case of the exemptions list having a redundant file in it (see my comment above)', 'comment_created': datetime.datetime(2021, 7, 22, 6, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674533561, 'comment_body': 'One scenario I think we missed in past checks that is especially important for this one is outputting an error when the exemption list contains something no longer relevant. I think we actually want to make sure that, in general, exemption lists are always the complete picture on the status of the codebase.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674536948, 'comment_body': ""As this is a test dependency, we'll not need to update the textproto file."", 'comment_created': datetime.datetime(2021, 7, 22, 6, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prayutsu', 'type': 'User'}, {'comment_id': 676034566, 'comment_body': 'Actually, if we use `File.readText()`, then it gives this error while parsing one of the files because of the line separator, hence I had to go by this approach.\r\n\r\n```\r\nException in thread ""main"" java.lang.AssertionError: Wrong line separators: \'....gae.model\\r\\n\\r\\nimport...\' at offset 49\r\n        at org.jetbrains.kotlin.com.intellij.openapi.util.text.StringUtil.assertValidSeparators(StringUtil.java:2450)\r\n        at org.jetbrains.kotlin.com.intellij.openapi.editor.impl.DocumentImpl.assertValidSeparators(DocumentImpl.java:690)\r\n        at org.jetbrains.kotlin.com.intellij.openapi.editor.impl.DocumentImpl.<init>(DocumentImpl.java:119)\r\n        at org.jetbrains.kotlin.com.intellij.openapi.editor.impl.DocumentImpl.<init>(DocumentImpl.java:114)\r\n        at org.jetbrains.kotlin.com.intellij.openapi.editor.impl.DocumentImpl.<init>(DocumentImpl.java:105)\r\n        at org.jetbrains.kotlin.com.intellij.core.CoreApplicationEnvironment.lambda$new$1(CoreApplicationEnvironment.java:94)\r\n        at org.jetbrains.kotlin.com.intellij.mock.MockFileDocumentManagerImpl.getDocument(MockFileDocumentManagerImpl.java:42)\r\n        at org.jetbrains.kotlin.com.intellij.psi.AbstractFileViewProvider.getDocument(AbstractFileViewProvider.java:180)\r\n        at org.oppia.android.scripts.docs.KDocValidityCheckKt.retrieveLineNumberForElement(KDocValidityCheck.kt:260)\r\n        at org.oppia.android.scripts.docs.KDocValidityCheckKt.checkIfKDocMissing(KDocValidityCheck.kt:208)\r\n        at org.oppia.android.scripts.docs.KDocValidityCheckKt.elementIterator(KDocValidityCheck.kt:169)\r\n        at org.oppia.android.scripts.docs.KDocValidityCheckKt.hasKdocFailure(KDocValidityCheck.kt:130)\r\n        at org.oppia.android.scripts.docs.KDocValidityCheckKt.main(KDocValidityCheck.kt:86)\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 24, 19, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130297, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130320, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130335, 'comment_body': 'Corrected now.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130342, 'comment_body': 'Corrected now.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130351, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130360, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130380, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130413, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130422, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130436, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130512, 'comment_body': 'As per the discussion, we had, its now updated.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130530, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130558, 'comment_body': 'Apologies! this was redundant. Removed.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130582, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130602, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130623, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130667, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130678, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 676130689, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 25, 11, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 677966523, 'comment_body': '```suggestion\r\nLibraries corresponding to documentation-related scripts.\r\n```\r\n\r\nCan be simpler. Ditto for the tests version.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677966655, 'comment_body': 'File: ``KdocValidityCheck``\r\n\r\n(note camel-casing/capitalization). Ditto for the proto message name.\r\n\r\nWe consider ""kdoc"" to be one word which means as a unit it\'s capitalized/lowercase rather than being partly.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677966924, 'comment_body': '```suggestion\r\n  val kdocExemptionList =\r\n    loadKdocExemptionsProto(pathToProtoBinary).getExemptedFilePathList()\r\n```\r\n\r\nWrapping should be at the higher syntactical element (in this case the ``=``).', 'comment_created': datetime.datetime(2021, 7, 28, 4, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677967143, 'comment_body': '```suggestion\r\n * @return a list of elements in the file which are missing KDocs\r\n```\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677967639, 'comment_body': 'Can be simplified I think to:\r\n\r\n```suggestion\r\n      return memberMissingKdoc + classKdocMissing\r\n```\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677967874, 'comment_body': 'Why not return empty list, instead? Ditto below.\r\n\r\nPrefer to avoid nullable unless needed.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677969085, 'comment_body': '```suggestion\r\n// not check for the presence of KDocs.\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 4, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677969417, 'comment_body': '```suggestion\r\n  fun testKdoc_fieldWithRuleAnnotationWithoutKdoc_checkShouldPass() {\r\n```\r\n\r\nDitto for other tests (per camel-casing guidelines).', 'comment_created': datetime.datetime(2021, 7, 28, 4, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677969740, 'comment_body': 'What about a test where something just has a qualifier? That seems like a nice failure case to cover.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677969858, 'comment_body': '_withKdoc?\r\n\r\nDitto for other passing cases (to contrast with the \'withoutKdoc\' tests). Similarly, I suggest separating out ""_withoutKdoc"" in those test names to be a bit clearer that it\'s a separate condition being implemented.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677970171, 'comment_body': '```suggestion\r\n      class SelectionFragmentModel @Inject constructor() {\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 4, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677970371, 'comment_body': 'This is a line comment, not a block comment (suggest updating the test name & adding a test for a block comment).', 'comment_created': datetime.datetime(2021, 7, 28, 4, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677970854, 'comment_body': 'I suggest framing this as ""fileWithAllExpectedKdocs_redundantExemption_..."" and then add a test for the case where it\'s exempted and only has some of the kdocs--that shouldn\'t fail since the file hasn\'t been fully resolved yet.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677971504, 'comment_body': 'Ah. You could maybe do something like:\r\n\r\n```kotlin\r\nfile.readLines().joinToString(separateor = System.lineSeparator())\r\n```\r\n\r\nWould that work?', 'comment_created': datetime.datetime(2021, 7, 28, 4, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677971694, 'comment_body': 'Ah good point. Thanks!', 'comment_created': datetime.datetime(2021, 7, 28, 4, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 677972250, 'comment_body': 'I suggest making this test specific to just the companion object and add another test for a companion object with constituent values & functions to make it more clear the specific expected behavior for companion objects.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 678221450, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678221543, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678221652, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678221722, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678221802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678221913, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222005, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222073, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222218, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222318, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222757, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222860, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222928, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678222975, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679665767, 'comment_body': ""Was this addressed? The latest code version doesn't seem to include the space."", 'comment_created': datetime.datetime(2021, 7, 30, 5, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 679677744, 'comment_body': 'Apologies! Just missed this. Now updated.', 'comment_created': datetime.datetime(2021, 7, 30, 6, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679701883, 'comment_body': '```suggestion\r\n      - name: KDoc Validation Check\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 7, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 679702749, 'comment_body': '```suggestion\r\n * Script for ensuring the KDocs validity on all non-private:\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 7, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 679703220, 'comment_body': 'use the same name given above in comment - `path_to_directory_root` in camel case ', 'comment_created': datetime.datetime(2021, 7, 30, 7, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 679705572, 'comment_body': '`private const val ` and make them global', 'comment_created': datetime.datetime(2021, 7, 30, 7, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 679706326, 'comment_body': 'you can create a helper function at bottom of this file and use it here for writing text file', 'comment_created': datetime.datetime(2021, 7, 30, 7, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 679707358, 'comment_body': '```suggestion\r\nclass KDocValidityCheckTest {\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 7, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 679707833, 'comment_body': 'Also, make file name `KDocValidityCheck.kt`', 'comment_created': datetime.datetime(2021, 7, 30, 7, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 679711531, 'comment_body': 'Ah! this has been discussed previously, and it was decided to name it as ""Kdoc"", as ""Kdoc"" is a single entity in itself.\r\nDitto for the script name. ', 'comment_created': datetime.datetime(2021, 7, 30, 7, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679713884, 'comment_body': 'Actually, we are using the same name ""repoPath"" for all the scripts till now, so will it be better to keep this the same in order to maintain consistency across all the scripts?', 'comment_created': datetime.datetime(2021, 7, 30, 7, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679714026, 'comment_body': 'Explained below. PTAL.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679715989, 'comment_body': 'Hmm, we just want to use `writeText` here in order to write the test file, so do we actually need to create a separate function for that? Also, this will make this script a bit inconsistent with all the other scripts, as there we are following the current approach. ', 'comment_created': datetime.datetime(2021, 7, 30, 7, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679718650, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679718802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 679723195, 'comment_body': ""For context, see also: https://developer.android.com/kotlin/style-guide#camel_case for why it should be 'Kdoc' and not 'KDoc' here."", 'comment_created': datetime.datetime(2021, 7, 30, 7, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}]","[{'commit_sha': '225a4fc070efb18dda2f4e08d76ac94b2b0321aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638895fa2e461aae4b2d9f6e519e8349e0b3d282', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fd706805e82358fb0cb4be551e3fe10ae6ee2c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e77646138df0189eacb8c3a029bf26615abb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44e0150e382ab0bd4a085ad21b371fe78c63ca2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d38f1393f18d709a32940cf14f0c45b1a43bc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173fe5314ae3b57a55d49d150f95e3efed2ac5da', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618e380d8c52b3bdb31c0b85a253ab6177cc221b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3830ac088920f22e8c7bd59dc70a05ce1ea16f7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb93c0a1ce2044bdd7fe1a3a5c4955313f02d6fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7342c16b93a5bf6c827b5cd50c1e495f5442986', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e593b8f1a108a3c48794f840966e718f8b426b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1765798791e95d8f1ce539dd3fc750390c4883', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb0418a90c5f1d5ab9ca69f5d11fe6b16c76fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325f28c5033d45fba09dc6fa076749dcf590828d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f8ea697bd66cf4e9e94dc1398560de400b32fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1970eb4ff4fc47f743607a66ff25932882f15d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e64aa432702b74d10adc4450134f7bc0a3626f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f440a33e6036b742a58f68b12d0adc704764c10b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255773d7d5b0a76f1d33071ae8f7c9346efac04c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2a1783049b815943654248b57521c7edeeb416', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c5f6f4ef974654a141140564420898247e2a00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163310e09894c653122d2e0512dd47b9b6f087e1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6131c1da8e22181f0f84d86eeaafd6229c4a1395', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb5fc5515e370659911e037d9456d9afc77cbfb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412077587c9f96712a7b68d7294bf0b68dc346b0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c98cf2f4c08b63f3e477b5a17398da8472e92e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1762c326988b3aacd184782f127d1b833e84a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5229ac9ab27b4f9b37a6cca053d789de06b33ea5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1d24aa9b17a2bc343df48ab91ad6f875059ec9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08cf6c3b34946f1f525ea4275c4f0001c071ed31', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72e419b955751cd2be7c317b9ed74a63b4fed03', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8472abab84b36104249f9490b5c2ce7f98eb75a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe42a64d41cc7fd1fe3ddfc1c5e90a6ae767191b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e12f24752a17fed3abbfdb3171dc5516958235fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdb165e67558c7503b780be7d432d60cf8d2431', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf2726026e93fc00aad537b2fd3410c587f8286', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3424be79267cc7bb8ce66354a15e9ee523011b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381853cd318e67681b24fcb4db203017eff05b75', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59494f75978df055aacee7645301063869d88ca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293ab92579fac6263fb3047e43174c05103456b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f393e1ed626bded942544d8c8afabb9db5a6f142', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d607edd524bf80c625a447b13de9b4cbf6a06f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01a238b9a361ac0f9da3667908bb081e89268c3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cb290d5faf9225cfe9c007f35daa77955fd99f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4ac03ce0f279e5600241188b389a09106653b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b07156e5e36e8855538f0d193ccef117d3e724', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feacee172a50f57fee990548a33aa1b6833a3e5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fbc73d451b93fb2272781afe2ae4318437d844', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c0bfdcbce2a52ca0ccc128207acb19ff7fb37f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbf66098cb7c357a425e5f1b84bbf3512256272', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56cf6d012e779afc4b18bc0ee8ed8e7d7613246c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3c47d4a94832767db398b669c486aaf7241ca1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e64dc566fdb74ca1a1a28b8f25aebadbb64065', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2f287d6b4071487f05836150d7c8f47f19593e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36033efbe9f03ac83ff7e87ce036e52beff0e527', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161f8ecf4d45094523fcfd37d95d15b82d8768a6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996694b5c7671859ae139113c89cca4875404d4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8740a48fee209a8c9f278437a9efc9e874bd09cb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6671857acc36b0c9c2b4333b8423c75dd64b5b09', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11963c8424afa6494a68a964e174c7794890d3c0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8aa5e499345b0bbc634d6dbd4e3d83d1c033664', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b784525daf4a3e3d71572bfc7d7badef9c874f9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe17ed93aa4c70a35cec1af86dcea32e63874118', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6860083409d18ccc73255aa2110e8e0121a3e5de', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4083244112545b473a2d371b69a10301eb694db9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6f3e8e29d7b241eed140483ec9662f3b384c1b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65efa4c8d84d4b4e456289b001e7838c9b4a21b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afc018349e7ce1e7e4500e7657948fb79b843e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13e3f36d140bc282855a8479db80e81e76d4c30', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6132e5dc355d1176721fb58d5924855be83fd6ee', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a5b47e05609ef4d73a5e51d60f263ed4bbb8082', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248266a80f213d7d9d533151a2093294379bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9375775c4d793a3910c9e15cb7859705a5080356', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc5eb0484a8ff458e82b843461b4f0b36ecdc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81152127ddaf0e80d47b3af2f9375556c36d0b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb20d3a95a18a22c7f3044f8863bb14abbce1a0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a0166b859381c43c31d1421bab0c84ce90fd52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac402d40f3145ffc588260f0e7db08ba664d103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32910ea758b73537bf79ec2002f33c32d07dabb5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b749db4d5f8378dd5ba1abf5ed6325e12619569', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c08868bd241c8f82e7120924e468c56cff3185c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add1ed7892e88c197faf8756fee99250a7345d9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2f808e9ddebc7b440e3df5a311868762670f6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10020344a811138759eb925c4f08692dda4eeb0a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11010b12c0c457e5c22efb5c78f01705bbdc7192', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4b0ecf0c212258ade5b38e3e1ef714f68499ac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaf8df8bf19eb7750b7d9d507615a5f1df319dc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3042f2ed10e2f41ed17cad034e6ecc670bd384b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49745a46ce7cef6e16ea2e3951945d0f5c534f80', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dbe3ed6975861bfcd425a6efb7f9b84786a419', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d73c9d3514b20eb870299d59e5b2943cade17a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a9c601375176cd296e06a2e286b6043d35dcec2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d66e01918ab83227f4d64eeb8f58718e9d4bf9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae1f8d504a8a357c4d09d0842df078722d621c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e201a3d55b3ebff97894b23534ecafc21294e423', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d839ce5d48118f98e925915f01e5368274a5c1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd6b4ea459b3907682c3f7fc06f4f9db05d9c85', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e38f796b4724b15dc3ec55d07e0b5f201e66d6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73de95813c7906ca9505a6839c565bece9350efb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e67cab3975c7279716ba998506970454540c2d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73b1fe4ca38ae0dd5bbbe896a383cb9559b103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1637ccd5dfe39a17512b45ba44bcd9ade9e47ac1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba990ef364db43eb200e5f04d6a3adcdd36c5b3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262a4ecc2478e1f3ee8ebc65e35e1f7145ea3f4b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5887ccedf81c19429913965616bbe6317da101', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb05552bf6c0d60d9732787112c78091c3c0c3e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de21e33b909ef78f437e9c893de5ea6bd49bf742', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '130c0d9c9ce1cae0eeaeb8c1327a2000eec42271', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c1042f98839936b79672aec59f90a18675819', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb88fe87b0ad0a2af091e5eb6f012009c4799ed', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f7d73625a53dde50a5640383ab2d0b04aa25ae', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345946123ddaa5d17c58cc9858637c433ef607e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c5f9672882f5800485169914973933f9a053df', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a8d529ce8fb9f6a4ce78acf19a67dd04076e00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e785d54b5680129ba101080c4ce7c2dbe5902e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1321979ee6ec5f004e3cd417cf0335dafa2668', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e519791e12af1e9f30d891dfc4d554d3b93fd7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55757024e7b905f6bf1eae7057a48598ac61e02', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5db31908babb9012fcf155b14da2a24bb537a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37cca31b1605b0647f8187e2c4ee514f6870532', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2186d74e070f9bad06db0c1ef2b49f46f6f7d43', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7f9fca129fd7d6e420af5f274f16ee3ea0b945', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70c88051d4ba8bd4a3b7cd9f43414f27896ea94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70413bc9cf96d56a3424428284e21c08def4814', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8bcf56548bbb8719d626ba6af6db2df38ad4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c1df5b6d3b373dfc3ae5e876f786e175faa482', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5849bc0402af2c3be92a4ad55cc1fc4148a1f74d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e09e83731630c03caa19cbdd069441ee1a59d810', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637606c453d14145c1d9003f9a7f4e74653db4bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed9d9a851cf821e352a9ae12d0db1eabc04f34c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab0b700f04aba3e120b0e840572f31de9f95760', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30158c0a9065520ef7226f9663289c033e82084', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ef42f0af3e7be963c5971bf27efa2ad129720', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd873ecd582353add4fcc5ed0295283b422d95d5d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8bf3a71adb8d4b1032e30704fce1b04c47a1ad', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1cbd98d25f0242950cd5ad22f016bbab9960ec', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e108adc274c85d6719fe3e61aca03682aa0b52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ddf5607e5769754309298bd15e04532753a4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594d31a2fd06e7b43ce58c32ad1dec0d6fb35df9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1940980fb00120e10e3254f3f8aa4defeee85777', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34d46b339fe9e3fbb849916a27830302a945683', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0b960edcb94bf20ab7e522c9db751cbb1eba0c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ea8ae7023c92c9ded8effd4f9efae46b785890', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72e5a98b1174794f570dde0f10a39774e58c60f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d0b425d342892218f5fbdfe4b6f4d87708d803', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c32c921aa438bcb4ddb1e9de94d0872d44ff9338', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99a316f8c11f4e28bf155b6ae5b225da036bdb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6a60773a6af9ea0cfb1311c076d8c3f4154c22', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bdea697d4bc7112f71b0e068c9df6d67eef7df6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f13ff8d25df992a2afa0a2105e869970fb4bf67', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fc1e9e4846a5fbb15722a7e3b1da1d91a19399', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a1f139227871bf4e20ea768e933e085d0a5712', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd079ca8565ed08841134daf96d08b79165f9a4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f286c73f9f47d8a9dc4e3df5e5ee91cb22134c1c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db928cb81c9e58901ea78fc610d332c3cc8b2db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d2d9ddb2307b5e3b56ce74d4f95fe682d8d1a6c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a331ffa0a7753d0bc7eb4034874fca32f29bd4db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484891e4c09afc77a5062d8269ad26dcd9a85c00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a7495d8901c24b4611cec155c2b9ee0a9cda9e3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99883731821742f2d7dbf9a2af8cd84a84b58be9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb4dd663d76d00ecdb6285c3ef70f390430c974', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b8e2c2b498b6bfa1abe2b3945dedc3e4b2272f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34798e8d2271a3eee830ddaaedc46c54f8fc0b5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fdf50e6959da89b7473395c337b231be6abf599', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa1af82a5a48f7fa627a3b3d1b6047b309187c9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023bac6242724ca148232336f64b4f7f9d3c9a23', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75bb351d1608fbe8b78226cfa00741a7c6640896', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcba69f2560efb05817697997320960bb563ed94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09d0d429948c713b91256b72b144ab1f0e7add7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c944564734be9aa46bf029cf14e6789ced95a7c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03576d1af0961137edc48adea98ed5b7a4470a19', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633cb4b33a0240072da03c01518dd61212001b10', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ad4e98c82ecbc1041b41cc77a1a053710012f2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b042bbacda53392004ecf3b302d0eda71071147c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db1d29b2895790b06221acf75b56c91b7526eac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9c38348bf845320c88eeefdb4eb77b8bb48b61', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2b163ff874154f84f1c3671c549a044753f990', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b012d04acb78c74a281c70dc15ec14a6f5da81be', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eacacba40004c180d47cb7cbad068de4206c0474', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a4b8d28790a76c56204dca2b248bc2c2ce7166', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43cf46446b481d864a330ec652559573ddc74ee0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3b03ff023227cf7d0d13b607dc376d1c5cb45f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26df126e531ce4b87b38b758f5a86de2659eced3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4082259d159e71c4e2808fbaac130e638ed9e228', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db6c211c306066a8f69580eb45771128d35e20f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa7eadb884a73eb89a84a1367c0d39794f12b1f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb4e1cc91dc5c81e865ce426378f8b40a657386', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94a482b4f675c422b69632c2f86c6d2ff69ff61b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8506662163a081a6fb7ae4c3852e76acf0fcc8aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffef7438b56546d91020522cfaf42283339da9a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed07199b677bd9f0cb5ce67c7b971d2d65aa4d1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7efb898619ea3603bdc0a145ff93c7601d8ff4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f0f05c6adf996be8b55330d973fd58d121b2ec4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4c64fb95242bae7e19c330d04807aad46c5f8c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '015d7174ec174eb0ab0eac57cab7ef8e503ea467', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda44e45c5aed765ce83a87604a2f8f56cf89225', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb67d44be5a73495adc90a3b172111310ceca7d6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb68dcdb2d83fcf572074aef06aab81851cfbca6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2343423694354ac15403147c2d130212ebca950d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a397534f1fbd05db808218860f28ba11ba4744a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46a95caa43cd79c911d6deab7c8e4c9f3d9e32d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55a8cf3cac293c90abfbaff2da8fcf75f479745', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}]",Sparsh Agrawal,55937724,,User,,26,,37,93
699839522,Fix #3317: Update old todos,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation

Fixes #3317: Correct poorly formatted todos and update those which doesn't correspond to an open issue.

Issues that we should reopen because they aren't resolved, or issues which have additional work to complete:
- [x] [Paused activity does not get LiveData update onResume #322](https://github.com/oppia/oppia-android/issues/322)
- We need to audit the TODO cases to make sure they're resolved (though they might be per Viktoriia's comment in which case we should remove the TODO)
- [x] [Add NetworkModule to ApplicationModule and tests once migrated off of Moshi #1675](https://github.com/oppia/oppia-android/issues/1675)
- One test still needs to be updated (per the TODO) to finish resolving this; we should just fix that and remove the TODO rather than reopening the issue

Issues whose TODOs need to be repurposed to new/other issues:
- [x] [Add Bazel Linter to the project #1736](https://github.com/oppia/oppia-android/issues/1736)
  - New issue should be filed
- [x] [Addition of Work Manager [GSoC'20][Milestone 3]  #1106](https://github.com/oppia/oppia-android/issues/1106)
  - New issue should be filed
- [x] [Implement TopicController #15](https://github.com/oppia/oppia-android/issues/15)
  - New issue should be filed
- [x] [Introduce thread-safe MediatorLiveData or alternative #90](https://github.com/oppia/oppia-android/issues/90)
  - New issue should be filed
- [x] [Add temporary offline support for audio & image streaming #386](https://github.com/oppia/oppia-android/issues/386)
  - Use issue #169 instead of #386 for this TODO
- [x] [Generic data provider infrastructure #6](https://github.com/oppia/oppia-android/issues/6)
  - Except for TODO in DataProvider.kt; that one can be removed
- [x] [Migrate custom recycler view adapters over to the generic bindable adapter #216](https://github.com/oppia/oppia-android/issues/216)
  - Should be updated to reference #632 instead
- [x] [Full UI: ItemSelectionInteractionView [Blocked: #15, #154] #32](https://github.com/oppia/oppia-android/issues/32)
  - New issue should be filed
- [x] [Lowfi Implementation of My Downloads #1806](https://github.com/oppia/oppia-android/issues/1806)
  - Work with Akshay to find/file replacement issues for each existing TODO
- [x] [Introduce dependency injection support #74](https://github.com/oppia/oppia-android/issues/74)
  - New issue should be filed
- [x] [Create backend storage models for feedback reporting #2801](https://github.com/oppia/oppia-android/issues/2801)

Issues whose TODOs are also resolved and thus should be removed from code, or TODOs which do not need to be resolved:
- [x] [Add tests for score and mastery calculations #2738](https://github.com/oppia/oppia-android/issues/2738)
- [x] [Implement TopicController #15](https://github.com/oppia/oppia-android/issues/15)
- [x] [Add support for refresher explorations in the exploration player #182](https://github.com/oppia/oppia-android/issues/182)
- [x] [Implement StoryProgressController #21](https://github.com/oppia/oppia-android/issues/21)
- [x] #1104: Remove TODO and add KDoc

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [ ] The PR is made from a branch that's **not** called ""develop"".
- [ ] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.",True,3610,https://api.github.com/repos/oppia/oppia-android/pulls/3610,https://github.com/oppia/oppia-android/pull/3610,closed,40,49,33,16,6,9,0,1,[],2021-07-29 21:02:14+00:00,2021-08-06 02:58:59+00:00,626205.0,"7 days, 5:56:45","[{'comment_id': 683206202, 'comment_body': '@anandwana001 will these actually be addressed with your changes?', 'comment_created': datetime.datetime(2021, 8, 5, 7, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 683207413, 'comment_body': ""@jcqli won't this be addressed by your pending PR?"", 'comment_created': datetime.datetime(2021, 8, 5, 7, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 683213320, 'comment_body': '@BenHenning Just adding this thread (https://github.com/oppia/oppia-android/pull/3508#issuecomment-890165282) as we have received confirmation from @jcqli.\r\nI have created a new issue according to this conversation i.e #3636.\r\n', 'comment_created': datetime.datetime(2021, 8, 5, 7, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 683268736, 'comment_body': 'No, we need these todo, with my ui driven thing, there will be no my downloads menu.', 'comment_created': datetime.datetime(2021, 8, 5, 9, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'anandwana001', 'type': 'User'}, {'comment_id': 683309473, 'comment_body': ""Sorry to be clear: I'm fairly certain this is being addressed by #2878 & https://github.com/oppia/oppia/pull/12367. Rather than introducing a new issue, why not just use #3016 since that's already being tracked?"", 'comment_created': datetime.datetime(2021, 8, 5, 9, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 683313217, 'comment_body': '@jcqli Can you confirm if I should update this TODO to use issue no? #3016 and keep the description the same as before or shall I go with the present iteration?', 'comment_created': datetime.datetime(2021, 8, 5, 10, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 683589207, 'comment_body': ""Ah I see what you mean -- I originally didn't want #2878 to be blocked by oppia/oppia#12367 but I think that will be fine. Let's use #3016 and it will be fixed in #2878."", 'comment_created': datetime.datetime(2021, 8, 5, 16, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jcqli', 'type': 'User'}, {'comment_id': 683594933, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2021, 8, 5, 16, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 683696494, 'comment_body': 'Thanks @jcqli!', 'comment_created': datetime.datetime(2021, 8, 5, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}]","[{'commit_sha': 'a5e5e28e0d4449eddfa2f5895bcf9389b2ef73f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '912d0e79ef428847a64ae485ca746ca14c02cfbf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '063cc1b1b6501a7deea86d645393a1e92b1ecf38', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6c4d8d6eab53c7a80bbd8ae82708bd18bc1cfd41', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '832437627157de119cc22fa8a5ec3614bd332de7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '078b24235adf36c875cffa1779abb5d29bca4f50', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88ff36620f27c63aa6b7d4479cb6001be8724705', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4a6a9e3681750f8995c0c1884337013267546508', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c150cdc8bf5483c6bd1a39bf79d5b709f25c4f2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '65ee6e9f38050131c8541045188b46c65d59b045', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d4c779ad89c18435a6944ecf904978ea1d27b29', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'afb32e45795ab4cdbe65fb853fb914528c538983', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1edfafe67e3501d9ce231cb75bd3b81e687e24d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0618169fecfd8e81838b18db8e24ad158b1836af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '29825a096cdc33ab9d1ca295e5735b672cfaf57b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e46472894610b4dd96113e63616a23da4424f41a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Sparsh Agrawal,55937724,,User,,26,,37,93
693855627,Fixes: #3296: Add check to ensure all TODOs are correctly formatted and correspond to an open issue on Github,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->
Fixes #3296

## Check list
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3508,https://api.github.com/repos/oppia/oppia-android/pulls/3508,https://github.com/oppia/oppia-android/pull/3508,closed,2306,2,18,249,22,100,0,0,[],2021-07-20 21:17:16+00:00,2021-08-16 18:26:44+00:00,2322568.0,"26 days, 21:09:28","[{'comment_id': 674536126, 'comment_body': 'Hmm, this is actually probably going to be quite flaky. Could we also add support for blanket exempting files or file paths in addition to specific lines? We can enforce one approach vs. the other when this file is changed, but having both mechanisms seems beneficial.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674536519, 'comment_body': 'Similar feedback to the other PR, but I think we also will want to make sure the check ensures the exemption file is correct (so if lines move around previous TODO exemptions should fail), and that there are tests verifying that the check class does this as expected.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674536746, 'comment_body': 'Nit: GitHub. Ditto elsewhere.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674537093, 'comment_body': ""What does non-real mean? That sounds like a mathematical term, but I don't think that's what you mean here. Can you rephrase & rename to clarify?"", 'comment_created': datetime.datetime(2021, 7, 22, 6, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674537568, 'comment_body': 'I suggest  using a data class, instead. We probably just want the filepath, line number, and line of code rather than passing around the file object.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674537840, 'comment_body': ""It seems a bit odd to be doing the exemption filtering here. I'd expect this class just to collect the TODOs & filtering to be done at a higher level since that's an exemption to the enforcement check, not the collection operation."", 'comment_created': datetime.datetime(2021, 7, 22, 6, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674538418, 'comment_body': 'Prefer ``-`` over ``minus`` here.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674538642, 'comment_body': 'See other comment--prefer just storing the line in the parsed TODO data class to avoid needing to reopen the input stream.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674539096, 'comment_body': 'Why use the square brackets in this expression?', 'comment_created': datetime.datetime(2021, 7, 22, 6, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674539222, 'comment_body': 'Nit: no +4 continuation is needed here.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 674539346, 'comment_body': 'I suggest passing in the JSON file path directly & updating this KDoc accordingly.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 678861593, 'comment_body': 'As per our discussion in the meet. I will add this as a future work of my GSoC project.', 'comment_created': datetime.datetime(2021, 7, 29, 6, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953010, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953117, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953293, 'comment_body': 'Removed, as those were redundant.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953427, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953498, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953588, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953677, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953775, 'comment_body': 'This is outdated.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953828, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 678953922, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 7, 29, 8, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 682552853, 'comment_body': ""This statement is a bit vague to me. What does 'not real' exactly mean?\r\nCan we instead say something on the lines of `A todo exemption indictaes a todo that doesn't necessarily have a bug assigned to it.` Or is that too specific? I will defer to @BenHenning for better wording of this"", 'comment_created': datetime.datetime(2021, 8, 4, 12, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vinitamurthi', 'type': 'User'}, {'comment_id': 682554191, 'comment_body': ""Apologies! I missed pushing this change. It's now better framed."", 'comment_created': datetime.datetime(2021, 8, 4, 12, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 683574112, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 5, 15, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 683974269, 'comment_body': 'This we actually missed. I realized this when the .github directory was also being excluded because of .git in exemption directories. Hence, had to do this correction.', 'comment_created': datetime.datetime(2021, 8, 6, 6, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 685553747, 'comment_body': 'Are these exemptions missed from earlier PRs?', 'comment_created': datetime.datetime(2021, 8, 9, 22, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685554761, 'comment_body': ""Nice correction, though should we conditionally add this only if the path doesn't already end with a path separator?\r\n\r\nAlso, could you add tests for this change?"", 'comment_created': datetime.datetime(2021, 8, 9, 22, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685555336, 'comment_body': ""Here & everywhere else (including comments, protos, and file names): 'todo check' is a bit too generic, I think. I suggest instead: 'todo_open_check' since that's actually what's being done, here. Technically it's also a validity check, but that's not the main purpose."", 'comment_created': datetime.datetime(2021, 8, 9, 22, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685555511, 'comment_body': '```suggestion\r\n// A Todo exemption indicates the usage of a TODO keyword which is not meant to accomplish a TODO\r\n```\r\n\r\nNit on consistency.\r\n\r\nDitto everywhere else (generally, always refer to TODOs as fully capitalized unless in identifiers).', 'comment_created': datetime.datetime(2021, 8, 9, 22, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685555852, 'comment_body': '```suggestion\r\nand correspond to open issues on GitHub\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 22, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685556276, 'comment_body': 'I suggest just calling this & the directory ""model"" and bundling all model-related files in here (i.e. both Issue.kt and Todo.kt).', 'comment_created': datetime.datetime(2021, 8, 9, 22, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685556411, 'comment_body': '```suggestion\r\nLibraries corresponding to data structures for representing a parsed open_issues.json file.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 22, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685556635, 'comment_body': ""```suggestion\r\n  /** The issue's identification number. */\r\n```"", 'comment_created': datetime.datetime(2021, 8, 9, 22, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685556843, 'comment_body': 'Can this not be an Int? Does GitHub actually provide it as a string instead of an integer?', 'comment_created': datetime.datetime(2021, 8, 9, 22, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685557067, 'comment_body': 'Nit: blank doc line before the property list (like we do for ``@param``s).', 'comment_created': datetime.datetime(2021, 8, 9, 22, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685557833, 'comment_body': 'Will this correctly let us detect malformed TODOs & print corresponding errors?', 'comment_created': datetime.datetime(2021, 8, 9, 22, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685558276, 'comment_body': '```suggestion\r\n  fun testTodoCollector_emptyDirectory_noTodoShouldBeCollected() {\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 22, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685558856, 'comment_body': '```suggestion\r\n * correspond to open issues on GitHub.\r\n```\r\n\r\nDitto elsewhere in the PR where this grammar needs to be updated.', 'comment_created': datetime.datetime(2021, 8, 9, 22, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685559126, 'comment_body': 'How does one create this file? I suggest clarifying those instructions here.', 'comment_created': datetime.datetime(2021, 8, 9, 22, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685560238, 'comment_body': 'Suggest moving this to a val to help make this bit of a code a bit more readable.', 'comment_created': datetime.datetime(2021, 8, 9, 22, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685560679, 'comment_body': 'Are each of these possible ``return`` outcomes covered in tests?', 'comment_created': datetime.datetime(2021, 8, 9, 22, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685560899, 'comment_body': '```suggestion\r\n  return openIssueList.none { it -> it.issueNumber == parsedIssueNumberFromTodo }\r\n```\r\n\r\nMight be a bit more idiomatic.', 'comment_created': datetime.datetime(2021, 8, 9, 22, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685561295, 'comment_body': 'Perhaps instead: ``checkIfIssueMatchesOpenIssue``?', 'comment_created': datetime.datetime(2021, 8, 9, 22, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685561563, 'comment_body': ""I'm wondering a bit if it'd be simpler to move all the TODO parsing bits over to TodoCollector so that all the regex parsing, data class representations, and logic exists in one place."", 'comment_created': datetime.datetime(2021, 8, 9, 22, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685562086, 'comment_body': 'Should this be corresponding to a text proto file, instead?', 'comment_created': datetime.datetime(2021, 8, 9, 22, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685562544, 'comment_body': 'Prefer checking & explicitly throwing in the script vs. relying on the system to do this (otherwise different implementations may vary this error message & cause test flakes).', 'comment_created': datetime.datetime(2021, 8, 9, 22, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685563361, 'comment_body': 'Maybe to simplify the error message:\r\n\r\n```suggestion\r\n      Every TODO must correspond to an open issue on GitHub\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 22, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 685564266, 'comment_body': 'Maybe update to be clearer on what is redundant here:\r\n\r\n```suggestion\r\n      Redundant exemptions (there are no TODOs corresponding to these lines):\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 22, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686208660, 'comment_body': ""Yes, GitHub actually provides this as a string, that's why I kept it to be the same."", 'comment_created': datetime.datetime(2021, 8, 10, 18, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686290151, 'comment_body': 'Done and tests added too.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686290749, 'comment_body': 'This is outdated. Removed.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686290857, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686290937, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686290993, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686291124, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686291186, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686291260, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686291349, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686291844, 'comment_body': 'Yes, this will perfectly detect the malformed TODOs too and we are printing the poor formatting error logs too.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686291935, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292026, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292119, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292179, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292308, 'comment_body': 'Yes, each case is well covered in the tests.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292436, 'comment_body': 'Looks nice. Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292511, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292624, 'comment_body': 'Revamption done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292703, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292796, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292866, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686292916, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 10, 20, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686599067, 'comment_body': 'This was missed earlier.', 'comment_created': datetime.datetime(2021, 8, 11, 8, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688187891, 'comment_body': 'Does model have one?', 'comment_created': datetime.datetime(2021, 8, 13, 1, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688189083, 'comment_body': ""I suggest adding other tests for this suite to cover edge cases (casing, or other scenarios where the regex might match/specifically not match that aren't covered by existing tests)."", 'comment_created': datetime.datetime(2021, 8, 13, 1, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688189326, 'comment_body': '```suggestion\r\n * 1. Set up Github CLI Tools locally.\r\n```\r\n\r\n(Set up is the verb form of the noun setup).', 'comment_created': datetime.datetime(2021, 8, 13, 1, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688189797, 'comment_body': '```suggestion\r\n  check (openIssuesJsonFile.exists()) { ""$repoPath${args[2]}: No such file exists"" }\r\n```\r\n\r\nBut more idiomatic. Ditto elsewhere for similar checks.', 'comment_created': datetime.datetime(2021, 8, 13, 1, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688190171, 'comment_body': 'This is a bit confusing to me. Per the documentation of ``collectCorrectlyFormattedTodos``, it expects all TODOs not a list of TODOs. Should the documentation be updated? What about for other methods in TodoCollector that take in a list of ``Todo``s?', 'comment_created': datetime.datetime(2021, 8, 13, 1, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688190409, 'comment_body': 'Nit: should either be ``TODO`` or ``[Todo]``. Ditto elsewhere.', 'comment_created': datetime.datetime(2021, 8, 13, 1, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688190653, 'comment_body': '```suggestion\r\nprivate fun checkIfIssueDoesNotMatchOpenIssue(\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 1, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688196969, 'comment_body': 'Could you update other test names in this suite to more directly identify the method being tested like this one does?', 'comment_created': datetime.datetime(2021, 8, 13, 2, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688197059, 'comment_body': 'Suggest also adding tests for parsing improper TODOs (in whatever scenarios you can think of).', 'comment_created': datetime.datetime(2021, 8, 13, 2, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688207005, 'comment_body': 'Also, probably should have tests covering each of these directories to make sure this list is fully tested to avoid regressions.', 'comment_created': datetime.datetime(2021, 8, 13, 2, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688606744, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688606821, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688606921, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688607085, 'comment_body': 'Documentation updated now.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688607178, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688607237, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688607294, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688607664, 'comment_body': 'Added for model directory and added tests covering each of these directories.', 'comment_created': datetime.datetime(2021, 8, 13, 15, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688775881, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 20, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688852820, 'comment_body': '```suggestion\r\n    tempFolder.newFolder(""testfiles"", ""domain"", ""build"", ""generated"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 2, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688853134, 'comment_body': 'Here & elsewhere: what about ``TODO(#1234`` (incomplete)?', 'comment_created': datetime.datetime(2021, 8, 14, 2, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688853303, 'comment_body': 'Was this done? The documentation still suggests the same thing, I think.', 'comment_created': datetime.datetime(2021, 8, 14, 2, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688853495, 'comment_body': ""Doesn't seem done. Ideally, the names of the methods being tested would directly be in the test names."", 'comment_created': datetime.datetime(2021, 8, 14, 2, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688864850, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688864874, 'comment_body': 'Added now.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688864891, 'comment_body': 'Apologies! I think I might have got this incorrectly.\r\nNow updated.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688864908, 'comment_body': 'Apologies! I think I might have got this incorrectly.\r\nNow updated.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}]","[{'commit_sha': '225a4fc070efb18dda2f4e08d76ac94b2b0321aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638895fa2e461aae4b2d9f6e519e8349e0b3d282', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fd706805e82358fb0cb4be551e3fe10ae6ee2c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e77646138df0189eacb8c3a029bf26615abb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44e0150e382ab0bd4a085ad21b371fe78c63ca2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1d38f1393f18d709a32940cf14f0c45b1a43bc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '173fe5314ae3b57a55d49d150f95e3efed2ac5da', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618e380d8c52b3bdb31c0b85a253ab6177cc221b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3830ac088920f22e8c7bd59dc70a05ce1ea16f7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb93c0a1ce2044bdd7fe1a3a5c4955313f02d6fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7342c16b93a5bf6c827b5cd50c1e495f5442986', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e593b8f1a108a3c48794f840966e718f8b426b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1765798791e95d8f1ce539dd3fc750390c4883', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb0418a90c5f1d5ab9ca69f5d11fe6b16c76fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325f28c5033d45fba09dc6fa076749dcf590828d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f8ea697bd66cf4e9e94dc1398560de400b32fa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1970eb4ff4fc47f743607a66ff25932882f15d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e64aa432702b74d10adc4450134f7bc0a3626f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f440a33e6036b742a58f68b12d0adc704764c10b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255773d7d5b0a76f1d33071ae8f7c9346efac04c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2a1783049b815943654248b57521c7edeeb416', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c5f6f4ef974654a141140564420898247e2a00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163310e09894c653122d2e0512dd47b9b6f087e1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6131c1da8e22181f0f84d86eeaafd6229c4a1395', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb5fc5515e370659911e037d9456d9afc77cbfb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412077587c9f96712a7b68d7294bf0b68dc346b0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c98cf2f4c08b63f3e477b5a17398da8472e92e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1762c326988b3aacd184782f127d1b833e84a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5229ac9ab27b4f9b37a6cca053d789de06b33ea5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1d24aa9b17a2bc343df48ab91ad6f875059ec9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08cf6c3b34946f1f525ea4275c4f0001c071ed31', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72e419b955751cd2be7c317b9ed74a63b4fed03', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8472abab84b36104249f9490b5c2ce7f98eb75a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe42a64d41cc7fd1fe3ddfc1c5e90a6ae767191b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e12f24752a17fed3abbfdb3171dc5516958235fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdb165e67558c7503b780be7d432d60cf8d2431', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf2726026e93fc00aad537b2fd3410c587f8286', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3424be79267cc7bb8ce66354a15e9ee523011b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381853cd318e67681b24fcb4db203017eff05b75', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59494f75978df055aacee7645301063869d88ca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293ab92579fac6263fb3047e43174c05103456b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f393e1ed626bded942544d8c8afabb9db5a6f142', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d607edd524bf80c625a447b13de9b4cbf6a06f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01a238b9a361ac0f9da3667908bb081e89268c3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cb290d5faf9225cfe9c007f35daa77955fd99f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4ac03ce0f279e5600241188b389a09106653b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b07156e5e36e8855538f0d193ccef117d3e724', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feacee172a50f57fee990548a33aa1b6833a3e5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fbc73d451b93fb2272781afe2ae4318437d844', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c0bfdcbce2a52ca0ccc128207acb19ff7fb37f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbf66098cb7c357a425e5f1b84bbf3512256272', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56cf6d012e779afc4b18bc0ee8ed8e7d7613246c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3c47d4a94832767db398b669c486aaf7241ca1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e64dc566fdb74ca1a1a28b8f25aebadbb64065', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2f287d6b4071487f05836150d7c8f47f19593e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36033efbe9f03ac83ff7e87ce036e52beff0e527', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161f8ecf4d45094523fcfd37d95d15b82d8768a6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996694b5c7671859ae139113c89cca4875404d4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8740a48fee209a8c9f278437a9efc9e874bd09cb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6671857acc36b0c9c2b4333b8423c75dd64b5b09', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11963c8424afa6494a68a964e174c7794890d3c0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8aa5e499345b0bbc634d6dbd4e3d83d1c033664', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b784525daf4a3e3d71572bfc7d7badef9c874f9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe17ed93aa4c70a35cec1af86dcea32e63874118', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6860083409d18ccc73255aa2110e8e0121a3e5de', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4083244112545b473a2d371b69a10301eb694db9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6f3e8e29d7b241eed140483ec9662f3b384c1b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65efa4c8d84d4b4e456289b001e7838c9b4a21b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afc018349e7ce1e7e4500e7657948fb79b843e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13e3f36d140bc282855a8479db80e81e76d4c30', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6132e5dc355d1176721fb58d5924855be83fd6ee', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a5b47e05609ef4d73a5e51d60f263ed4bbb8082', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248266a80f213d7d9d533151a2093294379bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9375775c4d793a3910c9e15cb7859705a5080356', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc5eb0484a8ff458e82b843461b4f0b36ecdc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81152127ddaf0e80d47b3af2f9375556c36d0b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb20d3a95a18a22c7f3044f8863bb14abbce1a0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a0166b859381c43c31d1421bab0c84ce90fd52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac402d40f3145ffc588260f0e7db08ba664d103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32910ea758b73537bf79ec2002f33c32d07dabb5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b749db4d5f8378dd5ba1abf5ed6325e12619569', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c08868bd241c8f82e7120924e468c56cff3185c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add1ed7892e88c197faf8756fee99250a7345d9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2f808e9ddebc7b440e3df5a311868762670f6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10020344a811138759eb925c4f08692dda4eeb0a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11010b12c0c457e5c22efb5c78f01705bbdc7192', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4b0ecf0c212258ade5b38e3e1ef714f68499ac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaf8df8bf19eb7750b7d9d507615a5f1df319dc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3042f2ed10e2f41ed17cad034e6ecc670bd384b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49745a46ce7cef6e16ea2e3951945d0f5c534f80', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dbe3ed6975861bfcd425a6efb7f9b84786a419', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d73c9d3514b20eb870299d59e5b2943cade17a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a9c601375176cd296e06a2e286b6043d35dcec2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d66e01918ab83227f4d64eeb8f58718e9d4bf9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae1f8d504a8a357c4d09d0842df078722d621c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e201a3d55b3ebff97894b23534ecafc21294e423', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d839ce5d48118f98e925915f01e5368274a5c1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd6b4ea459b3907682c3f7fc06f4f9db05d9c85', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e38f796b4724b15dc3ec55d07e0b5f201e66d6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73de95813c7906ca9505a6839c565bece9350efb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e67cab3975c7279716ba998506970454540c2d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73b1fe4ca38ae0dd5bbbe896a383cb9559b103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1637ccd5dfe39a17512b45ba44bcd9ade9e47ac1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba990ef364db43eb200e5f04d6a3adcdd36c5b3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262a4ecc2478e1f3ee8ebc65e35e1f7145ea3f4b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5887ccedf81c19429913965616bbe6317da101', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb05552bf6c0d60d9732787112c78091c3c0c3e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de21e33b909ef78f437e9c893de5ea6bd49bf742', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '130c0d9c9ce1cae0eeaeb8c1327a2000eec42271', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c1042f98839936b79672aec59f90a18675819', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb88fe87b0ad0a2af091e5eb6f012009c4799ed', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f7d73625a53dde50a5640383ab2d0b04aa25ae', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345946123ddaa5d17c58cc9858637c433ef607e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c5f9672882f5800485169914973933f9a053df', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a8d529ce8fb9f6a4ce78acf19a67dd04076e00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e785d54b5680129ba101080c4ce7c2dbe5902e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1321979ee6ec5f004e3cd417cf0335dafa2668', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e519791e12af1e9f30d891dfc4d554d3b93fd7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55757024e7b905f6bf1eae7057a48598ac61e02', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5db31908babb9012fcf155b14da2a24bb537a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37cca31b1605b0647f8187e2c4ee514f6870532', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2186d74e070f9bad06db0c1ef2b49f46f6f7d43', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7f9fca129fd7d6e420af5f274f16ee3ea0b945', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70c88051d4ba8bd4a3b7cd9f43414f27896ea94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70413bc9cf96d56a3424428284e21c08def4814', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8bcf56548bbb8719d626ba6af6db2df38ad4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c1df5b6d3b373dfc3ae5e876f786e175faa482', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5849bc0402af2c3be92a4ad55cc1fc4148a1f74d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e09e83731630c03caa19cbdd069441ee1a59d810', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637606c453d14145c1d9003f9a7f4e74653db4bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed9d9a851cf821e352a9ae12d0db1eabc04f34c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab0b700f04aba3e120b0e840572f31de9f95760', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30158c0a9065520ef7226f9663289c033e82084', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ef42f0af3e7be963c5971bf27efa2ad129720', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd873ecd582353add4fcc5ed0295283b422d95d5d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8bf3a71adb8d4b1032e30704fce1b04c47a1ad', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1cbd98d25f0242950cd5ad22f016bbab9960ec', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e108adc274c85d6719fe3e61aca03682aa0b52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ddf5607e5769754309298bd15e04532753a4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594d31a2fd06e7b43ce58c32ad1dec0d6fb35df9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1940980fb00120e10e3254f3f8aa4defeee85777', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34d46b339fe9e3fbb849916a27830302a945683', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0b960edcb94bf20ab7e522c9db751cbb1eba0c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ea8ae7023c92c9ded8effd4f9efae46b785890', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72e5a98b1174794f570dde0f10a39774e58c60f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d0b425d342892218f5fbdfe4b6f4d87708d803', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c32c921aa438bcb4ddb1e9de94d0872d44ff9338', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99a316f8c11f4e28bf155b6ae5b225da036bdb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6a60773a6af9ea0cfb1311c076d8c3f4154c22', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bdea697d4bc7112f71b0e068c9df6d67eef7df6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f13ff8d25df992a2afa0a2105e869970fb4bf67', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fc1e9e4846a5fbb15722a7e3b1da1d91a19399', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a1f139227871bf4e20ea768e933e085d0a5712', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd079ca8565ed08841134daf96d08b79165f9a4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f286c73f9f47d8a9dc4e3df5e5ee91cb22134c1c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db928cb81c9e58901ea78fc610d332c3cc8b2db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d2d9ddb2307b5e3b56ce74d4f95fe682d8d1a6c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a331ffa0a7753d0bc7eb4034874fca32f29bd4db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484891e4c09afc77a5062d8269ad26dcd9a85c00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a7495d8901c24b4611cec155c2b9ee0a9cda9e3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99883731821742f2d7dbf9a2af8cd84a84b58be9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb4dd663d76d00ecdb6285c3ef70f390430c974', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b8e2c2b498b6bfa1abe2b3945dedc3e4b2272f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34798e8d2271a3eee830ddaaedc46c54f8fc0b5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fdf50e6959da89b7473395c337b231be6abf599', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa1af82a5a48f7fa627a3b3d1b6047b309187c9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023bac6242724ca148232336f64b4f7f9d3c9a23', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75bb351d1608fbe8b78226cfa00741a7c6640896', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcba69f2560efb05817697997320960bb563ed94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09d0d429948c713b91256b72b144ab1f0e7add7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c944564734be9aa46bf029cf14e6789ced95a7c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03576d1af0961137edc48adea98ed5b7a4470a19', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633cb4b33a0240072da03c01518dd61212001b10', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ad4e98c82ecbc1041b41cc77a1a053710012f2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a165b39d009b0adbd33150788f4fdd6dd864700', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce88ce2e8e160e7d7c7e17f0a9b9de7ad31abd2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b042bbacda53392004ecf3b302d0eda71071147c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db1d29b2895790b06221acf75b56c91b7526eac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1989ed2fa02f863f745b828f8a0bd3fcc42ad1ef', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bac8e289d4f072842fdebf10a19cd7dfd47934', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9c38348bf845320c88eeefdb4eb77b8bb48b61', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2b163ff874154f84f1c3671c549a044753f990', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b012d04acb78c74a281c70dc15ec14a6f5da81be', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eacacba40004c180d47cb7cbad068de4206c0474', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a4b8d28790a76c56204dca2b248bc2c2ce7166', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43cf46446b481d864a330ec652559573ddc74ee0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3b03ff023227cf7d0d13b607dc376d1c5cb45f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26df126e531ce4b87b38b758f5a86de2659eced3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4082259d159e71c4e2808fbaac130e638ed9e228', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db6c211c306066a8f69580eb45771128d35e20f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa7eadb884a73eb89a84a1367c0d39794f12b1f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb4e1cc91dc5c81e865ce426378f8b40a657386', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94a482b4f675c422b69632c2f86c6d2ff69ff61b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8506662163a081a6fb7ae4c3852e76acf0fcc8aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffef7438b56546d91020522cfaf42283339da9a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed07199b677bd9f0cb5ce67c7b971d2d65aa4d1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7efb898619ea3603bdc0a145ff93c7601d8ff4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f0f05c6adf996be8b55330d973fd58d121b2ec4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4c64fb95242bae7e19c330d04807aad46c5f8c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a1faaddec11c1990549ffd637cc19ed1266bfc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e824447ae21fba8738c49e9963c39fa9e5b0db8b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '015d7174ec174eb0ab0eac57cab7ef8e503ea467', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda44e45c5aed765ce83a87604a2f8f56cf89225', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0469e63208bdf512da6540171f23cdb6c4e1ac9f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb67d44be5a73495adc90a3b172111310ceca7d6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb68dcdb2d83fcf572074aef06aab81851cfbca6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2343423694354ac15403147c2d130212ebca950d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e5ced99cd1afffdbcce0e24f1e4a8771b7c716', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e0b91c64f77280d40cfe0bf2b91b9db2f13e9b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8b52ff7bc3e7eddc0380b77d249c2e70553dca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0567d69293ad80b6adc9dfb1052012025282852f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6299e7ca37fd66207e806f167c054dc7d8b9340', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5e28e0d4449eddfa2f5895bcf9389b2ef73f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a397534f1fbd05db808218860f28ba11ba4744a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46a95caa43cd79c911d6deab7c8e4c9f3d9e32d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55a8cf3cac293c90abfbaff2da8fcf75f479745', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '912d0e79ef428847a64ae485ca746ca14c02cfbf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '063cc1b1b6501a7deea86d645393a1e92b1ecf38', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6c4d8d6eab53c7a80bbd8ae82708bd18bc1cfd41', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '832437627157de119cc22fa8a5ec3614bd332de7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb0e8816bc870f6e033479ff1b16894e9b232d54', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8483c81da73fb7c5b21aebc5c6d155fcf617ab54', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '078b24235adf36c875cffa1779abb5d29bca4f50', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88ff36620f27c63aa6b7d4479cb6001be8724705', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4a6a9e3681750f8995c0c1884337013267546508', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c150cdc8bf5483c6bd1a39bf79d5b709f25c4f2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '65ee6e9f38050131c8541045188b46c65d59b045', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d4c779ad89c18435a6944ecf904978ea1d27b29', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'afb32e45795ab4cdbe65fb853fb914528c538983', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1edfafe67e3501d9ce231cb75bd3b81e687e24d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '18221be5b6a1a0640f536c969614230185170779', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0618169fecfd8e81838b18db8e24ad158b1836af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b954738564c51aa2d5e03fc30d7b2eaeccde5fba', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6caabc5381c7c858ae599c5dd672d014862de475', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29825a096cdc33ab9d1ca295e5735b672cfaf57b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e46472894610b4dd96113e63616a23da4424f41a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a680eeb8027e4180780dd87714a914bf0645eb78', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15063a0246f689388885410c0938c85b604f4996', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '619d40d6e22d2e3bfd794e0412147f51187aa105', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad3eb603d2034c1a5a4ae372d966f1bb5e6455a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc62d020f51fa3082249abb48d16a00c7df5ff46', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51bb90c8b800d45b8e4cb6568f6a197e4cd66be', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dc10a55a87fae9034efbf00ede8cc04ff39c405', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '048cd01f1409ffc7c37c6c4992fd3dcc69edfe9f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbd3de07c5273c474ca54f865f4ade4857a8273f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e17c5c8e8dfb1fc9d812776f3f3db225e80e759', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89803661245a8561a9d07c949ab922742b44359', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfb38b9cb04f971741572a4fe609d7864c5a662', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966ba9ab3dc41c8eadc89c1b8effcaa0e708d405', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}]",Sparsh Agrawal,55937724,,User,,26,,37,93
700764919,Fix #3318: Add check to ensure all todos are addressed corresponding to the closed issue,"<!--
  - Thanks for submitting code to Oppia! Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## Explanation
Fixes #3318
<!--
  - Explain what your PR does. If this PR fixes an existing bug, please include
  - ""Fixes #bugnum:"" in the explanation so that GitHub can auto-close the issue
  - when this PR is merged.
  -->

## Checklist
<!-- Please tick the relevant boxes by putting an ""x"" in them. -->
- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The PR explanation includes the words ""Fixes #bugnum: ..."" (or ""Fixes part of #bugnum"" if the PR only partially fixes an issue).
- [x] The PR follows the [style guide](https://github.com/oppia/oppia-android/wiki/Coding-style-guide).
- [x] The PR does not contain any unnecessary auto-generated code from Android Studio.
- [x] The PR is made from a branch that's **not** called ""develop"".
- [x] The PR is made from a branch that is up-to-date with ""develop"".
- [x] The PR's branch is based on ""develop"" and not on any other branch.
- [x] The PR is **assigned** to an appropriate reviewer in both the **Assignees** and the **Reviewers** sections.
",True,3629,https://api.github.com/repos/oppia/oppia-android/pulls/3629,https://github.com/oppia/oppia-android/pull/3629,closed,652,0,9,267,6,53,0,1,[],2021-07-31 20:33:59+00:00,2021-08-16 21:18:29+00:00,1385070.0,"16 days, 0:44:30","[{'comment_id': 686505753, 'comment_body': 'I suggest instead framing the name, documentation, and file to be based around issue workflows, instead. One specific example is for closed issues, but we may add more in the future (generic buckets for actions workflows are preferred over more specific ones).', 'comment_created': datetime.datetime(2021, 8, 11, 5, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686505856, 'comment_body': 'Should be renamed to be specific to the check in question.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686506415, 'comment_body': 'Is todo_list.txt the correct name for this file? It seems more like it contains the contents for an issue comment.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686506663, 'comment_body': 'This should be named specifically for TODOs (ditto for the class & Bazel target names).', 'comment_created': datetime.datetime(2021, 8, 11, 5, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686506787, 'comment_body': 'Ditto here--this is specific to TODO issues.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686507821, 'comment_body': 'Small nit, but maybe use a real hash of the develop branch (can be shortened).', 'comment_created': datetime.datetime(2021, 8, 11, 5, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686509814, 'comment_body': 'Nit, but I suggest adding the ``/`` here instead of the URL variable so that this string reads a bit more like a URL.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686510026, 'comment_body': '```suggestion\r\n * Logs the closed issue check failures.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 5, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686512110, 'comment_body': 'This already seems verified in the previous test--suggest omitting it here & focusing on the outcome specific to the behavior corresponding to this test.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686512443, 'comment_body': '```suggestion\r\n      File(""${retrieveTestFilesDirectoryPath()}/todo_list.txt"").readLines()\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 5, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686514080, 'comment_body': '```suggestion\r\n    assertThat(fileContentList).containsExactly(\r\n      ""The issue is reopened because of the following unresolved TODOs:"",\r\n      ""https://github.com/oppia/oppia-android/blob/abmzuyt/TempFile1.kt#L1"",\r\n      ""https://github.com/oppia/oppia-android/blob/abmzuyt/TempFile2.bazel#L3"",\r\n      ""https://github.com/oppia/oppia-android/blob/abmzuyt/TempFile3.xml#L1"",\r\n      ""https://github.com/oppia/oppia-android/blob/abmzuyt/TempFile3.xml#L4""\r\n    ).inOrder()\r\n```\r\n\r\nBit cleaner & idiomatic.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686515607, 'comment_body': 'This seems backwards--could we use a passing indicator for success instead of a failing indicator?', 'comment_created': datetime.datetime(2021, 8, 11, 5, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686516529, 'comment_body': ""The '85' is a magic value. Can we use something more deterministic to ignore the hash?"", 'comment_created': datetime.datetime(2021, 8, 11, 5, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686518482, 'comment_body': 'Ditto here--suggest moving the last ``/`` to the later comments for slightly better readability (super nit).', 'comment_created': datetime.datetime(2021, 8, 11, 5, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686519215, 'comment_body': 'Could we output these as a markdown list, instead, or does that mess up the automatic previewing that GitHub does?', 'comment_created': datetime.datetime(2021, 8, 11, 5, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686519930, 'comment_body': 'Nice test case.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686520070, 'comment_body': ""Can you please also add a test case for this scenario to make sure it's working as expected?"", 'comment_created': datetime.datetime(2021, 8, 11, 5, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686520323, 'comment_body': 'Related to an earlier comment, but I suggest having a distinct test for the sha logic vs. hiding it as part of this test.', 'comment_created': datetime.datetime(2021, 8, 11, 5, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 686763199, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686763265, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686763423, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686763492, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686763617, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686764358, 'comment_body': 'We are using a 40 char hash in the workflow, so I think it would be really better if we also use it here too.\r\nDone based on this.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686766838, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686766943, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686767034, 'comment_body': 'Thanks.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686767590, 'comment_body': 'Ah! I tried and it looks like it messes up the automatic previewing.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686767674, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686771620, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686771695, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686771802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686772268, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686772488, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686772661, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 686774824, 'comment_body': ""Sorry I din't catch this one. Can you please explain it a bit. Currently if this fails then we are not adding a new comment in the workflow."", 'comment_created': datetime.datetime(2021, 8, 11, 12, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688284892, 'comment_body': ""```suggestion\r\n    name: Closed TODO Issue Check\r\n```\r\n\r\n(Let's try to be as specific as we can in this context)."", 'comment_created': datetime.datetime(2021, 8, 13, 6, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688286348, 'comment_body': '```suggestion\r\n  // Here, we are adding 40 to account for the commit SHA-1 hash length (for context: https://en.wikipedia.org/wiki/SHA-1).\r\n```\r\n\r\nThis helps clarify the correctness behind the magic number.', 'comment_created': datetime.datetime(2021, 8, 13, 6, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688306618, 'comment_body': '```suggestion\r\n  todoListFile.appendText(""The issue is reopened because of the following unresolved TODOs:\\n"")\r\n```\r\n\r\nCan be done in one line. Ditto below.', 'comment_created': datetime.datetime(2021, 8, 13, 7, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688307073, 'comment_body': 'Nit: break at the space instead of the first digit of the hash.', 'comment_created': datetime.datetime(2021, 8, 13, 7, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688307961, 'comment_body': '```suggestion\r\n   * This is the case when no comment is present on the issue. In this case the GitHub API produces\r\n   * an empty comment body.\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 7, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688309246, 'comment_body': ""The new name actually seems backwards to me. What do you think about 'TodoIssueResolvedCheck' instead? Ditto for the other one & all corresponding doc comments and BUILD targets."", 'comment_created': datetime.datetime(2021, 8, 13, 7, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688312063, 'comment_body': 'As discussed over chat, what I mean is that it seems like checks should pass if their expected state is achieved (in this case, that the comment matches & no action needs to take place). Failures should occur when the non-default state is encountered (i.e. that a new comment is needed). Reversing this pass/fail in the script would be more predictable behavior, I think.', 'comment_created': datetime.datetime(2021, 8, 13, 7, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688675821, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688675894, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688675976, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688676041, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688676098, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688676236, 'comment_body': 'Sounds good. Done.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688676417, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688852182, 'comment_body': ""```suggestion\r\n *   bazel run //scripts:todo_issue_resolved_check -- $(pwd)\r\n *   677ff8361b4bde52f695ceb91aa1aab36932a94fe\r\n```\r\n\r\n(prev comment wasn't resolved)."", 'comment_created': datetime.datetime(2021, 8, 14, 2, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 688855850, 'comment_body': 'Ah! 6 is actuay the example issue number. ', 'comment_created': datetime.datetime(2021, 8, 14, 3, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}, {'comment_id': 688865485, 'comment_body': 'Now, I have broken this down before 6 so as to avoid confusion. PTAL.', 'comment_created': datetime.datetime(2021, 8, 14, 5, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Sparsh1212', 'type': 'User'}]","[{'commit_sha': '51e64aa432702b74d10adc4450134f7bc0a3626f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f440a33e6036b742a58f68b12d0adc704764c10b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255773d7d5b0a76f1d33071ae8f7c9346efac04c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2a1783049b815943654248b57521c7edeeb416', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c5f6f4ef974654a141140564420898247e2a00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163310e09894c653122d2e0512dd47b9b6f087e1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6131c1da8e22181f0f84d86eeaafd6229c4a1395', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb5fc5515e370659911e037d9456d9afc77cbfb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412077587c9f96712a7b68d7294bf0b68dc346b0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c98cf2f4c08b63f3e477b5a17398da8472e92e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1762c326988b3aacd184782f127d1b833e84a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5229ac9ab27b4f9b37a6cca053d789de06b33ea5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e1d24aa9b17a2bc343df48ab91ad6f875059ec9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08cf6c3b34946f1f525ea4275c4f0001c071ed31', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72e419b955751cd2be7c317b9ed74a63b4fed03', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8472abab84b36104249f9490b5c2ce7f98eb75a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe42a64d41cc7fd1fe3ddfc1c5e90a6ae767191b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e12f24752a17fed3abbfdb3171dc5516958235fd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdb165e67558c7503b780be7d432d60cf8d2431', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf2726026e93fc00aad537b2fd3410c587f8286', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3424be79267cc7bb8ce66354a15e9ee523011b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381853cd318e67681b24fcb4db203017eff05b75', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59494f75978df055aacee7645301063869d88ca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293ab92579fac6263fb3047e43174c05103456b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f393e1ed626bded942544d8c8afabb9db5a6f142', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d607edd524bf80c625a447b13de9b4cbf6a06f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01a238b9a361ac0f9da3667908bb081e89268c3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cb290d5faf9225cfe9c007f35daa77955fd99f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4ac03ce0f279e5600241188b389a09106653b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b07156e5e36e8855538f0d193ccef117d3e724', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feacee172a50f57fee990548a33aa1b6833a3e5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fbc73d451b93fb2272781afe2ae4318437d844', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c0bfdcbce2a52ca0ccc128207acb19ff7fb37f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbf66098cb7c357a425e5f1b84bbf3512256272', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56cf6d012e779afc4b18bc0ee8ed8e7d7613246c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3c47d4a94832767db398b669c486aaf7241ca1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e64dc566fdb74ca1a1a28b8f25aebadbb64065', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2f287d6b4071487f05836150d7c8f47f19593e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36033efbe9f03ac83ff7e87ce036e52beff0e527', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161f8ecf4d45094523fcfd37d95d15b82d8768a6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996694b5c7671859ae139113c89cca4875404d4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8740a48fee209a8c9f278437a9efc9e874bd09cb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6671857acc36b0c9c2b4333b8423c75dd64b5b09', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11963c8424afa6494a68a964e174c7794890d3c0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8aa5e499345b0bbc634d6dbd4e3d83d1c033664', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b784525daf4a3e3d71572bfc7d7badef9c874f9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe17ed93aa4c70a35cec1af86dcea32e63874118', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6860083409d18ccc73255aa2110e8e0121a3e5de', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4083244112545b473a2d371b69a10301eb694db9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6f3e8e29d7b241eed140483ec9662f3b384c1b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65efa4c8d84d4b4e456289b001e7838c9b4a21b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afc018349e7ce1e7e4500e7657948fb79b843e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13e3f36d140bc282855a8479db80e81e76d4c30', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6132e5dc355d1176721fb58d5924855be83fd6ee', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a5b47e05609ef4d73a5e51d60f263ed4bbb8082', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f248266a80f213d7d9d533151a2093294379bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9375775c4d793a3910c9e15cb7859705a5080356', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94cc5eb0484a8ff458e82b843461b4f0b36ecdc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81152127ddaf0e80d47b3af2f9375556c36d0b4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb20d3a95a18a22c7f3044f8863bb14abbce1a0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a0166b859381c43c31d1421bab0c84ce90fd52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac402d40f3145ffc588260f0e7db08ba664d103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32910ea758b73537bf79ec2002f33c32d07dabb5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b749db4d5f8378dd5ba1abf5ed6325e12619569', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c08868bd241c8f82e7120924e468c56cff3185c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add1ed7892e88c197faf8756fee99250a7345d9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2f808e9ddebc7b440e3df5a311868762670f6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10020344a811138759eb925c4f08692dda4eeb0a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11010b12c0c457e5c22efb5c78f01705bbdc7192', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4b0ecf0c212258ade5b38e3e1ef714f68499ac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaf8df8bf19eb7750b7d9d507615a5f1df319dc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3042f2ed10e2f41ed17cad034e6ecc670bd384b1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49745a46ce7cef6e16ea2e3951945d0f5c534f80', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dbe3ed6975861bfcd425a6efb7f9b84786a419', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d73c9d3514b20eb870299d59e5b2943cade17a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a9c601375176cd296e06a2e286b6043d35dcec2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d66e01918ab83227f4d64eeb8f58718e9d4bf9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cae1f8d504a8a357c4d09d0842df078722d621c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e201a3d55b3ebff97894b23534ecafc21294e423', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d839ce5d48118f98e925915f01e5368274a5c1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd6b4ea459b3907682c3f7fc06f4f9db05d9c85', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e38f796b4724b15dc3ec55d07e0b5f201e66d6a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73de95813c7906ca9505a6839c565bece9350efb', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e67cab3975c7279716ba998506970454540c2d2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a73b1fe4ca38ae0dd5bbbe896a383cb9559b103', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1637ccd5dfe39a17512b45ba44bcd9ade9e47ac1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba990ef364db43eb200e5f04d6a3adcdd36c5b3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262a4ecc2478e1f3ee8ebc65e35e1f7145ea3f4b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5887ccedf81c19429913965616bbe6317da101', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb05552bf6c0d60d9732787112c78091c3c0c3e', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de21e33b909ef78f437e9c893de5ea6bd49bf742', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '130c0d9c9ce1cae0eeaeb8c1327a2000eec42271', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56c1042f98839936b79672aec59f90a18675819', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb88fe87b0ad0a2af091e5eb6f012009c4799ed', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f7d73625a53dde50a5640383ab2d0b04aa25ae', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345946123ddaa5d17c58cc9858637c433ef607e4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c5f9672882f5800485169914973933f9a053df', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a8d529ce8fb9f6a4ce78acf19a67dd04076e00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e785d54b5680129ba101080c4ce7c2dbe5902e6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1321979ee6ec5f004e3cd417cf0335dafa2668', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e519791e12af1e9f30d891dfc4d554d3b93fd7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55757024e7b905f6bf1eae7057a48598ac61e02', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5db31908babb9012fcf155b14da2a24bb537a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37cca31b1605b0647f8187e2c4ee514f6870532', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2186d74e070f9bad06db0c1ef2b49f46f6f7d43', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7f9fca129fd7d6e420af5f274f16ee3ea0b945', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b70c88051d4ba8bd4a3b7cd9f43414f27896ea94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70413bc9cf96d56a3424428284e21c08def4814', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8bcf56548bbb8719d626ba6af6db2df38ad4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31c1df5b6d3b373dfc3ae5e876f786e175faa482', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5849bc0402af2c3be92a4ad55cc1fc4148a1f74d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e09e83731630c03caa19cbdd069441ee1a59d810', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637606c453d14145c1d9003f9a7f4e74653db4bd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed9d9a851cf821e352a9ae12d0db1eabc04f34c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab0b700f04aba3e120b0e840572f31de9f95760', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30158c0a9065520ef7226f9663289c033e82084', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ef42f0af3e7be963c5971bf27efa2ad129720', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd873ecd582353add4fcc5ed0295283b422d95d5d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de8bf3a71adb8d4b1032e30704fce1b04c47a1ad', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1cbd98d25f0242950cd5ad22f016bbab9960ec', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91e108adc274c85d6719fe3e61aca03682aa0b52', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ddf5607e5769754309298bd15e04532753a4a2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594d31a2fd06e7b43ce58c32ad1dec0d6fb35df9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1940980fb00120e10e3254f3f8aa4defeee85777', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34d46b339fe9e3fbb849916a27830302a945683', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0b960edcb94bf20ab7e522c9db751cbb1eba0c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ea8ae7023c92c9ded8effd4f9efae46b785890', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72e5a98b1174794f570dde0f10a39774e58c60f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d0b425d342892218f5fbdfe4b6f4d87708d803', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c32c921aa438bcb4ddb1e9de94d0872d44ff9338', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99a316f8c11f4e28bf155b6ae5b225da036bdb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af6a60773a6af9ea0cfb1311c076d8c3f4154c22', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bdea697d4bc7112f71b0e068c9df6d67eef7df6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f13ff8d25df992a2afa0a2105e869970fb4bf67', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fc1e9e4846a5fbb15722a7e3b1da1d91a19399', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a1f139227871bf4e20ea768e933e085d0a5712', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd079ca8565ed08841134daf96d08b79165f9a4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f286c73f9f47d8a9dc4e3df5e5ee91cb22134c1c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db928cb81c9e58901ea78fc610d332c3cc8b2db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d2d9ddb2307b5e3b56ce74d4f95fe682d8d1a6c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a331ffa0a7753d0bc7eb4034874fca32f29bd4db', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484891e4c09afc77a5062d8269ad26dcd9a85c00', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a7495d8901c24b4611cec155c2b9ee0a9cda9e3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99883731821742f2d7dbf9a2af8cd84a84b58be9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb4dd663d76d00ecdb6285c3ef70f390430c974', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b8e2c2b498b6bfa1abe2b3945dedc3e4b2272f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34798e8d2271a3eee830ddaaedc46c54f8fc0b5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fdf50e6959da89b7473395c337b231be6abf599', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa1af82a5a48f7fa627a3b3d1b6047b309187c9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023bac6242724ca148232336f64b4f7f9d3c9a23', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75bb351d1608fbe8b78226cfa00741a7c6640896', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcba69f2560efb05817697997320960bb563ed94', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09d0d429948c713b91256b72b144ab1f0e7add7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c944564734be9aa46bf029cf14e6789ced95a7c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03576d1af0961137edc48adea98ed5b7a4470a19', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633cb4b33a0240072da03c01518dd61212001b10', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ad4e98c82ecbc1041b41cc77a1a053710012f2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a165b39d009b0adbd33150788f4fdd6dd864700', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce88ce2e8e160e7d7c7e17f0a9b9de7ad31abd2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b042bbacda53392004ecf3b302d0eda71071147c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db1d29b2895790b06221acf75b56c91b7526eac', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1989ed2fa02f863f745b828f8a0bd3fcc42ad1ef', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bac8e289d4f072842fdebf10a19cd7dfd47934', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9c38348bf845320c88eeefdb4eb77b8bb48b61', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2b163ff874154f84f1c3671c549a044753f990', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b012d04acb78c74a281c70dc15ec14a6f5da81be', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eacacba40004c180d47cb7cbad068de4206c0474', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a4b8d28790a76c56204dca2b248bc2c2ce7166', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43cf46446b481d864a330ec652559573ddc74ee0', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3b03ff023227cf7d0d13b607dc376d1c5cb45f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26df126e531ce4b87b38b758f5a86de2659eced3', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4082259d159e71c4e2808fbaac130e638ed9e228', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db6c211c306066a8f69580eb45771128d35e20f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa7eadb884a73eb89a84a1367c0d39794f12b1f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb4e1cc91dc5c81e865ce426378f8b40a657386', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94a482b4f675c422b69632c2f86c6d2ff69ff61b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8506662163a081a6fb7ae4c3852e76acf0fcc8aa', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffef7438b56546d91020522cfaf42283339da9a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed07199b677bd9f0cb5ce67c7b971d2d65aa4d1', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7efb898619ea3603bdc0a145ff93c7601d8ff4f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f0f05c6adf996be8b55330d973fd58d121b2ec4', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4c64fb95242bae7e19c330d04807aad46c5f8c', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a1faaddec11c1990549ffd637cc19ed1266bfc', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e824447ae21fba8738c49e9963c39fa9e5b0db8b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '015d7174ec174eb0ab0eac57cab7ef8e503ea467', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda44e45c5aed765ce83a87604a2f8f56cf89225', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0469e63208bdf512da6540171f23cdb6c4e1ac9f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb67d44be5a73495adc90a3b172111310ceca7d6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb68dcdb2d83fcf572074aef06aab81851cfbca6', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2343423694354ac15403147c2d130212ebca950d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e5ced99cd1afffdbcce0e24f1e4a8771b7c716', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e0b91c64f77280d40cfe0bf2b91b9db2f13e9b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8b52ff7bc3e7eddc0380b77d249c2e70553dca', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0567d69293ad80b6adc9dfb1052012025282852f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6299e7ca37fd66207e806f167c054dc7d8b9340', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5e28e0d4449eddfa2f5895bcf9389b2ef73f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a397534f1fbd05db808218860f28ba11ba4744a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46a95caa43cd79c911d6deab7c8e4c9f3d9e32d', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55a8cf3cac293c90abfbaff2da8fcf75f479745', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '912d0e79ef428847a64ae485ca746ca14c02cfbf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '063cc1b1b6501a7deea86d645393a1e92b1ecf38', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6c4d8d6eab53c7a80bbd8ae82708bd18bc1cfd41', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '832437627157de119cc22fa8a5ec3614bd332de7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb0e8816bc870f6e033479ff1b16894e9b232d54', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8483c81da73fb7c5b21aebc5c6d155fcf617ab54', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '357e0d8e677f7e9dd1a3dcc49f6e6ab0cfcc045b', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7a647439cd1c6d731a75e6aaa3b600ea1c4ae48', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '078b24235adf36c875cffa1779abb5d29bca4f50', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7179c06275e56f00d48bcb426345c476468d88cd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88ff36620f27c63aa6b7d4479cb6001be8724705', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4a6a9e3681750f8995c0c1884337013267546508', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c150cdc8bf5483c6bd1a39bf79d5b709f25c4f2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '10349f333477c79d6856c3cce582f718fee0963f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65ee6e9f38050131c8541045188b46c65d59b045', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6fbbf7d74ede93ae935fd4b9d76bb65bee424cde', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95feb07a881a6dbd270bc5d712c3ffa4ca84c0cd', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee6556db6356a4c25d30109109e8d5591d795a5', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d4c779ad89c18435a6944ecf904978ea1d27b29', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'afb32e45795ab4cdbe65fb853fb914528c538983', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1edfafe67e3501d9ce231cb75bd3b81e687e24d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '18221be5b6a1a0640f536c969614230185170779', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0618169fecfd8e81838b18db8e24ad158b1836af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b954738564c51aa2d5e03fc30d7b2eaeccde5fba', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6caabc5381c7c858ae599c5dd672d014862de475', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d0d8f83f201946754285387a8303085293a0cc2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29825a096cdc33ab9d1ca295e5735b672cfaf57b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '926c116db1d21516286cdb89fe5653a15c07d420', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e46472894610b4dd96113e63616a23da4424f41a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a680eeb8027e4180780dd87714a914bf0645eb78', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15063a0246f689388885410c0938c85b604f4996', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebdfaaffbe3ec4deb9a10420ace8173108f512a', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '619d40d6e22d2e3bfd794e0412147f51187aa105', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad3eb603d2034c1a5a4ae372d966f1bb5e6455a7', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc62d020f51fa3082249abb48d16a00c7df5ff46', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51bb90c8b800d45b8e4cb6568f6a197e4cd66be', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dc10a55a87fae9034efbf00ede8cc04ff39c405', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '048cd01f1409ffc7c37c6c4992fd3dcc69edfe9f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbd3de07c5273c474ca54f865f4ade4857a8273f', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dec95ee0e8c176a479e5ac7056407d626decb282', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf48dcf81d0880030259e42740df4d785cfc6196', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e17c5c8e8dfb1fc9d812776f3f3db225e80e759', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d02652487e42f25a454962f18542c1b0bdf5af', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef02718ad9e5d3dd8acbf1cd16acaf2f575cf13', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89803661245a8561a9d07c949ab922742b44359', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8f84e3f055a9066e23f6e2c7628c1d0cbfb7778', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfb38b9cb04f971741572a4fe609d7864c5a662', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966ba9ab3dc41c8eadc89c1b8effcaa0e708d405', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb277d0895f740658a2993e2ec55494fc3bceb2', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f28a03a56d8345504db5ec01a9ae4b0c50a85e9', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281f64dd4d920d3fdc0c4129cfbc8c3c5b8d9298', 'committer_username': 'Sparsh1212', 'committer_name': 'Sparsh Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 29, 4, 42, 23, tzinfo=datetime.timezone.utc)}]",Sparsh Agrawal,55937724,,User,,26,,37,93

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
148093817,oppia-android,oppia/oppia-android,Kotlin,506,306,21,172,2038,498,140,17,"[{'id': 712653115, 'number': 3678, 'closed': datetime.datetime(2021, 8, 17, 6, 26, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 22, 15, 46, tzinfo=datetime.timezone.utc), 'time_taken': 288637.0, 'time_delta': '3 days, 8:10:37', 'additions': 271, 'deletions': 139, 'state': 'closed'}, {'id': 704992095, 'number': 3648, 'closed': datetime.datetime(2021, 8, 6, 8, 19, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 20, 11, 52, tzinfo=datetime.timezone.utc), 'time_taken': 43668.0, 'time_delta': '12:07:48', 'additions': 39, 'deletions': 215, 'state': 'closed'}, {'id': 700764919, 'number': 3629, 'closed': datetime.datetime(2021, 8, 16, 21, 18, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 31, 20, 33, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1385070.0, 'time_delta': '16 days, 0:44:30', 'additions': 652, 'deletions': 0, 'state': 'closed'}, {'id': 699839522, 'number': 3610, 'closed': datetime.datetime(2021, 8, 6, 2, 58, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 21, 2, 14, tzinfo=datetime.timezone.utc), 'time_taken': 626205.0, 'time_delta': '7 days, 5:56:45', 'additions': 40, 'deletions': 49, 'state': 'closed'}, {'id': 693855627, 'number': 3508, 'closed': datetime.datetime(2021, 8, 16, 18, 26, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 21, 17, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2322568.0, 'time_delta': '26 days, 21:09:28', 'additions': 2306, 'deletions': 2, 'state': 'closed'}, {'id': 691955773, 'number': 3499, 'closed': datetime.datetime(2021, 7, 30, 10, 40, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 16, 27, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1102402.0, 'time_delta': '12 days, 18:13:22', 'additions': 2308, 'deletions': 216, 'state': 'closed'}, {'id': 678284963, 'number': 3375, 'closed': datetime.datetime(2021, 6, 29, 20, 50, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 6, 20, 48, tzinfo=datetime.timezone.utc), 'time_taken': 311375.0, 'time_delta': '3 days, 14:29:35', 'additions': 1031, 'deletions': 103, 'state': 'closed'}, {'id': 674402195, 'number': 3352, 'closed': datetime.datetime(2021, 7, 29, 18, 22, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 9, 55, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3313673.0, 'time_delta': '38 days, 8:27:53', 'additions': 807, 'deletions': 6, 'state': 'closed'}, {'id': 673680703, 'number': 3343, 'closed': datetime.datetime(2021, 7, 9, 0, 41, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 19, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1746987.0, 'time_delta': '20 days, 5:16:27', 'additions': 1014, 'deletions': 1, 'state': 'closed'}, {'id': 673559545, 'number': 3341, 'closed': datetime.datetime(2021, 7, 8, 22, 4, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 15, 19, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1752312.0, 'time_delta': '20 days, 6:45:12', 'additions': 464, 'deletions': 0, 'state': 'closed'}, {'id': 673214576, 'number': 3340, 'closed': datetime.datetime(2021, 7, 8, 21, 13, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 6, 51, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1779755.0, 'time_delta': '20 days, 14:22:35', 'additions': 988, 'deletions': 161, 'state': 'closed'}, {'id': 669656491, 'number': 3328, 'closed': datetime.datetime(2021, 6, 18, 6, 52, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 15, 17, 20, tzinfo=datetime.timezone.utc), 'time_taken': 315311.0, 'time_delta': '3 days, 15:35:11', 'additions': 513, 'deletions': 0, 'state': 'closed'}, {'id': 632466321, 'number': 3173, 'closed': datetime.datetime(2021, 5, 13, 4, 23, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 7, 9, 36, 40, tzinfo=datetime.timezone.utc), 'time_taken': 499600.0, 'time_delta': '5 days, 18:46:40', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 621074523, 'number': 3114, 'closed': datetime.datetime(2021, 5, 7, 8, 45, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 13, 5, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1280409.0, 'time_delta': '14 days, 19:40:09', 'additions': 342, 'deletions': 185, 'state': 'closed'}, {'id': 619902446, 'number': 3107, 'closed': datetime.datetime(2021, 6, 29, 18, 35, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 21, 6, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 6004038.0, 'time_delta': '69 days, 11:47:18', 'additions': 65, 'deletions': 14, 'state': 'closed'}, {'id': 604498710, 'number': 3030, 'closed': datetime.datetime(2021, 6, 9, 20, 5, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 21, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 6128280.0, 'time_delta': '70 days, 22:18:00', 'additions': 61, 'deletions': 39, 'state': 'closed'}, {'id': 597901619, 'number': 2965, 'closed': datetime.datetime(2021, 3, 30, 21, 48, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 22, 10, 44, 58, tzinfo=datetime.timezone.utc), 'time_taken': 731017.0, 'time_delta': '8 days, 11:03:37', 'additions': 544, 'deletions': 396, 'state': 'closed'}, {'id': 597295876, 'number': 2957, 'closed': datetime.datetime(2021, 3, 22, 10, 47, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 20, 14, 49, 31, tzinfo=datetime.timezone.utc), 'time_taken': 158305.0, 'time_delta': '1 day, 19:58:25', 'additions': 24, 'deletions': 0, 'state': 'closed'}, {'id': 586866337, 'number': 2856, 'closed': datetime.datetime(2021, 3, 21, 1, 1, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 15, 27, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1071188.0, 'time_delta': '12 days, 9:33:08', 'additions': 76, 'deletions': 40, 'state': 'closed'}, {'id': 578179301, 'number': 2750, 'closed': datetime.datetime(2021, 2, 25, 10, 50, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 23, 6, 7, 42, tzinfo=datetime.timezone.utc), 'time_taken': 189750.0, 'time_delta': '2 days, 4:42:30', 'additions': 148, 'deletions': 1, 'state': 'closed'}, {'id': 573054007, 'number': 2720, 'closed': datetime.datetime(2021, 2, 17, 12, 49, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 14, 7, 53, 41, tzinfo=datetime.timezone.utc), 'time_taken': 276968.0, 'time_delta': '3 days, 4:56:08', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 572436295, 'number': 2701, 'closed': datetime.datetime(2021, 2, 24, 7, 57, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 10, 55, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1026111.0, 'time_delta': '11 days, 21:01:51', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 572407921, 'number': 2699, 'closed': datetime.datetime(2021, 2, 24, 7, 57, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 10, 5, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1029133.0, 'time_delta': '11 days, 21:52:13', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 569712328, 'number': 2656, 'closed': datetime.datetime(2021, 2, 23, 7, 49, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 8, 19, 22, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1254387.0, 'time_delta': '14 days, 12:26:27', 'additions': 158, 'deletions': 1, 'state': 'closed'}, {'id': 568815388, 'number': 2645, 'closed': datetime.datetime(2021, 2, 8, 9, 19, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 16, 41, 21, tzinfo=datetime.timezone.utc), 'time_taken': 146270.0, 'time_delta': '1 day, 16:37:50', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
