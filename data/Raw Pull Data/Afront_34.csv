pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
444243595,Add sampling option for arrays,,True,323,https://api.github.com/repos/ruby/rbs/pulls/323,https://github.com/ruby/rbs/pull/323,closed,129,19,7,6,2,4,0,0,[],2020-07-04 05:51:18+00:00,2020-07-11 06:23:20+00:00,606722.0,"7 days, 0:32:02","[{'comment_id': 449743040, 'comment_body': 'Having only `RBS_TEST_NO_SAMPLING` would work fine (without `RBS_TEST_ABC_SAMPLE`).', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743099, 'comment_body': 'Changing the keyword name fro `no_sample:` would be less confusing.', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743239, 'comment_body': ""I'm not sure if extracting the _test with sampling_ to a method makes sense.\r\nI think the `Hash` sampling would be like:\r\n\r\n```rb\r\nval.keys.sample(size).all? {|k| v = val[k]; value(...) }\r\n```\r\n\r\nWhich cannot be used with the `values` method.\r\n\r\nI'd like to suggest that trying writing sampling for `Hash` and then do refactoring."", 'comment_created': datetime.datetime(2020, 7, 4, 5, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 453159041, 'comment_body': '@Afront This is not good... We need a test for `#succ`, not `+1`. ', 'comment_created': datetime.datetime(2020, 7, 11, 5, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '0065e624e98903a92353b9fa6386591b2736ce79', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b4610ed49f8dc217109df5a91352c9b80c64ccc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91b82e6a0527db38c1f4b2333843aae6a98e07f', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea443ab16f203dcb3f8a2b9d9a0526975ab9794', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612b3bc1269f3e6efbaed97b8b55b7e4b4a6f225', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883e1b77ce80c00a8d2e5cdbd0c33ffaca4c37fc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
449486233,Add sample size option,This PR replaces `RBS_TEST_NO_SAMPLE` with an option to change the amount of values in a collection to be type-checked called `RBS_TEST_SAMPLE_SIZE`.,True,336,https://api.github.com/repos/ruby/rbs/pulls/336,https://github.com/ruby/rbs/pull/336,closed,156,57,12,1,7,19,0,0,[],2020-07-15 13:36:35+00:00,2020-07-28 06:39:25+00:00,1098170.0,"12 days, 17:02:50","[{'comment_id': 458606487, 'comment_body': 'No `Default`, right?', 'comment_created': datetime.datetime(2020, 7, 22, 7, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458606860, 'comment_body': 'Make the `sample_size` a required keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607146, 'comment_body': 'Make `sample_size` a required keyword here too.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607551, 'comment_body': 'Same here about optional keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607814, 'comment_body': 'Use `sample_size` method instead of instance variable.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608177, 'comment_body': 'The test name should be `SetupHelperTest`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608445, 'comment_body': 'This is a nitpick but you need two spaces before `include`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608881, 'comment_body': '`sample_size: 100` or something like this.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458609748, 'comment_body': 'These `begin`s are useless.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610213, 'comment_body': 'You can clean up the tests because you need only two cases, `nil` and an Integer.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610912, 'comment_body': ""I don't think you need these helpers. We can skip testing these errors."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611076, 'comment_body': ""I'm not sure if we need this helper..."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611436, 'comment_body': 'This `assert` is meaningless. What do you want to test with these assertions?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611885, 'comment_body': ""I don't think we need to extract this module. Define the helper methods in `RuntimeTestTest`."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458615486, 'comment_body': 'I think we can organize the test helpers as follows:\r\n\r\n* `def run_runtime_test(other_env:)` to run the test and returns `[err, status]`\r\n* `def assert_test_success(other_env = {})` which asserts `assert_operator status, :success?` and returns stderr output.\r\n* `def assert_test_failure(other_env = {})` which asserts `refute_operator status, :success?` and returns stderr output.\r\n\r\nUsing the three helpers, we can define the tests like:\r\n\r\n```rb\r\ndef test_runtime_test_success\r\n  assert_test_success()\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""30"")\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""ALL"")\r\nend\r\n\r\ndef test_runtime_test_error_with_mulformed_sample_size\r\n  error_message = assert_test_failure(""RBS_TEST_SAMPLE_SIZE"" => ""yes"")\r\n  assert_match /.../, error_message\r\n\r\n  ...\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 8, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458616059, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459246569, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 23, 6, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459249191, 'comment_body': ""I don't think we need `silence_warnings` here."", 'comment_created': datetime.datetime(2020, 7, 23, 6, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459295158, 'comment_body': 'Please fix the indentation. üôè ', 'comment_created': datetime.datetime(2020, 7, 23, 8, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': 'd52e3767a2ae9fbe6bd374e6158caf472619731a', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
454749847,Improve the QoL of test/setup.rb,"This PR improves the ""QoL"" of test/setup.rb by allowing users to have some white space before and after the comma in the environment variables,`RBS_TEST_TARGET` and `RBS_TEST_SKIP`, and by converting relative type names to absolute type names to make the leading colon optional for some cases.",True,343,https://api.github.com/repos/ruby/rbs/pulls/343,https://github.com/ruby/rbs/pull/343,closed,9,5,1,2,0,0,0,0,[],2020-07-21 21:14:07+00:00,2020-07-22 08:15:36+00:00,39689.0,11:01:29,[],"[{'commit_sha': 'd87ddcd3954379e5b7f078a681a82752ce39c81e', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56a77169eb14a567fede5ab3596d9d12b2fce965', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
455128965,Print warning if no runtime type checker was installed,This PR adds an `at_exit` block to `setup.rb` to notify the user if there weren't any runtime type checkers installed upon exit.,True,344,https://api.github.com/repos/ruby/rbs/pulls/344,https://github.com/ruby/rbs/pull/344,closed,7,0,1,1,0,0,0,0,[],2020-07-22 13:44:22+00:00,2020-07-23 07:07:55+00:00,62613.0,17:23:33,[],"[{'commit_sha': '2675b64a5787341c3a60d74a427358b9943414df', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
461664983,Optimize `push_comment` method,This PR optimizes the `push_comment` method in `parser.rb` by concatenating to the previous comment instead of creating two new comments if it's not a new comment.,True,350,https://api.github.com/repos/ruby/rbs/pulls/350,https://github.com/ruby/rbs/pull/350,closed,50,8,4,1,0,0,0,0,[],2020-08-02 03:29:37+00:00,2020-08-02 09:22:35+00:00,21178.0,5:52:58,[],"[{'commit_sha': '63f86320d74ff8391913f8994f4203cec3f9ef42', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
467597228,Add `Record` type checker,This PR allows the runtime type checker to also check the types of the key-value pairs in `Record`s similarly to `Tuple`s instead of just checking if the `Record` is a `Hash` or not.,True,365,https://api.github.com/repos/ruby/rbs/pulls/365,https://github.com/ruby/rbs/pull/365,closed,39,1,2,2,0,0,0,0,[],2020-08-13 19:44:11+00:00,2020-08-15 15:48:22+00:00,158651.0,"1 day, 20:04:11",[],"[{'commit_sha': '90a60a7c560c8e362a43dae843e3b97052c1cc0d', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5509e623b5d69ca101b706b1d07b748dfb9be19', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
468129242,Add `rbs test` command,"This PR adds the `rbs test` command to RBS, which allows the users to easily run the runtime type checker instead of manually setting the environment variables every time like before.

The API is as follows:
 rbs [RBS OPTIONS] test [TEST OPTIONS] COMMAND

`RBS OPTIONS` are the options that RBS currently uses, such as `-I DIR` and `-r LIB`

TEST OPTIONS:
| Command | Description|
| :-: | :-: |
| --target \<TARGET\> |  the module, class, or anything else that would be tested
|   --sample-size \<SIZE\>\|ALL  |   the amount of values in a collection to be type-checked",True,366,https://api.github.com/repos/ruby/rbs/pulls/366,https://github.com/ruby/rbs/pull/366,closed,83,2,2,1,0,10,0,0,[],2020-08-14 18:36:04+00:00,2020-08-27 05:01:41+00:00,1074337.0,"12 days, 10:25:37","[{'comment_id': 471005120, 'comment_body': 'The escape for `target` is unnecessary.', 'comment_created': datetime.datetime(2020, 8, 15, 15, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 471005373, 'comment_body': 'I would write `targets.join("","") unless targets.empty?` here.\r\n\r\n* It works well even without `uniq`.\r\n* Testing `targets` emptiness seems better because we can omit `targets_string` variable completely.', 'comment_created': datetime.datetime(2020, 8, 15, 15, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 471005471, 'comment_body': 'You can assign the OptionParser instance and use it to print the help message.\r\n\r\n```\r\nopts = OptionParser.new do ... end\r\n\r\nif args.empty?\r\n  stdout.puts opts.help\r\n  exit 1\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 8, 15, 15, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 471005638, 'comment_body': 'Escape the options before `join`. `Shellescape.join` would be the best method for our purpose!', 'comment_created': datetime.datetime(2020, 8, 15, 15, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473093273, 'comment_body': ""I don't think we need `Shellwords.escape(opt_string)` again here. Do we need it?"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473093816, 'comment_body': ""`.join(',')` ?"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473094227, 'comment_body': 'I want there are some test cases here...', 'comment_created': datetime.datetime(2020, 8, 19, 14, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473591492, 'comment_body': ""<s>No need to `require` thread explicitly??</s> I think we don't need thread at all in this test."", 'comment_created': datetime.datetime(2020, 8, 20, 5, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473593745, 'comment_body': ""I don't think we need to use thread here."", 'comment_created': datetime.datetime(2020, 8, 20, 5, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473594383, 'comment_body': '`Kernel#system` would be better.\r\n\r\n```ruby\r\nsystem(env_hash, *args)\r\n$?\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 5, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '3a76490b63954b99c1be2478c8c43a697eedad27', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
472949975,Add Double API to RBS,"As of now, there are some issues with doubles for RBS. In order to mitigate those issues, the Double API was made so that users can declare the double suite they are using and ignore unwanted classes. ",True,380,https://api.github.com/repos/ruby/rbs/pulls/380,https://github.com/ruby/rbs/pull/380,closed,198,22,12,3,2,8,0,0,[],2020-08-25 05:34:07+00:00,2020-08-31 08:08:35+00:00,527668.0,"6 days, 2:34:28","[{'comment_id': 476188550, 'comment_body': '`RBS_TEST_IGNORED_CLASSES` ?', 'comment_created': datetime.datetime(2020, 8, 25, 5, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 476191565, 'comment_body': 'Returning an array would be better.', 'comment_created': datetime.datetime(2020, 8, 25, 5, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 478123950, 'comment_body': ""It's better to write `info` in `if` block explicitly.\r\n\r\n```rb\r\nif is_double?(val)\r\n  RBS.logger.info(...)\r\n  return true\r\nend\r\n```"", 'comment_created': datetime.datetime(2020, 8, 27, 5, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 478126305, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 27, 5, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479616277, 'comment_body': 'I think the test is not running.\r\n\r\n`require ""minitest/autorun""`', 'comment_created': datetime.datetime(2020, 8, 29, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479616451, 'comment_body': 'You need to specify `RBS_TEST_TARGET` and `RBS_TEST_DOUBLE_SUITE` here.', 'comment_created': datetime.datetime(2020, 8, 29, 6, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479616515, 'comment_body': 'I guess the spec is not running here too.', 'comment_created': datetime.datetime(2020, 8, 29, 6, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479726092, 'comment_body': 'Unskip other tests!', 'comment_created': datetime.datetime(2020, 8, 30, 5, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': 'fd6319d5bb55e520d81c74dec6b4ad64b7c909f7', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5c9b46f561af4a0d28bcb0657bbdb1e1f0ca766', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eafa1badcb316418cfac312c4030b200e98680b', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
444243595,Add sampling option for arrays,,True,323,https://api.github.com/repos/ruby/rbs/pulls/323,https://github.com/ruby/rbs/pull/323,closed,129,19,7,6,2,4,0,0,[],2020-07-04 05:51:18+00:00,2020-07-11 06:23:20+00:00,606722.0,"7 days, 0:32:02","[{'comment_id': 449743040, 'comment_body': 'Having only `RBS_TEST_NO_SAMPLING` would work fine (without `RBS_TEST_ABC_SAMPLE`).', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743099, 'comment_body': 'Changing the keyword name fro `no_sample:` would be less confusing.', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743239, 'comment_body': ""I'm not sure if extracting the _test with sampling_ to a method makes sense.\r\nI think the `Hash` sampling would be like:\r\n\r\n```rb\r\nval.keys.sample(size).all? {|k| v = val[k]; value(...) }\r\n```\r\n\r\nWhich cannot be used with the `values` method.\r\n\r\nI'd like to suggest that trying writing sampling for `Hash` and then do refactoring."", 'comment_created': datetime.datetime(2020, 7, 4, 5, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 453159041, 'comment_body': '@Afront This is not good... We need a test for `#succ`, not `+1`. ', 'comment_created': datetime.datetime(2020, 7, 11, 5, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '0065e624e98903a92353b9fa6386591b2736ce79', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b4610ed49f8dc217109df5a91352c9b80c64ccc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91b82e6a0527db38c1f4b2333843aae6a98e07f', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea443ab16f203dcb3f8a2b9d9a0526975ab9794', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612b3bc1269f3e6efbaed97b8b55b7e4b4a6f225', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883e1b77ce80c00a8d2e5cdbd0c33ffaca4c37fc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
449486233,Add sample size option,This PR replaces `RBS_TEST_NO_SAMPLE` with an option to change the amount of values in a collection to be type-checked called `RBS_TEST_SAMPLE_SIZE`.,True,336,https://api.github.com/repos/ruby/rbs/pulls/336,https://github.com/ruby/rbs/pull/336,closed,156,57,12,1,7,19,0,0,[],2020-07-15 13:36:35+00:00,2020-07-28 06:39:25+00:00,1098170.0,"12 days, 17:02:50","[{'comment_id': 458606487, 'comment_body': 'No `Default`, right?', 'comment_created': datetime.datetime(2020, 7, 22, 7, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458606860, 'comment_body': 'Make the `sample_size` a required keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607146, 'comment_body': 'Make `sample_size` a required keyword here too.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607551, 'comment_body': 'Same here about optional keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607814, 'comment_body': 'Use `sample_size` method instead of instance variable.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608177, 'comment_body': 'The test name should be `SetupHelperTest`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608445, 'comment_body': 'This is a nitpick but you need two spaces before `include`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608881, 'comment_body': '`sample_size: 100` or something like this.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458609748, 'comment_body': 'These `begin`s are useless.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610213, 'comment_body': 'You can clean up the tests because you need only two cases, `nil` and an Integer.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610912, 'comment_body': ""I don't think you need these helpers. We can skip testing these errors."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611076, 'comment_body': ""I'm not sure if we need this helper..."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611436, 'comment_body': 'This `assert` is meaningless. What do you want to test with these assertions?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611885, 'comment_body': ""I don't think we need to extract this module. Define the helper methods in `RuntimeTestTest`."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458615486, 'comment_body': 'I think we can organize the test helpers as follows:\r\n\r\n* `def run_runtime_test(other_env:)` to run the test and returns `[err, status]`\r\n* `def assert_test_success(other_env = {})` which asserts `assert_operator status, :success?` and returns stderr output.\r\n* `def assert_test_failure(other_env = {})` which asserts `refute_operator status, :success?` and returns stderr output.\r\n\r\nUsing the three helpers, we can define the tests like:\r\n\r\n```rb\r\ndef test_runtime_test_success\r\n  assert_test_success()\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""30"")\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""ALL"")\r\nend\r\n\r\ndef test_runtime_test_error_with_mulformed_sample_size\r\n  error_message = assert_test_failure(""RBS_TEST_SAMPLE_SIZE"" => ""yes"")\r\n  assert_match /.../, error_message\r\n\r\n  ...\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 8, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458616059, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459246569, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 23, 6, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459249191, 'comment_body': ""I don't think we need `silence_warnings` here."", 'comment_created': datetime.datetime(2020, 7, 23, 6, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459295158, 'comment_body': 'Please fix the indentation. üôè ', 'comment_created': datetime.datetime(2020, 7, 23, 8, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': 'd52e3767a2ae9fbe6bd374e6158caf472619731a', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
461664983,Optimize `push_comment` method,This PR optimizes the `push_comment` method in `parser.rb` by concatenating to the previous comment instead of creating two new comments if it's not a new comment.,True,350,https://api.github.com/repos/ruby/rbs/pulls/350,https://github.com/ruby/rbs/pull/350,closed,50,8,4,1,0,0,0,0,[],2020-08-02 03:29:37+00:00,2020-08-02 09:22:35+00:00,21178.0,5:52:58,[],"[{'commit_sha': '63f86320d74ff8391913f8994f4203cec3f9ef42', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
444243595,Add sampling option for arrays,,True,323,https://api.github.com/repos/ruby/rbs/pulls/323,https://github.com/ruby/rbs/pull/323,closed,129,19,7,6,2,4,0,0,[],2020-07-04 05:51:18+00:00,2020-07-11 06:23:20+00:00,606722.0,"7 days, 0:32:02","[{'comment_id': 449743040, 'comment_body': 'Having only `RBS_TEST_NO_SAMPLING` would work fine (without `RBS_TEST_ABC_SAMPLE`).', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743099, 'comment_body': 'Changing the keyword name fro `no_sample:` would be less confusing.', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743239, 'comment_body': ""I'm not sure if extracting the _test with sampling_ to a method makes sense.\r\nI think the `Hash` sampling would be like:\r\n\r\n```rb\r\nval.keys.sample(size).all? {|k| v = val[k]; value(...) }\r\n```\r\n\r\nWhich cannot be used with the `values` method.\r\n\r\nI'd like to suggest that trying writing sampling for `Hash` and then do refactoring."", 'comment_created': datetime.datetime(2020, 7, 4, 5, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 453159041, 'comment_body': '@Afront This is not good... We need a test for `#succ`, not `+1`. ', 'comment_created': datetime.datetime(2020, 7, 11, 5, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '0065e624e98903a92353b9fa6386591b2736ce79', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b4610ed49f8dc217109df5a91352c9b80c64ccc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91b82e6a0527db38c1f4b2333843aae6a98e07f', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea443ab16f203dcb3f8a2b9d9a0526975ab9794', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612b3bc1269f3e6efbaed97b8b55b7e4b4a6f225', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883e1b77ce80c00a8d2e5cdbd0c33ffaca4c37fc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
449486233,Add sample size option,This PR replaces `RBS_TEST_NO_SAMPLE` with an option to change the amount of values in a collection to be type-checked called `RBS_TEST_SAMPLE_SIZE`.,True,336,https://api.github.com/repos/ruby/rbs/pulls/336,https://github.com/ruby/rbs/pull/336,closed,156,57,12,1,7,19,0,0,[],2020-07-15 13:36:35+00:00,2020-07-28 06:39:25+00:00,1098170.0,"12 days, 17:02:50","[{'comment_id': 458606487, 'comment_body': 'No `Default`, right?', 'comment_created': datetime.datetime(2020, 7, 22, 7, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458606860, 'comment_body': 'Make the `sample_size` a required keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607146, 'comment_body': 'Make `sample_size` a required keyword here too.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607551, 'comment_body': 'Same here about optional keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607814, 'comment_body': 'Use `sample_size` method instead of instance variable.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608177, 'comment_body': 'The test name should be `SetupHelperTest`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608445, 'comment_body': 'This is a nitpick but you need two spaces before `include`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608881, 'comment_body': '`sample_size: 100` or something like this.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458609748, 'comment_body': 'These `begin`s are useless.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610213, 'comment_body': 'You can clean up the tests because you need only two cases, `nil` and an Integer.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610912, 'comment_body': ""I don't think you need these helpers. We can skip testing these errors."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611076, 'comment_body': ""I'm not sure if we need this helper..."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611436, 'comment_body': 'This `assert` is meaningless. What do you want to test with these assertions?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611885, 'comment_body': ""I don't think we need to extract this module. Define the helper methods in `RuntimeTestTest`."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458615486, 'comment_body': 'I think we can organize the test helpers as follows:\r\n\r\n* `def run_runtime_test(other_env:)` to run the test and returns `[err, status]`\r\n* `def assert_test_success(other_env = {})` which asserts `assert_operator status, :success?` and returns stderr output.\r\n* `def assert_test_failure(other_env = {})` which asserts `refute_operator status, :success?` and returns stderr output.\r\n\r\nUsing the three helpers, we can define the tests like:\r\n\r\n```rb\r\ndef test_runtime_test_success\r\n  assert_test_success()\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""30"")\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""ALL"")\r\nend\r\n\r\ndef test_runtime_test_error_with_mulformed_sample_size\r\n  error_message = assert_test_failure(""RBS_TEST_SAMPLE_SIZE"" => ""yes"")\r\n  assert_match /.../, error_message\r\n\r\n  ...\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 8, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458616059, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459246569, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 23, 6, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459249191, 'comment_body': ""I don't think we need `silence_warnings` here."", 'comment_created': datetime.datetime(2020, 7, 23, 6, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459295158, 'comment_body': 'Please fix the indentation. üôè ', 'comment_created': datetime.datetime(2020, 7, 23, 8, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': 'd52e3767a2ae9fbe6bd374e6158caf472619731a', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
444243595,Add sampling option for arrays,,True,323,https://api.github.com/repos/ruby/rbs/pulls/323,https://github.com/ruby/rbs/pull/323,closed,129,19,7,6,2,4,0,0,[],2020-07-04 05:51:18+00:00,2020-07-11 06:23:20+00:00,606722.0,"7 days, 0:32:02","[{'comment_id': 449743040, 'comment_body': 'Having only `RBS_TEST_NO_SAMPLING` would work fine (without `RBS_TEST_ABC_SAMPLE`).', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743099, 'comment_body': 'Changing the keyword name fro `no_sample:` would be less confusing.', 'comment_created': datetime.datetime(2020, 7, 4, 5, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 449743239, 'comment_body': ""I'm not sure if extracting the _test with sampling_ to a method makes sense.\r\nI think the `Hash` sampling would be like:\r\n\r\n```rb\r\nval.keys.sample(size).all? {|k| v = val[k]; value(...) }\r\n```\r\n\r\nWhich cannot be used with the `values` method.\r\n\r\nI'd like to suggest that trying writing sampling for `Hash` and then do refactoring."", 'comment_created': datetime.datetime(2020, 7, 4, 5, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 453159041, 'comment_body': '@Afront This is not good... We need a test for `#succ`, not `+1`. ', 'comment_created': datetime.datetime(2020, 7, 11, 5, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '0065e624e98903a92353b9fa6386591b2736ce79', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b4610ed49f8dc217109df5a91352c9b80c64ccc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91b82e6a0527db38c1f4b2333843aae6a98e07f', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea443ab16f203dcb3f8a2b9d9a0526975ab9794', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612b3bc1269f3e6efbaed97b8b55b7e4b4a6f225', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883e1b77ce80c00a8d2e5cdbd0c33ffaca4c37fc', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
449486233,Add sample size option,This PR replaces `RBS_TEST_NO_SAMPLE` with an option to change the amount of values in a collection to be type-checked called `RBS_TEST_SAMPLE_SIZE`.,True,336,https://api.github.com/repos/ruby/rbs/pulls/336,https://github.com/ruby/rbs/pull/336,closed,156,57,12,1,7,19,0,0,[],2020-07-15 13:36:35+00:00,2020-07-28 06:39:25+00:00,1098170.0,"12 days, 17:02:50","[{'comment_id': 458606487, 'comment_body': 'No `Default`, right?', 'comment_created': datetime.datetime(2020, 7, 22, 7, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458606860, 'comment_body': 'Make the `sample_size` a required keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607146, 'comment_body': 'Make `sample_size` a required keyword here too.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607551, 'comment_body': 'Same here about optional keyword.', 'comment_created': datetime.datetime(2020, 7, 22, 7, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458607814, 'comment_body': 'Use `sample_size` method instead of instance variable.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608177, 'comment_body': 'The test name should be `SetupHelperTest`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608445, 'comment_body': 'This is a nitpick but you need two spaces before `include`.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458608881, 'comment_body': '`sample_size: 100` or something like this.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458609748, 'comment_body': 'These `begin`s are useless.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610213, 'comment_body': 'You can clean up the tests because you need only two cases, `nil` and an Integer.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458610912, 'comment_body': ""I don't think you need these helpers. We can skip testing these errors."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611076, 'comment_body': ""I'm not sure if we need this helper..."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611436, 'comment_body': 'This `assert` is meaningless. What do you want to test with these assertions?', 'comment_created': datetime.datetime(2020, 7, 22, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458611885, 'comment_body': ""I don't think we need to extract this module. Define the helper methods in `RuntimeTestTest`."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458615486, 'comment_body': 'I think we can organize the test helpers as follows:\r\n\r\n* `def run_runtime_test(other_env:)` to run the test and returns `[err, status]`\r\n* `def assert_test_success(other_env = {})` which asserts `assert_operator status, :success?` and returns stderr output.\r\n* `def assert_test_failure(other_env = {})` which asserts `refute_operator status, :success?` and returns stderr output.\r\n\r\nUsing the three helpers, we can define the tests like:\r\n\r\n```rb\r\ndef test_runtime_test_success\r\n  assert_test_success()\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""30"")\r\n  assert_test_success(""RBS_TEST_SAMPLE_SIZE"" => ""ALL"")\r\nend\r\n\r\ndef test_runtime_test_error_with_mulformed_sample_size\r\n  error_message = assert_test_failure(""RBS_TEST_SAMPLE_SIZE"" => ""yes"")\r\n  assert_match /.../, error_message\r\n\r\n  ...\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 8, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 458616059, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 22, 8, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459246569, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 7, 23, 6, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459249191, 'comment_body': ""I don't think we need `silence_warnings` here."", 'comment_created': datetime.datetime(2020, 7, 23, 6, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 459295158, 'comment_body': 'Please fix the indentation. üôè ', 'comment_created': datetime.datetime(2020, 7, 23, 8, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': 'd52e3767a2ae9fbe6bd374e6158caf472619731a', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
461664983,Optimize `push_comment` method,This PR optimizes the `push_comment` method in `parser.rb` by concatenating to the previous comment instead of creating two new comments if it's not a new comment.,True,350,https://api.github.com/repos/ruby/rbs/pulls/350,https://github.com/ruby/rbs/pull/350,closed,50,8,4,1,0,0,0,0,[],2020-08-02 03:29:37+00:00,2020-08-02 09:22:35+00:00,21178.0,5:52:58,[],"[{'commit_sha': '63f86320d74ff8391913f8994f4203cec3f9ef42', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
454749847,Improve the QoL of test/setup.rb,"This PR improves the ""QoL"" of test/setup.rb by allowing users to have some white space before and after the comma in the environment variables,`RBS_TEST_TARGET` and `RBS_TEST_SKIP`, and by converting relative type names to absolute type names to make the leading colon optional for some cases.",True,343,https://api.github.com/repos/ruby/rbs/pulls/343,https://github.com/ruby/rbs/pull/343,closed,9,5,1,2,0,0,0,0,[],2020-07-21 21:14:07+00:00,2020-07-22 08:15:36+00:00,39689.0,11:01:29,[],"[{'commit_sha': 'd87ddcd3954379e5b7f078a681a82752ce39c81e', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56a77169eb14a567fede5ab3596d9d12b2fce965', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
455128965,Print warning if no runtime type checker was installed,This PR adds an `at_exit` block to `setup.rb` to notify the user if there weren't any runtime type checkers installed upon exit.,True,344,https://api.github.com/repos/ruby/rbs/pulls/344,https://github.com/ruby/rbs/pull/344,closed,7,0,1,1,0,0,0,0,[],2020-07-22 13:44:22+00:00,2020-07-23 07:07:55+00:00,62613.0,17:23:33,[],"[{'commit_sha': '2675b64a5787341c3a60d74a427358b9943414df', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
468129242,Add `rbs test` command,"This PR adds the `rbs test` command to RBS, which allows the users to easily run the runtime type checker instead of manually setting the environment variables every time like before.

The API is as follows:
 rbs [RBS OPTIONS] test [TEST OPTIONS] COMMAND

`RBS OPTIONS` are the options that RBS currently uses, such as `-I DIR` and `-r LIB`

TEST OPTIONS:
| Command | Description|
| :-: | :-: |
| --target \<TARGET\> |  the module, class, or anything else that would be tested
|   --sample-size \<SIZE\>\|ALL  |   the amount of values in a collection to be type-checked",True,366,https://api.github.com/repos/ruby/rbs/pulls/366,https://github.com/ruby/rbs/pull/366,closed,83,2,2,1,0,10,0,0,[],2020-08-14 18:36:04+00:00,2020-08-27 05:01:41+00:00,1074337.0,"12 days, 10:25:37","[{'comment_id': 471005120, 'comment_body': 'The escape for `target` is unnecessary.', 'comment_created': datetime.datetime(2020, 8, 15, 15, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 471005373, 'comment_body': 'I would write `targets.join("","") unless targets.empty?` here.\r\n\r\n* It works well even without `uniq`.\r\n* Testing `targets` emptiness seems better because we can omit `targets_string` variable completely.', 'comment_created': datetime.datetime(2020, 8, 15, 15, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 471005471, 'comment_body': 'You can assign the OptionParser instance and use it to print the help message.\r\n\r\n```\r\nopts = OptionParser.new do ... end\r\n\r\nif args.empty?\r\n  stdout.puts opts.help\r\n  exit 1\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 8, 15, 15, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 471005638, 'comment_body': 'Escape the options before `join`. `Shellescape.join` would be the best method for our purpose!', 'comment_created': datetime.datetime(2020, 8, 15, 15, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473093273, 'comment_body': ""I don't think we need `Shellwords.escape(opt_string)` again here. Do we need it?"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473093816, 'comment_body': ""`.join(',')` ?"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473094227, 'comment_body': 'I want there are some test cases here...', 'comment_created': datetime.datetime(2020, 8, 19, 14, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473591492, 'comment_body': ""<s>No need to `require` thread explicitly??</s> I think we don't need thread at all in this test."", 'comment_created': datetime.datetime(2020, 8, 20, 5, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473593745, 'comment_body': ""I don't think we need to use thread here."", 'comment_created': datetime.datetime(2020, 8, 20, 5, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 473594383, 'comment_body': '`Kernel#system` would be better.\r\n\r\n```ruby\r\nsystem(env_hash, *args)\r\n$?\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 5, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '3a76490b63954b99c1be2478c8c43a697eedad27', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
472949975,Add Double API to RBS,"As of now, there are some issues with doubles for RBS. In order to mitigate those issues, the Double API was made so that users can declare the double suite they are using and ignore unwanted classes. ",True,380,https://api.github.com/repos/ruby/rbs/pulls/380,https://github.com/ruby/rbs/pull/380,closed,198,22,12,3,2,8,0,0,[],2020-08-25 05:34:07+00:00,2020-08-31 08:08:35+00:00,527668.0,"6 days, 2:34:28","[{'comment_id': 476188550, 'comment_body': '`RBS_TEST_IGNORED_CLASSES` ?', 'comment_created': datetime.datetime(2020, 8, 25, 5, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 476191565, 'comment_body': 'Returning an array would be better.', 'comment_created': datetime.datetime(2020, 8, 25, 5, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 478123950, 'comment_body': ""It's better to write `info` in `if` block explicitly.\r\n\r\n```rb\r\nif is_double?(val)\r\n  RBS.logger.info(...)\r\n  return true\r\nend\r\n```"", 'comment_created': datetime.datetime(2020, 8, 27, 5, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 478126305, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2020, 8, 27, 5, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479616277, 'comment_body': 'I think the test is not running.\r\n\r\n`require ""minitest/autorun""`', 'comment_created': datetime.datetime(2020, 8, 29, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479616451, 'comment_body': 'You need to specify `RBS_TEST_TARGET` and `RBS_TEST_DOUBLE_SUITE` here.', 'comment_created': datetime.datetime(2020, 8, 29, 6, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479616515, 'comment_body': 'I guess the spec is not running here too.', 'comment_created': datetime.datetime(2020, 8, 29, 6, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 479726092, 'comment_body': 'Unskip other tests!', 'comment_created': datetime.datetime(2020, 8, 30, 5, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': 'fd6319d5bb55e520d81c74dec6b4ad64b7c909f7', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5c9b46f561af4a0d28bcb0657bbdb1e1f0ca766', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eafa1badcb316418cfac312c4030b200e98680b', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0
467597228,Add `Record` type checker,This PR allows the runtime type checker to also check the types of the key-value pairs in `Record`s similarly to `Tuple`s instead of just checking if the `Record` is a `Hash` or not.,True,365,https://api.github.com/repos/ruby/rbs/pulls/365,https://github.com/ruby/rbs/pull/365,closed,39,1,2,2,0,0,0,0,[],2020-08-13 19:44:11+00:00,2020-08-15 15:48:22+00:00,158651.0,"1 day, 20:04:11",[],"[{'commit_sha': '90a60a7c560c8e362a43dae843e3b97052c1cc0d', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5509e623b5d69ca101b706b1d07b748dfb9be19', 'committer_username': 'Afront', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 3, 22, 17, 59, 29, tzinfo=datetime.timezone.utc)}]",,3943720,,User,,66,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
174796313,rbs,ruby/rbs,Ruby,207,1932,52,124,4871,144,16,45,"[{'id': 472949975, 'number': 380, 'closed': datetime.datetime(2020, 8, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 5, 34, 7, tzinfo=datetime.timezone.utc), 'time_taken': 527668.0, 'time_delta': '6 days, 2:34:28', 'additions': 198, 'deletions': 22, 'state': 'closed'}, {'id': 468129242, 'number': 366, 'closed': datetime.datetime(2020, 8, 27, 5, 1, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 18, 36, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1074337.0, 'time_delta': '12 days, 10:25:37', 'additions': 83, 'deletions': 2, 'state': 'closed'}, {'id': 467597228, 'number': 365, 'closed': datetime.datetime(2020, 8, 15, 15, 48, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 19, 44, 11, tzinfo=datetime.timezone.utc), 'time_taken': 158651.0, 'time_delta': '1 day, 20:04:11', 'additions': 39, 'deletions': 1, 'state': 'closed'}, {'id': 461664983, 'number': 350, 'closed': datetime.datetime(2020, 8, 2, 9, 22, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 3, 29, 37, tzinfo=datetime.timezone.utc), 'time_taken': 21178.0, 'time_delta': '5:52:58', 'additions': 50, 'deletions': 8, 'state': 'closed'}, {'id': 455128965, 'number': 344, 'closed': datetime.datetime(2020, 7, 23, 7, 7, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 13, 44, 22, tzinfo=datetime.timezone.utc), 'time_taken': 62613.0, 'time_delta': '17:23:33', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 454749847, 'number': 343, 'closed': datetime.datetime(2020, 7, 22, 8, 15, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 21, 14, 7, tzinfo=datetime.timezone.utc), 'time_taken': 39689.0, 'time_delta': '11:01:29', 'additions': 9, 'deletions': 5, 'state': 'closed'}, {'id': 449486233, 'number': 336, 'closed': datetime.datetime(2020, 7, 28, 6, 39, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 13, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1098170.0, 'time_delta': '12 days, 17:02:50', 'additions': 156, 'deletions': 57, 'state': 'closed'}, {'id': 444243595, 'number': 323, 'closed': datetime.datetime(2020, 7, 11, 6, 23, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 5, 51, 18, tzinfo=datetime.timezone.utc), 'time_taken': 606722.0, 'time_delta': '7 days, 0:32:02', 'additions': 129, 'deletions': 19, 'state': 'closed'}]"
