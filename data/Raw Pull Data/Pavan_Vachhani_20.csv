pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
418983828,Ownership confirmation,"- Adds Notifications about owner added/removed to the gem
- Adds functionality to add/remove owners via UI

![Screenshot from 2020-07-29 14-41-13](https://user-images.githubusercontent.com/29918760/88781118-98b68c80-d1a9-11ea-92b6-d7521983382f.png)
Owners page

![image](https://user-images.githubusercontent.com/29918760/88781326-e29f7280-d1a9-11ea-952d-a4d064f103b8.png)
Owner added mailer

![Screenshot from 2020-07-29 14-42-18](https://user-images.githubusercontent.com/29918760/88781393-f8149c80-d1a9-11ea-9366-24e4efaca62f.png)
Confirmation mailer
",True,2357,https://api.github.com/repos/rubygems/rubygems.org/pulls/2357,https://github.com/rubygems/rubygems.org/pull/2357,closed,2317,167,64,24,1,123,0,0,[],2020-05-16 15:34:44+00:00,2020-09-13 12:05:36+00:00,10355452.0,"119 days, 20:30:52","[{'comment_id': 440593877, 'comment_body': 'Please show error messages in else and change the status to `unprocessable_entity`. Check [this for reference](https://github.com/rubygems/rubygems.org/blob/master/app/controllers/api/v1/deletions_controller.rb#L15-L16)', 'comment_created': datetime.datetime(2020, 6, 16, 5, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440594025, 'comment_body': 'Is this not handled by `validates :user_id, uniqueness: { scope: :rubygem_id }`?', 'comment_created': datetime.datetime(2020, 6, 16, 5, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440594441, 'comment_body': 'please show error message here.', 'comment_created': datetime.datetime(2020, 6, 16, 5, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440596354, 'comment_body': 'Please handle ownership not found case separately, also note that `find` will throw an exception. something like:\r\n```\r\ndef find_ownership\r\n  @ownership = Ownership.find_by(params[:id])\r\n  render_not_found unless @ownership\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 5, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440598134, 'comment_body': 'please add authorizer as self.', 'comment_created': datetime.datetime(2020, 6, 16, 5, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440616668, 'comment_body': 'lets not sign_in user. we will have to deal with mfa as well.', 'comment_created': datetime.datetime(2020, 6, 16, 6, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440617517, 'comment_body': 'Maybe just check if the token is valid in `if` and confirm and notify inside the block. `validate_confirm_notify` function is doing too much.', 'comment_created': datetime.datetime(2020, 6, 16, 6, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440617824, 'comment_body': 'I understand we have used this text for rest of token expiry but I think showing error message which says token as expired makes more sense.', 'comment_created': datetime.datetime(2020, 6, 16, 6, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440618000, 'comment_body': 'Do we need this if only response is HTML?', 'comment_created': datetime.datetime(2020, 6, 16, 6, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440642178, 'comment_body': ""It is not temporary ownership but unconfirmed ownership. Also, `Ownership.....ownership` doesn't seem right. May just use `created_uncofirmed` or something similar."", 'comment_created': datetime.datetime(2020, 6, 16, 7, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440642740, 'comment_body': 'This will go at the bottom of the mail.', 'comment_created': datetime.datetime(2020, 6, 16, 7, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440644329, 'comment_body': ""user has just clicked on confirmation link, I don't think the user needs to be notified that he was added."", 'comment_created': datetime.datetime(2020, 6, 16, 7, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440651045, 'comment_body': 'Please use i18n tags in views', 'comment_created': datetime.datetime(2020, 6, 16, 7, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440651915, 'comment_body': 'why is this not part of definition at line 161?', 'comment_created': datetime.datetime(2020, 6, 16, 7, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440653734, 'comment_body': ""I am not sure if we should use the same function and template for added and removed owner mails. \r\n> User %{owner_handle} was **removed as an owner** for %{gem} gem on RubyGems.org.\r\n\r\ndoesn't sound right."", 'comment_created': datetime.datetime(2020, 6, 16, 7, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440658848, 'comment_body': ""Correct me if I am wrong, I think we had discussed that we will change existing `owners` to only select confirmed owners.\r\nI don't see any changes in the authorization of push/yank/add/remove owner to use confirmed_owners relation if we intend to switch this new relation.\r\nWe also need to change `user.rubygems` relations where this only return rubygems where ownership is confirmed."", 'comment_created': datetime.datetime(2020, 6, 16, 7, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440661811, 'comment_body': 'RFC has a separate column for confirmation status, why are we using the timestamp as a proxy for confirmation?\r\nhttps://github.com/rubygems/rfcs/pull/25/files#diff-a46036696d0714e7cf9d942bcd640d1aR91', 'comment_created': datetime.datetime(2020, 6, 16, 8, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 440662487, 'comment_body': 'Can you please create a separate PR to change this to partial? We seem to be using it at quite a few places.', 'comment_created': datetime.datetime(2020, 6, 16, 8, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 442264268, 'comment_body': ""We had discussed that we will allow user to add owner again so that confirmation email can be sent (with rate limit). So, in `create` method, I use \r\n```ownership = Ownership.new_temporary_ownership(@rubygem, owner, @api_user)```\r\n\r\nThis finds if there is existing ownership or initializes new object. As it finds existing object, it doesn't throw an error in saving. So, it's not clear to the user. Also it sends the email again which can cause confusion.\r\n\r\nThis method is just to show a clear message to the user.\r\nAny alternatives you suggest?"", 'comment_created': datetime.datetime(2020, 6, 18, 14, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 442289275, 'comment_body': ""Looking at the code is making me realize that it is getting complicated because we are trying to fit two responsibilities in one action.\r\nLet's create a new action just for re-sending confirmation token. On the owner page under the confirmed column, we can show a link to resent confirmation mail if the user is unconfirmed."", 'comment_created': datetime.datetime(2020, 6, 18, 14, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 444356973, 'comment_body': 'https://github.com/rubygems/rubygems.org/pull/2421', 'comment_created': datetime.datetime(2020, 6, 23, 16, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 445973116, 'comment_body': 'how about just `confirmed_at.present?`?', 'comment_created': datetime.datetime(2020, 6, 26, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 445973238, 'comment_body': 'this could be `!confirmed?`', 'comment_created': datetime.datetime(2020, 6, 26, 5, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 445975142, 'comment_body': ""I think we don't need this function. `generate_confirmation_token` could be invoked from `before_create` and in the controller, you can use `@rubygem.ownerships.create(user: owner, authorizer: current_user)`"", 'comment_created': datetime.datetime(2020, 6, 26, 5, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 445996678, 'comment_body': 'Why not use the same thing you have used in user model?\r\n```\r\n-> { where(""ownerships.confirmed_at IS NOT NULL"") }\r\n```\r\n\r\nIt is slightly better than what is used here, but this also means we are assuming reader of code understands cofirmed_at being null means `unconfirmed`.', 'comment_created': datetime.datetime(2020, 6, 26, 6, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 445997536, 'comment_body': ""Don't call `where.not(confirmed_at: nil)` directly. We have assigned special meaning to this state and using it outside of ownership model means we are leaking that abstraction. \r\nSame for line 147."", 'comment_created': datetime.datetime(2020, 6, 26, 6, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 445997974, 'comment_body': 'Call `confirm_ownership!` instead of setting `confirmed_at` directly.', 'comment_created': datetime.datetime(2020, 6, 26, 6, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446000379, 'comment_body': 'we should not be calling `confirmed_at: nil` outside of ownership model.', 'comment_created': datetime.datetime(2020, 6, 26, 6, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446000439, 'comment_body': 'we should not be calling confirmed_at: nil outside of ownership model.\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 26, 6, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446001623, 'comment_body': 'why are we changing this?', 'comment_created': datetime.datetime(2020, 6, 26, 6, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446004765, 'comment_body': 'why instance variable if only used in `setup`?', 'comment_created': datetime.datetime(2020, 6, 26, 7, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446005171, 'comment_body': '`when user`', 'comment_created': datetime.datetime(2020, 6, 26, 7, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446005837, 'comment_body': 'also add tests for when the user does not own the gem.', 'comment_created': datetime.datetime(2020, 6, 26, 7, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446006360, 'comment_body': 'above two lines will go in `setup` and will start with context `when the token has expired`', 'comment_created': datetime.datetime(2020, 6, 26, 7, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 446499589, 'comment_body': 'Because this creates unconfirmed ownership and also as we have a factory defined for ownership now, it is consistent to use factories at all places?', 'comment_created': datetime.datetime(2020, 6, 27, 8, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 446535148, 'comment_body': 'Sorry I was not clear. I meant remove `return true` and false. `confirmed?` could be just following:\r\n```\r\ndef confirmed?\r\n  confirmed_at.present?\r\nend\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 27, 15, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 451979448, 'comment_body': ""Why are we doing `params[:id] || params[:owners_id]`? Isn't this action called from UI only and we have control over what param we will receive?\r\n\r\nI think previously I had suggested not to use `find` and handling this separately. My intention was to remove use of safe navigation:\r\n```\r\n ownership = Ownership.find(params[:id])\r\n if ownership&.destroy_and_notify\r\n```\r\nWe revert to the previous version (minus `&` part) and remove `set_ownership`. `find` will raise `ActiveRecord::RecordNotFound` and we rescue this in application_controller."", 'comment_created': datetime.datetime(2020, 7, 9, 5, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 451980919, 'comment_body': 'Same goes for all the other `find_*` used in **this controller**. change it to the version (use !) which raises `ActiveRecord::RecordNotFound` and you should be able to drop `&` or an `if` branch.', 'comment_created': datetime.datetime(2020, 7, 9, 5, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 451982624, 'comment_body': ""`:method => 'delete'` please use new hash format and double quotes everywhere.\r\n\r\nplease fix this in other view files as well."", 'comment_created': datetime.datetime(2020, 7, 9, 6, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 451983794, 'comment_body': ""I don't think we need this. This is a page viewable only for signed-in users."", 'comment_created': datetime.datetime(2020, 7, 9, 6, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 451984929, 'comment_body': 'Link text has to be i18n keys as well.', 'comment_created': datetime.datetime(2020, 7, 9, 6, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 451985251, 'comment_body': 'May be change 95 and 96 to one line.', 'comment_created': datetime.datetime(2020, 7, 9, 6, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452037149, 'comment_body': 'Could it be possible to reuse t--link-arrow here?\r\n![Screenshot from 2020-07-09 13-32-14](https://user-images.githubusercontent.com/7680662/87013816-d64a7a00-c1e8-11ea-9b1d-1a29bea91e56.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 8, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452046476, 'comment_body': 'Can we please try using the existing class for the button instead of adding new? If we need a few attributes different we can add a modifier http://getbem.com/naming/', 'comment_created': datetime.datetime(2020, 7, 9, 8, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452052463, 'comment_body': ""Looks like `notify_owner_added` and `notify_owner_removed` don't have to be part of public interface.\r\n\r\n`safe_destroy` could be moved to private as well. If there are existing tests, use `destroy_and_notify` to test the same behaviour."", 'comment_created': datetime.datetime(2020, 7, 9, 8, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452053645, 'comment_body': 'I think the following makes more sense:\r\n```\r\ndestroy if unconfirmed? or rubygem.owners.many?\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 8, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452056109, 'comment_body': 'As far as I understand `notifiable_owners` is owners who have gem push notification enabled.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452056524, 'comment_body': ""let's change this to `return false unless safe_destroy`"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452059403, 'comment_body': 'Can this line be moved to `notify_owner_removed`?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452061249, 'comment_body': 'Sorry if I forgot this.. but was it my suggestion to remove `&` from here? what happens when ownership is nil?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452068010, 'comment_body': 'I think we can drop line 146 and just use `owners_including_unconfirmed.include? user`.  Probably change function name to `unconfirmed_owner?`. please do some research on this and see if there is any issue with using `include?`.\r\n\r\nSame for `owned_by?`', 'comment_created': datetime.datetime(2020, 7, 9, 8, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452068840, 'comment_body': 'move this condition to a helper.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452137825, 'comment_body': 'No, I did this because, \r\n`owner = @rubygem.owners_including_unconfirmed.find_by_name(params[:email])` this search for owner from our list of unconfirmed ownerships. So ownership being nil case was not possible here I think. Correct?\r\nonwership being nil would be our db inconsistency ig.', 'comment_created': datetime.datetime(2020, 7, 9, 11, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 452164831, 'comment_body': 'Umm it can be done for `owned_by?` but not for `unconfirmed_ownership?` because `owners_including_unconfirmed` includes owners which are confirmed as well. \r\nWe can do (owners_including_unconfirmed - owners) or add a new association to make it work though. What do you suggest?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 452392201, 'comment_body': ""> onwership being nil would be our db inconsistency\r\n\r\nBold of you to assume it isn't :laughing: Assume that every detail is there for a reason by default. Welcome to legacy.\r\n```\r\n> Ownership.where(user_id: nil).count\r\n=> 7042\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 17, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452394530, 'comment_body': ""> add a new association to make it work though\r\n\r\nProbably not as useful just for single usecase. \r\nMove `unconfirmed.where(user_id: user.id).exists?` logic to ownership model tho. Rubygem doesn't need to know about all these details."", 'comment_created': datetime.datetime(2020, 7, 9, 17, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 452639613, 'comment_body': 'Lol okay :speak_no_evil: ', 'comment_created': datetime.datetime(2020, 7, 10, 6, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 456809905, 'comment_body': 'new line please', 'comment_created': datetime.datetime(2020, 7, 18, 17, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456810364, 'comment_body': 'can we please check if these operations were successful. something like this: https://github.com/rubygems/rubygems.org/blob/0fdecd9f12b0352e594c4c655908deb8af72eb1e/app/controllers/email_confirmations_controller.rb#L31', 'comment_created': datetime.datetime(2020, 7, 18, 17, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456810434, 'comment_body': 'Can we use `find_by_name!`?', 'comment_created': datetime.datetime(2020, 7, 18, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456812846, 'comment_body': 'If you want to use unicode, you will have to provide research for its support in different browsers. I would suggest changing all these to svg https://feathericons.com/?query=x', 'comment_created': datetime.datetime(2020, 7, 18, 17, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456812936, 'comment_body': 'why not move these to helper?', 'comment_created': datetime.datetime(2020, 7, 18, 17, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456813081, 'comment_body': 'Pretty sure you need to use one of the above two.', 'comment_created': datetime.datetime(2020, 7, 18, 17, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456813481, 'comment_body': ""I don't we need to return `ownership` here."", 'comment_created': datetime.datetime(2020, 7, 18, 18, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456813563, 'comment_body': 'We should move above two lines to the ownership model.', 'comment_created': datetime.datetime(2020, 7, 18, 18, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456814261, 'comment_body': 'lets fix i18n as well.', 'comment_created': datetime.datetime(2020, 7, 18, 18, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456814314, 'comment_body': 'new line', 'comment_created': datetime.datetime(2020, 7, 18, 18, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456814326, 'comment_body': 'i18n', 'comment_created': datetime.datetime(2020, 7, 18, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456814330, 'comment_body': 'i18n', 'comment_created': datetime.datetime(2020, 7, 18, 18, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456814541, 'comment_body': 'Please make sure you are testing every branch in the action. ie add test for save failing.', 'comment_created': datetime.datetime(2020, 7, 18, 18, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456815392, 'comment_body': 'Please add tests for all methods added in the model.', 'comment_created': datetime.datetime(2020, 7, 18, 18, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456860101, 'comment_body': ""I can add a new method to `user.rb` for this. But isn't an alert with _Owner could not be found._ more intuitive to user than a 404 page?\r\nWe are following the same in API controller too."", 'comment_created': datetime.datetime(2020, 7, 19, 4, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 456861919, 'comment_body': 'https://stackoverflow.com/a/51737587\r\nBoth are needed I think. I tried. Am I missing something?', 'comment_created': datetime.datetime(2020, 7, 19, 5, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 456868947, 'comment_body': 'It would nicer if we can show error message but `if owner` is a bit awkward. Perhaps we can handle this with validation of `ownership`? ie if `user` is `nil` show appropriate flash/error.', 'comment_created': datetime.datetime(2020, 7, 19, 6, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456870202, 'comment_body': 'No, I guess you do need both. I assumed views would not need specific configuration.', 'comment_created': datetime.datetime(2020, 7, 19, 7, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 456879133, 'comment_body': 'What is the chance of failure here?', 'comment_created': datetime.datetime(2020, 7, 19, 8, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 456883174, 'comment_body': 'SQL command can because of timeout or table locking. afaik, it is standard practice to check for return value of `save`.', 'comment_created': datetime.datetime(2020, 7, 19, 9, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460412516, 'comment_body': 'lets change this to `display_handle`', 'comment_created': datetime.datetime(2020, 7, 25, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460413296, 'comment_body': ""Let's not add `find_by!` here. You were right, ownership will not be nil if `owner` was found (both of them require non-nil `user_id`). "", 'comment_created': datetime.datetime(2020, 7, 25, 15, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460413919, 'comment_body': 'Please update `notifiers_changed` mailer view to include info about ownership notification status. It would be even better if we could use separate mailers for push and owner notifier changes.', 'comment_created': datetime.datetime(2020, 7, 25, 15, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460415193, 'comment_body': 'Seems like all these four methods are actually one method.\r\n```\r\ndef owner_i18n_key(owner, user)\r\n  owner.id == user.id ? ""self"" : ""others""\r\nend\r\n\r\nI18n.t(""mailer.owner_removed.subject_#{owner_i18n_key(owner, user)}"")\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 15, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460417138, 'comment_body': 'Do we need `content_tag(:span, class: ""owners__icon"") ` in this method? It could remain in the view be a valina div tag.', 'comment_created': datetime.datetime(2020, 7, 25, 15, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460420641, 'comment_body': '> `scope :unconfirmed, ->(user) { where(""confirmed_at IS NULL"").where(user: user) }`\r\n\r\nPassing `user` to the scope is making this confusing. As in, why does `unconfirmed` depends on user when `confirmed` scope doesn\'t.\r\nLets keep `where(user: user)` right here\r\n```\r\nownerships_including_unconfirmed.unconfirmed.where(user: user).exists?\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 16, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460421108, 'comment_body': ""let's call this `create_confirmed`"", 'comment_created': datetime.datetime(2020, 7, 25, 16, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460421219, 'comment_body': 'We should call this `find_by_owner_handle!`.', 'comment_created': datetime.datetime(2020, 7, 25, 16, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460421557, 'comment_body': 'Are we using this relation anywhere?', 'comment_created': datetime.datetime(2020, 7, 25, 16, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460421846, 'comment_body': 'Can we use `protected_ui_owners_actions` instead of defining it again?', 'comment_created': datetime.datetime(2020, 7, 25, 16, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460508353, 'comment_body': 'Yes, can be done.\r\nI understand that it is better to keep HTML things in views/ directory.\r\nBut the partial was getting a little ugly with the if else ladder of confirmation and MFA.\r\nCan we make another partial for the rows maybe? @sonalkr132 ', 'comment_created': datetime.datetime(2020, 7, 26, 10, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 460508805, 'comment_body': ""https://github.com/rubygems/rubygems.org/pull/2357#discussion_r452394530\r\nThen it'll not follow this. Is that fine?"", 'comment_created': datetime.datetime(2020, 7, 26, 10, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 460516915, 'comment_body': '>  the partial was getting a little ugly with the if else ladder of confirmation and MFA\r\n\r\nTo clarify, I am not saying to remove the entire method. I am saying since `content_tag(:span, class: ""owners__icon"")` is there in both if and else blocks, may be we don\'t need to duplicate it or keep it in the helper method.', 'comment_created': datetime.datetime(2020, 7, 26, 11, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460517032, 'comment_body': ""Yeah, it is fine. I didn't realize at the time if will conflict with our definition of `confirmed`."", 'comment_created': datetime.datetime(2020, 7, 26, 11, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460518776, 'comment_body': 'please add a test for mail being sent. Check EmailHelpers.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460519474, 'comment_body': 'context should be a condition not an action. Perhaps `gem has more than one owner`?\r\nsame issue with line 88.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460519642, 'comment_body': 'May be call this `@second_owner`', 'comment_created': datetime.datetime(2020, 7, 26, 12, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520011, 'comment_body': ""IMHO, creating ownership and then destroying ownership in a nested setup feel unnecessary and makes the test hard to read. I don't think context at line 78 and 88 need a shared setup.\r\nNote that, readability is more important in tests than code duplication."", 'comment_created': datetime.datetime(2020, 7, 26, 12, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520078, 'comment_body': 'Please add test for mail being sent.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520341, 'comment_body': 'It is fine if you want to group all failures in a `with incorrect params` context. However, the following three should blocks need their own context.\r\n```\r\ncontext ""gem was not found"" do\r\n   should ""show 404 error page"" do\r\n  end\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 12, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520587, 'comment_body': 'please use setup for the above two line.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520733, 'comment_body': 'This setup would be cleaner if we were not sharing setup (line 152) with the above context (line 157).', 'comment_created': datetime.datetime(2020, 7, 26, 12, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520762, 'comment_body': 'move this to setup block.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520839, 'comment_body': ""please add a test that this doesn't sign in the user."", 'comment_created': datetime.datetime(2020, 7, 26, 12, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460520968, 'comment_body': 'Is it possible to create a separate PR for this change?', 'comment_created': datetime.datetime(2020, 7, 26, 12, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460521170, 'comment_body': ""I don't think `at level` part is needed."", 'comment_created': datetime.datetime(2020, 7, 26, 12, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460521715, 'comment_body': 'Can we use `build` for the above test? It is nicer to use the least possible pre-condition to set up what we are testing. Also, add assert for `valid?`. check user_test.rb.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460521785, 'comment_body': 'perhaps calling `confirmed?` makes more sense.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460522034, 'comment_body': 'Maybe add a context here `ownership is unconfirmed`.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460522211, 'comment_body': 'It would be better to check confirmed_at value. Use `freeze_time`.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460522253, 'comment_body': 'Two separate contexts, please.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 460866201, 'comment_body': ""Added ownership notifier to existing mailer only. I'll do separation later if needed."", 'comment_created': datetime.datetime(2020, 7, 27, 12, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 460870012, 'comment_body': 'test/integration/owner_test.rb:29\r\nI have already added tests for mails. It more makes sense in integration test I feel.\r\nwdyt?', 'comment_created': datetime.datetime(2020, 7, 27, 12, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 460891209, 'comment_body': ""Do you mean doing \r\n\r\n`@ownership = create(:ownership, :unconfirmed, user: @user, rubygem: @rubygem, token_expires_at: Time.current - 2.hours)`\r\n\r\nin setup (L:152)?\r\ntoken_expires_at isn't defined in factory..\r\n"", 'comment_created': datetime.datetime(2020, 7, 27, 13, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 460892423, 'comment_body': 'Sure, directory change right?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 461733993, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 7, 28, 17, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 461734414, 'comment_body': ""> token_expires_at isn't defined in factory..\r\n\r\nAdd it please"", 'comment_created': datetime.datetime(2020, 7, 28, 17, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 461736081, 'comment_body': ""Let's keep it in both places. In controller tests, it is nice to check every state we are changing in the controller action."", 'comment_created': datetime.datetime(2020, 7, 28, 17, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 462137295, 'comment_body': '`token_expires_at` is being set by before_create hook.\r\nI think using `travel_to` makes sense here.', 'comment_created': datetime.datetime(2020, 7, 29, 8, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 462148208, 'comment_body': 'https://github.com/rubygems/rubygems.org/pull/2471', 'comment_created': datetime.datetime(2020, 7, 29, 9, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 468432457, 'comment_body': ""remove `!important` from here. didn't mean to add it."", 'comment_created': datetime.datetime(2020, 8, 11, 9, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 468444655, 'comment_body': 'lets add \r\n> remove @owner.display_handle as an owner from @rubygem.name gem using `gem owner -r @owner.display` or _link_to_gem_ownership_page_ page', 'comment_created': datetime.datetime(2020, 8, 11, 9, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 470963233, 'comment_body': 'This seems hacky. Please create an action for this in the password controller. You can use the session to pass redirect_uri.\r\n\r\nEdit: removed param from suggestion. it is not as secure as session.', 'comment_created': datetime.datetime(2020, 8, 15, 10, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 470963419, 'comment_body': 'Please redirect to for `""passwords/verify""` with a flash message that the password was incorrect. \r\nAlso, please make sure we are checking signed in user for this action.', 'comment_created': datetime.datetime(2020, 8, 15, 10, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 470963540, 'comment_body': ""I don't think we need the forgot password link here."", 'comment_created': datetime.datetime(2020, 8, 15, 10, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 470963608, 'comment_body': 'Is just `t(""notice`)` not working?', 'comment_created': datetime.datetime(2020, 8, 15, 10, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}]","[{'commit_sha': 'bc5331fe50b60af976017281821940e82423a70a', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba34e462515bcf22f2e7f23da3daa118c32b2b61', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b358c05efbf18a471af4939e0cc451324695873', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d802e9bb8eb5684b799f669d6c86f1c0f184b52', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07169b05029643571894b371e4a8d1ea04675808', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f01881d4cb3ee0b7da0ceb637d276c522a5ad978', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '469c099004b48bf7ec783b9d4a8324edac7ef349', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189ff062d9181ce8d27a25d6f94ac2b8598f312c', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8c00627ec9b3b3309b59368b9301af97a6f6e11', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08486fe69d448cbf75bf5656325f9d6e3b27129a', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f315c8c65a68c7b82a2c91aad2d855a920e3baa', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb2e448750365f39e772b74a917d318cb317a9e5', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb21f9b0b613379e126e04af9c70fc206efedb16', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd412cd7810537ec9d860a04967c26c4e96a7b6e6', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e49f4eafd1cd9722f4941ef97d7006eb8c29ac9', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd43787680e00f6e7130a05cf45e6b4259c42bcf9', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f4568026f80f8649b2a2f6432b46494f072930', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d1315eaaaaa096fc43c623347d01b16a1b826e2', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b406ce6bb757e6d36ca9544ec14c1b84c9d3c86', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b46ad0e61605c258285f418e199bb4a926da66e', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87aa3371cf2437742ab40801ecb2d4916b070cd9', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39af7ec6f40d2993885150ea4da8806673bdcb7f', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976912824d94d2718cc3f74ce72463f225a03774', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2fbeffe885ef2bc68e87bcd7f19cd3e2fdf77ac', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
462826313,Ownership transfer,,False,22,https://api.github.com/repos/vachhanihpavan/rubygems.org/pulls/22,https://github.com/vachhanihpavan/rubygems.org/pull/22,open,1651,15,48,3,0,0,0,0,[],2020-08-04 15:04:47+00:00,,0.0,,[],"[{'commit_sha': '0c289f46c39203a5b0b4b6212b621e87c6c49b01', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e455a33fcf68d3b6a933cc6139c7483012c55f78', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd783ec58660032cf212e1db4ab4349eb0b41b80', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
392198362,RFC for ownership transfer,"RFC for new ownership transfer flow.
I have added timeline for my GSoC proposal here as suggested by @sonalkr132.

More details are here:
https://github.com/rubygsoc/rubygsoc/wiki/Ideas-for-RubyGems#add-gem-owner-add-and-remove-in-web-ui-of-rubygemsorg",True,25,https://api.github.com/repos/rubygems/rfcs/pulls/25,https://github.com/rubygems/rfcs/pull/25,closed,154,0,1,18,1,9,0,0,[],2020-03-23 07:06:41+00:00,2020-09-13 12:23:01+00:00,15052580.0,"174 days, 5:16:20","[{'comment_id': 400007542, 'comment_body': 'message for the ge, owner, from the user who created the application.', 'comment_created': datetime.datetime(2020, 3, 30, 8, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 400008324, 'comment_body': 'owner, all other pending (state: 0) `ownership request` (s) will be deleted.', 'comment_created': datetime.datetime(2020, 3, 30, 8, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 400009158, 'comment_body': 'New searchable view of `ownership requests`', 'comment_created': datetime.datetime(2020, 3, 30, 8, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 400010003, 'comment_body': 'notification to all owners will be send after user has confirmed owner addition.', 'comment_created': datetime.datetime(2020, 3, 30, 8, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 400010579, 'comment_body': ""we will also send email notification when they are removed from a gem (gem owner -r). this won't require confirmation or send mail to all owners (just to owner being removed)."", 'comment_created': datetime.datetime(2020, 3, 30, 8, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 400013884, 'comment_body': 'Add a label to gem show page for gems with `ownership requests`', 'comment_created': datetime.datetime(2020, 3, 30, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 405090514, 'comment_body': 'please remove 4 usages of `adoption request`.', 'comment_created': datetime.datetime(2020, 4, 7, 20, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 406332099, 'comment_body': 'I\'m not sure if I understand well the 100.000 downloads and 12 months updated limitations here.\r\n\r\nLet\'s say I\'m gem owner of popular but unmaintained gem breaking both those limits and I have not set gem in `looking for maintainers` mode. If I understand it well, nobody can make an `ownership application`. Is that any basic kind of ""anti-spam"" filter here?\r\n\r\nAlso I do not follow that creating `ownership request` is actually term for ""looking for maintainers"". `gem owner` creates `ownership request` sounds more like opposite case (asking to get ownership of 3rd party gem) IMHO. I\'m not native :gb: speaker, but something like ""call for maintainers"" would be IMHO better terminology in here.\r\n\r\nLast idea is about automated switch to `looking for maintainers` for gem matching some criteria or (less intrusive) to at least send friendly email to owners to consider marking gem as `looking for maintainers`.', 'comment_created': datetime.datetime(2020, 4, 9, 16, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'simi', 'type': 'User'}, {'comment_id': 407027072, 'comment_body': '>  Is that any basic kind of ""anti-spam"" filter here?\r\n\r\nyes, anti-spam and limiting impact of anyone replacing gem source with malicious code. If a significant number of users are downloading a gem, I would say it has enough credibility to stay on our site undisturbed (unless explicitly allowed by existing owners). \r\n\r\n> creating `ownership request` is actually term for ""looking for maintainers""\r\n\r\nmy personal preference with using `ownership ..` in name is that it keep things aligned with existing ownership model.\r\nI agree `ownership request` is a bit confusing, my PR on rg.org uses `adoption request` which is only slight better. However, the word `adoption` (or `looking for maintainers`) gives the false idea that existing gem will be maintained, when the new owner can replace the gem content if they chose to do so.\r\nWe are open to suggestion for a better a name, which keeps it clear that user being added with this new flow has same guarantees as `gem owner -a/r`.\r\n\r\n> send friendly email to owners to consider marking gem as looking for maintainers\r\n\r\na blog post will definitely be in order, not so sure about email to all users. It would depend on how good or bad the roll-out it. ', 'comment_created': datetime.datetime(2020, 4, 11, 6, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}]","[{'commit_sha': '262806b2cb4dd869e1da2475aa7c16126c104a58', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00fb7fd9cf7b8fb2f2fbca3c2dab4afa7775d7ef', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05ed3238a624b61899ae9a4c1ed0bf806fb6882c', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fb2f00708f5155e6682b2b13238c7d30fefca64', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd97e20886a3e62af6434d074573ed37f5c76804d', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741e3f38283b689d88e8f55d590048e2c3724271', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '997cbf76672dd7948c03e9a55fb31de92b64c659', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab5826f9a0989800d2f08e8d26c273767817479', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655e737f0eefb8a115a9033612eac24dd6f1a72c', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38c74ef0413fe21494387baffd40aaefb045dabb', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a86e8606df260419edd177a159a6c1c8f2e40e4d', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01e92b8cab3053acd100c2fb7b41a124f32e4d69', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c3b50a66729d1cbab2f10530336fae99f75f313', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6cd8af277689d38515307799c6c0ce54647eb6', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851146e69fb71dc434918bbb78068ac5ebf293b2', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '709a351d2e6f7572a3b7a19774704d472e5481a8', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '432fa160f28ad7808ff5c165adfbad3c8bf7d7d1', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07d7d756a01d6ccae9fb53dc14f767f168531049', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
470208865,Add guide for owners add/remove via UI,Guides for changes in https://github.com/rubygems/rubygems.org/pull/2357,True,265,https://api.github.com/repos/rubygems/guides/pulls/265,https://github.com/rubygems/guides/pull/265,closed,56,1,7,4,0,0,0,0,[],2020-08-19 14:36:47+00:00,2020-09-17 16:06:11+00:00,2510964.0,"29 days, 1:29:24",[],"[{'commit_sha': 'cc636853e12a40d4a00d9224d1aaf81f725b8122', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45bc3d06fc91b6a57954be1f3d92d6cea716da6a', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bb88b8ef5ce8b2b4d983217b91f41ce86f1fbcf', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4241a8391a74f4014b4df51f6cf78e6342c404b4', 'committer_username': 'sonalkr132', 'committer_name': 'Aditya Prakash', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 23, 13, 23, 20, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
410695608,Show yanked gem in search filters,"Changes Done:

1. Show filter `YANKED (1)` if a gem with exact matching name exists.
2. Show yanked badge

:computer: Screenshots
![search](https://user-images.githubusercontent.com/29918760/80597948-3a60fd00-8a46-11ea-8292-34279634f4ac.png)

All versions of gem `a` is yanked. So, it won't appear in search results. 
A filter will appear if a gem with exact name matches.
Refs:
[1](https://github.com/rubygems/rubygems.org/pull/2262#issuecomment-599189758)
[2](https://github.com/rubygems/rubygems.org/pull/2262#issuecomment-620031464)

![yanked-filter](https://user-images.githubusercontent.com/29918760/80598187-99bf0d00-8a46-11ea-8faf-f8bd48c88d58.png)
On clicking the YANKED filter.

Rework on #2110 ",True,2339,https://api.github.com/repos/rubygems/rubygems.org/pulls/2339,https://github.com/rubygems/rubygems.org/pull/2339,closed,90,19,16,7,2,10,0,0,[],2020-04-29 12:56:03+00:00,2020-06-04 23:10:06+00:00,3147243.0,"36 days, 10:14:03","[{'comment_id': 417294143, 'comment_body': 'Is this fine?\r\n`t(""versions.version.yanked"") + "" (1)""`\r\nOr better to make a new key? Though count will always be 1', 'comment_created': datetime.datetime(2020, 4, 29, 12, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 423571059, 'comment_body': 'Added a new key with i18n value', 'comment_created': datetime.datetime(2020, 5, 12, 8, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 426827118, 'comment_body': 'this condition should exist in controller\r\nhttps://stackoverflow.com/questions/15823695/best-practice-passing-instance-variables-or-using-params-in-ruby-on-rails-view', 'comment_created': datetime.datetime(2020, 5, 18, 18, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427101790, 'comment_body': ""@sonalkr132 I think this also isn't a good way. \r\n`suggestions = es_suggestions(@gems)` returns nil if `es_suggestions(@gems)` is nil. So, it works.\r\nBut assignment in if condition is not cool.\r\n\r\nWe can change it to \r\n```\r\n<% suggestions = es_suggestions(@gems) %>\r\n<% if suggestions %>\r\n```"", 'comment_created': datetime.datetime(2020, 5, 19, 7, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 427751341, 'comment_body': ""yes, although rubocop doesn't support erb.. we try to follow all of [style guides](https://github.com/rubocop-hq/ruby-style-guide#safe-assignment-in-condition) they list."", 'comment_created': datetime.datetime(2020, 5, 20, 5, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427751513, 'comment_body': 'new line, please.', 'comment_created': datetime.datetime(2020, 5, 20, 5, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427816293, 'comment_body': 'maybe check if params is  `true` and set var to boolean?', 'comment_created': datetime.datetime(2020, 5, 20, 8, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427817595, 'comment_body': ""we want to make sure we aren't using any user input data directly in view. they can send all kinds of garbage. "", 'comment_created': datetime.datetime(2020, 5, 20, 8, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427859430, 'comment_body': 'Done! :+1: ', 'comment_created': datetime.datetime(2020, 5, 20, 9, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 429566582, 'comment_body': 'please updated this to use `yanked` param.\r\n`@request.cookies[""new_search""] = ""true""` is not needed. remove it from your setup and maybe send a new PR updating old these where this is still being used.', 'comment_created': datetime.datetime(2020, 5, 23, 18, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}]","[{'commit_sha': '1258d95d7c303f6295bf1860c7396b1c879d4ede', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e20e0e11f104dbf22328c570032888e7aad194', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b251aa8c4284a96501ffc381e4dd0a011936a19', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2a071374d7dcc7eaa48607635fecc4892e7981', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60a9691ce5eb58989e06f7f4bdebcf3dad76f74', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '788860da6b2ba11bb5242c437a46f4528c53d30e', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1240ef11b4301d2626421d35f885184bef5dff', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
444285692,Fix SimpleCov for correct coverage report ,"According to the documentation of SimpleCov

> If SimpleCov starts after your application code is already loaded (via require), it won't be able to track your files and their coverage! The SimpleCov.start must be issued before any of your application code is required!

Earlier coverage report looked like this
![Screenshot from 2020-07-04 19-06-23](https://user-images.githubusercontent.com/29918760/86513651-902c9980-be29-11ea-9534-94c16a40b4cb.png)


This change reports the code coverage correctly.
![Screenshot from 2020-07-04 18-59-34](https://user-images.githubusercontent.com/29918760/86513582-f7961980-be28-11ea-8cf8-76040a95fd15.png)
",True,2438,https://api.github.com/repos/rubygems/rubygems.org/pulls/2438,https://github.com/rubygems/rubygems.org/pull/2438,closed,3,3,1,1,1,0,0,0,[],2020-07-04 13:37:50+00:00,2020-07-06 11:04:22+00:00,163592.0,"1 day, 21:26:32",[],"[{'commit_sha': '7f688838e68edfe8208c31aad317dc7d8259c619', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
445313366,Removed unnecessary ES cookie from tests,"Cookie based ES toggle was introduced [here](https://github.com/rubygems/rubygems.org/commit/5f0ba2b32ec59adc9cebed237e51e933fb94ed01#) which was then removed as ES search for fully enabled [here](https://github.com/rubygems/rubygems.org/commit/8265fbb5a35536bcfecfdba301a7ac65074b1666#diff-66694174e90422724c8c508d12a0f225)

We can remove it from the tests too :smile: ",True,2442,https://api.github.com/repos/rubygems/rubygems.org/pulls/2442,https://github.com/rubygems/rubygems.org/pull/2442,closed,0,3,1,1,1,0,0,0,[],2020-07-07 10:18:03+00:00,2020-07-09 06:11:31+00:00,158008.0,"1 day, 19:53:28",[],"[{'commit_sha': 'fc240cf8e6706e05b2d501a96061a98aaadec73c', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
458296385,Move owners integration test to API directory,"This file contains integration tests of owners API.
Need to move this to api/ directory for adding owners test for UI

Ref: https://github.com/rubygems/rubygems.org/pull/2357#discussion_r460520968",True,2471,https://api.github.com/repos/rubygems/rubygems.org/pulls/2471,https://github.com/rubygems/rubygems.org/pull/2471,closed,1,1,1,1,1,0,0,0,[],2020-07-29 08:59:25+00:00,2020-07-29 15:14:07+00:00,22482.0,6:14:42,[],"[{'commit_sha': 'f0951a8e6d5403db9a7d881715853c42d6e12c8b', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
438680553,Extracted mailer partial to make code DRY,"As suggested by @sonalkr132 in this [PR comment](https://github.com/rubygems/rubygems.org/pull/2357#discussion_r440662487), extracted common instructions in the mailer views to a partial.",True,2421,https://api.github.com/repos/rubygems/rubygems.org/pulls/2421,https://github.com/rubygems/rubygems.org/pull/2421,closed,25,31,4,2,0,2,0,0,[],2020-06-23 16:21:38+00:00,2020-06-26 07:16:08+00:00,226470.0,"2 days, 14:54:30","[{'comment_id': 444653883, 'comment_body': 'Can we add this in the yield part?', 'comment_created': datetime.datetime(2020, 6, 24, 5, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 445001441, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 6, 24, 15, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}]","[{'commit_sha': '4e9b8b92eaf761dbe61a457496e2a8a84704baf6', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '443296c9a3cb81425e066a571d24fdaa7173cdbf', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
388403618,Added route to redirect /users to /profile,"Added redirect route to allow ""/users/xyz"" route to redirect to ""profiles/xyz""

Closes #2240 ",False,2264,https://api.github.com/repos/rubygems/rubygems.org/pulls/2264,https://github.com/rubygems/rubygems.org/pull/2264,closed,10,0,3,3,6,4,0,0,[],2020-03-14 19:04:23+00:00,2020-04-10 15:10:26+00:00,2318763.0,"26 days, 20:06:03","[{'comment_id': 394242394, 'comment_body': ""I feel like the `if` expression is over engineering the problem. If the current route is not recognized, then it's not a protected route and just returning `false` is perfectly fine."", 'comment_created': datetime.datetime(2020, 3, 18, 10, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'colby-swandale', 'type': 'User'}, {'comment_id': 394494967, 'comment_body': 'are we sure we want to support this at cost of this code complexity? I would lean towards @simi suggestion that typo should be fixed. What if we get another issue where another user had used avatars, accounts, etc instead of profiles?\r\n', 'comment_created': datetime.datetime(2020, 3, 18, 16, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 400021912, 'comment_body': 'We will need the `rescue` for #2297', 'comment_created': datetime.datetime(2020, 3, 30, 8, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'colby-swandale', 'type': 'User'}, {'comment_id': 403551834, 'comment_body': ""I keep getting suspicious of this `rescue`. Feels ripe for abuse to bypass the rate limits.\r\nThere was plan of [`recognize_path` supporting `Redirect`](https://github.com/rails/rails/pull/6922/files#diff-ccdef70ce0e95afc8816f47f89b56c60R657) but it didn't get through.\r\nAt very least, we should raise the error back if `Rails.application.routes.call(req.env)[0]` is not `301`.\r\n\r\n@dwradcliffe any opinion on this? It was your idea to support this. We could be using fastly or nginx, which already have other redirects we use."", 'comment_created': datetime.datetime(2020, 4, 4, 22, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}]","[{'commit_sha': 'a881cf64115368850935cc0680f98e992c642ae2', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5666c8517f39e19a38e45c8026280c96c2c9827a', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5546c9af3c0551048e85839cdb101240865ab162', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27
410695608,Show yanked gem in search filters,"Changes Done:

1. Show filter `YANKED (1)` if a gem with exact matching name exists.
2. Show yanked badge

:computer: Screenshots
![search](https://user-images.githubusercontent.com/29918760/80597948-3a60fd00-8a46-11ea-8292-34279634f4ac.png)

All versions of gem `a` is yanked. So, it won't appear in search results. 
A filter will appear if a gem with exact name matches.
Refs:
[1](https://github.com/rubygems/rubygems.org/pull/2262#issuecomment-599189758)
[2](https://github.com/rubygems/rubygems.org/pull/2262#issuecomment-620031464)

![yanked-filter](https://user-images.githubusercontent.com/29918760/80598187-99bf0d00-8a46-11ea-8faf-f8bd48c88d58.png)
On clicking the YANKED filter.

Rework on #2110 ",True,2339,https://api.github.com/repos/rubygems/rubygems.org/pulls/2339,https://github.com/rubygems/rubygems.org/pull/2339,closed,90,19,16,7,2,10,0,0,[],2020-04-29 12:56:03+00:00,2020-06-04 23:10:06+00:00,3147243.0,"36 days, 10:14:03","[{'comment_id': 417294143, 'comment_body': 'Is this fine?\r\n`t(""versions.version.yanked"") + "" (1)""`\r\nOr better to make a new key? Though count will always be 1', 'comment_created': datetime.datetime(2020, 4, 29, 12, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 423571059, 'comment_body': 'Added a new key with i18n value', 'comment_created': datetime.datetime(2020, 5, 12, 8, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 426827118, 'comment_body': 'this condition should exist in controller\r\nhttps://stackoverflow.com/questions/15823695/best-practice-passing-instance-variables-or-using-params-in-ruby-on-rails-view', 'comment_created': datetime.datetime(2020, 5, 18, 18, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427101790, 'comment_body': ""@sonalkr132 I think this also isn't a good way. \r\n`suggestions = es_suggestions(@gems)` returns nil if `es_suggestions(@gems)` is nil. So, it works.\r\nBut assignment in if condition is not cool.\r\n\r\nWe can change it to \r\n```\r\n<% suggestions = es_suggestions(@gems) %>\r\n<% if suggestions %>\r\n```"", 'comment_created': datetime.datetime(2020, 5, 19, 7, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 427751341, 'comment_body': ""yes, although rubocop doesn't support erb.. we try to follow all of [style guides](https://github.com/rubocop-hq/ruby-style-guide#safe-assignment-in-condition) they list."", 'comment_created': datetime.datetime(2020, 5, 20, 5, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427751513, 'comment_body': 'new line, please.', 'comment_created': datetime.datetime(2020, 5, 20, 5, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427816293, 'comment_body': 'maybe check if params is  `true` and set var to boolean?', 'comment_created': datetime.datetime(2020, 5, 20, 8, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427817595, 'comment_body': ""we want to make sure we aren't using any user input data directly in view. they can send all kinds of garbage. "", 'comment_created': datetime.datetime(2020, 5, 20, 8, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}, {'comment_id': 427859430, 'comment_body': 'Done! :+1: ', 'comment_created': datetime.datetime(2020, 5, 20, 9, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vachhanihpavan', 'type': 'User'}, {'comment_id': 429566582, 'comment_body': 'please updated this to use `yanked` param.\r\n`@request.cookies[""new_search""] = ""true""` is not needed. remove it from your setup and maybe send a new PR updating old these where this is still being used.', 'comment_created': datetime.datetime(2020, 5, 23, 18, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sonalkr132', 'type': 'User'}]","[{'commit_sha': '1258d95d7c303f6295bf1860c7396b1c879d4ede', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e20e0e11f104dbf22328c570032888e7aad194', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b251aa8c4284a96501ffc381e4dd0a011936a19', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2a071374d7dcc7eaa48607635fecc4892e7981', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60a9691ce5eb58989e06f7f4bdebcf3dad76f74', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '788860da6b2ba11bb5242c437a46f4528c53d30e', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1240ef11b4301d2626421d35f885184bef5dff', 'committer_username': 'vachhanihpavan', 'committer_name': 'Pavan Vachhani', 'committer_email': 'vachhanihpavan@gmail.com', 'commit_date': datetime.datetime(2017, 7, 5, 11, 22, 10, tzinfo=datetime.timezone.utc)}]",Pavan Vachhani,29918760,vachhanihpavan@gmail.com,User,,23,,22,27

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
117646,rubygems.org,rubygems/rubygems.org,Ruby,911,2313,105,460,10822,72,79,22,"[{'id': 458296385, 'number': 2471, 'closed': datetime.datetime(2020, 7, 29, 15, 14, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 8, 59, 25, tzinfo=datetime.timezone.utc), 'time_taken': 22482.0, 'time_delta': '6:14:42', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 445313366, 'number': 2442, 'closed': datetime.datetime(2020, 7, 9, 6, 11, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 10, 18, 3, tzinfo=datetime.timezone.utc), 'time_taken': 158008.0, 'time_delta': '1 day, 19:53:28', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 444285692, 'number': 2438, 'closed': datetime.datetime(2020, 7, 6, 11, 4, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 13, 37, 50, tzinfo=datetime.timezone.utc), 'time_taken': 163592.0, 'time_delta': '1 day, 21:26:32', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 438680553, 'number': 2421, 'closed': datetime.datetime(2020, 6, 26, 7, 16, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 16, 21, 38, tzinfo=datetime.timezone.utc), 'time_taken': 226470.0, 'time_delta': '2 days, 14:54:30', 'additions': 25, 'deletions': 31, 'state': 'closed'}, {'id': 418983828, 'number': 2357, 'closed': datetime.datetime(2020, 9, 13, 12, 5, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 16, 15, 34, 44, tzinfo=datetime.timezone.utc), 'time_taken': 10355452.0, 'time_delta': '119 days, 20:30:52', 'additions': 2317, 'deletions': 167, 'state': 'closed'}, {'id': 410695608, 'number': 2339, 'closed': datetime.datetime(2020, 6, 4, 23, 10, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 29, 12, 56, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3147243.0, 'time_delta': '36 days, 10:14:03', 'additions': 90, 'deletions': 19, 'state': 'closed'}, {'id': 391823694, 'number': 2274, 'closed': datetime.datetime(2020, 3, 23, 12, 13, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 21, 6, 44, 5, tzinfo=datetime.timezone.utc), 'time_taken': 192573.0, 'time_delta': '2 days, 5:29:33', 'additions': 65, 'deletions': 61, 'state': 'closed'}, {'id': 388403618, 'number': 2264, 'closed': datetime.datetime(2020, 4, 10, 15, 10, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 19, 4, 23, tzinfo=datetime.timezone.utc), 'time_taken': 2318763.0, 'time_delta': '26 days, 20:06:03', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 387696584, 'number': 2262, 'closed': datetime.datetime(2020, 4, 26, 4, 39, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 10, 15, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3781395.0, 'time_delta': '43 days, 18:23:15', 'additions': 122, 'deletions': 23, 'state': 'closed'}]"
247041901,rubygems.org,vachhanihpavan/rubygems.org,Ruby,0,1,1,373,7115,57,64,57,"[{'id': 469618379, 'number': 33, 'closed': None, 'created': datetime.datetime(2020, 8, 18, 16, 48, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 223, 'deletions': 195, 'state': 'open'}, {'id': 468080081, 'number': 29, 'closed': datetime.datetime(2020, 8, 15, 6, 14, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 16, 42, 36, tzinfo=datetime.timezone.utc), 'time_taken': 48694.0, 'time_delta': '13:31:34', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 462826313, 'number': 22, 'closed': None, 'created': datetime.datetime(2020, 8, 4, 15, 4, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1651, 'deletions': 15, 'state': 'open'}, {'id': 451695331, 'number': 15, 'closed': datetime.datetime(2020, 7, 29, 19, 27, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 4, 34, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1004017.0, 'time_delta': '11 days, 14:53:37', 'additions': 1766, 'deletions': 142, 'state': 'closed'}, {'id': 445307086, 'number': 8, 'closed': datetime.datetime(2020, 7, 7, 10, 11, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 10, 7, 6, tzinfo=datetime.timezone.utc), 'time_taken': 249.0, 'time_delta': '0:04:09', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 444855912, 'number': 5, 'closed': None, 'created': datetime.datetime(2020, 7, 6, 15, 42, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1466, 'deletions': 113, 'state': 'open'}, {'id': 391010267, 'number': 1, 'closed': datetime.datetime(2020, 3, 20, 9, 1, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 13, 40, 56, tzinfo=datetime.timezone.utc), 'time_taken': 69622.0, 'time_delta': '19:20:22', 'additions': 24, 'deletions': 22, 'state': 'closed'}]"
75561290,rfcs,rubygems/rfcs,,40,45,34,15,102,15,8,6,"[{'id': 392198362, 'number': 25, 'closed': datetime.datetime(2020, 9, 13, 12, 23, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 23, 7, 6, 41, tzinfo=datetime.timezone.utc), 'time_taken': 15052580.0, 'time_delta': '174 days, 5:16:20', 'additions': 154, 'deletions': 0, 'state': 'closed'}]"
1668059,guides,rubygems/guides,SCSS,189,153,25,181,972,15,2,5,"[{'id': 470208865, 'number': 265, 'closed': datetime.datetime(2020, 9, 17, 16, 6, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 14, 36, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2510964.0, 'time_delta': '29 days, 1:29:24', 'additions': 56, 'deletions': 1, 'state': 'closed'}]"
