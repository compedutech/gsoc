pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1420154279,Landmark Routing 1 PR: Landmark database,"fixes #4134 

# Issue

Implement a sqlite database as the intermediate storage for parsed landmarks.
[Landmark Routing 1: Intermediate Storage for Parsed Landmarks](https://github.com/valhalla/valhalla/issues/4134)

## Parent project

[GSOC Landmark-based navigation](https://github.com/orgs/valhalla/projects/3?pane=issue&itemId=29465920)

",True,4189,https://api.github.com/repos/valhalla/valhalla/pulls/4189,https://github.com/valhalla/valhalla/pull/4189,closed,358,0,5,21,8,29,0,0,[],2023-07-04 21:15:03+00:00,2023-07-13 16:56:37+00:00,762094.0,"8 days, 19:41:34","[{'comment_id': 1253007743, 'comment_body': 'this body of this function and the function below should both be put in the constructor for the class. it doesnt make a lot of sense to have the person who instantiates the db tell it to do this stuff that has to be done regardless, lets just do it automatically.\r\n\r\nnow it may be the case that we have to differentiate between opening for the first time and opening for reading/appending but i kind of think there is very little if any work to make that happen', 'comment_created': datetime.datetime(2023, 7, 5, 12, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253010464, 'comment_body': 'indexing should also happen automatically ', 'comment_created': datetime.datetime(2023, 7, 5, 12, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253011660, 'comment_body': 'this should be done in the destructor no special function needed', 'comment_created': datetime.datetime(2023, 7, 5, 12, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253021739, 'comment_body': ""this should also select and return the geom. you should use st_intersects to future proof this. to create the bounding box you need to use st_envelope and probably also st_setsrid to tell it that it's the lat lon projection"", 'comment_created': datetime.datetime(2023, 7, 5, 12, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253030917, 'comment_body': 'nit: generally we use snake case for everything to kind of match the stl. there are some parts of the code that match the google style like you have here but havent been doing that for quite some time except in the case where there is already an established class. for new stuff snake case please', 'comment_created': datetime.datetime(2023, 7, 5, 12, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253035359, 'comment_body': 'ah i see maybe `buildmbr` just needs you to also pass the srid 4326?', 'comment_created': datetime.datetime(2023, 7, 5, 12, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253041886, 'comment_body': 'use `sqlite3_bind_double` and pass these args as double from the caller', 'comment_created': datetime.datetime(2023, 7, 5, 12, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253059449, 'comment_body': ""I tried to parse srid 4326 but didn't work. If not clear to you as well I can try to parse real wkt data and see if it works."", 'comment_created': datetime.datetime(2023, 7, 5, 12, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1253060042, 'comment_body': 'will have a try', 'comment_created': datetime.datetime(2023, 7, 5, 12, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1253083466, 'comment_body': 'it really shouldnt be wkt in the end. also the arguments should be doubles not strings. i cant play with it myself at the moment but if you make some of the changes suggested i can take a look maybe at night', 'comment_created': datetime.datetime(2023, 7, 5, 13, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1253092134, 'comment_body': ""no problem. whenerver you are free. I'm working on the code reviews and will make some changes but probably not all of them"", 'comment_created': datetime.datetime(2023, 7, 5, 13, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1257337230, 'comment_body': ""`CastToPoint` seems like a no-op here, `MakePoint` should also create that exact geom. You can try `ST_Point`, which doesn't take the SRID (it's already defined on the column when you create the table)\r\n\r\nBut yeah, repeating the same thing on the command line is a good way to debug:)"", 'comment_created': datetime.datetime(2023, 7, 8, 19, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1259646403, 'comment_body': 'i assume these will be removed', 'comment_created': datetime.datetime(2023, 7, 11, 12, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1259646988, 'comment_body': 'we should make these protected and do them automatically based on lifetime of the object', 'comment_created': datetime.datetime(2023, 7, 11, 12, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1259647182, 'comment_body': '```suggestion\r\nprotected:\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 12, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261855986, 'comment_body': 'can we rename this file to `test_landmarks.cc` then we can put everything in here not just the builder', 'comment_created': datetime.datetime(2023, 7, 13, 0, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261857457, 'comment_body': 'in the next pr where you add parsing real data this will need to be come an enum of type uint8_t', 'comment_created': datetime.datetime(2023, 7, 13, 0, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261859485, 'comment_body': 'this interface is surprising, i would have expected:\r\n\r\n```suggestion\r\n  std::vector<Landmark> get_landmarks_in_bounding_box(\r\n```\r\n\r\nif its possible that there is a failure we can log error and throw an exception. which actually  brings me to another good point, these methods should all have javadoc on them. have a look at some of the existing classes where they describe the returns and what each argument is and what the function generally does.', 'comment_created': datetime.datetime(2023, 7, 13, 0, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261860874, 'comment_body': 'all of these except for ptree are probably not even used. we should avoid including things that we do not use, its not free. google the ""include what you use"" to learn more about why its a bad thing to take more than you need', 'comment_created': datetime.datetime(2023, 7, 13, 1, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261864376, 'comment_body': 'this isnt needed. the constructor should take a single boolean that maybe like: `read_only = true`\r\n\r\nthen in the constructor we can figure out the right thing to do automatically:\r\n\r\n```pseudo code\r\nif !exists(file)\r\n  if read_only\r\n    throw invalid option\r\n  open_db(SQLITE_CREATE_FLAG | SQLITE_READWRITE_FLAG)\r\nelse\r\n  open_db(read_only ? SQLITE_READONLY_FLAG : SQLITE_READWRITE_FLAG)\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261865551, 'comment_body': 'honestly we should take all this crap and make a pimpl out of it but we can do it some other time. maybe i can pr that in my free time so you can move on to the next task', 'comment_created': datetime.datetime(2023, 7, 13, 1, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261867041, 'comment_body': 'i know it seems convenient but it is wasteful for the parser to have to allocate (copy) the parsed data into a new structure just so you can push it into the database. if the builder itself takes a long time this is a place we can look to speed it up. for now we can leave it alone', 'comment_created': datetime.datetime(2023, 7, 13, 1, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261868443, 'comment_body': '```suggestion\r\n  if (!open_database()) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 1, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261869622, 'comment_body': 'tons of error checking overall, basically all of this stuff is fatal. just log error and throw. no need to return boolean and check and then bubble the boolean out to a higher level. just the let the exception roll up the call stack', 'comment_created': datetime.datetime(2023, 7, 13, 1, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261870300, 'comment_body': 'i think you need to release your prepared statments here too, i forget the function call but i remember it exists', 'comment_created': datetime.datetime(2023, 7, 13, 1, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1261871096, 'comment_body': '`sqlite3_finalize`', 'comment_created': datetime.datetime(2023, 7, 13, 1, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1262267059, 'comment_body': ""I tried to use `std::ifstream` to decide if file exists but it didn't work very well. Do you have a better suggestion?"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1262349911, 'comment_body': 'https://github.com/valhalla/valhalla/blob/master/valhalla/filesystem.h#L367', 'comment_created': datetime.datetime(2023, 7, 13, 10, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1262424601, 'comment_body': ""Thanks for pointing it out. They were copy paste from other files... I have removed the unused imports. It turns out we don't even need p_tree for now but I just comment it in case we need it in the next PR."", 'comment_created': datetime.datetime(2023, 7, 13, 11, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}]","[{'commit_sha': '327816165f343339f29dc2bf25e36595585caf69', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f70f2de667a225bcce987c0b201f7eac221e82b5', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fef416ae25c4788d20f5e924633cee1c16560e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efde24b81dfb1f7c6d0a7b9db0360920bcafb1c7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a84b2b37ea52e5f43d8b84a24ef82c21e062c06', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed802715451bb61043854ede61a5ed05a12b4b88', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff545ee97f8dadb224e9408eb5fd5e747fc32be9', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb1b18ed351db844b63810d886ce99e95bcced5b', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c328ab545a93ac36773a2b19324acc9bd7f8100', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f18561937ed58de089384463eb76ed8ac875bb', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2764ee18b43e8dbd6e0b51738f75c48f6419f932', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f2fb0841c86d88fef3562099171f4a30078f79', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf87dfc19d2095910623695fa3478fb5f9b10d5', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81be9c8796feec0085a1f0eb6dc1c0aa748ce9f', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f803aaddab8adb947129c7fa4d9fce597ef95f11', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0f772c795d88f8e80756c3005ceec5c08072ae7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '094d546dcb67c3d325df87ae7667012b2943fbd1', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b08422edf334133ac5205cac8e592bade6ef0ad', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af960b5a79048b5b5f2d1899f24abd121f3daa86', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '990f6ad1ad8a58899a6405620705d79f397c8293', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6adbaf98e4d6eba60315cc3ef06a36ed27bc5488', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}]",,91609682,,User,,2,,0,1
1452491106,Landmark Routing 1 PR: Add primary key for landmark database and landmark getter via primary key,"# Issue
To faciliate landmark storage in tiles, primary key is added in landmark databse to enable getting a landmark via its primary key.
 
## Tasklist

 - [x] add primary key to the landmarks database 
 - [x] add a method to be able to retreive a landmark from the db via its primary key

## Requirements / Relations

[Landmark Routing 3: Tile Storage of Associated Landmarks](https://github.com/valhalla/valhalla/issues/4135)
",True,4224,https://api.github.com/repos/valhalla/valhalla/pulls/4224,https://github.com/valhalla/valhalla/pull/4224,closed,153,39,4,12,2,31,0,0,[],2023-07-27 18:12:59+00:00,2023-08-02 08:13:24+00:00,482425.0,"5 days, 14:00:25","[{'comment_id': 1277416578, 'comment_body': ""for clarity I'd rename `get_landmark` to `get_landmark_by_id`  and everything bbox related to `get_landmarks_by_bbox` (note the plural)."", 'comment_created': datetime.datetime(2023, 7, 28, 11, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1277418086, 'comment_body': ""instead of if/else, consider doing `if (ret != SQLITE_ROW) { throw ...}`, then you don't need the else"", 'comment_created': datetime.datetime(2023, 7, 28, 11, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1277418729, 'comment_body': ""~~Ah I see there's an `else if`. Still, the comment holds, else is not necessary.~~ forget about it, it's fine :sweat_smile: "", 'comment_created': datetime.datetime(2023, 7, 28, 11, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1277420485, 'comment_body': ""this can't happen can it? if so, we should throw I think. passing on a value of `-1` would do crazy things."", 'comment_created': datetime.datetime(2023, 7, 28, 11, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1277421358, 'comment_body': ""same comment holds here, type can't be optional"", 'comment_created': datetime.datetime(2023, 7, 28, 11, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1277479888, 'comment_body': 'you meant the function name below in this case not the prepared statement right?', 'comment_created': datetime.datetime(2023, 7, 28, 12, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277485484, 'comment_body': ""both but primarily the (public) function name, right. the prepare statement and variable names could/should be changed similarly, but that's more of a nit"", 'comment_created': datetime.datetime(2023, 7, 28, 12, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1277488595, 'comment_body': ""i wonder if we need to create an index on the primary key. i read somewhere on the internet that if you declare a primary key in the way that you have here you won't because under the hood sqlite treats it as an alias of the `rowid` (ordinal row number) for the table."", 'comment_created': datetime.datetime(2023, 7, 28, 12, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277494135, 'comment_body': '```suggestion\r\n    auto landmark_id = static_cast<int64_t>(sqlite3_column_int64(bounding_box_stmt, 0));\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 12, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277494702, 'comment_body': '```suggestion\r\nusing Landmark = std::tuple<int64_t, std::string, LandmarkType, double, double>;\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 12, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277495230, 'comment_body': '```suggestion\r\n  Landmark get_landmark(const int64_t pkey);\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 12, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277496238, 'comment_body': 'i wonder if we should allow batching, this could improve efficiency when we are fetching these things:\r\n\r\n```suggestion\r\nstd::vector<Landmark> LandmarkDatabase::get_landmark(const std::vector<int64_t>& pkeys) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 12, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277497170, 'comment_body': 'i agree, i think we can just skip the if completely and set the type without checking null. we dont ever put a null entry in the db so we cant ever get a null entry out', 'comment_created': datetime.datetime(2023, 7, 28, 12, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277501291, 'comment_body': 'if we decided we wanted batching we\'d either have to not use a prepared statement OR use one with a set level of batching. the latter would be like:\r\n\r\n```suggestion\r\n    const char* get_landmark = ""SELECT id, name, type, X(geom), Y(geom) FROM landmarks WHERE id IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"";\r\n```\r\n\r\nor maybe even programatically adding more question marks, and then when we fill them out in the query below we\'d need to just repeat the last one until we\'ve filled up all the question marks. if the batch size the person gave us in the vector was too small. and do more than 1 batch if the batch size the person gave us in the vector was too large\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 28, 12, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1277506613, 'comment_body': 'good idea. maybe we should allow both cases', 'comment_created': datetime.datetime(2023, 7, 28, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1277508179, 'comment_body': 'got it', 'comment_created': datetime.datetime(2023, 7, 28, 12, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1277740600, 'comment_body': 'I searched online and it seems SQLite automatically does indexing for primary key.\r\nhttps://stackoverflow.com/questions/3379292/is-an-index-needed-for-a-primary-key-in-sqlite', 'comment_created': datetime.datetime(2023, 7, 28, 16, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1277787245, 'comment_body': ""I've added `get_landmarks_by_ids` to flexibly fetch multiple landmarks by ids. the statement is not prepared in advance anymore and no min/max limit of landmark number is set. maybe we should set a max number?"", 'comment_created': datetime.datetime(2023, 7, 28, 16, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1278589185, 'comment_body': ""we should talk about allowing to pass IDs which aren't actually in the DB. I guess we could do it like that and the caller should make sure the returned size is as expected, i.e. in this case `4` doesn't exist."", 'comment_created': datetime.datetime(2023, 7, 30, 16, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1278863814, 'comment_body': 'I\'ve done a few tests to make sure the return size is as expected. since we are using `""SELECT id, name, type, X(geom), Y(geom) FROM landmarks WHERE id IN (?, ?, ?, ?)"";`, adding non-existing ids to the parameter wouldn\'t impact on the existing ids and intended results. it won\'t throw an error either but I guess we don\'t need that :D', 'comment_created': datetime.datetime(2023, 7, 31, 6, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1278877267, 'comment_body': ""> adding non-existing ids to the parameter wouldn't impact on the existing ids and intended results\r\n\r\nSure, there's no negative impact per se, but the caller needs to be aware that the return could be less than what it asked for (and that it does not throw an exception if it encounters a missing ID). \r\n\r\nThat brings up another important point: before merging this, please make sure there's proper docstrings on the header function declarations. A note in the function's docstring about what I just mentioned would be good.\r\n"", 'comment_created': datetime.datetime(2023, 7, 31, 7, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1279035231, 'comment_body': 'done. please take a look', 'comment_created': datetime.datetime(2023, 7, 31, 9, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1280576051, 'comment_body': 'we can put the actual value here instead of `?` and omit preparing the statement\r\n', 'comment_created': datetime.datetime(2023, 8, 1, 12, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1280578658, 'comment_body': 'we should put a TODO to test how this performs and see if we should prepare a default query (like 10-20 elements) and if more come in we extend the statement preparation', 'comment_created': datetime.datetime(2023, 8, 1, 12, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1280829772, 'comment_body': 'done. but i notice sqlite officially suggests to use preparing statement when query includes variables.', 'comment_created': datetime.datetime(2023, 8, 1, 15, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1280829990, 'comment_body': 'done.', 'comment_created': datetime.datetime(2023, 8, 1, 15, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1280948413, 'comment_body': 'Likely because they’re doing some internal validation of the variable type or so. I think in our use case here it’s fine to do as it is now, it’s not a multi-variable statement, just the same many times. ', 'comment_created': datetime.datetime(2023, 8, 1, 17, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1281244387, 'comment_body': 'Hm I just realized this: not that we really need it but why not uint64_t for the index?', 'comment_created': datetime.datetime(2023, 8, 1, 23, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1281297778, 'comment_body': 'because the primary key has to be a signed 64 bit integer to get a free index on that column in sqlite. why they picked signed i do not know but if we want to use unsigned that means we have to add our own index. anyway this is what i read on the internet. if we were going to do something like that we should forget the primary key and use the osmid directly and add an index manually (this could be useful for debugging at some point?) but i figured at the moment its not needed, it did cross my mind though!', 'comment_created': datetime.datetime(2023, 8, 2, 1, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1281298067, 'comment_body': 'very nitpicky but we typically do this extra white space:\r\n\r\n```suggestion\r\n   * database connection is read-only or read-write.\r\n   *\r\n   * @param db_name    The file path of the SQLite database to connect to.\r\n   * @param read_only  Set to true to open the database in read-only mode, false for read-write.\r\n```', 'comment_created': datetime.datetime(2023, 8, 2, 1, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1281468580, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 2, 6, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}]","[{'commit_sha': '4aef18e81f93b6a7115790c58ebb188421e13ab2', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fdf2238feb98082af5bd9656902a7e93bfc48c5', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3764c962795bf9cdd2c15fa4af4a208c16462e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48eb0e59b2dfbed6438d4b02b249d99647f2eb55', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd666329e1cc7ad1f6d79ca664059bd31b3a36bcf', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21bbe54c7cb94a84280d91f62fcbd4049cdae324', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5942eb9d373a133d8629053ea479edbf94898433', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129603a1e7db8592a5b5b031b6400e71334c6bf3', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d48faa1dc11d1081f0347729f5132501f02aca', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0f66ad4f059d7700a3a884f2e26629f62d3c36b', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5f56f5bc56ee8fdf88ce1a165072de614b995bb', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f88fab1113dbef90cf5b813146aa1b8af939b0', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}]",,91609682,,User,,2,,0,1
1434791686,Landmark Routing 1 PR: make landmark db operations a pimpl,"The pimpl idiom is a powerful one especially for api design. It allows the designer to offer up the api interface without exposing the details of how its implemented, effectively giving the api a PrivateIMPLementation.

I think this best suits pretty much all of our c++ apis but sadly not all of them adhere to this. At any rate this is an attempt to refactor the recent work in #4189 to model this.

In addition to the pimpl I cut down logging as much as possible, I only close the db in the destructor and instead of returning booleans I throw when there is a problem that is unrecoverable

By and large the code is pretty much the same just leaner and meaner",True,4202,https://api.github.com/repos/valhalla/valhalla/pulls/4202,https://github.com/valhalla/valhalla/pull/4202,closed,114,203,4,4,5,20,0,0,[],2023-07-14 13:25:45+00:00,2023-07-15 18:48:28+00:00,105763.0,"1 day, 5:22:43","[{'comment_id': 1263740903, 'comment_body': '@vesperlou the diff for the source files below is large so its hard to read. i would suggest just looking at the files directly (in the 3 dots on the side you can click ""view file"")', 'comment_created': datetime.datetime(2023, 7, 14, 13, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1263742829, 'comment_body': 'the interface becomes just the functions that we want to publicly expose. the only thing the outside caller can see that is protected is a pimpl which gives no clue about its implementation', 'comment_created': datetime.datetime(2023, 7, 14, 13, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1263744108, 'comment_body': 'i think this class could get more generic and let users of it register prepared statements, retrieve them and run them. then we could use this class for any sqlite needs. for now i didnt go that far but if we do then this can go to a private header', 'comment_created': datetime.datetime(2023, 7, 14, 13, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1263747613, 'comment_body': 'the constructor does all the initialization stuff directly rather than having myriad functions. if anything goes wrong it throws. if something upstream wants to catch what is thrown and log it fine. i would expect the graph enhancer for example to catch, log that i couldnt open the landmarks database and that its skipping adding landmarks to the tiles. for the writer part i would just let the throw abort the process (ie dont catch)', 'comment_created': datetime.datetime(2023, 7, 14, 13, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1263749674, 'comment_body': 'i pretty much removed all logs except:\r\n\r\n1. the destructor logs when vacuum analyze fails\r\n2. insert/select log trace now because anything else is too verbose', 'comment_created': datetime.datetime(2023, 7, 14, 13, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1263769344, 'comment_body': 'ok, will take a look', 'comment_created': datetime.datetime(2023, 7, 14, 13, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1263874233, 'comment_body': 'got it. I have studied C++ PImpl. nice job, thanks!', 'comment_created': datetime.datetime(2023, 7, 14, 15, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1263879684, 'comment_body': 'only include the necessary, basic standard libraries to avoid unused imports?', 'comment_created': datetime.datetime(2023, 7, 14, 15, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1263885250, 'comment_body': 'make sense.', 'comment_created': datetime.datetime(2023, 7, 14, 15, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1263890191, 'comment_body': 'I feel the same.', 'comment_created': datetime.datetime(2023, 7, 14, 15, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1263891266, 'comment_body': ""before throw an exception we don't need to close database connection?"", 'comment_created': datetime.datetime(2023, 7, 14, 15, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264441648, 'comment_body': 'nope, the connection will be closed when the object is destructed no need to close it ahead of time.', 'comment_created': datetime.datetime(2023, 7, 15, 14, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264441679, 'comment_body': 'if you look below these are the only things the interface makes use of, IWYU', 'comment_created': datetime.datetime(2023, 7, 15, 14, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264444837, 'comment_body': 'OK! got it', 'comment_created': datetime.datetime(2023, 7, 15, 14, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264445680, 'comment_body': 'but we need to finalize statement before destructing the object?', 'comment_created': datetime.datetime(2023, 7, 15, 14, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264527587, 'comment_body': 'yep the finalize statement is in the destructor above before the call to close the connection', 'comment_created': datetime.datetime(2023, 7, 15, 18, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264527661, 'comment_body': 'here you can see we finalize the statements and then close the connection ', 'comment_created': datetime.datetime(2023, 7, 15, 18, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1265163493, 'comment_body': 'sure. I am actually wondering why we should explicitly finalize statements in destructor, because I thought they are going to be cleaned automatically when the object is destroyed, like before throwing we dont have to close the connection.', 'comment_created': datetime.datetime(2023, 7, 17, 10, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265435631, 'comment_body': 'like the db connection the prepared statements are pointing to some memory that was dynamically allocated. in order for us to not ""leak"" memory we do need to manually deallocate that memory. when we `throw` the call immediately bubbles that exception upwards however the rules about what happens to objects when their life time ends still apply. that means if the outside scope that caused the exception was the scope that owned the `LandmarkDatabase` object lets that object go out of scope, its destructor (here) will be called and make sure to clean up the connection and the prepared statements.\r\n\r\nif you mean closing the connection should finalize any statements, i dont think so. prepared statemnts are not tied to any connection they are a wholly separate construct. from the manual:\r\n\r\n> The application must finalize every prepared statement in order to avoid resource leaks.', 'comment_created': datetime.datetime(2023, 7, 17, 14, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1265491931, 'comment_body': 'oh I see. I mixed up some concepts earlier but now I understand everything.\r\nthanks for the detailed explanation!', 'comment_created': datetime.datetime(2023, 7, 17, 14, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}]","[{'commit_sha': '4686d9263d96a67ac6baa93477f927aba7db8bc5', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06f144040544af08187e221e5074829984106140', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cd61fc5983a2520814d4767c0f03f4ada95d7ca', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60957526e1ca7e3e67bb95e682cfef112524ede9', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}]",Kevin Kreiser,697548,,User,,24,,15,113
1434599862,Landmark Routing 2 PR: Landmark parser,"# Issue

fixes #4133 

Implement landmark parser to parse landmarks in pbf and store them in database.

## Requirements / Relations

[Landmark Routing 2: Parse Landmarks](https://github.com/valhalla/valhalla/issues/4133)
",True,4201,https://api.github.com/repos/valhalla/valhalla/pulls/4201,https://github.com/valhalla/valhalla/pull/4201,closed,390,86,12,34,18,94,0,0,[],2023-07-14 10:57:59+00:00,2023-07-25 12:33:44+00:00,956145.0,"11 days, 1:35:45","[{'comment_id': 1263757852, 'comment_body': 'you can move this to the implementation file, its not needed for the public api, only the build function is needed which will make use of this parser callback thing, similar to the admin processing', 'comment_created': datetime.datetime(2023, 7, 14, 13, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1263759071, 'comment_body': 'oh i see this is the class analog. so in this case because you dont need any state, you can totally just remove this and put the guts of the work into the build function! sorry for the misunderstanding', 'comment_created': datetime.datetime(2023, 7, 14, 13, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1263978374, 'comment_body': 'done.', 'comment_created': datetime.datetime(2023, 7, 14, 17, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264402616, 'comment_body': 'i dont think any of these make sense really. maybe the first one whic could be a parking lot, but in reality it could but just some spaces on the side of the road. remember we are trying to call out things that are important, things people wont have to think about to see to navigate by', 'comment_created': datetime.datetime(2023, 7, 15, 12, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264402657, 'comment_body': 'yeah no way are we using a trash can to navigate :smile: ', 'comment_created': datetime.datetime(2023, 7, 15, 12, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264402831, 'comment_body': 'same for this, doesnt seem relevant. maybe you are thinking about pedestrian routing? i suppose its possible that on unnamed trails smaller things like these could be worth using for navigation points?', 'comment_created': datetime.datetime(2023, 7, 15, 12, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264402885, 'comment_body': 'these ones dont make much sense either', 'comment_created': datetime.datetime(2023, 7, 15, 12, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264404630, 'comment_body': 'do this inside the callback for each one you parse. there is no sense in allocating a giant vector when you can just push a landmark into the db immediately as soon as its parsed. this means the parser needs the landmarkdatabase as a member though of course', 'comment_created': datetime.datetime(2023, 7, 15, 12, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264404839, 'comment_body': 'oh and i should say by any i mean the top 3 here. if you noticed github lets you mark multiple lines but it doesnt actually highlight them when viewing the commment, but see above how it says +11 to +13. im not sure if you were aware of this github gotcha :smile: ', 'comment_created': datetime.datetime(2023, 7, 15, 12, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264420550, 'comment_body': 'yes I can see the highlighted 3 lines. \r\nFor the landmrks here I just chose the 15 most popular ones. it make sense to carefully choose some obvious and straightfoward things. but from the amenity website most of the obvious landmarks are not very popular. we dont consider that as an issue right now?', 'comment_created': datetime.datetime(2023, 7, 15, 13, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264421047, 'comment_body': 'make sense haha. trash cans can move, not good either.', 'comment_created': datetime.datetime(2023, 7, 15, 13, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264422035, 'comment_body': 'good idea. I separated parser and insert because I wanted to test if parser is correct. now I know it is so can put insert into callback directly.', 'comment_created': datetime.datetime(2023, 7, 15, 13, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264429186, 'comment_body': 'correct: some of the obvious landmarks are still popular like ""restaurant"". so popularity is not an issue :)', 'comment_created': datetime.datetime(2023, 7, 15, 14, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264462688, 'comment_body': ""In admin builder the callback struct is put in anonymous namespace. should I do the same here? don't know the benefits though"", 'comment_created': datetime.datetime(2023, 7, 15, 15, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1264698076, 'comment_body': ""Jep we should do the same here. In this case there'd be hardly a benefit, other than making it clear that it's not part of the public interface and rather implementation. If it's inside our named namespaces, I'd expect the callback struct's definition to be inside the header file too so I could import it into other files. Since we only use that struct in this .cc file, we should put it into a anonymous namespace."", 'comment_created': datetime.datetime(2023, 7, 16, 14, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1264700382, 'comment_body': 'IMO this should be a degenerate case we want to throw away early, as it has no meaning without a type.', 'comment_created': datetime.datetime(2023, 7, 16, 15, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1264701402, 'comment_body': ""Doesn't this save _all_ nodes right now?! You'll need to have a bool telling you if it was a landmark, else you'll get zillions of nodes in there with no type & no name.\r\n\r\nAlso I'd not handle the case where `amenity` has no value. I'm not even sure that can happen in actual OSM data (but surely can in custom OSM data). Even there is smth like that, it has no value for us IMO."", 'comment_created': datetime.datetime(2023, 7, 16, 15, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1264702082, 'comment_body': ""the way we're currently using this struct, we should default at least the name & type or you'll get random stuff in there if they're never set."", 'comment_created': datetime.datetime(2023, 7, 16, 15, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1264702974, 'comment_body': 'let\'s also include a node that shouldn\'t be saved. Maybe we can make this more realistic by e.g.\r\n\r\n```\r\n  const std::string ascii_map = R""(\r\n      a-------b------c\r\n          A    B     C\r\n    )"";\r\n```\r\nSo A, B, C would be on the side of the road, and a, b, c are simply graph nodes to define the ways without any tags (which shouldn\'t appear in the db, but I think do currently, see below).', 'comment_created': datetime.datetime(2023, 7, 16, 15, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1264703210, 'comment_body': ""We could instead do a LOG_ERROR when there's an amenity node without a value."", 'comment_created': datetime.datetime(2023, 7, 16, 15, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1264716430, 'comment_body': 'unnamed namespace is best for two reasons:\r\n\r\n1. this is not in the valhalla/mjolnir namespace because we want it to remain an implementation detail of the library and not something in the public interface\r\n2. adding it to a namespace makes it local to that translation unit and as such avoids potential naming clashes when linking', 'comment_created': datetime.datetime(2023, 7, 16, 17, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1264716566, 'comment_body': 'agreed, it has to have a type otherwise its meaningless', 'comment_created': datetime.datetime(2023, 7, 16, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1265170190, 'comment_body': ""Very clear explanations thank you both! more knowledge about implementation and compiler now. I'll put it in anonymous namespace."", 'comment_created': datetime.datetime(2023, 7, 17, 10, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265172908, 'comment_body': 'good example I will update that.', 'comment_created': datetime.datetime(2023, 7, 17, 10, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265177499, 'comment_body': 'thanks for pointing this out! I totally forgot to include landmark nodes only and made a premise that not all landmark nodes have amenity value which is incorrect. will fix that.', 'comment_created': datetime.datetime(2023, 7, 17, 10, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265179489, 'comment_body': 'ah right I forgot default / initialization again. let\'s set default name as `""null""` and default type as `LandmarkType::null` :D', 'comment_created': datetime.datetime(2023, 7, 17, 10, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265334974, 'comment_body': ""BTW should we also have default values for `lat` and `lng`? although I think it's unlikely to happen these two variables with tricky values or none at all."", 'comment_created': datetime.datetime(2023, 7, 17, 13, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265378868, 'comment_body': 'a further point: in the landamark database should we only store nodes that belong to `enum class LandmarkType`? Now the list contians 21 popular landmark types and others will be translated into `LandmarkType::null` which is useless in navigation. plus we can shorten execution time and save storage by storing ""known"" nodes only.\r\n', 'comment_created': datetime.datetime(2023, 7, 17, 13, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265390967, 'comment_body': 'exactly right, we should skip anything that is useless, no point in even looking at it if we cant parse the string into one of the enums that we accept', 'comment_created': datetime.datetime(2023, 7, 17, 13, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1265416823, 'comment_body': 'i disagree here. i think we shouldnt even h ave this struct but rather for the insert we can take the parameters in the function (why make a copy when we dont need to) and then when returning we can just return a tuple. as far as defaults, name can either exist or be empty we dont need a name for all amenities the type is good enough for the majority. default location makes no sense, we should never have a landmark that doesnt have a location. again i think we can avoid this by simply removing this structure completely from the interface', 'comment_created': datetime.datetime(2023, 7, 17, 14, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1265439193, 'comment_body': 'got it. done.', 'comment_created': datetime.datetime(2023, 7, 17, 14, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265464202, 'comment_body': 'I can remove the struct. it simply makes the code prettier and easier so no problem. As for default value of name I think having a default `""null"" `or `""""` or none at all are interchangeable to me. which one is better from your opinion?\r\nbut I don\'t know how to check validity of lat and lng. other implementation files also don\'t deal with that so I assume it is either checked in parser or just doesn\'t exist, or both. so for `lat` and `lng` maybe we can keep the current with no defaults. WDYT? @nilsnolde ', 'comment_created': datetime.datetime(2023, 7, 17, 14, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1265471331, 'comment_body': 'for name, in the database, it can be NULL but in code it has to be the empty string. therefor to make our lives easier it could also be empty string in the database', 'comment_created': datetime.datetime(2023, 7, 17, 14, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1266752782, 'comment_body': ""also  don't forget to remove the `landmark` in the tests"", 'comment_created': datetime.datetime(2023, 7, 18, 13, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266779839, 'comment_body': 'let\'s give it at least a `{""highway"", ""residential""}` or some other highway attribute ', 'comment_created': datetime.datetime(2023, 7, 18, 13, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266784520, 'comment_body': 'meeting ends in one hour. we can discuss here @kevinkreiser @nilsnolde \r\nI think the `landmark` key is used to select landmark nodes as you suggested earlier we should only parse landmarks nodes otherwise there are too many. without landmark key how can we achieve that?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1266791758, 'comment_body': 'Only the nodes which have a ""amenity"" tag having a value of the map you specified in your new header (hospital, restaurant etc) are the nodes we want to save. earlier you were just saving _every_ node. however, the `landmark` tag is useless for us. the gist is, we want to define what we consider a ""landmark"" and not leave that definition to random OSM mappers. does that make sense now?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266795278, 'comment_body': 'you\'ll just need to remove this `if` entirely, as noted further down, `landmark` OSM tag is not smth we want to look at. \r\n\r\nThen also remove the for loop in favor of a `find(""amenity"")`.', 'comment_created': datetime.datetime(2023, 7, 18, 13, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1266801304, 'comment_body': 'ah right I understand now. thanks!', 'comment_created': datetime.datetime(2023, 7, 18, 13, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1266802321, 'comment_body': 'no problem very clear to me :D', 'comment_created': datetime.datetime(2023, 7, 18, 13, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1267036772, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 7, 18, 16, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1267346267, 'comment_body': ""this wasn't addressed yet: we don't need this intermediate struct at all. just put the properties into the `insert_landmark` call."", 'comment_created': datetime.datetime(2023, 7, 18, 22, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1267346945, 'comment_body': 'remove the comment', 'comment_created': datetime.datetime(2023, 7, 18, 22, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1267962556, 'comment_body': ""(accidentally?) you gave a VERY good example of OSM stuff we'd also like to save apart from `amenity`. See [`historic` key](https://taginfo.openstreetmap.org/keys/historic#values) which ~~also contains~~ is the actual key for the value `monument`. If the name is descriptive enough that's the perfect guidance POI:)\r\n\r\nBut let's shelve that for a later day: https://github.com/valhalla/valhalla/issues/4210"", 'comment_created': datetime.datetime(2023, 7, 19, 11, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268189075, 'comment_body': 'ah yes I forgot that. will get it done', 'comment_created': datetime.datetime(2023, 7, 19, 14, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1268220117, 'comment_body': ""you remind me it's not an accident :) I was discovering osm key-values and found `monument`, thought it could be interesting to have it as landmarks but forgot to discuss with you. no problem let's discuss later."", 'comment_created': datetime.datetime(2023, 7, 19, 15, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1268223055, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 7, 19, 15, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1268397917, 'comment_body': ""let's keep it unresolved until we can see it's done :) best to let the reviewers resolve comments, then they don't lose the overview of their own comments"", 'comment_created': datetime.datetime(2023, 7, 19, 17, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268440015, 'comment_body': ""no problem. thanks for the tip! \r\nand it's fixed now."", 'comment_created': datetime.datetime(2023, 7, 19, 17, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1268449812, 'comment_body': ""shouldn't that go under the next bit where we throw if it's read-only and doesn't exist?"", 'comment_created': datetime.datetime(2023, 7, 19, 17, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268451186, 'comment_body': ""it looks like you were already in that identical `if` statement, why duplicate it? or maybe it's the Github diff viewer and I'm missing an indentation?"", 'comment_created': datetime.datetime(2023, 7, 19, 17, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268453185, 'comment_body': 'I removed the empty checks for name and type here because in common use cases `insert_landmark` should only be called by `node_callback` where checks and initializations already happen. ', 'comment_created': datetime.datetime(2023, 7, 19, 18, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1268469882, 'comment_body': ""what I just realize: in the [docs](https://www.sqlite.org/c3ref/open.html) it says `SQLITE_OPEN_READWRITE` is not creating the file when it doesn't exist, it seems to say we'd need to use `SQLITE_OPEN_READWRITE| SQLITE_OPEN_CREATE`? Or doe we create it somewhere else?"", 'comment_created': datetime.datetime(2023, 7, 19, 18, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268530200, 'comment_body': ""And would that mean that we'd add landmarks to an existing database? I can't see code that removes the database should it exist, like e.g. the admin builder. If someone calls that db build executable on an existing database, that person wouldn't expect a growing database (with tons of duplicates), rather a new fresh one. AGain, I might miss smth"", 'comment_created': datetime.datetime(2023, 7, 19, 18, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268557506, 'comment_body': ""it shouldn't happen that the type is empty. IIRC we throw away nodes that don't have an `amenity` type no? I'd consider that a bug if that happens, but pretty sure it can't"", 'comment_created': datetime.datetime(2023, 7, 19, 19, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268565126, 'comment_body': 'we should remove the database right here if it exists', 'comment_created': datetime.datetime(2023, 7, 19, 19, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1268848713, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 1, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1268851506, 'comment_body': 'we can just disallow conversion when its unknown\r\n```suggestion\r\n  if (it == string_to_landmark_type.cend())\r\n    throw std::runtime_error(""unknown landmark type"");\r\n  return it->second;\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 2, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1268852604, 'comment_body': 'i know i said we would need this eventually but we dont need it yet right? on second thought i think we will never need it because these things will need to be localized to be used in directions like ""turn left at the gas station"". we have a wholly other way of getting those types of things into the response so i think we can remove this unless there is some other use?\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 2, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1268853800, 'comment_body': 'yeah i was trying to say before that if we open the database in non-read-only mode and its there we should just blow it away. that can happen inside the database constructor imho, unless we see some future need to be able to append to the database?', 'comment_created': datetime.datetime(2023, 7, 20, 2, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1268854783, 'comment_body': '```suggestion\r\n    int landmark_type = -1;\r\n    if (sqlite3_column_type(bounding_box_stmt, 1) != SQLITE_NULL) {\r\n      landmark_type = sqlite3_column_int(bounding_box_stmt, 1);\r\n    }\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 2, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1268854993, 'comment_body': 'agree, its probably not needed to check this', 'comment_created': datetime.datetime(2023, 7, 20, 2, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1268855170, 'comment_body': '```suggestion\r\n    landmarks.emplace_back(std::make_tuple(name, static_cast<LandmarkType>(landmark_type), lng, lat));\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 2, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1268857230, 'comment_body': 'these things are probably too large to use to navigate, id drop them', 'comment_created': datetime.datetime(2023, 7, 20, 2, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1269384810, 'comment_body': ""agree. for now it makes sense to allow writing only when a database is created. I'll update the code."", 'comment_created': datetime.datetime(2023, 7, 20, 12, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1269386977, 'comment_body': ""you are right, we don't need it yet. will delete it. \r\nhow do you plan to do the wholly other way?"", 'comment_created': datetime.datetime(2023, 7, 20, 12, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1269388852, 'comment_body': ""what's the benefit to move `static_cast` from there to here?"", 'comment_created': datetime.datetime(2023, 7, 20, 12, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1269389659, 'comment_body': 'make sense', 'comment_created': datetime.datetime(2023, 7, 20, 12, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1269500486, 'comment_body': ""I just realize this function is called in `node_callback` to check every node with amenity. There are many amenity values not included in the list so we shouldn't throw. WDYT? @kevinkreiser if we remove LandmarkType::null how to do the check?"", 'comment_created': datetime.datetime(2023, 7, 20, 13, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1269521197, 'comment_body': 'ah we can use try catch', 'comment_created': datetime.datetime(2023, 7, 20, 14, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1270621050, 'comment_body': 'its a large topic, once we have this stuff in the tiles we can go over it. if you are interested now you can go look at https://github.com/valhalla/valhalla/blob/master/locales/README.md for a start', 'comment_created': datetime.datetime(2023, 7, 21, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270623617, 'comment_body': 'if you remove the `null` enum value then what do you set the landmark type to before you check the value from sqlite? by sticking to int until you need to add it you avoid the ""default"" value problem with the enum', 'comment_created': datetime.datetime(2023, 7, 21, 12, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270624076, 'comment_body': 'exactly', 'comment_created': datetime.datetime(2023, 7, 21, 12, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270660257, 'comment_body': 'i disagree that some of these will be obvious, in fact i think some of them require a name. id really like to stress reading what i wrote in the initial issue #4037 regarding landmarks, specifically the visibility/verbosity/specificity sections. we aren\'t making a poi database we are trying to pick features that might stand out more than a road sign because at the decision point in the route you have a high pressure situation where you must decide quickly. if we are at all unsure about a specific amenity type then we should err on not using it. anyway here are some of my thoughts on this inline:\r\n\r\n```suggestion\r\n// obvious landmark types for vehicle routing\r\nenum class LandmarkType : uint8_t {\r\n  // these will almost always be obvious by their function and don\'t require a name\r\n  fuel = 1,\r\n  post_office = 2,\r\n  police = 3,\r\n  fire_station = 4,\r\n  car_wash = 5,\r\n\r\n  // could be obvious if its a chain but could also just be a building\r\n  restaurant = 6,\r\n  // this will always be a chain in which case the name is a required distinguisher (as they are often next to each other on either side of a street)\r\n  fast_food = 7,\r\n  // this could be a chain making it easier to distinguish (starbucks) but could be a one off cafe in which case the name will be required\r\n  cafe = 8,\r\n  // on the fence about this one, these are often obvious without a name, maybe should go in the upper list?\r\n  bank = 10,\r\n  // same with this one, in some countries these are obvious and have the little plus sign, in america its not the case and they can be different chains or could be part of a grocery store or anything... speaking of grocery store, why isnt that on the list? also why arent department stores on the list, surely stores would be a good landmark to use (again when they are named)\r\n  pharmacy = 11,\r\n  // again these could just be a random building with nothing other than a sign like ""early years"" or something, they better have a name or it will be ambiguous\r\n  kindergarten = 12,\r\n  // same thing, often just a building\r\n  bar = 13,\r\n  // this could be very very big like a college campus, i think we should remove this\r\n  hospital = 14,\r\n  // same as bar could be just a building need at least a name to have a chance of seeing it\r\n  pub = 16,\r\n  // generic, could be manyy many types of clinics also often there are multiple of these located in same ""complex"", you might have a dentist, orthodontist, ear nose throat and eye specialists all next to each other. \r\n  clinic = 17,\r\n  // on the fence about this one, to me this would be in the same category as ""museum"" or something where its so specialized maybe it doesnt need a name. what keeps me from say ing that is you often cant tell from the outside what function these amenities serve until you read the name\r\n  theatre = 16,\r\n  // this could work without a name in my opinion, they often have a board out front that shows what movies are playing which would probably remove the need for a name\r\n  cinema = 17,\r\n  // these are usually quite large as well but not usually multiple buildings, how often are they located near one another though? if its often perhaps we need a name to differentiate between this casino and the next one down on the next block? maybe that argument is a good argument for everything has to have a name?\r\n  casino = 18,\r\n};\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 13, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270662647, 'comment_body': 'you already have this in the header\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 13, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270665636, 'comment_body': 'you can avoid this clunkiness by doing the whole thing inside the try catch. also dont use the name `type` as a variable name its just too close to keywords and likely other things it could collide with.\r\n\r\n```suggestion\r\n      try {\r\n        auto landmark_type = valhalla::mjolnir::string_to_landmark_type(iter->second);\r\n      \r\n        std::string name = """";\r\n        auto it = tags.find(""name"");\r\n        if (it != tags.cend() && !it->second.empty()) {\r\n          name = it->second;\r\n        }\r\n\r\n        // insert parsed landmark directly into database\r\n        db_.insert_landmark(name, landmark_type, lng, lat);\r\n      } catch (...) { }\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 13, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270666864, 'comment_body': '```suggestion\r\n  virtual void changeset_callback(const uint64_t /*changeset_id*/) override {\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 13, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270669570, 'comment_body': '```suggestion\r\n    landmarks.emplace_back(name, static_cast<LandmarkType>(landmark_type), lng, lat);\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 13, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270672565, 'comment_body': 'its not bad to have this but its not needed exactly.. the config generator will always put a value here, one option would be to do:\r\n\r\n```suggestion\r\n  auto db = pt.get<std::string>(""landmarks"", """");\r\n```\r\n\r\nthen when we got to make the db it should fail with an invalid path', 'comment_created': datetime.datetime(2023, 7, 21, 13, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270673795, 'comment_body': 'ok so we have the removal of existing db in the constructor then we need this create the directory if it doesnt exist also in the constructor, it doesnt make sense for the two things to be decoupled', 'comment_created': datetime.datetime(2023, 7, 21, 13, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270674828, 'comment_body': 'in real life osm will not store a tag without a value, so if you want to test this then we should just omit the name tag completely:\r\n\r\n```suggestion\r\n      {""A"", {{""amenity"", ""bar""}}},\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 13, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270685045, 'comment_body': 'it would be more realistic if these nodes had something other than a name as well, again osm will not have tags with empty values, at least im pretty sure:\r\n\r\n```suggestion\r\n      {""a"", {{""name"", ""gong ce""}, {""amenity"", ""toilets""}}},\r\n      {""b"", {{""name"", ""la ji tong""}, {""amenity"", ""waste_basket""}}},\r\n      {""c"", {{""name"", ""huayuan""}, {""place"": ""city""}}},\r\n      {""d"", {{""traffic_signal"", ""signal""}}},\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 13, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1270878847, 'comment_body': 'got it. thanks', 'comment_created': datetime.datetime(2023, 7, 21, 16, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1270916182, 'comment_body': 'nice suggestion thanks', 'comment_created': datetime.datetime(2023, 7, 21, 17, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1270923810, 'comment_body': 'much more concise', 'comment_created': datetime.datetime(2023, 7, 21, 17, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1270934232, 'comment_body': 'make sense. done.', 'comment_created': datetime.datetime(2023, 7, 21, 17, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1270934551, 'comment_body': 'good to know!', 'comment_created': datetime.datetime(2023, 7, 21, 17, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1270935433, 'comment_body': 'sure it makes sense to have extra tags and thanks for adding those ', 'comment_created': datetime.datetime(2023, 7, 21, 17, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1270952646, 'comment_body': ""I've added the remarks. I feel this is going to be a long term discussion and decision :)"", 'comment_created': datetime.datetime(2023, 7, 21, 18, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1271642238, 'comment_body': '```suggestion\r\n  // generic, could be many many types of clinics also often there are multiple of these located in\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 1, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1271643621, 'comment_body': ""```suggestion\r\n    // create parent directory if it doesn't exist\r\n```"", 'comment_created': datetime.datetime(2023, 7, 24, 1, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1271645530, 'comment_body': ""long story but we only just went to c++17 which as non-experimental support for filesystem. before that we use valhalla::filesystem, our internal home grown version. we've not migrated to std::filesystem yet so lets use our own until we do so (iirc using std::filesystem will require adding linker flags on some systems)\r\n\r\n```suggestion\r\n      filesystem::remove(db_name);\r\n```"", 'comment_created': datetime.datetime(2023, 7, 24, 1, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1271646261, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 1, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1271647126, 'comment_body': '```suggestion\r\n   * ADDED: add `valhalla_build_landmarks` to parse POIs from osm pbfs and store them as landmarks in the landmark sqlite database [#4201](https://github.com/valhalla/valhalla/pull/4201)\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 1, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}]","[{'commit_sha': 'f238afef188ed4e5e98cfa3a28011b16c6780a15', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daee499ac5d8a086eb4a917246b797b99aa386e2', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c2b7da3fc5b475e2957f591aed9697375abdddd', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e4766d72babc345e6a7d42213aee937f420f14', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fbcee3bfefd52057b5275128cc2696ea7016845', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '283cd9f01be86e40df8ddc4154d8f1e64b577b6c', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa225d5b9914a13eda8a2006e520b6d7d32d55d6', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ae4db30202ae44aa92f5273b960e01107bbd3a', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cfd96fe5991dd86d4f391e8c7a0dd829190f4d3', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27388a7de657f4831180fc39ff83676fed538fac', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bb0fdc3265422a93e79a653b2a1192cb301190', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47bb5bc8dd5f118c8803c777ee469414d649eeea', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0636aae310d06cf36374b782bdf08b60f4c0fdad', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0425a598c9f582d07685c80654f8a84e8fdb6d07', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b63a58f63248b4f2eafd7795fbd13a0005402f5e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4d437889539a4591a43ebd74550373dd001aea', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29c346fc8b04cd2040f7269c9b5675dc19e17682', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9e48d5150c39869fa63c757ad0d01f42cbe0cf', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd649d215954f6df2e5f93bf2a281f4c311c004f6', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b24474c37e9000422aae5407e94ddbeeaa06676', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03974045d7d82c34445a64099b5ffdfd65e2ff9d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e4b05df980cfba99d2fa0e065363d2a2955fbca', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead48f8968969ff8d4abf919e74fa0ea73387d3c', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a609a5571c0238931f30bb11a5fde4dddf4687', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a7c6dd249598417bc999fca98eeec1f8f5532d6', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48043616c2c5128e482e70250cccb41bfb6b02c7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd553782209ae626c334e33d4b430c30932af43d4', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebe50019b7c7a6f2479fa858a7277e79b843a78', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ffad9f9d1cce2766a1ae03633d769c0b642d222', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9696354f98726deb83473fb2ab4ba33feb89aff7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33120c3f87110f446ded157a6d2a3ac252710e44', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1303ece55550a323179bc679f18ee169409366', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd231278e123f80e7aec8ce189f2369f5ec0317f6', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06832238d80304bc292ac37b372bf36b0199e9c5', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}]",,91609682,,User,,2,,0,1
1460189462,Landmark Routing 3 PR: Update graph tile to allow adding landmarks,"# Issue
Update the datastructures in the tile (edgeinfo tags, etc.) and the tilebuilder interface to allow for adding landmarks to an existing graph tile, with tests.

## Requirements / Relations
[Landmark Routing 3: Tile Storage of Associated Landmarks](https://github.com/valhalla/valhalla/issues/4135)

",True,4233,https://api.github.com/repos/valhalla/valhalla/pulls/4233,https://github.com/valhalla/valhalla/pull/4233,closed,514,187,12,30,5,29,0,0,[],2023-08-02 17:38:26+00:00,2023-08-24 12:29:14+00:00,1882248.0,"21 days, 18:50:48","[{'comment_id': 1285847137, 'comment_body': ""i am certain some of these are redundant. in fact i'd be the last one is the only one you need"", 'comment_created': datetime.datetime(2023, 8, 7, 13, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1285850615, 'comment_body': 'id use either lon or lng `long` is an integer type so is confusing to be used here', 'comment_created': datetime.datetime(2023, 8, 7, 13, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1286006176, 'comment_body': ""after you add landmarks to the edgeinfobuilders, you'll need to update all offsets of structures that come after the edgeinfos in the binary tile, including`header->set_end_offset()`. You can have a look a few lines up in `GraphTileBuilder::AddBins` @vesperlou "", 'comment_created': datetime.datetime(2023, 8, 7, 14, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1286096563, 'comment_body': ""ok so that wasn't it. of course the StoreTileData function is supposed to update the offset stuff. the problem is here: https://github.com/valhalla/valhalla/blob/75b5e818eb694a47d1b21c5cebf0dad45e476537/src/mjolnir/graphtilebuilder.cc#L362. That `edge_info_offset_` is weird.. it's not an offset, it's a size. IMO the code should be refactored to remove that variable entirely, it doesn't seem to serve any purpose. We can get the size of the edgeinfo's dynamically in StoreTileData. The problem is that var is never updated. Which wasn't a problem so far because no other data builder uses StoreTileData AND does anything to edge infos, so far it's always been the same size. \r\n\r\nLet me draft a PR that'll unblock you here. FWIW, this patch is the main change:\r\n```diff\r\ndiff --git a/src/mjolnir/graphtilebuilder.cc b/src/mjolnir/graphtilebuilder.cc\r\nindex 4c1fbdb7e..2cd265dac 100644\r\n--- a/src/mjolnir/graphtilebuilder.cc\r\n+++ b/src/mjolnir/graphtilebuilder.cc\r\n@@ -352,14 +352,16 @@ void GraphTileBuilder::StoreTileData() {\r\n     }\r\n \r\n     // Write the edge data\r\n+    uint32_t edge_info_size = 0;\r\n     header_builder_.set_edgeinfo_offset(header_builder_.complex_restriction_reverse_offset() +\r\n                                         reverse_restriction_size);\r\n     for (const auto& edgeinfo : edgeinfo_list_) {\r\n       in_mem << edgeinfo;\r\n+      edge_info_size += edgeinfo.SizeOf();\r\n     }\r\n \r\n     // Write the names\r\n-    header_builder_.set_textlist_offset(header_builder_.edgeinfo_offset() + edge_info_offset_);\r\n+    header_builder_.set_textlist_offset(header_builder_.edgeinfo_offset() + edge_info_size);\r\n     for (const auto& text : textlistbuilder_) {\r\n       in_mem << text << '\\0';\r\n     }\r\n```"", 'comment_created': datetime.datetime(2023, 8, 7, 16, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1286110903, 'comment_body': 'other places in the code update that when you add to the edgeinfos. we could do this in addlandmark', 'comment_created': datetime.datetime(2023, 8, 7, 16, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1286125369, 'comment_body': 'here you could just call SizeOf before and SizeOf after adding the name info and add the difference to the `edge_info_offset_` (which yes is in bytes)', 'comment_created': datetime.datetime(2023, 8, 7, 16, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1286165594, 'comment_body': ""agreed offline to do it nicer and update `edge_info_offset_` in `AddLandmark` which is a better way. also needs to update the edge's edgeinfo offset and related class members which are read initially."", 'comment_created': datetime.datetime(2023, 8, 7, 17, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1286169015, 'comment_body': 'got it thanks', 'comment_created': datetime.datetime(2023, 8, 7, 17, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1289004583, 'comment_body': ""@kevinkreiser @nilsnolde I took `pointll.h` as reference and updated the conversions of lng and lat and now they work as expected. But the returned string size is 8 bytes now. I didn't success on 4 bytes."", 'comment_created': datetime.datetime(2023, 8, 9, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1290085227, 'comment_body': 'ok so we can try to avoid serializing null bytes by putting the lat in the high order bits so that the number is a smaller one and then varint encoding it, so first:\r\n\r\n```suggestion\r\n  return (((uint64_t(lat * 1e7) + uint64_t(90 * 1e7)) & ((1ull << 31) - 1)) << 32) | \r\n          ((uint64_t(lng * 1e7) + uint64_t(180 * 1e7)) & ((1ull << 32) - 1));\r\n```\r\n\r\nthen you can varint encode that using: https://github.com/valhalla/valhalla/blob/753c8e706e2e1850d2c1ffffdae2d7a4d387a69d/valhalla/midgard/encoded.h#L224-L237', 'comment_created': datetime.datetime(2023, 8, 10, 12, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1290086919, 'comment_body': 'need a check that this string doesnt include any null chars, throw std::logic_error if so, also need to add this to the AddEdgeInfo function in 3 places above', 'comment_created': datetime.datetime(2023, 8, 10, 12, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1297178149, 'comment_body': 'do a move here instead', 'comment_created': datetime.datetime(2023, 8, 17, 12, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1298703968, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 17, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1298704505, 'comment_body': 'just bring the function from the header over here', 'comment_created': datetime.datetime(2023, 8, 18, 17, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1298705350, 'comment_body': '```suggestion\r\n// data and then add to it (e.g. adding node connections between hierarchy\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 17, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1298706975, 'comment_body': 'this needs to be finished, printing doesnt count as tests ;)', 'comment_created': datetime.datetime(2023, 8, 18, 17, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1298708437, 'comment_body': 'if adding landmarks turns out to be slow this is one thing we could speed up with an unordered_set of offsets as they are added and when they are deserialized', 'comment_created': datetime.datetime(2023, 8, 18, 17, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1298708570, 'comment_body': 'oops sorry I forgot to do that. not good at remembering things...', 'comment_created': datetime.datetime(2023, 8, 18, 17, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1298711202, 'comment_body': 'ok will get it done\r\n', 'comment_created': datetime.datetime(2023, 8, 18, 17, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1300592133, 'comment_body': ""some comments are good, like this one, but lots of this file has comments which were instructions for you or stale testing. please clean the comments up a bit and leave only those explaining what's happening"", 'comment_created': datetime.datetime(2023, 8, 21, 20, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1300594531, 'comment_body': 'instead of this you can do EXPECT_NEAR', 'comment_created': datetime.datetime(2023, 8, 21, 20, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1300596173, 'comment_body': ""newline at end of file missing, I think there's still some unix tools which bark at this.."", 'comment_created': datetime.datetime(2023, 8, 21, 20, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1300599650, 'comment_body': 'can you elaborate?', 'comment_created': datetime.datetime(2023, 8, 21, 20, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1300625157, 'comment_body': 'good idea, done', 'comment_created': datetime.datetime(2023, 8, 21, 20, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1300625289, 'comment_body': 'done :)', 'comment_created': datetime.datetime(2023, 8, 21, 20, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1300625889, 'comment_body': ""done. I'm suprised pre-commit didn't find this"", 'comment_created': datetime.datetime(2023, 8, 21, 20, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1300628389, 'comment_body': 'this should be part of the cleanup IMO. also further down. sorry for the nits, but without any comment why we keep commented code in tests, it only adds confusion. if there is a reason, best to leave to a comment about it', 'comment_created': datetime.datetime(2023, 8, 21, 20, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1300629513, 'comment_body': ""I think kevin added the comment here. the gist is the parser currently suppose kLayer doesn't include any null bytes. if in any case kLayer is set to zero the parser will return an problematic empty string. So we'd better make sure kLayer is never set to 0, or use special parser for it which can parse null byte as the one for kLandmark."", 'comment_created': datetime.datetime(2023, 8, 21, 20, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1300634012, 'comment_body': 'https://github.com/valhalla/valhalla/pull/4233/files#diff-6b826629e0424f344205ddbff8872b3d9a1c3bd856ca21cece6d226656ab0aebR164\r\nthere is small comment on this - we can either try to test the fixed landmark or flexible ones. I tried to keep both but I guess we have the flexible landmarks and there is no need to keep the fixed one :) already cleaned up.', 'comment_created': datetime.datetime(2023, 8, 21, 20, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}]","[{'commit_sha': '90afa19ab4cc250031a2a640804e3467381c45f8', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4249025741acebac079c3cea3ab31e6d15197ada', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d698216ad0be989c58f803a6498adb81d29364d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd17e345d4be5c79664b3ec83b8603dd255f567c', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22eb820726170eee57fec8effeabea50f88c5057', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bffd3ccb20ab9f4986df97995c673bc23a7dfa23', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd284c7f2d9c48e22fb439f8524aad557bc4f828d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e50c0ecf651bd97fceca7c9d708eff810347bc', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9dedebeadef86d1184b53694d6d913a17efcdd9', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5294cca1b05e84b68628dbf46ca784f4e200d8', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1ded45decfde05ff7867650d538aad13e9776d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3dfef95babd96ef3df45953c1c05da3589b98cc', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce9fca8c6818a67258e0443f79744fd7bd7a954e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f4cc4a0d783d1403e30ad014e5a1fd39b33300', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e135378866145f9b8634ce9abe10f177dbf641', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b86694043bdca245eb2c0edc1f4cda781b0f1b', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3684c5dab38c4f8fe9e0e21f8292fde0dc96dc', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce891b59c9c03d25614d01582b4a8350e86ccab4', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3744adfdd498813d9a54facd9746a6102362351a', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5ecd6c063ac7e3ac3e01743974b0a8c34adeb7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0494830be1f50a9f8cd322bb634e356dad28a995', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12800ea7d95b717ec4cede295cfa08dfb3575b26', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a19ab95d685a82430c45d2c351d4184176ecdd', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '265be45f754bcee17e20456d98f59754ee75ff42', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8b8c61b832fb6bc4b58771282758a87d9291b0', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53a5af78d8e260fb32ca368ea57da3222c381e19', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd0bd5f6c89120912555bd16201efb7149548239', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea2869ee2c0c3ad6db54febd2795bb673a8a6e8', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c513efd5f9e1b2dc84a0ecebea26ce4cd1b1016', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2eb0bad154675dc93e633ac797b4ff5a011ae4', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}]",,91609682,,User,,2,,0,1
1493805830,Landmark Routing 4 PR: Associate landmarks with edges and add the associations to Tiles,"# Issue

Enable identifying, evaluating, associating, and integrating landmarks from intermediate storage (landmark database) into graph tiles. Landmarks are associated with edges.

## Tasks / workflows
- [x]  find landmarks in a graph tile and retrieve them from the landmark database
- [x]  associate each of the landmarks with nearby edges (need some filtering on the edges)
- [x]  update the graph tile to store the associations of landmark and edge

## Reference
[Landmark Routing 4: Associate Landmarks and Add to Tiles#4136](https://github.com/valhalla/valhalla/issues/4136)
",True,4278,https://api.github.com/repos/valhalla/valhalla/pulls/4278,https://github.com/valhalla/valhalla/pull/4278,closed,560,33,10,46,1,20,0,0,[],2023-08-29 13:42:52+00:00,2023-09-06 13:37:56+00:00,690904.0,"7 days, 23:55:04","[{'comment_id': 1308848299, 'comment_body': '@kevinkreiser @nilsnolde here is the edited part to update edgeinfo_offset_map. the previous code manipulated the map while reading it, which would cause segmentation fault.\r\nI guess here is still optimization to do.', 'comment_created': datetime.datetime(2023, 8, 29, 13, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1310235438, 'comment_body': 'this doesnt look right to me. anything that was in there before is completely gone and will only contain the stuff you just added right?\r\n\r\nlooking at the old code i cannot understand why there would be a segfault, can you say more about what you were seeing with the old code?', 'comment_created': datetime.datetime(2023, 8, 30, 12, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1310237581, 'comment_body': '```suggestion\r\n  LOG_INFO(""Successfully built landmark database from PBF"");\r\n```', 'comment_created': datetime.datetime(2023, 8, 30, 12, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311523422, 'comment_body': 'ok after spending 5 minutes looking at it while not doing something else i can see the issue. we were iterating over it while updating it which will be a problem depending on what happens with reallocations. i would have thought it wouldnt do reallocations because we arent actually growing the size but it must be since you hit a segfault.\r\n\r\nanyway the change here will work. i think in the long term we can optimize this another way.', 'comment_created': datetime.datetime(2023, 8, 31, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311537982, 'comment_body': '```suggestion\r\n\r\n  LOG_INFO(""Sorting landmark edge pairs by tile..."");\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 12, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311543216, 'comment_body': ""i find this comment a bit lacking for someone who doesnt already know what is going on\r\n```suggestion\r\n    // every i'th thread works on every i'th tile\r\n```"", 'comment_created': datetime.datetime(2023, 8, 31, 12, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311544494, 'comment_body': 'these numbers should be constants at the top of the file', 'comment_created': datetime.datetime(2023, 8, 31, 12, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311545809, 'comment_body': ""i dont think its this code's job to check for a logic error here. did this actually happen to you? unit tests should catch something so terrible as this\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 8, 31, 12, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311546488, 'comment_body': 'can this actually happen? i thought it returns always the same number of locations passed in but if it doesnt find anything then the path edges are empty', 'comment_created': datetime.datetime(2023, 8, 31, 12, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311547154, 'comment_body': 'this is a waste of time as we sort the whole thing later\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 12, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311548651, 'comment_body': 'we need some comments in here for sure. we want to lessen the mental burden of whoever reads this next', 'comment_created': datetime.datetime(2023, 8, 31, 12, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311550808, 'comment_body': 'we should mention that seq_file is by ref but should not be modified by these threads. the other option is to pass teh file name and have each thread open the same file', 'comment_created': datetime.datetime(2023, 8, 31, 12, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311552920, 'comment_body': 'in the future we can do batches of ids, though it will complicate the code it will likely speed up the processing', 'comment_created': datetime.datetime(2023, 8, 31, 12, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311554934, 'comment_body': '```suggestion\r\n    // a single edge can have multiple landmarks\r\n    if (last_edge != (*it).first) {\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 12, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311570143, 'comment_body': ""it is possible in a global tileset that we have coverage only at level 2 for some places and we'd still like to get landmarks there. we'll probably need to fix this..."", 'comment_created': datetime.datetime(2023, 8, 31, 12, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311572307, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 12, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311572842, 'comment_body': '```suggestion\r\n    threads[i].reset(new std::thread(UpdateTiles, std::ref(merged_sequence_file), tile_dir,\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 12, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311573541, 'comment_body': 'can we just m erge this and have one loop, we can add the stats up right there dont need to store them in a vector at all in the end right?', 'comment_created': datetime.datetime(2023, 8, 31, 12, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1311576602, 'comment_body': 'seems like not', 'comment_created': datetime.datetime(2023, 8, 31, 12, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1316038946, 'comment_body': 'ah finally!!! seems github preserves comments in file view once they were addressed. was the most annoying UX oversight IMO..', 'comment_created': datetime.datetime(2023, 9, 5, 15, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}]","[{'commit_sha': '90afa19ab4cc250031a2a640804e3467381c45f8', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4249025741acebac079c3cea3ab31e6d15197ada', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d698216ad0be989c58f803a6498adb81d29364d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd17e345d4be5c79664b3ec83b8603dd255f567c', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22eb820726170eee57fec8effeabea50f88c5057', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bffd3ccb20ab9f4986df97995c673bc23a7dfa23', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd284c7f2d9c48e22fb439f8524aad557bc4f828d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e50c0ecf651bd97fceca7c9d708eff810347bc', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9dedebeadef86d1184b53694d6d913a17efcdd9', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5294cca1b05e84b68628dbf46ca784f4e200d8', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1ded45decfde05ff7867650d538aad13e9776d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3dfef95babd96ef3df45953c1c05da3589b98cc', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce9fca8c6818a67258e0443f79744fd7bd7a954e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f4cc4a0d783d1403e30ad014e5a1fd39b33300', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e135378866145f9b8634ce9abe10f177dbf641', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b86694043bdca245eb2c0edc1f4cda781b0f1b', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3684c5dab38c4f8fe9e0e21f8292fde0dc96dc', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce891b59c9c03d25614d01582b4a8350e86ccab4', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3744adfdd498813d9a54facd9746a6102362351a', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5ecd6c063ac7e3ac3e01743974b0a8c34adeb7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0494830be1f50a9f8cd322bb634e356dad28a995', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a19ab95d685a82430c45d2c351d4184176ecdd', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '817223d23eba317383e3bbdb80414a6e45f07898', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ab8e6650c3f7a01a11f7b9632c80307d5c587507', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a409230256fecc882ef2833a130318015a52dfe', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dd5d716768145afd8668f56f9ba746e54af52c6', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6966add6ab9adebf3d533a58f9bfe1819ae3031', 'committer_username': 'witPranav', 'committer_name': 'Pranav Chatly', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 30, 9, 6, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d94a8166a4b69dce087b742d1e60920d116b6fa', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a1bc93593f3499064f95bfc54742377e41b3826', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17d361ebbda657be5abfb83417fa5d01f08a548f', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e4958ae070763b52e13abe8ff32716c3098a63', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c8c72caa1cbfe3ac182143ced4b1078a5693ce', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e519e5b1cd34e36a4703d8acb5c7ac2ef273b435', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30906f26acf57706dc18714a6a4222d353a6f40c', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edc236c3430e7206335f6dcfd62585af27f10a6', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b5d079f587e254ce4caa830cb96806df5e5689', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff57086268b1e04f28993a31bdb47e6e6084aa4', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d6b606b93fec765142c971823629bccc32e2786', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a58a3a4ebce9ea8de04e24dda246e479db52fd13', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c624c8a2d00345801718eedf73980bb7be2f674', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22758843d31013e18786f7054a4b30ab38d6c80', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7744b3992756eaa7a563079bbc3ad7a8024a913', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452b830fe5a700e8f81cab055ed08cab411eb853', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3da325f662fe26e4917d460bc333e7b0d6294f74', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f46b0d95f28cf1c9b791c334c73e6f447f8dba9', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd96bc212621a44522ad8ea0fb21ded25ea0e995f', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}]",,91609682,,User,,2,,0,1
1507965364,Landmark Routing 5 PR: Add landmarks to maneuvers,"# Issue

Maneuver generation update: add landmarks as direction support in maneuvers

## Tasklist

 - [x] update triplegbuilder to carry associations into the proto data structure we feed to odin to make his maneuvers
 - [x] in odins maneuver generation loop copy the landmark to the maneuver, update the maneuver definition accordingly (or maybe another definition if appropriate?)

## Relations

[Landmark Routing 5: Maneuver Generation Updates#4137](https://github.com/valhalla/valhalla/issues/4137)
previously closed PR (which is somehow messed up): [Update maneuver generation to add landmarks #4291](https://github.com/valhalla/valhalla/pull/4291)
",True,4293,https://api.github.com/repos/valhalla/valhalla/pulls/4293,https://github.com/valhalla/valhalla/pull/4293,closed,404,56,16,18,0,24,0,0,[],2023-09-08 14:05:06+00:00,2023-09-19 10:45:24+00:00,938418.0,"10 days, 20:40:18","[{'comment_id': 1321754735, 'comment_body': ""doesn't seem like we need the index really, I'd just do a range-based loop over `tagged_value`\r\n```suggestion\r\n  for (const auto& tag < tagged_value()) {\r\n    if (tag.type() == TaggedValue_Type_kLandmark) {\r\n      landmarks.emplace_back(tag.value());\r\n    }\r\n  }\r\n```"", 'comment_created': datetime.datetime(2023, 9, 11, 15, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1321806235, 'comment_body': ""with the provided map, this is VERY hard to make sense of.. I'd say we check against a map of {<edge_name>: <vector_of_landmark_names>} which we expect to see. "", 'comment_created': datetime.datetime(2023, 9, 11, 16, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1321807159, 'comment_body': ""too complex IMO, use range loops, we shouldn't need any indices"", 'comment_created': datetime.datetime(2023, 9, 11, 16, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1321808901, 'comment_body': ""I'm not so sure if this is correct, but let's look at it together tmrw. My IDE breaks for odin for some reason, it's all undefined stuff, very hard to work with.."", 'comment_created': datetime.datetime(2023, 9, 11, 16, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1321923151, 'comment_body': ""good to know! didn't expect I can use range loop with tagged_value"", 'comment_created': datetime.datetime(2023, 9, 11, 18, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1321923608, 'comment_body': 'I agree. working on it', 'comment_created': datetime.datetime(2023, 9, 11, 18, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1321926505, 'comment_body': ""I don't know if it's correct either. we don't have a test for this yet as I mentioned in our chat channel last Friday. let's see tomorrow."", 'comment_created': datetime.datetime(2023, 9, 11, 18, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1321992420, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 9, 11, 19, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1325896577, 'comment_body': 'we should pass `graphtile` here since thats the one that contains `directededge` or we can refactor the shape stuff above to pull out the getting of the edgeinfo and just pass the edgeinfo in, your call', 'comment_created': datetime.datetime(2023, 9, 14, 12, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325899318, 'comment_body': 'ok so we are going to use this on the trip edge and on the directions maneuver. so i remember we needed something to avoid the naming conflict... what other options do we have...\r\n\r\nmaybe one of these, but other options exist: PathLandmark, RouteLandmark ', 'comment_created': datetime.datetime(2023, 9, 14, 12, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325902322, 'comment_body': 'since in practice we arent actually  moving this lets not call std::move', 'comment_created': datetime.datetime(2023, 9, 14, 12, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325911988, 'comment_body': '```suggestion\r\n      // multipoint routes with `through` or `via` types can have consecutive copies of the same edge\r\n      if (curr_edge != trip_path_->GetCurrEdge(node + 1)) {\r\n```', 'comment_created': datetime.datetime(2023, 9, 14, 12, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325916674, 'comment_body': 'it might be the case that we actually need the length of the previous maneuver because we are collecting landmarks that occured along it so that we can put them on this one', 'comment_created': datetime.datetime(2023, 9, 14, 13, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325923748, 'comment_body': 'actually im an idiot this is right :smile: ', 'comment_created': datetime.datetime(2023, 9, 14, 13, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325926056, 'comment_body': 'untested but we need to accumulate the distance along the maneuver to the edge we just looked at\r\n```suggestion\r\n        std::move(curr_landmarks.begin(), curr_landmarks.end(), std::back_inserter(landmarks));\r\n        distance_from_begin_to_curr_edge += curr_edge.length();\r\n```', 'comment_created': datetime.datetime(2023, 9, 14, 13, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325927954, 'comment_body': 'see https://github.com/valhalla/valhalla/pull/4293/files#r1325896577', 'comment_created': datetime.datetime(2023, 9, 14, 13, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325931719, 'comment_body': 'maybe leave this out for now and in the future could allow a request option to have a tighter threshold', 'comment_created': datetime.datetime(2023, 9, 14, 13, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325937738, 'comment_body': 'heres an example of how to do this:\r\n\r\nhttps://github.com/valhalla/valhalla/blob/97cad0609c2085b98196286b6cb02b0e09128749/src/loki/search.cc#L389C23-L397', 'comment_created': datetime.datetime(2023, 9, 14, 13, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325940709, 'comment_body': 'explained this comment offline, can probably remove comment', 'comment_created': datetime.datetime(2023, 9, 14, 13, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1325965117, 'comment_body': 'ok so the attributes controller is like a way in the request where the user can decide which metadata in the graph will come out the other side, especially for the purposes of map matching. in practice though we use the controller even for regular routes, for compatibility with things like osrms annotations. so yes we should in fact implement this but the good news is its pretty simple:\r\n\r\n- add a new constant that controls this edge property: https://github.com/valhalla/valhalla/blob/97cad0609c2085b98196286b6cb02b0e09128749/valhalla/baldr/attributes_controller.h#L11\r\n- make sure it is on by default: https://github.com/valhalla/valhalla/blob/97cad0609c2085b98196286b6cb02b0e09128749/src/baldr/attributes_controller.cc#L16\r\n- add an if here in this function that actually checks if its enabled: https://github.com/valhalla/valhalla/blob/97cad0609c2085b98196286b6cb02b0e09128749/src/thor/triplegbuilder.cc#L823\r\n- add docs to make sure people know it exists: https://github.com/valhalla/valhalla/blob/master/docs/docs/api/map-matching/api-reference.md#edge-items and in the master list above on that doc\r\n', 'comment_created': datetime.datetime(2023, 9, 14, 13, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kevinkreiser', 'type': 'User'}, {'comment_id': 1327944651, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 9, 16, 10, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1327944729, 'comment_body': 'this is in constants.h already\r\n```suggestion\r\n        man->length() * kMetersPerKm; // total distance of the maneuver in meters\r\n```', 'comment_created': datetime.datetime(2023, 9, 16, 10, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1327945013, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 9, 16, 10, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1327945021, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 9, 16, 10, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}]","[{'commit_sha': '19b510a9350c543915534b85625f27c11a1d2127', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2698e6fc59255aaf26747b7e35520efbff52475e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4f0ddd5451bd6078cd75f2a9302b5734d3cb11e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d7603f938159e1da60e1a80df6570e8e2c3de8', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678f3f354063d4f423474dd4b0dec5f84ac3c0b7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29cc4bd5963e9e22179af7f7218ddf6dacbbd775', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19ddc16a1152175def5117cf27a8b423a5aaf907', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d0e806df5bc7734d428e2199a54170f265e95e', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '175f6976cb0883bf0b2252dac0ea943d348f7bd9', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dfde95286e84705793591a60f405d1970b39c04', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '440014ad679ca1f13f1f300200367387eb7d0099', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2481b9c92dedd718d18c7db2f42cf878f07d2e4c', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90a679a9eeefc75a20d894a10c4b5307decdd06d', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7123b0e7039347c5e3549e034a5e1db56691463', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a8b92416eb944c266cd9f7ccc71132cf2b87e7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '900cbc96db015076d949fec090fa05e0e2de3a66', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98008d5b4abc208d25cddd27d86e8a29d8da4700', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68044d8d69e93e53737a595b4b06ce7a0ae542e4', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}]",,91609682,,User,,2,,0,1
1521912937,Landmark Routing 6 PR: Update narrative generation with landmarks,"# Issue

Update narrative generation process to support the use of landmarks in text guidance.

## Tasklist

 - [x] Update the maneuver types in locales to support landmark replacements. (update the en-us one, and wait for translations)
 - [x] Update the narrative generation to pick phrases that support the use of landmarks.
 - [x] Update tests and the changelog accordingly.

## Requirements / Relations
[Landmark Routing 6: Narrative Generation Updates #4138](https://github.com/valhalla/valhalla/issues/4138)
",False,4301,https://api.github.com/repos/valhalla/valhalla/pulls/4301,https://github.com/valhalla/valhalla/pull/4301,open,6389,516,41,15,9,8,0,0,[],2023-09-19 19:59:13+00:00,,0.0,,"[{'comment_id': 1331196528, 'comment_body': 'for u-turn we also want landmark narratives', 'comment_created': datetime.datetime(2023, 9, 20, 8, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1331239821, 'comment_body': 'instead of this function, we can cast the `RouteLandmark_Type` to `uint8_t` and index into the phrases directly', 'comment_created': datetime.datetime(2023, 9, 20, 8, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1331252867, 'comment_body': '```suggestion\r\n  bool turn_direction = relative_direction == ""right"";\r\n```', 'comment_created': datetime.datetime(2023, 9, 20, 8, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1331260964, 'comment_body': '```suggestion\r\n  size_t idx = 0;\r\n  double min_dist = std::numeric_limits<double>::max();\r\n  for (auto i = 0; i < landmarks.size(); i++) {\r\n    // adjust landmark distance with compensation based on their direction\r\n    auto dist = landmarks[i].right() == direction\r\n                    ? landmarks[i].distance()\r\n                    : (landmarks[i].distance() + kLandmarkOppositeDirectionCompensation);\r\n    if (dist < min_dist) {\r\n      idx = i;\r\n      min_dist = dist;\r\n    }\r\n  }\r\n  return landmarks[idx];\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 9, 20, 8, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1331268883, 'comment_body': ""IMO we don't need a check like this, bcs we're in full control of the landmark types and we do make sure in the data building pipeline that nothing enters that's outside of the type bounds. If we want to check this at this point, then let's throw an exception, bcs that'd be a very serious flaw."", 'comment_created': datetime.datetime(2023, 9, 20, 8, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1334345256, 'comment_body': '```suggestion\r\n  if (!valhalla::mjolnir::AddLandmarks(pt.get_child(""mjolnir""))) {\r\n```\r\nI\'ve edited AddLandmarks to handle the input as child mjolnir, maybe we want to change this back to get child mjolnir. it works for me :)', 'comment_created': datetime.datetime(2023, 9, 22, 12, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}, {'comment_id': 1334352788, 'comment_body': ""Yeah I must not've seen that for some reason. Weird though that I could push at all if I didn't pull your changes before.. I'll revert this!"", 'comment_created': datetime.datetime(2023, 9, 22, 13, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nilsnolde', 'type': 'User'}, {'comment_id': 1334356433, 'comment_body': 'I guess you can push because there is no conflict caused by this commit', 'comment_created': datetime.datetime(2023, 9, 22, 13, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vesperlou', 'type': 'User'}]","[{'commit_sha': '3bf1d1f9ddc7f555151f9d7944046590e5ec15da', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b5c08a3db8fb883b6d52c6852c43cc1e69a3828', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e346d21050cc3e0f088e2c3ced275ee0004628', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f15a733061340553f0b68b01a69a6a336a7dc7', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13a0d386d50ecb629a8898e24bf2f4261d08c5d', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e78ff325055967ab0da1db53d0e3157018f2b23', 'committer_username': 'vesperlou', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 29, 12, 34, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f914b0574a5adf07ec28fa5ae7049c74432f4b3', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc07d9bd3b37aa0562b46919584d02888b8b4e83', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c7374a66a2be20c7ed6d6fd39adb9826d2a9db6', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584eaa67e80f065c4d088060bd87abb677ec5c5b', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8067a10f0dddeb25f302d3612650d601652f393d', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '978bfb1e3edb603a797817c2dc12b7d301c7e039', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66572599cb50e64472d44065dadacc1fc1f8ed57', 'committer_username': 'kevinkreiser', 'committer_name': 'Kevin Kreiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 29, 15, 43, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebc5fd2807fb45fbe945e68dbb8d57fae8ec0a4', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b4ee2b0263439906beacb74eccc8590c052de21', 'committer_username': 'nilsnolde', 'committer_name': 'Nils', 'committer_email': 'nilsnolde@proton.me', 'commit_date': datetime.datetime(2017, 2, 8, 12, 12, 4, tzinfo=datetime.timezone.utc)}]",,91609682,,User,,2,,0,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
49978193,valhalla,valhalla/valhalla,C++,671,4385,104,218,14030,740,50,60,"[{'id': 1521912937, 'number': 4301, 'closed': None, 'created': datetime.datetime(2023, 9, 19, 19, 59, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 6389, 'deletions': 516, 'state': 'open'}, {'id': 1507965364, 'number': 4293, 'closed': datetime.datetime(2023, 9, 19, 10, 45, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 8, 14, 5, 6, tzinfo=datetime.timezone.utc), 'time_taken': 938418.0, 'time_delta': '10 days, 20:40:18', 'additions': 404, 'deletions': 56, 'state': 'closed'}, {'id': 1506957209, 'number': 4291, 'closed': datetime.datetime(2023, 9, 8, 14, 8, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 7, 22, 24, 17, tzinfo=datetime.timezone.utc), 'time_taken': 56667.0, 'time_delta': '15:44:27', 'additions': 767, 'deletions': 57, 'state': 'closed'}, {'id': 1493805830, 'number': 4278, 'closed': datetime.datetime(2023, 9, 6, 13, 37, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 29, 13, 42, 52, tzinfo=datetime.timezone.utc), 'time_taken': 690904.0, 'time_delta': '7 days, 23:55:04', 'additions': 560, 'deletions': 33, 'state': 'closed'}, {'id': 1460189462, 'number': 4233, 'closed': datetime.datetime(2023, 8, 24, 12, 29, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 17, 38, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1882248.0, 'time_delta': '21 days, 18:50:48', 'additions': 514, 'deletions': 187, 'state': 'closed'}, {'id': 1452491106, 'number': 4224, 'closed': datetime.datetime(2023, 8, 2, 8, 13, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 18, 12, 59, tzinfo=datetime.timezone.utc), 'time_taken': 482425.0, 'time_delta': '5 days, 14:00:25', 'additions': 153, 'deletions': 39, 'state': 'closed'}, {'id': 1434599862, 'number': 4201, 'closed': datetime.datetime(2023, 7, 25, 12, 33, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 10, 57, 59, tzinfo=datetime.timezone.utc), 'time_taken': 956145.0, 'time_delta': '11 days, 1:35:45', 'additions': 390, 'deletions': 86, 'state': 'closed'}, {'id': 1420154279, 'number': 4189, 'closed': datetime.datetime(2023, 7, 13, 16, 56, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 4, 21, 15, 3, tzinfo=datetime.timezone.utc), 'time_taken': 762094.0, 'time_delta': '8 days, 19:41:34', 'additions': 358, 'deletions': 0, 'state': 'closed'}, {'id': 1259480227, 'number': 4000, 'closed': datetime.datetime(2023, 3, 28, 13, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 21, 45, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2302858.0, 'time_delta': '26 days, 15:40:58', 'additions': 222, 'deletions': 19, 'state': 'closed'}, {'id': 1259380717, 'number': 3998, 'closed': datetime.datetime(2023, 3, 1, 21, 31, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 20, 8, 41, tzinfo=datetime.timezone.utc), 'time_taken': 4987.0, 'time_delta': '1:23:07', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
