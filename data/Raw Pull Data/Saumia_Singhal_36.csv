pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
424126262,Reworking GeoPoint Widget,"This PR is the work on GeoPoint Widget.

How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No

Do we need any specific form for testing your changes? If so, please attach one.
All Widgets form, or any form with the geo widgets.

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3877,https://api.github.com/repos/getodk/collect/pulls/3877,https://github.com/getodk/collect/pull/3877,closed,1293,523,67,44,22,26,1,0,[{'name': 'behavior verified'}],2020-05-27 21:35:39+00:00,2020-07-23 18:28:39+00:00,4913580.0,"56 days, 20:53:00","[{'comment_id': 432237563, 'comment_body': 'Hi @seadowg! I had some doubts. As here, `GeoPointWidgetTest` does not inherit from any other tests. Should I go about it, or maintain the already implemented hierarchy. Also, I wanted to ask, is there any drawback when running tests having some hierarchy (in terms of running time, or some other factor)?', 'comment_created': datetime.datetime(2020, 5, 29, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433343460, 'comment_body': 'I think we should go for the tests not having a hierarchy i.e. `GeoPointWidgetTest` should not extend anything.\r\n\r\nAs far as implementation goes I think it\'s a harder decision. I think a good way to start would be to rewrite the tests for these widgets (`GeoPointWidget`, `GeoShapeWidget` and `GeoTraceWidget`) as one PR. Then we can discuss how to rewrite the widgets using the new ""framework"".', 'comment_created': datetime.datetime(2020, 6, 1, 16, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 435161318, 'comment_body': ""Instead of building an `expectedIntent` here I would just assert that the `startedIntent` has the correct component and extras. It makes it easier to see what is missing when there is a fail and I'm not sure `equals` on Intent is very good. Are you familiar with how equality works in Java (`equals` vs `==` etc)?"", 'comment_created': datetime.datetime(2020, 6, 4, 10, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 435198463, 'comment_body': ""By building a new Intent, I might get an intent with same component name and extra values, but the `nextStartedActivity()` will not return the same intent. I think that's why the test is failing."", 'comment_created': datetime.datetime(2020, 6, 4, 11, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437990726, 'comment_body': 'I think it\'s be good to write tests for the different appearances here. Right now they show the same thing but I think it\'d be nice. The behaviour we think about from the outside is ""if it has placement-map it\'s this and if it\'s maps it\'s this"". \r\n\r\nTry to write the tests you want to describe the behaviour rather than writing tests that match the current implementation! This is definitely a lot easier when writing new code than backfilling tests.', 'comment_created': datetime.datetime(2020, 6, 10, 9, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437991816, 'comment_body': ""I think we're missing tests for `setOnLongClickListener` and `cancelLongPress`. Should be very similar to the `URLWidget` ones I'd imagine!"", 'comment_created': datetime.datetime(2020, 6, 10, 9, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 438084148, 'comment_body': ""This method should really be called `stubLocationPermissions`. It's probably also good to have a test that checks what happens when location permissions are denied."", 'comment_created': datetime.datetime(2020, 6, 10, 12, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 438143856, 'comment_body': ""Oh okay @seadowg. Yes, I'll change the tests\r\n"", 'comment_created': datetime.datetime(2020, 6, 10, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 438930384, 'comment_body': 'This can be defined in the layout', 'comment_created': datetime.datetime(2020, 6, 11, 16, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 439012257, 'comment_body': 'Ahhh...Sorry I forgot', 'comment_created': datetime.datetime(2020, 6, 11, 19, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 449184784, 'comment_body': ""I don't think there's any reason for the `FormController` to be involved in this. I think that a single `WaitingForDataRegistry` object that keeps track of the state itself and is tied to the `FormEntryActivity` lifecycle would help reduce what the `FormController` deals with. Doesn't have to be done here but might be a nice next step if I'm not missing anything."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 449187072, 'comment_body': ""This doesn't much matter for tests but note that there's only ever one widget waiting for data."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 449190871, 'comment_body': ""This null check seems unrelated now that the data is set by the activity. `FormEntryActivity.setBinaryWidgetData` does that check anyway so I think it's clearer to remove it."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 449194210, 'comment_body': ""Test and name don't match -- we decided the button should be gone, right? So the test name should reflect that."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 449196498, 'comment_body': 'A more accurate name might be `buttonClickLaunchesIntentAndWaitsForLocationData`.', 'comment_created': datetime.datetime(2020, 7, 2, 18, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 449197504, 'comment_body': 'Would be good to also set a non-default accuracy threshhold in the form entry prompt and verify that goes through to the intent.', 'comment_created': datetime.datetime(2020, 7, 2, 18, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 449199637, 'comment_body': ""I think there's a test missing here for if there's a map and it's read-only."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 449882762, 'comment_body': 'Ohh totally forgot that!\r\n', 'comment_created': datetime.datetime(2020, 7, 5, 14, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 449882926, 'comment_body': 'Right sorry! I will correct it.', 'comment_created': datetime.datetime(2020, 7, 5, 14, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 449884562, 'comment_body': ""Sorry @lognaturel I'm not understanding how I would confirm here if the map is read only."", 'comment_created': datetime.datetime(2020, 7, 5, 14, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 451893621, 'comment_body': ""There's no map so the name isn't right. I think that here the code can either go directly in the constructor or be renamed to something like `getAccuracyThreshold`. If it's the later, then I think the method should return a `double`."", 'comment_created': datetime.datetime(2020, 7, 9, 0, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 451893784, 'comment_body': 'I think this can just be removed.', 'comment_created': datetime.datetime(2020, 7, 9, 0, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 451896933, 'comment_body': ""I think this changes the behavior that was there before. Before your changes I see:\r\n```\r\nif (useMap) {\r\n            if (readOnly) {\r\n                startGeoButton.setText(R.string.geopoint_view_read_only);\r\n```\r\n\r\nwhich implies that if the question is read-only, the map should open and show the point but not allow it to be changed. Can you verify what the prior behavior was with a readonly geopoint with map and a default value, make sure it's still the same, and that there's a test for it?\r\n\r\nThis is the case I was referring to at https://github.com/getodk/collect/pull/3877/files#r449199637."", 'comment_created': datetime.datetime(2020, 7, 9, 0, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 453122139, 'comment_body': ""Note here that the `GeoPointMapActivity` accepts an intent extra to represent whether the map should be readonly. So it's very clear that the intended behavior was to show a readonly map."", 'comment_created': datetime.datetime(2020, 7, 10, 23, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 453175357, 'comment_body': '@lognaturel Should I remove `intent.putExtra(READ_ONLY, readOnly)` from here as well? In case of `readOnly` prompt, the button visibility is set to `View.GONE`. So, the user will not be launching any intent in that case.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 453251284, 'comment_body': 'Good catch, yes!', 'comment_created': datetime.datetime(2020, 7, 12, 0, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}]","[{'commit_sha': '5242dd37f3138b47c085a28c0e9121e340955392', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '875a42cb1b8ef93c2b358b2a9ee96066c822993d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e978ce326d8a217680927910a88521bbe7292a8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5707aea3b97a8a5cce6800ebc22d0186ba5cdbf', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e7346831693778ed3e818846dde865a3e6abb8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d95616432fe5a849451880610f1b4e12e2407d5', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd5a679ed02005fe771b9e4f9e4b15fce39ce1da', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09540129586e2e3f62cd0f182a21f904c1c38f2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae5701898bfaf150324f1d36e99a70091dcd3d0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4bb806c37243c46898e52eba90bc0a32130fcab', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d2cbba25f116a050d77a421d102979904e4c77', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976bfba511eed29fd8201f879a156217dabb81bf', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cacf0d7f6d3708b72d70992c09a343b62a6408f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7702959e4987ef2b47b4e2ca3de463bbd80245ea', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '379bf43c489994f0f1d6269e03d83264e3452731', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e64f443d61e74d99989b64ccab34597695b2da0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c6b16780847f0ac009e8092bcf2c9ed5aa0de60', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa3b4648d504c7ef54021ad59141750d9fd3c87', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66e31d45ea354b6aca54cfe1cf3aea2ae2277eb', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284d159c28776f4e0d73df7cdaadd87c2b342739', 'committer_username': 'seadowg', 'committer_name': 'Callum Stott', 'committer_email': 'callum@seadowg.com', 'commit_date': datetime.datetime(2011, 1, 10, 20, 57, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904f18b537bbbb48f83cca8e8614c363449a0f09', 'committer_username': 'seadowg', 'committer_name': 'Callum Stott', 'committer_email': 'callum@seadowg.com', 'commit_date': datetime.datetime(2011, 1, 10, 20, 57, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f2d5c2c16fd4f93cab3ae60618df80726a5649', 'committer_username': 'seadowg', 'committer_name': 'Callum Stott', 'committer_email': 'callum@seadowg.com', 'commit_date': datetime.datetime(2011, 1, 10, 20, 57, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e74cd86824ede106dc7826dc2cc035264660365', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc0f00568919902079f03d4bb87fc8dda06fef4d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe33e2ce19ed48b796ed5db6363a14de55c99774', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25255081254e0e76c18b2df00463ed271e0d5d7a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f77533666a2681065127b35ac384a517aba746a6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5faa224f4658dd2568330b1f869de4107509e829', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcfae600290cc1aaebd54061b9569b98eeda2cee', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '729af00d1739b9fef0d530101c9d525dd4658b6b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0379279d38f7e729e3a54ef870e89993688d3e4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cada8798f827d561029fbfbe64345cbba7a704c4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12f42dfef1f0a1c7a67167bcf4e300b8692c1ef7', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c69111aefed3d6670290e6f502b3d15f0cd22d76', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99063ea02eeb3548d81b30162d3f775bc2e57b7e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2f4e3acfdda50fc06b40a947199939a87343a0f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c195dc02242a0959aa4ec0b742f4399ddb43c57a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27a77161c45d0a3310e99a8d3acff83625d0c8ab', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e545c1338cd3de6fe2dae95c7ad6db14a5bf0736', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba67d2be598b56302e0f2a903077e42ef26e438', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99dfac26bbbc23556e9bb06248400ebc9417bb23', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389d0aee90f485280f1b2942cc2037572e697fb9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2670a42bc151ed4d8be623a3cb111586c410af7', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e369a0cc80ac273dec108ba9236ced71fe37fe0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
417948554,Rewriting URL widget,"<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

As part of the project 'Rewriting the widget framework ' described on ODK forum [here](https://forum.getodk.org/t/gsoc-rewrite-odk-collects-widgets-using-the-new-widget-framework/25328). This PR includes the new framework for the URL widget.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No

#### Do we need any specific form for testing your changes? If so, please attach one.
All Widgets form, or any form with the URL widget.

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3831,https://api.github.com/repos/getodk/collect/pulls/3831,https://github.com/getodk/collect/pull/3831,closed,225,71,7,30,9,75,1,0,[{'name': 'behavior verified'}],2020-05-14 12:00:12+00:00,2020-06-23 08:00:26+00:00,3441614.0,"39 days, 20:00:14","[{'comment_id': 432376456, 'comment_body': 'I would rename this `whenPromptHasAnswer_displaysAnswer` and the below one to `whenPromptAnswerDoesNotHaveAnswer_displayEmptyString`.', 'comment_created': datetime.datetime(2020, 5, 29, 9, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432376675, 'comment_body': 'This can just be `clickingButton...` as it\'s the ""normal"" case!', 'comment_created': datetime.datetime(2020, 5, 29, 9, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432377337, 'comment_body': ""I'd not bother with `times` here. I'd usually only use it when something happens more than once but I expect a dependency to only get called once in that case (maybe when testing caching or something)."", 'comment_created': datetime.datetime(2020, 5, 29, 9, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432377653, 'comment_body': 'Nice change!', 'comment_created': datetime.datetime(2020, 5, 29, 9, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432377721, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2020, 5, 29, 9, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432379335, 'comment_body': 'This can move into the XML layout.', 'comment_created': datetime.datetime(2020, 5, 29, 9, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432380419, 'comment_body': ""We should try as much as possible to use the `@dimen` margins so they're consistent in throughout the app. Here you can probably use `@dimen/margin_standard` for the padding as that is the normal left/right spacing (16dp)."", 'comment_created': datetime.datetime(2020, 5, 29, 9, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432380816, 'comment_body': 'Lets maybe use `@dimen/margin_extra_small` for this', 'comment_created': datetime.datetime(2020, 5, 29, 9, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432496266, 'comment_body': 'Oh okay thanks. I will keep it in mind.', 'comment_created': datetime.datetime(2020, 5, 29, 13, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 432496603, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2020, 5, 29, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433158107, 'comment_body': 'I don\'t think this or the test below are correct. I think my question around writing tests for `setOnLongClickListener` and `cancelLongPress` was confusing though now I look at it. Lets breakdown what we need for each method:\r\n\r\n* `setOnLongClickListener`: usually this needs to call `setOnLongClickListener` on any child views in the widget so that when I long press on anything in the widget I see the ""Edit Prompt"" pop up menu. Here you\'ll see that `setOnLongClickListener` is empty so that long pressing on the URL button won\'t do anything - it\'s clickable so it consumes the long press event. We need to write a test that makes sure long pressing on the url button will call any listener passed to the widget\'s `setOnLongClickListener`.\r\n* `cancelLongPress`: this makes sure that any long press cancellation (usually the user scrolling around) works properly. I don\'t think there is a way to test that, so I think we should just make sure to review this method and make sure any views in the widget have the call propagated to them.', 'comment_created': datetime.datetime(2020, 6, 1, 10, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433158867, 'comment_body': 'One tip by the way for checking the coverage you have for an object is to use Android Studio\'s ""Run with coverage"" feature. If you use the green ▶️ icon to run the test file (in this case `URLWidgetTest`) and then hit ""Run X with Coverage"" you\'ll see green and red highligting in the `URLWidget` file for what lines are covered by tests and what ones aren\'t.', 'comment_created': datetime.datetime(2020, 6, 1, 10, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433160836, 'comment_body': 'Thank you so much for the suggestion. I will modify the tests.', 'comment_created': datetime.datetime(2020, 6, 1, 10, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433272079, 'comment_body': ""Here's you're extending URLWidget for the test and then using that. That means your test is now of TestURLWidget not URLWidget. We shouldn't use fakes, mocks or stubs of the objects we're testing as this means we're not really testing the object itself!\r\n\r\nI'm not sure why you created this as you could just call `setOnLongClickListener` on the widget in the test."", 'comment_created': datetime.datetime(2020, 6, 1, 14, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433273357, 'comment_body': ""I think a better way to test this is to pass a `mock(Listener.class)` to the Widget's `OnLongClickListener` and then check that it is called (using `when`) after you call `urlButton.performLongClick()`. Does that make sense? That would make sure the listener the URL button has and the listener the widget has are definitely the same"", 'comment_created': datetime.datetime(2020, 6, 1, 14, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433282848, 'comment_body': ""Just a tiny change while we're here. Often it's nicer to have the margin between two items be on the second item (the `MaterialTextView`) rather than the first (the `MaterialButton`) here. This often helps when the first/last items have different margins and also makes it easier when deleting items. I'd probably move the `marginBottom` here so it's a `marginTop` on the `MaterialTextView`."", 'comment_created': datetime.datetime(2020, 6, 1, 14, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433314616, 'comment_body': 'Ohh! Thanks for the advice. I will remember that.', 'comment_created': datetime.datetime(2020, 6, 1, 15, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433339730, 'comment_body': 'This is much better! But sorry I lead you down a slightly wrong path there. I think instead of using `when` to set up a result and then verifying it later (lines 108 and 111) you could just do `verify(listener).onLongClick(urlButton)`. Does that make more sense?', 'comment_created': datetime.datetime(2020, 6, 1, 16, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433359482, 'comment_body': 'I wrote the test like this initially:\r\n\r\n\r\n```\r\n        UrlWidget widget = createWidget(promptWithAnswer(new StringData(""blah"")));\r\n        Button urlButton = widget.findViewById(R.id.url_button);\r\n        widget.setOnLongClickListener(listener);\r\n        urlButton.performLongClick();\r\n        verify(listener).onLongClick(urlButton);\r\n```\r\n\r\nBut this test does not pass.', 'comment_created': datetime.datetime(2020, 6, 1, 16, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433361167, 'comment_body': 'Right but I think that\'s a correctly failing test: `URLWidget#setOnLongClickListener` doesn\'t do anything at the moment so I\'d expect that test to be red. If you try long clicking on the URL button in the app at the moment right now you\'ll see it doesn\'t show the ""Edit Prompt"" pop up. ', 'comment_created': datetime.datetime(2020, 6, 1, 16, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433362372, 'comment_body': 'It says `Wanted but not invoked` and `Actually, there were zero interactions with this mock.` I do not understand.', 'comment_created': datetime.datetime(2020, 6, 1, 16, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433364405, 'comment_body': ""Right that means that the `onLongClick` on the listener was never called. It might be worth reading some docs at https://site.mockito.org/ if you're confused by this message. If you look at `URLWidget#setOnLongClickListener` you'll see it's empty so that test should fail in the way you're seeing. You have a red test that you can now make green!"", 'comment_created': datetime.datetime(2020, 6, 1, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433406686, 'comment_body': ""Hi! I'm sorry. I didn't refresh the page and so kept adding comments without reading your second last comment. I understand it now."", 'comment_created': datetime.datetime(2020, 6, 1, 18, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433410963, 'comment_body': ""@SaumiaSinghal hah I've made exactly the same mistake before!"", 'comment_created': datetime.datetime(2020, 6, 1, 18, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433412540, 'comment_body': ':disappointed_relieved: ', 'comment_created': datetime.datetime(2020, 6, 1, 18, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433857920, 'comment_body': ""Is this an accidental change? I can't see a reason for it."", 'comment_created': datetime.datetime(2020, 6, 2, 13, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433938850, 'comment_body': 'Oh Sorry, I was trying something in `onDetachedFromWindow` test. ', 'comment_created': datetime.datetime(2020, 6, 2, 14, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 434997273, 'comment_body': ""Extra 't' in `whenServiceConnectionIstNull`"", 'comment_created': datetime.datetime(2020, 6, 4, 5, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 434997455, 'comment_body': ""This test and the following seem to me like they should be part of `CustomTabHelper`'s tests, not the tests for a specific widget."", 'comment_created': datetime.datetime(2020, 6, 4, 5, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 434997705, 'comment_body': 'I think this could be `_opensUri` instead of `_callsCorrectMethods` so that the intended behavior is clear.', 'comment_created': datetime.datetime(2020, 6, 4, 5, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 434998262, 'comment_body': ""Since we're going to be touching every widget, should we consider using view binding?"", 'comment_created': datetime.datetime(2020, 6, 4, 5, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 434998977, 'comment_body': 'Could we consider introducing a style that includes all of the options below so that if we want to change the in-form buttons we can do it in one place?', 'comment_created': datetime.datetime(2020, 6, 4, 5, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 434999158, 'comment_body': ""Can this also be a style so it's easy to make consistent across widget types?"", 'comment_created': datetime.datetime(2020, 6, 4, 5, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 435086818, 'comment_body': ""I'd be interested to see if we can get rid of the button... We're hitting the geowidgets next so might make sense to introduce button styles there if they're hanging around."", 'comment_created': datetime.datetime(2020, 6, 4, 8, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 435087752, 'comment_body': 'Yeah actually this should have a `TextAppearance` style. Probably `TextAppearance.Collect.Body1`.', 'comment_created': datetime.datetime(2020, 6, 4, 8, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 435093689, 'comment_body': 'Yes, I have seen that style probably in `ProgressDialogFragment`. I will use that.', 'comment_created': datetime.datetime(2020, 6, 4, 8, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 435094888, 'comment_body': ""Yes, actually. I didn't realize I can directly use them without view binding. And as a lot of tests have to be added, this is a better option.\r\n "", 'comment_created': datetime.datetime(2020, 6, 4, 8, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 435096217, 'comment_body': 'Ahh.. sorry for the typo.', 'comment_created': datetime.datetime(2020, 6, 4, 8, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 435414735, 'comment_body': ""That makes sense, @seadowg. Up to y'all to decide whether you want to add do a style with the next set of widgets or not."", 'comment_created': datetime.datetime(2020, 6, 4, 17, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 435417909, 'comment_body': ""Just a small wording correction, you're actually using the [view binding feature](https://developer.android.com/topic/libraries/view-binding) now rather than explicitly binding your views. I know, it's confusing. Speaking of confusing, where is view binding turned on, @seadowg? I'm confused about not seeing it in the build.gradle file."", 'comment_created': datetime.datetime(2020, 6, 4, 17, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 435418801, 'comment_body': ""What about also including padding, height, color, etc in a style for answer text? I think we will want to change how answers are displayed and it'd be great to be able to do that in a single place for all widgets."", 'comment_created': datetime.datetime(2020, 6, 4, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 435499520, 'comment_body': 'Yes, I think we can do that, for TextView and Buttons that we use, as we have the same style for them for many widgets.', 'comment_created': datetime.datetime(2020, 6, 4, 19, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437234417, 'comment_body': ""I'm also confused. It looks like @SaumiaSinghal is just using `findViewById` with `protected` fields. @lognaturel just to be clear are you saying we should move to using the new [View Binding](https://developer.android.com/topic/libraries/view-binding) feature before we accept this PR? I'd be in favour of that if so."", 'comment_created': datetime.datetime(2020, 6, 9, 8, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437283568, 'comment_body': 'Does that still make sense to implement ButtonWidget? That was created in order to use WidgetViewUtils.createSimpleButton() - one method used in widgets for generating a button but if we are going to use xml files instead of creating those buttons programmatically we probably can get rid of it right?', 'comment_created': datetime.datetime(2020, 6, 9, 9, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437284421, 'comment_body': 'I would move this check to onButtonClick() then this expression will look simpler.', 'comment_created': datetime.datetime(2020, 6, 9, 9, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437286255, 'comment_body': 'Yes @seadowg :/ I was. I fixed that.', 'comment_created': datetime.datetime(2020, 6, 9, 9, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437287388, 'comment_body': 'Please change this name we still have such one-char names in our codebase.', 'comment_created': datetime.datetime(2020, 6, 9, 9, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437292522, 'comment_body': ""What do you think about such comments? Even on master (before this big change) there is no single line crated by Yaw (every single line has been edited) of course the whole project exists thanks to Yaw but isn't git enough?"", 'comment_created': datetime.datetime(2020, 6, 9, 10, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437297411, 'comment_body': 'The same here when it comes to naming.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437299816, 'comment_body': 'I do think having a separate method `onButtonClick()` is redundant. We can have all the functionality in `setOnClickListener()` instead of explicitly calling `onButtonClick()` from there. Should I remove it?', 'comment_created': datetime.datetime(2020, 6, 9, 10, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437302642, 'comment_body': ""I'm not talking about removing that method you can keep since you call it in https://github.com/getodk/collect/pull/3831/files#diff-a5c152dc7425469015c19b7a29b8da07R69\r\nbut implementing the interface and using `@Override` above the method doesn't make sense because this method is no longer called like before (using interface from WidgetViewUtils.createSimpleButton()) you do that directly from the same widget (the line I attached)."", 'comment_created': datetime.datetime(2020, 6, 9, 10, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437303809, 'comment_body': 'Oh okay I understand. Thanks for explaining.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437347054, 'comment_body': 'You can simplify this: `openUrlButton.setOnClickListener(v ->  onButtonClick());`', 'comment_created': datetime.datetime(2020, 6, 9, 11, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437362936, 'comment_body': 'Hi @lognaturel! I updated the tests and used  `spy(widgetTestActicity())` instead to verify `unbindService()` is called.', 'comment_created': datetime.datetime(2020, 6, 9, 12, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437377105, 'comment_body': 'This check will be needed in case of every single widget button. If so it would be better to create our own `WidgetButton` class that will extend `com.google.android.material.button.MaterialButton` (then you can use it in your layout file). In such a class we can then override:\r\n```\r\n    @Override\r\n    public boolean performClick() {\r\n        if (MultiClickGuard.allowClick(getClass().getName())) {\r\n            return super.performClick();\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n```\r\n\r\nwhat do you think about this approach? ', 'comment_created': datetime.datetime(2020, 6, 9, 12, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437379220, 'comment_body': 'I would get rid of this field. this is used in just one place `onButtonClick()` so it would be better to add a method like:\r\n```\r\n    private Uri getUri() {\r\n        return Uri.parse(stringAnswer.getText().toString());\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 12, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437403844, 'comment_body': 'Yes, that would be great. I can create `WidgetButton` class in the `material` package? ', 'comment_created': datetime.datetime(2020, 6, 9, 13, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437406178, 'comment_body': 'Maybe later, we can shift more common functionality to the `WidgetButton` class.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437431425, 'comment_body': ""> I can create WidgetButton class in the material package?\r\n\r\nI'm not sure that package contains implementations for elements that don't exist the Material Components framework in this case it's about customizing not implementing so maybe our main dir would be a better choice what do you think @seadowg "", 'comment_created': datetime.datetime(2020, 6, 9, 13, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437439752, 'comment_body': ""Do we need this check? I'm pretty sure we can call setText(null) and it's safe. Could you check and remove it if not needed?"", 'comment_created': datetime.datetime(2020, 6, 9, 13, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437442447, 'comment_body': ""Please move this method to the bottom of the class since it's private and used only by onButtonClick()."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437443163, 'comment_body': 'The same with getUri()', 'comment_created': datetime.datetime(2020, 6, 9, 13, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437445944, 'comment_body': ""Please add @Override I know it's not required but if we do that for all the other methods let's keep consistency."", 'comment_created': datetime.datetime(2020, 6, 9, 14, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437447905, 'comment_body': 'We have `ToastUtils` class which we use for displaying toast so we should use it here as well.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437448068, 'comment_body': 'We have `ToastUtils` class which we use for displaying toast so we should use it here as well.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437451089, 'comment_body': ""Yeah the `material` module is mostly for implementations of Material Components like @grzesiek2010 suggests. I'd say we could make a `MulticlickSafeButton` that extends `MaterialButton` and just lives in the `org.odk.collect.android.views` seeing as it's just a general view. If it seems like like we want one just for widgets it could live in the `widgets` package."", 'comment_created': datetime.datetime(2020, 6, 9, 14, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437462501, 'comment_body': ""Even lower please :) both are called only by onButtonClick() so it looks better if we have them below. Sorry for being picky but if you are rebuilding the widget it's good do fix even such small things."", 'comment_created': datetime.datetime(2020, 6, 9, 14, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437467659, 'comment_body': ""Oh no that's okay! It's good if we have all these things fixed."", 'comment_created': datetime.datetime(2020, 6, 9, 14, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437470664, 'comment_body': 'It was a question more to @lognaturel ', 'comment_created': datetime.datetime(2020, 6, 9, 14, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 437941132, 'comment_body': ""I think now you can get rid of this variable and just call `stringAnswer.setText(prompt.getAnswerText());` below, it won't be a long or unclear expression. "", 'comment_created': datetime.datetime(2020, 6, 10, 8, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 438638740, 'comment_body': '@seadowg @grzesiek2010, Should I go ahead and make `MulticlickSafeButton` in the `org.odk.collect.android.views` package?', 'comment_created': datetime.datetime(2020, 6, 11, 8, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 438721956, 'comment_body': ""Yes please go ahead you will need it in other widgets either way so I think it's a good idea"", 'comment_created': datetime.datetime(2020, 6, 11, 11, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 440921072, 'comment_body': ""Sorry, now I'm really confused, too! Yes, @seadowg, that's what I was requesting. I was expecting not to see any more explicit `findViewById` in the final code but they're still there."", 'comment_created': datetime.datetime(2020, 6, 16, 15, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 440922689, 'comment_body': ""I think in this case it makes sense to remove the whole header comment since it doesn't add much. I also know for sure that @yanokwa doesn't like `@author` tags and is happy for history to be in `git`.\r\n\r\nFor those who use `@author` tags, the rule is supposed to be that anyone who touches the file adds their name and names are never removed. For that reason I don't typically remove author tags from people I don't know."", 'comment_created': datetime.datetime(2020, 6, 16, 15, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 441466168, 'comment_body': 'Great! so @SaumiaSinghal please remove it.', 'comment_created': datetime.datetime(2020, 6, 17, 11, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}]","[{'commit_sha': '4644a29dd28745eb42f5543e1ae62ddfcd28cd44', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2e2dad0a2c83b19d3924a2aed5d0407754b6165', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eee5b061ed1f38f4e9d1e9c14fe434083b21866', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b920eaa404271504f94abc23ee051c5a2ffa7f7', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1374418078cb1ec611611b49fed18cf59c07875', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a10f13e7387b31492c8c2430b4c5936e6ca203ba', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28cc22129b2c634646b2271a1f2eaa156c40903f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74b9ca5ba40520744f1534f91f5f130c6b9859b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1266f50abab2a96918d29988eea255e695603812', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78d2691e85b30059e52c299cb01a99171fa263d2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e3880183cb06fce571364d0bd210dc8129117d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f89b975f226a7f6c4f6c9322ff130cd82dedf8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1278c50c1b2b79b2595b8cc455e1551ac67ab3e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c1e24eff5d3467faa945cca70b01660018308a6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7525a9aeefe3604d0c94c03c4c6d0a19f5248c54', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e622a281b2216aee38d9a9f62a441d73904bc5db', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68ff91d562d27d0e12fe4e1c5dc1c946433a4da', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea089e852cf60dbb6a46fc57d125890027391a40', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33aa0281be2967799d169ec504597d67678c5225', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d868a5904497215cfea63a483c386ca036c05f6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e245eeacbc776adebdf4b2dff704a99ff8b1605b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ca22e0ed2d0710b628347b1a0135ed4e1c80cef', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb24e058e43aad3a382145dd0ebe377b6405094c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9388b004f379cf70ae2347759748b5039270ae9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33a27cee1a8876e771c0f6f7e7aa2b1dc6b60ae2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c62b83c135fe9541156393049f7984586fc57cb1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa3f6d05e79e8a3154b12a57401bcbb1ef2ee76', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e7099591b84afbc0b53d9eb0840997fb317f234', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0a06037b95a1805335843dc089e59a42983ffa3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819b010277a11d886434c9a0a20dac685160790b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
434203173,Migrate to `androidx` Library for Implementing Preferences in Collect,"Work towards #3849

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
I tested all the preference screen and preference dialogs on every theme. It fixes the material contained button on dialogs. I checked it for all the dialogs shown on the settings preferences. There is a minor UI issue of indentation on `MapsPreference` Screen.

#### Why is this the best possible solution? Were any other approaches considered?
I replaced the `android` Preference library with `androidx` one, as the old framework is deprecated now. It solves a lot of visual issues related to the dialogs shown on Settings Preference in new Experimental theme.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I found that in the new `androidx` preference library, the dialogs are separated from their `DialogPreference` class. Most of the changes are for shifting the code that concerns the dialog from the `DialogPreference` class to a newly created `PreferenceDialogFragment` class. I was careful not to add any new behavior while working on this. However, I feel the part of the settings preference that is most prone to regression risk is the `ReferenceLayerDialog` and `ResetSettingsDialog`.   

#### Do we need any specific form for testing your changes? If so, please attach one.
No

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3923,https://api.github.com/repos/getodk/collect/pulls/3923,https://github.com/getodk/collect/pull/3923,closed,796,679,43,33,11,15,1,0,[{'name': 'behavior verified'}],2020-06-14 21:14:45+00:00,2020-07-24 09:35:14+00:00,3414029.0,"39 days, 12:20:29","[{'comment_id': 441108672, 'comment_body': 'Hi @seadowg! I was not able to create `PreferenceFragmentCompat` using Robolectric, and could not think of any other method to test it. I made `BasePreferenceFragment` extract `PreferenceFragmentCompat`, as `androidx.PreferenceFragment` is also deprecated.', 'comment_created': datetime.datetime(2020, 6, 16, 20, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 441542915, 'comment_body': ""Mocking is fine here I think! You can make the call to `addPreferencesFromResource` throw a `ClassCastException` using Mockito's `thenThrow`."", 'comment_created': datetime.datetime(2020, 6, 17, 13, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 441544394, 'comment_body': 'Oh okay Thanks @seadowg! ', 'comment_created': datetime.datetime(2020, 6, 17, 13, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 444127703, 'comment_body': ""Now we're doing this I think we should be able to get rid of the `AndroidXPreferencesActivity` and just start those fragments like everything else. Could you make that happen please?"", 'comment_created': datetime.datetime(2020, 6, 23, 10, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 444128676, 'comment_body': 'Did you need this?', 'comment_created': datetime.datetime(2020, 6, 23, 10, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 444564469, 'comment_body': 'Yes, the test is failing without it. :/\r\n', 'comment_created': datetime.datetime(2020, 6, 23, 23, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 444778930, 'comment_body': 'Why do you need to do this?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 444782464, 'comment_body': 'Not sure why you have to create your own dialogs for these preferences (and not just use `EditTextPreference`)? Have you looked through the docs at https://developer.android.com/guide/topics/ui/settings/ to see if there are other ways of implementing the features there is code for in the dialogs?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 444782814, 'comment_body': 'What is the code in this method doing?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 444791840, 'comment_body': ""I added this just to avoid memory leaks. I'll check once whether it has really some effects or not.  "", 'comment_created': datetime.datetime(2020, 6, 24, 10, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 444845656, 'comment_body': ""`EditTextPreference.getEditText()` method was removed in `androidx.preference` as discussed [here](https://stackoverflow.com/questions/32477726/android-no-getedittext-method-in-edittextpreference-with-preference-support-li). That's why I used `CustomEditTextPreference`. I do see that now that there's an easy way of doing so. I will review my code once again and then will ask for re-review.  "", 'comment_created': datetime.datetime(2020, 6, 24, 12, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 444864596, 'comment_body': ""Sorry for the redundant code. I removed the `CustomEditTextPreference` class. I followed [this article](https://medium.com/@JakobUlbrich/building-a-settings-screen-for-android-part-3-ae9793fd31ec) for creating Reference layer dialog and Reset dialog. I didn't find any better explanation in the docs :("", 'comment_created': datetime.datetime(2020, 6, 24, 12, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 448913907, 'comment_body': ""Not sure why you need this. If you're getting a leak here lets try to work out what's causing and see if there is a better way to solve it!"", 'comment_created': datetime.datetime(2020, 7, 2, 10, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 458948005, 'comment_body': ""We should absolutely avoid suppressing lint warnings if they get in our way unless we really need to. Here it's telling us that we should be using this API as they might change it which would mean our code could end up breaking down the line. \r\n\r\nNot sure why we need to do this here and not use the XML attributes like on other preferences screens?"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 458997326, 'comment_body': 'Correct @seadowg! I fixed it. I set the `iconSpaceReserved` to false in the `MapPreference` class.', 'comment_created': datetime.datetime(2020, 7, 22, 18, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': '0d8fac9300962508178b7deb8858a752c2cd2f04', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd01b824f2f8ad5539e6a4bcc416e3240b35ba2f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525121cb596a7377b8fa9af01f2534f15fe4f7f8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fd3b2261307294f27f706123425abdb4f61c30', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e7dc4173846ea4426a1fe51e9ad0caaba64842', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54aea9276f422e65483f7cca45bd37abe7b9fa0e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '429203e5ae83e157f9a8b5ee4d6e70e08b98586f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9569b5598ec8975aecfc5fbe05512ed3bd1e003', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f1515ea8730d9303345898f45e241a828ae762', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18452d67c70ad22671877119d19a1d2a81423372', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '076d18a3ae57a63dd6a9364d28ee3bb4ef224b5e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608755a36f88ff88459e42fb43b18c6a0ca4e8a2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a812400b44807177a3bd0733536b18bea5cf390', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09047d49e0472b26d802a8587a034dbfd136017e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e1ad749f8bc5b937bf8ac51eba5b404ac4ede3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32b0e018470087b1eb9dd44437a4ec094dec3816', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003e12474aa03299e38a6cfc230f3ea75f1e751a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f6e7c623e911e3edaab974797d3a5f7414e07b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b166a343c1b9667a4a1d1aa2d5a206ad6599f0fc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9c7afadd5c5dba111d1c6f9649a3491dc5c69d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ef85492969a233e15310bfca563d55e49a7b92', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6d7b8e6dec010b67a819ea8e1f7623872f2b119', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '393b4ea8ecf23af236c96251f8c5cf32b113fb32', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef38cc4da2f09dcba197e40d8ed83775101cf679', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72866ca7d3793fdb88e16157e98b166198b30e9f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32b1b02124682000be012aeff078f042c550818c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f042f4a3e0e7469fa8d1cc0db4378992abdb4999', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5b826f23c3a32e06ef710a290038e848ea20589', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0642f7ec3c2a84a84a8da1d6dbc779cb3304120e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9d323aa8078924c3fe8e0cbafcdce34e5c937d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d07c3a962740032b501a99b7f1157f65ee76a1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '736eeb8203a753b48a9b291b019847a5fa7a66d2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '671d8a72fb289bd2b5b5a07fc33729f39b01bc51', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
421185124,Fixed Dialog Button for Experimental Magenta Theme,"Work towards #3849

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
I tested it.

Light Theme           |     Magenta Theme
:-------------------------:|:-------------------------:
![WhatsApp Image 2020-05-31 at 18 24 49 (1)](https://user-images.githubusercontent.com/35730054/83352891-6684dc00-a36c-11ea-8aed-6192bb5bd9c2.jpeg)  |  ![WhatsApp Image 2020-05-31 at 18 24 49](https://user-images.githubusercontent.com/35730054/83352900-6f75ad80-a36c-11ea-9c4a-810480b138ba.jpeg)
  

#### Why is this the best possible solution? Were any other approaches considered?
I replaced Progress dialog with Alert dialog, and inflated the view with `progress_dialog.xml` file.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No

#### Do we need any specific form for testing your changes? If so, please attach one.
No

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3851,https://api.github.com/repos/getodk/collect/pulls/3851,https://github.com/getodk/collect/pull/3851,closed,138,87,5,10,7,5,1,0,[{'name': 'behavior verified'}],2020-05-21 06:56:15+00:00,2020-06-04 14:18:58+00:00,1236163.0,"14 days, 7:22:43","[{'comment_id': 432349498, 'comment_body': 'Could this not use a `ProgressDialogFragment` instead?', 'comment_created': datetime.datetime(2020, 5, 29, 8, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 432625797, 'comment_body': ""Oh I didn't use `ProgressDialogFrgament` because I thought that the lifecycle changes are handled here by the `ViewModel`, so, I just used an `AlertDialog` instead. But, as I have read  in most of the articles like [here](https://guides.codepath.com/android/using-dialogfragment), that using a dialog instead of fragment, and handling lifecycle changes by the use of some variable, is a bad practice, so I'll just switch to ProgressDialogFragment here."", 'comment_created': datetime.datetime(2020, 5, 29, 17, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433851389, 'comment_body': 'This is the right thing to do, but we have a helper that does it for you! You can use `DialogUtils.dismissDialog` should help you out here.', 'comment_created': datetime.datetime(2020, 6, 2, 12, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433851847, 'comment_body': 'Like with dismissing you can use `DialogUtils.showIfNotShowing`. Sorry I should have pointed those out before leading you down the `ProgressDialogFragment` path!', 'comment_created': datetime.datetime(2020, 6, 2, 12, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 433870917, 'comment_body': ""That's okay! Actually I have used `DialogUtils.showIfNotShowing` before :disappointed: "", 'comment_created': datetime.datetime(2020, 6, 2, 13, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': '95637da39bb9261d5a72b307438e839f30450a5a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebca7c6d8f197e93d12b77a8137dd4fbd4394781', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878a0307ed14c28ba4d3e30b8c9af35189ecea69', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f30b7e7c04fd1671e7f46ca76573148955228e9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dae961c4b33f71f291e0e102736c05a71e11599', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f1f34863ab75ab0d0bbc0a6974222a616589714', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bafab3c3bc221f12e97ad34dffac72f70a8ec229', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0726e5b22f2bf36000ab99dd13b4015e1944c4b9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e02111af2dc58b7dd8c7b4244bcfaa330405155', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c295bb9e3570ad1a12e8b9d9e72feefaa159f8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
421697602,Added Search View Style for Magenta Theme to remove Search Hint icon,"Work towards #3849 

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
I tested it.

#### Why is this the best possible solution? Were any other approaches considered?
I created a search view style, adding null for search hint icon for the new theme, just like, it is there for light and dark theme.
 
#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No regression risks

#### Do we need any specific form for testing your changes? If so, please attach one.
No specific form

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3858,https://api.github.com/repos/getodk/collect/pulls/3858,https://github.com/getodk/collect/pull/3858,closed,6,0,1,1,1,0,1,0,[{'name': 'behavior verified'}],2020-05-22 03:43:53+00:00,2020-06-02 21:54:23+00:00,1015830.0,"11 days, 18:10:30",[],"[{'commit_sha': '95a9a77edea40302e79ca606ef4982d0b2ee11e0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
458517255,Hide Extra Icon Space in Form Management Settings Preference,"Closes #3990 
<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/getodk/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
I tested it.

#### Why is this the best possible solution? Were any other approaches considered?
I used `app:iconSpaceReserved = false`.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No

#### Do we need any specific form for testing your changes? If so, please attach one.
No

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3993,https://api.github.com/repos/getodk/collect/pulls/3993,https://github.com/getodk/collect/pull/3993,closed,2,1,1,1,0,0,0,0,[],2020-07-29 15:33:04+00:00,2020-07-30 04:17:45+00:00,45881.0,12:44:41,[],"[{'commit_sha': 'f54c811287316417b980dc37a33359ff37615a03', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
405650674,Used Dialog Fragment to retain Exit Form Dialog on Orientation Change,"Work towards #3612 

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
I tested it on Android 9.0.

#### Why is this the best possible solution? Were any other approaches considered?
I shifted creating alert dialog inside dialog fragment so that they can be retained by the activity on configuration change. I added tests for the same.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No regression risks.

#### Do we need any specific form for testing your changes? If so, please attach one.
No 

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3782,https://api.github.com/repos/getodk/collect/pulls/3782,https://github.com/getodk/collect/pull/3782,closed,274,127,7,13,8,44,1,0,[{'name': 'behavior verified'}],2020-04-19 11:45:41+00:00,2020-06-02 20:57:56+00:00,3834735.0,"44 days, 9:12:15","[{'comment_id': 411525569, 'comment_body': 'Why did you have to make this change?', 'comment_created': datetime.datetime(2020, 4, 20, 16, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 411526609, 'comment_body': 'Definitely good to move this to a `ViewModel` 👍', 'comment_created': datetime.datetime(2020, 4, 20, 16, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 411527290, 'comment_body': 'We can probably remove this logging now as we should have a clearer picture whether the `FormController` is null or not here.', 'comment_created': datetime.datetime(2020, 4, 20, 16, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 411530519, 'comment_body': 'I think you can just do `shadowOf(getMainLooper()).idle();` instead here which a more general way of running the looper.', 'comment_created': datetime.datetime(2020, 4, 20, 16, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 411530652, 'comment_body': 'Same as above!', 'comment_created': datetime.datetime(2020, 4, 20, 16, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 411531388, 'comment_body': ""Do we need this test? I think there are a few things that we could add tests for here but `dismiss` working feels like it's the framework's responsibility. Maybe I'm missing something here?"", 'comment_created': datetime.datetime(2020, 4, 20, 16, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 411941149, 'comment_body': 'Hi @seadowg! Whenever I run the tests for the newly created fragment, it gives me the error `java.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.`', 'comment_created': datetime.datetime(2020, 4, 21, 7, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 411950409, 'comment_body': ""Ah right. Yes this would fix it but it would also change the default theme for the whole app which could cause us some problems. \r\n\r\nWhat's happening is that a component in the `DialogFragment` relies on the `AppCompat` theme so we can make sure that the Activity being used in tests has that theme. You can call `setTheme(R.style.Theme_AppCompat)` on the Activity or use our `RobolectricHelpers.createThemedActivity` helper."", 'comment_created': datetime.datetime(2020, 4, 21, 7, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 412165539, 'comment_body': ""I tried using `shadowOf(getMainLooper()).idle()`, but it doen't work. I stil get the error `main looper has queued unexecuted runnables` , unless I use `fragmentManager.executePendingTransactions()`. "", 'comment_created': datetime.datetime(2020, 4, 21, 13, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 412170130, 'comment_body': 'Yes @seadowg, I was also concerned for the default theme of the app. so I removed light, but using `RobolectricHelpers.createThemedActivity` helper would be a better option.', 'comment_created': datetime.datetime(2020, 4, 21, 13, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 412186786, 'comment_body': 'Dismissing the dialog on dismissing the fragment is the framework responsibility. I can think of one case if I override the `onDismiss` method and do not call super.onDestroy, it retains the dialog even when I call `dismiss`. \r\nIt would be more interesting to add tests to check whether the dialog is retained during orientation change, when the fragment is recreated.', 'comment_created': datetime.datetime(2020, 4, 21, 13, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 412793579, 'comment_body': ""So you should be able to remove the `@LooperMode(PAUSED)` as well.\r\n\r\nYou'll see that you're getting that warning from Robolectric yes but the actual error is below that:\r\n\r\n```\r\nCaused by: java.lang.UnsupportedOperationException: Failed to resolve attribute at index 5: TypedValue{t=0x2/d=0x7f040251 a=-1}\r\n\tat android.content.res.TypedArray.getColorStateList(TypedArray.java:546)\r\n\tat android.widget.TextView.readTextAppearance(TextView.java:3542)\r\n\tat android.widget.TextView.__constructor__(TextView.java:959)\r\n\tat android.widget.TextView.<init>(TextView.java)\r\n\tat android.view.LayoutInflater.createView(LayoutInflater.java:647)\r\n\tat com.android.internal.policy.PhoneLayoutInflater.onCreateView(PhoneLayoutInflater.java:58)\r\n\tat android.view.LayoutInflater.onCreateView(LayoutInflater.java:720)\r\n\tat android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:788)\r\n\tat android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:730)\r\n\tat android.view.LayoutInflater.inflate(LayoutInflater.java:492)\r\n\tat android.view.LayoutInflater.inflate(LayoutInflater.java:423)\r\n\tat org.odk.collect.android.adapters.IconMenuListAdapter.createView(IconMenuListAdapter.java:69)\r\n\tat org.odk.collect.android.adapters.IconMenuListAdapter.getView(IconMenuListAdapter.java:62)\r\n```\r\n\r\nThis probably means that a layout is trying to grab an attribute (like `?colorSecondary` or `?attr/colorSecondary`) that isn't defined in the theme that's being used. It might be that something is using an attribute from our own theme or the `MaterialComponents` theme."", 'comment_created': datetime.datetime(2020, 4, 22, 8, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 412794457, 'comment_body': ""All this view initialization can probably go in `onCreateDialog` instead of here so you don't need the `title` and `listView` fields."", 'comment_created': datetime.datetime(2020, 4, 22, 8, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 412794883, 'comment_body': ""You shouldn't need this. Good to look at the docs and have a think about it but it's best to avoid."", 'comment_created': datetime.datetime(2020, 4, 22, 8, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 412795124, 'comment_body': 'What is this for?', 'comment_created': datetime.datetime(2020, 4, 22, 8, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 412808834, 'comment_body': 'That is good thinking! I think it\'s potentially overkill though. I think it\'s best to think about tests protecting from ""lazy"" programmers (as we\'re all pretty lazy really) - protect from things being deleted or changed but not added. The universe of things that someone could add are pretty big and so it\'s hard to test protectively against it. Does that make sense?', 'comment_created': datetime.datetime(2020, 4, 22, 9, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 412901151, 'comment_body': 'Thanks @seadowg for directing to the docs. I was thinking of using it and then dismissing the dialog in `onDestroy`, so as to confirm that the dialog is destroyed when the fragment is finally detached, and not on just orientation change. But I found that it is deprecated now, so I think it is better not to use it and rely more on ViewModel.', 'comment_created': datetime.datetime(2020, 4, 22, 11, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 412911651, 'comment_body': ""Yes @seadowg, I think it's better if I add the test to check whether the dialog is dismissed when the user clicks the positive button? And to check whether the view is populated correctly and all the options are working or not. I think that will verify the basic functionality of the dialog."", 'comment_created': datetime.datetime(2020, 4, 22, 11, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 412912908, 'comment_body': 'Thanks @seadowg! I removed and got better results. I need not use `fragmentManager.executePendingTransaction` anymore.', 'comment_created': datetime.datetime(2020, 4, 22, 11, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 417314090, 'comment_body': 'Is this needed?', 'comment_created': datetime.datetime(2020, 4, 29, 13, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 417314687, 'comment_body': 'I think this will always be true right?', 'comment_created': datetime.datetime(2020, 4, 29, 13, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 417316810, 'comment_body': ""I'm confused by your use of `getTitle` and `setTitle` here. Could you explain why you chose to create a public `getTitle` and `setTitle`?"", 'comment_created': datetime.datetime(2020, 4, 29, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 417320084, 'comment_body': ""I don't think this test does what you think it does. On a rotation the `Acitivity` will be recreated (which should cause the `DialogFragment` to be recreated). The reason to write a test around recreation would be to check that state of the fragment is persisted (the title for example). The `ProgressDialogFragmentTest` has examples of this kind of test."", 'comment_created': datetime.datetime(2020, 4, 29, 13, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 419122160, 'comment_body': 'Oh sorry I forgot that there. Previously I was thinking of some other approach to use `viewModel` in the tests.', 'comment_created': datetime.datetime(2020, 5, 3, 15, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 419122577, 'comment_body': ""Oh alright. I'll make changes\r\n"", 'comment_created': datetime.datetime(2020, 5, 3, 15, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 419122712, 'comment_body': 'I created the public methods so that I can use them in the `QuitFormDialogFragmentTest`.', 'comment_created': datetime.datetime(2020, 5, 3, 15, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 419284655, 'comment_body': 'Right. It\'s generally best for us to avoid creating methods just for tests. Our tests should act like ""real"" clients of whatever code they are testing and so shouldn\'t have access to methods or fields we wouldn\'t want them to have access to. Feeling like you need to make a method public for a test can be a nice hint that something is probably off about the design of the object you\'re testing or that you\'re testing the wrong thing!\r\n\r\nHere you shouldn\'t have to do anything but `show` the `DialogFragment` to have the title set right? And the test should be able to ascertain the title without asking the `DialogFragment` as it has control of the mock `FormSaveViewModel` so it can be set up to have a title you choose and then you can test that title is shown on the dialog.', 'comment_created': datetime.datetime(2020, 5, 4, 8, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 419286890, 'comment_body': 'Given that the only ""state"" in this fragment comes from the ViewModel does it make sense to have this test? There isn\'t any mutable state that needs to be carried from one instance of the fragment to the other as far as I can see.', 'comment_created': datetime.datetime(2020, 5, 4, 8, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 419287651, 'comment_body': 'Do you still feel we need this test? Happy to talk it over some more!', 'comment_created': datetime.datetime(2020, 5, 4, 8, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 419432380, 'comment_body': 'Yes, right @seadowg. Checking it just once would be fine.', 'comment_created': datetime.datetime(2020, 5, 4, 13, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 419441771, 'comment_body': 'Also I think the part that we are checking that whether the dialog fragment shows the correct title or not can be covered with the test of the ViewModel (whether it returns the correct form name)?', 'comment_created': datetime.datetime(2020, 5, 4, 13, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 419454959, 'comment_body': 'Yeah as above we just need that test I think!', 'comment_created': datetime.datetime(2020, 5, 4, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 419469788, 'comment_body': 'Then, should we even remove the test to check the title of the dialog once, as it can be covered in the tests for the ViewModel?', 'comment_created': datetime.datetime(2020, 5, 4, 14, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 419488389, 'comment_body': 'It is something related to the dialog interface. We have, here the positive button set to be the cancel button. So, to check whether the correct button is set as the cancel button and clicking it does as it says (to dismiss the dialog).', 'comment_created': datetime.datetime(2020, 5, 4, 14, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 419529043, 'comment_body': 'Ah of course sorry! My mistake. Good test 👍. Let\'s maybe make it the `NEGATIVE_BUTTON` instead as that\'s usually the ""Cancel"" button.', 'comment_created': datetime.datetime(2020, 5, 4, 15, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 419529957, 'comment_body': 'Yeah I think that make sense', 'comment_created': datetime.datetime(2020, 5, 4, 15, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 419550132, 'comment_body': 'Yes, that seems more accurate.', 'comment_created': datetime.datetime(2020, 5, 4, 16, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 420003927, 'comment_body': ""Ach I'm so sorry I misinterpreted your question! My bad for skimming. \r\n\r\nTry removing line 60 from `QuitFormDialogFragment` and then running the tests to see if you have coverage of the title being displayed in the dialog. I don't think you do now you've removed that test. The ViewModel tests check that the `ViewModel.getFormLabel()` does the right thing but here you're testing the dialog, not the ViewModel."", 'comment_created': datetime.datetime(2020, 5, 5, 10, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 420487097, 'comment_body': 'Yes sorry @seadowg! I was a little confused too.\r\n', 'comment_created': datetime.datetime(2020, 5, 6, 0, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 420634037, 'comment_body': 'The problem with this is that it\'s unclear what the test wants the title to be. For ""unit"" tests like this you want you test to be as in charge of the dependencies as possible. Given the ViewModel is a mock you can set the value that will be returned from `getFormName` like so:\r\n\r\n```\r\nwhen(formSaveViewModel.getFormName()).thenReturn(""blah"");\r\n```\r\n\r\nThis means you could write a test for both the null and non null case. Here I I\'d imagine you\'re only testin the null case as the mock will return null from `getFormName()`.', 'comment_created': datetime.datetime(2020, 5, 6, 8, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 420822488, 'comment_body': 'Oh alright yes. We should test both the cases\r\n', 'comment_created': datetime.datetime(2020, 5, 6, 14, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 421337322, 'comment_body': 'Yeah I like these tests divided up like this a lot! 👍', 'comment_created': datetime.datetime(2020, 5, 7, 8, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 421337904, 'comment_body': ""You don't need this logic in either test right? The test knows what value the form name will be."", 'comment_created': datetime.datetime(2020, 5, 7, 8, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 421371284, 'comment_body': 'Ah sorry! This piece of code is not required.', 'comment_created': datetime.datetime(2020, 5, 7, 9, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': '8d85fe2f5460a6e0423f62674af502ab8911ba3d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9940c2fa44942342298b6a433cf3a58826ff7dd', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3633063cfc2538ad9834febb67887de985cb0949', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9959612b63b14dc8d19e3efc09805193a4b22e7f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16b6665c6d980cb7b8a24f8dcd104908383ce4db', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c93391d33ebdf7560b31ab232f81c6956c322003', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46ee9346441b6212d858b1062c8c2225852f7c4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2688439e3ffee6c72ecaae2b82382d35cc70d067', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36949d8fadbac5c920bae5c7c5783e70152a2370', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e53757a4bdd18b5c175181b4a29d289f5fa6f0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26e40d4146e2bec8af39f33b8e437ca18b31d9ca', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878213889b56b0dbe4395bf2e70d8eb50fbd80fc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
405726720,Retains Select Layer Dialog on changing the Orientation,"Work towards #3612 

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
 I tested it.

#### Why is this the best possible solution? Were any other approaches considered?
I populated the reference layer in `onViewRestored`, to retain the layer after orientation change.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No regression risks

#### Do we need any specific form for testing your changes? If so, please attach one.
AllWidgetsForm or any form with Geotrace or Geoshape widget

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3786,https://api.github.com/repos/getodk/collect/pulls/3786,https://github.com/getodk/collect/pull/3786,closed,23,11,2,1,1,0,1,0,[{'name': 'behavior verified'}],2020-04-19 20:13:50+00:00,2020-06-02 21:52:50+00:00,3807540.0,"44 days, 1:39:00",[],"[{'commit_sha': '4444c3ba91f6fe101fc10372f33c143d91a6e5a5', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
406098063,Retain Input Setting Dialog on GeoPolyActivity on orientation change,"Work towards #3612 

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
I tested it.

#### Why is this the best possible solution? Were any other approaches considered?
I used a separate variable `IS_SETTINGS_DIALOG_ACTIVE` to check whether the dialog is active or not, and if the dialog was active last when the activity was destroyed on configuration change, then the dialog is displayed again in `onCreate`.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No regression risks

#### Do we need any specific form for testing your changes? If so, please attach one.
All Widgets form or any form with Geo widgets 

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3792,https://api.github.com/repos/getodk/collect/pulls/3792,https://github.com/getodk/collect/pull/3792,closed,348,94,3,10,3,1,1,0,[{'name': 'behavior verified'}],2020-04-20 14:26:43+00:00,2020-06-08 10:08:24+00:00,4218101.0,"48 days, 19:41:41","[{'comment_id': 423052596, 'comment_body': ""We shouldn't use static state like this. If one instance of `GeoPolyActivity` set this to `true` and then another was opened later it would behave as if the dialog was open. We could manage all this with extra logic but it'd be a headache. I think you should look at a solution using a `DialogFragment` like you did for the quit form dialog.\r\n\r\nI'll convert this PR to a draft so you can make changes in peace."", 'comment_created': datetime.datetime(2020, 5, 11, 13, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}]","[{'commit_sha': '177a53c3fec4e3b102f2604995daf51ca15c7260', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01dde803f37184853883c07777bdd6f2618e0325', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56a09f43747d7f39d2a48455acc9c734a16d6e08', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e46f41a54b5608a77d5c578b23c4f81703e6c741', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c35d2eef26e06ae237fb7ced73820d62e3df073e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2684720ab7f9ebfb479937496cc0a7675aa5dc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f5584b3de9a0d9d77517d7d0d64b85d4c088ced', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '773dd506a86e1c91b71c11c5eec2dbc7a07fccd7', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c355e4585fc5428f6faa6af37a3cd2fc85bec9d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7144bbba54cc4ffe3f9fed5a8b924fef5a0b950', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
417029579,Used Dialog Fragment to retain Change Admin Password Dialog on Orientation Change,"Work towards #3612 

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
This PR contains the fix for Change Admin Password Dialog. I tested it. 

#### Why is this the best possible solution? Were any other approaches considered?
I shifted the creating of Alert Dialog to Dialog Fragment and wrote tests for the same.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No regression risks.

#### Do we need any specific form for testing your changes? If so, please attach one.
No.

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No.

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3824,https://api.github.com/repos/getodk/collect/pulls/3824,https://github.com/getodk/collect/pull/3824,closed,227,65,4,13,4,8,1,0,[{'name': 'behavior verified'}],2020-05-12 23:36:14+00:00,2020-06-02 21:54:05+00:00,1808271.0,"20 days, 22:17:51","[{'comment_id': 424490888, 'comment_body': ""Hi @seadowg! I'm not sure if the above two tests are necessary."", 'comment_created': datetime.datetime(2020, 5, 13, 14, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 429840241, 'comment_body': ""Is there any reason this logic couldn't happen in the fragment? Then we can avoid having to deal with having a listener. We can also then test this functionality in `ChngeAdminPasswordDialogFragmentTest`."", 'comment_created': datetime.datetime(2020, 5, 25, 9, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 429841178, 'comment_body': ""The first one `dialogIsCancellable` checks that the back button would works so I think that's good. The second seems like it isn't needed as you  interact with all the elements in the tests below."", 'comment_created': datetime.datetime(2020, 5, 25, 9, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 429843579, 'comment_body': ""This isn't really the correct logic for what happens when an Activity rotates. Normally and Activity will go through a full onPause/onStop/onDestroy run and then go back through the creation steps. As part of this the Fragment will be restored (using the arguments it had before rotation). Instead of trying to deal with all this yourself you should be able to the ActivityScenario like in `AdminPasswordDialogFragmentTest#afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction`."", 'comment_created': datetime.datetime(2020, 5, 25, 9, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 429843710, 'comment_body': 'Same thing as above here!', 'comment_created': datetime.datetime(2020, 5, 25, 9, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 429889978, 'comment_body': 'Thanks @seadowg! So can I remove the second test case, for all my subsequent PRs on dialog disappearing issue. As for all of them, somewhere later in some other test, I have interacted with the elements, so I think, this part of code is redundant. ', 'comment_created': datetime.datetime(2020, 5, 25, 11, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 430369993, 'comment_body': 'Yes I think it would be nice to remove the unnecessary listener. I will revert this change.', 'comment_created': datetime.datetime(2020, 5, 26, 12, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433357617, 'comment_body': ""I don't think the `activityScenario` needs to be a field here as you're only using `ActivityScenario` in one test. I think just make it a local variable in there. "", 'comment_created': datetime.datetime(2020, 6, 1, 16, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}]","[{'commit_sha': '821eea34adcf02ede3d7acfba221c606ee705cba', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e7a94035b7f579e2696d96f8e8a5ac60ba2cc12', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3b5a61ee4da698afd3e2eccfb71e1a50d90672', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b35f1a07bd9e352924634c4bd6c5fe61c555b1c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991cd8c7f98e1958c9b2a34c942f70f01b79261b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936fb36f55734528b906171ab6d072227a148603', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8d59bbcfd9bcfa6f6d386b16bf0b8a9eba4ecda', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ad1d000284e7b221fe23c2476a057a0ad82b83', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7fd935622be527c60605c5605fc5724f88b347', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23fb813ce720351cf986f3880518e2ef79edf6a2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e51c759fa0d227d1710d00e256099de7ccbc0a5', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3652c9afcfbdfd93691f3dd893e881fdcb5894a9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb23bdbb011193913c40399ec6edba3a18fa7f0a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
419122086,Used Dialog Fragment to create Remove Group Dialog,"Work towards #3612

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
This PR contains the fix for Remove Response Dialog. I tested it.

#### Why is this the best possible solution? Were any other approaches considered?
I shifted the creating of Alert Dialog to Dialog Fragment and wrote tests for the same.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No regression risks.

#### Do we need any specific form for testing your changes? If so, please attach one.
nested-repeats.xml would work ([nested-repeats.xml.txt](https://github.com/getodk/collect/files/4640404/nested-repeats.xml.txt))

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3839,https://api.github.com/repos/getodk/collect/pulls/3839,https://github.com/getodk/collect/pull/3839,closed,219,78,6,16,23,7,1,0,[{'name': 'behavior verified'}],2020-05-17 14:34:26+00:00,2020-07-21 10:06:23+00:00,5599917.0,"64 days, 19:31:57","[{'comment_id': 435545297, 'comment_body': 'This should be `deleteRepeat` because it does not apply to general groups.', 'comment_created': datetime.datetime(2020, 6, 4, 20, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 435547297, 'comment_body': ""I'm not loving this protected field pattern for testing and I see it shows up in #3792 as well. I think that again, using a `ViewModel` here would help address that."", 'comment_created': datetime.datetime(2020, 6, 4, 21, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 435548887, 'comment_body': 'By the way, the `delete_repeat` string resource and other related ones are super confusing because they use the word ""Group"". I think we should change that but it\'s a separate thing.', 'comment_created': datetime.datetime(2020, 6, 4, 21, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 435551788, 'comment_body': 'I also feel now implementing a `ViewModel` would be better. I will do that.', 'comment_created': datetime.datetime(2020, 6, 4, 21, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 440526734, 'comment_body': ""I don't think this works because the `ViewModel` will have a reference to the `Activity`, causing a leak.\r\n\r\nI thought the callbacks you had before were fine. I was imagining the `ViewModel` only as a way for the dialog to get access to the `FormController`. Even better might be to give access only to the data that the dialog needs which I think is the last deleted repeat name and the last deleted repeat index."", 'comment_created': datetime.datetime(2020, 6, 16, 0, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 441035695, 'comment_body': ""Sorry @ln I didn't realize this would cause activity leak."", 'comment_created': datetime.datetime(2020, 6, 16, 17, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 444474040, 'comment_body': '@lognaturel I changed the tests a little bit so as to avoid using protected scope for callback. I like this approach better than directly approaching the interface in the fragment.', 'comment_created': datetime.datetime(2020, 6, 23, 20, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': 'bbdf2cd115157bd600783c19c898de76364ca068', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c9fe14170f2abc652722d34e458191feefdc863', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae31539920c278ee081ebb8938e05cf1be86b61a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f169b4c5ac040433dd4d5db81d781103cb90d0c6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512710373b84dcb6a1bbd077d2eb1f97bae85322', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa785bd7fd61ee97de7d8f213e583e8d2414550', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158bbc12c3b80e73aa1c54c8b1f34c71cce6c360', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af3abe4beec78cc24774ebc30628c7d41f30ca26', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c59ce33f1fcabebc50bb7ac44e8603187135b339', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f870c9c701cd2c90266d9c1d32ab98da01641e56', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248efd8024eb30b3c79066a22d0b2021ba7aa880', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02f974f8a4c0026bae0056fb30d9878b9cc8d88f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f57bccecf97a29c9f964bb1817f55fc50b8c30', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f52237810f4b9e5aba746c318ce5a4258487348', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06e4ac811dcc316cf5b633ea3ca0f07da82f9e4a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64853923c20e975e972a14a958c929766c430625', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
419631186,Add Progress Bar in the Blank Forms Fragment in 'Delete Saved Forms',"Closes #3965 

<!-- 
Thank you for contributing to ODK Collect!

Before sending this PR, please read
https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md
-->

#### What has been done to verify that this works as intended?
I tested it.

#### Why is this the best possible solution? Were any other approaches considered?
I added the progress dialog and published the progress, just as it is there in the Saved Forms fragment.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
No

#### Do we need any specific form for testing your changes? If so, please attach one.
No specific form

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/opendatakit/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3843,https://api.github.com/repos/getodk/collect/pulls/3843,https://github.com/getodk/collect/pull/3843,closed,75,18,6,18,17,13,0,0,[],2020-05-18 17:10:27+00:00,2020-07-15 21:22:18+00:00,5026311.0,"58 days, 4:11:51","[{'comment_id': 429847181, 'comment_body': ""We shouldn't be using `ProgressDialog` any longer as [it's deprecated](https://developer.android.com/reference/android/app/ProgressDialog). Annoyingly the warning doesn't show in Android Studio for some reason!\r\n\r\nIdeally there would be a different progress indicator that doesn't block the user. Here I don't want to get into that redesign though so for the moment we should just use a `ProgressDialogFragment`."", 'comment_created': datetime.datetime(2020, 5, 25, 9, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 429848036, 'comment_body': 'I don\'t think we need to add the progress update functionality. It is extra complexity that we could add later if we feel we really need it. For the moment the dialog could just have the message `""Deleting...""`.', 'comment_created': datetime.datetime(2020, 5, 25, 9, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 430399575, 'comment_body': 'Hi @seadowg! We also use `ProgressDialog` in Delete Saved Forms fragment. Should we remove `ProgressDialog` from there too? Also, I found that the UI would look better if `layout_centerVertical` is set to true in the `progress_dialog.xml` file. ', 'comment_created': datetime.datetime(2020, 5, 26, 13, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 433854848, 'comment_body': ""Like in the other PR this should use `DialogUtils.showIfNotShowing` and `DialogUtils.dismissDialog`. That way you also don't need to hold a reference to the dialog like you do here. In fact, it's important to realize you shouldn't ever hold a reference to a `Fragment` instead. This is because if the Activity is recreated (like during a rotation) the Fragment will be recreated as well and the instance you have a reference to will not be the instance that is actually displayed. This causes a memory leak (holding a reference to an object that could have been garbage collected) and also might lead to bugs. "", 'comment_created': datetime.datetime(2020, 6, 2, 12, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437224287, 'comment_body': 'You can just do `putBoolean` here which will be easier on the other side!', 'comment_created': datetime.datetime(2020, 6, 9, 8, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437224790, 'comment_body': ""Also could you add a test for this new functionality to `ProgressDialogFragment`? I think before adding/changing functionality like this to a reusable component you should try adding a test. This ensures you actually have coverage and also gives you an opportunity to think about the interface you're adding/changing."", 'comment_created': datetime.datetime(2020, 6, 9, 8, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437284452, 'comment_body': ""Yes that would be great! I'll add tests. Also, I wanted to ask, should we use `ProgressDialogFragment` in `DeleteSavedForms Fragment`, as well?"", 'comment_created': datetime.datetime(2020, 6, 9, 9, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 437492251, 'comment_body': '@SaumiaSinghal probably a good idea down the line but no need to do it as part of this PR', 'comment_created': datetime.datetime(2020, 6, 9, 15, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437494474, 'comment_body': 'I don\'t think this is right. Did you try commenting out your code to check this test passes and fails when you\'d expect? \r\n\r\nClosing the activity might not ""cancel"" the dialog but it definitely wouldn\'t be on screen anymore so this test doesn\'t really make sense to me. You should be able to check whether the dialog is cancellable or not by calling `isCancellable` on it.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 437495656, 'comment_body': 'I think this could just be:\r\n\r\n```\r\nif (getArguments() != null) {\r\n    dialog.setCancelable(getArguments().getBoolean(CANCELABLE), true));\r\n}\r\n```\r\nIs that right?', 'comment_created': datetime.datetime(2020, 6, 9, 15, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 447494515, 'comment_body': ""Did you have to set this on the dialog and the fragment? I'm wondering if we maybe only need it on one of them.\r\n\r\nI find this really confusing with `DialogFragment` 😕. I don't understand why the `Fragment` and the `Dialog` both have ther dialog interface (like `setCancellable`)..."", 'comment_created': datetime.datetime(2020, 6, 30, 8, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 447501577, 'comment_body': 'Thanks @seadowg for pointing it out. We need it only on the `Fragment`. The `Dialog` is shown as part of the `Fragment`, so we need to be concerned about the `fragment` instead of the `dialog`. I found it has been mentioned [here](https://developer.android.com/reference/android/app/DialogFragment.html#setCancelable(boolean)) in the docs as well.', 'comment_created': datetime.datetime(2020, 6, 30, 8, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 447505059, 'comment_body': 'Ah cool. Nice find in the docs. That makes sense!', 'comment_created': datetime.datetime(2020, 6, 30, 8, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}]","[{'commit_sha': '010ce99ce079cbef8484224db202d98c5b9ceea1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '502fa8bf8b7d6f7e9b0605ec1be8ff1f9c63198f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab190729da43024b7ba9b9ccb0b10935ccc8bd11', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c787eb8b305f39a06dcca30d531fef2f2c4ae31c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54671e0a5400a3fadf392bcbdd47c8545a8cbb0f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6e28fce63f29acb527eb7763c9eed0e7b5a726', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d48b88f9ebf124ac9a6fd409d2357fc0f90b8d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ca67603207327c5a86c4965ec87c8d5b97972bd', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ddf2e7a218f303728eee70319a30dce01276905', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfea78a9dc2a24bbec8c717fa2b97c3fbdc58cbd', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ee6a81ff5203795e8c76d1df5e978b9f8126a1c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07b80b5cb7d6aa421c2269c4d283c609de4c0320', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be641cb6e605f3b37b610c9eb1826d9bee98db72', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd806bf3e95afd6c5cbc24913abf8a65c085b2ba0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd311315acfbef948d9c06d04c2f1ebeee82a2ea4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '684644365373c645886d403286e6e69595a4398e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5ce0ae56c40e39657782d7799e603989e2a28ce', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49bd4f263d369d1425260499a5a652c986ca471e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
466372363,Remove Answer Text View in Url Widget,"This PR updates the UI of the URL widget. As discussed in ODK forum [here](https://forum.getodk.org/t/use-materialcardview-to-update-the-ui-of-url-widget/27500/6), the answer text view is removed and user simply sees the button to open the url in the widget. 

As discussed with @seadowg, this PR does not change the button text for the moment, so `Open Url` button is shown. As the user is not allowed to change the url, the widget is `readonly` all times, so I am removing any specific behavior concerning the `readonly` widget in this PR.

![WhatsApp Image 2020-08-12 at 03 13 53](https://user-images.githubusercontent.com/35730054/89952154-57fb5080-dc4a-11ea-85c9-377859c648c9.jpeg)

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I changed the value fo the string resource `open_url` to `Visit Website`, and that change is not migrated to all the other languages of Collect, so this change won't appear good in when the user views the form in a language other than English. 

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form having URL Widget like AllWidgetsForm.

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,4025,https://api.github.com/repos/getodk/collect/pulls/4025,https://github.com/getodk/collect/pull/4025,closed,36,56,9,4,9,5,1,0,[{'name': 'behavior verified'}],2020-08-11 21:48:01+00:00,2020-10-06 07:00:38+00:00,4785157.0,"55 days, 9:12:37","[{'comment_id': 476368234, 'comment_body': 'As discussed the URL widget should behave exactly the same in read only mode (as it is always ""read only""). That being the case you shouldn\'t need any tests for read only for the widget.', 'comment_created': datetime.datetime(2020, 8, 25, 11, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476368753, 'comment_body': 'As in other comments: lets remove any change in behaviour based on `isReadOnly`', 'comment_created': datetime.datetime(2020, 8, 25, 11, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476369211, 'comment_body': 'Lets not change this text at the moment.', 'comment_created': datetime.datetime(2020, 8, 25, 11, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 485714580, 'comment_body': ""This doesn't seem right as it's the same as the `AUDIO_QUESTION`. I think the `AUDIO_QUESTION` naming and description is just wrong here and probably should be `PROMPT` and really be used to just track any kind of question/widget."", 'comment_created': datetime.datetime(2020, 9, 9, 15, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 485715185, 'comment_body': 'I think the action here should just be `""Url""`. What we care about is that the user saw a url question. ', 'comment_created': datetime.datetime(2020, 9, 9, 15, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}]","[{'commit_sha': '17ff758f4bd5c235cee848a2a3be5e026825a652', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e74dd1c6ffb9af566edb7d2af4f35f5af6d6d4c6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a1fd1a754dd56902abad5fd3618b63014ebece4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1aa372fe835f1bab48872ccac1eb8d533405728', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
473174108,Rework Bearing Widget,"This PR includes the work on rewriting the framework of Bearing widget.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I don't think there are any regression risks as of now.

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form having Bearing widget like AllWidgetsForm.

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,4042,https://api.github.com/repos/getodk/collect/pulls/4042,https://github.com/getodk/collect/pull/4042,closed,302,164,10,5,4,19,1,0,[{'name': 'behavior verified'}],2020-08-25 12:36:50+00:00,2020-10-01 07:58:02+00:00,3180072.0,"36 days, 19:21:12","[{'comment_id': 477096973, 'comment_body': 'As I remember in other widgets you have refactored you set answer in `onCreateAnswerView()`, am I right? If so please be consequent.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477103012, 'comment_body': ""There is something wrong with the button text. You set it to default here but it's not set to `R.string.replace_bearing` when we record bearing (only if we create the widget from scratch and there is an answer)."", 'comment_created': datetime.datetime(2020, 8, 26, 7, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477106133, 'comment_body': ""I think those start/end margins should be used in the parent layout then you don't need to duplicate it for each child. For example it looks bad for the edittext:\r\n![image](https://user-images.githubusercontent.com/3276264/91276757-3ccc2d00-e782-11ea-8f50-c6dadd926136.png)\r\n"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477109759, 'comment_body': 'I would call the filed and the method areSensorsAvailable.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477110449, 'comment_body': 'I think this method is unnecessarily big can we just have:\r\n```java\r\n        return sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null \r\n                && sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) != null;\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 8, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477111454, 'comment_body': ""I don't like mixing things here I mean showing the toast i the middle of other stuff. It should be at the begging or at the end."", 'comment_created': datetime.datetime(2020, 8, 26, 8, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477111968, 'comment_body': 'Could you move it one line down? The reason is like below (mixing stuff).', 'comment_created': datetime.datetime(2020, 8, 26, 8, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477113473, 'comment_body': ""Do we really need this check? I think it's redundant."", 'comment_created': datetime.datetime(2020, 8, 26, 8, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477113531, 'comment_body': ""Do we really need this check? I think it's redundant."", 'comment_created': datetime.datetime(2020, 8, 26, 8, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477114241, 'comment_body': '`isEmpty()` would be better here instead of `equals("""")`', 'comment_created': datetime.datetime(2020, 8, 26, 8, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477120488, 'comment_body': 'Can we get rid of `textBackground` field and for example call here:\r\n```java\r\nbinding.answerText.setBackground(new EditText(getContext()).getBackground());\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 8, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477202726, 'comment_body': ""Oh right! I will change that. I might have set the answer in the constructor in some others too. I'll change them"", 'comment_created': datetime.datetime(2020, 8, 26, 10, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477204928, 'comment_body': 'I need to update the button label in `setBinaryData()`. I will add a unit test too.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477218715, 'comment_body': ""I tried settings the margins in parent view but that didn't fix the problem. The widget looks fine but as soon as the `EditText` starts accepting answers, it requires an extra horizontal margin, so, I added the margin dynamically, using \r\n```\r\nmarginLayoutParams.setMarginStart(UiUtils.getDimen(R.dimen.margin_standard));\r\nmarginLayoutParams.setMarginEnd(UiUtils.getDimen(R.dimen.margin_standard));\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 8, 26, 11, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477221494, 'comment_body': 'In case the button is disabled, the listener will not listen to any click events, so yes, it is redundant.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477477564, 'comment_body': 'Something went wrong here because you just added and empty line instead of moving the line I mentioned down.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477480113, 'comment_body': ""Now we use this only in one place so it doesn't make sense to keep the field we can just use the method which initializes it (`areSensorsAvailable()`)."", 'comment_created': datetime.datetime(2020, 8, 26, 17, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 477484388, 'comment_body': 'Oh sorry right\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 17, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477498301, 'comment_body': 'You did something wrong I think because this seems to work:\r\nhttps://github.com/getodk/collect/commit/99ee788add2fdc20c799bf9e6311f6835a7ff94f', 'comment_created': datetime.datetime(2020, 8, 26, 18, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}]","[{'commit_sha': '76349deee697ac68626f2f20e56ebfed4635bd93', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d60d12a48938dcb0bd8e688bf71a0fdf0aa60e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab107cd916f231513295f954ee7b680bda73e0b6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45d16279b152c0562be2ae4f27488a0d276be4a1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '674cff0cf33124cf8f64df54d750479147e66dd6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
470447095,Reworking Barcode widget,"This PR includes the work on rewriting the framework of Barcode widget.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I don't think there are any regression risks as of now. I am using an object of `CameraUtils` class to call the non static methods, so that I can verify the behavior of the widget in scenarios when the value returned by the methods of `CameraUtils` are different.

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form having barcode widget like AllWidgetsForm

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,4032,https://api.github.com/repos/getodk/collect/pulls/4032,https://github.com/getodk/collect/pull/4032,closed,439,196,20,10,2,17,1,0,[{'name': 'behavior verified'}],2020-08-19 20:46:48+00:00,2020-09-30 15:45:16+00:00,3610708.0,"41 days, 18:58:28","[{'comment_id': 473330871, 'comment_body': 'Would be better to use isEmpty() here.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 473333429, 'comment_body': 'You could improve `stripInvalidCharacters()`:\r\n1. You can have one return using ternary operator\r\n2. There is no need to use protected static here.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 473335384, 'comment_body': 'Would be good to move this code to `WidgetAppearanceUtils` and have `isFrontCamera()` method there for example which you could then use here.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 473337739, 'comment_body': 'I think just answer would be good name it is String so no need to duplicate it in its name.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 473339595, 'comment_body': 'Please remove `get_`', 'comment_created': datetime.datetime(2020, 8, 19, 21, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 473435015, 'comment_body': ""I didn't mean moving both those methods here. I expected just a small isFrontCameraAppearance() method that would return true/false based on appearance. Just something like isFlexAppearance or other methods below."", 'comment_created': datetime.datetime(2020, 8, 19, 23, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 473874229, 'comment_body': 'Oh alright. This makes more sense. Sorry for misinterpreting.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 474170674, 'comment_body': 'Please add tests for this method in `WidgetAppearanceUtilsTest` would be also good to cover other already existed methods if you want.', 'comment_created': datetime.datetime(2020, 8, 20, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 474174229, 'comment_body': ""Please remove this annotation, it's not something common in our codebase and i',m not fan of it."", 'comment_created': datetime.datetime(2020, 8, 20, 18, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 474208700, 'comment_body': 'Yes sure!', 'comment_created': datetime.datetime(2020, 8, 20, 19, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 474302192, 'comment_body': 'Please add more cases, you can have multiple in one test if they are related. Would be good to test lowercase appearances as well and different variation (mix of appearances).', 'comment_created': datetime.datetime(2020, 8, 20, 22, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 474326820, 'comment_body': 'I was thinking about the same. Let me know if more unit tests are needed.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 474673479, 'comment_body': 'I think this comment should be moved to the interface. Now we keep it in several widgets instead. Could you improve it and remove from all widgets that have it? ', 'comment_created': datetime.datetime(2020, 8, 21, 12, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 474715293, 'comment_body': 'Hi @grzesiek2010! Do you mean I should move the author tag to the `Widget` interface. It already has an author tag. Did you mean I should move this comment to `QuestionWidget`?', 'comment_created': datetime.datetime(2020, 8, 21, 13, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 474944457, 'comment_body': 'Sorry I added a comment in a wrong place I meant this comment https://github.com/getodk/collect/pull/4032/files#diff-8ca2a32aaf43e2c722374375f0c62ae4R92', 'comment_created': datetime.datetime(2020, 8, 21, 20, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 475490758, 'comment_body': 'Hi @grzesiek2010! Sorry for asking again. Do you mean this comment?\r\n`/*\r\nCopyright 2018 Theodoros Tyrovouzis\r\n\r\nLicensed under the Apache License, Version 2.0 (the ""License"");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an ""AS IS"" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n */\r\n`', 'comment_created': datetime.datetime(2020, 8, 24, 10, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 475506891, 'comment_body': 'No, I meant this:\r\n    /**\r\n     * Allows answer to be set externally in {@link FormEntryActivity}.\r\n     */\r\n(line 91)\r\nwhich is placed in various widgets but it could be placed only in `BinaryDataReceiver` instead.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}]","[{'commit_sha': '45b58a63966c4b5fe04c1b7930601780240be673', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc6262d52fb900d093ccf66f9cb69a7f05def85', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '544d3642f69e8439a460788725e0e360731af4dd', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38e030777a2f1ad51a6f43e2eb7ab9132d45c352', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54fe75e7811e73f6a5f9959ac9fb52a4743cde9b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ac2fa971da9067a47f8f138f0ee0b31011784a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df7ad365002cd512307183dbdc5f4e7707d6148', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '784446c1e9f1a60c920aa0bf1bddbe310e539cc1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1799a153cee41af2be2adde416e962479030cc8f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3688a42dca215b3f2d27419378df316d92c215ed', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
462572285,Reworking Audio widget,"Closes #4005 and Closes #4008 
This PR includes rewriting the test coverage and class of Audio Widget

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
This PR removes `MediaManager` enum class and the functionality is shifted to `FormSaveViewModel`. Hence, it changes the structure of `FileWidgets` and scenarios involving rotation of activities and killing of activities in the middle of saving, replacing or deleting answers in file widgets would be good to test.

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form having Audio Widget like AllWidgetsForm

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,4006,https://api.github.com/repos/getodk/collect/pulls/4006,https://github.com/getodk/collect/pull/4006,closed,777,344,37,29,8,48,1,0,[{'name': 'behavior verified'}],2020-08-04 07:05:22+00:00,2020-08-28 22:01:02+00:00,2127340.0,"24 days, 14:55:40","[{'comment_id': 465787645, 'comment_body': 'I think better to just have the values inline (`destinationPath`) rather than defined anywhere. Easier to see in the test that the value is just a string.', 'comment_created': datetime.datetime(2020, 8, 5, 14, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 465793437, 'comment_body': 'Not sure the naming is right here. It\'s not really a ""listener"". Maybe the interface is `QuestionMediaManager` and the implementation is something else?', 'comment_created': datetime.datetime(2020, 8, 5, 15, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 465796413, 'comment_body': 'Feels like the button text should just live in a layout?', 'comment_created': datetime.datetime(2020, 8, 5, 15, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 465798671, 'comment_body': 'We want a test for this change. ', 'comment_created': datetime.datetime(2020, 8, 5, 15, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 465841842, 'comment_body': 'I use \r\n`\r\n    <include\r\n        android:id=""@+id/capture_button""\r\n        layout=""@layout/widget_button""/>\r\n\r\n    <include\r\n        android:id=""@+id/choose_button""\r\n        layout=""@layout/widget_button""/>`\r\n\r\nin audio_widget.xml file. So I have added the button text here.', 'comment_created': datetime.datetime(2020, 8, 5, 16, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465842807, 'comment_body': 'Yes right the implementation mostly concerns with the deletion or replacing the file at the current index. But I think I might need to extend this implementation for working on other widgets\r\n', 'comment_created': datetime.datetime(2020, 8, 5, 16, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465844015, 'comment_body': ""I think I'd be happier duplicating the layout here than having hardcoded text set programmatically. My thinking is that it's good to be able to see the layout as it will appear (with the text) in the design preview for it."", 'comment_created': datetime.datetime(2020, 8, 5, 16, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 465845806, 'comment_body': 'For the other file widgets, I was using the same `widget_button.xml` layout. So, I should have a separate layout for all of them too?', 'comment_created': datetime.datetime(2020, 8, 5, 16, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465847339, 'comment_body': ""I think instead of sharing an `include` maybe we could create a custom button class with the shared values. Or, create a style that can be shared. These would let us avoid duplication but avoid having to set the text programmatically (which I'd like to avoid as much as possible)."", 'comment_created': datetime.datetime(2020, 8, 5, 16, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 465960051, 'comment_body': 'I verified `playMultipleClips_updatesProgress_forAllClips()` and `playInOrder_playsClipsOneAfterTheOther_andUpdatesProgress` fails on master. ', 'comment_created': datetime.datetime(2020, 8, 5, 19, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 466426526, 'comment_body': ""I like what's happening here but I think the variable/method should be named something more related to the scheduler than the test here. Maybe `isRepeatRunning`?"", 'comment_created': datetime.datetime(2020, 8, 6, 13, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 466428251, 'comment_body': 'The naming scheme here is pretty confusing as by convention we use `Widget` at the beginning but that\'s referring to the general definition of the word rather than a ""question widget"". Maybe the name here could be `Widget.Collect.Button.WidgetAnswer`?', 'comment_created': datetime.datetime(2020, 8, 6, 13, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 466439088, 'comment_body': 'Oh I thought the same initially.', 'comment_created': datetime.datetime(2020, 8, 6, 14, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 467854165, 'comment_body': 'I don\'t think this is quite right after a second look. As much as we can we want to avoid static singletons. If there is some state that we want to keep shared at an application level (i.e. between multiple activities or services) then we should use Dagger to setup and inject a singleton (using `@Singleton`).  \r\n\r\nIn this case I don\'t believe the state needs to persist outside of form entry so it really only needs to last as long as the Activity.  This means we could confuse ourselves by ending up with state hanging around between form entry ""sessions"". A good way to share state like this would be to use a view model where the `ViewModelProvider` uses the activity as its owner. Does that make sense as a way forward?', 'comment_created': datetime.datetime(2020, 8, 10, 11, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 467855954, 'comment_body': ""If so, it might be good to discuss the plans/approach here so we can come up with something that makes sense as it's a little awkward I think!"", 'comment_created': datetime.datetime(2020, 8, 10, 12, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 467866709, 'comment_body': '@seadowg If I use the `ViewModel` then I would be creating it using the widget context, and it will be there for all the widgets on the screen?\r\nI feel like avoiding using `QuestionMediaManager` too and using the previous implementation. That would mean there would be additional unit tests for the widgets. Will that be fine?\r\n', 'comment_created': datetime.datetime(2020, 8, 10, 12, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 468018217, 'comment_body': ""I think if that's simpler to do right now that's a good plan. Maybe we can move the logic to a viewmodel in the future."", 'comment_created': datetime.datetime(2020, 8, 10, 16, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 469914537, 'comment_body': ""Maybe this hasn't come through in previous comments and conversations but I'm very against the `MediaManager` being a singleton. Just to make it very clear I think the `MediaManager` should be a `class` (not an `enum`) and that this line should be:\r\n\r\n```java\r\nreturn (T) new FormSaveViewModel(System::currentTimeMillis, new DiskFormSaver(), analytics, new MediaManager());\r\n```\r\n\r\nAs we talked about before we could get in trouble with the `enum` singleton implementation as its state will be carried between different instances of the `FormEntryActivity`. Also in tests the singleton **would not** be recreated for each test (as the static state is retained throughout the process) so any state in the `MediaManager` set up in one test might inadvertently affect another.\r\n"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 469915839, 'comment_body': ""You shouldn't need to do this as each test will get a new instance of `TestWidgetActivity`."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 469924357, 'comment_body': 'I think we\'re getting close with the structure but I don\'t like that the `FormEntryActivity` implements the `QuestionMediaManager`. I think instead:\r\n\r\n* the `AudioWidget` should take a `QuestionMediaManager` in as a dependency at it\'s constructor rather than casting the `context` to one.\r\n* the `WidgetFactory` should also take a `QuestionMediaManager` in as one of the args to `createWidgetFromPrompt` so it can pass it to any widget that needs it. \r\n* `FormSaveViewModel#getMediaManager` should return a `QuestionMediaManager` not a `MediaManager`\r\n* `FormSaveViewModel#getMediaManager` should be passed as the `QuestionMediaManager` argument to `WidgetFactory#createWidgetFromPrompt`\r\n* `QuitFormDialogFragment`  should call `viewModel.getMediaManager().revertChanges` rather than relying on the static singleton instance\r\n\r\nI\'m not sure if I like that currently the `QuestionMediaManager` is simply owned by the `FromSaveViewModel` and then exposes it. I\'m thinking that potentially the `FormSaveViewModel` could implement the `QuestionMediaManager` interface and then there would be no need for the `MediaManager` class. In that world the ""revert"" call (in `QuiteFormDialogFragment` could just be part of the logic `FormSaveViewModel#removeTempInstance`.', 'comment_created': datetime.datetime(2020, 8, 13, 12, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 469932158, 'comment_body': ""Oh right! I didn't think about it. It will cause problems when writing tests for other file widgets."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 469980596, 'comment_body': 'Nice idea @seadowg, and Thanks for explaining so well. I implemented all the functionality of `MediaManager` in `FormSaveViewModel`, as you said if we have the `FormSaveViewModel` implements `QuestionMediaManager`, then `MediaManager` class is no longer required. ', 'comment_created': datetime.datetime(2020, 8, 13, 14, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 470557438, 'comment_body': 'Do we need to do this in `onCleared()` as well? Have you played around with the behaviour when ""Don\'t save activities"" is enabled? It might be good to give that a go and see if we need to handle the case when we leave the app, Android kills the process, and then we return to the app. Would files get left undeleted but on in the form in this case? Would things break?\r\n\r\nLet me know if you have questions about trying that out!', 'comment_created': datetime.datetime(2020, 8, 14, 11, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 470557600, 'comment_body': ""Hmmm. Little worried about the viewmodel being passed into an async task here... It's another awkward change but I think really what should happen here is that a list of files to save should get passed into the save task. Does that make sense? In that world we wouldn't need `saveChanges` (as it would be handled in `DiskFormSaver`."", 'comment_created': datetime.datetime(2020, 8, 14, 11, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 470607375, 'comment_body': 'This is an interesting case. I will try that out with all the media widgets.', 'comment_created': datetime.datetime(2020, 8, 14, 12, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 470620658, 'comment_body': ""I tried clearing the `originalFiles` and `recentFiles` HashMap in `onCleared()`, when `Don't keep activities` is turned on. I didn't find any anomaly in saving answers to the widgets, as I think, the answer is already saved with the widget, so clearing the files won't cause any break. Am I missing some test case here? "", 'comment_created': datetime.datetime(2020, 8, 14, 13, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 472137448, 'comment_body': 'Here\'s the problem I found:\r\n\r\n1. Enabled ""Don\'t keep activities""\r\n1. Open the ""All widgets form""\r\n1. Go to the file widget\r\n1. Select a file\r\n1. Select a different file\r\n1. Go to the hierarchy view with the arrow button\r\n1. Press ""Go To End""\r\n1. Save and exit the form\r\n\r\nIf you now go to the ""Device File Explorer"" and check the instance dir (`sdcard/odk/instances` and then the newest dir) you\'ll see both the files you\'ve selected are still in the directory. I\'m guessing this is because when the activity is killed the view model state is wiped with the activity and the `originalFiles` list will be empty when we return to the `FormEntryActivity` from the hierarchy screen. Before (on `master`) this worked because the `MediaManager` was a process level singleton and so state would be retained. \r\n\r\nIt feels to me like it would be a lot nicer if when the form was saved or (or ignore changes is hit) it just deleted any files not being used in the form but that could require a lot of rework. I\'m thinking we should use the new [Saved State module](https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate) to persist `originalFiles` between activity instances (as opposed to going back to a process singleton) and then file an issue around carrying out the rework.\r\n\r\nI\'d like to pull in @lognaturel and @grzesiek2010 for sanity checks here though!', 'comment_created': datetime.datetime(2020, 8, 18, 12, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 473489108, 'comment_body': ""This case does seem possible if someone needs to get clarification on what file to attach, for example. Certainly it'd be best not to have a known regression in behavior.\r\n\r\nWe haven't used the saved state module yet. It might be simpler to use `onSavedInstanceState`. But yes, saving `originalFiles` between activity instances for now seems good."", 'comment_created': datetime.datetime(2020, 8, 20, 0, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 476373783, 'comment_body': 'This could still be set in the constructor right? Could the constructor not just call `super` then assign the field?', 'comment_created': datetime.datetime(2020, 8, 25, 11, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476375797, 'comment_body': ""Do we need to do this if we're also handling it in `markOriginalFileOrDelete` (same for the `RECENT_FILES`)?"", 'comment_created': datetime.datetime(2020, 8, 25, 11, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476416710, 'comment_body': 'It looks like all these new tests are mainly there to drive out the use of `SavedStateHandle`. I think a better way to test it would be more functionally by checking that if I call the methods that set state then use that saved state to create another view model then I get the behaviour I expect (probably that save or ignore do the right thing). This checks that the values are loaded from save state as well as written to it and also means we probably just need one test.', 'comment_created': datetime.datetime(2020, 8, 25, 12, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476440380, 'comment_body': 'I forgot to change this. I changed the structure when I was trying different things.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 476442515, 'comment_body': 'Hi @seadowg! Do you mean if I need the `onCleared` method or not?', 'comment_created': datetime.datetime(2020, 8, 25, 13, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 476561401, 'comment_body': 'I think this should check that the files are deleted etc (so check the correct calls are made to `mediaUtils`) rather than checking the `savedStateHandle`).', 'comment_created': datetime.datetime(2020, 8, 25, 16, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476562110, 'comment_body': 'Actually so maybe we only need `markOriginalFileOrDelete_whenQuestionIndexHasAnswer_onRecreatingViewModel_deletesFile`? Unless there are reasons to check `savedStateHandle` directly.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476564032, 'comment_body': ""I don't think we need to clear these variables out here. They are part of the ViewModel which will be removed from memory."", 'comment_created': datetime.datetime(2020, 8, 25, 16, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 476564257, 'comment_body': ""I don't **think** we need anything in here."", 'comment_created': datetime.datetime(2020, 8, 25, 16, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 477412304, 'comment_body': ""I'm not sure you need this test and `whenFormSaverFinishes_mediaManagerIsCleared`. Could you explain it or do you think we should just delete this one?"", 'comment_created': datetime.datetime(2020, 8, 26, 15, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 477413973, 'comment_body': 'Instead of verifying the files here I think this test should run `saveForm` again and check that `deleteImageFileFromMediaProvider` is only called the first time. Does that make sense? Again, this is to test the intended behaviour rather than an implementation detail of that behaviour.', 'comment_created': datetime.datetime(2020, 8, 26, 16, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 477414373, 'comment_body': ""It looks like you don't need these 4 lines for anything?"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 477470801, 'comment_body': ""I think we can delete `whenFormSaverFinishes_mediaManagerIsCleared`. We do not have any other test to check whether mediaManager is released when form save finishes. I'm not sure is it is really important to check whether all files get deleted when form save task is finished.  "", 'comment_created': datetime.datetime(2020, 8, 26, 17, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477474126, 'comment_body': 'Yup I agree. I think my comment below lays out one test that would capture what `whenFormSaverFinishes_mediaManagerIsCleared` is trying to test.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 477482508, 'comment_body': 'To verify calls to `deleteImageFileFromMediaProvider()`, I should use actual `new DisFormSaver()` instead of `FormSaver`, right?', 'comment_created': datetime.datetime(2020, 8, 26, 17, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477513667, 'comment_body': ""Oh I just meant like you did in the other test and call `saveForm` on the view model. Does that make sense. The test is to verify that if we call save once and then call save again then we don't try and delete the files from the first save. That's my understanding anyway. Does that make sense?"", 'comment_created': datetime.datetime(2020, 8, 26, 18, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 477514828, 'comment_body': 'So pseudo code would be:\r\n\r\n* set up files to be deleted/saved\r\n* call save on view model\r\n* check files are saved/deleted correctly (using mock of `MediaUtils`)\r\n* call save again\r\n* check no files are saved/deleted (you can pass `once()` to `verify` to check it method has only been called once)', 'comment_created': datetime.datetime(2020, 8, 26, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 477519828, 'comment_body': 'When `saveToDisk()` task is complete, I just call `clearMediaFiles()` . So when I try to verify call to `mediaUtils.deleteImageFileFromMediaProvider()`, the test fails.', 'comment_created': datetime.datetime(2020, 8, 26, 18, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 478247773, 'comment_body': 'Ah sorry because the `formSaver` is mocked! My bad. The way to verify things are set up correctly then is to assert on the files passed to the `fromSaver` (as part of `verify`) instead of the call the `mediaUtils`. ', 'comment_created': datetime.datetime(2020, 8, 27, 8, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 478326540, 'comment_body': 'Hi! the unit test `saveForm_runsWith_correctFiles()` is failing. Sorry I meant to name it `saveForm_savesCorrectFiles()`. I confirmed the failure is bacause of calling `clearMediaFiles()` in OnComplete, but that should not effect the FakeFormSaver, right?', 'comment_created': datetime.datetime(2020, 8, 27, 10, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': 'd8705c9c05a922eb8b2fbb0c4e36febeaee9e35b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41ea8a171ca60cf08b410763264e609068df75bd', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5db506088f66018eea4d6782eae15841dddb28e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad75cb39b6e4cef96c8e767bb5eb650871111f4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0896029b905cafdd43ba6e5009793bbeb0fa3f02', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c35a3713c79ee58226ed0635bbcb5d554a1d5d7e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fe63b1b81c99e61a4aa87404c8de0519de352e0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bdd4ae8dc2b7e4451306d29050e9ce5ac593f67', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ce6ea1d8404ab8f4ea86d5b9adb6b4809d1933', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e43ec5b5ae376db5087dfe061c3f7d51e45dca', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60b09af11fa47d8e4257436fed84af8a11632a8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682fdb2ca0dc99732c99f2e558370f8abe43d158', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b569c455f95ab015b4211056a11cd373e8a58cb6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7104f0781ecb984bb75b64705a80bf55f13df83', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8bbd94f8defe4cfd7807a95751254aeb88498b9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12cd8f35b3b56f889ff5a9674d519e6a5f27b847', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d5a3f611beb65263a373a0e628262e59fe5ac6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356f6e15a5e842321e4b0cf3cfbdab0cd93ba1df', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4538677195fb3deb685d07793de2992249055562', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ee45dd2bab877779659b2597c3cec6467506cb', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b6fac8d863b9f1120f4c809cd582ac5e4dfe8e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9650495f75e4643076ab868012009114bbd1495e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0f4ef962bf2e044db7eb2be04a752e281fcc7e2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35225c3250a70e5771ee61e1bbb71df30dc06731', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677af1bbebfc8e3f554555969d1164efaef19ebc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '205686892a07dd9ff9eee2a1fb0737bbabbafc2f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88e97298c0cd228f145490c5763455721eba737d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4970b42ce39921cf72a7819547da4917ae50d1e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bd32012affbea012d927138a1d08affc83b5858', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
453605559,Rework Date and Time Widgets,"This PR includes rewriting the test coverage and class of Date and Time Widgets

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I used `DialogFragment` to create `FixedDatePickerDialog` and `CusotmTimePickerDialog` to retain the dialogs across orientation changes.

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form having Date and Time Widgets like AllWidgetsForm

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3975,https://api.github.com/repos/getodk/collect/pulls/3975,https://github.com/getodk/collect/pull/3975,closed,2678,1396,50,61,26,112,1,0,[{'name': 'behavior verified'}],2020-07-20 16:15:14+00:00,2020-11-12 10:17:06+00:00,9914512.0,"114 days, 18:01:52","[{'comment_id': 459458845, 'comment_body': 'You have this variable just to use it in return, you can get rid of it and return just `binding.getRoot()`', 'comment_created': datetime.datetime(2020, 7, 23, 13, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459460881, 'comment_body': ""Do you really need this here? I don't think so because here you just want to add the default text no_date_selected which btw I don't like because it's not consistent with other widgets. @lognaturel can we maybe get rid of it?"", 'comment_created': datetime.datetime(2020, 7, 23, 13, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459462990, 'comment_body': ""Do we really need this field? Can't we just relay on the label, (or even on date which is nullable)? Checking if it contains the default message or is empty if we get rid of it (look at my other comment regarding the default message)"", 'comment_created': datetime.datetime(2020, 7, 23, 13, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459464267, 'comment_body': 'I would give it a more meaningful name like selectedDate?', 'comment_created': datetime.datetime(2020, 7, 23, 13, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459466468, 'comment_body': ""As in DateWidget you don't need this variable just return binding.getRoot() at the bottom"", 'comment_created': datetime.datetime(2020, 7, 23, 13, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459467187, 'comment_body': ""As in DateWidget I think we don't need this filed and we can relay on the label."", 'comment_created': datetime.datetime(2020, 7, 23, 13, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459579065, 'comment_body': 'What if we have at least two Time widgets on one screen then even if you change the second one , the first one will be edited because as opposed to setBinaryData which checks if a widget is waiting for data this just takes the first one? Am I missing something?', 'comment_created': datetime.datetime(2020, 7, 23, 16, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459581180, 'comment_body': 'Please create a view model for this dialog instead of using such a trick to prevent data from clearing.\r\nBTW it would be good to have a vie model for CustomDatePickerDialog too.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459584464, 'comment_body': 'If you use the same values for start/end or top/bottom you can use layout_marginVertical/layout_marginHorizontal and do that in one line.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459710431, 'comment_body': ""Also the fact that here you use `onTimeSet` and above `setBinaryData` is not consistent i think it would be good to use `setBinaryData` in all cases. I know that name doesn't match very well since originally it was created for media widgets so I would rename it to just `setAnswer` maybe."", 'comment_created': datetime.datetime(2020, 7, 23, 20, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459714284, 'comment_body': 'Why do we need this here?', 'comment_created': datetime.datetime(2020, 7, 23, 20, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459716355, 'comment_body': 'Can\'t we simplify this and just include layout/widget_answer twice?\r\n```\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:orientation=""vertical"" android:layout_width=""match_parent""\r\n    android:layout_height=""wrap_content"">\r\n\r\n    <include\r\n        layout=""@layout/widget_answer""\r\n        android:id=""@+id/date_widget""/>\r\n\r\n    <include\r\n        layout=""@layout/widget_answer""\r\n        android:id=""@+id/time_widget""/>\r\n\r\n</LinearLayout>\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 20, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459721713, 'comment_body': ""It's weird that we pass `boolean nullAnswe`r here I think we should check for it before we use this method."", 'comment_created': datetime.datetime(2020, 7, 23, 20, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459722470, 'comment_body': 'it should be a part of widget class, passing `TextView dateAnswerText` just to setText on it is strange.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459722632, 'comment_body': 'As above it should be a part of widget class.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459723590, 'comment_body': '`FormEntryPrompt prompt` is used just to get its index so please pass the index only.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459725347, 'comment_body': 'i think we can get rid of this `DATE_PICKER_DIALOG` static value and use `CustomDatePickerDialog.class.getName()` in all cases.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459730504, 'comment_body': ""And also i'm wondering if we can simplify it somehow like:\r\n```\r\n    public static void showDatePickerDialog(FormEntryActivity activity, FormEntryPrompt prompt, DatePickerDetails datePickerDetails,\r\n                                            LocalDateTime date) {\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(DATE_PICKER_THEME, getTheme(themeUtils, datePickerDetails));\r\n        bundle.putSerializable(CURRENT_DATE, date);\r\n        bundle.putSerializable(DATE_PICKER_DETAILS, datePickerDetails);\r\n\r\n        DialogUtils.showIfNotShowing(getClass(datePickerDetails.getDatePickerType()), bundle, activity.getSupportFragmentManager());\r\n    }\r\n    \r\n    private static Class getClass(DatePickerDetails.DatePickerType datePickerType) {\r\n        switch (datePickerType) {\r\n            case ETHIOPIAN:\r\n                return CustomDatePickerDialog.class;\r\n            case COPTIC:\r\n                return CopticDatePickerDialog.class;\r\n            case ISLAMIC:\r\n                return IslamicDatePickerDialog.class;\r\n            case BIKRAM_SAMBAT:\r\n                return BikramSambatDatePickerDialog.class;\r\n            case MYANMAR:\r\n                return MyanmarDatePickerDialog.class;\r\n            case PERSIAN:\r\n                return PersianDatePickerDialog.class;\r\n            default:\r\n                return FixedDatePickerDialog.class;\r\n        }\r\n    }\r\n```\r\n\r\nyou would need to add some fixes in handling those values we pass to dialogs but I think it's possible?"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459735184, 'comment_body': ""I totally agree with you that using `setBinaryData()` at all places will be consistent. I didn't know that we can have two Time widgets on one screen for ODK X Forms. I usually use ODK Build to build testing forms. I didn't see any feature like that to include two Time widgets on one screen there. "", 'comment_created': datetime.datetime(2020, 7, 23, 21, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 459736562, 'comment_body': ""Theoretically it is possible that's why we use `waitForData`()/`cancelWaitingForData` to mark widgets that should receive answers."", 'comment_created': datetime.datetime(2020, 7, 23, 21, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459808762, 'comment_body': ""Ohh that's great! I'll work on it."", 'comment_created': datetime.datetime(2020, 7, 24, 1, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 459933838, 'comment_body': ""You won't need negation if you turn the order:\r\n```\r\n        return binding.widgetAnswerText.getText().equals(getContext().getString(R.string.no_date_selected))\r\n                ? null\r\n                : new DateData(selectedDate.toDate());\r\n```"", 'comment_created': datetime.datetime(2020, 7, 24, 9, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459934343, 'comment_body': ""You won't need negation if you turn the order:\r\n```\r\n        return binding.widgetAnswerText.getText().equals(getContext().getString(R.string.no_time_selected))\r\n                ? null\r\n                : DateTimeWidgetUtils.getTimeData(hourOfDay, minuteOfHour);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 24, 9, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459935813, 'comment_body': ""I think it's not consistent than in this widget we keep separate values hour, minute and in DateWidget we keep LocalDateTime wouldn't it be better to have TimeData field here instead of hour/minute?"", 'comment_created': datetime.datetime(2020, 7, 24, 9, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459938596, 'comment_body': 'As I said in one of my previous comments it would be good to rename this method because now it is used in many widgets not just binary ones. `setData` maybe?', 'comment_created': datetime.datetime(2020, 7, 24, 9, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459942777, 'comment_body': 'Please create methods that return true/false based on labels and use instead of these fields.', 'comment_created': datetime.datetime(2020, 7, 24, 9, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459944981, 'comment_body': ""Those fields are now hared between CustomDatePickerDialog and FixedDatePickerDialog so shouldn't placed in CustomDatePickerDialog. This class would be probably a better place."", 'comment_created': datetime.datetime(2020, 7, 24, 9, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459946398, 'comment_body': ""Could be one line, it's short enough."", 'comment_created': datetime.datetime(2020, 7, 24, 9, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459947596, 'comment_body': 'Make sure this method name is consistent with `showDatePickerDialog` it should also start with `show` not create.', 'comment_created': datetime.datetime(2020, 7, 24, 9, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459948527, 'comment_body': ""please rename it to getDatePickerTheme or something like that because now it's confusing and other contributors migt think it should be used for building TimePickers as well."", 'comment_created': datetime.datetime(2020, 7, 24, 9, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 459953769, 'comment_body': 'Oh okay right Sorry I forgot. ', 'comment_created': datetime.datetime(2020, 7, 24, 9, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 460024339, 'comment_body': 'No need to cast to Date.', 'comment_created': datetime.datetime(2020, 7, 24, 12, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 460024822, 'comment_body': 'To be consistent with DateWidget please use selectedDate name here.', 'comment_created': datetime.datetime(2020, 7, 24, 12, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 460025004, 'comment_body': 'To be consistent with TimeWidget please use selectedTime name here.', 'comment_created': datetime.datetime(2020, 7, 24, 12, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 460029425, 'comment_body': 'This combination is a bit confusing `clearAnswerWithoutValueChangeListener()` + `widgetValueChanged()` if you want to keep that first method I think it would be better to rename it to something like `resetAnswerFields()` or `clearAnswerFields()`.', 'comment_created': datetime.datetime(2020, 7, 24, 12, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 460030641, 'comment_body': 'Please make sure that the same format is used like above (datePickerTheme not DATE_PICKER_THEME) btw it would be good to have a lint/checkstyle for that.', 'comment_created': datetime.datetime(2020, 7, 24, 12, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 460050820, 'comment_body': ""This two methods still don't work like expected please take a look at onDateChanged/onRankingChanged\r\nand also you probably don't need this method at all because there is existing onDateChanged can you use it?"", 'comment_created': datetime.datetime(2020, 7, 24, 13, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 460226498, 'comment_body': '@grzesiek2010 I checked the code of `DatePickerDialog`. \r\n\r\n`@Override \r\n    public void onClick(@NonNull DialogInterface dialog, int which) {\r\n        switch (which) {\r\n            case BUTTON_POSITIVE:\r\n                if (mDateSetListener != null) {\r\n                    mDatePicker.clearFocus();\r\n                    mDateSetListener.onDateSet(mDatePicker, mDatePicker.getYear(),\r\n                            mDatePicker.getMonth(), mDatePicker.getDayOfMonth());\r\n                }\r\n                break;\r\n            case BUTTON_NEGATIVE:\r\n                cancel();\r\n                break;\r\n        }\r\n    }`\r\n\r\n`onDateSet` is called on clicking the positive button. Do I need to override the `onClick()` method?', 'comment_created': datetime.datetime(2020, 7, 24, 18, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 462081039, 'comment_body': ""I think I don't understand...\r\nIn FixedDatePickerDialog you have:\r\n```\r\nprivate DatePickerDialog.OnDateSetListener listener;\r\n```\r\nbut in CustomDatePickerDialog you have \r\n```\r\nprivate CustomDatePickerDialogListener listener;\r\n```\r\nend then you end up with two different methods in FormEntryActivity:\r\nonDateChanged and onDateSet I think you can share use just one listener probably:\r\n```\r\nprivate DatePickerDialog.OnDateSetListener listener;\r\n```\r\nbecause you won't be able to use `CustomDatePickerDialogListener` in `FixedDatePickerDialog`\r\nis that clear?\r\nThis was just the first problem, another one is that your methods should work like onDateChanged/onRankingChanged\r\nI mean they should use setData() otherwise you just pass an answer to the first question what won't work in case of having multiple questions on the same screen.\r\nThe difference between your approach and the one we need to have is that as I said you add an answer to the first question but you should do the same we do in `CustomDatePickerDialog` where we set `formController.setIndexWaitingForData()` and then using if you use setData the method is able to find the widget that is waiting for answer."", 'comment_created': datetime.datetime(2020, 7, 29, 7, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462084951, 'comment_body': 'Instead of setting `android:layout_marginHorizontal=""@dimen/margin_standard""` here and below it would be better to set hroizontalPadding just once in the parent LinearLayout.\r\nI also think that the parent LinearLayout should have some verticalPadding margin_small or margin_extra_small because otherwise those widgets might be too close to each other if you use field-list.\r\nHave you tested such a scenario? If so please attach a screenshot.', 'comment_created': datetime.datetime(2020, 7, 29, 7, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462592713, 'comment_body': 'Oh now I get it. Sorry for misunderstanding\r\n', 'comment_created': datetime.datetime(2020, 7, 29, 21, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 462603190, 'comment_body': ""Currently, I'm using `widget_answer.xml` for URL widget and Date and Time widgets. You were correct, there was some spacing issue in case of multiple widgets on the same screen. I added `vertical padding` as `margin_small`.\r\n\r\n| On master  | On Rework Date Widget branch |\r\n| ------------- | ------------- |\r\n| ![WhatsApp Image 2020-07-30 at 03 01 15 (1)](https://user-images.githubusercontent.com/35730054/88855868-27122900-d211-11ea-9f22-ee09a7dccf3d.jpeg)  | ![WhatsApp Image 2020-07-30 at 03 01 15](https://user-images.githubusercontent.com/35730054/88855873-29748300-d211-11ea-9292-6fca48958a62.jpeg) |\r\n\r\nIs it fine?"", 'comment_created': datetime.datetime(2020, 7, 29, 21, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 462923756, 'comment_body': ""Yes I think like for now it's ok. I guess once you finish reworking all the widgets we should go through all layouts and make sure they are consistent because we might miss something (you changing the code and me reviewing it)."", 'comment_created': datetime.datetime(2020, 7, 30, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462937799, 'comment_body': 'This method name also should be changed like you did with setData() in this case it might be setWidgetData() without `binary` word because as i said before it is no longer used only by binary widgets.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462941179, 'comment_body': 'Great this looks good now.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462946160, 'comment_body': ""What is the reason to have DateTimeWidgetUtils and DateTimeUtils as separate classes? Shouldn't it be just one class?"", 'comment_created': datetime.datetime(2020, 7, 30, 12, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462951085, 'comment_body': ""You still didn't implement view model as I said before (too keep data) so your picker will reset values for example if your rotate your device. This is something we should test automatically."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462957393, 'comment_body': ""Removing this you have broken https://github.com/getodk/collect/issues/3948 so it's a regression. In order to fix this you need to do the same now in FormEnryActivity where `onTimeSet` is used. Unfortunately we don't have any test for it. Could you write one? Or at leas please file an issue to do that in the future."", 'comment_created': datetime.datetime(2020, 7, 30, 12, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462963806, 'comment_body': ""This isPartOfDateTimeWidget doesn't make sense anymore it is called only from the same class with `false` value (look above). It was implemented to fix https://github.com/getodk/collect/issues/3761 but now as you have a separate DateTimeWidget which doesn't contain two widgets inside as before it is probably no longer an issue. So you can remove the code implemented in https://github.com/getodk/collect/pull/3770"", 'comment_created': datetime.datetime(2020, 7, 30, 12, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462992740, 'comment_body': ""Can't we use LocalDateTime here only instead of LocalDateTime and DateTime. DateTime seems redundant since you can save both date and time in LocalDateTime."", 'comment_created': datetime.datetime(2020, 7, 30, 13, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 462999270, 'comment_body': ""Also the `BinaryDataReceiver` class has wrong name again it's not just for binary widgets."", 'comment_created': datetime.datetime(2020, 7, 30, 13, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 463271646, 'comment_body': 'I renamed it to `WidgetDataReceiver`. Is it fine?', 'comment_created': datetime.datetime(2020, 7, 30, 21, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 463273261, 'comment_body': 'I just thought that the methods in `DateTimeUtils` are very much specific to getting a particular format of Date and Time Data. Although the names of both classes are very similar.', 'comment_created': datetime.datetime(2020, 7, 30, 21, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 463274800, 'comment_body': ""Oh sorry @grzesiek2010. I will implement the `viewModel` and then I'll write tests for the same."", 'comment_created': datetime.datetime(2020, 7, 30, 21, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 463284464, 'comment_body': 'Yes seems fine.', 'comment_created': datetime.datetime(2020, 7, 30, 21, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 463571704, 'comment_body': 'Should we have a single class here, just `DateTimeUtils`?', 'comment_created': datetime.datetime(2020, 7, 31, 12, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 463846759, 'comment_body': ""I think we should review those classes because even if it make sense to keep them both at least we need to move some methods. For example in DateTimeWidgetUtils you have getCurrentDate()/getTimeData() where it would be better to have it in DateTimeUtils on the other hand in DateTimeUtils you have getDateTimeLabel() where it should probably be in DateTimeWidgetUtils because it's a label for widgets."", 'comment_created': datetime.datetime(2020, 7, 31, 21, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 463850011, 'comment_body': 'Okay sure! I will review them.', 'comment_created': datetime.datetime(2020, 7, 31, 21, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465064941, 'comment_body': 'Still not fixed. Have you tested it?', 'comment_created': datetime.datetime(2020, 8, 4, 13, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465070419, 'comment_body': ""You didn't remove the whole code implemented in https://github.com/getodk/collect/pull/3770/files for example `registerForContextMenu` parameters still exists in `QuestionWidget` which is always true."", 'comment_created': datetime.datetime(2020, 8, 4, 13, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465077303, 'comment_body': ""You implemented the viewmodel but you don't use values stored there so the result is the same once you rotate your device everything is reset. As above would be good to have a test for it."", 'comment_created': datetime.datetime(2020, 8, 4, 14, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465080469, 'comment_body': 'Is this cleaning done? Because I doubt.', 'comment_created': datetime.datetime(2020, 8, 4, 14, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465093574, 'comment_body': 'Sorry for this. I fixed this in [731dc65](https://github.com/getodk/collect/pull/3975/commits/731dc65f95697639d3f4efa1dee6cb4c8133da58)', 'comment_created': datetime.datetime(2020, 8, 4, 14, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465124798, 'comment_body': 'I removed it from the `QuestionWidget` in [b95a8d5](https://github.com/getodk/collect/pull/3975/commits/b95a8d5c5db875e47a431d2d9ffeaaf3eb7c3620)', 'comment_created': datetime.datetime(2020, 8, 4, 15, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465242784, 'comment_body': ""I tested it on my device. Values didn't change on device rotation. When displaying the `DatePickerDialog`, I use date value passed by the widget to set the dialog to that value. Am I missing something?"", 'comment_created': datetime.datetime(2020, 8, 4, 18, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465244387, 'comment_body': 'Yes done in [e2765b1](https://github.com/getodk/collect/pull/3975/commits/e27c5b1f7b511e2919db72a246e3f398320f6f49)', 'comment_created': datetime.datetime(2020, 8, 4, 18, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465621926, 'comment_body': 'Do we need this? I know it was needed in [TimePickerDialog](https://github.com/getodk/collect/issues/3948) but here? ', 'comment_created': datetime.datetime(2020, 8, 5, 10, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465631052, 'comment_body': 'This class seems redundant you can use DateTimeWidgetUtils everywhere you need. Or maybe I missed something important?', 'comment_created': datetime.datetime(2020, 8, 5, 10, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465633141, 'comment_body': ""What about: getDatePickerDetails/getDateTimeLabel/getGregorianDateTimeLabel shouldn't it also be a part of DateTimeWidgetUtils?"", 'comment_created': datetime.datetime(2020, 8, 5, 10, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465640352, 'comment_body': 'I think it happens only in custom date pickers like coptic/ethiopian etc. Did you test them?', 'comment_created': datetime.datetime(2020, 8, 5, 10, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 465669919, 'comment_body': ""Oh okay I'll check once"", 'comment_created': datetime.datetime(2020, 8, 5, 11, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465671038, 'comment_body': 'Oh actually I used to that I can verify the method calls to the `DateTimeWidgetUtils`, and then right separate tests to verify that the behaviour of the methods in `DateTimeWidgetUtils`. I can pass a mock of `DateTimeWidgetListener` in the Date time widgets constructor, and then verify method calls.', 'comment_created': datetime.datetime(2020, 8, 5, 11, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465672507, 'comment_body': 'Oh right I need to take care of the dates displayed in the textview of the dialog.', 'comment_created': datetime.datetime(2020, 8, 5, 11, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465969693, 'comment_body': 'Right @grzesiek2010, they should be a part of `WidgetUtils`', 'comment_created': datetime.datetime(2020, 8, 5, 19, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465970850, 'comment_body': ""@grzesiek2010 I found that `view.clearFocus()` does not make any difference on the DatePicker or TimePicker dialogs. I too remember it was required for the Time Picker dialog to hide the extra window behind the dialog, but even without it, I don't see that window now."", 'comment_created': datetime.datetime(2020, 8, 5, 20, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 465972100, 'comment_body': ""Should I write the test for `CusotmDatePickerDialog` as I ddin't use the viewmodel to set the values shown on the dialog on screen orientation change."", 'comment_created': datetime.datetime(2020, 8, 5, 20, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 466271729, 'comment_body': 'In `TimePicker` it is required now as you removed it I can reproduce https://github.com/getodk/collect/issues/3948 again.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 466282178, 'comment_body': ""This works but it's not a proper solution. You already have ViewModel and it is a component you should use to store data and make sure it persists. I mean passing data from a widget to dialog using bundle is ok but then you should unpack it and store in your viewmodel."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 466298356, 'comment_body': ""But you don't need an interface to achieve that you can use mock with verify on `DateTimeWidgetUtils` in the same way. That's why I said it seems like a redundant abstraction."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 466317738, 'comment_body': 'Yes right I can mock `DateTimeWidgetUtils` class but I was not able to use verify for any static method. ', 'comment_created': datetime.datetime(2020, 8, 6, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 466374047, 'comment_body': ""I think it should be viewmodel's responsibility not to return null, so this check should be moved there and here you should just call viewModel.getDate();"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 466378516, 'comment_body': ""But you don't verify static methods in your tests so I don't understand what the problem was. From what I see all tests will work without that interface too."", 'comment_created': datetime.datetime(2020, 8, 6, 12, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 466382985, 'comment_body': 'It would be good to have a test that confirms everything is fine after recreation.', 'comment_created': datetime.datetime(2020, 8, 6, 12, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 466401356, 'comment_body': 'The interface will act as a wrapper for the static methods, so I can verify any calls to them in the widget test, and I verified the behaviour of static method calls by verifying again the interface methods. \r\nIn `DateTimeWidgetUtilsTest`, I used `dateTimeWidgetUtils.displayTimePickerDialog` to check if the Time Picker dialog is displayed whenever this method is called. This verifies the behaviour of static method `showTimePickerDialog`.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 466407676, 'comment_body': ""Oh I understand, without that interface, I will have to check whether some dialog is displayed in the widget test, and I can verify whether correct arguments are passed, by checking the bundle of the displayed dialog fragment, then I can test separately whether the correct dialog class is displayed in the `DateTimeWidgetUtilsTest`. I'll remove the abstrcation."", 'comment_created': datetime.datetime(2020, 8, 6, 13, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 466410074, 'comment_body': 'Should I pass all the other arguments to the ViewModel too? Now That I have a ViewModel, it seems like I should use just one way of communicating with the fragment.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 467627271, 'comment_body': 'You mean those you access via `getArguments().getSerializable` if so yeah I think it should be stored in viewmodel.', 'comment_created': datetime.datetime(2020, 8, 9, 20, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 467903467, 'comment_body': ""@grzesiek2010 I had some doubt regarding removing this abstraction completely. Currently, I'm verifying `dateTimeWidgetUtils.displayDatePickerDialog()` is called with valid arguments. I don't need to verify here that correct `datePickerDetails` argument is passed to the function, as that is extracted in the `DateTimeWidgetUtils` class. So I can write all the tests verifying that different dialogs are displayed for `datePickerType` only once for the tests for `DateTimeWidgetUtils` class. I need not verify this for all the widgets separately."", 'comment_created': datetime.datetime(2020, 8, 10, 13, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 467905808, 'comment_body': 'I tried to get all those values using the ViewModel, but now I have two instances of `DateTimeViewModel` class in the dialogs. I see that you have an idea of instantiating all the widgets inside fragments, that is really cool, and it will solve this problem. Is it fine to have two instances of the ViewModel for now?', 'comment_created': datetime.datetime(2020, 8, 10, 13, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 468456125, 'comment_body': 'Which test are you talking about? I did what I expected by myself to give it a try and all test you have added seem to work well https://github.com/getodk/collect/commit/b6e2850292f7b2cf9b2fe3a5226487b8d071b1a9', 'comment_created': datetime.datetime(2020, 8, 11, 9, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 468458080, 'comment_body': 'Why do you need two viewmodels? am I missing something?', 'comment_created': datetime.datetime(2020, 8, 11, 9, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 468467725, 'comment_body': 'Sorry for not understanding earlier. I understand now, I can simply remove the static methods as I cannot verify them, nonetheless, I access them using public wrapper functions, so I can simply verify them for the test.', 'comment_created': datetime.datetime(2020, 8, 11, 10, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 468542832, 'comment_body': ""So for passing the values using `viewmodel`, I would be needing the `viewmodel` to be created using the `FormEntryActivity` right?, and that is against your idea of creating the `viewModel` using dialog context. Sorry If I'm misinterpreting things   "", 'comment_created': datetime.datetime(2020, 8, 11, 12, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 468550203, 'comment_body': ""I think you want to pass those arguments to `CustomDatePickerDialog` using viewmodel? If so that's not what I wanted. I just said that you can store them in the existing view model (unique for every CustomDatePickerDialog) after receiving them via `getArguments().getSerializable ` so it's ok to pass them to dialog like now but then would be good to store and access via viewmodel. Is that what made confusion?"", 'comment_created': datetime.datetime(2020, 8, 11, 12, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 468551427, 'comment_body': 'Oh alright! I understand it now. Thanks!', 'comment_created': datetime.datetime(2020, 8, 11, 12, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 468927409, 'comment_body': 'This is added but never used.', 'comment_created': datetime.datetime(2020, 8, 11, 23, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 468928075, 'comment_body': 'Should be stored in view model too.', 'comment_created': datetime.datetime(2020, 8, 11, 23, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 468930283, 'comment_body': 'Values you acres via `DateTimeWidgetUtils.TIME` and `DateTimeWidgetUtils.DIALOG_THEME` should be stored in viewmodel like you do in `CustomDatePickerDialog`.', 'comment_created': datetime.datetime(2020, 8, 12, 0, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 468930780, 'comment_body': 'Would be good to move `getDateAsGregorian` and `getDateWithSkippedDaylightSavingGapIfExists` methods out of this class to `DateTimeUtils`.', 'comment_created': datetime.datetime(2020, 8, 12, 0, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 468935231, 'comment_body': ""This is not your fault because probably it worked in the same way on master but it's not consistent. Only TimePicker is not cancelable in all other cases where we use dialogs like datePicker/RankingWidget/NumberPicker it is possible to close such a dialog clicking outside of it so I think timePicker should follow the same approach."", 'comment_created': datetime.datetime(2020, 8, 12, 0, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 469208518, 'comment_body': 'Sorry I missed', 'comment_created': datetime.datetime(2020, 8, 12, 12, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 469233693, 'comment_body': 'That would mean writing tests for all CustomDatePickerDialogs, should I write them as part of this PR itself?', 'comment_created': datetime.datetime(2020, 8, 12, 12, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 469237464, 'comment_body': ""I wanted to say please file a separate issue but it would be great to have at least those that check if values don change on recreation so it shouldn't be a big deal."", 'comment_created': datetime.datetime(2020, 8, 12, 12, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 469243171, 'comment_body': 'Hi @grzesiek2010! I had a doubt. Here, I just test whether the date answer shown in `widgetAnswerText` is same as that returned by `DateTimeWidgetUtils.getDateTimeLAbel()` method. I do not write unit tests for all the different cases when `datePickerDetails` are different, and for different formats. Is it fine here just to check for one case, and have a check for all the other cases in `DateTimeWidgetUtilsTest` class?', 'comment_created': datetime.datetime(2020, 8, 12, 13, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 469248127, 'comment_body': 'Oh sure! I will add tests for that as part of this PR, and all the other tests as a different PR, after filing a separate issue.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 469734528, 'comment_body': ""Yeah I think it's fine"", 'comment_created': datetime.datetime(2020, 8, 13, 6, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 469740222, 'comment_body': 'You should be consequent here. Below you have private props accessed via getters, would be good to keep one approach.', 'comment_created': datetime.datetime(2020, 8, 13, 7, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 469743833, 'comment_body': 'You can get rid of curly brackets here.', 'comment_created': datetime.datetime(2020, 8, 13, 7, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 520111743, 'comment_body': ""Could you explain this change to me. You added a similar code to other date dialogs as well and I think I understand why we check if `copticDay > copticDate.dayOfMonth()` a few lines above since it's possible that when we change months we might move from one that has more days than another but is that possible that the number which represents months is negative?"", 'comment_created': datetime.datetime(2020, 11, 9, 20, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 520113222, 'comment_body': ""Please rename this method to `setWidgetData()` since like in this case it's not only about binary files."", 'comment_created': datetime.datetime(2020, 11, 9, 20, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 521124421, 'comment_body': 'Hi @grzesiek2010! Some of the unit tests fails without this code. Actually when the widget does not have any answer, and the user opens up the date picker dialog, the view model sets the value of selected date as null, and we get the default value for day as 0, while it must be in the range [1,30/31] for custom date picker dialogs. ', 'comment_created': datetime.datetime(2020, 11, 11, 5, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 521973521, 'comment_body': 'Ok I see, thanks.', 'comment_created': datetime.datetime(2020, 11, 12, 9, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}]","[{'commit_sha': '9fdadadc6c268fbd81a24c9b8b78671b27293465', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99254e99f1c182975efe95057fc2dcc671477d5d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '663f3ade247e7db454cd218d83ce3732bc606020', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77f21c8a4909483f132b1022cb050020dc761627', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b204a218e7ef413d1b15c2b281965adb6e46b73a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227676955114d36075671141473cbf3def80190c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953878ca37ff35b7c135ae4287e85f8e7191b54f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c1b034eba62ddf8f85cd6ee3f6509b18838a21', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb14e16d66fa376fb8a4d148bd3527853b563640', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90bc92536b8ffb8ec9e812bf87a10446b9c6bc9a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd37649036de136e4c7934b91c0b1d74caedd4339', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8575a8b8d72dae07d6a6672cad99c0516172867', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '857da01294be30e9a04847fc4c856d8b6c9ec0e8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c298a6cbc669ac9fb3ddcbfb54384e95cdbc16', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c4cafbca283d2f77a311e34bed4ced15850d464', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d9d986daea25a8080d2cefd67224bc64cad0be7', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb5127154fbdc1fb201e79f616070ca99ec59dc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e4e3577acdcd6566db3d97c3f103b143cd25f5d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5defdc69ce10c406ff1ccb735c6477dd6cc1e758', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77289eba62a0980f3e6504e2a6e3aeefbd51c72c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4b1b98ff56f7fd7d2a966703f8fb37ade5b6aa', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74c257e99981502cecb0d36abb7dea5efd308abe', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0835444d9cbef72947289902c00775c3d44989f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3478eef1fcd93902b456557da462a30bcce76b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501d519aaeeb42cc1c93364524750d3122bf8274', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53059ffe7368125bb835cc948932f436f369e43e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e38b94d406e5fdb03de469d2a3363d30d520ca55', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db0d0b08a6b1fa31259d36e93b9cf76575ac1de3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f6faf90fa1323046c3322851114ee99474ae5a6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74965daaa2bb1200eb73d4641cd60f649e09034a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aab3001d6d81ec4f573fa10a46d4312b05664889', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38fc43884edfa52888005595e43f826f17492d4a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58e3d6afcc04697e9c4d702a9001b4c406d9945c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea57a351ce1a9f99acdc086eaa748e1206abb4af', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fbacdeebcb7a95dcff1169de4ecdceb069b775f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85a52d0fbc2efc0c28ced7105ebc19d3084aa01b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90041d30febb5b43408280f05c23f0efc977e96b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ad82d7bd8fa6b1172bb874dd7b4f313f0e0389', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62bcc7e5214aa17a5c348754fb9c15a8f364c5fe', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c188c472fa4b48170c4a421100668aecc51c566', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa3d33b1f1dcb62160b17bd26ea376021424e8b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2a85cd3b3bd0933635a0cce95b758deab91eae', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50af755de8b238adcfe30b839f1b47ac15193b22', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0768876cf44b11b0e6eb5877a6bd8371faec4462', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb9fe76a0f08c0e984d7b8f6b286bdfd817dbd84', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f1fe1862a34c00ca585e1b90155ae5cd803c49', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fd8646f9e237031a962acf85347f20b223deb20', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63efa3e63d9b41a1a12cd0a65497061c69ecef11', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6dbefa14596fd70e9022ef6d7d941665a9f61b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '225e5f614237426bc8f80db06604dbed85c4c46c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '082b999b1cf7766dd028cc1ba407de076fbcfe14', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00d7ac2c87d7a1e35e8849352bc3ef195c9f5801', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7c0c5b832fce05f03abd769baefad11253f3339', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01628d0b220694cae649bc55215e251544df2a8d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ee68738405ae4960a75d08553a893204d80db40', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dafae431abbe8c67d025272432c82cf32708662', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa80e3856e46eb33871fa5190d0b0e77fb52a88', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66ac5057dce652700eedd54717e8c5cf7cffc91', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b69d65837accd84d7f485ae3cfaab2ed5aaf2cae', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919cca13a0e23dc02758687738564ecfb8b61a7c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb6cf2d16924ab63fca3eedc18ded631e9f1299', 'committer_username': 'grzesiek2010', 'committer_name': 'Grzegorz Orczykowski', 'committer_email': 'gorczykowski@getodk.org', 'commit_date': datetime.datetime(2013, 1, 15, 15, 2, 56, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
448737772,Reworking Range Widget,"This PR includes rewriting the test coverage and class of Range Picker Widget 

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I verified the behavior on the `master` branch and on this branch for the attached form. I didn't find any behavioral changes in the widget. I updated to the latest google material library version 1.2.1 to display Range Widgets using Material Slider.

There is a slight clipping of the ripple effect for the vertical slider, but I found the same on the master branch as well. @seadowg and I decided to leave that for now. I will keep looking for solutions.

#### Do we need any specific form for testing your changes? If so, please attach one.
Form having both Range Integer and Decimal widgets like 
[Test Range Picker Widgets.xml.txt](https://github.com/getodk/collect/files/4917565/Test.Range.Picker.Widgets.xml.txt)
[Test Range Widget.xml.txt](https://github.com/getodk/collect/files/4931460/Test.Range.Widget.xml.txt)

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3969,https://api.github.com/repos/getodk/collect/pulls/3969,https://github.com/getodk/collect/pull/3969,closed,1611,544,33,66,15,21,1,0,[{'name': 'behavior verified'}],2020-07-14 08:40:56+00:00,2020-10-09 18:06:56+00:00,7550760.0,"87 days, 9:26:00","[{'comment_id': 454208789, 'comment_body': ""@seadowg `clickingPickerButton_showsNumberPickerDialog()` unit test is failing. I'm looking onto it. If you have a hint, please let me know."", 'comment_created': datetime.datetime(2020, 7, 14, 8, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 454926737, 'comment_body': 'Yeah if you debug you\'ll see that in `RangeWidgetUtils.showNumberPickerDialog` the `catch` branch will run as there is a `ClassCastException`. The code is trying to cast the `context` to a `FormEntryActivity` but it doesn\'t need to be one of those to add a `Fragment` right? I think it just needs to cast it to a `FragmentActivity` (`Activity` doesn\'t have `getSupportFragmentManager` on it).\r\n\r\nI think you\'ll also need to have the activity in fully created state to add a fragment (rather than one that\'s just been ""built"").  Maybe just for those tests you can create a different test activity using `createThemedActivity`. The extra work is pretty slow so good to only use it in tests that need it!', 'comment_created': datetime.datetime(2020, 7, 15, 9, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 454938128, 'comment_body': ""Right I think that's why the tests simply failed instead of giving an error"", 'comment_created': datetime.datetime(2020, 7, 15, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 460844571, 'comment_body': ""I'm not a big fan of the `FormEntryActivity` having to know about widget implementations here but this structure existed a long time before this PR and I think it's be awkward to unravel."", 'comment_created': datetime.datetime(2020, 7, 27, 12, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 460847037, 'comment_body': 'Probably worth combining this with the test above so it tests that the `ACTION_UP` **after** the `ACTION_DOWN` works. With these tests the implementation could just set `isTrackingTouch` to `true` on an `ACTION_DOWN` and then never change it back 😉', 'comment_created': datetime.datetime(2020, 7, 27, 12, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 460848205, 'comment_body': ""Oh this is very cool! It never occurred to me to just set the application context theme. This could probably help us speed up tests where we're building an `Activity` just to set the context theme. Maybe you could add this to `RobolectricHelpers` as `createThemedContext(int theme)` so we  can use it other places?"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 460850576, 'comment_body': ""I think in future this could probably be extracted to its own custom view but for the moment it's great progress!"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 460853417, 'comment_body': 'I think this layout should be called `button_and_answer` or something. I don\'t like suggesting that it\'s the ""default"" answer view.', 'comment_created': datetime.datetime(2020, 7, 27, 12, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 460855608, 'comment_body': ""I don't think we should use `dividerColor` here. Could you find a color to use in the standard [material color set](https://material.io/develop/android/theming/color) and use that instead? If it isn't in our themes already you might have to define it. \r\n\r\nIf it seems doable you could then replace `dividerColor` everywhere and delete it? No worries if that seems like a distraction though."", 'comment_created': datetime.datetime(2020, 7, 27, 12, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 460855743, 'comment_body': 'This should use theme colors rather than hardcoded colors.', 'comment_created': datetime.datetime(2020, 7, 27, 12, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 461091360, 'comment_body': ""@seadowg I think the other option that we can use is having a separate `viewModel` for `RangeWidget`. I also don't like having a callback implemented in `FormEntryActivity`."", 'comment_created': datetime.datetime(2020, 7, 27, 18, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 461191351, 'comment_body': 'Yes correct @seadowg Thank you!\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 21, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 461195397, 'comment_body': 'I renamed it to `widget_button_and_answer_layout`', 'comment_created': datetime.datetime(2020, 7, 27, 22, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 461196582, 'comment_body': 'Yes sure', 'comment_created': datetime.datetime(2020, 7, 27, 22, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 461433559, 'comment_body': 'Yes sure @seadowg :) ', 'comment_created': datetime.datetime(2020, 7, 28, 9, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 462177314, 'comment_body': ""I think you misunderstood what I was trying to communicate before. I just meant if we were missing one of the standard material theme colors we might have to add it to our themes. Sorry if that was confusing! \r\n\r\nThe theme shouldn't have to know that there is a slider that needs a color right? The slider should use a material theme color we have a value for not a new custom one."", 'comment_created': datetime.datetime(2020, 7, 29, 9, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 462369535, 'comment_body': ""Oh now I get it. We have values for almost all the theme colors except for `colorBackground`. However, I feel that I shouldn't be using it as `sliderTrackColor`, as it doesn't sound correct. I feel like I should use `colorOnBackground` as slider track color. Am I correct? I found that we are not using the value of  `colorOnBackground` anywhere in the app. Should I update it? "", 'comment_created': datetime.datetime(2020, 7, 29, 15, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 462392408, 'comment_body': ""I'd say `colorOnSurface` probably makes sense?"", 'comment_created': datetime.datetime(2020, 7, 29, 15, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 462407683, 'comment_body': ""I don't think you need to pass a `NewInstanceFactory` here. Could you not just use the 1 arg constructor for `ViewModelProvider`?"", 'comment_created': datetime.datetime(2020, 7, 29, 15, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 462409262, 'comment_body': ""I feel like `getNumberPickerProgress` should probably remain a util method as it doesn't rely on any state in the view model."", 'comment_created': datetime.datetime(2020, 7, 29, 15, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 462875269, 'comment_body': ""I'm not a fan of testing this field here as there is no reason for it to be public. Really the test should click on the button and test that the dialog receives the right values. I know you're reworking how all that functions though so I think we go with this for the moment!\r\n\r\nAs a general tip for tests like this I would avoid the `for` loop and just write out what I expect the values to be. That way it's clearer to the reader of the test. Tests serve as documentation as much as they serve as checks so it's good for them to be very clear what the behaviour they expect is."", 'comment_created': datetime.datetime(2020, 7, 30, 9, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}]","[{'commit_sha': '5b25ebfdc488a6002685c225eb2c93638fec2294', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61d19ec1d930571ddd0fb97a262cc0c75f863bbd', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a7542757793a4cd91f15ce1a9ed9f4ae591cb5', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0176461f4ec138180b592abb9d7daf879eee3832', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db6e4c9459b22785140fe5982112b7b8623d7ad6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80c6d71d36ddea1a744636749356804d237a6c3b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb8479b5083030eb1d98bdf5bdb62ac03a1c7a4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270d314ee1fdc1cf9cce013ccfa031b8e8b77dde', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6f3bde84a2a1c10b0bf14232ff79ccb54b42a95', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b69049eec6d7318ff941bc22dc7d7b5285d3d46', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf1926ea56c806e44119abfdb381db1691c25ef', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4138080a4e3f98e0ad84ffa5310cca359e387907', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436fc2339d21c9a5a43a21f5270afeaa8dc3abed', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc8cea6a1b3d8d595dbb97f145c9d9972351658', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4faa3714280b7735948b73c8b30c49b93df244c3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20843b74dd0b8962e4626e2757197a2e4406a73d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261cd4930ca815c9ab5c9bd53cb2738e2d5bf84f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2e9e91f88090a6960f285f1a2cab4e12127640', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03ecc6560a7c0d31c17b1c47af52b058c135762', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d667976523d0a5d527de385dec5b237f32a1b7c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '699e982dae9c72f1d7bc2e1a72f009fe37d8b97f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb932e9eee9e69fbd7fe01e19a6488a284b003d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93401e5071c5ef93bb6521c8cd94ea29c6ee0b9f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8690b83fe0dcc55d463940286f37548fda877b6a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10a923a51e3cbd00032a6868277f62b03a1c4ff8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecf662e0a41ecdfef02feafff45b1c6ea150529', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb24545e5b1b6d3954205f1c7d26f1a6b6fd0cbc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a344184a8739f7c924f352443d301beadd207c0b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db37ff10620de47ae3d5bf8fd61e88c166e30bcb', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d45f7bb61d629007020ca3fc0282e88adb2f66a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f64d3df37c410d99c47fdcd78e1aaa0aa7b74d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bedf2c8e247668b7cff056d94aec64b0c197d762', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35210fcea866cccef89b18378cb9699525a0c85a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e7b0e075c2a623a74c05bdff7664d2b948314f3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bef2f19f0e3b97bb1aad330dd9112a92c7f39c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4680d40c4ad321858e1182901b98618ee13ac19d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10fa032fa058dff5acba3e2a916d9cb094368620', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e5beea8ea6c5ba2d89a3f4846b88d3cdd3a607', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8454ee3646cf9ce6a1ec5f86c532db3e33f86d31', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e1cddcca0efb9a5872de3daf8130d594709819', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc0f86fa7774c4c842d33a53398fbcc73120e04e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ea5bd6fc8132706bec8acf68bda849417517a64', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75de29afdc7348a0e3dcb1a98a5477d26bb598c4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23f1de47a4bf640ccc047647037ed235f67b1c93', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdfc9f8c2624b64271775493579fe672b3f2f64', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8c79ce730879dc2e6743be3f2b4e539e64b70b9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a640861866d1bf4919ca85198263cc231d2b656', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bc510e62c78f5cdb11dcf25e45197dbf48e5c2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6717f76be9037b972f8051a6fb56372f319b1d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74193f95d0f0f6ece24b72e4ceb372869a708cc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3d9df15142176289a088c3532ac24a71710e717', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85796d62e43b1985290e7cb8a08306abc3d79979', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b20cc6ecf0cc9bebf79293188e7d987cf06c3c09', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa1313d7280c526b22759de5bacb59d9adc282ec', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa7db937e9a9b1d565178c5f0153067f92b3de58', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f079561e9d968f17889363a35b9ac03e7d6cec3e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05d64a2919df63878390815d8aee52b617c889f8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad92235f0991a92752754c29f028357860c6f34c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fcbf27b154bc13f1e3c9760f7d31fa57df910e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7685c3e28f482cfb07292820b9dc92551c7fea6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dae8e40005e09d1b4a5aa6eeca24a8492af9491', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fe4779c5f693da504be6260c18c1f30226378a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94d17fc3a6062bb64f1675df049586b72d398dfe', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e8b4a016a0dd2bbe463d1ce02affd5e9c474cc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56875b2966fe206e4f9a74e8c35eba39cf4e809d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9252164646383455c2747eb2f75f59a498022b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
438298789,Reworking Rating Widget,"This PR includes the work on rewriting Rating Widget.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
Previously, Rating-Widget displayed stars simply on multiple lines, when the number of stars could not be accommodated in a single line. In this PR, the user just can have maximum of two lines for the rating widget.

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form with Rating widget like [TestRatingWidget .xml.txt](https://github.com/getodk/collect/files/4817038/TestRatingWidget.xml.txt)

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3937,https://api.github.com/repos/getodk/collect/pulls/3937,https://github.com/getodk/collect/pull/3937,closed,322,131,7,27,36,27,1,0,[{'name': 'behavior verified'}],2020-06-23 03:51:21+00:00,2020-11-06 11:27:14+00:00,11777753.0,"136 days, 7:35:53","[{'comment_id': 447377515, 'comment_body': 'I have three `Ratingbar` with different styles In the XML file. All of thems visibility is turned off by default. This part of code checks which `Ratingbar` needs to be displayed depending on the number of stars and screen dimensions.', 'comment_created': datetime.datetime(2020, 6, 30, 2, 53, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 450071702, 'comment_body': 'It looks like Google have switched up how this should be enabled annoyingly (found [here](https://developer.android.com/topic/libraries/view-binding#setup)). This will throw up a deprecation warning on build. Instead, we need:\r\n\r\n```\r\n android {\r\n    buildFeatures {\r\n        viewBinding true\r\n    }\r\n}\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 6, 8, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 450072085, 'comment_body': 'What was this needed for?', 'comment_created': datetime.datetime(2020, 7, 6, 8, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 450076834, 'comment_body': 'All these padding values can just be replaced with one `padding` as they are all the same!', 'comment_created': datetime.datetime(2020, 7, 6, 8, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 450079108, 'comment_body': 'I think you can  use `ScreenUtils.getScreenWidth()` here and get rid of `getScreenDimensions()` at all.', 'comment_created': datetime.datetime(2020, 7, 6, 8, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 450088084, 'comment_body': 'I used this as otherwise `./gradlew lintDebug` fails and it gives an error for the unused resource (`geo_widget_answer.xml`) ', 'comment_created': datetime.datetime(2020, 7, 6, 9, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 450098029, 'comment_body': 'I did the same initially, but the Gradle sync fails and it says `No signature of method: build_.android() is applicable for argument types` ', 'comment_created': datetime.datetime(2020, 7, 6, 9, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 450125489, 'comment_body': ""Ah do you mean `rating_widget_answer.xml`? I was confused initially but guessing this is because of View Binding's magic. Makes sense now!"", 'comment_created': datetime.datetime(2020, 7, 6, 10, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 450126454, 'comment_body': 'Ah it looks like this PR has the older Gradle plugin. If you update your branch (`git rebase master`) so it has the latest changes from `master` you should be able to use the new definition. ', 'comment_created': datetime.datetime(2020, 7, 6, 10, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 450144216, 'comment_body': 'Oh sure I will do that @seadowg ', 'comment_created': datetime.datetime(2020, 7, 6, 10, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 451537660, 'comment_body': 'You have two blank lines here please remove one.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 451545664, 'comment_body': 'This is just for tests right? I would change access modifier (of the field) to package-private and use that field directly without any getter method like this one.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 451549200, 'comment_body': ""Why do we need this extra field at all? Why can't you use binding.ratingBar everywhere?"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 451556512, 'comment_body': 'Should be returns null not zero right?', 'comment_created': datetime.datetime(2020, 7, 8, 13, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 451559873, 'comment_body': ""You can use it in other widgets as well so you should''t use Range word here."", 'comment_created': datetime.datetime(2020, 7, 8, 13, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 451560097, 'comment_body': ""Same as above it's not just for range widgets."", 'comment_created': datetime.datetime(2020, 7, 8, 13, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 452050517, 'comment_body': ""Thanks @grzesiek2010! That's a better approach."", 'comment_created': datetime.datetime(2020, 7, 9, 8, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 457217859, 'comment_body': 'Both can be private.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 457218582, 'comment_body': 'Please factor it out to a separate method, I mean the calculation because you can keep the variable.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 457220727, 'comment_body': 'I think more readable way of using the ternarry operator in this case would be:\r\n```\r\nreturn binding.ratingBar1.getRating() == 0.0F \r\n                        ? null \r\n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\r\n```\r\nso new line for each option.', 'comment_created': datetime.datetime(2020, 7, 20, 9, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 457221929, 'comment_body': 'Please fix this one-char parameter name, even simple `listener` would be better. ', 'comment_created': datetime.datetime(2020, 7, 20, 9, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 457224508, 'comment_body': 'This also could be factored out to a new method (again the calculation, you can keep the variable - as I said below).', 'comment_created': datetime.datetime(2020, 7, 20, 9, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 457225638, 'comment_body': 'You already have `android:stepSize in the layout file so why do you need this here too?', 'comment_created': datetime.datetime(2020, 7, 20, 9, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'grzesiek2010', 'type': 'User'}, {'comment_id': 457240021, 'comment_body': ""I'll fix this. Thanks for pointing out"", 'comment_created': datetime.datetime(2020, 7, 20, 9, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 461732887, 'comment_body': 'Could this change have been driven out with a test? Maybe there was one and I missed it!', 'comment_created': datetime.datetime(2020, 7, 28, 16, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 461757498, 'comment_body': 'Sorry @seadowg for missing the tests. I added unit tests and confirmed that unit test`changingRating_updatesAnswer_forRatingBarInMultipleLines()` fails for the last commit, and passes on the latest one.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 477440579, 'comment_body': ""I don't think we need this anymore right? It's enabled in the `android` block now."", 'comment_created': datetime.datetime(2020, 8, 26, 16, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}]","[{'commit_sha': '35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfb5a081d5fb247a95cbc928dfa1f47a0da0dc96', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9684f595f504cef4ecd689b6b55deed522c2497', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '276359a7b17f1baf59c1626f55a2370db511bde0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e44bf3e071acdb477b29a9e15b2ef717f2c7c077', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a9adf69f45a446351ff54804942c8027361081', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2942d635cffe3e4b579927d98ec408f07bc9184', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '999eab4a035a695cccfaf5031b62dfd38f1057e1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9acb1e1b8c5ce835e60449dc148f8e66a5533ea2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c6d8e6764b1dfc343c6173b53806cf41d81f1d2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8afa6a13b4739314aa54d735e1735b990a9f56d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb71d8a150b39dc0419cf94839ed2364021fe52', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd72cb04dcc833d86acb525f300e4f09eb6f93f35', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ea188912d6279747bced50dc3ad50790b4bb6f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c053a25ab6fd7a91361d08ce6cc9baecabeaf6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea7cd1ae54063565223afa7e3aacc6955d5a4606', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6135be68fe81eeffad26d0ed9918e01c203233d2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '757d09965497b154c4a527709e83d6577c06274f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff87f43f08b4475f9cef0e3bcf381900aecc57a0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2712dfe61ed06dcba5267869945a25d187fc76d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eae83ed3681b6247ca7d8a282d62dbe752f5548', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d7242d4df11e02679dd2fd7e025247c1e4a98bb', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e86567f4bf495cc4990027eb0bf0d285f1fe3dc', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25c7a21f91a1133a91b5ccd005e89d854b85871', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a1c519be2d0d24fcf27da92e7074646e520a37', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8af4f2870583565c95259608984281233564e49', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8642fb129605b6dbe635ba48116f7b446c3284ad', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
470816254,Rework Osm Widget,"This PR includes reworking the OSM Widget class, and adding proper test coverage.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I used `ActivityAvaibility` object in the widget to check for the case when the intent cannot be launched. I have missed the test coverage for some part of the code, like for the try-catch statement when launching an intent. Also, I feel it would be better to show the alert dialog in a fragment.

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form having OSM integration widget, like AllWidgetsForm

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,4033,https://api.github.com/repos/getodk/collect/pulls/4033,https://github.com/getodk/collect/pull/4033,closed,346,175,19,4,15,0,1,0,[{'name': 'behavior verified'}],2020-08-20 10:27:55+00:00,2021-03-29 13:38:16+00:00,19105821.0,"221 days, 3:10:21",[],"[{'commit_sha': 'bd1f5f5ac73b0cb9fb858afc1dd41a523e62ddfe', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cbe0095902df7d2bd3f22dbb2a4573543b8c339', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '772922f2e1d340ebf043c2bdcf3003da5a5085e3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c67966710cb0f8e8c2d8844a83195e5f49a5ad41', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
464071853,Reworking File Widgets,"~~Blocked by #4006.~~

This PR includes rewriting the test coverage and class of Audio, Video and ArbitraryFile Widget

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I have added tests for `VideoWidget` and `ArbitararyFileWidget` and also restructured the widgets along with `BaseImageWidgets` on the basis of the newly modified structure of `AudioWidget`. 

#### Do we need any specific form for testing your changes? If so, please attach one.
AllWidgetsForm or any form having mentioned widgets

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",False,4015,https://api.github.com/repos/getodk/collect/pulls/4015,https://github.com/getodk/collect/pull/4015,closed,950,674,35,29,6,23,0,0,[],2020-08-06 14:41:10+00:00,2021-01-04 16:38:35+00:00,13053445.0,"151 days, 1:57:25","[{'comment_id': 466476551, 'comment_body': 'Hi @seadowg! I wanted to write tests for `getFile` in case the answer is of `Uri` type. I am using many static methods here, and I would need to mock the data returned by them. \r\nIs there any other way to achieve this, rather than having a wrapper method nonstatic method that calls the static method, and then mocking the non- static method?', 'comment_created': datetime.datetime(2020, 8, 6, 15, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 466479998, 'comment_body': ""Also, I wanted to ask, is it fine if just check whether the answer updated here is the same as returned by `FileWidgetUtils.updateWidgetAnswer()`? I'll have to write separate tests for `FileWidgetUtils` class"", 'comment_created': datetime.datetime(2020, 8, 6, 15, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 467778021, 'comment_body': ""I think it's a sign that you maybe want a different interface/object that's responsible for computing the answer? That or you just want to have a hardcoded expectation. I'd try and avoid writing tests that assert something is the same as the result of something else."", 'comment_created': datetime.datetime(2020, 8, 10, 9, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 467778955, 'comment_body': 'Maybe you don\'t need to fake/mock any of the static methods here? I think where static methods are fine is where they are just ""helpers"" for your implementation. ', 'comment_created': datetime.datetime(2020, 8, 10, 9, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 467783030, 'comment_body': 'Okay Cool! I can just have the checks in the unit tests of the widgets', 'comment_created': datetime.datetime(2020, 8, 10, 9, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 486233759, 'comment_body': ""`StopsPlayingMedia`? Not sure that's right."", 'comment_created': datetime.datetime(2020, 9, 10, 10, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486235762, 'comment_body': ""There's no reason to use a mocked `File` here. If you want to create a file for test and not worry about clean up etc you can use [`createTempFile`](https://docs.oracle.com/javase/7/docs/api/java/io/File.html#createTempFile(java.lang.String,%20java.lang.String,%20java.io.File))."", 'comment_created': datetime.datetime(2020, 9, 10, 10, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486236183, 'comment_body': 'This should be `clickingAnswerButton_...` right?', 'comment_created': datetime.datetime(2020, 9, 10, 10, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486236630, 'comment_body': 'This as well (`...AnswerButton...`)', 'comment_created': datetime.datetime(2020, 9, 10, 10, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486238935, 'comment_body': ""As much as we can it's nice to avoid having multiple constructors just for tests. It's a good way of swapping out dependencies if we absolutely need to but I think we can cut down to one here."", 'comment_created': datetime.datetime(2020, 9, 10, 10, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486239517, 'comment_body': ""I think we can get rid of the `FileWidget` interface now right? There's no reason I can see for it. I could be missing something though!"", 'comment_created': datetime.datetime(2020, 9, 10, 10, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486245052, 'comment_body': ""Don't think the test name is right here?"", 'comment_created': datetime.datetime(2020, 9, 10, 10, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486245997, 'comment_body': 'Test name is wrong here.', 'comment_created': datetime.datetime(2020, 9, 10, 10, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486246229, 'comment_body': '`usingSelfieAppearance`', 'comment_created': datetime.datetime(2020, 9, 10, 10, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486246662, 'comment_body': 'Again, test name is wrong.', 'comment_created': datetime.datetime(2020, 9, 10, 10, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486249094, 'comment_body': ""I'm not sure I understand what this interface is for? Could the implementation of `getUpdatedWidgetAnswer` just be a static helper that is shared between the widgets for the moment? I think it might make sense for there to be something that abstracts the `WaitingForDataRegistry` and the `QuestionMediaManager` but I'm not sure this feels right."", 'comment_created': datetime.datetime(2020, 9, 10, 11, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486249962, 'comment_body': ""I tend to try and keep attributes that position views of styles as it's often useful to be able to see these easily in the layout. Here I'd probably avoid including width, height and gravity."", 'comment_created': datetime.datetime(2020, 9, 10, 11, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486275756, 'comment_body': 'We have image view and textbox there. I think I should change the name to `clickingAnswer_`', 'comment_created': datetime.datetime(2020, 9, 10, 11, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 486293019, 'comment_body': 'Sounds good!', 'comment_created': datetime.datetime(2020, 9, 10, 12, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 486756937, 'comment_body': 'Right! That would make the styles more useable. ', 'comment_created': datetime.datetime(2020, 9, 11, 3, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 487055452, 'comment_body': ""Yes right it seems a bit confusing. More or less it calls other static members. Encapsulating all the calls in the method doesn't seem right to me. So I removed them."", 'comment_created': datetime.datetime(2020, 9, 11, 13, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 526265904, 'comment_body': ""I'm wondering if uses of this could be replaced with the new `FormSaveViewModel#createAnswerFile` (which was added on top of the work you did with `QuestionMediaManager` 😁)? I think instead of `FileWidgetUtils.getFile` it could be:\r\n\r\n```java\r\nFile sourceFile = new File(getSourcePathFromUri(context, fileUri, MediaStore.MediaColumns.DATA));\r\nsetWidgetData(formSaveViewModel.createAnswerFile(sourceFile));\r\n```\r\n\r\nIn the widget itself you can use `QuestionMediaManager#getAnswerFile` (like in `AudioWidget`). \r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2020, 11, 18, 17, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 526401561, 'comment_body': ""Yes I was also thinking to get rid of `FileWidgetUtils.getFile()` so that everything's consistent. "", 'comment_created': datetime.datetime(2020, 11, 18, 20, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': '816609e13848edfd050e6133867312be5e0dd203', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60745560ce5d277f5958ef97ec56dd63eeeb4fd3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b5e84e2b70411e3d6526700d9a90503d13ef4c1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b0b5987893ce7ea6c5cdfee569dc45150545b26', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40aefa6b02a71956f9cd55f1271638de69c61f5a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16eeeeba55f25e6ea59beb6703da641f102a00e3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81dcb63e6dd44b5db234d7d4eb9b7d52abc24d5f', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd697c61db3aef2cca29e3c4b809faedb2df3d174', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a807d1d06b7e932a4b68dab32c0ed2caaf047c02', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee757daa58d7177998b4a2ab5f1766dcc6c8fe7', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2b696f1d0b1930cad715916226a2aa9de6a3041', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e8a713b6e7f047d4bdbe7ba40d74d582345b80a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6d975e719deb877e69949071607da5e36c5eca5', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30cc8b4d63ecee5025500293ae703fccae13bf7', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b17ff7f70d53479015888467f64b6936325e55', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57758a01d5ac3882d44a6b9554e23acec1a5c256', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5324897f3b84a0169b0ea239d3cd759c837575e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcbad3fc889337e982c0fdf4bf6aa4e27f77af75', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c554f2bd1db4f94a286933a64877f834c4d1d87a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec7279f86eacfa28007745172e356b33c7d03c33', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc681b375b6d3c1784d4719ee1330dc7dc76d339', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94a027659ea493fe601524588862e20894e52afa', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '926a67e8e14e7c6f4b83e82e66181662d14245ed', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e49b0f2b5ee9d4a48f88ee6946b71c08942b5f1', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1c1696ab95fefd0ea2ee34306f271c2ad373fbf', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b339f453623631c21d092a924aacb5549ffd5631', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87bcdb56d82c77c4987c4bda0db0e5c4b38a51ef', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0628a06913f3ff3d600efb0359d3f4f3c463c79', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd23ae1140a4b2221ae328e7f2e9d114812a03ed8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
458771505,Use view model for Number Picker Dialog,"Closes #4030. In continuation of #3969. Blocked by #3969.

I used `ViewModel` to observe any changes in the number picker value and update the answer shown in the answer text view in `RangePickerIntegerWidget` and `RangePickerDecimalWidget`.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
This refactors the RangeWidgets. I renamed `RangeWidgetUtils` to `RangeWidgetDataRequester`. I used viewmodel to update range picker widget values in the FormEntryActivity.  This PR refactors RangePickerWidget and RangeWidgets.

#### Do we need any specific form for testing your changes? If so, please attach one.
Any form having `RangePickerIntegerWidget` and `RangePickerDecimalWidget`. 

[Range Picker Test .xml.txt](https://github.com/getodk/collect/files/4998012/Range.Picker.Test.xml.txt)

#### Does this change require updates to documentation? If so, please file an issue [here]( https://github.com/getodk/docs/issues/new) and include the link below.
No

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/getodk/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/getodk/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",False,3995,https://api.github.com/repos/getodk/collect/pulls/3995,https://github.com/getodk/collect/pull/3995,closed,868,583,22,23,8,10,0,0,[],2020-07-29 23:48:05+00:00,2020-11-03 10:14:02+00:00,8331957.0,"96 days, 10:25:57","[{'comment_id': 513323715, 'comment_body': ""Instead of passing this as an argument to the dialog and then to the view model, couldn't the data requester set the value on the view model?"", 'comment_created': datetime.datetime(2020, 10, 28, 10, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 513325779, 'comment_body': ""Why does this value get observed to then just get passed to a listener? Couldn't wherever the listener is trying to get the value (the widget I think) listen? Maybe the data requester should have a method that lets the widget listen for changes and then the data requester can handle the live data subscription (look at `AudioPlayer#onPositionChanged` and its implementation as an example)."", 'comment_created': datetime.datetime(2020, 10, 28, 10, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 513327119, 'comment_body': ""As another thought that would potentially mean you wouldn't need the `WaitingForDataRegistry` for any of this (as the FormEntryActivity would not have to be involved)"", 'comment_created': datetime.datetime(2020, 10, 28, 10, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 513328655, 'comment_body': ""All these static helpers feel like they don't fit here? I think they should just move back to a `...Utils` class. "", 'comment_created': datetime.datetime(2020, 10, 28, 10, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 513330457, 'comment_body': ""I think this has all been a little mixed up. To me, it feels like the `RangeWidgetDataRequester` should be an interface with the `requestRangePickerValue` method on it and there should be an implementation that uses the ViewModel/DialogFragment. In my head this should work like the `GeoDataRequester`. Does that make sense?\r\n\r\nHappy to chat about this more on Slack or somewhere if that's helpful."", 'comment_created': datetime.datetime(2020, 10, 28, 10, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 513392478, 'comment_body': ""Yes correct. I was just confused that if I do so I will be initializing the viewmodel in `RangeWidgetDataRequester` class and then I will have to use the activity's (`FormEntryActivity`) as the owner of the viewmodel. Currently, the viewmodel lives until the dialog is shown and if the user opens up the `NumberPicker` again, a new viewmodel is instantiated and we don't have to worry about the viewmodel which was atttached to the `FormEntryActivity` previously.\r\n\r\nI think if I use the activity as the owner, then I will be having the viewmodel as long as I am using the widgets of a particular form?"", 'comment_created': datetime.datetime(2020, 10, 28, 12, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 513437617, 'comment_body': ""Right I see. I think it'd be nice to get to a point where the ViewModel is the sole method of communication between the widget and the dialog but I it would also involve making the ViewModel work for multiple range widgets (like in a field list). For the moment then lets just go with the args being passed to the dialog and then then the dialog calling the FormEntryActivity via a listener."", 'comment_created': datetime.datetime(2020, 10, 28, 13, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 513438957, 'comment_body': ""Based on our discussion in the other comment we  don't want the data requester to use the viewmodel but it should still be reworked as an interface (and have the static methods split out). Also the `WaitingForDataRegistry` and `Content` could be passed in at the constructor level rather than in this method."", 'comment_created': datetime.datetime(2020, 10, 28, 13, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 513476412, 'comment_body': 'Oh okay yes I like he idea of having the viewmodel just the sole method of communication', 'comment_created': datetime.datetime(2020, 10, 28, 14, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 514112608, 'comment_body': 'While I was working refactoring the Date and Time widgets, I came across the same problem when using the viewmodel. @grzesiek2010 guided and helped me in setting them up as I have done in this PR. However, he also liked the idea of excluding the activity from the conversation between viewmodel and widget. He told that later we will be using fragments to implement widgets, then it will be easy to use viewmodel without involving the activity. ', 'comment_created': datetime.datetime(2020, 10, 29, 9, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': 'c78c8fb87caf7890a49c23399b2e1eb341382029', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a792bd651390e6b4398a0549b5f72261689d46', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111887229394705d7a2cde76c3413e041f291a49', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc713e26725a49af54c1c70040f7fa1b12f0d06', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696222b468b3bd13942245a5819100696e68fcbe', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df84dc17e887e6cd8f6126e0112035bfdf067c47', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea1042fe369e90089e080c6079f42e9d6339e73', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8773d9cfd6c8e0e9312b62632c47b45d376e0ac8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1241b3fb9c8b5727216fa6697f65f1d249fe031', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391f97cdc0879ebefb6a8cbae5f4f2a541f4f530', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa02a36a898280faacc8ef0d4061986d846952d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59973836fd337d40f2c6cd55294e1dac6f3c5a60', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a32c188fca3c2548b23458519387234cb3296d57', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d7c83c665428d2695864cf081e6d64bdc57a3b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4984a201e09a34cae476e9fb1b969dffc7b2cae5', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b705e009a648098249f87e47cd00ad4acbb389d', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddbe560355e3cc428a542ed423f028fb0698a6ab', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4f095fae7e81bd99733faec8b30b15c97a4564e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ed056ac4fd9155306c3d35ec52c9324851c9148', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5fbe279dd8c1e996928380fbf39c9ee33d7b647', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd3ec8ebfba7992acca81547c15f8785ac43a15', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '784a7c56f0f50895e1f8f1832ca36ca0a49ccafe', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c57575bcea67ec92fbb03c49e3e7d0ad82264674', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13
433713219,Reworking GeoShape and GeoTraceWidget,"Closes #3979 
This PR is the work on GeoShape and GeoTrace Widget.

#### How does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?
I pulled the GeoWidgets out of `BaseGeoWidget` class and hence removed the `BaseGeoWidget` and `BaseGeoWidgetTest`. 

I added `ActivityGeoDataRequester` that implements `GeoDataRequester` which requests geo data whenever geo button is clicked.

For testing purposes, I added `GeoWidgetHelpers` that checks whether the data passed to the intent on button click is correct or not. 

It adds an extra functionality of allowing the user to view any of the widgets (with maps/placement maps appearance) data in readOnly mode (when data is available). On master, buttons are hidden for the readOnly mode, whether or not data is available.
 
#### Do we need any specific form for testing your changes? If so, please attach one.
All Widgets form, or any form with the geo widgets.

#### Before submitting this PR, please make sure you have:
- [x] run `./gradlew checkAll` and confirmed all checks still pass OR confirm CircleCI build passes and run `./gradlew connectedDebugAndroidTest` locally.
- [x] verified that any code or assets from external sources are properly credited in comments and/or in the [about file](https://github.com/opendatakit/collect/blob/master/collect_app/src/main/assets/open_source_licenses.html).
- [x] verified that any new UI elements use theme colors. [UI Components Style guidelines](https://github.com/opendatakit/collect/blob/master/CONTRIBUTING.md#ui-components-style-guidelines)",True,3922,https://api.github.com/repos/getodk/collect/pulls/3922,https://github.com/getodk/collect/pull/3922,closed,1326,1013,53,35,20,19,1,0,[{'name': 'behavior verified'}],2020-06-12 14:27:59+00:00,2020-10-16 16:56:00+00:00,10895281.0,"126 days, 2:28:01","[{'comment_id': 459436911, 'comment_body': 'For all the four GeoWidgets, I call static method `onButtonClick`, when `geoButton` is clicked. In the corresponding test, I was thinking just verifying the method call, and checking different cases later on in unit tests for `GeoWidgetUtils`. ', 'comment_created': datetime.datetime(2020, 7, 23, 13, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 459445775, 'comment_body': ""I think given you want to test the shared behaviour it's good to try and think hard about what the responsibility of `onButtonClick` really is here. For me what it does is ask for geo data for the widget. It feels to me like there could be an interface called something like `GeoDataRequester` or `GeoDataFetcher` with methods like `requestPoint`, `requestShape` etc:\r\n\r\n```\r\nbinding.simpleButton.setOnClickListener(v -> {\r\n    geoDataRequester.requestPoint(promp);\r\n});\r\n```\r\n\r\n In each of the different geo widgets you can have a test that the `requestPoint` or whatever is called and then those methods can be tested for some implementation of the interface (`ActivityGeoDataRequester`).\r\n\r\nJust to detail my questions here the though process I'm going through is:\r\n\r\n1. I have shared code used in multiple places does it make sense to just test the behaviour in each place?\r\n2. If not, what is the shared code responsible for? Is there some kind of interface/object/entity that could be responsible for that?"", 'comment_created': datetime.datetime(2020, 7, 23, 13, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 470038465, 'comment_body': ""Won't this already be taken care of by the call on `updateUi`? I think you might be able to remove it."", 'comment_created': datetime.datetime(2020, 8, 13, 15, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 470045428, 'comment_body': ""Why keep this static method? It's not called directly so can be removed (and the contents moved to `onButtonClicked`)."", 'comment_created': datetime.datetime(2020, 8, 13, 15, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 470046358, 'comment_body': 'Move contents to caller.', 'comment_created': datetime.datetime(2020, 8, 13, 15, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 470047168, 'comment_body': ""What's the advantage of putting this here rather than directly in `GeoPointWidget`? I don't see how it's implementing shared behavior."", 'comment_created': datetime.datetime(2020, 8, 13, 15, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 470048364, 'comment_body': ""This is short enough that I don't think there's huge advantage to it being shared. Each poly widget could build its own bundle."", 'comment_created': datetime.datetime(2020, 8, 13, 15, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 470049939, 'comment_body': 'In general, the `Utils` suffix is a red flag because it implies ""I didn\'t really know where to put this stuff so I put it here."" It would be good to aim for clean abstractions that have meaningful names and specific responsibilities (e.g. `GeoDataRequester` as @seadowg suggested at https://github.com/getodk/collect/pull/3922#discussion_r459445775).', 'comment_created': datetime.datetime(2020, 8, 13, 15, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lognaturel', 'type': 'User'}, {'comment_id': 478458301, 'comment_body': ""I think this interface should really be called the `GeoDataRequester` as that's what the widgets use it for. They do that on a button click but that's a detail of the widget.  It should also hide anything to do with the geo activity classes from the widget. The widget doesn't care how the geo data is acquired right? It just wants to get it in `setBinaryData` somehow.\r\n\r\n That being the case it probably makes sense to have different methods like `requestGeoPoint`, `requestGeoShape` etc and then have the implementation control what activity it launches in each case. The implementation should also take responsibility for building the `Bundle` and the `requestCode`. \r\n\r\nGiven all that I think the implementation should probably be called something like `ActivityGeoDataRequester` as it's an activity based implementation of the request geo data."", 'comment_created': datetime.datetime(2020, 8, 27, 14, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 478458848, 'comment_body': '`permissionUtils` could probably be a field of this class and come in at the constructor rather than be passed in as a method argument.', 'comment_created': datetime.datetime(2020, 8, 27, 14, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 478584783, 'comment_body': 'I renamed `GeoDataRequester` class back to `GeoWidgetUtils`, as I thought it also has methods to convert answer string to geo data etc. I renamed the interface as `ActivirtyGeoDatarequester`, which has methods `requesGeoPoint`, `requestGeoShape`, `requestGeoTrace` and `requestGeoIntent`. Also, I am testing the interface separately in the `GeoWidgetUtilsTest`. ', 'comment_created': datetime.datetime(2020, 8, 27, 17, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 479402323, 'comment_body': ""Might be worth reading my comment again as I don't think that's what I was getting at. I don't think the `GeoWidgetUtils` should implement the `GeoDataRequester` interface (it should just be a non construtable utils class with helper methods) and I don't think the interface should be named `ActivityGeoDataRequester`, that was a suggested name for the implementation. Also, if it wasn't clear I was thinking you would get rid of `requestGeoIntent` and just have the three methods `requesGeoPoint`, `requestGeoShape`, `requestGeoTrace` which would all be `void`.\r\n\r\nVery happy to discuss more if it's helpful!"", 'comment_created': datetime.datetime(2020, 8, 28, 16, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 481153680, 'comment_body': ""I think the `static` helper methods should stay in the `GeoWidgetUtils` class. There's no reason as far as I can see for them to live in `ActivityGeoDataRequester` and having them there creates a dependency between the widgets and the implementation of `GeoDataRequester` which isn't ideal. "", 'comment_created': datetime.datetime(2020, 9, 1, 13, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 481916969, 'comment_body': 'This should still implement the interface so that the widget depends on an abstraction rather than an implementation.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 481918209, 'comment_body': ""I don't think we should have this constructor. The `WidgetFactory` can construct a `PermissionUtils` object to pass in."", 'comment_created': datetime.datetime(2020, 9, 2, 9, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 481937045, 'comment_body': ""I think all the widgets are missing tests to check that `setBinaryData` actually updates the widget answer (`getAnswer`). It looks like right now the wigets are broken and don't save answers (just display them)."", 'comment_created': datetime.datetime(2020, 9, 2, 9, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 481939205, 'comment_body': ""These three tests should be broken into multiple tests for the different calls to the methods under tests (for readOnly mode and different appearances for example). Otherwise, it's hard to read the test and if one fails it'll be harder to see what exactly has failed."", 'comment_created': datetime.datetime(2020, 9, 2, 9, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seadowg', 'type': 'User'}, {'comment_id': 481948337, 'comment_body': 'I misinterpreted the last comment. The interface would be good here.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}, {'comment_id': 481948693, 'comment_body': 'I thought that the answers must be getting saved by calling `widgetValueChanged`', 'comment_created': datetime.datetime(2020, 9, 2, 9, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'SaumiaSinghal', 'type': 'User'}]","[{'commit_sha': '00dc337c20941a8ce9d0e85d3065b74a6d0b13f0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e32fa29e652dde4b6d9300ce6b67214dcdd272e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c453021591c47382e9119453f60ee8e57b7af897', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b0cc6a650a3db44910751520c272ab96dc1a9a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f4039e339267c6f0c86989f7039014201c21a0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77ba4338636cd686833223de431671690a78c625', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a492ec858f9ce30ea993ec2fc97e917c6c910079', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e1b7aa29992f898287a96d9c2899967ab7b16c', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf543a5eb4ca92cd7e317adb06d6a7ec01ce61b6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03eecc699bbec954f0d1c8ecaa330db04fd9da01', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c9d33434cfc3677df8ab903bc295b2348881d19', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293af151bf4d743c5674943e5d2cf07f080700b4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b5489e9ba080b2b1446fa6cd86b648ad6df3b4e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d2e4d11b58ac829a01d5eee0535bbd01e42aad', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fc2338ba3b5521389f5e4820717dc558ac69fe4', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a2d3ef86f46ee8fa9cdc3e813a68204b1d4c14', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05cae55f854e13f099b57fac8d2466680ca52d9e', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88070633e48bbe760b66778efce31b0a756287e2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c9549e9886d1c12769663e6d073d7eb34a4e9a', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45742657e909a9847aa6b1666a438885e23b55b', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c5f4aa5e9f6ff9c3b9cfd3c0fec5d798a9e1fa9', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82206b1e60ad9da27c55f92b47f654c066b6e212', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fa58d048f69530b3c30498f2cb5ede09c6541f6', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c542c7d1fe3d71faf91bf9254f92f5dfea6dd3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b53dda9d1c772971527208d7b2fc9c78314bf2', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc3b41abb951bd17c016c903f6cc4a4cd7a8fd3', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14e2f1d72d1d20965430b3f57ef92ebe5e203d48', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e433ab5d6f1d453cb663e8f57f28effa9c2102e8', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb19b5073e05ab17df37db0dc82cf0269cdeaeca', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da6f5e74bf9ae1b98a9bc77c7865d16f0d65da0', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '797bb40a3a3d82bdf76e763abf5b05bbceba4526', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fd88bfa46df285050d6f23ae9d2e8d60d9bebf', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d60c0b1ac99a23f0b3f85a7bc689d9924fc18fd', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4497ee076600043fbd8c55cefe3b3dff1845edf', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3593c61e10f5eab78375fd6f770a5ba21f47c020', 'committer_username': 'SaumiaSinghal', 'committer_name': 'Saumia Singhal', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 23, 12, 12, 30, tzinfo=datetime.timezone.utc)}]",Saumia Singhal,35730054,,User,,21,,41,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40213809,collect,getodk/collect,Java,1359,705,61,181,15500,283,44,10,"[{'id': 589974850, 'number': 4470, 'closed': datetime.datetime(2021, 4, 15, 23, 33, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 10, 18, 5, 56, tzinfo=datetime.timezone.utc), 'time_taken': 3130075.0, 'time_delta': '36 days, 5:27:55', 'additions': 102, 'deletions': 41, 'state': 'closed'}, {'id': 516753154, 'number': 4211, 'closed': datetime.datetime(2020, 11, 12, 9, 33, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 6, 13, 46, 33, tzinfo=datetime.timezone.utc), 'time_taken': 503229.0, 'time_delta': '5 days, 19:47:09', 'additions': 354, 'deletions': 139, 'state': 'closed'}, {'id': 503742158, 'number': 4169, 'closed': datetime.datetime(2020, 11, 12, 9, 37, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 15, 1, 24, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2448800.0, 'time_delta': '28 days, 8:13:20', 'additions': 3, 'deletions': 17, 'state': 'closed'}, {'id': 500529778, 'number': 4166, 'closed': datetime.datetime(2020, 11, 6, 9, 16, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 9, 11, 34, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2410888.0, 'time_delta': '27 days, 21:41:28', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 500500651, 'number': 4164, 'closed': datetime.datetime(2020, 10, 12, 17, 59, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 9, 10, 36, 44, tzinfo=datetime.timezone.utc), 'time_taken': 285759.0, 'time_delta': '3 days, 7:22:39', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 473174108, 'number': 4042, 'closed': datetime.datetime(2020, 10, 1, 7, 58, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 12, 36, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3180072.0, 'time_delta': '36 days, 19:21:12', 'additions': 302, 'deletions': 164, 'state': 'closed'}, {'id': 470816254, 'number': 4033, 'closed': datetime.datetime(2021, 3, 29, 13, 38, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 10, 27, 55, tzinfo=datetime.timezone.utc), 'time_taken': 19105821.0, 'time_delta': '221 days, 3:10:21', 'additions': 346, 'deletions': 175, 'state': 'closed'}, {'id': 470447095, 'number': 4032, 'closed': datetime.datetime(2020, 9, 30, 15, 45, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 20, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 3610708.0, 'time_delta': '41 days, 18:58:28', 'additions': 439, 'deletions': 196, 'state': 'closed'}, {'id': 466372363, 'number': 4025, 'closed': datetime.datetime(2020, 10, 6, 7, 0, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 21, 48, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4785157.0, 'time_delta': '55 days, 9:12:37', 'additions': 36, 'deletions': 56, 'state': 'closed'}, {'id': 464071853, 'number': 4015, 'closed': datetime.datetime(2021, 1, 4, 16, 38, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 14, 41, 10, tzinfo=datetime.timezone.utc), 'time_taken': 13053445.0, 'time_delta': '151 days, 1:57:25', 'additions': 950, 'deletions': 674, 'state': 'closed'}, {'id': 462572285, 'number': 4006, 'closed': datetime.datetime(2020, 8, 28, 22, 1, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 7, 5, 22, tzinfo=datetime.timezone.utc), 'time_taken': 2127340.0, 'time_delta': '24 days, 14:55:40', 'additions': 777, 'deletions': 344, 'state': 'closed'}, {'id': 458771505, 'number': 3995, 'closed': datetime.datetime(2020, 11, 3, 10, 14, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 23, 48, 5, tzinfo=datetime.timezone.utc), 'time_taken': 8331957.0, 'time_delta': '96 days, 10:25:57', 'additions': 868, 'deletions': 583, 'state': 'closed'}, {'id': 458517255, 'number': 3993, 'closed': datetime.datetime(2020, 7, 30, 4, 17, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 15, 33, 4, tzinfo=datetime.timezone.utc), 'time_taken': 45881.0, 'time_delta': '12:44:41', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 453605559, 'number': 3975, 'closed': datetime.datetime(2020, 11, 12, 10, 17, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 16, 15, 14, tzinfo=datetime.timezone.utc), 'time_taken': 9914512.0, 'time_delta': '114 days, 18:01:52', 'additions': 2678, 'deletions': 1396, 'state': 'closed'}, {'id': 448737772, 'number': 3969, 'closed': datetime.datetime(2020, 10, 9, 18, 6, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 8, 40, 56, tzinfo=datetime.timezone.utc), 'time_taken': 7550760.0, 'time_delta': '87 days, 9:26:00', 'additions': 1611, 'deletions': 544, 'state': 'closed'}, {'id': 447581768, 'number': 3967, 'closed': datetime.datetime(2020, 7, 13, 14, 20, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 18, 24, 43, tzinfo=datetime.timezone.utc), 'time_taken': 244520.0, 'time_delta': '2 days, 19:55:20', 'additions': 461, 'deletions': 779, 'state': 'closed'}, {'id': 443517047, 'number': 3955, 'closed': datetime.datetime(2020, 7, 15, 9, 16, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 13, 28, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1108099.0, 'time_delta': '12 days, 19:48:19', 'additions': 710, 'deletions': 540, 'state': 'closed'}, {'id': 438626202, 'number': 3942, 'closed': datetime.datetime(2020, 6, 23, 15, 36, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 14, 53, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2583.0, 'time_delta': '0:43:03', 'additions': 225, 'deletions': 82, 'state': 'closed'}, {'id': 438617892, 'number': 3941, 'closed': datetime.datetime(2020, 6, 23, 14, 49, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 14, 40, 26, tzinfo=datetime.timezone.utc), 'time_taken': 567.0, 'time_delta': '0:09:27', 'additions': 0, 'deletions': 8, 'state': 'closed'}, {'id': 438298789, 'number': 3937, 'closed': datetime.datetime(2020, 11, 6, 11, 27, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 3, 51, 21, tzinfo=datetime.timezone.utc), 'time_taken': 11777753.0, 'time_delta': '136 days, 7:35:53', 'additions': 322, 'deletions': 131, 'state': 'closed'}, {'id': 434203173, 'number': 3923, 'closed': datetime.datetime(2020, 7, 24, 9, 35, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 21, 14, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3414029.0, 'time_delta': '39 days, 12:20:29', 'additions': 796, 'deletions': 679, 'state': 'closed'}, {'id': 433713219, 'number': 3922, 'closed': datetime.datetime(2020, 10, 16, 16, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 14, 27, 59, tzinfo=datetime.timezone.utc), 'time_taken': 10895281.0, 'time_delta': '126 days, 2:28:01', 'additions': 1326, 'deletions': 1013, 'state': 'closed'}, {'id': 433621671, 'number': 3921, 'closed': datetime.datetime(2020, 6, 12, 11, 26, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 11, 18, 2, tzinfo=datetime.timezone.utc), 'time_taken': 489.0, 'time_delta': '0:08:09', 'additions': 1107, 'deletions': 543, 'state': 'closed'}, {'id': 426945018, 'number': 3896, 'closed': datetime.datetime(2020, 6, 3, 5, 34, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 3, 49, 32, tzinfo=datetime.timezone.utc), 'time_taken': 6284.0, 'time_delta': '1:44:44', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 424126262, 'number': 3877, 'closed': datetime.datetime(2020, 7, 23, 18, 28, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 21, 35, 39, tzinfo=datetime.timezone.utc), 'time_taken': 4913580.0, 'time_delta': '56 days, 20:53:00', 'additions': 1293, 'deletions': 523, 'state': 'closed'}, {'id': 421833726, 'number': 3859, 'closed': datetime.datetime(2020, 6, 8, 22, 16, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 10, 8, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1512478.0, 'time_delta': '17 days, 12:07:58', 'additions': 21, 'deletions': 8, 'state': 'closed'}, {'id': 421697602, 'number': 3858, 'closed': datetime.datetime(2020, 6, 2, 21, 54, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 3, 43, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1015830.0, 'time_delta': '11 days, 18:10:30', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 421185124, 'number': 3851, 'closed': datetime.datetime(2020, 6, 4, 14, 18, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 6, 56, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1236163.0, 'time_delta': '14 days, 7:22:43', 'additions': 138, 'deletions': 87, 'state': 'closed'}, {'id': 419631186, 'number': 3843, 'closed': datetime.datetime(2020, 7, 15, 21, 22, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 17, 10, 27, tzinfo=datetime.timezone.utc), 'time_taken': 5026311.0, 'time_delta': '58 days, 4:11:51', 'additions': 75, 'deletions': 18, 'state': 'closed'}, {'id': 419122086, 'number': 3839, 'closed': datetime.datetime(2020, 7, 21, 10, 6, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 14, 34, 26, tzinfo=datetime.timezone.utc), 'time_taken': 5599917.0, 'time_delta': '64 days, 19:31:57', 'additions': 219, 'deletions': 78, 'state': 'closed'}, {'id': 417948554, 'number': 3831, 'closed': datetime.datetime(2020, 6, 23, 8, 0, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 12, 0, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3441614.0, 'time_delta': '39 days, 20:00:14', 'additions': 225, 'deletions': 71, 'state': 'closed'}, {'id': 417029579, 'number': 3824, 'closed': datetime.datetime(2020, 6, 2, 21, 54, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 23, 36, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1808271.0, 'time_delta': '20 days, 22:17:51', 'additions': 227, 'deletions': 65, 'state': 'closed'}, {'id': 406098063, 'number': 3792, 'closed': datetime.datetime(2020, 6, 8, 10, 8, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 14, 26, 43, tzinfo=datetime.timezone.utc), 'time_taken': 4218101.0, 'time_delta': '48 days, 19:41:41', 'additions': 348, 'deletions': 94, 'state': 'closed'}, {'id': 405726720, 'number': 3786, 'closed': datetime.datetime(2020, 6, 2, 21, 52, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 19, 20, 13, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3807540.0, 'time_delta': '44 days, 1:39:00', 'additions': 23, 'deletions': 11, 'state': 'closed'}, {'id': 405650674, 'number': 3782, 'closed': datetime.datetime(2020, 6, 2, 20, 57, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 19, 11, 45, 41, tzinfo=datetime.timezone.utc), 'time_taken': 3834735.0, 'time_delta': '44 days, 9:12:15', 'additions': 274, 'deletions': 127, 'state': 'closed'}, {'id': 397871339, 'number': 3760, 'closed': datetime.datetime(2020, 4, 23, 8, 44, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 0, 18, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1758356.0, 'time_delta': '20 days, 8:25:56', 'additions': 7, 'deletions': 12, 'state': 'closed'}, {'id': 393231323, 'number': 3742, 'closed': datetime.datetime(2020, 4, 6, 8, 40, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 20, 10, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1081797.0, 'time_delta': '12 days, 12:29:57', 'additions': 16, 'deletions': 3, 'state': 'closed'}, {'id': 390010320, 'number': 3725, 'closed': datetime.datetime(2020, 3, 23, 9, 0, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 18, 38, 58, tzinfo=datetime.timezone.utc), 'time_taken': 483665.0, 'time_delta': '5 days, 14:21:05', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 389970316, 'number': 3723, 'closed': datetime.datetime(2020, 3, 17, 18, 32, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 17, 19, 4, tzinfo=datetime.timezone.utc), 'time_taken': 4425.0, 'time_delta': '1:13:45', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 389878045, 'number': 3722, 'closed': datetime.datetime(2020, 3, 17, 17, 12, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 14, 40, 31, tzinfo=datetime.timezone.utc), 'time_taken': 9100.0, 'time_delta': '2:31:40', 'additions': 145, 'deletions': 110, 'state': 'closed'}, {'id': 384946530, 'number': 3691, 'closed': datetime.datetime(2020, 5, 14, 23, 23, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 17, 49, 29, tzinfo=datetime.timezone.utc), 'time_taken': 5981629.0, 'time_delta': '69 days, 5:33:49', 'additions': 323, 'deletions': 212, 'state': 'closed'}, {'id': 381965980, 'number': 3662, 'closed': datetime.datetime(2020, 3, 2, 10, 38, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 0, 17, 22, tzinfo=datetime.timezone.utc), 'time_taken': 123669.0, 'time_delta': '1 day, 10:21:09', 'additions': 111, 'deletions': 75, 'state': 'closed'}, {'id': 372891181, 'number': 3630, 'closed': datetime.datetime(2020, 2, 11, 15, 59, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 0, 5, 14, tzinfo=datetime.timezone.utc), 'time_taken': 143667.0, 'time_delta': '1 day, 15:54:27', 'additions': 70, 'deletions': 54, 'state': 'closed'}, {'id': 371709277, 'number': 3625, 'closed': datetime.datetime(2020, 2, 26, 10, 42, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 4, 59, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1748557.0, 'time_delta': '20 days, 5:42:37', 'additions': 119, 'deletions': 1371, 'state': 'closed'}, {'id': 367509091, 'number': 3611, 'closed': datetime.datetime(2020, 2, 5, 18, 45, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 14, 4, 56, tzinfo=datetime.timezone.utc), 'time_taken': 794450.0, 'time_delta': '9 days, 4:40:50', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 367288673, 'number': 3609, 'closed': datetime.datetime(2020, 1, 28, 14, 32, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 2, 2, 36, tzinfo=datetime.timezone.utc), 'time_taken': 131369.0, 'time_delta': '1 day, 12:29:29', 'additions': 66, 'deletions': 60, 'state': 'closed'}, {'id': 363253406, 'number': 3593, 'closed': datetime.datetime(2020, 1, 20, 14, 32, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 17, 27, 32, tzinfo=datetime.timezone.utc), 'time_taken': 421489.0, 'time_delta': '4 days, 21:04:49', 'additions': 22, 'deletions': 9, 'state': 'closed'}, {'id': 362712522, 'number': 3590, 'closed': datetime.datetime(2020, 1, 17, 2, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 14, 16, 0, 51, tzinfo=datetime.timezone.utc), 'time_taken': 209169.0, 'time_delta': '2 days, 10:06:09', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 361729917, 'number': 3585, 'closed': datetime.datetime(2020, 1, 14, 16, 5, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 11, 13, 28, 25, tzinfo=datetime.timezone.utc), 'time_taken': 268625.0, 'time_delta': '3 days, 2:37:05', 'additions': 110, 'deletions': 11, 'state': 'closed'}, {'id': 361683766, 'number': 3584, 'closed': datetime.datetime(2020, 1, 13, 13, 13, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 11, 2, 12, 55, tzinfo=datetime.timezone.utc), 'time_taken': 212443.0, 'time_delta': '2 days, 11:00:43', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 359244321, 'number': 3573, 'closed': datetime.datetime(2020, 1, 14, 9, 47, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 4, 20, 19, 40, tzinfo=datetime.timezone.utc), 'time_taken': 826091.0, 'time_delta': '9 days, 13:28:11', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 358837477, 'number': 3569, 'closed': datetime.datetime(2020, 1, 8, 12, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 3, 0, 20, 20, tzinfo=datetime.timezone.utc), 'time_taken': 476137.0, 'time_delta': '5 days, 12:15:37', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 358079138, 'number': 3568, 'closed': datetime.datetime(2020, 2, 10, 0, 1, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 30, 11, 3, 50, tzinfo=datetime.timezone.utc), 'time_taken': 3589083.0, 'time_delta': '41 days, 12:58:03', 'additions': 229, 'deletions': 45, 'state': 'closed'}, {'id': 209573807, 'number': 2493, 'closed': datetime.datetime(2019, 1, 21, 19, 31, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 8, 20, 16, 19, 3, tzinfo=datetime.timezone.utc), 'time_taken': 13317147.0, 'time_delta': '154 days, 3:12:27', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 209332693, 'number': 2489, 'closed': datetime.datetime(2018, 10, 26, 20, 22, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 8, 18, 22, 9, 29, tzinfo=datetime.timezone.utc), 'time_taken': 5955192.0, 'time_delta': '68 days, 22:13:12', 'additions': 33, 'deletions': 6, 'state': 'closed'}, {'id': 208449068, 'number': 2482, 'closed': datetime.datetime(2018, 9, 10, 18, 55, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 8, 15, 1, 0, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2310928.0, 'time_delta': '26 days, 17:55:28', 'additions': 245, 'deletions': 62, 'state': 'closed'}, {'id': 206208099, 'number': 2456, 'closed': datetime.datetime(2018, 8, 10, 14, 56, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 8, 4, 20, 14, 3, tzinfo=datetime.timezone.utc), 'time_taken': 499327.0, 'time_delta': '5 days, 18:42:07', 'additions': 13, 'deletions': 9, 'state': 'closed'}, {'id': 195689805, 'number': 2308, 'closed': datetime.datetime(2018, 8, 15, 10, 45, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 6, 19, 1, 27, 46, tzinfo=datetime.timezone.utc), 'time_taken': 4958284.0, 'time_delta': '57 days, 9:18:04', 'additions': 21, 'deletions': 14, 'state': 'closed'}, {'id': 194443642, 'number': 2292, 'closed': datetime.datetime(2018, 7, 16, 20, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 6, 13, 0, 41, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2920893.0, 'time_delta': '33 days, 19:21:33', 'additions': 15, 'deletions': 2, 'state': 'closed'}, {'id': 194213943, 'number': 2286, 'closed': datetime.datetime(2018, 6, 13, 21, 30, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 6, 12, 9, 11, 32, tzinfo=datetime.timezone.utc), 'time_taken': 130717.0, 'time_delta': '1 day, 12:18:37', 'additions': 58, 'deletions': 2, 'state': 'closed'}, {'id': 193701343, 'number': 2282, 'closed': datetime.datetime(2018, 6, 11, 17, 54, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 6, 8, 19, 18, 18, tzinfo=datetime.timezone.utc), 'time_taken': 254191.0, 'time_delta': '2 days, 22:36:31', 'additions': 40, 'deletions': 0, 'state': 'closed'}, {'id': 193132908, 'number': 2277, 'closed': datetime.datetime(2018, 6, 11, 18, 31, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 6, 6, 20, 35, 39, tzinfo=datetime.timezone.utc), 'time_taken': 424559.0, 'time_delta': '4 days, 21:55:59', 'additions': 16, 'deletions': 14, 'state': 'closed'}, {'id': 191061181, 'number': 2256, 'closed': datetime.datetime(2018, 6, 11, 19, 15, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 5, 29, 7, 57, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1163873.0, 'time_delta': '13 days, 11:17:53', 'additions': 430, 'deletions': 90, 'state': 'closed'}, {'id': 190760223, 'number': 2248, 'closed': datetime.datetime(2018, 6, 5, 21, 20, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 5, 26, 21, 40, 5, tzinfo=datetime.timezone.utc), 'time_taken': 862826.0, 'time_delta': '9 days, 23:40:26', 'additions': 26, 'deletions': 6, 'state': 'closed'}, {'id': 189765632, 'number': 2231, 'closed': datetime.datetime(2018, 5, 30, 23, 27, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 5, 22, 19, 19, 30, tzinfo=datetime.timezone.utc), 'time_taken': 706062.0, 'time_delta': '8 days, 4:07:42', 'additions': 4988, 'deletions': 2737, 'state': 'closed'}]"
