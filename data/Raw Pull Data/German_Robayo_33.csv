pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
430562374,feat(dhall-docs): multi-page docs generation,"This attempts to generate a really simple and non-flavoured HTML. There is no CSS or JS, just HTML. This doesn't include markdown parsing.

I researched about libraries to parse markdown and I found the two following:

* [`mmark`]
* [`cmark`](https://hackage.haskell.org/package/cmark)

Any of them let us extend its markdown parser, so new elements will need to be parsed after calling their functions. I haven't decided yet what library to use, but soon I'll do.

Also, I researched about libraries to generate HTML and I found:

* [`lucid`]
* [`blaze-html`](https://hackage.haskell.org/package/blaze-html)

I ended up using [`lucid`] because:

* (objectively) [`mmark`] outputs the `Html` data type provided by it.
* (subjectively) I feel more confortable using it vs `blaze-html`

[`mmark`]: https://hackage.haskell.org/package/mmark
[`lucid`]: https://hackage.haskell.org/package/lucid",True,1845,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1845,https://github.com/dhall-lang/dhall-haskell/pull/1845,closed,479,10,13,53,21,36,1,0,[{'name': 'dhall-docs'}],2020-06-08 01:26:35+00:00,2020-06-11 12:52:38+00:00,300363.0,"3 days, 11:26:03","[{'comment_id': 436428264, 'comment_body': 'This is a slightly shorter way to do the same thing:\r\n\r\n```suggestion\r\n            True <- not <$> Turtle.testdir path_\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 2, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 436602500, 'comment_body': ""I'm not very familiar with `turtle`, so I'd prefer if e.g. `fp` too was imported qualified."", 'comment_created': datetime.datetime(2020, 6, 8, 10, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 436603680, 'comment_body': 'Can you add a type annotation?', 'comment_created': datetime.datetime(2020, 6, 8, 10, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 436604542, 'comment_body': 'I find it hard to tell what this does from the description. Could you add examples, ideally as doctests?', 'comment_created': datetime.datetime(2020, 6, 8, 10, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 436606626, 'comment_body': ""The amount of `FilePath`s involved here is a bit confusing. If we do a lot of filepath munging, I'd suggest using [`path`](http://hackage.haskell.org/package/path) which generally makes this a bit clearer by adding a distinction between relative and absolute paths, and paths to directories and files."", 'comment_created': datetime.datetime(2020, 6, 8, 10, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 436609681, 'comment_body': ""There's also a companion package for IO operations: http://hackage.haskell.org/package/path-io"", 'comment_created': datetime.datetime(2020, 6, 8, 10, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 436743789, 'comment_body': ""Thanks for the suggestion. I'll take a look to it"", 'comment_created': datetime.datetime(2020, 6, 8, 14, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 436790104, 'comment_body': 'I like to use Bash variables as placeholders for user-supplied command-line values in documentation:\r\n\r\n```suggestion\r\ndhall-docs --input ""${YOUR-PACKAGE-FOLDER}""\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 15, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 436790327, 'comment_body': '```suggestion\r\ndhall-docs --input . --output ""${OTHER-DIR}""\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 15, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 436792212, 'comment_body': 'Perhaps there could be an option to embed these data files in the executable (for ease of distributing standalone executables, such as on our Releases page).  `pandoc` and `criterion` both have an an `-fembed-data-files` configuration flag to do something similar, so you can study either one of them to see how it is done', 'comment_created': datetime.datetime(2020, 6, 8, 15, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 436793556, 'comment_body': ""Is the text-only restriction necessary?  We could ignore files that don't parse as valid Dhall code"", 'comment_created': datetime.datetime(2020, 6, 8, 15, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 436797970, 'comment_body': 'I think a more reliable way to do this is to make the two paths absolute, delete the longest shared prefix between the two paths, and use the remainder to compute the relative path between the two', 'comment_created': datetime.datetime(2020, 6, 8, 15, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 436802932, 'comment_body': 'A more high-level way to do this is:\r\n\r\n```haskell\r\nlet toMap file = Map.singleton file [ Turtle.directory file ]\r\n\r\nlet filesGroupedByDir = Map.unionsWith (<>) (map toMap htmlFiles)\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 15, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 436819054, 'comment_body': 'Well I left a TODO comment here:\r\nhttps://github.com/dhall-lang/dhall-haskell/blob/470f9e359ec7443db7f1ff2955c7109d0655706d/dhall-docs/src/Dhall/Docs.hs#L92-L100\r\n\r\ndo you know of an util that checks if the file is binary? That gave me an error', 'comment_created': datetime.datetime(2020, 6, 8, 16, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 436850535, 'comment_body': ""@german1608: You can read the file as a `ByteString` using `Data.ByteString.readFile` and then use `Data.Text.decodeUtf8'`.  Then if decoding fails you know the file is binary"", 'comment_created': datetime.datetime(2020, 6, 8, 16, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 437549371, 'comment_body': '```suggestion\r\nBy default it will save the documentation of your package in `./docs`, but\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 16, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 437552113, 'comment_body': 'Haddocks support display text for links, which you can use like this:\r\n\r\n```suggestion\r\n    dhall <https://prelude.dhall-lang.org Prelude>\r\n```\r\n\r\nI also shortened the Prelude link', 'comment_created': datetime.datetime(2020, 6, 9, 16, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 437554996, 'comment_body': 'Minor suggestion:\r\n\r\n```suggestion\r\n    Control.Monad.forM_ dataDir $ \\(filename, contents) -> do\r\n        let finalPath = Turtle.encodeString $\r\n                outDir </> Turtle.decodeString filename\r\n\r\n        Data.ByteString.writeFile finalPath contents\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 16, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 437555039, 'comment_body': 'Did you mean to keep this comment?', 'comment_created': datetime.datetime(2020, 6, 9, 16, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 437735355, 'comment_body': 'This is an interesting discussion to have: is this the point where we should switch to using `.dhall` extensions?', 'comment_created': datetime.datetime(2020, 6, 9, 21, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Profpatsch', 'type': 'User'}, {'comment_id': 437738360, 'comment_body': 'I wonder what’s going on with all these `@font-face` sections? Is this usual boilerplate?', 'comment_created': datetime.datetime(2020, 6, 9, 21, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Profpatsch', 'type': 'User'}, {'comment_id': 437742858, 'comment_body': 'Usual boilerplate, `@font-face` is used to declare font-families in css', 'comment_created': datetime.datetime(2020, 6, 9, 21, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 437743770, 'comment_body': ""I thought of that but wouldn't that be a breaking change? Also I don't see any restriction on language specs that a valid dhall file must have a `.dhall` extension, and imposing it only for simplifyinig this tool can be a little overkill"", 'comment_created': datetime.datetime(2020, 6, 9, 21, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 437744052, 'comment_body': ""If you're curious, this was generated by google fonts when you select a set of fonts and download them. You get:\r\n\r\n* The font files\r\n* This css file with that boilerplate"", 'comment_created': datetime.datetime(2020, 6, 9, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 437842514, 'comment_body': 'This is not necessarily a breaking change.  The Prelude could keep around the old extension-free files but make them re-export the ones with a `.dhall` extension', 'comment_created': datetime.datetime(2020, 6, 10, 3, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 437961589, 'comment_body': 'I thought the argument docs were a bit redundant – this is an attempt to make them a bit clearer by removing some of the redundancy.\r\n\r\n```suggestion\r\n    :: Path Abs Dir             -- ^ Input package directory.\r\n                                --   Used to remove the prefix from all other dhall\r\n                                --   files in the package\r\n    -> Path Abs Dir             -- ^ Output directory\r\n    -> (Path Abs File, Header)  -- ^ (Input file path, Parsed header)\r\n    -> IO (Path Abs File)       -- ^ Output file path\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 8, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 437964901, 'comment_body': 'Can I suggest importing this qualified? When I came across it in the code below, I thought it was a local definition.', 'comment_created': datetime.datetime(2020, 6, 10, 8, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 437966829, 'comment_body': 'Could you add some haddocks here?', 'comment_created': datetime.datetime(2020, 6, 10, 8, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 438122779, 'comment_body': ""@Gabriel439 you're right.\r\n\r\nSo shall we file an issue or a post on discourse (maybe on the same thread we already have?) about their thoughts on this?"", 'comment_created': datetime.datetime(2020, 6, 10, 13, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 438367644, 'comment_body': 'With these bounds you could probably use the `directory` versions included with GHC 8.2.2 and GHC 8.4.4.\r\n\r\n```suggestion\r\n        path                 >= 0.6.0             ,\r\n        path-io              >= 1.4.2             ,\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 19, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 438370636, 'comment_body': '…but you might need some CPP around `addExtension` then…', 'comment_created': datetime.datetime(2020, 6, 10, 19, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 438377417, 'comment_body': ""I tried that, but there `path-0.7.0` provides a function `addExtension` that deprecates other functions with the same purpose on older versions.\r\n\r\nAlso I tried to downgrade `path-io`, but the previous version requires `path` < 0.7.\r\n\r\nThe simplest solution here is to downgrade as you suggest and use that deprecated (on path-0.7.0) function (I think it's `addFileExtension`). Are you ok with that?"", 'comment_created': datetime.datetime(2020, 6, 10, 20, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 438378612, 'comment_body': '> …but you might need some CPP around `addExtension` then…\r\n\r\nI can try that as well (my last message got sent with big delay)', 'comment_created': datetime.datetime(2020, 6, 10, 20, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 438385328, 'comment_body': 'I ended up adding `#if MIN_VERSION_path(0,7,0)` around it. I also deleted the path* nix packages deviations, hope it fixes the build', 'comment_created': datetime.datetime(2020, 6, 10, 20, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 438658699, 'comment_body': 'I think a `do`-expression would probably be more readable here.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 438660115, 'comment_body': ""Personally, I think the QuasiQuoters look a bit nicer. It doesn't really matter though. ;)\r\n\r\n```suggestion\r\n    >>> resolveRelativePath [absdir|/a/b/c/] [absdir|/a/b/c/d/e/]\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 9, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': '927d92d1afa827ef0f4add58b7517c09cca90375', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b7a26398f8d59467e5c3d9e7779902afb0a6dbb', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25aa9f190ed9eef04b09b03c34e029518492d525', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f27bfd3c6ad533602419d23d50e01d73fe5f08e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16344dc13530d2aa331131426dea6cd01eb938bb', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e68409cee6c0c134a517aaa635c196290f34d140', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32b8e8eaa89c0fc32d9181b0baab9291341f48c4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f899c680118eecf9785d649065a269fe957a97f5', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f42bbb566b4c57db32906325e4f0bc656423d40', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07112bb828bd310ba3e23a766fbc58e1ec927f3d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a1a765d2ce4515552c2752ec1f0259b1977f8f', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f980116ebd2f93bc62e095a119ec1119ef7551', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b3c04ccab64c982e6f3b845b7b58f994ae08cd', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637214c0f2160d8a08f53787e7e7a7a88475ee68', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b875c8cb337c472d3c7b1eeb7fe9e859219066e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769bbef3bab1cf3b75c162008a1b2920616fdad0', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba91e328baf18411e7d9b2e8ae176058194188ec', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4aade4c3935ab77418fdbfe42f3922a0c6723b8', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470f9e359ec7443db7f1ff2955c7109d0655706d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef377486c27744524e1c6dc1482c00b587be931', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '398ca633bc784041d64e3507809a7d43371879b2', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53ef67fbffd79922172a1831ca6026fa845c8b5d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2f2a579479a6dd3a37d0485bdf80d835ab140b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1115dc2f715be32b3a4f1c95803d8d119b353723', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6a560e3d0e0267c8c79886ea71bf2b11587096', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbb60a0b09e1ad8bcf5c25631ebd2dc1c8f75578', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73ccd9190fae285020372c01ba1cdecf7b4f3962', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3582a8abbb6115a0cfaf98c711848a09f4f8f587', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d96886fed4bc5ae408ec4b045adfc9f346e3ce', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2569df8430d11ee9e2971015f23b65dccc5071', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa754d9d634453471583c5dd06365ba1eb27f90', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7872e3a930bd4590d49060080a8addb7018d7c3', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe5712e1d941fe25fcde8d5e75fa4a7b7da4fb1', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b25d328eb421fd3632d0e52568197b34980d2b6', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc476f8a19256dbc7dacfa611ccde2ae91672f42', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311540d741774c6dc19834afa0f73481c93c2e60', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a089395dfda01fcdd4f1d148f0720abe0aa308', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2f24cda51094027776d06d4aac9a0331333576', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba19a029c1112b297fb4e94d859a66685b5e965e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '038f834e06a5a3a6409282e36a293e77d67d182a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e051e8677b97baee418052ca12de0a28fe7ac9c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01afbba1113bed8f7e39bfdf7c76f8d208eeae2e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa670246071b725992d1f0a488345b773464b5e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc18167a695d40d80f79d95f2a5d993d7f82b27f', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5262c6971b02a25fc83676144012185cbc5dc92', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd98d47d38eb852a4647f2bb312ccf00a3211c9b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37caf7a5dad9ee6e3d5587316d485ce025ba11b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e5873ebf5ff63c380f79fb6ccf478846efa10e2', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31094c66b9cd4f37895020aa6834fc4ea024bd7e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5630a41009edc87ec40df25f606103cf806f7ab', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5019f3058d5b8c70923ceb7c33b5ccc97bb80ff7', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293e3de97f194848c94c5bc5dc49f31783b9c673', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0e88c8d9c53fc1cd450560f78a4fb9e3f195a9c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
433773536,feat(dhall-docs): improve ui/ux of generated documentation,"# What's included?

* A note on dhall-docs/README.md to let users know that this package is experimental and an explanation of how to open `ghci` with `stack` for this package
* `doctest` integration
* Exported packages (dirs) on each package are listed on index.html
* Better handling of front-end resource files
* New flag `--package-name`, that overrides the package-name seen on the nav bar

# Screenshots

The index for the generated docs for the Prelude
![image](https://user-images.githubusercontent.com/29154504/84523384-3ad7ef00-aca6-11ea-9c2a-da47b59eba51.png)

Using `--package-name overriding`
![image](https://user-images.githubusercontent.com/29154504/84523335-28f64c00-aca6-11ea-9028-21b51ebbc337.png)

The `Integer` subpackage:
![image](https://user-images.githubusercontent.com/29154504/84523445-53e0a000-aca6-11ea-9599-6b8e141fe7c2.png)

The `Integer/equal` documentation:
![image](https://user-images.githubusercontent.com/29154504/84523487-62c75280-aca6-11ea-95bf-2969764dae26.png)
",True,1848,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1848,https://github.com/dhall-lang/dhall-haskell/pull/1848,closed,426,102,15,12,14,34,2,0,"[{'name': 'merge me'}, {'name': 'dhall-docs'}]",2020-06-12 16:15:49+00:00,2020-06-15 16:38:05+00:00,260536.0,"3 days, 0:22:16","[{'comment_id': 439516293, 'comment_body': ""I didn't used the doctest syntax because `createIndexes` writes to file-system and I actually only want to show what is the expected behaviour of calling the function with those arguments"", 'comment_created': datetime.datetime(2020, 6, 12, 16, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439516906, 'comment_body': 'This was previously multi-line string literals, but for some reason the first character from the second line was removed so I ended up concatenating several strings', 'comment_created': datetime.datetime(2020, 6, 12, 16, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439519098, 'comment_body': ""It might be worth using .sass files to define variables and avoid repeating the same color values on several places. There is a haskell package that produces css from [sass], [hsass] but doesn't look very promising. Another solution could be to add some kind of pre-processing using `node` but it might complicate things.\r\n\r\n[sass]: https://sass-lang.com/\r\n[hsass]: https://hackage.haskell.org/package/hsass"", 'comment_created': datetime.datetime(2020, 6, 12, 16, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439520207, 'comment_body': ""It might be worth removing `dhall-docs` from `release.sh` until you're ready to publish this so that I don't accidentally publish it when I run the script :slightly_smiling_face: "", 'comment_created': datetime.datetime(2020, 6, 12, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 439522259, 'comment_body': ""These strictness annotations are probably not necessary, for a few reasons:\r\n\r\n* GHC's strictness analyzer has gotten pretty good in recent versions and often does a better job than a person would for most code\r\n* This isn't performance sensitive code\r\n* The annotation isn't doing much in a few cases anyway\r\n\r\n  For example, `FilePath` here is a `[Char]` and keeping a list in weak-head-normal form does not change much.  Similarly, keeping a function WHNF-strict does not change much performance-wise"", 'comment_created': datetime.datetime(2020, 6, 12, 16, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 439524644, 'comment_body': '```suggestion\r\n        [ [absfile|/a/b.txt|]\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 16, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 439737414, 'comment_body': ""That options doesn't seems to be effective. Is this going to add a single page in addition to the multi-page, or will it be a toggle?"", 'comment_created': datetime.datetime(2020, 6, 13, 12, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'TristanCacqueray', 'type': 'User'}, {'comment_id': 439738470, 'comment_body': 'Not related to this PR, but it seems like this functions returns a `.git/HEAD` file (containing something like `ref: refs/heads/master`). It seems like `exprAndHeaderFromText` is not enough as the `HEAD` file is syntactically valid.', 'comment_created': datetime.datetime(2020, 6, 13, 13, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TristanCacqueray', 'type': 'User'}, {'comment_id': 439741559, 'comment_body': ""I added it but I haven't implemented it yet. It is going to generate the whole documentation in a single page rather than multiple pages."", 'comment_created': datetime.datetime(2020, 6, 13, 14, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439741889, 'comment_body': 'Wow good noticed. I thought that exprAndHeaderFromText also does typechecking. A simple solution could be to typecheck the expression as well.', 'comment_created': datetime.datetime(2020, 6, 13, 14, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439816133, 'comment_body': 'AFAIK the oldest GHC supported is 8.2 now, so this should be unneeded. If you copied that from a different doctest suite, you could update that one too.', 'comment_created': datetime.datetime(2020, 6, 14, 10, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439816176, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 10, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439818286, 'comment_body': 'Not sure whether that\'s better…\r\n\r\n```suggestion\r\n                            <> ""navbars. By default, it will extract it the ""\r\n                            <> ""input directory name""\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 11, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439818515, 'comment_body': ""> A simple solution could be to typecheck the expression as well.\r\n\r\nThat will require import resolution too, so it might be a bit of work.\r\n\r\nI believe we'll eventually need that anyway, though.\r\n\r\nLet's discuss this in our chat today."", 'comment_created': datetime.datetime(2020, 6, 14, 11, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439818777, 'comment_body': '```suggestion\r\n    1. @/a/index.html@, that will list the @/a/b.txt@ and\r\n    @/a/c.txt@ files\r\n    2. @/a/c/index.html@ that will list the @a/c/b.txt@ file\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 11, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439818916, 'comment_body': ""Personally, I think it's hard to see what that `DocParams` record will contain, particularly when there's so much else going on in the surrounding code."", 'comment_created': datetime.datetime(2020, 6, 14, 11, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439819353, 'comment_body': ""I don't understand which step this comment refers to."", 'comment_created': datetime.datetime(2020, 6, 14, 11, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439842843, 'comment_body': 'ok :)', 'comment_created': datetime.datetime(2020, 6, 14, 15, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439843611, 'comment_body': 'I forgot to move that comment. Updated', 'comment_created': datetime.datetime(2020, 6, 14, 15, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439843644, 'comment_body': ""Yes you're right. I updated it so that arguments are explicitly provided"", 'comment_created': datetime.datetime(2020, 6, 14, 15, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439843698, 'comment_body': ""It is shorter and emits the same thought, so I'll keep your suggestion! "", 'comment_created': datetime.datetime(2020, 6, 14, 15, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439843758, 'comment_body': 'I copied it from `dhall-lsp-server.cabal`, but it was also on `dhall.cabal`. Updated in all files.', 'comment_created': datetime.datetime(2020, 6, 14, 16, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439843788, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2020, 6, 14, 16, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439847738, 'comment_body': 'Usually you want to add `X`-flags at the top of files instead of the compiler invocation, so that tooling can figure it out without context.', 'comment_created': datetime.datetime(2020, 6, 14, 16, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Profpatsch', 'type': 'User'}, {'comment_id': 439847889, 'comment_body': 'That’s another clue that we should do the simple-stupid thing instead, namely only go by the file ending.', 'comment_created': datetime.datetime(2020, 6, 14, 16, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Profpatsch', 'type': 'User'}, {'comment_id': 439848117, 'comment_body': 'Do we need to support path <0.7?', 'comment_created': datetime.datetime(2020, 6, 14, 16, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Profpatsch', 'type': 'User'}, {'comment_id': 439848715, 'comment_body': ""Yes because path >= 0.7 requires some dependencies that are not compatible with ghc 8.2.0 I think. Unless we don't want dhall-docs to be compatible with it."", 'comment_created': datetime.datetime(2020, 6, 14, 16, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439851802, 'comment_body': 'If this would simplify things, we could consider removing support for GHC 8.2 BTW.', 'comment_created': datetime.datetime(2020, 6, 14, 17, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 439852407, 'comment_body': ""ok let me think about it. That way I don't have to add a lot of boilerplate"", 'comment_created': datetime.datetime(2020, 6, 14, 17, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439859683, 'comment_body': 'I submitted a PR at https://github.com/dhall-lang/dhall-lang/pull/1026 to add the .dhall extension on each file', 'comment_created': datetime.datetime(2020, 6, 14, 19, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 439862153, 'comment_body': ""I dropped support for GHC 8.2. I'm pretty sure I'll make heavy use of this package and I don't want to keep doing this workarounds every time."", 'comment_created': datetime.datetime(2020, 6, 14, 19, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 440256337, 'comment_body': 'Check how this documentation renders.  The reason I ask is that you might need to escape the forward slashes, because I think haddock treats them as italics, even inside of `@`', 'comment_created': datetime.datetime(2020, 6, 15, 15, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 440265446, 'comment_body': ""It might be more direct to define things like this:\r\n\r\n```javascript\r\nfunction fn() {\r\n  if (localStorage.getItem(DARK_MODE_OPT) == DARK_MODE_ACTIVE) {\r\n  …\r\n}\r\n\r\nif (document.readyState != 'loading'){\r\n  fn();\r\n} else {\r\n  document.addEventListener('DOMContentLoaded', fn);\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 6, 15, 15, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 440270742, 'comment_body': 'Perhaps call this `dropExtension`?', 'comment_created': datetime.datetime(2020, 6, 15, 15, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}]","[{'commit_sha': '9c2c62dfaa5c8b55f62456e94e405f9f8de581ac', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba71904a46535afbec010b024bd657612808625', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe4f36bb543893e207c644ac6ba3e6aab4beb340', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10dfa371535e99edcaecd98c4a372748af225bcb', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7279103158c755c66b786d761333b2a16ee68a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38fd43068ab5a585595eb8435df5d28903b7f604', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd90ed40536c609e1d19cd7ad7959c109aae1626a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9675978b5f9d87d19cc35ed56a4188a157b259c3', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c62da2f384970c744d7fb3bf3afdc30b30ed0ad0', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc09f7074f71c36b249b72e96d6f4031e13c44ca', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7381792350c14287bb6366210c630c7bd34154d1', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7cef520bb788f5c36601f6a6d8edf40ce73a5e7', 'committer_username': 'mergify[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 30, 10, 19, 51, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
441611499,feat(dhall-docs): add breadcrumbs to improve navigation,"First attempt, but I think I can do better. Handling the paths is a little bit cumbersome.

I think I can improve it further:

- [x] Add the index of the package link at the beginning of the breadcrumbs
- [x] Add a ""click to copy"" button at the end of the breadcrumbs to copy the breadcrumbs so user can load the expression in their dhall files as `$HOST/$BREADCRUMBS`
",True,1895,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1895,https://github.com/dhall-lang/dhall-haskell/pull/1895,closed,174,43,5,14,1,3,1,0,[{'name': 'dhall-docs'}],2020-06-29 19:41:58+00:00,2020-06-29 23:30:24+00:00,13706.0,3:48:26,"[{'comment_id': 447259618, 'comment_body': 'Were there any issues with using a non-backwards list?', 'comment_created': datetime.datetime(2020, 6, 29, 21, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 447270354, 'comment_body': ""Yes, the main issue is how to calculate the `../` path (which ends up being different depending if the file is an `index.html` or a `.dhall.html` file). If it were a non-backwards list, then:\r\n\r\n* it might need an extra attribute, reflecting how many times do I have to `replicate` `../`, or;\r\n* Traverse the whole breadcrumbs to calculate this in order to add another function helper to convert it to html with links set-up properly.\r\n\r\nI tried both options and I didn't like how the final code ended up, so I changed to a backwards list:\r\n\r\n* I don't need to add any other attribute on the `Crumb` constructor. The breadcrumbs is just a semantic list-like ADT.\r\n* I can start at either `0` or `-1` depending if breadcrumb is for an `index.html` or `.dhall.html` file, and keep incrementing that number at the same time we traverse down the structure.\r\n"", 'comment_created': datetime.datetime(2020, 6, 29, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 447272085, 'comment_body': 'Alright, that sounds reasonable to me', 'comment_created': datetime.datetime(2020, 6, 29, 21, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}]","[{'commit_sha': '29a8af268924bb3a407cb7e806f0cdc7a6599eb8', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38a1ef62ff100df61b811855be72a91d7b63fbca', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d3d0cf0c9d3b84b201d14715242ff1456cde65a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27b8a7b8cc4dd65dc8ffbe20aaea48a1c2760234', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f805905accdc90431e14093ae440c102afcb8c2d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63c583fe3dcffb1f46a839dd83f35031af2e503', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967ba99929084f268b4601339520600022240995', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d2c1fc64cc1609b7f334e1f32c2dca3bef5cad2', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00760357090c6feb6d7060d3fe7b8c0832b61d3', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3c38327c00e8da31071cbee3ed7940e2c975f8', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a66dc0dca0662f5bbb285bcddfa560c643428b98', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf474517314ccac27cd8b4e8ae1f965bbb90b6c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ae74e8c5ef8ee38a07e6f6abe8ab14795b6c89', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4af3a4f95c62e95434788b1e20c458fdc8ae0cb0', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
442428373,feat(dhall-docs): add type of expression from source code,"As discussed in our call, it could be nice for users to see the type of the file from the source code on the rendered documentation, so this PR does so.

What I'm unsure is _where_ to put the documentation. Currently its on the right side of the breadcrumbs, so its something like:
```
breadcrumbs [ : type ]
```

but that might look bad when the title is really large, for example the `dhall-kubernetes`.

I tried other options as well:

* Another section, with a `<h2>Type</h2>`, but it overloads a little the page
* At right side of ""Copy path to clipboard"", but it doesn't feel right since the type is for the file, not for ""Copy path to clipboard""
* Above the breadcrumbs, but TBH I don't feel it looks great there.

That's all I could think of right now, it's late here so probably I've missed something. If you have another idea, please let me know on the comments

- [x] type on index pages
- [x] handle name shadowing correctly",True,1898,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1898,https://github.com/dhall-lang/dhall-haskell/pull/1898,closed,146,147,6,11,11,15,1,0,[{'name': 'dhall-docs'}],2020-07-01 04:11:31+00:00,2020-07-01 23:28:39+00:00,69428.0,19:17:08,"[{'comment_id': 448256463, 'comment_body': 'Is something like this clearer?\r\n\r\n> For an expression of the form `let x0 = y0 x1 = y1 ... in e` where `e` is a variable, `maybeNameInLet` returns the variable name.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448261965, 'comment_body': ""One potential problem with this approach is that we might report the wrong type when we have variable shadowing. For example in\r\n\r\n```\r\nlet x : T0 = y0\r\nlet x : T1 = y1\r\nin x\r\n```\r\n\r\nwe'd return `T0` when the actual type is `T1`.\r\n\r\nI'm actually not sure how to solve this best. We probably have some code in `dhall-lsp-server` that already gets this right. I also think that this might be a good opportunity to try using the `subExpressions` traversal, since it's bottom-up."", 'comment_created': datetime.datetime(2020, 7, 1, 10, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448338773, 'comment_body': ""@sjakobi I haven't checkout `dhall-lsp-server` yet, but wouldn't work if we return the _last_ binding type that matches the name?"", 'comment_created': datetime.datetime(2020, 7, 1, 12, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 448347853, 'comment_body': ""> wouldn't work if we return the _last_ binding type that matches the name?\r\n\r\nThat works when the variable index is `0`. In Dhall, a variable like `x` is really a shorthand for `x@0`. In general, we could also encounter an expression like\r\n\r\n```\r\nlet x : Bool = True\r\nlet x : Natural = 0\r\nin x@1\r\n```\r\n\r\n`x@1` refers to he `Bool` `x` here.\r\n\r\nI don't really expect that we'll encounter cases like this a lot, but if we do this right already, we might avoid some headaches later on."", 'comment_created': datetime.datetime(2020, 7, 1, 13, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448462150, 'comment_body': 'Alright, and what about searching from the last binding name while the variable index != `0`? and keep decrementing?\r\n\r\nI checked out `dhall-lsp-server` but it uses type-checking, and we are here just traversing the original AST from the source code.', 'comment_created': datetime.datetime(2020, 7, 1, 15, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 448462161, 'comment_body': 'Alright, and what about searching from the last binding name while the variable index != `0`? and keep decrementing?\r\n\r\nI checked out `dhall-lsp-server` but it uses type-checking, and we are here just traversing the original AST from the source code.', 'comment_created': datetime.datetime(2020, 7, 1, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 448463776, 'comment_body': '> Alright, and what about searching from the last binding name while the variable index != `0`? and keep decrementing?\r\n\r\nSounds good to me!\r\n\r\n> I checked out `dhall-lsp-server` but it uses type-checking, and we are here just traversing the original AST from the source code.\r\n\r\nOh, I forgot. Sorry!', 'comment_created': datetime.datetime(2020, 7, 1, 16, 0, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448482796, 'comment_body': ""Didn't noticed I sent the same message twice :laughing:\r\n\r\nI pushed the change, please let me know what you think :)\r\n"", 'comment_created': datetime.datetime(2020, 7, 1, 16, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 448575048, 'comment_body': '(My mistake)\r\n\r\n```suggestion\r\n        -- | For an expression of the form @let x0 = y0 let x1 = y1 ... in e@\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 19, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448579170, 'comment_body': ""I'm somewhat suspect that this could be simplified quite a bit now by using `Dhall.Syntax.multiLet`."", 'comment_created': datetime.datetime(2020, 7, 1, 19, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448579994, 'comment_body': 'This should be simpler for the current usecase:\r\n\r\n```suggestion\r\n                    Pretty.Unbounded\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 19, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448580858, 'comment_body': ""Laying out all types on a single line is not really ideal. These lines could get _very_ long. I'm fine with improving the layout at a later stage though."", 'comment_created': datetime.datetime(2020, 7, 1, 19, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 448597924, 'comment_body': ""I'll add it to my task list to not forget this."", 'comment_created': datetime.datetime(2020, 7, 1, 20, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 448611410, 'comment_body': 'Indeed', 'comment_created': datetime.datetime(2020, 7, 1, 20, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 448625342, 'comment_body': 'I think this comment is a bit outdated now. At the least the bit regarding the safe vaue.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': '979ae51f6dd4fa5c63010265d00bb7148e3f32f5', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2165a50ac34a53a8497f2369e27de79692680068', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '134cb08136d1fc4e4b2dfe6004d71b17eda03f9b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24038801aebd47ecab5d9620a6dc89aefd88f2ea', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62f1ea8085fe4626ab3089dd1c940a777abb8e9', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e4c52e0deb3e25aee76610bb614b6e5247bd5fe', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59261b4fa8dfa98d9d2428939af443a1fe4fb9bd', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3419426ef1609a8f560ae1ccc69ff9c56c06288', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd173ed6720ee9be3fd5a9938a1e61d80321c7309', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248cb4199c7fcc826b8b71252f23bfb30075b442', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fef03fea086712255a9a399c7272ab7718bd102', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
444491582,feat(dhall-docs): Add test-setup and assertions as examples,"Hi there!

First things first: I apologize about not being so active this (almost ended) week. I had to finish some things from my university that needed to be done for this next week, so I had to take some time from this to do them.

I'll try to brief all the details that this (kind of big) PR includes.

The most important thing is the test-setup. I decided to go with a golden-test setup using tasty-silver similar to what we've done on `dhall-{json,yaml}`. Basically:

* There is a package folder at `dhall-docs/tasty/data/package`
* The golden files are located at `dhall-docs/tasty/data/golden`
* If the dhall file `[path]/foo.dhall` is on the package folder, the `[path]/foo.dhall.html` is on the golden folder.
* These tests are most to check that we didn't break anything, not to do some kind of TDD with them since it is not viable to write the golden files by hand because `lucid` doesn't provide a way to render html as text in a non-minified way (check the golden files for a example).
* The `--accept` flag is the best thing people invented. It not only updates the files, but create new ones if the file is missing. This is useful to add new tests by adding a new file on the package folder.
* The whole setup fitted under 57 lines and we probably won't have to modify anymore, just add new dhall files on the package folder.

... but before doing this whole test-setup, I had to basically rewrite the whole logic for document generation (thanks god I splitted `Html ()` generation from there). Specifically:

* I separated the pure and impure parts from the Document generation. The core logic to generate documentation is `IO` free
* I used a `Writer` monad to properly handle warnings.
* The most trickiest part was the `createIndexes` function, probably it can be improved and moreover it may be difficult to understand.
* The whole API for the `Core.hs` module (and basically all the `dhall-docs` one) is `generateDocs`, `generatedDocsPure` and `GeneratedDocs`

...and to end, I added assertions as examples on the test files.

I need to say that the new code, although it was difficult to get it right, looks way cleaner from my perspective. Also, tests adds a lot of value to `dhall-docs`, and I'd like to thanks @sjakobi for the suggestion to do this.",True,1899,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1899,https://github.com/dhall-lang/dhall-haskell/pull/1899,closed,1798,197,35,21,22,30,2,0,"[{'name': 'merge me'}, {'name': 'dhall-docs'}]",2020-07-06 01:22:15+00:00,2020-07-08 05:01:13+00:00,185938.0,"2 days, 3:38:58","[{'comment_id': 450292627, 'comment_body': '```suggestion\r\n    We should always try to do as little work as possible in an `IO` context.\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 15, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450294794, 'comment_body': 'The error message should probably indicate which file is being skipped', 'comment_created': datetime.datetime(2020, 7, 6, 15, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450301086, 'comment_body': 'What about a path that already has `..` as a path component, such as `a/..`?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450304008, 'comment_body': '```suggestion\r\n        ""\\n\\ESC[1;33mWarning\\ESC[0m: Header comment is not markdown\\n\\n"" <>\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 15, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450307294, 'comment_body': '```suggestion\r\n    error $ ""\\ESC[1;31mError\\ESC[0mDocumentation generator bug\\n\\nThis should not happen.\\n"" <>\r\n```\r\n\r\nI also suggest using an error text similar to the `Dhall.Util.internalError` utility:\r\n\r\nhttps://hackage.haskell.org/package/dhall-1.33.1/docs/src/Dhall.Syntax.html#internalError\r\n\r\nIn particular, you probably want to avoid suggesting a title for the user\'s issue; the user is more likely to generate a useful title on their own.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450310912, 'comment_body': '```suggestion\r\ntype DocGenerator = GeneratedDocs [(Path Rel File, Text)]\r\n\r\n-- | The result of the doc-generator pure component\r\ndata GeneratedDocs a = GeneratedDocs a [DocsGenWarning]\r\n```\r\n\r\nInstead of using two separate types, you can use a single type if you add a type parameter to `GeneratedDocs` and implement `instance MonadWriter [DocsGenWarning] GeneratedDocs`', 'comment_created': datetime.datetime(2020, 7, 6, 15, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450313683, 'comment_body': 'Did you mean to leave behind this comment?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450318989, 'comment_body': 'paths from the `path` package never contains those.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 450372425, 'comment_body': ""The `err` already contains that information, if you don't mind about having duplicating the file location, I can update it."", 'comment_created': datetime.datetime(2020, 7, 6, 17, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 450793495, 'comment_body': 'Why did you go with an upper bound here, but with a lower bound for many of the other dependencies?', 'comment_created': datetime.datetime(2020, 7, 7, 11, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450794927, 'comment_body': ""I wonder whether these methods ought to have `INLINE` pragmas. I'd probably just add them to be safe."", 'comment_created': datetime.datetime(2020, 7, 7, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450800374, 'comment_body': 'Maybe use `partitionEithers` to do the pass in a single traversal.', 'comment_created': datetime.datetime(2020, 7, 7, 11, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450802391, 'comment_body': 'This might cause problems with Haddock.\r\n\r\n```suggestion\r\n    -- Files grouped by their directory\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 11, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450802969, 'comment_body': 'Please add a comment and/or example that explains what this does.', 'comment_created': datetime.datetime(2020, 7, 7, 11, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450807533, 'comment_body': ""Where's the invalid markdown?"", 'comment_created': datetime.datetime(2020, 7, 7, 11, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450810554, 'comment_body': ""I wonder whether this can handle properties like https://github.com/dhall-lang/dhall-lang/blob/f035ea1947d9392bcedbe7f8c563f33559370efd/Prelude/Natural/lessThanEqual#L14-L16 or [this example](https://github.com/dhall-lang/dhall-lang/blob/87993319329f3c00920d6e882365276925a4aa6a/Prelude/JSON/render.dhall#L23-L47). \r\n\r\nAdmittedly I'm also unsure _what_ the expected output should look like. ;)"", 'comment_created': datetime.datetime(2020, 7, 7, 11, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450812174, 'comment_body': 'Nice! :+1: ', 'comment_created': datetime.datetime(2020, 7, 7, 12, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450819854, 'comment_body': ""The code inside this function feels kind of messy and impenetrable. I'm not sure how to best fix it though.\r\n\r\nI somewhat wonder whether the `(Map (Path Rel Dir))` is a good fit for this logic, or if possibly a custom tree structure would be a better fit."", 'comment_created': datetime.datetime(2020, 7, 7, 12, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450820664, 'comment_body': ""```suggestion\r\nShould be ignored since it's syntactically invalid\r\n```"", 'comment_created': datetime.datetime(2020, 7, 7, 12, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 451075296, 'comment_body': 'Ah, then never mind.  That is fine', 'comment_created': datetime.datetime(2020, 7, 7, 18, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 451077155, 'comment_body': 'I think the trailing backtick on the first line is the invalid markdown', 'comment_created': datetime.datetime(2020, 7, 7, 18, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 451078697, 'comment_body': ""As a general rule of thumb I suggest not adding `INLINE`/`INLINABLE` pragmas unless they're known to improve performance.  The reason why is that they will bloat the size of Haskell interface (`.hi`) files and increase compile times."", 'comment_created': datetime.datetime(2020, 7, 7, 19, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 451112506, 'comment_body': 'basically because I copied that from other test setups.\r\n\r\nRegarding other lower bounds: basically because I know my code works in those version. I can add semantic upper bounds to those', 'comment_created': datetime.datetime(2020, 7, 7, 20, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451113119, 'comment_body': ""Then I won't add them. We'll wait for those perf issues."", 'comment_created': datetime.datetime(2020, 7, 7, 20, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451114988, 'comment_body': ""Okay! I often don't use upper bounds for test suite dependencies because it's fairly inconsequential when the testsuite breaks due to a change in a dependency."", 'comment_created': datetime.datetime(2020, 7, 7, 20, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 451115076, 'comment_body': 'mmmm maybe we could traverse the `Lam` constructor on the binding and remove the assert there?\r\n\r\nThe issue is that we might need to traverse all the binded values in the file and check if there is at least an assert, which might add some overhead.\r\n\r\nIf a binding has `assert`ions, we remove them. Then for that property example:\r\n\r\n```dhall\r\nlet property0 = λ(n : Natural) → assert : lessThanEqual 0 n ≡ True\r\n```\r\n\r\nwe should strip the assert and we might be ready to go:\r\n\r\n```dhall\r\nλ(n : Natural) → lessThanEqual 0 n ≡ True\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 7, 20, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451115366, 'comment_body': 'Thanks! Looks really great actually :smile:', 'comment_created': datetime.datetime(2020, 7, 7, 20, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451121210, 'comment_body': ""IKR!?\r\n\r\nThe most messy part IMO is the `dirToDirsMap`, that was the best I could do to get it right.\r\n\r\nIf you're wondering what it does (probably could guide me to another solution) is to try to _compact_ listed paths as much as it can.\r\n\r\nfor isntance, the folders at the `tasty/data/package` are the following:\r\n\r\n```\r\n./\r\n./a/\r\n./a/b/\r\n./a/b/c/\r\n./deep/\r\n./deep/nested/\r\n./deep/nested/folder\r\n```\r\n\r\nbut on `./deep/` and `./deep/nested/` folders there is no file.\r\n\r\nSo it's kind of dissapointing if the package directory at `./` listed `./deep/index.html` and the last listed `./deep/nested/index.html` to finally list `./deep/nested/folder/index.html`.\r\n\r\nSo what it does is to compact paths as much as it cans, without altering the actual directory structure.\r\n\r\nAn expected output for that directory structure is the output in the golden files:\r\n\r\n```\r\n./\r\n./a/\r\n./a/b/\r\n./a/b/c/\r\n./deep/nested/folder\r\n```\r\n\r\nI'm still thinking a better solution or at least a more readable one. Get back to you if I find out something."", 'comment_created': datetime.datetime(2020, 7, 7, 20, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451280235, 'comment_body': ""@sjakobi: The most I could do was to use `foldl` instead of passing the whole list to `go` at `dirToDirsMap`.\r\n\r\nAnother idea I got was the following (pseudocode):\r\n\r\n```\r\ndef f(sortedDirs):\r\n    stack = [sortedDirs[0]]\r\n    map = { sortedDirs[0] = [ ] }\r\n\r\n    for i in range(sortedDirs):\r\n        t = stack.top()\r\n        d = sortedDirs[i]\r\n        if t prefix of d:\r\n            stack.push(d)\r\n            map[t].add(d)\r\n        else:\r\n            while stack.top() not prefix of d:\r\n                stack.pop()\r\n            map[stack.top()].add(d)\r\n            stack.push(d)\r\n\r\n    return map\r\n```\r\n\r\n... but couldn't write a legible implementation, at least not better than our current one.\r\n\r\nI haven't tried yet using a tree-like structure, but I think for that in another PR."", 'comment_created': datetime.datetime(2020, 7, 8, 4, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451492813, 'comment_body': ""In general, I'd recommend using `foldl'` over `foldl` for folding over lists. There's a bit of a discussion here: https://github.com/hasura/graphql-engine/pull/2933#discussion_r328821960"", 'comment_created': datetime.datetime(2020, 7, 8, 12, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': 'fb9f6a6bcb9baf23826d1f292a71a40a6fe84b0c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '957d040211b2b8bb081b0143ca9eb9b9a295a775', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20fd5a558f36462ec7fe2f15ee43cfbae7bb7bb2', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b43dd884023c6522b933891f5e5eaa8d31dc9c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87091c0222792a31550beff477bb27b3aac56159', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dea75988874ec4eee2f9203f68a5ee6e3dd7146', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f47a3627575985d1e645ca5082b226b10377d7f4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1830d9d8ec6f7b5ebe360d684d16314c270d210', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db0bff55ed302754bfc7a5663cb32ed06e2805fd', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f778b0af38b60d72e8f164a04851b855079020d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fd324be4a9d2f08de5cc058698d5cc0f0ecee92', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2793d0bca0396127e0ee0d217a05356701db2df', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176778caa1a27e7ddaba8615f602209e4e56c073', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d8c8212ea94effa987c907b79205db0f1566c0f', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180907857df2df20ba23aabb982305db46ff3fc7', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15fd07ad0ae2f5b733efc9b816d5d256b32921bf', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf30e2f1ac82e50fac916f0b7c30371337f9ca7', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '259868025ec7c674d776057490a656def96b24b4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54d81ecc42369ed48351236a0ebe0f73af4517c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef89376b267c2871824221b568dee92754a4253b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1b7c6be5171cef1488425af900588da0ee238d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
452324986,feat(dhall-docs): Specification and implementation of the dhall-docs comments format,"This PR specifies and will implement the `dhall-docs` comments format.

I haven't started the implementation yet since I'd like to see your thoughts about my proposal, which is documented on the README of the tool on this PR.

Please let me know what you think and let's try to reach to an agreement before starting the implementation. I took the inspiration from the discuss in #1868 

cc: @sjakobi @Gabriel439 @Profpatsch ",True,1929,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1929,https://github.com/dhall-lang/dhall-haskell/pull/1929,closed,1407,132,68,20,14,65,1,0,[{'name': 'merge me'}],2020-07-19 04:21:44+00:00,2020-07-24 03:38:22+00:00,429398.0,"4 days, 23:16:38","[{'comment_id': 456892187, 'comment_body': 'This is unclear to me. What purpose does the added newline character at the end serve?\r\n\r\nMaybe add an example.', 'comment_created': datetime.datetime(2020, 7, 19, 10, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456892527, 'comment_body': '```suggestion\r\nIf a block comment starts with `{-` instead of `{-|` it will be ignored by `dhall-docs`.\r\n```', 'comment_created': datetime.datetime(2020, 7, 19, 10, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456895472, 'comment_body': ""These rules seem quite different than those for block comments, but after thinking about them for a bit, I haven't come up with anything better. :+1: "", 'comment_created': datetime.datetime(2020, 7, 19, 11, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456895726, 'comment_body': 'I\'d rather suggest treating `bar` as a separate non-documentation comment. Otherwise I think we\'ll find ""internal"" comments appended to the documentation.', 'comment_created': datetime.datetime(2020, 7, 19, 11, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456896039, 'comment_body': 'I think ""indentation"" should be defined more clearly. Can it be a mix of tabs and spaces?', 'comment_created': datetime.datetime(2020, 7, 19, 11, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456896737, 'comment_body': ""I think we should maybe wait with this until we've worked out what `dhall-docs` will do with these annotations."", 'comment_created': datetime.datetime(2020, 7, 19, 11, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456896795, 'comment_body': ""That's illegal!!! ;)\r\n\r\n```suggestion\r\n      --| and here\r\n```"", 'comment_created': datetime.datetime(2020, 7, 19, 11, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456896958, 'comment_body': '```suggestion\r\n:construction: **This tool is on development phase yet. You can use it but you should expect a lot of breaking changes on each new release until the 1.0 release.**\r\n```\r\n\r\n?', 'comment_created': datetime.datetime(2020, 7, 19, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456897416, 'comment_body': ""(Actually my suggestion doesn't seem so much clearer… feel free to ignore)"", 'comment_created': datetime.datetime(2020, 7, 19, 11, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456913057, 'comment_body': 'Now reading it I see that I didn\'t reflect my thoughts about it.\r\n\r\nIf the `-}` is on a new line e.g.\r\n\r\n```\r\n{-|\r\na\r\n-}\r\n```\r\n\r\nor like this:\r\n\r\n```\r\n{-|\r\na-}\r\n```\r\n\r\n\r\nthe text will be extracted like this `""a\\n""`. My thought is that it would be good for the user that he knows he can place the `-}` at any place and the result will be the same.\r\n', 'comment_created': datetime.datetime(2020, 7, 19, 14, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456913274, 'comment_body': ""yeah, they are quite different. The main difference is indentation treatment on both of them, but couldn't think any better that is easy to write and to implement than this."", 'comment_created': datetime.datetime(2020, 7, 19, 14, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456916180, 'comment_body': ""I'll ignore your suggestion but I found a typo on mine: `starts` -> `start`."", 'comment_created': datetime.datetime(2020, 7, 19, 14, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456916751, 'comment_body': 'Is the trailing `\\n` relevant for the generated documentation? Otherwise this seems unnecessarily detailed. Maybe just say that the two examples are equivalent with regard to the generated documentation.', 'comment_created': datetime.datetime(2020, 7, 19, 14, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456916852, 'comment_body': 'Also, is there a difference between\r\n\r\n```\r\n{-|\r\nfoo\r\n-}\r\n```\r\n\r\nand\r\n\r\n```\r\n{-|\r\nfoo\r\n\r\n-}\r\n```\r\n\r\n?', 'comment_created': datetime.datetime(2020, 7, 19, 14, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456917357, 'comment_body': 'Perhaps not insert an implicit newline for the former case.  The only reason I suggest this is so that the documentation format more closely follows how multi-line strings work in Dhall.', 'comment_created': datetime.datetime(2020, 7, 19, 14, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 456917551, 'comment_body': 'What about blank lines without leading whitespace?  Are those lines ignored for the purpose of computing indentation?\r\n\r\nThe reason I ask is that multi-line strings will ignore such lines, and it might be worth documenting whether documentation comments do the same.  Ideally, the more the documentation format should resemble how multi-line strings work in Dhall', 'comment_created': datetime.datetime(2020, 7, 19, 14, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 456917685, 'comment_body': ""If tabs and space character are interchangeable, that means that e.g.\r\n\r\n```\r\n\t{-|\r\n foo\r\n -}\r\n```\r\n\r\nis well-formed, right?\r\n\r\nI don't know whether this could cause problems, but I think it might be worth spelling out."", 'comment_created': datetime.datetime(2020, 7, 19, 14, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456917946, 'comment_body': ""I think the documentation generator is being too lenient with respect to indentation.  I would prefer that the documentation generator enforces the recommended comment layout and rejects everything else, otherwise it will be easy for people to inadvertently commit the wrong docs.\r\n\r\nAlso, in my experience, it's easier to start off strict and then make things more lenient later on in response to user feedback than to do things the other way around (start off too lenient and then make things more strict)"", 'comment_created': datetime.datetime(2020, 7, 19, 14, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 456918797, 'comment_body': 'I would personally not worry keeping all breaking changes before the 1.0 release.  Any tool that has enough users will require a slow stream of slightly breaking changes over time to keep up with their evolving needs.\r\n\r\nThe rule of thumb I always use is that the users decide when a given tool is out of beta, not the author.  This is one of the reasons I always make the first published version of my packages 1.0.0, in recognition of the fact that users might put my tool into production regardless of whether or not I warn them not to.', 'comment_created': datetime.datetime(2020, 7, 19, 14, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 456918940, 'comment_body': ""I think a lot of these issues would be fixed by using the exact same rules as multi-line strings in Dhall.  Then there's no confusion"", 'comment_created': datetime.datetime(2020, 7, 19, 14, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 456926787, 'comment_body': ""Mmm now that you say it I'm unsure. I'll remove it and add it if it's necessary."", 'comment_created': datetime.datetime(2020, 7, 19, 16, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456927729, 'comment_body': ""I agree. I'll update the convention to enforce the alignment of `--`"", 'comment_created': datetime.datetime(2020, 7, 19, 16, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456928047, 'comment_body': ""I'll remove that fragment of the documentation. I think it confuses the user."", 'comment_created': datetime.datetime(2020, 7, 19, 16, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456928472, 'comment_body': 'Good catch. I believe we should ignore them as well.', 'comment_created': datetime.datetime(2020, 7, 19, 16, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456930385, 'comment_body': ""I'd say they are different. Or at least the tool should not strip the newlines. My reasoning is that Markdown is a little sensitive to whitespaces, and after thinking a little it would be better to do the less whitespace stripping on the text. The only exception would be the prefix whitespace for indentation, that is mostly discussed on the proposal."", 'comment_created': datetime.datetime(2020, 7, 19, 16, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456931905, 'comment_body': ""I think Gabriel has a point here. If we can specify how a doc comment corresponds to a multi-line string, we only need to add that the corresponding string is supposed to be the input for a Markdown parser, and we're done with a good part of this spec.\r\n\r\nI guess the tricky bit is that the multi-line spec isn't exactly super easy to understand itself.\r\n\r\nHow familiar are you with it at this stage, @german1608?"", 'comment_created': datetime.datetime(2020, 7, 19, 17, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 456933074, 'comment_body': ""@sjakobi: yes, that example is well formed.\n\n@Gabriel439: I thought about something similar to multiline strings for this purpose, but I was thinking about something more strict for the comments and ended up using `{-|` as base of indentation.\n\nAnother idea that I had was to use the first line column as a base of indentation, that is more similar to multiline strings. But it will allow users to write things such as:\n\n```\n{-|\n                  Foo\n                      BAR\n-}\n```\n\nThat doesn't look to good IMO"", 'comment_created': datetime.datetime(2020, 7, 19, 17, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456965372, 'comment_body': ""I understand your suggestion, thanks!\r\n\r\nI think I'll leave the warning about the current status of the tool, it may be a good notice to people though:\r\n\r\n```suggestion\r\n:construction: **This tool is on development phase yet**\r\n```"", 'comment_created': datetime.datetime(2020, 7, 19, 22, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456968886, 'comment_body': 'It may be useful to include some more common usage such as:\r\n\r\n* Bold, italic\r\n* Internal (anchor) link\r\n* Hypertext link\r\n* Table (is the CommonMark parser support them?)\r\n ', 'comment_created': datetime.datetime(2020, 7, 19, 23, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TristanCacqueray', 'type': 'User'}, {'comment_id': 456970480, 'comment_body': 'Since the markup language is based on Markdown (specifically, CommonMark), those features will be supported out-of-the-box. We could write a sample of that on that example, though.\r\n\r\nThe only thing that we need to discuss is how to link to other files on the package, but we could do that in a separate issue.', 'comment_created': datetime.datetime(2020, 7, 19, 23, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 456971580, 'comment_body': ""If I understand correctly, CommonMark does not yet have a syntax for tables, accoding to this [thread](https://talk.commonmark.org/t/tables-in-pure-markdown/81), and for example when using Pandoc you need to activate the `githubMarkdownExtensions` when parsing CommonMark.\r\n\r\nThe samples doesn't have to be exhaustive, for example the `foo bar baz` sample could be replaced by:\r\n\r\n<pre>\r\n* a list item in *bold*\r\n  - a sub item in _italic_\r\n  - a [link](http://example.com)\r\n</pre>"", 'comment_created': datetime.datetime(2020, 7, 19, 23, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'TristanCacqueray', 'type': 'User'}, {'comment_id': 456977735, 'comment_body': ""Oh sorry!\r\n\r\nmmark, out markdown parser, doesn't support them AFAIK, but we could create a custom extension to add that feature if it's needed."", 'comment_created': datetime.datetime(2020, 7, 20, 0, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457234852, 'comment_body': 'Why this difference?', 'comment_created': datetime.datetime(2020, 7, 20, 9, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 457240927, 'comment_body': ""When there are two subsequent doc comments, that's probably a user error and I think it should be treated as an error too."", 'comment_created': datetime.datetime(2020, 7, 20, 9, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 457254097, 'comment_body': '""aligned"" is slightly vague. Is this aligned?\r\n\r\n```\r\n\t--| foo\r\n -- bar\r\n```\r\n\r\nWhat does it mean when before the `--|` there are [fullwidth characters](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms)?\r\n\r\nFor simplicity, I think we can demand that each `--` is preceded by the same number of characters (if that\'s well-defined?!). Or we could give up the alignment requirement again…', 'comment_created': datetime.datetime(2020, 7, 20, 10, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 457255380, 'comment_body': 'As mentioned above, I think we should treat subsequent doc comments as errors.\r\n\r\nCan we deduplicate these sections BTW?', 'comment_created': datetime.datetime(2020, 7, 20, 10, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 457401880, 'comment_body': 'From my POV it would be annoying if me, a user, should care about the position of the closing brace `-}`', 'comment_created': datetime.datetime(2020, 7, 20, 13, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457404078, 'comment_body': ""Ok, but I'd say that we should still keep ignoring non-doc comments after a doc comment.\r\n\r\nWhat about something like this:\r\n\r\n```\r\n{-|\r\nfoo -}\r\n-- bar\r\n{-|\r\nbaz -}\r\n```\r\nshould be an error?"", 'comment_created': datetime.datetime(2020, 7, 20, 13, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457409417, 'comment_body': ""Hmm, I'm not convinced that this is important enough that it would be worth breaking the analogy for. There's also at least one case where the significance of the position of the `-}` would be useful:\r\n\r\n```\r\n{-\r\n    indented\r\n    code\r\n    block\r\n-}\r\n```"", 'comment_created': datetime.datetime(2020, 7, 20, 13, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 457411710, 'comment_body': ""Yeah, I think that should be an error too. It's just not clear which doc comment the user intended to be used by `dhall-docs`.\r\n\r\nAFAIK haddock concatenates the doc comments in such cases, but I think that's error prone and not really useful in practice."", 'comment_created': datetime.datetime(2020, 7, 20, 14, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 457424668, 'comment_body': ""I agree with that definition of alignment. I'd say that will be enough for almost all cases.\r\n\r\nI don't have a problem with no enforcing the alignment, but following @Gabriel439 comment ([here](https://github.com/dhall-lang/dhall-haskell/pull/1929#discussion_r456917946)) we should start with something more strict and make it more flexible depending on user requests."", 'comment_created': datetime.datetime(2020, 7, 20, 14, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457425028, 'comment_body': ""Sure! I'll add another section on the document"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457449792, 'comment_body': 'Good point :) then a `dhall-docs` block comment will be basically a multi-line string :+1:', 'comment_created': datetime.datetime(2020, 7, 20, 14, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457452279, 'comment_body': ""> Yeah, I think that should be an error too. It's just not clear which doc comment the user intended to be used by `dhall-docs`.\r\n\r\nOk, so the rule is: after a `dhall-docs` comment, there can't be any other `dhall-docs` comment following it.\r\n"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457463628, 'comment_body': 'In analogy to multi-line strings, we should also support `\\r\\n` line-endings:\r\n\r\nhttps://github.com/dhall-lang/dhall-lang/blob/f717c748b3751e5a1b22da8af3db31030e7dcd0d/standard/dhall.abnf#L348', 'comment_created': datetime.datetime(2020, 7, 20, 14, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 457464571, 'comment_body': 'I merged both sections in a single one and added some examples there. The section is `Mixing the two type of comments`', 'comment_created': datetime.datetime(2020, 7, 20, 14, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 457748183, 'comment_body': 'It might help to use `␠` or `␣` to show the spaces:\r\n\r\n```suggestion\r\n␠␠{-|\r\n␠␠␠␠foo\r\n␠␠\r\n␠␠␠␠bar -}\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 23, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 457748949, 'comment_body': ""```suggestion\r\nlet --| foo\r\n    --  bar\r\n    a = True\r\n```\r\n\r\nI mainly suggest this since that's the commenting format we've been recommending so far for `let` bindings"", 'comment_created': datetime.datetime(2020, 7, 20, 23, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 458672274, 'comment_body': ""```suggestion\r\n    --   and ending in the last character of the line. Each one keeps its 'SourcePos' to\r\n```\r\n\r\n?"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 458706827, 'comment_body': ""Could the return type alternatively be `Either DocsGenWarning Text`?\r\n\r\nI was thinking about this very nice blog post: https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\r\n\r\nI'm not yet sure how to best apply its advice here though…"", 'comment_created': datetime.datetime(2020, 7, 22, 10, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 458871355, 'comment_body': ""I've just read that, really nice! I chose `GeneratedDocs (Maybe Text)` to log `DocsGenWarning` easier. Also, I used `Maybe Text` on `FileComments` since not all files have headers.\r\n\r\nI believe that the best application of that blog post's advice is to change the return type of `Dhall.Docs.Comment.parseComment` be `Either CustomParseError DhallComment`. I can give it a try.\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 15, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 459448323, 'comment_body': 'stripped of what?', 'comment_created': datetime.datetime(2020, 7, 23, 13, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 459494253, 'comment_body': 'This module should probably have an export list.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 459519250, 'comment_body': 'nit: would it be possible to ensure that the generated files end with a carriage return?', 'comment_created': datetime.datetime(2020, 7, 23, 15, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'TristanCacqueray', 'type': 'User'}, {'comment_id': 459526650, 'comment_body': 'If you enable the `DataKinds` extension, you can do this:\r\n\r\n```haskell\r\ndata CommentType = DhallDocsComment | MarkedComment | RawComment\r\n\r\ndata DhallComment (a :: CommentType)\r\n```\r\n\r\n... which ensures that `a` can only be one of those three constructors', 'comment_created': datetime.datetime(2020, 7, 23, 15, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 459529799, 'comment_body': ""Would it be possible to upstream this into the `dhall` package?  That way we don't have to worry about the two implementations of this diverging"", 'comment_created': datetime.datetime(2020, 7, 23, 15, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 459534310, 'comment_body': 'These files are not directly generated by the tool, they are the result of generating the HTML Text documentation from the package and passing that result to `HaXml` parser and pretty printer. I guess that a solution would be to append a newline to the result of the prettyprinter.\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 15, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 459534879, 'comment_body': 'This can be simplified a little bit:\r\n\r\n```suggestion\r\n    if any (`Data.Text.isPrefixOf` t) [""{-|\\n"", ""{-|\\r\\n""]\r\n    then BlockComment t\r\n    else Left MissingNewlineOnBlockComment\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 15, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 459535420, 'comment_body': '```suggestion\r\n-- | Knowing that there is a @dhall-docs@ marker inside the comment, this\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 15, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 459536320, 'comment_body': '```suggestion\r\n            [] -> fileAnIssue ""checkAmountOfMarkers failed with newLines = []""\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 15, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 459537307, 'comment_body': '```suggestion\r\n        commentLines = NonEmpty.toList ls\r\n        numberOfMarkers = length $ filter (Data.Text.isPrefixOf ""--|"" . snd) commentLines\r\n        (_, newLines) = break (Data.Text.isPrefixOf ""--|"" . snd) commentLines\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 15, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 459565265, 'comment_body': 'I believe we could do it. Would you mind if I do that in a follow-up PR?', 'comment_created': datetime.datetime(2020, 7, 23, 16, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 459566775, 'comment_body': 'OTOH: should we move only the parsing logic returning `Text` and keeping all data-types here? I say this because almost all defined data-types here are specific for dhall-docs comments validation', 'comment_created': datetime.datetime(2020, 7, 23, 16, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 459641814, 'comment_body': ""Yeah, it's fine to do that in a follow-up PR.  I think this can be done in such a way that it does not depend on `dhall-docs`-specific types"", 'comment_created': datetime.datetime(2020, 7, 23, 18, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 459678894, 'comment_body': 'I had to also add `KindSignatures` to properly use the type restriction on `DhallComment', 'comment_created': datetime.datetime(2020, 7, 23, 19, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}]","[{'commit_sha': '6a2914dc1e83ad10de93bb115ea1f616d12df486', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7048276b6aa27c6a11dc318641dd6241c2374ef4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8160562c0927c5c638149de3379271c04e33a7c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bfad50c8fb08d88452f412fa292c14523b772c9', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '151dbe065ea64942f36467971ba51c5e1bbe3d95', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd47a8c688b2b296f9dbf64f48746f217428049f5', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71830f1774254e8e2f63a4b9ed8f63eda0489ff9', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1051572ce9b6883ca6826897945bf44c56356cd2', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3573a09e8df1b08caa4248c17a789eda0deb3db', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60fa6fe326cabb3f337e55afe2378b2fa4a93bcb', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fff088cf4d57f9aab36fa784f1cede3fdbf254e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbbf2f0400dfb5cfa320c61dd0f39e8d63dca93d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d7ab10a4efc06505cb98b9b3a7c04aef6d121c3', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7affb0f2eea94eecfc93a4807e0cf2719f06b63', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d0e6ad877c77a15b33462356718ece1662c404', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da3d45239c16b91e3609b0794ddec6c5076f277a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0dac326369801e8f7c521ff0cecc0fe8a705084', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '054e4ba0fde4eb98689a1d2515745c0f999d025f', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc34f2ac7adf1d6f0793fe2369612556c896993', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f304d197fd587c6a36474db9e6d3276482151d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
459508915,feat(dhall-docs): Jump on URLs expressions,"### Context

This is the first PR for the jump-to-definition feature. It took more time than I expected but it's working properly and the code can be enhanced to follow up next jump-to-definition elements.

### Solution

The current ""render source code"" function used the `Dhall.Pretty` module's function to render the code as HTML with syntax-highlighting. Sadly, that approach wouldn't allow us to inject more properties since after an `Expr Src a` is transformed into a `SimpleDocStream Ann` we lose all information about the syntactic elements.

This new approach takes the `(Src, Import)`s from the source code consuming the file contents, injecting the anchors where it's needed. I took some inspiration from the `dhall-lsp-server`'s `embedWithRanges` function to do this.

As a consequence, we will need to code again the syntax-highlighting algorithm but that can be done after finishing the difficult features as jump-to-definition and type-on-hover.

I did split the code a little bit to keep the source code rendering logic in a separate module to keep it more organized, but probably the next features will need even more code moving. So If you don't like the current one it doesn't matter: it will probably change. At the end of the project, we can do a global cleanup.

EDIT: I forgot to mention, but assertions and types on index are rendered by formatting the code in a single line using `dhall format`, parsing the result (again, to regenereate `SourcePos`'s) and finally passing the result to the renderer function",True,1959,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1959,https://github.com/dhall-lang/dhall-haskell/pull/1959,closed,753,637,37,16,6,18,1,0,[{'name': 'merge me'}],2020-07-30 19:03:56+00:00,2020-08-01 16:41:38+00:00,164262.0,"1 day, 21:37:42","[{'comment_id': 463209823, 'comment_body': 'This is the trickiest part of this PR', 'comment_created': datetime.datetime(2020, 7, 30, 19, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 463277648, 'comment_body': ""This one needs haddocks. I currently don't understand why there's both `exprSrcToHtml` and `exprVoidToHtml`."", 'comment_created': datetime.datetime(2020, 7, 30, 21, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463281089, 'comment_body': 'What is the `Text` argument for? An example would be helpful here.', 'comment_created': datetime.datetime(2020, 7, 30, 21, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463282899, 'comment_body': ""Maybe move these to `go`'s  `where`-clause?"", 'comment_created': datetime.datetime(2020, 7, 30, 21, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463285785, 'comment_body': 'IMHO `let`s are a better fit for `do`-notation than `where`-clauses. I read the `do`-notation top-down, so it feels weird to have to jump up and down to find the definitions of things.', 'comment_created': datetime.datetime(2020, 7, 30, 21, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463338836, 'comment_body': 'I added a `doctest` there', 'comment_created': datetime.datetime(2020, 7, 31, 0, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 463342813, 'comment_body': 'I added haddocks for that function with a clear explanation and documented the use-case for each one.', 'comment_created': datetime.datetime(2020, 7, 31, 0, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 463359011, 'comment_body': 'This still feels a bit convoluted, but I think I get the general idea.\r\n\r\nMaybe it would be worth splitting out a pure function that takes care of the alignment of imports. Roughly like\r\n\r\n```haskell\r\nalignAnnotations\r\n    :: Text\r\n    -> [(Int, ann)] -- ^ (Line number, annotation), line numbers must be ascending\r\n    -> [(Text, [ann])] -- ^ Lines of the original Text, with annotations for each line\r\n```\r\n\r\nThen you can just fold over the resulting annotated lines and handle them in a uniform fashion.', 'comment_created': datetime.datetime(2020, 7, 31, 1, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463359607, 'comment_body': '```suggestion\r\nrenderCodeWithHyperLinks :: Text -> Expr Src Import -> Html ()\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 1, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463360453, 'comment_body': ""Why is it necessary to parse the expression from the rendered text? Can't we use the original expression?"", 'comment_created': datetime.datetime(2020, 7, 31, 1, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463360813, 'comment_body': 'How about\r\n\r\n```suggestion\r\nrenderCodeSnippet :: Dhall.Pretty.CharacterSet -> ExprType -> Expr Void Import -> Html ()\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 1, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463768371, 'comment_body': 'Oh, in `alignAnnotations`, what I called the column numbers actually are the _line_ numbers. I had mixed up the terms!', 'comment_created': datetime.datetime(2020, 7, 31, 18, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463968265, 'comment_body': 'because we new to recover the new `Note`s and `SourcePos`s', 'comment_created': datetime.datetime(2020, 8, 1, 14, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 463968425, 'comment_body': ""Sorry @sjakobi, but I don't get your idea :confused: "", 'comment_created': datetime.datetime(2020, 8, 1, 14, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 463969082, 'comment_body': 'what I do in a high-level is _traversing_ the text, using the first argument of `go` as the _cursor_. The `[Text]` argument is used as the remainder of the text consume, the first line is not the _whole_ line if the _cursor_ column is different than `1`.\r\n\r\nWe consume the prefix of the import position and render it as plain-text, render the import using a link if makes sense, and finally recur with the remainder of the text.\r\n\r\nEDIT: Also note that a single import can span several lines, if it uses headers, for example.', 'comment_created': datetime.datetime(2020, 8, 1, 14, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 463971791, 'comment_body': ""(Probably this idea is what you suggested at first glance, sorry for that!)\r\n\r\nWe could take the source text and _partitionate_ it using a custom data type:\r\n\r\n```haskell\r\ndata SourceCodeAnn = Normal Text | Link Text Import\r\n\r\n-- if we concatenate the `SourceCodeAnn`'s `Text` we should get the input `Text`\r\npartitionate :: Text -> [SourceCodeAnn]\r\n\r\nrender :: [SourceCodeAnn] -> Html ()\r\n```"", 'comment_created': datetime.datetime(2020, 8, 1, 15, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 463975166, 'comment_body': ""Yes, that's what I meant. `SourceCodeAnn` is a homomorphism of `(Text, Maybe Import)`. I had suggested multiple imports / annotations because each line can contain multiple imports. When imports can also span multiple lines, things probably get a bit more complicated. No idea whether it's worthwhile."", 'comment_created': datetime.datetime(2020, 8, 1, 15, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 463977432, 'comment_body': 'I can try this in a follow-up PR. Remember that we also want to support jump-to-definition on other language elements, so probably this code will suffer changes.', 'comment_created': datetime.datetime(2020, 8, 1, 16, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}]","[{'commit_sha': 'f149535816aafe171392c8fa8a63c821aa5a2e3b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa028317d847b5ed951dc8e32e0c10059205ad19', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43f100c2fb44a3ea78d7a5f2b53f90b046a57cba', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd8cd3cdacfa99b3fd5509b4347997dc74a4a40', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2822dd616bee928f0d939d1e7c5eefe378a706dc', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '765c6efdec0191e3fe948cea4a9fb91fc83128b0', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f944bbabeff3fbcb46688411e90dc7f919527b4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8d6bdf92897c2b991bede3bb543ab3d1cbc862f', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec35e1fc2a11bd8994c30ae89e7847daee08fa8', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc37caa1f44a0c67c76b24526a631c0499772d03', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f55095240f43b4531432ac7f5ab66892d62fc4cd', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53ba44f8a186d95502534fb23f3f71406773160a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d77f3708439f1ef46905e47d3ef58d6b4f600c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a33212734cb18d4422a62e08bc6490a2b44b724', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e37cba9c758407a2fcd1b15e4868334a6987d46e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9448e9ad53e7dc3d58c61c6be397d73a821a1169', 'committer_username': 'mergify[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 30, 10, 19, 51, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
461943360,feat(dhall-docs): Jump to definition on let bindings,"### Summary

This PR adds jump-to-definition on let bindings. It is really similar to haddock's:

* If you hover a variable, all references of that variable will be highlighted including its definition
* Each variable use is an anchor HTML tag to the declaration of the variable in the source code.

I also updated `dhall-docs-gen.nix` with the latest changes from dhall-lang's `Prelude`

### Solution

Check the header of `Dhall.Docs.CodeRenderer` for a high-level explanation of how the code is rendered.

### To discuss

I left some `FIXME`s comments on the code about how we handle labels that are quoted using backticks. To solve those I was thinking we could do the following:

* Use `bindingSrc0` and `bindingSrc1` to generate the _actual_ label.
* Parse the _actual_ parsed label by changing the `Binding` data type to something like this:
    ```
    data Binding = { ... value :: (Src, Text), ... }
    ````
    ...although it will introduce a breaking change and I will need to change all `value` references (PTSD of #1908)

Let me know if you have any idea or if you like any of my above proposals.",True,1966,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1966,https://github.com/dhall-lang/dhall-haskell/pull/1966,closed,904,113,30,1,10,5,3,0,"[{'name': 'merge me'}, {'name': 'dhall-docs'}, {'name': 'dhall-docs:jump-to-def'}]",2020-08-03 05:02:49+00:00,2020-08-04 16:00:53+00:00,125884.0,"1 day, 10:58:04","[{'comment_id': 464802593, 'comment_body': '```suggestion\r\n    -- | Used to render a variable declared in a let-binding that is used in\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 5, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 464803316, 'comment_body': ""```suggestion\r\n{-| The 'Expr Src Import' parsed from a 'Text' is split into a\r\n```"", 'comment_created': datetime.datetime(2020, 8, 4, 5, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 464804099, 'comment_body': 'What precisely is the problem? Could you give an example?', 'comment_created': datetime.datetime(2020, 8, 4, 5, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 465038052, 'comment_body': 'Although I know how to fix it, I can give you an example.\r\n\r\nSuppose the following program:\r\n```dhall\r\nlet `quoted var` = 1\r\nin `quoted var`\r\n```\r\nThe AST will be something like this:\r\n\r\n```\r\nLet (Binding ... ""quoted var"" ...) (Note ""`quoted var`"" (Var ""quoted var\' 0))\r\n```\r\n\r\nFor variable declarations, we don\'t have the exact parsed text, which leads to the following text rendering on the HTML:\r\n\r\n```dhall\r\nlet quoted varr` = 1\r\nin `quoted var`\r\n```\r\n\r\nsince the range of the text computed on `fragments` doesn\'t take into accounts yet variable with backticks.\r\n\r\nMy idea to solve this can calculate it from using `bindingSrc0` and `bindingSrc1` `SourcePos`es. I\'m going to try it and update here accordingly', 'comment_created': datetime.datetime(2020, 8, 4, 13, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 465051766, 'comment_body': 'It worked like a charm and I added another test showcasing that', 'comment_created': datetime.datetime(2020, 8, 4, 13, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}]","[{'commit_sha': '2f196777e5c8bdfeffd74a480d81c520953ef04d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
464703236,feat(dhall-docs): add jump to definition on lam parameters,"`Pi`-introduced variables are missing, but I'll introduce them at another time.

I also added a _small_ underline on variables to make this feature easier to discover.",True,1982,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1982,https://github.com/dhall-lang/dhall-haskell/pull/1982,closed,673,45,17,2,1,0,3,0,"[{'name': 'merge me'}, {'name': 'dhall-docs'}, {'name': 'dhall-docs:jump-to-def'}]",2020-08-07 16:29:50+00:00,2020-08-09 16:27:05+00:00,172635.0,"1 day, 23:57:15",[],"[{'commit_sha': 'a1fa1b2fb391fdb5ce4e2e962413bd4f830bda2e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e86749775aca22cf5463d7aefccd1523d1082a3f', 'committer_username': 'mergify[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 30, 10, 19, 51, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
467006073,feat(dhall-docs): add jump-to-definition support for record-like expressions,"(this is a quite big PR, please read the full description of this PR before reviewing the code)

### Summary

This PR adds JTD support for record-like expressions. `dhall-docs` now tries to infer (really simple, not like `Dhall.TypeCheck` does, for example) the type of a dhall expression. As a result of this, the JTD-related features on record-like expressions are:

* Fields on field-access expressions jumps to the definition of that field in the source code, where the left side of that expression was defined;
* Deep field expressions are also supported (see `JumpToRecordFieldWhenVarIsOfRecordTypeDeep` test case);
* Fields that use dot-syntax are correctly highlighted depending on the accessed field;
* Punned entries are handled without jumping to the definition of that entry, but it's enough I think;
* It supports transitivity of expressions, which allows jumping to the _real_ definition of an expression if `dhall-docs` is able to keep the inferred type in a transitivity chain.

You can check the written test cases to see more specific uses, and also you can suggest more test cases as well.

### How to review this

This work is divided into two parts:

1. Modifications of how we preserve whitespace on the AST:
    1. The addition of the `FieldAccess` data-type for preserving whitespace on `Field` expression
    2. The correct whitespace preservation on `dot-syntax` labels, which is documented in the `RecordField` haddock
    3. Modify the rest of the repository packages to catch-up the change on `Field`
2. Modifications on how the source code on rendered in `fragments`:
    * We have a `DhallType` ADT to aim a simple type-inference algorithm.
    * Now we use a `Writer [SourceCodeFragment] DhallType`. Generating `[SourceCodeFragment]` for an expression will return the inferred 'DhallType'

The part 1 generates a lot of noise on the PR, but I was modifying the parser as I was developing record-JTD since some changes were really specific for `dhall-docs`. If you need to, I can split (not so easy, though) the `dhall` work in a separate PR that should be merged before this one.
   ",True,1991,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1991,https://github.com/dhall-lang/dhall-haskell/pull/1991,closed,1572,274,53,33,8,36,3,0,"[{'name': 'merge me'}, {'name': 'dhall-docs'}, {'name': 'dhall-docs:jump-to-def'}]",2020-08-12 21:02:45+00:00,2020-08-17 03:16:57+00:00,368052.0,"4 days, 6:14:12","[{'comment_id': 469660336, 'comment_body': 'What is the reason for having duplicate examples?', 'comment_created': datetime.datetime(2020, 8, 13, 2, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 469660626, 'comment_body': 'It seems like we should prefer the record literal over the record type, when both are present', 'comment_created': datetime.datetime(2020, 8, 13, 2, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 469668233, 'comment_body': 'I like to keep one feature or bug-fix per file. Although the file is a duplicate, it is a good example of transitivity.\n\nWe can change the sample, if you want to', 'comment_created': datetime.datetime(2020, 8, 13, 3, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 469668556, 'comment_body': 'Then the annotation should not affect anything. Is this what you suggest?', 'comment_created': datetime.datetime(2020, 8, 13, 3, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 469703013, 'comment_body': ""Yes, that's correct"", 'comment_created': datetime.datetime(2020, 8, 13, 5, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 469703442, 'comment_body': ""I think at least minimize each example to the smallest code that illustrates what's going on"", 'comment_created': datetime.datetime(2020, 8, 13, 5, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 469827644, 'comment_body': 'The standard mostly uses the term ""select"" to refer to the `e.x` syntax, so `FieldSelection` might be a better name.\r\n\r\nIt\'s not very important to me though.', 'comment_created': datetime.datetime(2020, 8, 13, 9, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 469829435, 'comment_body': 'Can you expand these remarks with proper examples for the various syntactic forms?', 'comment_created': datetime.datetime(2020, 8, 13, 9, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 469832760, 'comment_body': 'I assume that this was changed by `stylish-haskell`?!\r\n\r\n@Gabriel439, could you check that this is OK?', 'comment_created': datetime.datetime(2020, 8, 13, 9, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 469835098, 'comment_body': 'This is the term used in https://github.com/dhall-lang/dhall-lang/blob/ccb9f5d54b0ecba05a6493e84442ce445e411e9e/standard/dhall.abnf#L852\r\n\r\n```suggestion\r\n{-| Record the field on a selector-expression\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 9, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 469839062, 'comment_body': ""I believe we wouldn't want the label to be a thunk, or don't need that at least.\r\n\r\n```suggestion\r\n    , fieldAccessLabel :: !Text\r\n```"", 'comment_created': datetime.datetime(2020, 8, 13, 9, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 469845680, 'comment_body': ""I don't understand this FIXME.  `anyLabel` doesn't eat trailing whitespace, or does it?!\r\n\r\nI think `src1` should properly include all the whitespace until the next `.`.\r\n\r\nI also think we direly need tests for the whitespace parsing – possibly golden tests based on `haskell-syntax-tree`?! That's for future work though, I guess."", 'comment_created': datetime.datetime(2020, 8, 13, 10, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 469851888, 'comment_body': 'Since normalization turns all the `Maybe s` fields into `Nothing`, I think we need to check that these fields are `Nothing`. We should do the same for `RecordField` too.', 'comment_created': datetime.datetime(2020, 8, 13, 10, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 469905400, 'comment_body': 'I changed that manually, I have a TOC that males me change to newtype when possible :) I can rollback the change, though', 'comment_created': datetime.datetime(2020, 8, 13, 12, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 469991514, 'comment_body': 'OK, on let-bindings we ignore the type from the annotation on this type-inference\r\n\r\nOTOH I believe that in the case of function arguments of record-type from `Lam`, selector expressions should highlight the fields on the record-type. This could be useful to get the associated type of that field in the selector expression when the record-type is huge.\r\n\r\nCheck https://hydra.dhall-lang.org/build/69827/download/1/docs/JSON/object.dhall.html for example,  hovering the `object` in `json.object` results in the highlight of the `object` field in the record-type, which is really useful IMO\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 13, 14, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 469997311, 'comment_body': ""I had a lot of parsing errors from our test-suite when I added the `src1 <- src whitespace` there, I can try to reproduce and paste a sample of the failure I got to get more help from you and @Gabriel439\r\n\r\nI agree with the test-setup you suggest, I'll file an issue to not forget about it"", 'comment_created': datetime.datetime(2020, 8, 13, 14, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 470026091, 'comment_body': '@german1608: Yes, I agree that function argument types should be highlighted when possible.  I was only commenting on `let` expressions', 'comment_created': datetime.datetime(2020, 8, 13, 15, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 470170067, 'comment_body': ""I'm adding a specific test for `Lam` bindings to reflect that behavior and updating the existing test case for `Let` bindings as well"", 'comment_created': datetime.datetime(2020, 8, 13, 18, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 470197848, 'comment_body': 'Alright, after replacing the `let src1 = Src pos pos """"` with `src1 <- src whitespace` I got a lot of parse errors from the test-suite. This is a single test failure:\r\n\r\n```\r\nDhall Tests\r\n  normalization\r\n    discover\r\n      ./dhall-lang/tests/normalization/success/remoteSystems:                                                                  FAIL\r\n        Exception: \r\n        \x1b[1;31mError\x1b[0m: Invalid input\r\n        \r\n        41:3:\r\n           |\r\n        41 |   (   λ ( x\r\n           |   ^\r\n        unexpected \'(\'\r\n        expecting ->, :, end of input, or whitespace\r\n```\r\n\r\nthe error comes from parsing https://github.com/dhall-lang/dhall-lang/blob/master/tests/normalization/success/remoteSystemsB.dhall\r\n\r\ndo you have any idea? @Gabriel439 may have a solution or more insights about the reason for the failure.', 'comment_created': datetime.datetime(2020, 8, 13, 19, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 470510417, 'comment_body': '```suggestion\r\n            let fieldSelection = do\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 9, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470516151, 'comment_body': ""Why do we have this duplication? Why can't `recordFieldSrc2` simply be `Nothing` when the label isn't directly followed by a `=`?"", 'comment_created': datetime.datetime(2020, 8, 14, 9, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470517164, 'comment_body': ""This doesn't seem to be the case for e.g. `a` and `b` in the example below."", 'comment_created': datetime.datetime(2020, 8, 14, 9, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470519309, 'comment_body': 'I think it would be slightly more readable to handle the `Maybe s` fields with two pattern matches, where the first is\r\n```suggestion\r\n      Field r (FieldSelection Nothing k Nothing) -> case r of\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 9, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470521239, 'comment_body': ""Thanks for investigating, @german1608! I'm fine with leaving this bit as it is for now then."", 'comment_created': datetime.datetime(2020, 8, 14, 9, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470642267, 'comment_body': ""You're right. My rationale was to have a way to differ dot-syntax from punned entries, but I didn't notice that by doing this we don't have a way to differ between dot-syntax and normal labels"", 'comment_created': datetime.datetime(2020, 8, 14, 14, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 470644458, 'comment_body': ""You're welcome! I think that I'll update #1995 to not forget about this"", 'comment_created': datetime.datetime(2020, 8, 14, 14, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 470902645, 'comment_body': 'I changed the semantics as you suggested, @sjakobi!', 'comment_created': datetime.datetime(2020, 8, 14, 23, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 470969917, 'comment_body': 'An example, maybe in a similar style as the `Binding` and `RecordField` docs, would be nice.', 'comment_created': datetime.datetime(2020, 8, 15, 11, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470970755, 'comment_body': 'In which cases is it useful that we record a `RecordLiteral` for a `Record` _type_?\r\n\r\n(I also wonder whether `RecordLiteral` should have a better name.)', 'comment_created': datetime.datetime(2020, 8, 15, 12, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470971334, 'comment_body': 'I was initially confused in what way this represents a ""type"". I wonder whether something like `JtdInfo` or maybe `Provenience` might be slightly less confusing.', 'comment_created': datetime.datetime(2020, 8, 15, 12, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 470995347, 'comment_body': ""I'll use `JtdInfo`. `Provenience` doesn't seem the best term from my POV."", 'comment_created': datetime.datetime(2020, 8, 15, 14, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 470995512, 'comment_body': ""> (I also wonder whether `RecordLiteral` should have a better name.)\r\n\r\nThis is the problem. In the beginning, I used it only for record literals, and later I added support for `Record` using the same name.\r\n\r\nI'll use `RecordFields`: generic and more appropriate with the `JtdInfo` type name you suggested"", 'comment_created': datetime.datetime(2020, 8, 15, 14, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 471090568, 'comment_body': '```suggestion\r\n        * @posA@ and @posB@ record the source position used to make them\r\n```', 'comment_created': datetime.datetime(2020, 8, 16, 9, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 471090581, 'comment_body': '```suggestion\r\n        identified across the rendered source code\r\n```', 'comment_created': datetime.datetime(2020, 8, 16, 9, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 471090610, 'comment_body': ""```suggestion\r\n        * @jtdInfoA@ and @jtdInfoB@ are the associated 'JtdInfo's inferred from\r\n```"", 'comment_created': datetime.datetime(2020, 8, 16, 9, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 471090821, 'comment_body': 'Filtering before sorting should be slightly faster\r\n\r\n```suggestion\r\nfragments = Data.List.sortBy sorter . removeUnusedDecls . Writer.execWriter . infer Context.empty\r\n```', 'comment_created': datetime.datetime(2020, 8, 16, 9, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': '97d82387e4742101024f60658a4227730bb74c3d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '223fd34ebdfb4ba44fa8bbca6e6c65632c38238c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a8cec6be2cde4746c31f5bcb82c95ea8faee6c1', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ba6cd2a1c6b352b2fa2c4a8f7bf9f16a77436a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bd731906a2cd5b455ef480bb0813af64b4dc470', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba79d8e3a077365fd933699fb9ab42df279ff8cc', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c45d93ad95e96338785d980984217e4e47f87d1', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7133bc1fe507ae923038f1a893a02e284161fbb', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b5f0a2002b1c0b14899afd145f7067959d4cc0', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '430c4cefbb37f6ae83e9ab726ee64a8733b14717', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b7cbbd1aadb2a5a2710c47f7af1115dab13bbe1', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8279aca65d3aac8fb3de51100f7ac9b6e41ba8b7', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '503279cc09e7c911289a80924bdcfcf2580bcf32', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b27c4f833307926f227a3b7e80cd30728048c3', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a204b71d4e9e7adec9835b9cef2f2a2e89c2d2e6', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0339db831adbf748f6a76c1f7572bbaf3c6686ff', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd986bf8037de8f8fe785a3d41f95866e6cc7860', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b669e2f7edb3c6b3362af60ae35213a8891a0f89', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28c70cbdc2af1715265431f980894e4c74359169', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57ba8decaa6a90021a626135c067dbe1f442296', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd6a7261f5956b581f9c7554df13d3f1a0c27d1', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f56b134abd9101513aebbe46ef613db42daca5', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb2d33a80f1ca5047dddce8729d224961aeac32', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51cd7c7aad559237c68ad559c9cdb3992e1de0ef', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09ae4091f69f48df74e3c162b614d89f89ce77c2', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72f8b5c5bd86b228458290b36bee6bcc62cb5f38', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb599f396305da0e905fd04ff5c2923f8e262c00', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1716407e40a6b35dc9699a9969df30be580aee', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcdf3a07e10d5e432129adca979e1a03da5a4a97', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cec6d291483fa662fd23867543c53879d2dfdeb', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1edf723757e97aa679ff4b3a5fe3e8286466e67f', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '970703a4baaf2de16c55efb4fd0fae3d769e8416', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '357d7c89a1b3303ce2ffb22818310d691d3148ba', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
444491582,feat(dhall-docs): Add test-setup and assertions as examples,"Hi there!

First things first: I apologize about not being so active this (almost ended) week. I had to finish some things from my university that needed to be done for this next week, so I had to take some time from this to do them.

I'll try to brief all the details that this (kind of big) PR includes.

The most important thing is the test-setup. I decided to go with a golden-test setup using tasty-silver similar to what we've done on `dhall-{json,yaml}`. Basically:

* There is a package folder at `dhall-docs/tasty/data/package`
* The golden files are located at `dhall-docs/tasty/data/golden`
* If the dhall file `[path]/foo.dhall` is on the package folder, the `[path]/foo.dhall.html` is on the golden folder.
* These tests are most to check that we didn't break anything, not to do some kind of TDD with them since it is not viable to write the golden files by hand because `lucid` doesn't provide a way to render html as text in a non-minified way (check the golden files for a example).
* The `--accept` flag is the best thing people invented. It not only updates the files, but create new ones if the file is missing. This is useful to add new tests by adding a new file on the package folder.
* The whole setup fitted under 57 lines and we probably won't have to modify anymore, just add new dhall files on the package folder.

... but before doing this whole test-setup, I had to basically rewrite the whole logic for document generation (thanks god I splitted `Html ()` generation from there). Specifically:

* I separated the pure and impure parts from the Document generation. The core logic to generate documentation is `IO` free
* I used a `Writer` monad to properly handle warnings.
* The most trickiest part was the `createIndexes` function, probably it can be improved and moreover it may be difficult to understand.
* The whole API for the `Core.hs` module (and basically all the `dhall-docs` one) is `generateDocs`, `generatedDocsPure` and `GeneratedDocs`

...and to end, I added assertions as examples on the test files.

I need to say that the new code, although it was difficult to get it right, looks way cleaner from my perspective. Also, tests adds a lot of value to `dhall-docs`, and I'd like to thanks @sjakobi for the suggestion to do this.",True,1899,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/1899,https://github.com/dhall-lang/dhall-haskell/pull/1899,closed,1798,197,35,21,22,30,2,0,"[{'name': 'merge me'}, {'name': 'dhall-docs'}]",2020-07-06 01:22:15+00:00,2020-07-08 05:01:13+00:00,185938.0,"2 days, 3:38:58","[{'comment_id': 450292627, 'comment_body': '```suggestion\r\n    We should always try to do as little work as possible in an `IO` context.\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 15, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450294794, 'comment_body': 'The error message should probably indicate which file is being skipped', 'comment_created': datetime.datetime(2020, 7, 6, 15, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450301086, 'comment_body': 'What about a path that already has `..` as a path component, such as `a/..`?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450304008, 'comment_body': '```suggestion\r\n        ""\\n\\ESC[1;33mWarning\\ESC[0m: Header comment is not markdown\\n\\n"" <>\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 15, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450307294, 'comment_body': '```suggestion\r\n    error $ ""\\ESC[1;31mError\\ESC[0mDocumentation generator bug\\n\\nThis should not happen.\\n"" <>\r\n```\r\n\r\nI also suggest using an error text similar to the `Dhall.Util.internalError` utility:\r\n\r\nhttps://hackage.haskell.org/package/dhall-1.33.1/docs/src/Dhall.Syntax.html#internalError\r\n\r\nIn particular, you probably want to avoid suggesting a title for the user\'s issue; the user is more likely to generate a useful title on their own.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450310912, 'comment_body': '```suggestion\r\ntype DocGenerator = GeneratedDocs [(Path Rel File, Text)]\r\n\r\n-- | The result of the doc-generator pure component\r\ndata GeneratedDocs a = GeneratedDocs a [DocsGenWarning]\r\n```\r\n\r\nInstead of using two separate types, you can use a single type if you add a type parameter to `GeneratedDocs` and implement `instance MonadWriter [DocsGenWarning] GeneratedDocs`', 'comment_created': datetime.datetime(2020, 7, 6, 15, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450313683, 'comment_body': 'Did you mean to leave behind this comment?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 450318989, 'comment_body': 'paths from the `path` package never contains those.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 450372425, 'comment_body': ""The `err` already contains that information, if you don't mind about having duplicating the file location, I can update it."", 'comment_created': datetime.datetime(2020, 7, 6, 17, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 450793495, 'comment_body': 'Why did you go with an upper bound here, but with a lower bound for many of the other dependencies?', 'comment_created': datetime.datetime(2020, 7, 7, 11, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450794927, 'comment_body': ""I wonder whether these methods ought to have `INLINE` pragmas. I'd probably just add them to be safe."", 'comment_created': datetime.datetime(2020, 7, 7, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450800374, 'comment_body': 'Maybe use `partitionEithers` to do the pass in a single traversal.', 'comment_created': datetime.datetime(2020, 7, 7, 11, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450802391, 'comment_body': 'This might cause problems with Haddock.\r\n\r\n```suggestion\r\n    -- Files grouped by their directory\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 11, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450802969, 'comment_body': 'Please add a comment and/or example that explains what this does.', 'comment_created': datetime.datetime(2020, 7, 7, 11, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450807533, 'comment_body': ""Where's the invalid markdown?"", 'comment_created': datetime.datetime(2020, 7, 7, 11, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450810554, 'comment_body': ""I wonder whether this can handle properties like https://github.com/dhall-lang/dhall-lang/blob/f035ea1947d9392bcedbe7f8c563f33559370efd/Prelude/Natural/lessThanEqual#L14-L16 or [this example](https://github.com/dhall-lang/dhall-lang/blob/87993319329f3c00920d6e882365276925a4aa6a/Prelude/JSON/render.dhall#L23-L47). \r\n\r\nAdmittedly I'm also unsure _what_ the expected output should look like. ;)"", 'comment_created': datetime.datetime(2020, 7, 7, 11, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450812174, 'comment_body': 'Nice! :+1: ', 'comment_created': datetime.datetime(2020, 7, 7, 12, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450819854, 'comment_body': ""The code inside this function feels kind of messy and impenetrable. I'm not sure how to best fix it though.\r\n\r\nI somewhat wonder whether the `(Map (Path Rel Dir))` is a good fit for this logic, or if possibly a custom tree structure would be a better fit."", 'comment_created': datetime.datetime(2020, 7, 7, 12, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 450820664, 'comment_body': ""```suggestion\r\nShould be ignored since it's syntactically invalid\r\n```"", 'comment_created': datetime.datetime(2020, 7, 7, 12, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 451075296, 'comment_body': 'Ah, then never mind.  That is fine', 'comment_created': datetime.datetime(2020, 7, 7, 18, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 451077155, 'comment_body': 'I think the trailing backtick on the first line is the invalid markdown', 'comment_created': datetime.datetime(2020, 7, 7, 18, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 451078697, 'comment_body': ""As a general rule of thumb I suggest not adding `INLINE`/`INLINABLE` pragmas unless they're known to improve performance.  The reason why is that they will bloat the size of Haskell interface (`.hi`) files and increase compile times."", 'comment_created': datetime.datetime(2020, 7, 7, 19, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 451112506, 'comment_body': 'basically because I copied that from other test setups.\r\n\r\nRegarding other lower bounds: basically because I know my code works in those version. I can add semantic upper bounds to those', 'comment_created': datetime.datetime(2020, 7, 7, 20, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451113119, 'comment_body': ""Then I won't add them. We'll wait for those perf issues."", 'comment_created': datetime.datetime(2020, 7, 7, 20, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451114988, 'comment_body': ""Okay! I often don't use upper bounds for test suite dependencies because it's fairly inconsequential when the testsuite breaks due to a change in a dependency."", 'comment_created': datetime.datetime(2020, 7, 7, 20, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 451115076, 'comment_body': 'mmmm maybe we could traverse the `Lam` constructor on the binding and remove the assert there?\r\n\r\nThe issue is that we might need to traverse all the binded values in the file and check if there is at least an assert, which might add some overhead.\r\n\r\nIf a binding has `assert`ions, we remove them. Then for that property example:\r\n\r\n```dhall\r\nlet property0 = λ(n : Natural) → assert : lessThanEqual 0 n ≡ True\r\n```\r\n\r\nwe should strip the assert and we might be ready to go:\r\n\r\n```dhall\r\nλ(n : Natural) → lessThanEqual 0 n ≡ True\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 7, 20, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451115366, 'comment_body': 'Thanks! Looks really great actually :smile:', 'comment_created': datetime.datetime(2020, 7, 7, 20, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451121210, 'comment_body': ""IKR!?\r\n\r\nThe most messy part IMO is the `dirToDirsMap`, that was the best I could do to get it right.\r\n\r\nIf you're wondering what it does (probably could guide me to another solution) is to try to _compact_ listed paths as much as it can.\r\n\r\nfor isntance, the folders at the `tasty/data/package` are the following:\r\n\r\n```\r\n./\r\n./a/\r\n./a/b/\r\n./a/b/c/\r\n./deep/\r\n./deep/nested/\r\n./deep/nested/folder\r\n```\r\n\r\nbut on `./deep/` and `./deep/nested/` folders there is no file.\r\n\r\nSo it's kind of dissapointing if the package directory at `./` listed `./deep/index.html` and the last listed `./deep/nested/index.html` to finally list `./deep/nested/folder/index.html`.\r\n\r\nSo what it does is to compact paths as much as it cans, without altering the actual directory structure.\r\n\r\nAn expected output for that directory structure is the output in the golden files:\r\n\r\n```\r\n./\r\n./a/\r\n./a/b/\r\n./a/b/c/\r\n./deep/nested/folder\r\n```\r\n\r\nI'm still thinking a better solution or at least a more readable one. Get back to you if I find out something."", 'comment_created': datetime.datetime(2020, 7, 7, 20, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451280235, 'comment_body': ""@sjakobi: The most I could do was to use `foldl` instead of passing the whole list to `go` at `dirToDirsMap`.\r\n\r\nAnother idea I got was the following (pseudocode):\r\n\r\n```\r\ndef f(sortedDirs):\r\n    stack = [sortedDirs[0]]\r\n    map = { sortedDirs[0] = [ ] }\r\n\r\n    for i in range(sortedDirs):\r\n        t = stack.top()\r\n        d = sortedDirs[i]\r\n        if t prefix of d:\r\n            stack.push(d)\r\n            map[t].add(d)\r\n        else:\r\n            while stack.top() not prefix of d:\r\n                stack.pop()\r\n            map[stack.top()].add(d)\r\n            stack.push(d)\r\n\r\n    return map\r\n```\r\n\r\n... but couldn't write a legible implementation, at least not better than our current one.\r\n\r\nI haven't tried yet using a tree-like structure, but I think for that in another PR."", 'comment_created': datetime.datetime(2020, 7, 8, 4, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'german1608', 'type': 'User'}, {'comment_id': 451492813, 'comment_body': ""In general, I'd recommend using `foldl'` over `foldl` for folding over lists. There's a bit of a discussion here: https://github.com/hasura/graphql-engine/pull/2933#discussion_r328821960"", 'comment_created': datetime.datetime(2020, 7, 8, 12, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': 'fb9f6a6bcb9baf23826d1f292a71a40a6fe84b0c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '957d040211b2b8bb081b0143ca9eb9b9a295a775', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20fd5a558f36462ec7fe2f15ee43cfbae7bb7bb2', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b43dd884023c6522b933891f5e5eaa8d31dc9c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87091c0222792a31550beff477bb27b3aac56159', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dea75988874ec4eee2f9203f68a5ee6e3dd7146', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f47a3627575985d1e645ca5082b226b10377d7f4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1830d9d8ec6f7b5ebe360d684d16314c270d210', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db0bff55ed302754bfc7a5663cb32ed06e2805fd', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f778b0af38b60d72e8f164a04851b855079020d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fd324be4a9d2f08de5cc058698d5cc0f0ecee92', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2793d0bca0396127e0ee0d217a05356701db2df', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176778caa1a27e7ddaba8615f602209e4e56c073', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d8c8212ea94effa987c907b79205db0f1566c0f', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180907857df2df20ba23aabb982305db46ff3fc7', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15fd07ad0ae2f5b733efc9b816d5d256b32921bf', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf30e2f1ac82e50fac916f0b7c30371337f9ca7', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '259868025ec7c674d776057490a656def96b24b4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54d81ecc42369ed48351236a0ebe0f73af4517c', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef89376b267c2871824221b568dee92754a4253b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1b7c6be5171cef1488425af900588da0ee238d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
419894740,feat(parser tests): add keyword record fields failure tests,"Standard requires that record field labels must not be language keywords. This PRs introduces a test for each reserved keyword, excepting `Some` (see #1012).

All of them should fail on all implementations",True,1013,https://api.github.com/repos/dhall-lang/dhall-lang/pulls/1013,https://github.com/dhall-lang/dhall-lang/pull/1013,closed,15,0,15,5,1,1,0,0,[],2020-05-19 05:55:26+00:00,2020-05-30 13:04:33+00:00,976147.0,"11 days, 7:09:07","[{'comment_id': 427862467, 'comment_body': 'This is the same as the test above (`01`). Maybe it should be `else` instead of `then`?!', 'comment_created': datetime.datetime(2020, 5, 20, 9, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': 'cea4c9382ad29b899e331ddff5cec1ea5d28916a', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74cb6289fe814e952767af48d1f360b7fc78e253', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8ee2bc35fe5ab647492a63e947da57daa41ca05', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a0db153e027713bdb1b3022c0b162c7db23198', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a801745507706b8b9ffcb999e62b334c597f44', 'committer_username': 'sjakobi', 'committer_name': 'Simon Jakobi', 'committer_email': 'simon.jakobi@gmail.com', 'commit_date': datetime.datetime(2013, 2, 22, 0, 6, 25, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
434189383,feat(prelude): add .dhall extensions on prelude functions,"As part of GSoC, I'm currently building a doc generator for the dhall configuration language. One of the issues that I faced was how we should extract files from a dhall package and after several discussions with my mentors (cc: @Gabriel439 , @sjakobi and @Profpatsch) we decided to fetch files by their .dhall extension.

Currently the only files in the dhall prelude that have the .dhall extensions were the `package.dhall` files in each sub-package and it's really awkard that this tool is not compatible with the main package of dhall, so this PR attempts to add a .dhall extension on each file.

I added them in a compatible way (thanks to @Gabriel439 for the idea): For each file on the package, take the `filename` and rename it to `filename.dhall`. Also create a file named `filename` with the following contents:

```dhall
./filename.dhall
```

That way when users refer to, for example, `Prelude/Bool/and`, `dhall` will look for the implementation on `filename.dhall`.

The PR is really big though its a lot of the same",True,1026,https://api.github.com/repos/dhall-lang/dhall-lang/pulls/1026,https://github.com/dhall-lang/dhall-lang/pull/1026,closed,4464,4182,282,15,2,0,0,0,[],2020-06-14 19:18:19+00:00,2020-07-01 03:33:56+00:00,1412137.0,"16 days, 8:15:37",[],"[{'commit_sha': '88367530c568bddb81a20d7632d44245db114bfd', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74332f99693c2326cc71b036b4c253804417e6b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50439bdf940431de9ecdadc50c014c03b2d71c07', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32b8eea9026f018540f8756d308e5704995ef4f6', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0e6d2df5340e2a202645abd342b846d490869e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dbb76a0e00739cdd3bd7f3d5bb5db844bce8f0d', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a89dd662894518ba4df86c000febbad11052581', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6110d4f16eb7b74afc2a163235734d6114dedf', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a0d199f1aecb336de472a7cd1307f62217f60ae', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb2ae781b747cd7b75ebe0a810f445d9d2eab1fc', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c97f22e6127645cf2170df912ee126bf5ddb7c00', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39712a8bad3d5b2b4ba45e615dc5d708afe0208', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0912180a89b8bb8ae41f543ac5b61aa9b7aea0a1', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e5ad95d4feee9e5d46c7e66c676ee76c85e69e3', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55fb6396c8ba15af96bb45a7b0822b18fa75219b', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
468253648,feat(dhall-docs): amend relative import expressions on Prelude to use .dhall extension,"On https://github.com/dhall-lang/dhall-haskell/pull/1959 I made relative and remote import expressions on rendered source code clickable and navigatable, but on the Prelude, most of the links give 404 since they refer to a file that isn't present on the generated documentation.

This PR fixes all imports to include a `.dhall` extension.

Also, it removes (again) the `.dhall.dhall` extensions. On #1045 they were accidentally added again",True,1053,https://api.github.com/repos/dhall-lang/dhall-lang/pulls/1053,https://github.com/dhall-lang/dhall-lang/pull/1053,closed,434,514,70,3,1,0,0,0,[],2020-08-15 03:29:12+00:00,2020-08-25 00:48:01+00:00,854329.0,"9 days, 21:18:49",[],"[{'commit_sha': '9aa64f9b1f4d54ad43eff833c22f3a71e7086c3e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d45dffa42333073299531dfe20e2bb0648c5f18', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d87b35c7d730b6c8890c55eba33bc307a0cbbe4', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57
473597776,Version 17.1.0 → 18.0.0,,True,1059,https://api.github.com/repos/dhall-lang/dhall-lang/pulls/1059,https://github.com/dhall-lang/dhall-lang/pull/1059,closed,44,2,3,3,0,1,0,0,[],2020-08-26 02:03:48+00:00,2020-09-01 21:15:28+00:00,587500.0,"6 days, 19:11:40","[{'comment_id': 477038347, 'comment_body': 'v18.0.0', 'comment_created': datetime.datetime(2020, 8, 26, 5, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'philandstuff', 'type': 'User'}]","[{'commit_sha': 'b559019aecab147ac39ecad6890f06908d2dc768', 'committer_username': 'Gabriella439', 'committer_name': 'Gabriella Gonzalez', 'committer_email': 'GenuineGabriella@gmail.com', 'commit_date': datetime.datetime(2012, 1, 8, 23, 51, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc0ad74f34e79e3b23dca2cf09c79d54c121280', 'committer_username': 'Gabriella439', 'committer_name': 'Gabriella Gonzalez', 'committer_email': 'GenuineGabriella@gmail.com', 'commit_date': datetime.datetime(2012, 1, 8, 23, 51, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afaf3a4d871cb340e043329f72dc4c23b792caa3', 'committer_username': 'Gabriella439', 'committer_name': 'Gabriella Gonzalez', 'committer_email': 'GenuineGabriella@gmail.com', 'commit_date': datetime.datetime(2012, 1, 8, 23, 51, 20, tzinfo=datetime.timezone.utc)}]",Gabriella Gonzalez,1313787,GenuineGabriella@gmail.com,User,,239,,14,2035
471144579,feat(type-on-hover): Add type-on-hover on boolean and natural literals,"This is the first implementation of the type-on-hover feature. It is currently a draft and it is intended to be really small (excluding the golden file updates).

The reason for this PR to be that small is because this idea will be expanded on further PRs related to type-on-hover. So please let me know what you think and what can be improved before working on the next elements that will have this feature.

The tooltip library that I'm using is https://atomiks.github.io/tippyjs/, which is really lightweight.

I wanted to add jump-to-definition on imports before this, but I got blocked on that... didn't found the best way to do it. My problem is with implementation, I got an idea which I described [here (comment)](https://github.com/dhall-lang/dhall-haskell/issues/1994#issuecomment-675622903). Path manipulation was really messy and I felt that working on this feature first might be better because I already had a clearer idea about how to do this and I prefer to deliver as much work before ending the program as I can.

To end, I feel that the `dhall-docs` package structure is not the best... do you have any advice about organizing Haskell packages? I feel that the entire tool can fit roughly in a single file :laughing: ",False,2005,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2005,https://github.com/dhall-lang/dhall-haskell/pull/2005,closed,446,75,55,5,3,2,0,0,[],2020-08-20 18:05:29+00:00,2021-01-15 04:12:44+00:00,12737235.0,"147 days, 10:07:15","[{'comment_id': 474328314, 'comment_body': 'I recommend studying how `dhall-lsp-server` does this:\r\n\r\nhttps://github.com/dhall-lang/dhall-haskell/blob/master/dhall-lsp-server/src/Dhall/LSP/Backend/Typing.hs\r\n\r\nFor example, one trick you can reuse from that code is to use the `subExpressions` `Traversal` to detect if a term has children or not when deciding whether or not to create a type tooltip', 'comment_created': datetime.datetime(2020, 8, 20, 23, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 474710108, 'comment_body': 'This could be formatted more nicely.', 'comment_created': datetime.datetime(2020, 8, 21, 13, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': '78ef209ea351091ed5e0b120826f1dd3853527e7', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f084fe70be38786a88e0a38c96c3eee96b7556', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '022c39bc3396a5330cbef2362db4133ad733a072', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8838948fcfb21db4c7f96d7fc54b00bd0749d43e', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b5003fa67c844af5a3357419aea8d368ccec72', 'committer_username': 'german1608', 'committer_name': 'German Robayo', 'committer_email': 'germanrobayo33@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 23, 59, 41, tzinfo=datetime.timezone.utc)}]",German Robayo,29154504,germanrobayo33@gmail.com,User,,68,,60,57

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
67623822,dhall-haskell,dhall-lang/dhall-haskell,Dhall,211,910,29,139,1997,153,146,10,"[{'id': 496401146, 'number': 2059, 'closed': datetime.datetime(2020, 10, 1, 17, 10, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 1, 16, 48, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1320.0, 'time_delta': '0:22:00', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 472843576, 'number': 2008, 'closed': datetime.datetime(2020, 8, 26, 2, 27, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 23, 49, 28, tzinfo=datetime.timezone.utc), 'time_taken': 95857.0, 'time_delta': '1 day, 2:37:37', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 471144579, 'number': 2005, 'closed': datetime.datetime(2021, 1, 15, 4, 12, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 18, 5, 29, tzinfo=datetime.timezone.utc), 'time_taken': 12737235.0, 'time_delta': '147 days, 10:07:15', 'additions': 446, 'deletions': 75, 'state': 'closed'}, {'id': 468574429, 'number': 2002, 'closed': datetime.datetime(2020, 8, 17, 13, 29, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 4, 40, 25, tzinfo=datetime.timezone.utc), 'time_taken': 31753.0, 'time_delta': '8:49:13', 'additions': 293, 'deletions': 375, 'state': 'closed'}, {'id': 467006073, 'number': 1991, 'closed': datetime.datetime(2020, 8, 17, 3, 16, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 21, 2, 45, tzinfo=datetime.timezone.utc), 'time_taken': 368052.0, 'time_delta': '4 days, 6:14:12', 'additions': 1572, 'deletions': 274, 'state': 'closed'}, {'id': 464703236, 'number': 1982, 'closed': datetime.datetime(2020, 8, 9, 16, 27, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 16, 29, 50, tzinfo=datetime.timezone.utc), 'time_taken': 172635.0, 'time_delta': '1 day, 23:57:15', 'additions': 673, 'deletions': 45, 'state': 'closed'}, {'id': 464108308, 'number': 1980, 'closed': datetime.datetime(2020, 8, 7, 16, 24, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 15, 42, 9, tzinfo=datetime.timezone.utc), 'time_taken': 88926.0, 'time_delta': '1 day, 0:42:06', 'additions': 180, 'deletions': 74, 'state': 'closed'}, {'id': 463067142, 'number': 1976, 'closed': datetime.datetime(2020, 8, 5, 15, 54, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 23, 51, 16, tzinfo=datetime.timezone.utc), 'time_taken': 57789.0, 'time_delta': '16:03:09', 'additions': 53, 'deletions': 13, 'state': 'closed'}, {'id': 462325032, 'number': 1969, 'closed': datetime.datetime(2020, 8, 4, 15, 36, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 18, 13, 49, tzinfo=datetime.timezone.utc), 'time_taken': 76988.0, 'time_delta': '21:23:08', 'additions': 28, 'deletions': 15, 'state': 'closed'}, {'id': 461943360, 'number': 1966, 'closed': datetime.datetime(2020, 8, 4, 16, 0, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 5, 2, 49, tzinfo=datetime.timezone.utc), 'time_taken': 125884.0, 'time_delta': '1 day, 10:58:04', 'additions': 904, 'deletions': 113, 'state': 'closed'}, {'id': 459508915, 'number': 1959, 'closed': datetime.datetime(2020, 8, 1, 16, 41, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 19, 3, 56, tzinfo=datetime.timezone.utc), 'time_taken': 164262.0, 'time_delta': '1 day, 21:37:42', 'additions': 753, 'deletions': 637, 'state': 'closed'}, {'id': 456563386, 'number': 1945, 'closed': datetime.datetime(2020, 7, 26, 16, 40, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 4, 22, 55, tzinfo=datetime.timezone.utc), 'time_taken': 130663.0, 'time_delta': '1 day, 12:17:43', 'additions': 34, 'deletions': 79, 'state': 'closed'}, {'id': 452324986, 'number': 1929, 'closed': datetime.datetime(2020, 7, 24, 3, 38, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 4, 21, 44, tzinfo=datetime.timezone.utc), 'time_taken': 429398.0, 'time_delta': '4 days, 23:16:38', 'additions': 1407, 'deletions': 132, 'state': 'closed'}, {'id': 450318599, 'number': 1926, 'closed': datetime.datetime(2020, 7, 17, 23, 45, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 16, 12, 19, tzinfo=datetime.timezone.utc), 'time_taken': 113587.0, 'time_delta': '1 day, 7:33:07', 'additions': 1563, 'deletions': 1331, 'state': 'closed'}, {'id': 447693168, 'number': 1912, 'closed': datetime.datetime(2020, 7, 11, 4, 27, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 0, 35, 46, tzinfo=datetime.timezone.utc), 'time_taken': 13894.0, 'time_delta': '3:51:34', 'additions': 56, 'deletions': 1, 'state': 'closed'}, {'id': 447480335, 'number': 1908, 'closed': datetime.datetime(2020, 7, 17, 20, 46, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 14, 43, 13, tzinfo=datetime.timezone.utc), 'time_taken': 626595.0, 'time_delta': '7 days, 6:03:15', 'additions': 501, 'deletions': 306, 'state': 'closed'}, {'id': 445989652, 'number': 1901, 'closed': datetime.datetime(2020, 7, 8, 17, 31, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 5, 53, 5, tzinfo=datetime.timezone.utc), 'time_taken': 41884.0, 'time_delta': '11:38:04', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 444491582, 'number': 1899, 'closed': datetime.datetime(2020, 7, 8, 5, 1, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 1, 22, 15, tzinfo=datetime.timezone.utc), 'time_taken': 185938.0, 'time_delta': '2 days, 3:38:58', 'additions': 1798, 'deletions': 197, 'state': 'closed'}, {'id': 442428373, 'number': 1898, 'closed': datetime.datetime(2020, 7, 1, 23, 28, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 4, 11, 31, tzinfo=datetime.timezone.utc), 'time_taken': 69428.0, 'time_delta': '19:17:08', 'additions': 146, 'deletions': 147, 'state': 'closed'}, {'id': 441611499, 'number': 1895, 'closed': datetime.datetime(2020, 6, 29, 23, 30, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 19, 41, 58, tzinfo=datetime.timezone.utc), 'time_taken': 13706.0, 'time_delta': '3:48:26', 'additions': 174, 'deletions': 43, 'state': 'closed'}, {'id': 441012480, 'number': 1892, 'closed': datetime.datetime(2020, 6, 28, 17, 1, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 6, 54, 3, tzinfo=datetime.timezone.utc), 'time_taken': 36424.0, 'time_delta': '10:07:04', 'additions': 155, 'deletions': 22, 'state': 'closed'}, {'id': 438610246, 'number': 1876, 'closed': datetime.datetime(2020, 6, 25, 15, 33, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 14, 28, 46, tzinfo=datetime.timezone.utc), 'time_taken': 176703.0, 'time_delta': '2 days, 1:05:03', 'additions': 346, 'deletions': 224, 'state': 'closed'}, {'id': 437481933, 'number': 1871, 'closed': datetime.datetime(2020, 6, 21, 23, 37, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 1, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 79892.0, 'time_delta': '22:11:32', 'additions': 78, 'deletions': 33, 'state': 'closed'}, {'id': 435355666, 'number': 1863, 'closed': datetime.datetime(2020, 6, 19, 16, 56, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 17, 12, 1, tzinfo=datetime.timezone.utc), 'time_taken': 258292.0, 'time_delta': '2 days, 23:44:52', 'additions': 281, 'deletions': 73, 'state': 'closed'}, {'id': 433773536, 'number': 1848, 'closed': datetime.datetime(2020, 6, 15, 16, 38, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 16, 15, 49, tzinfo=datetime.timezone.utc), 'time_taken': 260536.0, 'time_delta': '3 days, 0:22:16', 'additions': 426, 'deletions': 102, 'state': 'closed'}, {'id': 430562374, 'number': 1845, 'closed': datetime.datetime(2020, 6, 11, 12, 52, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 1, 26, 35, tzinfo=datetime.timezone.utc), 'time_taken': 300363.0, 'time_delta': '3 days, 11:26:03', 'additions': 479, 'deletions': 10, 'state': 'closed'}, {'id': 429273790, 'number': 1843, 'closed': datetime.datetime(2020, 6, 6, 19, 29, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 15, 45, 2, tzinfo=datetime.timezone.utc), 'time_taken': 13470.0, 'time_delta': '3:44:30', 'additions': 52, 'deletions': 36, 'state': 'closed'}, {'id': 426925585, 'number': 1833, 'closed': datetime.datetime(2020, 6, 4, 3, 59, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 2, 30, 55, tzinfo=datetime.timezone.utc), 'time_taken': 91707.0, 'time_delta': '1 day, 1:28:27', 'additions': 251, 'deletions': 55, 'state': 'closed'}, {'id': 421637278, 'number': 1806, 'closed': datetime.datetime(2020, 5, 22, 5, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 23, 27, 43, tzinfo=datetime.timezone.utc), 'time_taken': 20026.0, 'time_delta': '5:33:46', 'additions': 31, 'deletions': 24, 'state': 'closed'}, {'id': 419889398, 'number': 1801, 'closed': datetime.datetime(2020, 5, 20, 4, 4, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 5, 37, 42, tzinfo=datetime.timezone.utc), 'time_taken': 80828.0, 'time_delta': '22:27:08', 'additions': 83, 'deletions': 66, 'state': 'closed'}, {'id': 419180333, 'number': 1799, 'closed': datetime.datetime(2020, 5, 22, 4, 13, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 21, 57, 13, tzinfo=datetime.timezone.utc), 'time_taken': 368200.0, 'time_delta': '4 days, 6:16:40', 'additions': 334, 'deletions': 137, 'state': 'closed'}, {'id': 417752696, 'number': 1793, 'closed': datetime.datetime(2020, 5, 17, 16, 56, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 5, 2, 54, tzinfo=datetime.timezone.utc), 'time_taken': 302027.0, 'time_delta': '3 days, 11:53:47', 'additions': 114, 'deletions': 76, 'state': 'closed'}, {'id': 417119240, 'number': 1788, 'closed': datetime.datetime(2020, 5, 14, 11, 15, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 5, 7, 2, tzinfo=datetime.timezone.utc), 'time_taken': 108537.0, 'time_delta': '1 day, 6:08:57', 'additions': 123, 'deletions': 70, 'state': 'closed'}]"
102303588,dhall-lang,dhall-lang/dhall-lang,Dhall,173,4189,63,86,763,148,94,5,"[{'id': 468253648, 'number': 1053, 'closed': datetime.datetime(2020, 8, 25, 0, 48, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 3, 29, 12, tzinfo=datetime.timezone.utc), 'time_taken': 854329.0, 'time_delta': '9 days, 21:18:49', 'additions': 434, 'deletions': 514, 'state': 'closed'}, {'id': 452250975, 'number': 1039, 'closed': datetime.datetime(2020, 7, 27, 1, 13, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 1, 23, 8, tzinfo=datetime.timezone.utc), 'time_taken': 690645.0, 'time_delta': '7 days, 23:50:45', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 434189383, 'number': 1026, 'closed': datetime.datetime(2020, 7, 1, 3, 33, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 19, 18, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1412137.0, 'time_delta': '16 days, 8:15:37', 'additions': 4464, 'deletions': 4182, 'state': 'closed'}, {'id': 419894740, 'number': 1013, 'closed': datetime.datetime(2020, 5, 30, 13, 4, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 5, 55, 26, tzinfo=datetime.timezone.utc), 'time_taken': 976147.0, 'time_delta': '11 days, 7:09:07', 'additions': 15, 'deletions': 0, 'state': 'closed'}]"
