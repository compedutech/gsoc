pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
966429386,Fix part of #14033: Added Mypy type annotations to some files of `domain` folder. -- M1.2,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033 
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - auth_services.py 
 - change_domain.py
 - customization_args_util.py
- improvements_services.py
 - interaction_registry.py
 - learner_goals_services.py
 - playthrough_issue_registry.py
 - recommendations_services.py
 - subscription_services.py
 - taskqueue_services.py


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15580,https://api.github.com/repos/oppia/oppia/pulls/15580,https://github.com/oppia/oppia/pull/15580,closed,1064,584,34,51,22,90,0,1,[],2022-06-14 04:25:09+00:00,2022-06-24 23:58:37+00:00,934408.0,"10 days, 19:33:28","[{'comment_id': 897587645, 'comment_body': 'I think this should be Optional[str] not str, because for profile user `gae_id` and `firebase_auth_id` is None, and for full user `parent_user_id` is None. Also, this same thing is mentioned in `UserAuthDetailsModel`.\r\nhttps://github.com/oppia/oppia/blob/bd159ef1fa54d875e6c78551dcbbf5c518565508/core/storage/auth/gae_models.py#L45\r\n\r\nAlso, looking at the validate() function it supports the fact that these arguments should be Optional[str].\r\nhttps://github.com/oppia/oppia/blob/bd159ef1fa54d875e6c78551dcbbf5c518565508/core/domain/auth_domain.py#L194', 'comment_created': datetime.datetime(2022, 6, 15, 6, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 897587967, 'comment_body': 'Importing it directly into the file results in failing of backend tests. Also, this is imported only for type checking.\r\n```\r\n------------------------------------------------------\r\n    WARNING: FAILED TO RUN core.domain.interaction_registry_test\r\n\r\n    This is most likely due to an import error.\r\n------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/scripts/run_backend_tests.py"", line 458, in main\r\n    test_count = int(tests_failed_regex_match.group(1))\r\nAttributeError: \'NoneType\' object has no attribute \'group\'\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File ""/home/struct_shushi/.pyenv/versions/3.7.10/lib/python3.7/runpy.py"", line 193, in _run_module_as_main\r\n    ""__main__"", mod_spec)\r\n  File ""/home/struct_shushi/.pyenv/versions/3.7.10/lib/python3.7/runpy.py"", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/scripts/run_backend_tests.py"", line 603, in <module>\r\n    main()\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/scripts/run_backend_tests.py"", line 476, in main\r\n    raise task.exception from e\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/scripts/concurrent_task_utils.py"", line 98, in run\r\n    self.task_results = self.func()\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/scripts/run_backend_tests.py"", line 190, in run\r\n    result = run_shell_cmd(exc_list, env=env)\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/scripts/run_backend_tests.py"", line 160, in run_shell_cmd\r\n    raise Exception(\'Error %s\\n%s\' % (p.returncode, result))\r\nException: Error 1\r\nTraceback (most recent call last):\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/tests/gae_suite.py"", line 125, in <module>\r\n    main()\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/tests/gae_suite.py"", line 111, in main\r\n    test_target=parsed_args.test_target,\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/tests/gae_suite.py"", line 60, in create_test_suites\r\n    if test_target else\r\n  File ""/home/struct_shushi/.pyenv/versions/3.7.10/lib/python3.7/unittest/loader.py"", line 154, in loadTestsFromName\r\n    module = __import__(module_name)\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/interaction_registry_test.py"", line 27, in <module>\r\n    from core.domain import exp_services\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/exp_services.py"", line 41, in <module>\r\n    from core.domain import caching_services\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/caching_services.py"", line 25, in <module>\r\n    from core.domain import exp_domain\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/exp_domain.py"", line 39, in <module>\r\n    from core.domain import state_domain\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/state_domain.py"", line 38, in <module>\r\n    from core.domain import interaction_registry  # pylint: disable=invalid-import-from # isort:skip\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/interaction_registry.py"", line 29, in <module>\r\n    from extensions.interactions import base\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/extensions/interactions/base.py"", line 45, in <module>\r\n    from core.domain import visualization_registry\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/visualization_registry.py"", line 23, in <module>\r\n    from extensions.visualizations import models\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/extensions/visualizations/models.py"", line 23, in <module>\r\n    from core.domain import calculation_registry\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/core/domain/calculation_registry.py"", line 23, in <module>\r\n    from extensions.answer_summarizers import models\r\n  File ""/home/struct_shushi/Desktop/opensource-oppia/oppia/extensions/answer_summarizers/models.py"", line 52, in <module>\r\n    exp_domain.EXPLICIT_CLASSIFICATION,\r\nAttributeError: module \'core.domain.exp_domain\' has no attribute \'EXPLICIT_CLASSIFICATION\'\r\n```', 'comment_created': datetime.datetime(2022, 6, 15, 6, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 897588236, 'comment_body': 'In this function, we are not handling the None case of models(subscribers_model_creator,  subscriptions_model_user). So to remove None from them I removed strict=false.', 'comment_created': datetime.datetime(2022, 6, 15, 6, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900098166, 'comment_body': 'Is there a possibility that a parent user will not have any profile users under it? (Not sure)', 'comment_created': datetime.datetime(2022, 6, 17, 13, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900136284, 'comment_body': ""Isn't `expected_customization_args_after_validation` just above this dead code as well?"", 'comment_created': datetime.datetime(2022, 6, 17, 13, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900223139, 'comment_body': ""If we are adding `allowed_values` and `deprecated_values`  keys to all the CmdDicts, is it safe to assume\r\n`deprecated_values = valid_cmd_attribute_specs.get('deprecated_values', {})` in line 80 will always return a dict? \r\n\r\nIf yes we could refactor this line and line 88 to replace the get with \r\n`deprecated_values = valid_cmd_attribute_specs['deprecated_values']`\r\n\r\nDitto for `allowed_values`"", 'comment_created': datetime.datetime(2022, 6, 17, 15, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900281305, 'comment_body': ""Isn't it better to have the type also in the same line.\r\n```py\r\nspecs_from_json: Dict[str, base.BaseInteractionDict] = (\r\n       json.loads(f.read())\r\n)\r\n```"", 'comment_created': datetime.datetime(2022, 6, 17, 15, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900291837, 'comment_body': ""Can't we remove this line and refactor the line below as\r\n`user_models.LearnerGoalsModel(id=learner_goals.id, **learner_goals_dict).put()`\r\n\r\nThis would silent the error right?"", 'comment_created': datetime.datetime(2022, 6, 17, 16, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900296217, 'comment_body': ""Wouldn't this be `Final`?"", 'comment_created': datetime.datetime(2022, 6, 17, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900298357, 'comment_body': 'Can we have the type of `recommended_exploration_ids` in the same line?\r\nLike \r\n```py\r\nrecommended_exploration_ids: List[str] = (\r\n    recommendations_model.recommended_exploration_ids\r\n)\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 16, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900304393, 'comment_body': 'Ditto, as above. Try keeping the type in the same line', 'comment_created': datetime.datetime(2022, 6, 17, 16, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900306009, 'comment_body': 'Same as above.\r\n\r\nTry keeping the type in the same line.', 'comment_created': datetime.datetime(2022, 6, 17, 16, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900313484, 'comment_body': 'Same as above. Lets keep the type of `recommending_models` in the same line \r\n```py\r\n        recommending_models: Sequence[\r\n            recommendations_models.ExplorationRecommendationsModel\r\n        ] = recs_model_class.query(\r\n            recs_model_class.recommended_exploration_ids == exp_id\r\n        ).fetch()\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 16, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 900706145, 'comment_body': 'If a parent user does not contain any profile user, then in that case this method will return an empty List.', 'comment_created': datetime.datetime(2022, 6, 18, 6, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706233, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706238, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706245, 'comment_body': 'Thanks Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706251, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706259, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706267, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706308, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900706315, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 18, 6, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900707213, 'comment_body': 'If we remove `.get()` from here then the backend test fails. Because currently, there are some places in the codebase where these `allowed_values` and `deprecated_values` keys are not added to the `ALLOWED_COMMANDS` dict yet.', 'comment_created': datetime.datetime(2022, 6, 18, 6, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 901017615, 'comment_body': 'Makes sense', 'comment_created': datetime.datetime(2022, 6, 18, 21, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 901308846, 'comment_body': 'with some value, which causes MyPy', 'comment_created': datetime.datetime(2022, 6, 20, 6, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 901308894, 'comment_body': 'last_updated', 'comment_created': datetime.datetime(2022, 6, 20, 6, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 901309155, 'comment_body': 'new attribute (last_update**d**)\r\n\r\n(also, include a space before the opening paren)', 'comment_created': datetime.datetime(2022, 6, 20, 6, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 901322486, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 20, 7, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 901322540, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 20, 7, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 901322590, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 20, 7, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 901736856, 'comment_body': 'Rather than using `cast` use `list`', 'comment_created': datetime.datetime(2022, 6, 20, 14, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901766904, 'comment_body': 'Should we rather use `assert isinstance here?', 'comment_created': datetime.datetime(2022, 6, 20, 14, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901768067, 'comment_body': ""```suggestion\r\n# In argument 'customization_args', we used Any type because it accepts the\r\n# values of customization args and that values can be of type str, int,\r\n# bool, List and other types too. So to make it generalize \r\n# for every type of values, we used Any here.\r\n```"", 'comment_created': datetime.datetime(2022, 6, 20, 14, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901795617, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 6, 20, 15, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901799870, 'comment_body': 'Why can this be optional, it seems to be kinda weird for a boolean.', 'comment_created': datetime.datetime(2022, 6, 20, 15, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901801422, 'comment_body': '```suggestion\r\n\r\nimport datetime\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 15, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901802452, 'comment_body': ""```suggestion\r\n        'new_role': ALLOWED_ACTIVITY_ROLES, 'old_role': ALLOWED_ACTIVITY_ROLES\r\n    },\r\n    'deprecated_values': {}\r\n```"", 'comment_created': datetime.datetime(2022, 6, 20, 15, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901805006, 'comment_body': '```suggestion\r\n\r\nimport datetime\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 15, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901811241, 'comment_body': 'Can you explain why is this needed?', 'comment_created': datetime.datetime(2022, 6, 20, 15, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901813097, 'comment_body': 'ditto above', 'comment_created': datetime.datetime(2022, 6, 20, 15, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901818466, 'comment_body': 'Why are `exp_models` not imported here? Can they be removed from the dynamic import below?', 'comment_created': datetime.datetime(2022, 6, 20, 15, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901823877, 'comment_body': 'I think for JSONs we should add a TODO for using https://pypi.org/project/typing-json/ later, I might have already created an issue, but not sure now.', 'comment_created': datetime.datetime(2022, 6, 20, 16, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901825011, 'comment_body': 'Uh, can we use `list`?', 'comment_created': datetime.datetime(2022, 6, 20, 16, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901827378, 'comment_body': 'Can we assign some equal numeric value?', 'comment_created': datetime.datetime(2022, 6, 20, 16, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 901828999, 'comment_body': 'Can this be removed later like the other `# type: ignore[attr-defined]`', 'comment_created': datetime.datetime(2022, 6, 20, 16, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902195247, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 21, 6, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902195534, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 21, 6, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902195868, 'comment_body': 'comment changed everywhere it is applicable.', 'comment_created': datetime.datetime(2022, 6, 21, 6, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902200851, 'comment_body': ""Previously `BaseInteraction`'s class variable (`can_have_solution`) is initialized with `None` value. But I checked every interaction and found that apart from here `None` is never assigned again. So, now it is fixed!!"", 'comment_created': datetime.datetime(2022, 6, 21, 6, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902200920, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 21, 6, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902201093, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 21, 6, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902201180, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 21, 6, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902201447, 'comment_body': '`exp_models` is removed. ', 'comment_created': datetime.datetime(2022, 6, 21, 6, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902209273, 'comment_body': 'I think here `last_updated` is not defined for checking any kind of type_checking. Instead, it is defined to check if returned `tasks` are ordered by `resolved_on` or not.', 'comment_created': datetime.datetime(2022, 6, 21, 6, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902216754, 'comment_body': 'Here, `subscriptions_model.collection_ids` is an instance of `datastore_services.StringProperty` and the return type of these properties is `Any`. So, to narrow down the type form `Any` to `List[str]`, I explicitly annotate them as List[str].    ', 'comment_created': datetime.datetime(2022, 6, 21, 6, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902218286, 'comment_body': 'Similar goes for `subscriptions_model.exploration_ids` because `exploration_ids` is also an instance of  `datastore_services.StringProperty` and the return type here is also `Any`.', 'comment_created': datetime.datetime(2022, 6, 21, 6, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902228492, 'comment_body': 'Here we return a tuple of 3 different types of values. I think we can not use `list` here, because all three types of values are returned simultaneously and packed inside a tuple.', 'comment_created': datetime.datetime(2022, 6, 21, 6, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902241769, 'comment_body': 'I assigned maxdiff with `0`.', 'comment_created': datetime.datetime(2022, 6, 21, 7, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902352398, 'comment_body': 'TODO is added!!', 'comment_created': datetime.datetime(2022, 6, 21, 8, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902385065, 'comment_body': ""Hmm, weird I thought that the types of models work correctly and that we don't need this kind of stuff."", 'comment_created': datetime.datetime(2022, 6, 21, 9, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902388019, 'comment_body': 'But you can rereturn the tuple right?\r\n```suggestion\r\n        results_seq, cursor, more = query.fetch_page(\r\n            feconf.MAX_TASK_MODELS_PER_FETCH,\r\n            start_cursor=cursor\r\n        )\r\n        results_list = list(results_seq)\r\n```\r\n\r\nThis is much safer than `cast`. ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902393966, 'comment_body': 'This seems like we are abusing the `TaskEntry` a bit. Can we save the `last_updated` into some other variable and then work with that variable?', 'comment_created': datetime.datetime(2022, 6, 21, 9, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 902698109, 'comment_body': 'I removed the `.last_updated` because we are just defining it and not accessing it in the rest of the code.', 'comment_created': datetime.datetime(2022, 6, 21, 14, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902705176, 'comment_body': ""```\r\n        results_seq, cursor, more = query.fetch_page(\r\n            feconf.MAX_TASK_MODELS_PER_FETCH,\r\n            start_cursor=cursor\r\n        )\r\n        results_list = list(results_seq)\r\n```\r\nDoing this MyPy throws `error: Need type annotation for 'results_seq'  [var-annotated]`.\r\n\r\nSo, to remove the error and cast. I explicitly declared results as a `Sequence` type.\r\n\r\n```\r\n    results: Sequence[improvements_models.TaskEntryModel] = []\r\n.\r\n.\r\n.\r\n        results, cursor, more = query.fetch_page(\r\n            feconf.MAX_TASK_MODELS_PER_FETCH,\r\n            start_cursor=cursor\r\n        )\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 14, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902709733, 'comment_body': ""Due to the addition of assertion here, Backend coverage fails. And I'm a bit confused about where to add test for this because there is no test file for `change_domain.py`"", 'comment_created': datetime.datetime(2022, 6, 21, 14, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902714514, 'comment_body': 'link for the failing test: (https://github.com/oppia/oppia/runs/6984319705?check_suite_focus=true#step:13:83). \r\nI also tried to fix backend coverage with the explicit assignment \r\n```\r\n            dict_name: str = self.__dict__[name]\r\n            return dict_name\r\n```\r\nbut it also not working.\r\n@vojtechjelinek PTAL!', 'comment_created': datetime.datetime(2022, 6, 21, 14, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902954918, 'comment_body': 'Maybe you will need to add a new test file.', 'comment_created': datetime.datetime(2022, 6, 21, 18, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903484887, 'comment_body': 'Can we define a custom type for this?', 'comment_created': datetime.datetime(2022, 6, 22, 9, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 903485357, 'comment_body': 'Ditto elsewhere.', 'comment_created': datetime.datetime(2022, 6, 22, 9, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 903491127, 'comment_body': 'I think we should not do this because these types of dictionaries are defined only once and used just for testing purposes in the test file. ', 'comment_created': datetime.datetime(2022, 6, 22, 9, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 903618551, 'comment_body': ""While writing tests I found that `__getattr__` is only defined for throwing the `AttributeError`. Because:\r\nIn method `to_dict()`, we are calling `getattr()` only  when we are sure that the attribute exists on `self` by using `hasattr()`.\r\n```\r\n            if hasattr(self, attribute_name):\r\n                base_change_dict[attribute_name] = getattr(\r\n                    self, attribute_name)\r\n```\r\nBut if for some reason `getattr` is not able to fetch that attribute, it calls `__getattr__` before throwing an error and here we are doing `self.__dict__[name]` to raise and catch the exception. So, Lines written after `self.__dict__[name]` is never executed. So, that's why `assert isinstance()` is never covered in coverage.\r\n```\r\n    def __getattr__(self, name: str) -> str:\r\n        # AttributeError needs to be thrown in order to make\r\n        # instances of this class picklable.\r\n        try:\r\n            dict_name = self.__dict__[name] ------------- executed and  exception is raised\r\n            assert isinstance(dict_name, str) ------------- this is never executed because exception is raised before and control is transferred to except block.\r\n            return dict_name -------- never executed.\r\n        except KeyError as e:\r\n            raise AttributeError(name) from e\r\n```\r\nWhile cast() is covered in coverage because it comes under the same line where the exception is raised.\r\n```\r\n    def __getattr__(self, name: str) -> str:\r\n        # AttributeError needs to be thrown in order to make\r\n        # instances of this class picklable.\r\n        try:\r\n            return cast(str, self.__dict__[name]) ------------- executed and  exception is raised\r\n        except KeyError as e:\r\n            raise AttributeError(name) from e\r\n```\r\nAlso, we cannot remove this `__getattr__` because this helps MyPy while reading for attributes. Because in `__init__` method we are setting attributes dynamically."", 'comment_created': datetime.datetime(2022, 6, 22, 11, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 903618672, 'comment_body': '@vojtechjelinek PTAL!', 'comment_created': datetime.datetime(2022, 6, 22, 11, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 903669749, 'comment_body': 'Okay, please explain this in the comment,', 'comment_created': datetime.datetime(2022, 6, 22, 12, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903670042, 'comment_body': '@sahiljoster32 Any information on this?', 'comment_created': datetime.datetime(2022, 6, 22, 12, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903838845, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 22, 14, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 903882218, 'comment_body': ""Ohh really sorry, I forgot to reply here!\r\n\r\nIn our stubs, we have defined the return value of the datastore's property as a Any type: \r\nhttps://github.com/oppia/oppia/blob/b5d0651e10bc75d63f121e0fc23b4fe364a1e053/stubs/google/cloud/ndb/__init__.pyi#L77\r\nI think this is done on purpose because:\r\n1. In the jobs folder `datastore's property` is considered as an instance of  `datastore_services.Property`.\r\n2. In codebase, there are some places where a particular `datastore_services.Property`'s return value is considered as two different types.\r\nI also tried to do `@ overload` here. but due to a very limited number of argument types, I'm not able to produce different function definitions which satisfy the `@ overload`'s requirement. "", 'comment_created': datetime.datetime(2022, 6, 22, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904197368, 'comment_body': ""@sahiljoster32 can you provide examples of where this happens?\r\n\r\n```\r\nIn codebase, there are some places where a particular datastore_services.Property's return value is considered as two different types.\r\n```\r\n\r\nAlso I think overloading makes sense but I don't understand your argument in (2). Could you elaborate on this a bit more?\r\n\r\nWe should try not to use Any here I think, it will have downstream effects on a bunch of things."", 'comment_created': datetime.datetime(2022, 6, 22, 20, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 904719667, 'comment_body': 'Taking an example of `datastore_services.StringProperty` which is inherited from `datastore_services.Property`.\r\n\r\nEg 1: Here, `tags` is defined with `datastore_services.StringProperty` taking arguments `repeated=True, indexed=True` \r\nhttps://github.com/oppia/oppia/blob/b5d0651e10bc75d63f121e0fc23b4fe364a1e053/core/storage/collection/gae_models.py#L177\r\nand it is considered as List[str] in https://github.com/oppia/oppia/blob/b5d0651e10bc75d63f121e0fc23b4fe364a1e053/core/domain/collection_services.py#L815.\r\n But on other hand, `owner_ids` is defined with same `datastore_services.StringProperty` taking same arguments `repeated=True, indexed=True`\r\nhttps://github.com/oppia/oppia/blob/b5d0651e10bc75d63f121e0fc23b4fe364a1e053/core/storage/collection/gae_models.py#L816\r\nand it is compared as `str` here \r\nhttps://github.com/oppia/oppia/blob/b5d0651e10bc75d63f121e0fc23b4fe364a1e053/core/storage/collection/gae_models.py#L897\r\n\r\nEg 2: Here, `ModelProperty` assumes that every `datastore_services.StringProperty` is an instance of `datastore_services.Property`.\r\nhttps://github.com/oppia/oppia/blob/b5d0651e10bc75d63f121e0fc23b4fe364a1e053/core/jobs/types/model_property.py#L53\r\nSo, if we somehow change the return type of `datastore_services.StringProperty` to match it with str and List[str]. Then here in jobs file that return type fails the MyPy tests because after changing the return type it is considered as an instance of str or list.\r\n\r\nWhy Overload is not successful here?\r\nOverload is not successful here because overload requires different combinations of arguments to produce different return type. And here we have only 2 different arguments with the same type in each function definition.\r\n\r\n```\r\nclass StringProperty(TextProperty):\r\n    @overload\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ..., indexed: bool=True, repeated: bool = True) -> List[str]: ... ( here we expect it to return both List[str] and str )\r\n\r\n    @overload\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ..., indexed: bool=True) -> str: ... ( This definition and above definition both fails for jobs files. )\r\n\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ...) -> Any: ...\r\n\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 8, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904730946, 'comment_body': 'Also, The other problem with overloads, in this case is that in some cases we are also providing other keyword arguments like : `Default =` and `choices =`. For this, we have to mention `**kwargs: Any` in overload. So if we define overloads as follows:\r\n```\r\nclass StringProperty(TextProperty):\r\n    @overload\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ..., indexed: bool=True, repeated: bool = True, **kwargs: Any) -> List[str]: ... \r\n\r\n    @overload\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ..., indexed: bool=True, **kwargs: ANy) -> str: ... \r\n\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ...) -> Any: ...\r\n```\r\n\r\nThen overload definition 2 is never matched because every keyword argument is covered inside definition 1 ( by **kwargs: Any)', 'comment_created': datetime.datetime(2022, 6, 23, 8, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904733175, 'comment_body': '@seanlip and @vojtechjelinek PTAL!', 'comment_created': datetime.datetime(2022, 6, 23, 8, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904741079, 'comment_body': 'Hmm, I think `cls.owner_ids == user_id` is very specific case, as internally NDB evaluates this as `user_id in cls.owner_ids`. This should be possible to be ignored.', 'comment_created': datetime.datetime(2022, 6, 23, 8, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904747529, 'comment_body': 'For the `overload` I think it should be possible to handle at least for the most common cases that we use.', 'comment_created': datetime.datetime(2022, 6, 23, 8, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904752883, 'comment_body': 'And we can maybe enforce the order of the kwargs so that it is always matched by MyPy overloads. ', 'comment_created': datetime.datetime(2022, 6, 23, 8, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 904837057, 'comment_body': '```\r\n\r\n> Hmm, I think `cls.owner_ids == user_id` is very specific case, as internally NDB evaluates this as `user_id in cls.owner_ids`. This should be possible to be ignored.\r\n```\r\nthere are 80+ errors in this case! \r\n+ \r\n10+ errors from jobs files, even jobs folder is not annotated yet fully.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904844847, 'comment_body': ""Also, I tried my best to cover these cases with overloads but I found that 2nd overload is never checked ( here I'm confused why this overload is not called, it would be helpful if you take a look )\r\n\r\n```\r\nclass StringProperty(TextProperty):\r\n    @overload\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ..., indexed: bool= ...) -> str: ... \r\n    \r\n    @overload\r\n    def __get__(self, entity: Optional[Model], unused_cls: Type[Model] | None = ..., indexed: Optional[bool] = ..., repeated: Optional[bool] = ...) -> List[str]: ... \r\n```\r\nThis is the overload that i used, Also i checked the Typeshed but i found that there also we are not using overloads instead we are using Union there. \r\n![Screenshot from 2022-06-23 15-40-18](https://user-images.githubusercontent.com/12553576/175275720-9d8f72c8-4b2b-4b62-9dd3-9c8a4ed2db7d.png)\r\n"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904847592, 'comment_body': '@vojtechjelinek PTAL!', 'comment_created': datetime.datetime(2022, 6, 23, 10, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904889080, 'comment_body': ""@seanlip We've discussed this a bit with Sahil and we will put a TODO here and handle this in a debugging doc as we need to make some thinking and decisions."", 'comment_created': datetime.datetime(2022, 6, 23, 11, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 905239861, 'comment_body': 'Hi @seanlip and @vojtechjelinek ,\r\nI  have created an [issue](https://github.com/oppia/oppia/issues/15621) and added its corresponding TODO wherever it is applicable. Also, started a debugging doc which you may find [HERE](https://docs.google.com/document/d/1Qtc2pTv6Wcavt7CZcG5qVpIDAL1kye0-Vhp_yhT6-t0/edit?usp=sharing).  ', 'comment_created': datetime.datetime(2022, 6, 23, 16, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 905732107, 'comment_body': ""Thanks @sahiljoster32! Sounds good -- I'm happy to defer to @vojtechjelinek for the rest of this. \r\n\r\n(Just for context, I only made the comment I did because I saw the note floating past my inbox and thought it wasn't really clear in explaining what was going on, so I figured I'd ask for clarification to help speed up the review process a bit.)"", 'comment_created': datetime.datetime(2022, 6, 24, 5, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 905736345, 'comment_body': ""Thanks for your comment!!, because previously I'm assuming it was a pattern that oppia follows for the ndb property but now I'm clear that it is a bug and we have to fix this ASAP. :)"", 'comment_created': datetime.datetime(2022, 6, 24, 5, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '876151d07b3f22a6dbaeb065f0afc3b6544d7440', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69e72e9cae5c6d761534d8a378e11098ff3d8df1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa582846c79db8555b8c862a7ecfcf57eb42637', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '543e0b9ad9a27067fb1e7c398f17980b61f28868', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f49d283c18f5ed1bd7ef62ade7401643e6b782fa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd54caa50099d588e84b74953608a76c6f3efeb50', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00400bf6ec3cf78a791ee1b9a08c8b1a7fb22025', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2433ba76b2c8e85c35c174b91a36c92e59bb429', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8134142ae6b1b3c6565147d4abdf3d3dadd46d9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97c1c9a47b40265f0a1f8dc90e18e1cfa5ae8133', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17d3214112584082853aaf738cbb1d9e12f098cf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9697258f1fe847634d9aa03732b5438af15544c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9fed048fbb2483b2cc1168b9d853b53758145c8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d97abe09170018745d8e0922b60f4bbd81c320', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb552ead9b5542e0028223674369bf18b5959c36', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba37f868b224a3133387ca4f1c6b5b6aa67bb19', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba0c84b5939e8a6226cedc5b0d200822bb02029', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b18b3c11a6477182e75a717dcb0ca3c58fd000cb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c4df502b9d6368f4d1854791e240d7266a4e1a8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9eda57626f71e31346dc2f69709742734952746', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa993c344da3357210769ecac9fe0313617bc5f5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61241066d3dce98b1ffb9d7eac67c88372dae0b1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05930f28ca82cb70a3b5f91064307d3752ee663c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a858348bfffd2a40e435470d8f7e61d2757ef473', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ae108a0aea9266006039db4030f500e0fe46c0d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c3ad974c4699c7724492a9446452cda2d60774', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b6655ade589debff35ab0074b7cc1d53693f82b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '903a20101f324a722cf19c2c85f4a62953bf053b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba36a77864820756847c9abdcdf35dcdb97f813', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9648c0aacc7b9eb48b5e66c4f2ca88c05700cfd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c23b4259b5e17c0afea8ffeffcb0f62d4a8d37e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030ab1803e806daec3bc7803d1ede925feb2f5b2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dade2ebf8e81f696b838c38c88b16351efa7897', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '462f4db573fbedf2374aa7948e6d461d4482080f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8740c68afedff0df1505be5188992e2cd4e91e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee3c1d06899a2f7ce2abdb1160cffc896abcaed', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '972b873e0532fd1f395bd3e0ad0d9a9f86e7b8ae', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e84a27def7cfb5f0fd0f950329a16e910260d80', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763bec90906785c47ee0de4a9bd2887399b79f28', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c93c5ea263fd6c24e653bfa3ec0014b120aa97', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46270e2951cf738bbb264ec5bfb762336727a58', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5fdb70797a7304ffc56246ba5db494044ffe5a9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddecc6aaadff1459584cdf7634740f1874c04463', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aba5952d96251faef28acfdc507040d7ee7dbde', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbf8fbfa81f8973bcff85b4b7eb12b4ab7864fb7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f8082cccc5e3bcd6b956178b5c949ef595b4c35', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1151716b462b23f55c5d67a2fa4dd6e26f803e59', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2f0033c9f6baee5d752a74668a82df8623d622', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ba68f3f48a0b40542babe89f45b2a87fa4559c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f016cef4f7534cfa5ebe94d3b335f0b5674dacb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dd53ff6ff0250b2ba2edbb34cf67f21310c7576', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
971201443,Fix part of #14033: Added Mypy type annotations to some files of `domain` folder. -- M1.3,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033 .
2. This PR does the following:This PR adds MyPy type infos to the following files.
 - image_validation_services.py
 - learner_playlist_services.py
 - moderator_services.py
 - platform_parameter_domain.py
 - platform_parameter_registry.py
 - rte_component_registry.py
 - rules_registry.py


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15596,https://api.github.com/repos/oppia/oppia/pulls/15596,https://github.com/oppia/oppia/pull/15596,closed,1359,647,25,40,26,100,1,1,[{'name': 'PR: LGTM'}],2022-06-18 07:25:17+00:00,2022-07-03 14:29:04+00:00,1321427.0,"15 days, 7:03:47","[{'comment_id': 900905729, 'comment_body': ""union of `str` and `bytes` is added because this method is used in the controller and there we are accepting basestring ( a type for both str and bytes ). Also, None is added ( by using optional ) because we are handling the `None` case of the `raw_image` in this method's code.\r\n\r\nthe `filename` is also annotated with `optional[str]` because for `filename` we are also handling the `None` case in method's code."", 'comment_created': datetime.datetime(2022, 6, 18, 13, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900915593, 'comment_body': ""Only `platform_type` and `server_mode` is converted because:\r\n1. in codebase there are some cases where we are not providing `browser_type` key or `app_version` key. for eg: https://github.com/oppia/oppia/blob/3f1af7c7c7c418d836b03824e9bb72ca705d11ce/core/domain/platform_feature_services.py#L165\r\n2. Also, after looking at the frontend i found we are not providing the `app_version` key ( Please correct me if I'm wrong here). Link: https://github.com/oppia/oppia/blob/3f1af7c7c7c418d836b03824e9bb72ca705d11ce/core/templates/domain/platform_feature/client-context.model.ts#L48\r\n3. In many test cases either we are not providing `browser_type` key or `app_version` key."", 'comment_created': datetime.datetime(2022, 6, 18, 13, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 900917592, 'comment_body': ""Here, `assertDictEqual` throws an error like ' expected Dict[str, Any] but provided `PlatformParameterDict`'. So to skip that error i used assertEqual."", 'comment_created': datetime.datetime(2022, 6, 18, 13, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902016795, 'comment_body': ""Since the test is a success case, shouldn't `conditions` be of the correct type?\r\nCan we go ahead and make this `List[Tuple[str, str]]` in the test?"", 'comment_created': datetime.datetime(2022, 6, 20, 21, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902031190, 'comment_body': ""Should we rename this function since the number of parameters doesn't match the parent class?"", 'comment_created': datetime.datetime(2022, 6, 20, 22, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902040516, 'comment_body': ""Wouldn't this test work without specifying `app_version` as `None`?\r\n"", 'comment_created': datetime.datetime(2022, 6, 20, 22, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902040594, 'comment_body': ""Same as above\r\nWouldn't this work without this addition?"", 'comment_created': datetime.datetime(2022, 6, 20, 23, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902042498, 'comment_body': 'Should we change this to `List[Tuple[str, str]]`?', 'comment_created': datetime.datetime(2022, 6, 20, 23, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902043611, 'comment_body': 'Can we have the type of this attribute in the same line.\r\n\r\n```py\r\n    DEFAULT_VALUE_BY_TYPE_DICT: Dict[\r\n        platform_parameter_domain.DataTypes, \r\n        Union[bool, str, int]\r\n    ]\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 23, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902043721, 'comment_body': 'Same as above, try to keep the type of the attribute in the same line.', 'comment_created': datetime.datetime(2022, 6, 20, 23, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902046154, 'comment_body': ""Are there any case where `name` is not present?\r\nI see that this function is being called in `platform_parameter_list.py` and `create_feature_flag`. Both of these places aren't passing `None`. "", 'comment_created': datetime.datetime(2022, 6, 20, 23, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902049273, 'comment_body': ""Shouldn't this be `Enum` instead of `platform_parameter_list.PARAM_NAMES`?\r\n\r\nIn that way we can avoid all the ignores in the tests. "", 'comment_created': datetime.datetime(2022, 6, 20, 23, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902049729, 'comment_body': ""Same as above,\r\nShouldn't this be `Enum` ?"", 'comment_created': datetime.datetime(2022, 6, 20, 23, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902053113, 'comment_body': 'Lets have the type of the attribute in the same line.\r\n\r\n```py\r\n    _state_schema_version_to_html_field_types_to_rule_specs: Dict[\r\n        Optional[int], Dict[str, RuleSpecsExtensionDict]\r\n    ] = {}\r\n```', 'comment_created': datetime.datetime(2022, 6, 20, 23, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 902057856, 'comment_body': 'I found that `value` is present as a key for `filters`.\r\ncan you take a look at the docstring of this [function](https://github.com/oppia/oppia/blob/1985420396ee8a0007c1d9407e9627e52113e067/core/storage/config/gae_models.py#L145). ', 'comment_created': datetime.datetime(2022, 6, 21, 0, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 903546939, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 22, 10, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904866032, 'comment_body': 'If we do not add `app_version` here then MyPy test fails, because after adding annotations the first argument of `EvaluationContext.from_dict()` method can only accept `ClientSideContextDict` and in `ClientSideContextDict`, `app_version`,  `browser_type` and `platform_type` key is defined. Missing anyone of the key can cause MyPy to throw error.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904870278, 'comment_body': 'If we do not add `browser_type` here then MyPy test fails, because after adding annotations the first argument of `EvaluationContext.from_dict()` method can only accept `ClientSideContextDict` and in `ClientSideContextDict`, app_version, browser_type and platform_type key is defined. Missing any one of the key can cause mypy to throw error.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904871135, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 10, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904871218, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 10, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904871337, 'comment_body': 'Thanks Done!', 'comment_created': datetime.datetime(2022, 6, 23, 10, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904871406, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 10, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904871481, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 10, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904871565, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 10, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904883464, 'comment_body': 'In this test, the dictionary is first converted to JSON string, and then again converted to python object. So, while converting it from a python object to a JSON string, `Tuple` is converted to a normal List because in JSON I think there is no concept of Tuples. So, if we change this list to a tuple and the backend test fails because the expected output from the JSON string is LIST. ', 'comment_created': datetime.datetime(2022, 6, 23, 10, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904904035, 'comment_body': ""if we look at the docstring of this function where `filters` is mentioned, It says that filters should be a `List of dict representation of PlatformParameterFilter objects`, and each dict should contain `type` and `value` keys.\r\nhttps://github.com/oppia/oppia/blob/1985420396ee8a0007c1d9407e9627e52113e067/core/storage/config/gae_models.py#L160\r\n but if we check the `from_dict()` and `__init__` method of `PlatformParameterFilter`. We can see that it can accept two keys `type` and `conditions`. \r\nhttps://github.com/oppia/oppia/blob/3e4e033f158a9cf015725fc136aa8cd571782bd9/core/domain/platform_parameter_domain.py#L352\r\n\r\nAnd the type of `conditions` key is should be `List[Tuple[str, str]]`.\r\n\r\nSo, that's why I used pragma here. Because I think there is a mismatch in values."", 'comment_created': datetime.datetime(2022, 6, 23, 11, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904926179, 'comment_body': ""If we change `conditions` to `List[Tuple[str, str]]` (`[('=', 'prod')]`) then the backend tests fail, because for testing purposes this dictionary is firstly stored in backend and fetched again, and then this dictionary is compared with the fetched dictionary. In fetched dictionary, `conditions` is always returned as a `[['=', 'prod']]` no matter if we change the input dictionary's `conditions` to `List[Tuple[str, str]]` (`[('=', 'prod')]`)  or not. So, to keep passing the test I did not changed `conditions`. "", 'comment_created': datetime.datetime(2022, 6, 23, 11, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 905757785, 'comment_body': 'We can also use `List[Tuple[str, Union[str, bool, Type[list]]]]` here, but the problem is MyPy does not allow `list` for typing instead it is expecting `List` should be used.', 'comment_created': datetime.datetime(2022, 6, 24, 6, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906350520, 'comment_body': 'Thanks for the note. This may be worth adding as a comment/TODO here because, if you look at the code you linked in (1), it seems that we do eventually want to introduce an app_version (at least). So maybe worth writing something similar here about changing the .get() to [] once the corresponding TODO is resolved (so that a dev who searches for the relevant TODO number in the future can find this too).', 'comment_created': datetime.datetime(2022, 6, 24, 19, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906356048, 'comment_body': 'Just to check, is it possible to have mypy realize that PlatformParameterDict is a subtype of Dict[str, Any]? There are some advantages to using assertDictEqual (e.g. clearer test output) so I wanted to check.', 'comment_created': datetime.datetime(2022, 6, 24, 19, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906357519, 'comment_body': ""Shouldn't we fix the test, then?"", 'comment_created': datetime.datetime(2022, 6, 24, 19, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906358636, 'comment_body': 'Please check with @BenHenning what is the expected behaviour here. He is responsible for the platform parameter implementation.\r\n\r\nI suspect the docstring and some tests are is incorrect, but probably worth confirming.\r\n\r\n(Also, it\'s great that you found this error using types! But let\'s fix it rather than ""paper over"" it.)', 'comment_created': datetime.datetime(2022, 6, 24, 19, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906424039, 'comment_body': ""I believe this is code is wrong. The correct implementation should be:\r\n\r\n```python\r\n                    {'type': 'app_version', 'conditions': [('>', '1.2.3')]} \r\n```\r\n\r\nI think there are examples of tests which set this up correctly, so I suspect that @seanlip is correct and there are a few places that are out-of-date (including, it seems, some of the documentation).\r\n\r\nGood find."", 'comment_created': datetime.datetime(2022, 6, 24, 21, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 906672308, 'comment_body': 'Done TODO is added!!', 'comment_created': datetime.datetime(2022, 6, 25, 11, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906673081, 'comment_body': 'Done!!\r\nBasically, I inherited the `assertDictEqual` from `unittest.TestCase` and defined it again with broader types. \r\nAlso, MyPy does not support `TypedDict` as a subtype of `Dict` but we can use `Mapping` here which is a broader type and this broader type include both `TypeDict` and `Dict`.\r\n\r\nReference: https://github.com/python/mypy/issues/4976', 'comment_created': datetime.datetime(2022, 6, 25, 11, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906673411, 'comment_body': 'Thanks, @BenHenning, and @seanlip for clearing the ambiguity.  Docstring and test cases are changed.', 'comment_created': datetime.datetime(2022, 6, 25, 11, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906673420, 'comment_body': 'Done!!', 'comment_created': datetime.datetime(2022, 6, 25, 11, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906687599, 'comment_body': ""I just noticed that in many test cases there is a mismatch in fetched and input dictionaries. By this I mean:\r\n\r\nIf we have a dictionary like the below:\r\n```\r\n        input_new_rules: List[platform_parameter_domain.PlatformParameterRuleDict] = [\r\n            {\r\n                'filters': [\r\n                    {'type': 'app_version', 'conditions': [('>', '1.2.3')]}\r\n                ],\r\n                'value_when_matched': True\r\n            },\r\n            {'filters': [], 'value_when_matched': False},\r\n        ]\r\n```\r\n\r\nAnd if we make a model instance from this Dict and commit that instance by using the `.commit()` method of model OR if we convert this Dict to JSON. Then the value of `conditions` 's key is changed to `'conditions': [['>', '1.2.3']]`. So, this converted dictionary looks like the below:\r\n```\r\n        output_new_rules: List[platform_parameter_domain.PlatformParameterRuleDict] = [\r\n            {\r\n                'filters': [\r\n                    {'type': 'app_version', 'conditions': [['>', '1.2.3']]}\r\n                ],\r\n                'value_when_matched': True\r\n            },\r\n            {'filters': [], 'value_when_matched': False},\r\n        ]\r\n```\r\nSo, now if we compare both the dictionaries the backend test fails because of the difference in output dict and input dict. \r\n\r\n\r\nNow, my concern is that if we want to keep passing the test, we have to change the input dict's `condition`'s key value to `[['>', '1.2.3']]` so that both the input and fetched dictionaries matched. But if we change the value of `conditions` from tuple to list then mypy complaints about inappropriate type.\r\nbecause expected type of `conditions` is List[Tuple[str, str]]\r\n\r\nFor reference where these test cases are failing: https://github.com/sahiljoster32/oppia/blob/128d0089ccbeac5b5628dc4aa068af71e919be79/core/domain/platform_parameter_domain_test.py#L2148\r\n\r\nAlso please take a look at the failing backend tests so that you get a clear picture of what I'm trying to say!! (https://github.com/oppia/oppia/runs/7053628427?check_suite_focus=true#step:8:1258)\r\n\r\nThere are 2 ways to tackle this:\r\n1. Add ignores in all the places where this occurs. \r\n2. Change the expected type of `conditions` key from Tuple to List. \r\n\r\n "", 'comment_created': datetime.datetime(2022, 6, 25, 13, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906736573, 'comment_body': 'Oh makes sense, so it must be saved in the DB as a `JsonProperty` and tuples would be converted to lists.', 'comment_created': datetime.datetime(2022, 6, 25, 23, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 906744568, 'comment_body': ""Actually, I think there are different types of change dicts. So shouldn't we be doing a union type instead (of all the allowed ones)?\r\n\r\n'Any' literally means every type is allowed, but in our case, we only admit a finite number of specific types."", 'comment_created': datetime.datetime(2022, 6, 26, 2, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906744571, 'comment_body': 'Ditto here and elsewhere.', 'comment_created': datetime.datetime(2022, 6, 26, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906744607, 'comment_body': ""Oh, to be clear, I meant point to the existing issue, so that whoever fixes it can fix this one too. If you create a new issue then people won't know that both issues are related.\r\n"", 'comment_created': datetime.datetime(2022, 6, 26, 2, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906744761, 'comment_body': 'Is Mapping[str, Any] possible?', 'comment_created': datetime.datetime(2022, 6, 26, 2, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906850314, 'comment_body': ""Here, I also used `Mapping` because:\r\n\r\n`Dict[str, str]` can never be a subtype of `Dict[str, Union[str, int]]`, because MyPy considers both of them as different types of definitions. Due to the invariant property of `Dict`.\r\nReference: https://mypy.readthedocs.io/en/latest/generics.html#variance-of-generic-types\r\n\r\nBut `Dict[str, str]` can be a subtype of `Mapping[str, Union[str, int]]`. \r\n\r\nThe only concern here is that `Mapping` does not contain some of the `Dict`'s methods and if we return `Mapping` from publically accessible methods this can create a problem. But to encounter this issue we can annotate the return type of all the publically accessible methods as `Dict` ( already done in `to_dict()` method )"", 'comment_created': datetime.datetime(2022, 6, 26, 17, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906850609, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 26, 17, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906850660, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 26, 17, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906850670, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 26, 17, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906853936, 'comment_body': ""@seanlip PTAL at this case also. Due to this, I'm failing the backend tests."", 'comment_created': datetime.datetime(2022, 6, 26, 18, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906866968, 'comment_body': ""What if you replace this with `del actual_cmd_attributes['cmd']` instead of pop?\r\n\r\nIn general try to find ways to get rid of type-ignores (ditto above for the ignore[misc] too) and Any's."", 'comment_created': datetime.datetime(2022, 6, 26, 20, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 907028947, 'comment_body': ""`del actual_cmd_attributes['cmd']` also not work here. Because as mentioned in the comment `Mapping` does not contain extra methods and internally `del` calls `__delitem__` to delete the element.\r\n\r\nAlso, due to the absence of extra methods `Mapping` can be considered a `read-only` type just like `Sequence`. So,  that's why `to_dict()`'s return type is annotated as `Dict` not `Mapping`."", 'comment_created': datetime.datetime(2022, 6, 27, 6, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907031196, 'comment_body': ""> In general try to find ways to get rid of type-ignores (ditto above for the ignore[misc] too) and Any's.\r\n\r\nI'll keep that in mind from now on!!"", 'comment_created': datetime.datetime(2022, 6, 27, 6, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907250169, 'comment_body': 'Hmm, should we then maybe use list everywhere ar somehow transform the data when we are getting them from the datastore?', 'comment_created': datetime.datetime(2022, 6, 27, 10, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907252444, 'comment_body': 'Why are these optional?', 'comment_created': datetime.datetime(2022, 6, 27, 10, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907253243, 'comment_body': 'Also, can we try to limit the `raw_image` to only one type?', 'comment_created': datetime.datetime(2022, 6, 27, 10, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907257087, 'comment_body': 'Should we rather `return False` at the end instead of creating a variable? Or maybe should we throw an error if the operation does not exist? ', 'comment_created': datetime.datetime(2022, 6, 27, 11, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907257563, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 6, 27, 11, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907258416, 'comment_body': 'Should we save `Union[str, bool, int]` int oa variable? You seem to be using it in multiple places.', 'comment_created': datetime.datetime(2022, 6, 27, 11, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907261067, 'comment_body': '```suggestion\r\n        cls, name: str\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 11, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907263457, 'comment_body': 'I think in the current setup (we use `from __future__ import annotations`) list should work.', 'comment_created': datetime.datetime(2022, 6, 27, 11, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907263760, 'comment_body': '```suggestion\r\n        return bool(name and name[0] in string.ascii_uppercase)\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 11, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907265118, 'comment_body': 'Why is this optional?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907266059, 'comment_body': ""```suggestion\r\n                        'extensions', spec_file\r\n```"", 'comment_created': datetime.datetime(2022, 6, 27, 11, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907267260, 'comment_body': 'Above you also import in the if-block and there is no explanatory comment, should it be added above?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907267453, 'comment_body': 'Also, why are the ignores needed?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907267786, 'comment_body': 'Should comment be here?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907269152, 'comment_body': '```suggestion\r\n    # Here we used Mapping[str, Any] because, in Oppia codebase TypedDict is\r\n    # used to define strict dictionaries and those strict dictionaries are not\r\n    # compatible with Dict[str, Any] type because of the invariant property of\r\n    # Dict type. Also, here value of Mapping is annotated as Any because this\r\n    # method can accept any kind of dictionaries for testing purposes. So, to\r\n    # make this method generalized for all test cases, we used Any here.\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 11, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907433915, 'comment_body': 'Not working i tried, MyPy throwing error:- `core/domain/rte_component_registry_test.py:47: error: Implicit generic ""Any"". Use ""typing.List"" and specify generic parameters  [type-arg]` ', 'comment_created': datetime.datetime(2022, 6, 27, 14, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907479794, 'comment_body': ""union of str and bytes is added because this method is used in the controller and there we are accepting basestring ( a type for both str and bytes ). Also, optional is added because in the method we are handling the case where raw_image is none.\r\n\r\nthe filename is also annotated with optional[str] because for filename we are also handling the None case in method's code."", 'comment_created': datetime.datetime(2022, 6, 27, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907623868, 'comment_body': 'If we change the fetched data still we have to add `ignore:` in tests because the `conditions` of the input dictionary is still List. So to skip the ignores i changed the tuples to lists.', 'comment_created': datetime.datetime(2022, 6, 27, 17, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907629213, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 17, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907629331, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 17, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907629537, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 17, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907629674, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 17, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907634984, 'comment_body': 'added!', 'comment_created': datetime.datetime(2022, 6, 27, 17, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907635129, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 17, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907637990, 'comment_body': 'A comment is added above.\r\n\r\nAlso, these ignores are added because the import of domain files is prohibited in the storage folder. \r\n`Isort: skip` was added because linter is asking to split the import in parentheses even with a single value. ', 'comment_created': datetime.datetime(2022, 6, 27, 17, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907640585, 'comment_body': 'Because here https://github.com/oppia/oppia/blob/ce25d73163d4a084bce5232fe35bb258ea8daba5/core/domain/rules_registry.py#L58\r\n`state_schema_version` is `None` and we are using it as a key.', 'comment_created': datetime.datetime(2022, 6, 27, 17, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907651537, 'comment_body': 'If we `return false` at the end rather than creating a variable then we have total of 7 return statements in the function which exceeds the max limit of return statements ( which is 6 ).\r\n\r\nAlso, method `_match_version_expression` and `_match_version_flavor` are only called in `_evaluate_single_value`. And in `_evaluate_single_value` we are already checking if operator is correct or not. https://github.com/oppia/oppia/blob/ce25d73163d4a084bce5232fe35bb258ea8daba5/core/domain/platform_parameter_domain.py#L274\r\nSo, if we want to raise error for incorrect operator in  `_match_version_expression` and `_match_version_flavor` methods, then that error is never called/raised, because we are already checking operator in  `_evaluate_single_value`', 'comment_created': datetime.datetime(2022, 6, 27, 17, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 907963578, 'comment_body': 'Ah, ok, re del. Thanks for the explanation -- it is a bit weird to me that Dict[str, str], which is editable, is a valid subtype of Mapping[str, Union[str, int]], which is read-only, but ... ¯\\_(ツ)_/¯ ', 'comment_created': datetime.datetime(2022, 6, 28, 2, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 908068145, 'comment_body': ""![Screenshot from 2022-06-28 11-29-23](https://user-images.githubusercontent.com/12553576/176104903-56e229ca-acea-4e5a-8c5f-bfb691b3a4bf.png)\r\nYeah, I'm also surprised at first but after reading the docs I'm confident that we are heading in the right direction."", 'comment_created': datetime.datetime(2022, 6, 28, 6, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908468717, 'comment_body': 'Hmm I think we can remove that one and throw some here, or throw them in both places.', 'comment_created': datetime.datetime(2022, 6, 28, 13, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 908470205, 'comment_body': 'Sorry not sure what you mean.', 'comment_created': datetime.datetime(2022, 6, 28, 13, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 908473923, 'comment_body': 'Hmm, weird, can you try to dig into this more?', 'comment_created': datetime.datetime(2022, 6, 28, 13, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 908476486, 'comment_body': 'Can you please point me to the basestring thing? That might be something that we need to fix.\r\n\r\nMaybe we should handle the `None` case outside this function? \r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 28, 13, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 908477788, 'comment_body': 'Hmm, is `get_html_field_types_to_rule_specs` ever called with `None`?', 'comment_created': datetime.datetime(2022, 6, 28, 13, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 910822230, 'comment_body': 'In `_evaluate_single_value`, we are checking all the cases of operators with their corresponding types.\r\nhttps://github.com/oppia/oppia/blob/ba4f072e494fd59df53fecc37e67cea7f9727234/core/domain/platform_parameter_domain.py#L274\r\nBut if remove this check from `_evaluate_single_value` and move it to `_match_version_expression` and `_match_version_flavor`, then there we can only checking if the type is `app_version_flavor` or `app_version` and the operator belongs to list [=, <=, >=, <, >] or not, and by doing this we lose the cases where:\r\n1. type is `server_mode` and operator is `=`.\r\n2. type is `platform_type` and operator is `=`.\r\n3. type is `browser_type` and operator is `=`.\r\n', 'comment_created': datetime.datetime(2022, 6, 30, 9, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 910827229, 'comment_body': '`get_html_field_types_to_rule_specs` is never called with None value explicitly, but it is called without any value which makes the `state_schema_version` None ( because the default value of state_schema_version is None ). \r\n\r\nSome of the places where it is called without any value:\r\nhttps://github.com/oppia/oppia/blob/ba4f072e494fd59df53fecc37e67cea7f9727234/core/domain/state_domain.py#L923\r\nhttps://github.com/oppia/oppia/blob/ba4f072e494fd59df53fecc37e67cea7f9727234/core/domain/state_domain.py#L213', 'comment_created': datetime.datetime(2022, 6, 30, 9, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 910841079, 'comment_body': 'Here, we are accepting the `raw_image` and the type of `raw_image` is basestring.\r\nhttps://github.com/oppia/oppia/blob/ba4f072e494fd59df53fecc37e67cea7f9727234/core/controllers/blog_dashboard.py#L232\r\n', 'comment_created': datetime.datetime(2022, 6, 30, 10, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 910852403, 'comment_body': 'Also, I removed the optional from here.  And added a TODO in the test to remove the None when the whole codebase is annotated. By doing this we can only accept `str and bytes` and in those places, where None is provided we can raise an error.', 'comment_created': datetime.datetime(2022, 6, 30, 10, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 910864561, 'comment_body': ""Basically i changed the type of `conditions` from tuple to list so that we don't have to use ignores anymore"", 'comment_created': datetime.datetime(2022, 6, 30, 10, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 910893142, 'comment_body': 'I also tried to do the Typevar approach here but again mypy shows the same error. \r\n\r\nThe suspected reason for this:\r\nwhile declaring list type MyPy always expecting a generic parameter. that\'s why while declaring list type list[str] and List[str] are ok but  alone list is throwing error ( Implicit generic ""Any"". ). One way to suppress the error is by adding `--disable-implicit-any` flag in MyPy but I\'ll against that approach because it is applied to the whole codebase.', 'comment_created': datetime.datetime(2022, 6, 30, 11, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 911253516, 'comment_body': 'Okay, can we then throw in both places?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 911255021, 'comment_body': 'Lets do 2', 'comment_created': datetime.datetime(2022, 6, 30, 16, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 911261710, 'comment_body': 'Hmm, I see. Looking at the context of this code it seems that `None` equals the latest version, can we maybe then do smth like `if None` then set to the latest schema version and use that?', 'comment_created': datetime.datetime(2022, 6, 30, 17, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 911265578, 'comment_body': 'No longer optional?', 'comment_created': datetime.datetime(2022, 6, 30, 17, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 911267667, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2022, 6, 30, 17, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 911718572, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 1, 8, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 911876347, 'comment_body': 'Ok, Done!', 'comment_created': datetime.datetime(2022, 7, 1, 11, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 911876446, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 1, 11, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 911882884, 'comment_body': ""I think the latest version is `48` and I think `None` is used when we are fetching the data from `html_field_types_to_rule_specs.json` \r\nhttps://github.com/oppia/oppia/blob/6f447b0bbf68d0bcdfe75eb211ed2f28bda8bef1/core/domain/rules_registry.py#L62\r\nand in `html_field_types_to_rule_specs.json` there is no data, apart from an empty dict. https://github.com/oppia/oppia/blob/6f447b0bbf68d0bcdfe75eb211ed2f28bda8bef1/extensions/interactions/html_field_types_to_rule_specs.json#L1\r\n\r\nSo, if we declare `state_schema_version` as `48` when it is none ( using ` if None` ), then maybe it create confusion among other developers. \r\n\r\nCan you give suggestions ( Also, please correct me if I'm wrong somewhere )"", 'comment_created': datetime.datetime(2022, 7, 1, 11, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '657d0806e0d2b91b16f1925812554b254176acad', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea9ac08ec034c7f85b9cca3456fe817377a4594', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05ecdd3d5d57f9a9788580f5cebe5a71cae50831', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '889f5fb3c60a66a0f71b16a6dbb1fd3e8bb53b98', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c848b33419a73eafdece32ce491276bc33b51f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a17402d9b5a392e5d7b3a7031803801e58e659e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409f96354b03e381caee7b2387cdef13c0c5c0e6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c415d370e2041d88048d52273fa2ab48d8ae80e6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c49df7db8f946217effe9ece17218a83af69e9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '839d4389827eff834184cb09425a50d13f6535f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073aefd9e9cc99113b40bdd475649653f04a1205', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27ab1a958001833262b7890a8ebb0156f01e7c6d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d3dbdb6a7ff1f41a00abc1b71c4fe33831f02f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b611749b258058ae59960c5487760bed49a276e6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ccd753651a7087df3a60afc50d7ad50672aeb88', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83fe456cbd8b81e6503289887423b9d073d94807', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e7c066427d535884951f29cebdf1797e416a9b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f4e05f2c866dbed440b3d7938a0b7ed20f5d4fb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c31d8589a22c6bdaf8ac8be3ab89453ae4b074', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0bddfc85e05b711f4e6ed6385ff474e34d4519c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392d3f86d20f2ec8244c7965927d4a7147fc3075', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc017ac1883305aa1951ae9e9204dc696f00dba', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128d0089ccbeac5b5628dc4aa068af71e919be79', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4108843d736ee24170b81baf1f30f177b4b91cb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26976cbabb363887693398dd0f219734c216488b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d30c2716f33ec83403f718ff91214c5a0fc040', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b75843a3728e44801fefd659ead87b60439b37e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d1dd5b2a0b61d17d36eddb198aaba1ecae8a4e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d37692697c0ff64db262065ca4b06f870cc66c3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45769fb8cf018c897bff83e4f8783ebb0b0c922', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b794e61d286b7c65b58a993d926430d161526b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfdad58cace08336824a1dff72d935e578eee175', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158e5722fad25886cc7fa11906432c95c2f0f2b9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f25c4f3c33c97d4a2b9e635ba283724af8f4d21f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c85e2975e7371492ddcc957ac6d94aa28b8179ec', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'addbe336afa568599035537da37c7c6ade224301', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b43019e5b2485107214f3aa0b6ef497b5145f738', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81519435524e39f9a01af7a70ee192a67c5cb74', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f77a6748aebda55538bd25181fcc802d675fdf9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ff941ec65e1c8bdbaf476b15a893b36f6ecdae', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
976663373,Fix part of #14033: Added Mypy type annotations to some files of `domain` folder. -- M1.4,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033 
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - blog_services.py
 - search_services.py
 - skill_fetchers.py
 - story_fetchers.py
 - subtopic_page_services.py
 - takeout_service.py
 - visualization_registry.py

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.
<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15618,https://api.github.com/repos/oppia/oppia/pulls/15618,https://github.com/oppia/oppia/pull/15618,closed,1567,707,33,23,19,58,0,1,[],2022-06-23 06:02:28+00:00,2022-07-03 10:38:57+00:00,880589.0,"10 days, 4:36:29","[{'comment_id': 906195717, 'comment_body': ""1. I removed `None` from the returned `list` because this function is used only in `controllers` 's `blog_dashboard.py`, and there we are not handling the case -- `presence of None in the List`. Also, in the test file, we are not checking if the elements of a list are `None` or not. \r\n\r\n   Reference where this function is used: https://github.com/oppia/oppia/blob/b082f987a7c2489ca49e88b1d883c6cc82c16d5c/core/controllers/blog_dashboard.py#L100\r\n\r\n2. I also changed the `lambda` function because the return value of the previous lambda function is inappropriate Acc. to MyPy. So I changed the return value to `float` value."", 'comment_created': datetime.datetime(2022, 6, 24, 15, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906199627, 'comment_body': 'The return value of this function is `None` when a List of `blog_models.BlogPostRightsModel` is Empty.', 'comment_created': datetime.datetime(2022, 6, 24, 15, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906202938, 'comment_body': ""This function only used in `controllers`'s `blog_homepage.py` and there we are not handling the case -- `presence of None in the List.`\r\n\r\nReference where this function is used: https://github.com/oppia/oppia/blob/b082f987a7c2489ca49e88b1d883c6cc82c16d5c/core/controllers/blog_homepage.py#L109"", 'comment_created': datetime.datetime(2022, 6, 24, 16, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906206190, 'comment_body': 'Note to @sahiljoster32 refactor it if possible.', 'comment_created': datetime.datetime(2022, 6, 24, 16, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906220525, 'comment_body': ""Missing Literal's overload add them @sahiljoster32 "", 'comment_created': datetime.datetime(2022, 6, 24, 16, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906227563, 'comment_body': 'In the whole codebase, we are never providing a `None` value to this function. ', 'comment_created': datetime.datetime(2022, 6, 24, 16, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906236123, 'comment_body': 'This is for the cases where keyword argument `strict` is skipped but keyword argument `version` is provided.', 'comment_created': datetime.datetime(2022, 6, 24, 16, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906246361, 'comment_body': 'Here * case is missing add that Note to @sahiljoster32 ', 'comment_created': datetime.datetime(2022, 6, 24, 17, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906246688, 'comment_body': 'Literal cases are missing add them ', 'comment_created': datetime.datetime(2022, 6, 24, 17, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906247072, 'comment_body': 'Add TODO of ndb property', 'comment_created': datetime.datetime(2022, 6, 24, 17, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906250267, 'comment_body': 'From the implementation of the return value, it is clear that the Dict is returned not List.', 'comment_created': datetime.datetime(2022, 6, 24, 17, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906254385, 'comment_body': 'move bracket below', 'comment_created': datetime.datetime(2022, 6, 24, 17, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906255019, 'comment_body': 'missing Literal overloads', 'comment_created': datetime.datetime(2022, 6, 24, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906255773, 'comment_body': 'Literal overloads are missing', 'comment_created': datetime.datetime(2022, 6, 24, 17, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906285496, 'comment_body': 'Done!!, None is removed from list.', 'comment_created': datetime.datetime(2022, 6, 24, 18, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906285852, 'comment_body': 'Added Done!', 'comment_created': datetime.datetime(2022, 6, 24, 18, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906285994, 'comment_body': 'Added Done!', 'comment_created': datetime.datetime(2022, 6, 24, 18, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906286147, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 24, 18, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906286241, 'comment_body': 'Added Done!!', 'comment_created': datetime.datetime(2022, 6, 24, 18, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906286344, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 24, 18, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906286409, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 24, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906286536, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 24, 18, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906360928, 'comment_body': 'Just curious about why you need both Literal and bool overloads here?', 'comment_created': datetime.datetime(2022, 6, 24, 19, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 906675386, 'comment_body': ""When some call this method with `strict` as a keyword argument, like: \r\n```\r\ndef get_collection_rights('some_id', strict=False):...\r\n``` \r\nThen, bool's overload is checked.\r\n\r\nIf someone calls this method with `strict` as a positional argument, like:\r\n```\r\ndef get_collection_rights('some_id', False): ...\r\n```\r\nThen, Literal's overload is checked. "", 'comment_created': datetime.datetime(2022, 6, 25, 12, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906675569, 'comment_body': 'A similar approach is used for other overloads.', 'comment_created': datetime.datetime(2022, 6, 25, 12, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 906738179, 'comment_body': 'Should we provide a dummy title for this dict?', 'comment_created': datetime.datetime(2022, 6, 26, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 907273902, 'comment_body': 'Can this be moved to the previous line?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907279922, 'comment_body': ""I'm thinking that we should enforce that the strict arg always needs to be named argument."", 'comment_created': datetime.datetime(2022, 6, 27, 11, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907280993, 'comment_body': 'Should we enforce the `strict` to always be set to some value? Then we would be able to set the typing so that when `strict` is `True` then it cannot be `Optional`?\r\n```suggestion\r\ndef get_blog_post_by_id(\r\n    blog_post_id: str, strict: bool = True\r\n) -> Optional[blog_domain.BlogPost]:\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 11, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907284782, 'comment_body': ""Should a TODO be added here? So that we don't need to retype this?"", 'comment_created': datetime.datetime(2022, 6, 27, 11, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907285683, 'comment_body': 'I think for functions that return list it is usually fine to just return empty list? Is there any specific reason for `None`?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907286450, 'comment_body': 'Ditto, should we return empty list instead of `None`?', 'comment_created': datetime.datetime(2022, 6, 27, 11, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907290738, 'comment_body': '```suggestion\r\n    str, int, List[str]\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 907483076, 'comment_body': ""Is it possible to change the type of `documents` param in `add_documents_to_index` to a generic type? Wouldn't that avoid this error as well as take away the use of `Any`?\r\n"", 'comment_created': datetime.datetime(2022, 6, 27, 14, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 908330379, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 28, 10, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908333850, 'comment_body': 'I checked that this function is only used in controllers and there we are not handling the case of None, So None is removed and now we are returning an empty list.', 'comment_created': datetime.datetime(2022, 6, 28, 10, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908334530, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 28, 10, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908335028, 'comment_body': 'Overloads of `Literals` are removed wherever it is appliable.', 'comment_created': datetime.datetime(2022, 6, 28, 10, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908343315, 'comment_body': 'We are retyping it just to narrow down the type. because the return type of `.fetch()` method is `Sequence` with generic type having upper bound of `Model`. \r\nhttps://github.com/oppia/oppia/blob/250993623c7fd2e2d58e577eda024faad0d172c6/stubs/google/cloud/ndb/query.pyi#L74', 'comment_created': datetime.datetime(2022, 6, 28, 11, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908344709, 'comment_body': 'This method is only used in `controllers` and there we are not handling the case of `None`. So i changed `None` to empty list.', 'comment_created': datetime.datetime(2022, 6, 28, 11, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908351073, 'comment_body': ""I think there are cases in the codebase where we are intentionally passing `strict = False`, If we set `strict = True` just to remove `Optional` in every case then I'm not sure that it's a good idea."", 'comment_created': datetime.datetime(2022, 6, 28, 11, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908365187, 'comment_body': 'This dict is used in https://github.com/oppia/oppia/blob/250993623c7fd2e2d58e577eda024faad0d172c6/core/domain/blog_services_test.py#L268\r\nand here if we provide `title` key then this test will fail.', 'comment_created': datetime.datetime(2022, 6, 28, 11, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 908460121, 'comment_body': ""This is still weird to me, because if we explicitly set `strict` to `True` the type is not right, right? Is it possible to rewrite this so that if we explicitly mention strict then we don't get `Optional`?"", 'comment_created': datetime.datetime(2022, 6, 28, 13, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 908463193, 'comment_body': ""Wait I don't understand you comment. Can you try to rephrase?"", 'comment_created': datetime.datetime(2022, 6, 28, 13, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 910732597, 'comment_body': 'Done!\r\nNow:\r\n```\r\nget(aaa, strict=True) ------------------ will not return Optional\r\nget(aaa, strict=False) ----------------- will return optional\r\n```\r\nAlso, those overloads are removed that contain `strict` as a positional argument.', 'comment_created': datetime.datetime(2022, 6, 30, 8, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 910734231, 'comment_body': 'Ahh sorry!!!,  actually I misinterpreted the review comment. but now i have done the suggested changes.', 'comment_created': datetime.datetime(2022, 6, 30, 8, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 910794695, 'comment_body': ""The only way we can use generic here is by using typevar with upper bound of `Mapping[str, Any]`, because typedDict is only allowed to be a subtype of `Mapping` when its value is represented as `Any`. \r\n\r\nI also tried for ` T = Tyevar('T', bound=Mapping[str, Union[str, in, List[str]])` but its not working. Can you please help!!"", 'comment_created': datetime.datetime(2022, 6, 30, 9, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 911516469, 'comment_body': 'Hmm, sorry I am a bit confused by how you handle these. To my understanding, I would imagine something like this. This both allows the call without strict and enforces string to be only used by keyword.\r\n\r\n```python\r\n@overload\r\ndef get_collection_rights(\r\n    collection_id: str\r\n) -> rights_domain.ActivityRights: ...\r\n\r\n\r\n@overload\r\ndef get_collection_rights(\r\n    collection_id: str, *, strict: Literal[True]\r\n) -> rights_domain.ActivityRights: ...\r\n\r\n\r\n@overload\r\ndef get_collection_rights(\r\n    collection_id: str, *, strict: Literal[False]\r\n) -> Optional[rights_domain.ActivityRights]: ...\r\n\r\n\r\ndef get_collection_rights(\r\n    collection_id: str, *, strict: bool = True\r\n) -> Optional[rights_domain.ActivityRights]:\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 6, 30, 23, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 911517644, 'comment_body': 'Feel free to reorder the args here if it reduces the amount of overloads.', 'comment_created': datetime.datetime(2022, 6, 30, 23, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 911693297, 'comment_body': 'Even if I change the order of args the total number of overloads remains the same ( which is 4 ).', 'comment_created': datetime.datetime(2022, 7, 1, 7, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 911696378, 'comment_body': 'I added this overload because below we are passing the `strict` variable which is of the `bool` type. And Also, this does not affect the expected behavior. https://github.com/oppia/oppia/blob/6f447b0bbf68d0bcdfe75eb211ed2f28bda8bef1/core/domain/subtopic_page_services.py#L154', 'comment_created': datetime.datetime(2022, 7, 1, 7, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 911701711, 'comment_body': ""I have not used  `*` in the main implementation, because doing this throws lint errors and those lint errors are showing up because after using single `*` `strict` is not counted as parameter and its documentation is just considered as a description of `blog_post_id` variable.\r\n\r\nIf we use `*args` then linter ask for it's documentation. \r\nAlso, not using `*` in the main implementation does not affect the expected behaviour because If we use `get(aaa, True)` then MyPy ultimately shows an error."", 'comment_created': datetime.datetime(2022, 7, 1, 7, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912147724, 'comment_body': ""Sorry, I'm a bit confused why is this needed."", 'comment_created': datetime.datetime(2022, 7, 1, 17, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 912152156, 'comment_body': ""https://github.com/oppia/oppia/blob/6f447b0bbf68d0bcdfe75eb211ed2f28bda8bef1/core/domain/subtopic_page_services.py#L154 \r\nIn this place, we are passing the `strict` variable ( which is of bool type ). So, that's why i added this overload!!"", 'comment_created': datetime.datetime(2022, 7, 1, 17, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912155638, 'comment_body': 'Done wherever it is applicable!', 'comment_created': datetime.datetime(2022, 7, 1, 17, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912156728, 'comment_body': 'I have added this overload just because this method is used in another method, and there we are providing strict varaible which is of bool type like: \r\n`get_subtopic_page_by_id(aaa, bbb, strict=strict)`.\r\n\r\nIn `get_subtopic_page_by_id(aaa, bbb, strict=strict)` we are not using either strict=True or strict=False, which causes MyPy to throw error that no overload is available for int, int, bool.\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 1, 17, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912401264, 'comment_body': ""As we discussed, it's better to refactor `add_documents_to_index`at a later stage as an object which can be initialized by passing the `TypedDict` as shown below\r\n\r\nhttps://mypy.readthedocs.io/en/stable/generics.html#defining-generic-classes"", 'comment_created': datetime.datetime(2022, 7, 2, 21, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 912401354, 'comment_body': 'Oh okay. Makes sense', 'comment_created': datetime.datetime(2022, 7, 2, 21, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}]","[{'commit_sha': '6ecf9346c75f3679fac3b6bc041dbf121dcb0170', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de21565a426ead7ba11f914aa9e90bb0b5ccc54c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f47a7ab8ed5e27b15eb0c6076362686d8b38c479', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2315fc6ffd14a7e77e2b46cc43bd7aa21977234', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e4ae971f025245649f8d7a4ff4ed699846bf5d9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922e9c8d0a98086576fd4f7586c0b8023e2f48d3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ce49cd97035851341a3de92adf206571ed8775', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d2215ee73e84ecc3ec911e5373635401d939c7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2ae14f6b291c18bb3383fedc651e57e1a2127c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967dd9b8d777306e4eb2623bf9a8c73452bdc050', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd29f1f1052979c09bbd5de5cf3e170e2e4f8718', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d8125156c1043e5e7abfd292df538ded5a88907', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3016e4e5b7d0ae27b383c7876b1ede846a85d1ae', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4d5f49ad6efaea107b732a4401bc8dc0fa05256', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a4ac51552ff29ad82969330740c70aae7bf542d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc222367aeda90bcdcb5e1317496270ffef9fbd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b74ca063f75c9a12214f3052382fa8be2a604ff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf220853b3b29388728edd6bb676703e9ce45101', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18b01ec35d0c073257dca0d84a8d9d038e94fd34', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b02fa2a973bfe6e624040d2f5d4567ad14279399', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baee1300fb16ad5b875fbbc4f53fec0b1f2d7158', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b543a27d63d4b61d66975448a7dd7457af0a7abb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21df431b3c98b434fa8c6f56b1ba645b11d0f7d3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
979813965,Fix part of #14033: Added Mypy type annotations to some files of domain folder. -- M1.5,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033 
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - classifier_services.py
 - exp_fetchers.py
 - platform_parameter_list.py
 - question_fetchers.py
 - subtopic_page_domain.py


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.
<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15640,https://api.github.com/repos/oppia/oppia/pulls/15640,https://github.com/oppia/oppia/pull/15640,closed,942,438,26,31,15,71,0,1,[],2022-06-27 09:34:32+00:00,2022-07-07 23:56:04+00:00,915692.0,"10 days, 14:21:32","[{'comment_id': 912383125, 'comment_body': 'fix overloads acc. to new discussion', 'comment_created': datetime.datetime(2022, 7, 2, 17, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912383290, 'comment_body': 'Why strict is introduced!', 'comment_created': datetime.datetime(2022, 7, 2, 17, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912383474, 'comment_body': 'Again add overloads acc. to new dscussion.', 'comment_created': datetime.datetime(2022, 7, 2, 17, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912383829, 'comment_body': 'Put in single line !!', 'comment_created': datetime.datetime(2022, 7, 2, 17, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912384410, 'comment_body': 'This test case is changed a bit!, because previously we are passing `exp_summaries` (a list of ExplorationSummary domain object ) to `get_exploration_summaries_from_models` ( this method can only accept List of ExpSummaryModel not ExpSummary domain object )', 'comment_created': datetime.datetime(2022, 7, 2, 17, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912384617, 'comment_body': 'bring in same line!', 'comment_created': datetime.datetime(2022, 7, 2, 17, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912384711, 'comment_body': 'remove it!', 'comment_created': datetime.datetime(2022, 7, 2, 17, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912385469, 'comment_body': 'again in one line', 'comment_created': datetime.datetime(2022, 7, 2, 17, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912385663, 'comment_body': 'Add explanation for `Any` in state domain', 'comment_created': datetime.datetime(2022, 7, 2, 17, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912387243, 'comment_body': 'You should probably try to remove it altogether and have the correct answer be a union type, actually. ""Any"" literally means any.', 'comment_created': datetime.datetime(2022, 7, 2, 18, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 912389190, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 2, 18, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912389766, 'comment_body': ""In some places in the codebase, we are not handling the case of `None` for this function's return value, for eg:\r\nhttps://github.com/oppia/oppia/blob/29f4595bd58acfed0f1988bc16abeba78cc0d7e4/core/controllers/editor_test.py#L1928\r\nhttps://github.com/oppia/oppia/blob/29f4595bd58acfed0f1988bc16abeba78cc0d7e4/core/domain/exp_services.py#L1317"", 'comment_created': datetime.datetime(2022, 7, 2, 18, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912389783, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 2, 18, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912389792, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 2, 18, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912389796, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 2, 18, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912389817, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 2, 18, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912389820, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 2, 18, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912444167, 'comment_body': 'Mapping is used just to accept the different dictionaries, because `Dict[str, int]` can be a subtype of `Mapping[str, Union[str, int]` but it cannot be a subtype of `Dict[str, Union[str, int]]`. So, after accepting the `inputs` we are again narrowing down the type to `Dict`, to match the type with implementation.', 'comment_created': datetime.datetime(2022, 7, 3, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912444286, 'comment_body': 'Any is removed for `Rulespec`', 'comment_created': datetime.datetime(2022, 7, 3, 7, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912445545, 'comment_body': ""I tried to search the use of the `.classifier_data` attribute in the codebase but didn't find any evidence that the attribute `.classifire_data` is ever used. But I'm not sure about this -- can you please help to find where it is used and for what purpose we are defining it!!"", 'comment_created': datetime.datetime(2022, 7, 3, 7, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912446165, 'comment_body': 'Apart from tests, we are using this function only in controllers https://github.com/oppia/oppia/blob/7c9ee495ecf6d1421876b98af115375d3f8e6e42/core/controllers/classifier.py#L245\r\nAnd there we are not handling the `.classifier_data` attribute. !!', 'comment_created': datetime.datetime(2022, 7, 3, 7, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912522809, 'comment_body': 're-add', 'comment_created': datetime.datetime(2022, 7, 3, 18, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912523678, 'comment_body': 'Look bad fix it !', 'comment_created': datetime.datetime(2022, 7, 3, 18, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912524088, 'comment_body': 'remove `...` from here ', 'comment_created': datetime.datetime(2022, 7, 3, 18, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912524113, 'comment_body': 'ditto else where', 'comment_created': datetime.datetime(2022, 7, 3, 18, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912527841, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 3, 19, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912527848, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 3, 19, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912527856, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2022, 7, 3, 19, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913007204, 'comment_body': 'Can this be limited to only one type?', 'comment_created': datetime.datetime(2022, 7, 4, 13, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 913008396, 'comment_body': 'Wait this is confusing. In the argument definition `vm_id` can only be of type `str`.', 'comment_created': datetime.datetime(2022, 7, 4, 13, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 913010730, 'comment_body': 'Feel free to remove it.', 'comment_created': datetime.datetime(2022, 7, 4, 13, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 913248819, 'comment_body': 'This seems as a bit complicated type, can it be moved into a type variable or simplified?', 'comment_created': datetime.datetime(2022, 7, 4, 20, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 913354208, 'comment_body': 'This seems odd. The typing should not make it to the ""variable names"" level. \r\n\r\nCould we not just type classifier_training_job_models as a list? I don\'t really follow what\'s going on here and I think developers will find it hard to understand the difference between the two models and what they should do to each.', 'comment_created': datetime.datetime(2022, 7, 5, 3, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913354531, 'comment_body': ""It may be used in the frontend if the model gets passed there? It's possible that that part has not been implemented yet."", 'comment_created': datetime.datetime(2022, 7, 5, 3, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913354897, 'comment_body': 'I think, to make all this clearer, you can do ""if not valid_jobs: return None"" at the top (line 416) and then you can have all this logic in the ""main block"" of the code (without the ""if valid_jobs"" bit).', 'comment_created': datetime.datetime(2022, 7, 5, 3, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913355152, 'comment_body': 'But since we excluded ... annotations, this argument ...', 'comment_created': datetime.datetime(2022, 7, 5, 3, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913355233, 'comment_body': 'What does ""enough info"" mean, exactly? Please clarify so that it\'s easy for any developer to evaluate whether the condition is met or not.', 'comment_created': datetime.datetime(2022, 7, 5, 3, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913355550, 'comment_body': ""I don't really understand how this comment relates to the code that follows it. Could you explain a bit more?"", 'comment_created': datetime.datetime(2022, 7, 5, 3, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913355806, 'comment_body': 'if exp_summary is not None', 'comment_created': datetime.datetime(2022, 7, 5, 3, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913355822, 'comment_body': 'if exp_summary is not None', 'comment_created': datetime.datetime(2022, 7, 5, 3, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913356170, 'comment_body': 'This seems odd, is it a model or is it not? The naming should be consistent -- we should use ""model"" for models (instances of ndb.Model) and not for other things.', 'comment_created': datetime.datetime(2022, 7, 5, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913588664, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 5, 9, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913592266, 'comment_body': 'Actually, the stubs of protobuf are not fully type annotated yet in typeshed, and in its main repository is also not type annotated yet!!', 'comment_created': datetime.datetime(2022, 7, 5, 9, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913597602, 'comment_body': 'Also, this explanation is added in the comment.', 'comment_created': datetime.datetime(2022, 7, 5, 9, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913600914, 'comment_body': ""Here, `state_mapping_model.algorithm_ids_to_job_ids` is an instance of ndb's JsonProperty. And currently in our stubs, all the ndb properties are annotated with `Any` return type.  So that's why I explicitly added type annotation and TODO here"", 'comment_created': datetime.datetime(2022, 7, 5, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913601778, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 5, 9, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913601856, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 5, 9, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913602485, 'comment_body': ""It's not a model, So i removed it!!\r\nDone"", 'comment_created': datetime.datetime(2022, 7, 5, 9, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913607430, 'comment_body': 'Refactored!', 'comment_created': datetime.datetime(2022, 7, 5, 9, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913607942, 'comment_body': 'Typevar is added!', 'comment_created': datetime.datetime(2022, 7, 5, 9, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913644471, 'comment_body': ""If we do not introduce a new variable here with the type `Union[str, bytes]` and just use `vm_id` as `str` type in `generate_signature` method, then MyPy throws an error at line:\r\n```python\r\n    if isinstance(vm_id, str):\r\n        vm_id = vm_id.encode('utf-8')\r\n```\r\nbecause here `vm_id` is assigned with `bytes` type value and previously its type was `str`. So there is a conflict in type assigment.\r\n\r\nSo, to tackle this I introduced a new variable here but the other possible approach is annotating `vm_id` as `Union[str, bytes]`. I stick to `str` type for `vm_id` because in the whole codebase we are never providing `bytes` value to this function's `vm_id` argument."", 'comment_created': datetime.datetime(2022, 7, 5, 10, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913718999, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 5, 12, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915131998, 'comment_body': 'Problem: The type of `classifier_training_job_models` is `Sequence[Optional[ClassifierTrainingJobModel]]` and the expected type for the argument of `classifier_models.ClassifierTrainingJobModel.update_timestamps_multi()` is `List[ClassifierTrainingJobModel]`. So, if we narrow down the type of `classifier_training_job_models` from Sequence to List ( type after narrowing down `List[Optional[ClassifierTrainingJobModel]]` ) then still this type is not acceptable by `classifier_models.ClassifierTrainingJobModel.update_timestamps_multi()` because it require `List[ClassifierTrainingJobModel]` but we are providing `List[Optional[ClassifierTrainingJobModel]]` ', 'comment_created': datetime.datetime(2022, 7, 6, 18, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915141400, 'comment_body': ""There are 2 solutions that we can apply here:\r\n1. Use a `cast` to convert the type of `classifier_training_job_models` from `Sequence[Optional[ClassifierTrainingJobModel]]` to `List[ClassifierTrainingJobModel]`. But I'll not prefer this.\r\n2. Introduce a new variable ( like I did, introduced `strict_classifier_training_job_models` ) and append all the models one by one after doing an assertion ( like in my case I appended all the models in line `326`, and the assertion is done in line `314` ). After doing this, no `None` value is present in `strict_classifier_training_job_models` and MyPy will consider its type as `List[ClassifierTrainingJobModel]`. So now the type matches the argument's type of `classifier_models.ClassifierTrainingJobModel.update_timestamps_multi()` and MyPy will not throw error."", 'comment_created': datetime.datetime(2022, 7, 6, 18, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915148256, 'comment_body': 'I have discussed this issue with Aasif and we found that this issue is encountered already but the solution is not implemented yet!!! you can see it here https://github.com/python/mypy/issues/4573 ', 'comment_created': datetime.datetime(2022, 7, 6, 18, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915152275, 'comment_body': 'It seems to have been ""closed as completed"". Maybe check with them what\'s going on?\r\n\r\nAlso conceptually it seems to me that the difference is ""list of models with possible Nones"" and ""list of models that are guaranteed to be models"". It\'s fine to have two separate variables for those two things if that\'s what you actually want to distinguish -- in that case, it\'s more a question of the logical concept rather than something that\'s just for the type-checks. If we actually would need to distinguish them even in the case where we didn\'t have type-checking then I\'m fine with different variables but these need to have better names to actually explain what they are.', 'comment_created': datetime.datetime(2022, 7, 6, 18, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 915160279, 'comment_body': ""Ok, I'll comment on the issue about asking the situation of the issue and their future planning regarding this issue, right?\r\n\r\nFor names:\r\nshall we use `classifier_training_job_models_with_none` for `list of models with possible Nones`\r\nand \r\n`classifier_training_job_models` for `list of models that are guaranteed to be models` ???\r\n@seanlip PTAL!!"", 'comment_created': datetime.datetime(2022, 7, 6, 18, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915165324, 'comment_body': ""I think you haven't really answered my question. Do we actually need to treat these as separate logical concepts throughout the code, if we weren't doing typing?"", 'comment_created': datetime.datetime(2022, 7, 6, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 915172005, 'comment_body': ""> I think you haven't really answered my question. Do we actually need to treat these as separate logical concepts throughout the code, if we weren't doing typing?\r\n\r\nYes, we should consider it as a separate concept. Because there are cases in the codebase where we are not checking the presence of None in List ( or Sequence ) and just passing the values. \r\n\r\nJust want to mention that most of the cases are encountered after introducing typing!!\r\n@seanlip PTAL!"", 'comment_created': datetime.datetime(2022, 7, 6, 19, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915176046, 'comment_body': 'That\'s good! OK then, let\'s have two different variables for two different concepts, named appropriately.\r\n\r\nYour names sound fine to me. They\'re better than the previous names, since ""strict\' doesn\'t really convey ""not none"" in general.', 'comment_created': datetime.datetime(2022, 7, 6, 19, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 915507511, 'comment_body': 'Done! Name is changed!!', 'comment_created': datetime.datetime(2022, 7, 7, 6, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915592022, 'comment_body': ""Actually, apologies, @vojtechjelinek was right here. Please do delete this line. It is an error. In PR https://github.com/oppia/oppia/pull/8268/files I think we tried to store the data separately from the job model, but somehow this line made it through and I agree it doesn't make sense because of the lack of a field in the storage layer.\r\n\r\nThanks for the detailed comment, too."", 'comment_created': datetime.datetime(2022, 7, 7, 8, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 915593739, 'comment_body': 'Why did this change?', 'comment_created': datetime.datetime(2022, 7, 7, 8, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 915687667, 'comment_body': ""I get that the thing I'm asking is why we need this if at all. The argument (line 47) is only `str` so then wouldn't it be enough to use `assert` here or not use anything here."", 'comment_created': datetime.datetime(2022, 7, 7, 9, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 915730867, 'comment_body': 'Done removed!', 'comment_created': datetime.datetime(2022, 7, 7, 10, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915731284, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 7, 7, 10, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915731775, 'comment_body': 'If clause is removed and assert is added !', 'comment_created': datetime.datetime(2022, 7, 7, 10, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915753013, 'comment_body': ""The intention of this test case is to check the wrong input type for `RuleSpec`'s input. \r\n\r\nPreviously, we are providing the wrong input type ( expected Dict provided List ) while constructing a new `RuleSpec` object but after adding assertion in `__init__` ( in line 2387, reason is also mentioned there ) backend throwing an error because dict is expected but provided list. So, to pass the test I constructed correct type of `RuleSpec` object and changed input's value later in line 4287."", 'comment_created': datetime.datetime(2022, 7, 7, 11, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915766778, 'comment_body': 'In the whole codebase, the string value is never provided to message which causes backend coverage to fails. So shall we remove this? \r\n@vojtechjelinek PTAL!', 'comment_created': datetime.datetime(2022, 7, 7, 11, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915795767, 'comment_body': 'sure', 'comment_created': datetime.datetime(2022, 7, 7, 12, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 915801160, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 7, 12, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '9fb7f25612d5baa96abcdd7658fadb02e498c4f7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bf0e9ca77e7e6114cf305dff98c73386f66a3ca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81a794348be6cb8b99457108f1e0a631895eda52', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e62c36152d03f7c1c1d567a671beba6c5df4dc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b95218bba2d77671a46c0753c22c5ffff15f96', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ffa135fbb74a723bcccd50bcd8e103a5e56bbfb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ad3e1e767fe099aa739c610eee4e292156bd4da', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f5ec3bd41bf95e0a475b6b86594b40494513df4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e40f3a700f209734a91adc2d571ce6ea18e7261', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98184730264c9d981062ed8c8f4366e582818d63', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '007479a41829d3ef414a29c8163ae74a39155080', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '026588f275652b59dbe956c4e69434abc9b15661', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24745ebfbfa5a90c1330714816d6f80a2b47651d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20e45053f727e890bea1078ed1d836239e7b60bb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7fbd6a76b872164b9035b8ed7ab435744e174a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '554f780f59144e9611c0c3a6d2c3584e1ae2f5e7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e40e5ac503241de27646d0e36f0f6e5afae80f09', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99cbc98f4dafcc934ec3209f7597b933f7c4ffa9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60b8cab73756ee7c43cb3cfc9ef01d6833249475', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f02347ccbe68a4b1158a6dc0774cd7e6df37f6f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe26e9a2dad74f7edbb14604db6db466f85678d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc497cb3b38411510bf5e5a6a1a836ac1d99a30', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f15effda44943bf1db56a979a9526cadea6efe91', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed8735aeb14be39db4b7c869cebb067f47b7209a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2227991526cc74369a17bf8a37277e80984266ed', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c427474d20b6950b941a60222e989b37eee4e524', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff3d17b91ab1856294023125be4e314a682b7a58', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '555f5fb5350ae1c3e97323ee95da684913b2b51f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ca7bd321982c789a046197362bb5645e0c00770', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3e19c72f08ab79c13fa96efaba8e36550724d83', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abdfdfe6a3306c2b73da2bcaee96f3c20ddfda51', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
984195264,Fix part of #14033: Added Mypy type annotations to some files of domain folder. -- M1.6,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033 
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - email_manager.py
 - platform_feature_services.py
 - user_services.py

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.
<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15663,https://api.github.com/repos/oppia/oppia/pulls/15663,https://github.com/oppia/oppia/pull/15663,closed,2756,1704,39,62,28,98,0,3,[],2022-06-30 19:12:51+00:00,2022-07-13 12:40:15+00:00,1099644.0,"12 days, 17:27:24","[{'comment_id': 912926753, 'comment_body': 'I removed **kwargs from here because `log_new_error` is only used in `email_manager.py` and in `email_manager.py`, we are not providing any keyword arguments.', 'comment_created': datetime.datetime(2022, 7, 4, 11, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912927954, 'comment_body': 'Note to @sahiljoster32 Remove Any from here!', 'comment_created': datetime.datetime(2022, 7, 4, 11, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 912949409, 'comment_body': 'remove extra', 'comment_created': datetime.datetime(2022, 7, 4, 12, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913132290, 'comment_body': 'remove space!', 'comment_created': datetime.datetime(2022, 7, 4, 16, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913148139, 'comment_body': 'Change overloads according to new discussion. ', 'comment_created': datetime.datetime(2022, 7, 4, 16, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913149522, 'comment_body': 'Also, why is the sequence used instead of a list!', 'comment_created': datetime.datetime(2022, 7, 4, 16, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913149654, 'comment_body': 'new overloads', 'comment_created': datetime.datetime(2022, 7, 4, 16, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913149753, 'comment_body': 'new overload', 'comment_created': datetime.datetime(2022, 7, 4, 16, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913150555, 'comment_body': '```suggestion\r\n        feconf.REGISTRATION_PAGE_LAST_UPDATED_UTC)\r\n    )\r\n```', 'comment_created': datetime.datetime(2022, 7, 4, 16, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913154025, 'comment_body': 'new overload again', 'comment_created': datetime.datetime(2022, 7, 4, 17, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913154255, 'comment_body': 'aggggghhhhh, new  overload', 'comment_created': datetime.datetime(2022, 7, 4, 17, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913158372, 'comment_body': 'new overload :_)', 'comment_created': datetime.datetime(2022, 7, 4, 17, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913158790, 'comment_body': 'return empty list if possible', 'comment_created': datetime.datetime(2022, 7, 4, 17, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913246444, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913246798, 'comment_body': 'Not possible, because if we remove this then linter throws an error.', 'comment_created': datetime.datetime(2022, 7, 4, 19, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913246865, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913247706, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913247742, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913247794, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913247837, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913247884, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913247923, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913247975, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913248265, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 4, 19, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913251071, 'comment_body': ""for the implementation, the return type is `List[Optional[user_domain.UserSettings]]`.\r\n\r\nBut if `strict=True` provided, the return type is `List[user_domain.UserSettings]` and for `strict=false` the return type is `List[Optional[user_domain.UserSettings]]`. \r\n\r\nAlso, from Invariant property of List, we know `List[aaa]` cannot be a subtype of `List[Optional[aaa]]`. But `List[aaa]` can be subtype of `Sequence[Optional[aaa]]`. So that's why i used `Sequence` here."", 'comment_created': datetime.datetime(2022, 7, 4, 20, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 913437149, 'comment_body': ""Shouldn't the return type be ServerMode (does the name need changing -- is it one mode or multiple modes being returned)?"", 'comment_created': datetime.datetime(2022, 7, 5, 6, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913437384, 'comment_body': 'This needs an explanation.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913437637, 'comment_body': 'Why does it need to be a boolean? I am not sure this is true in general... please check with @BenHenning on this.\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913438193, 'comment_body': ""... a list of 'ParamNames' enums, which causes MyPy to ..."", 'comment_created': datetime.datetime(2022, 7, 5, 6, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913439408, 'comment_body': 'Given that the user_model is not None, why do you need strict=False?', 'comment_created': datetime.datetime(2022, 7, 5, 6, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913439494, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913440385, 'comment_body': 'Should we update the docstring to cover the None case?\r\n\r\n(Or alternatively fix the callsites to always pass in a non-None value?)', 'comment_created': datetime.datetime(2022, 7, 5, 6, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913440793, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913441145, 'comment_body': 'I think this and the next line should be indented by 4 more.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913441790, 'comment_body': 'This seems off -- again, typing should not make it to the ""variable name"" or ""code impl"" level.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913441883, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913441988, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913442542, 'comment_body': 'if user_settings is not None', 'comment_created': datetime.datetime(2022, 7, 5, 6, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913442605, 'comment_body': 'if user_settings is not None', 'comment_created': datetime.datetime(2022, 7, 5, 6, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913443145, 'comment_body': 'It may make more sense to do: if model is None: return None, and then the main logic in the main body of the function.', 'comment_created': datetime.datetime(2022, 7, 5, 6, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 913444027, 'comment_body': 'Why do you need to cast to a list?', 'comment_created': datetime.datetime(2022, 7, 5, 6, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 916220773, 'comment_body': 'More info is added PTAL!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916223127, 'comment_body': 'I think not every value is going to return true, because there is a test to check the False case. https://github.com/oppia/oppia/blob/f8b0f246dd58d07ea38dedbfe42ee584cee15f3b/core/domain/platform_feature_services_test.py#L163', 'comment_created': datetime.datetime(2022, 7, 7, 19, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916224478, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916225178, 'comment_body': 'For this case call sites are fixed!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916226565, 'comment_body': ""Here, `strict=true` is used in the function body. So, at runtime if we provide user_id as `None` and we don't check for the None case then it will raise an error rather than returning `None`"", 'comment_created': datetime.datetime(2022, 7, 7, 19, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916227374, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916227565, 'comment_body': 'So, here i updated the docstring !!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916227914, 'comment_body': 'Variable names are changed, Acc. to the new discussion!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916227989, 'comment_body': 'Variable names are changed, Acc. to the new discussion!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916228054, 'comment_body': 'Variable names are changed, Acc. to the new discussion!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916228145, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916228249, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916228342, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 7, 19, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916230786, 'comment_body': ""The return type of `get_usernames` is `Sequence`, so that's why I used the list here to convert the sequence to List. But now, instead of casting, the assertion is used to narrow down the type."", 'comment_created': datetime.datetime(2022, 7, 7, 19, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916254563, 'comment_body': 'Actually I changed the default value of strict for `get_user_settings` from `False` to `True`, reason:\r\n\r\nPreviously when the default behavior of strict is false, there are many places in the codebase where `get_user_settings` is called without `strict` keyword argument and Its returned value is treated as non-None value ( like the returned value cannot contain none ). Due to this situation MyPy throwing more than 120+ errors. So to fix the error we have 2 approaches:\r\n1. use assertion everywhere error is introduced.\r\n2. change the default behavior.\r\n\r\nI changed the default behavior.\r\n\r\nAlso, all the call sites are fixed accordingly so that nothing will break.', 'comment_created': datetime.datetime(2022, 7, 7, 20, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916257659, 'comment_body': 'Similarly, this call site is fixed by adding `strict=false`. Because previously it was using strict as false', 'comment_created': datetime.datetime(2022, 7, 7, 20, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916259377, 'comment_body': 'reason is added above!', 'comment_created': datetime.datetime(2022, 7, 7, 20, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916266889, 'comment_body': 'Here 2 server modes are returned ( DEV and production ) based on the condition. \r\n\r\nAlso, `ServerModes` is defined as an Enum class. \r\nTo align the name here with the return value we have to change the name of `ServerModes` to `ServerMode` everywhere, which may result in a mismatch in other places.', 'comment_created': datetime.datetime(2022, 7, 7, 20, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916275173, 'comment_body': ""What's our condition for other enums in the codebase? Let's standardize."", 'comment_created': datetime.datetime(2022, 7, 7, 20, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 916275606, 'comment_body': ""No, I mean, I'm not sure it's true that every value is going to be a boolean. Is it possible for it to be a string etc.?"", 'comment_created': datetime.datetime(2022, 7, 7, 20, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 916276264, 'comment_body': ""I'm ok with changing the default behaviour.\r\n\r\nBut I'm asking a logical question here -- in what case could this return None anyway?"", 'comment_created': datetime.datetime(2022, 7, 7, 20, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 916523313, 'comment_body': ""I think this is odd. It's probably better to prevent callsites from ever passing None to this function, right? Like, ideally, a user_id is actually a user_id."", 'comment_created': datetime.datetime(2022, 7, 8, 7, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 916523785, 'comment_body': ""Extra '#' sign."", 'comment_created': datetime.datetime(2022, 7, 8, 7, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 916585822, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 7, 8, 8, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916596630, 'comment_body': 'I think if we look at the docstring, it says `the values are boolean results of corresponding flags.` So I assumed that the values are going to be boolean converted values. \r\nhttps://github.com/oppia/oppia/blob/1bd5ab86be391bb9ee896cfe0514ab3ab8093665/core/domain/platform_feature_services.py#L185\r\n\r\n@BenHenning it would be very helpful if you clear the ambiguity :)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 8, 8, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916613058, 'comment_body': ""Ohh ok, Now I get the point. You mean we are already checking if the model exists or not and still we are using `strict=false`, right? If that's the question I think then it makes sense to me that `strict` is redundant here! "", 'comment_created': datetime.datetime(2022, 7, 8, 9, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916615780, 'comment_body': ""Optional is removed from here with some refactoring in the function body. But I have encountered a test case where `None` is used for guest user. \r\nhttps://github.com/oppia/oppia/blob/1bd5ab86be391bb9ee896cfe0514ab3ab8093665/core/domain/user_domain_test.py#L376\r\nSo, I'm not sure removing `None` from here is a good thing or not!!!"", 'comment_created': datetime.datetime(2022, 7, 8, 9, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916645081, 'comment_body': 'I found that https://github.com/oppia/oppia/blob/1bd5ab86be391bb9ee896cfe0514ab3ab8093665/core/domain/platform_parameter_domain.py#L164\r\nhere also `ServerMode` sounds more reasonable. So, I changed servermodes in all places.', 'comment_created': datetime.datetime(2022, 7, 8, 9, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 916646057, 'comment_body': 'can you please elaborate a bit more on what is your mean by -- `condition for other enums in the codebase`', 'comment_created': datetime.datetime(2022, 7, 8, 9, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917126018, 'comment_body': 'Ah, I just meant checking other enums to see what is done there.\r\n\r\nBut your changes look good to me.', 'comment_created': datetime.datetime(2022, 7, 8, 20, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 917126416, 'comment_body': 'OK, I think that seems reasonable. But then why do you need to cast to a boolean here? Shouldn\'t ""evaluate"" return a boolean result?', 'comment_created': datetime.datetime(2022, 7, 8, 20, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 917128723, 'comment_body': 'Thanks, good to check this. Is has_fully_registered() ever called with None outside a test context?\r\n\r\nIf not, we can drop the test.\r\n\r\nIf so, then we should fix those places to not call it with None (and then drop the test).', 'comment_created': datetime.datetime(2022, 7, 8, 20, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 917128924, 'comment_body': '(Or I suppose, in both cases, you could still keep the test for ""defense in depth"".)', 'comment_created': datetime.datetime(2022, 7, 8, 20, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 917274132, 'comment_body': ""It's not necessary that `evaluate` is always going to return a `boolean` value. because if look at the `evaluate` function's code, we can see that it can also return `default_value` ( which can be a string and int as well ).\r\n\r\nhttps://github.com/oppia/oppia/blob/c5c4515b361f0b21494ab4f7333ef9610665060c/core/domain/platform_parameter_domain.py#L847\r\n\r\nAlso, from test cases, It is clearer that not only bool is returned https://github.com/oppia/oppia/blob/c5c4515b361f0b21494ab4f7333ef9610665060c/core/domain/platform_parameter_domain_test.py#L1969\r\nhttps://github.com/oppia/oppia/blob/c5c4515b361f0b21494ab4f7333ef9610665060c/core/domain/platform_parameter_domain_test.py#L2006"", 'comment_created': datetime.datetime(2022, 7, 9, 14, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917277480, 'comment_body': ""Please correct me if I'm wrong somewhere!"", 'comment_created': datetime.datetime(2022, 7, 9, 15, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917277845, 'comment_body': ""https://github.com/oppia/oppia/blob/c5c4515b361f0b21494ab4f7333ef9610665060c/core/controllers/profile.py#L333\r\nhttps://github.com/oppia/oppia/blob/c5c4515b361f0b21494ab4f7333ef9610665060c/core/controllers/profile.py#L425\r\n\r\nHere In both places, I added assertion!!\r\nBecause the type of `self.user_id` is Optional[str] and I didn't find any case where `User_id` provided as None."", 'comment_created': datetime.datetime(2022, 7, 9, 15, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917278350, 'comment_body': ""I also tried to hit the `SignupPage` handler as a guest user ( by going to `//signup`). But i'm only able to do it when I logged in and do not able to do it as a guest user. So I assume that user_id I not going to be none. But for extra security i added assertion here ( if you prefer also )."", 'comment_created': datetime.datetime(2022, 7, 9, 15, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917302769, 'comment_body': ""Shouldn't this be optional also?"", 'comment_created': datetime.datetime(2022, 7, 9, 19, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 917304489, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 9, 20, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917353780, 'comment_body': 'OK, so then maybe you need to check this with @BenHenning (maybe send an email).  Because it seems like the docstring is saying one thing, and the signature for evaluate() is telling you a different thing.', 'comment_created': datetime.datetime(2022, 7, 10, 7, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 917354499, 'comment_body': ""The docstring below is not updated with the new default value for 'strict'."", 'comment_created': datetime.datetime(2022, 7, 10, 7, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 917359528, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 7, 10, 8, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917414026, 'comment_body': ""Hmm, do we even still need this function? I think we have way so capture logging output and we don't need to swap this in the tests."", 'comment_created': datetime.datetime(2022, 7, 10, 15, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 917414433, 'comment_body': 'We have `capture_logging` in _test_utils.py_', 'comment_created': datetime.datetime(2022, 7, 10, 15, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 917415132, 'comment_body': 'Should we rather on lines 496 to 496 (where `get_email_from_user_id` is called) create a new variable that will not be optional?', 'comment_created': datetime.datetime(2022, 7, 10, 16, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 917415389, 'comment_body': 'Hey, can you create an issue for me to investigate if this can be simplified? I think it might be possible to create some generics for this.', 'comment_created': datetime.datetime(2022, 7, 10, 16, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 917419722, 'comment_body': 'I think it should be fine to return sequence from this function.', 'comment_created': datetime.datetime(2022, 7, 10, 16, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 917584375, 'comment_body': ""Method `log_new_error` is used in `email_manager.py` to log the error with the method `logging.error()` \r\nhttps://github.com/oppia/oppia/blob/6493f6b7c8ed159108af963874ac45381cdfdd82/core/domain/email_manager.py#L441\r\nand in tests, we are swapping `log_new_error` with the test_utils's `CallCounter()` to check how many times the `log_new_error` is called and we are not actually logging the errors in test cases. \r\nhttps://github.com/oppia/oppia/blob/6493f6b7c8ed159108af963874ac45381cdfdd82/core/domain/email_manager_test.py#L621"", 'comment_created': datetime.datetime(2022, 7, 11, 6, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917595538, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 11, 6, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917595672, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 11, 6, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917618429, 'comment_body': 'I have created an issue #15702  . PTAL!\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 7, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917706592, 'comment_body': 'Email is sent!! and waiting for response. In mean while can you please take a look at other comments?', 'comment_created': datetime.datetime(2022, 7, 11, 9, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917905519, 'comment_body': 'I mean all this behaviour can be tested by using `capture_logging`.', 'comment_created': datetime.datetime(2022, 7, 11, 13, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 917949757, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 7, 11, 13, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 918775093, 'comment_body': 'After your suggestion, the assertion is added!! PTAL!', 'comment_created': datetime.datetime(2022, 7, 12, 9, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 918777355, 'comment_body': '@seanlip ', 'comment_created': datetime.datetime(2022, 7, 12, 9, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 919003992, 'comment_body': '`log_new_error` method is removed from the main file, and `capture_logging` is used in the test file. PTAL!', 'comment_created': datetime.datetime(2022, 7, 12, 13, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '657d0806e0d2b91b16f1925812554b254176acad', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea9ac08ec034c7f85b9cca3456fe817377a4594', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05ecdd3d5d57f9a9788580f5cebe5a71cae50831', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '889f5fb3c60a66a0f71b16a6dbb1fd3e8bb53b98', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c848b33419a73eafdece32ce491276bc33b51f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a17402d9b5a392e5d7b3a7031803801e58e659e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409f96354b03e381caee7b2387cdef13c0c5c0e6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c415d370e2041d88048d52273fa2ab48d8ae80e6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c49df7db8f946217effe9ece17218a83af69e9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '839d4389827eff834184cb09425a50d13f6535f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073aefd9e9cc99113b40bdd475649653f04a1205', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27ab1a958001833262b7890a8ebb0156f01e7c6d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d3dbdb6a7ff1f41a00abc1b71c4fe33831f02f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b611749b258058ae59960c5487760bed49a276e6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ccd753651a7087df3a60afc50d7ad50672aeb88', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83fe456cbd8b81e6503289887423b9d073d94807', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e7c066427d535884951f29cebdf1797e416a9b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f4e05f2c866dbed440b3d7938a0b7ed20f5d4fb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30c31d8589a22c6bdaf8ac8be3ab89453ae4b074', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0bddfc85e05b711f4e6ed6385ff474e34d4519c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392d3f86d20f2ec8244c7965927d4a7147fc3075', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc017ac1883305aa1951ae9e9204dc696f00dba', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128d0089ccbeac5b5628dc4aa068af71e919be79', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4108843d736ee24170b81baf1f30f177b4b91cb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26976cbabb363887693398dd0f219734c216488b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d30c2716f33ec83403f718ff91214c5a0fc040', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b75843a3728e44801fefd659ead87b60439b37e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d1dd5b2a0b61d17d36eddb198aaba1ecae8a4e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d37692697c0ff64db262065ca4b06f870cc66c3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45769fb8cf018c897bff83e4f8783ebb0b0c922', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b794e61d286b7c65b58a993d926430d161526b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfdad58cace08336824a1dff72d935e578eee175', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158e5722fad25886cc7fa11906432c95c2f0f2b9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f25c4f3c33c97d4a2b9e635ba283724af8f4d21f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13c51940710252a44dabd514f83a66d82a430391', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f128c93a61fd59c98fdb5bd5c9d54f3e9fd1967', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8474c513740e86e83d44c5fe971863688033afa3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a69ebdc8926e8da17ea5bf5698e6398223da1251', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'def17fc914ac5e3794856b25f453f403229b7cce', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab7e7a2728198ed34188871ba5a3942da19ffc1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31179599f4d8bcff91de85e4fc7455bd682eb3ec', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9cade6c757826e54646c01859150f07122e18ab', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b46d3e74c9a68752661b0e5b0f163de8bd77814e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1726bffb9716ef67bff5a081f3b141bee0e930a7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6606db06abbf2966f4ae345ca3742223e1a03ff4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce303bf58ec4d6ed7615f0dafdb301f0f0627cf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1c706b20f9d343ca6f794308d5f5a190e1b9c7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e2605fe81d074b48486d0bf4037d334396d560', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26a8633f6b72cf573a832568d83f7278f43c569a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8e133432b0ee8f1fa19061be9bcd1a3b929972', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ecf96f14128ce9bcb53745ff8a051eb23c0548', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c4fef8bca1452812d12b291b4dd3203014edb99', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e241aa3555e68bce75d6266d807583dbda28de', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65b855a7e8bb34d7ab503d60b07d81e76bda80bd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7192e9b844a312c88f9eff0ca2997beb63ac95d1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7950ab0bd989db552ce75cbf2a29813a0b90e50', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75552d514dc1a3a757ae86487ac2486223d1d1c6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '102ee04e942646ee87c305b2be02f4a1de7971ca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c835696daa6799279d209a8ef3ecf44975dd70', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab3233e5ded189cc7398add75922a4a3cbd38c4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8a64e7a516df398933ea3c6fac0446f108d220', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c90de1815e4bc998451fae40bcfc3c0158358e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
991599457,Fix part of #14033: Added Mypy type annotations to some files of domain folder. -- M1.7,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - draft_upgrade_services.py
 - rights_manager.py
 - skill_domain.py
 - exp_domain.py
 - feedback_services.py



## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.
<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15693,https://api.github.com/repos/oppia/oppia/pulls/15693,https://github.com/oppia/oppia/pull/15693,closed,3977,2217,63,84,44,206,0,1,[],2022-07-08 12:19:02+00:00,2022-08-12 09:46:27+00:00,3014845.0,"34 days, 21:27:25","[{'comment_id': 919702281, 'comment_body': 'These keys are redundant, because:\r\n1. These keys are not used in tests.\r\n2. `ExplorationDict` does not accept `created_on`, `version` and `last_updated` keys.\r\n3. `from_dict()` method of `exploration` can accept `created_on`, `version` and `last_updated` only as a separate argument ( not within the same dict ).', 'comment_created': datetime.datetime(2022, 7, 13, 6, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 919718650, 'comment_body': 'Any is used here because there are many types that are complex and sub-type of a single type: \r\n\r\nTaking an example of `Dict[str, Any]`, here Any is used to cover all the below cases like:\r\n`Dict[str, Union[str, List[<nothing>], Dict[str, str], bool, None]]`, `Dict[str, Dict[str, bool]]`, `Dict[str, str]`, `Dict[str, Dict[str, str]]`, `Dict[<nothing>, <nothing>]`, `Dict[str, Union[bool, Collection[str], None]]` and many more ...\r\n\r\nIf we add every single type here, then I think that would be much !!\r\n\r\nPTAL ad let me know about this!!\r\n\r\nSimilar goes for `List[Dict[str, Any]]`', 'comment_created': datetime.datetime(2022, 7, 13, 7, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 919750165, 'comment_body': 'Every attribute ( other than cmd ) is created dynamically on instances of BaseChange class.\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/change_domain.py#L172\r\n\r\nAlso, here we defined the `__getattr__` method with return type str.\r\n\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/change_domain.py#L283\r\n\r\nso every attribute which is created dynamically has type str. I did not altered the return type of `__getattr__` method because in codebase most of the attributes has str type. if we put union here then we have to use assertion in every place.', 'comment_created': datetime.datetime(2022, 7, 13, 7, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 919926265, 'comment_body': 'Here I want to confirm the behavior because I have encountered too many test cases where None is provided but if we look at the docstring of `create_thread` it says only string is acceptable !!\r\n\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/feedback_services.py#L147\r\n\r\nPTAL into this!', 'comment_created': datetime.datetime(2022, 7, 13, 10, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 919934846, 'comment_body': 'I did these changes because according to the docstring `value` and `list_of_values` key does not co-exist either `value` key should be present or `list_of_values` should be present. \r\n\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/param_domain.py#L117', 'comment_created': datetime.datetime(2022, 7, 13, 10, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 919937597, 'comment_body': 'below we are not checking the case of None, so I converted `strict` from false to true.', 'comment_created': datetime.datetime(2022, 7, 13, 10, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 919997633, 'comment_body': 'It would be helpful if you guys reply to this ( @seanlip @vojtechjelinek @aasiffaizal )', 'comment_created': datetime.datetime(2022, 7, 13, 12, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 920338073, 'comment_body': ""It's possible for someone to anonymously submit feedback through the Web UI, right? (You can see this by going to an incognito window, opening an exploration, and using the feedback tooltip in the top right next to the language selector.)"", 'comment_created': datetime.datetime(2022, 7, 13, 17, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920507396, 'comment_body': ""Just to check, what actually stops interaction_id from being None when an exploration is passed to this function? (I'm wondering whether we actually need to handle this case.)"", 'comment_created': datetime.datetime(2022, 7, 13, 20, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920507448, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 7, 13, 20, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920507955, 'comment_body': 'Not sure about this and some of the following changes -- as mentioned, feedback messages can be created anonymously.', 'comment_created': datetime.datetime(2022, 7, 13, 20, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920508773, 'comment_body': 'Not keen on the Any here. Can you type it more strictly?', 'comment_created': datetime.datetime(2022, 7, 13, 20, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920510349, 'comment_body': 'This seems good.\r\n\r\nI wonder -- would it make more sense / be simpler to just define model directly in the if/elif, rather than add an extra model_cls? Also maybe we should add an ""else raise Exception"" clause to handle the case where activity_type is neither of the two, unless that can be prevented by typing.', 'comment_created': datetime.datetime(2022, 7, 13, 21, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920511090, 'comment_body': ""What guarantees that activity_rights exist if this function is called?\r\n\r\n(Checking because, for every such case, we actually need to make a decision whether to do error-handling or make an assertion. This is a general thing that's worth keeping in mind going forward.)"", 'comment_created': datetime.datetime(2022, 7, 13, 21, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920511781, 'comment_body': ""This seems mistyped or misnamed. Shouldn't a variable called exp_models_list contain exploration models rather than rights models?"", 'comment_created': datetime.datetime(2022, 7, 13, 21, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920512204, 'comment_body': 'Same comments as above regarding simplification and else clause.', 'comment_created': datetime.datetime(2022, 7, 13, 21, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920512410, 'comment_body': 'and --> or', 'comment_created': datetime.datetime(2022, 7, 13, 21, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920512717, 'comment_body': 'Why was the original formulation of this code not working?', 'comment_created': datetime.datetime(2022, 7, 13, 21, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920513326, 'comment_body': ""Why is this guaranteed? Also shouldn't the assertion come a lot earlier in this function (noting the change you made to the if clause above)?"", 'comment_created': datetime.datetime(2022, 7, 13, 21, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920513777, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 7, 13, 21, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920513982, 'comment_body': 'Weird, how did this work before, or pass tests? (Is it possible that we now have data corruption on the server)?\r\n\r\n/cc @kevintab95 ', 'comment_created': datetime.datetime(2022, 7, 13, 21, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920514592, 'comment_body': 'Same question about guarantees.', 'comment_created': datetime.datetime(2022, 7, 13, 21, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 920514675, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2022, 7, 13, 21, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 921207334, 'comment_body': 'This seems a bit weird, why is that?', 'comment_created': datetime.datetime(2022, 7, 14, 14, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 921212425, 'comment_body': 'Why can this be optional?', 'comment_created': datetime.datetime(2022, 7, 14, 14, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 922550171, 'comment_body': '```suggestion\r\n                else None\r\n            )\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 22, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922553449, 'comment_body': 'Why has this changed from `list` to `dict`?', 'comment_created': datetime.datetime(2022, 7, 15, 22, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922635601, 'comment_body': ""Yeah, you are right!! \r\n\r\nSo, Optional[str] is added for those methods that can accept `None` for anonymous users.\r\n\r\nAlso, I just kept `None` only for those test cases where we are are covering anonymous user test case, and for other test cases i just used `test_user` ( because previously in almost all test cases we are using none, which seems like we are testing only for anonymous user. Please correct me if I'm wrong somewhere )"", 'comment_created': datetime.datetime(2022, 7, 16, 5, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922636754, 'comment_body': '`model_cls` is removed and now we are directly defining the model.\r\n\r\nIn the whole file, function `_get_activity_rights` is called before we call `_save_activity_rights` and in `_get_activity_rights` we are already checking if `activity_type` is either of two or not.\r\n\r\nhttps://github.com/oppia/oppia/blob/5f1b2e12f61f3daf750c44cc5dab58071ad582aa/core/domain/rights_manager.py#L471\r\n\r\nSo, if we add an exception here then I think that expectation will never be executed.\r\n', 'comment_created': datetime.datetime(2022, 7, 16, 5, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922637053, 'comment_body': 'In line 123, we are using `interaction_id` to fetch value from `feconf.INTERACTION_CLASSIFIER_MAPPING` and in `feconf.INTERACTION_CLASSIFIER_MAPPING` there is no key which is defined as `None`.\r\n\r\nSo to handle this i used assertion here! ', 'comment_created': datetime.datetime(2022, 7, 16, 5, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922637283, 'comment_body': 'Similarly in line 584, we are using interaction_id to fetch a value from `feconf.INTERACTION_CLASSIFIER_MAPPING` and in `feconf.INTERACTION_CLASSIFIER_MAPPING` there is no key which is defined as None.\r\n\r\nSo to handle this I used assertion here!', 'comment_created': datetime.datetime(2022, 7, 16, 5, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922637502, 'comment_body': ""As mentioned above, I just kept None only for those test cases where we are covering anonymous user test case. However, I'm ok with reverting all the test cases back to `None` if you have any concern!!"", 'comment_created': datetime.datetime(2022, 7, 16, 5, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922637524, 'comment_body': 'naming changed.', 'comment_created': datetime.datetime(2022, 7, 16, 5, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922638754, 'comment_body': '`rights_model_class` is removed and now we are defining models in if/else clause. \r\n\r\nAlso, this method is only called in two places and there we are not providing `activity_type` other than these two.\r\nhttps://github.com/oppia/oppia/blob/5f1b2e12f61f3daf750c44cc5dab58071ad582aa/core/domain/rights_manager.py#L292\r\nhttps://github.com/oppia/oppia/blob/5f1b2e12f61f3daf750c44cc5dab58071ad582aa/core/domain/rights_manager.py#L307\r\n\r\nSo, i think defining expectation here is redundant !!', 'comment_created': datetime.datetime(2022, 7, 16, 6, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922638778, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 16, 6, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922639253, 'comment_body': 'The expected return type of this function is `bool`. So, when we define `bool` as return type, mypy assumes that in every case bool is returned but here we are returning bool only for some cases `by doing elif` and for other case we are not returning anything which causes MyPy to throw error.\r\n\r\nSo, to return bool for every case I did this change.', 'comment_created': datetime.datetime(2022, 7, 16, 6, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922639589, 'comment_body': '`List[Dict[str, Union[str, int]]]` cannot allow `List[Dict[str, int]]]` as a subtype. So, to allow subtyping i used `sequence[mapping[...]]` PTAL!', 'comment_created': datetime.datetime(2022, 7, 16, 6, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922640189, 'comment_body': 'Also, I used the same union type that we are using in the change domain. https://github.com/oppia/oppia/blob/5f1b2e12f61f3daf750c44cc5dab58071ad582aa/core/domain/change_domain.py#L30', 'comment_created': datetime.datetime(2022, 7, 16, 6, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922640917, 'comment_body': ""In line 218, we are accessing the `first_published_msec` attribute without checking if `activity_rights` is none or not.\r\n\r\nSo, that's why I added the assertion here."", 'comment_created': datetime.datetime(2022, 7, 16, 6, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922641273, 'comment_body': ""In line 958, we are accessing the `assign_new_role` method without checking for none case.\r\nSo, that's why i added assertion. "", 'comment_created': datetime.datetime(2022, 7, 16, 6, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922641416, 'comment_body': 'Similarly, in line 1085, we are assessing `owner_ids` without checking the none case of `activity_rights`.', 'comment_created': datetime.datetime(2022, 7, 16, 6, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922641510, 'comment_body': 'Similarly, we are assessing attributes without checking for none cases.', 'comment_created': datetime.datetime(2022, 7, 16, 6, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922641526, 'comment_body': 'Similarly, we are assessing attributes without checking for none cases.', 'comment_created': datetime.datetime(2022, 7, 16, 6, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922642489, 'comment_body': 'Can you update us about this @kevintab95 !!', 'comment_created': datetime.datetime(2022, 7, 16, 6, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922644115, 'comment_body': ""I did this change because importing `platform_parameter_domain` as normally ( like other imports ) throws an import error. So to avoid the import error I imported `platform_parameter_domain` in `if MYPY:` clause.\r\n\r\n`AcceptableChangeDictTypes` also shifted under `if MYPY:` clause because after shifting `platform_parameter_domain` to `if` clause backend test throws an error `platform_parameter_domain is not defined` ( which is expected because code written under `if MYPY:` clause does not execute at runtime. ).\r\n\r\nAlso, `AcceptableChangeDictTypes` is only defined for type checking so i think it's not a problem if we shift it under the `if` clause because from `AcceptableChangeDictTypes` it is not expected to execute at runtime."", 'comment_created': datetime.datetime(2022, 7, 16, 7, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922647174, 'comment_body': 'No, I don\'t think that\'s a valid reason at all. Why can\'t state.interaction.id be None at this point? The answer needs to be based on code coming ""before"" this one.\r\n\r\nFor example, if I give you the code `y = x + 1` you can\'t say ""x must be an integer because this line of code should work"". Instead, you\'ll need to justify why x has been already set up to be an integer, so that the line of code is guaranteed to work at runtime.\r\n\r\nI have similar concerns for your answers below to similar questions.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922647230, 'comment_body': 'Please see above.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922647340, 'comment_body': ""What you've done is perfect -- thanks @sahiljoster32. Only thing I noticed is that you forgot to update the typeinfo in the docstrings of the incorrect methods? "", 'comment_created': datetime.datetime(2022, 7, 16, 7, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922647507, 'comment_body': ""Then wouldn't you need to at least assert that activity_type is one of the two possible things? The concern here is if something else calls this function (wrongly) in the future, so an exception still makes sense.\r\n\r\nBasically, each function's contract and correctness should be self-contained, don't look at just its current callers. People may modify the code in the future and new (incorrectly-behaving) callers might get introduced."", 'comment_created': datetime.datetime(2022, 7, 16, 7, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922647584, 'comment_body': 'See above, this is not sufficient justification.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922647708, 'comment_body': 'See comment above regarding the exception and how to think about this sort of thing.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922647819, 'comment_body': 'Thanks for explaining. I think you can keep the old code (it maintains less ""state"") and add a ""return False"" at the end.\r\n\r\nThis is a great thing to catch by typing!', 'comment_created': datetime.datetime(2022, 7, 16, 7, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922647904, 'comment_body': ""This reasoning is not valid. See above.\r\n\r\nBasically, the code might be wrong and there might actually be a need to handle the None case. An analysis of the callers is needed to figure out whether the code should be changed or whether the assertion is guaranteed to always hold. Bear in mind that new callers may call these functions erroneously (i.e. without preserving any implicit guarantees) so there needs to be safety checks in place.\r\n\r\nIn general I think that if a variable is not guaranteed to satisfy a particular condition _based on the logic within the function itself_ then you shouldn't assert it, and instead update the code to handle the additional cases."", 'comment_created': datetime.datetime(2022, 7, 16, 7, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922648060, 'comment_body': 'See comments above.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922648072, 'comment_body': '@sahiljoster32 Just to confirm, this is a question for you, though @kevintab95 may have some insight. (That\'s what ""cc"" means -- otherwise I would have addressed it to him directly.)', 'comment_created': datetime.datetime(2022, 7, 16, 7, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922648083, 'comment_body': 'Nope, see above.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922648088, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922686538, 'comment_body': 'Why is this `Optional` ?', 'comment_created': datetime.datetime(2022, 7, 16, 14, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922687682, 'comment_body': 'This test never failed when the key was different?', 'comment_created': datetime.datetime(2022, 7, 16, 14, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922703392, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 16, 17, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922703539, 'comment_body': ""I think `customization_args` always defined as \r\n```python\r\n{ 'value': <actual value> }\r\n```\r\nThat's why I added Dict instead of the list. MyPy also throwing error for the same."", 'comment_created': datetime.datetime(2022, 7, 16, 17, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922703816, 'comment_body': 'In the implementation of `to_dict` and `from_dict` method self.id is considered as Optional[str]:\r\nhttps://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/state_domain.py#L700\r\nhttps://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/state_domain.py#L743', 'comment_created': datetime.datetime(2022, 7, 16, 17, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922703984, 'comment_body': ""Here, `misconceptions`'s elements is a dict of type `MisconceptionDict` and `MisconceptionDict` does not contain any `misconception_id` key. so make it proper `MisconceptionDict` i converted it to `id`"", 'comment_created': datetime.datetime(2022, 7, 16, 17, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922704543, 'comment_body': 'typeinfo is added in docstrings!!', 'comment_created': datetime.datetime(2022, 7, 16, 17, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922704565, 'comment_body': 'assertion is added ', 'comment_created': datetime.datetime(2022, 7, 16, 17, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922704610, 'comment_body': 'assertion is added!', 'comment_created': datetime.datetime(2022, 7, 16, 17, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922705312, 'comment_body': 'return is added at last\r\n', 'comment_created': datetime.datetime(2022, 7, 16, 17, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922711749, 'comment_body': 'This function is never used in the codebase apart from test cases ( but in test cases, we are also not checking the none case of `activity_rights` ). So, shall I raise an expectation here!!', 'comment_created': datetime.datetime(2022, 7, 16, 19, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922712479, 'comment_body': 'In Line `948`, we are already checking if `activity_rights` is None or not.\r\n\r\nIn `check_can_modify_core_activity_roles()` method, \r\nhttps://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/rights_manager.py#L808\r\nIf we provide `activity_rights` as None then it going to return a False value and that False value is assigned to `user_can_assign_role`. So, if `user_can_assign_role` is False then an error is raised in line `951`. ', 'comment_created': datetime.datetime(2022, 7, 16, 19, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922712904, 'comment_body': 'Similarly, in line `1091` we are already checking if activity_rights is None or not.\r\n\r\nIn `check_can_modify_core_activity_roles()` method, \r\nhttps://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/rights_manager.py#L938\r\n\r\nIf we provide activity_rights as None then it going to return a False value and that False value is assigned to `user_can_deassign_role`. So, if `user_can_deassign_role` is False then an error is raised in line 1094.', 'comment_created': datetime.datetime(2022, 7, 16, 19, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922713172, 'comment_body': 'Here, we are passing `activity_rights` to `check_can_release_ownership` method in line `1167`. If `activity_rights` is None then `check_can_release_ownership` is going to return false and an exception is raised in line 1167.', 'comment_created': datetime.datetime(2022, 7, 16, 19, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922713209, 'comment_body': 'https://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/rights_manager.py#L684', 'comment_created': datetime.datetime(2022, 7, 16, 19, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922713667, 'comment_body': 'This `_change_activity_status` method is called in `_publish_activity` and `_unpublish_activity` methods, and there we are already checking the none case of activity_rights by calling https://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/rights_manager.py#L1080\r\nhttps://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/rights_manager.py#L1112', 'comment_created': datetime.datetime(2022, 7, 16, 19, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922717932, 'comment_body': ""I think Previously when we are passing any `removed_user_id`, `user_services.get_usernames()` always returns None ( because it can give Optional values too ) and that none is assigned to `assignee_username`. \r\n\r\nSo, if we see line `1126`, there we are handling the case of None and assigning `assignee_username` with `ANONYMOUS`. I think that's the reason why backend tests are passing. Because while saving `activity_rights` ( in line 1140 ), the generated comit_message only contains `ANONYMOUS` values.\r\n\r\nI think all the commit messages contains ANONYMOUS values ( Not sure, need a second opinion because i just follow the flow of code and did some debugging  )"", 'comment_created': datetime.datetime(2022, 7, 16, 20, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922718799, 'comment_body': 'I checked all the test cases and in all test cases previously all `assignee_username`s are None.', 'comment_created': datetime.datetime(2022, 7, 16, 20, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922719531, 'comment_body': 'This function is used in 2 other functions and there is no sign of any validation ( check ) for interaction id we are just passing the values here. can we add an exception here, can you please help!!\r\n ', 'comment_created': datetime.datetime(2022, 7, 16, 20, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922719589, 'comment_body': 'Similar situation as above, no validation exists for interaction.id in callers ', 'comment_created': datetime.datetime(2022, 7, 16, 20, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922799854, 'comment_body': ""If there is a possibility of an incorrect interaction ID coming in here, it has to be handled properly, either here or in the callers. I don't really see a basis for an exception; please work with your mentor @aasiffaizal on this."", 'comment_created': datetime.datetime(2022, 7, 17, 9, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922799999, 'comment_body': ""If it is never used in the codebase, then you can delete it -- it's dead code."", 'comment_created': datetime.datetime(2022, 7, 17, 9, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922800140, 'comment_body': 'Hm, I think we need to add more test cases then -- and you might want to talk to @kevintab95 directly about this since there may be a serious bug here that has affected the datastore.', 'comment_created': datetime.datetime(2022, 7, 17, 9, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922800453, 'comment_body': 'This is a good justification and it works fine for this case. Thanks! The comment is also great.\r\n\r\nHowever, it would probably be better to have an ""if activity_rights is None"" clause just after line 1165 with a more specific error message. Then the assertion makes sense in the context of this function and will not change if the logic in check_can_release_ownership is changed in the future.', 'comment_created': datetime.datetime(2022, 7, 17, 9, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922800546, 'comment_body': 'Similar to above, this is a better justification than before, but better if you do an `if activity_rights is None` here (or use the ""strict"" paradigm where an exception is thrown in _get_activity_rights if the item doesn\'t exist).', 'comment_created': datetime.datetime(2022, 7, 17, 9, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922800635, 'comment_body': 'No, I have no concerns; you did the right thing here. Thanks!', 'comment_created': datetime.datetime(2022, 7, 17, 9, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 922892032, 'comment_body': 'Can you add a comment explaining why `AcceptableChangeDictTypes` is also in the code?', 'comment_created': datetime.datetime(2022, 7, 17, 20, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 922895392, 'comment_body': 'Are you sure about this? Changing code inside these conversion methods is a bit dangerous', 'comment_created': datetime.datetime(2022, 7, 17, 21, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 922895614, 'comment_body': 'Why is deepcopy removed?', 'comment_created': datetime.datetime(2022, 7, 17, 21, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923103651, 'comment_body': ""Finally found something!\r\n\r\nThis method is only used in controllers' classifier.py and there we are already validating the `interaction_id`.\r\n\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/controllers/classifier.py#L146"", 'comment_created': datetime.datetime(2022, 7, 18, 8, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923116451, 'comment_body': ""This method is used in exp_services in two places:\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L970\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L1053\r\n\r\nThe only possible solutions to this situation I think, are:\r\n1. handling `None` case in `handle_trainable_states` by doing the following thing:\r\n```python\r\nif interaction_id is None:\r\n    interaction_id = 'TextInput'\r\n```\r\nbecause if we see line 123 and 126, there we are using interaction_id to access element from `feconf.INTERACTION_CLASSIFIER_MAPPING` and in `feconf.INTERACTION_CLASSIFIER_MAPPING` there is only one element with the key `TextInput`. \r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/feconf.py#L181\r\n\r\n2. We can handle this case as we are doing already in the codebase :\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/controllers/classifier.py#L146\r\n\r\nIf you have any other ideas please specify!! that would be very helpful for us!!!"", 'comment_created': datetime.datetime(2022, 7, 18, 9, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923117100, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 7, 18, 9, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923123466, 'comment_body': ""found more info!! \r\nif we see the `_assign_role` method, there we are doing the same thing but we are using `user_services.get_username`\r\n\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/rights_manager.py#L819\r\nand internally `user_services.get_username` is implemented same as `user_services.get_usernames([removed_user_id])[0]` \r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/user_services.py#L1227\r\nI'll write an email to @kevintab95 about this but in mean time can you please take a pass on other comments ?"", 'comment_created': datetime.datetime(2022, 7, 18, 9, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923126415, 'comment_body': '""strict"" paradigm is added to `_get_activity_rights` and `strict=True` used here, Now `_get_activity_rights` will throw it\'s own error ( if activity_rights is not found for the given activity_id ).', 'comment_created': datetime.datetime(2022, 7, 18, 9, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923126581, 'comment_body': '""strict"" paradigm is added to _get_activity_rights and strict=True used here, Now _get_activity_rights will throw it\'s own error ( if activity_rights is not found for the given activity_id ).', 'comment_created': datetime.datetime(2022, 7, 18, 9, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923143042, 'comment_body': '```suggestion\r\n        self,\r\n        title: str,\r\n        category: str,\r\n        objective: str,\r\n        language_code: str,\r\n        tags: List[str],\r\n        blurb: str,\r\n        author_notes: str,\r\n        states_schema_version: int,\r\n        init_state_name: str,\r\n        param_specs: Dict[str, param_domain.ParamSpec],\r\n        param_changes: List[param_domain.ParamChange],\r\n        auto_tts_enabled: bool,\r\n        correctness_feedback_enabled: bool,\r\n        edits_allowed: bool\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 7, 18, 9, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923152550, 'comment_body': 'Should a TODO be used here?', 'comment_created': datetime.datetime(2022, 7, 18, 9, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923152735, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 7, 18, 9, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923157720, 'comment_body': 'Can this be moved to the previous line?', 'comment_created': datetime.datetime(2022, 7, 18, 9, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923158136, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 7, 18, 9, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923191251, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 7, 18, 10, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923192871, 'comment_body': 'Previously `copy.deepcopy` returning Dict[str, Any] but now it is fixed!!', 'comment_created': datetime.datetime(2022, 7, 18, 10, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923198694, 'comment_body': ""```suggestion\r\n        self.activity_rights.cloned_from = 'abcdefgh'\r\n```\r\nKeeping it `'True'` is a bit confusing as you wonder whether it should be bool or not."", 'comment_created': datetime.datetime(2022, 7, 18, 10, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923204043, 'comment_body': '```suggestion\r\n    # Ruling out the possibility of any other activity type.\r\n    assert (\r\n        activity_type in (\r\n            constants.ACTIVITY_TYPE_COLLECTION,\r\n            constants.ACTIVITY_TYPE_EXPLORATION\r\n        )\r\n    )\r\n```\r\nWhy is this needed? Can we create an else below with an error?', 'comment_created': datetime.datetime(2022, 7, 18, 10, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923205715, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 7, 18, 10, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923206880, 'comment_body': 'Should here be more overloads?', 'comment_created': datetime.datetime(2022, 7, 18, 10, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923216955, 'comment_body': 'Why is it optional there?', 'comment_created': datetime.datetime(2022, 7, 18, 10, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923226935, 'comment_body': 'Here we are providing none ( 4th argument ) value :\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/feedback_services.py#L675', 'comment_created': datetime.datetime(2022, 7, 18, 10, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923227785, 'comment_body': 'In the implementation of `to_dict` and `from_dict` method, self.id is considered as Optional[str]:\r\nhttps://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/state_domain.py#L700\r\nhttps://github.com/oppia/oppia/blob/0e69c2bcd7a91ef3595da274d060608efd3140ae/core/domain/state_domain.py#L743', 'comment_created': datetime.datetime(2022, 7, 18, 10, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923234075, 'comment_body': 'This thing is a bit ambiguous to me because:\r\n1. in the frontend, we are defining `allowedVariables` as expected https://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/extensions/interactions/customization-args-defs.ts#L286\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/extensions/interactions/customization-args-defs.ts#L55\r\n2. in the backend, we are not defining it as a `customization_args` instead we are just assigning it the value:\r\nin question_domain we are also doing the same thing:\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/question_domain.py#L1239 ', 'comment_created': datetime.datetime(2022, 7, 18, 10, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923259135, 'comment_body': '@seanlip Any idea here? This seems to be connected to the migration job issue.', 'comment_created': datetime.datetime(2022, 7, 18, 11, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923699764, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 18, 18, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923703336, 'comment_body': ""There are many cases where we are checking for the type checking and most of them are defined under the test `test_validation`. So I just put one comment on top of the method `test_validation`.\r\n\r\n( In my opinion ) I think adding the same comment again and again within the same test is too much. But I'm ok to add comments in all the places if you have any concerns !! \r\n"", 'comment_created': datetime.datetime(2022, 7, 18, 18, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923703767, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 18, 18, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923703834, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 18, 18, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923704907, 'comment_body': ""I think I have added all the cases for overload ( please correct me if I'm wrong somewhere or please provide which case I'm missing )."", 'comment_created': datetime.datetime(2022, 7, 18, 18, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923708040, 'comment_body': 'A small discussion regarding this can be found here https://github.com/oppia/oppia/pull/15693#discussion_r919937597\r\n\r\nThe summary of the discussion is :\r\nIf we add an else case and throw an error, then that error is never executed, because in the whole file we are calling `_get_activity_rights` before calling this method and in `_get_activity_rights` we are already checking for this case.\r\n\r\nhttps://github.com/oppia/oppia/blob/5f1b2e12f61f3daf750c44cc5dab58071ad582aa/core/domain/rights_manager.py#L471\r\n', 'comment_created': datetime.datetime(2022, 7, 18, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923709565, 'comment_body': 'I think this and https://github.com/oppia/oppia/pull/15693#discussion_r921207334 is pointing to the same thread.', 'comment_created': datetime.datetime(2022, 7, 18, 18, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924030392, 'comment_body': 'The analysis at the beginning is not sufficient, so the solutions proposed do not make sense. As previously mentioned, you **cannot** reason based on what\'s currently happening _after_ the code. You must always reason based on what comes before it. This is not a ""quick-and-done"" process, and this conversation will continue to go back-and-forth until you have a proper understanding of the code.\r\n\r\nYou\'ve identified the two places where the method is used. This is great. Analyze them a bit more. What causes a state to go into the state_names_to_train_classifier list? Apparently, whether it was in state_names_with_changed_answer_groups before, whether it is returned by classifier_services.handle_non_retrainable_states(), or whether it satisfies state.can_undergo_classification(). (Please check that you understand how I came up with the information in the previous sentence -- it was through reading and understanding the code that calls the function.)\r\n\r\nNow, take a look at state.can_undergo_classification(). What determines its eligibility? Take a look at state_names_with_changed_answer_groups; how does a state get in there? Etc.\r\n\r\nThat will tell you what sorts of states can be accepted by this method.\r\n\r\nAnd that, in turn, will tell you what criteria to check for, and what exception to raise if those criteria do not hold. \r\n\r\nBy the way, just a tip: don\'t worry in advance about figuring out the solution. Just concentrate on really understanding what\'s going on. Once you have done so, the solution will be clear.', 'comment_created': datetime.datetime(2022, 7, 19, 3, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924032291, 'comment_body': 'Good. Then you can be sure that, with the existing code, interaction_id can\'t be None. So add an ""if interaction_id is None"" exception and update the docstring to explain the validity conditions for the input. Then, you can add an assertion after that if it is still necessary.\r\n\r\nThe assertion on its own is not sufficient here because someone may write another function that calls this one in the future. In general I think it is a good rule of thumb to use assertions only for conditions that have been already validated within the same function. Please add this to the wiki page (along with an explanation) if it isn\'t there already.', 'comment_created': datetime.datetime(2022, 7, 19, 3, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924032720, 'comment_body': 'No concerns. Thanks!', 'comment_created': datetime.datetime(2022, 7, 19, 3, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924033297, 'comment_body': 'Per previous discussion, either:\r\n\r\n- do an if/exception, and the assert after that\r\n- or: validate that the activity_type is one of the given two specific things using mypy, if that is possible.', 'comment_created': datetime.datetime(2022, 7, 19, 3, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924035324, 'comment_body': 'This is reasonable given what check_can_modify_core_activity_roles() currently does. But what if someone modifies that function in the future (perhaps to fix some bug) and doesn\'t realize that this code is relying on it too?\r\n\r\nSo that\'s why I wonder whether you could just add an ""if activity_rights is None: raise Exception"" above the if clause on line 936, and then assume it\'s not None from thereon.', 'comment_created': datetime.datetime(2022, 7, 19, 3, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924035657, 'comment_body': ""I have the same comment as above. In general I suggest that for the purpose of deciding whether or not adding assertions is safe, you don't rely on the behaviour of other called functions, because those may change."", 'comment_created': datetime.datetime(2022, 7, 19, 3, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924036064, 'comment_body': ""This works, but you'll need to update the docstring to cover the new Exception."", 'comment_created': datetime.datetime(2022, 7, 19, 3, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924036156, 'comment_body': 'Sounds good, but please also update the docstring to cover the new Exception.', 'comment_created': datetime.datetime(2022, 7, 19, 3, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924036788, 'comment_body': ""I would say it depends on whether someone looking at just this part of the test will be guaranteed to notice the comment above.\r\n\r\nIf they might miss it then it's better to repeat the comment."", 'comment_created': datetime.datetime(2022, 7, 19, 3, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924038619, 'comment_body': ""@sahiljoster32 Could you please make a new exploration with one of the math expression input interactions and take a look at its 'states' representation? For this field is it `{}` or `{value: something}` or `[]`?\r\n\r\nThe correct value should be what you see there.\r\n\r\n/cc @iamprayush in case this was coded wrongly. (If it was, it's probably coded wrongly in both exp_domain.py and question_domain.py, and needs to be fixed. I'm a bit surprised this wasn't caught during validity-checking -- @lkbhitesh07 @EricZLou might be something to investigate.)"", 'comment_created': datetime.datetime(2022, 7, 19, 4, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 924072256, 'comment_body': 'added', 'comment_created': datetime.datetime(2022, 7, 19, 5, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924187294, 'comment_body': ""Yes, I can confirm that instead of a list it should be a dict in the form of `{ 'value': <actual value> }`. I'll create a PR to fix this. Thanks for catching this @sahiljoster32!"", 'comment_created': datetime.datetime(2022, 7, 19, 8, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 924275818, 'comment_body': 'But what does this mean conceptually? Do we even use it somewhere?', 'comment_created': datetime.datetime(2022, 7, 19, 9, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 924308981, 'comment_body': 'Yea, but I think the question still stands.', 'comment_created': datetime.datetime(2022, 7, 19, 10, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 924309905, 'comment_body': 'Okay!', 'comment_created': datetime.datetime(2022, 7, 19, 10, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 927860813, 'comment_body': 'From email thread:\r\n\r\nI looked into this and it seems like the ""deassign role"" method works fine e.g. it does successfully remove roles from the exp rights model. However, as Sahil pointed out, the usernames get recorded wrongly in the ExplorationRightsSnapshotMetadataModel entities in the backend -- we store the username in the commit message. So instead of saying something like ""Remove abc from role voice artist for exploration"", it records ""Remove ANONYMOUS from role ..."". Although we don\'t surface this anywhere, it does imply that the data on our backend might not be representing the right thing. We can fix this by writing a job that edits the commit message in the model by replacing ANONYMOUS with the relevant username corresponding to the ""removed_user_id"" field in ""commit_cmds"".\r\n\r\n\r\nCreated https://github.com/oppia/oppia/issues/15779 to fix the commit messages. ', 'comment_created': datetime.datetime(2022, 7, 22, 17, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 929488820, 'comment_body': ""So here is what I have found:\r\n1. when we create an exploration with a state having Interaction_id as `None` and then try to update that state's interaction's answer_groups without mentioning the Interaction_id ( or keeping the interaction_id as None ) then a Keyerror is showed up because while updating the state for answer_groups we are fetching interaction by interaction_id  https://github.com/oppia/oppia/blob/d11c54301d0ec478c1a37e8db183938cf9521e44/core/domain/interaction_registry.py#L93\r\nSo, here we are fetching the interaction with Interaction_id and passing `None` here will throw an error because there is no key exists as `None`. So, from here I assumed that if interaction_id is None then an error is caught earlier.\r\n2. Next, I created a test (test_raises_key_error_for_invalid_id present in exp_services_test.py) where I first created an exploration with a state having interaction_id as `NumericInput` and then after saving the exploration when I try to update the exploration for answer_groups ( enabling ENABLE_ML_CLASSIFIERS and lowering down the threshold for `can_undergo_classification` )  the code failed at https://github.com/oppia/oppia/blob/76af14d34ebe54a5dd84d955dcb073ddf5ef5886/core/domain/classifier_services.py#L120\r\nBecause here Interaction_id is `NumericInput` and there is no algorithm mapped for `NumericInput` so a KeyError is showed up. Here, the algorithm exists for `Textinput` only.\r\nYou can check the test present at test_raises_key_error_for_invalid_id present in exp_services_test.py. \r\n\r\nconclusion: if interaction id is None then an error is caught earlier, if interaction_id is other than `TextInput` then it will throw an error. "", 'comment_created': datetime.datetime(2022, 7, 26, 3, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 929608970, 'comment_body': 'Can you please take a look! at this issue only (for now) @seanlip ', 'comment_created': datetime.datetime(2022, 7, 26, 7, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 929611570, 'comment_body': 'Thanks, this is a good start. I\'m not totally sure if you fully understand the code yet -- the idea here is that there may be multiple different types of classifiers/algorithms in the future operating on different types of data. So the TextInput thing is because that\'s the only classifier that we currently have, but this can change in the future.\r\n\r\nNevertheless, the main reasoning that matters is the one in (1) since we\'re talking about the None case. I don\'t quite follow your reasoning for (1), though. How do you know that all states that reach this point (the for loop in classifier_services.py on line 119) have a non-None interaction_id? You\'re pointing to code in a completely different file and I don\'t really see how the ""create an exploration and then try to update that state\'s interaction\'s answer_groups"" relates to handle_trainable_states. It is a fact that explorations can be saved in the datastore with states that have a null interaction ID (typically the last state in the branch), so what you\'ll need to justify is that such states can never reach handle_trainable_states(). ', 'comment_created': datetime.datetime(2022, 7, 26, 7, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 933964979, 'comment_body': ""So, the function `handle_trainable_states` is used in only two places:\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L970\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L1053\r\n\r\nSo, I'm going to explain the first case where `handle_trainable_states` is called inside the `_save_exploration` method.\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L970\r\nIn `_save_exploration` method, we are calling `handle_trainable_states` method only when the `if feconf.ENABLE_ML_CLASSIFIERS` is enabled and before calling the `handle_trainable_states` method we are fetching all the trainable state_names. To get all the trainable state_names we are calling `get_trainable_states_dict` method in line 955. \r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L955\r\nInside `get_trainable_states_dict` method, we are checking if a particular state can undergo classification or not, by using `can_undergo_classification` method:\r\nhttps://github.com/oppia/oppia/blob/989056a001a8410e22480d040ed59912ef280c03/core/domain/exp_domain.py#L1804\r\n\r\nand if we look inside the `can_undergo_classification` method, we can see that we are allowing a state to undergo classification only when it has a particular number of training_data, and training_data is defined under answer_groups. So, if a state wants to go under classification it should have answer_groups ( at least ).\r\nhttps://github.com/oppia/oppia/blob/989056a001a8410e22480d040ed59912ef280c03/core/domain/state_domain.py#L3134\r\nSo, once a state is allowed to go under classification, we are fetching its training_data using `get_traning_data` method:\r\nhttps://github.com/oppia/oppia/blob/989056a001a8410e22480d040ed59912ef280c03/core/domain/exp_domain.py#L1821\r\nand based on the training_data we are seprating state_names into `state_names_with_unchanged_answer_groups` and \r\n`state_names_with_changed_answer_groups`. Basically, if new_training_data and old_training_data are same then it falls under `state_names_with_unchanged_answer_groups` and vice versa. https://github.com/oppia/oppia/blob/989056a001a8410e22480d040ed59912ef280c03/core/domain/exp_domain.py#L1828\r\nand further in code these state_names are transferred to `handle_trainable_states` method.\r\n\r\nNow, If we come to the second use case of `handle_trainable_states`:\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L1053\r\n\r\nwe can see that here we are maintaining a `state_names_to_train` list. This list contains the state_names of those states which are allowed to go under classification. If we see line 1049, then there we are checking if a state can under_classification or not using the same `can_undergo_classification` method. if a state is allowed to go under classification then we are appending its state_name to `state_names_to_train` list and after that we are passing this `state_names_to_train` list to `handle_trainable_states`.\r\n\r\nSo, From these use cases, we can conclude that only those state_names can go to `handle_trainable_states` that passes the can_undergo_classification test and to pass the `can_undergo_classification` check a state should have answer_groups."", 'comment_created': datetime.datetime(2022, 7, 31, 10, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933973298, 'comment_body': ""There are some points that conclude that a State having None interaction_id is never going to reach the `handle_trainable_states` method:\r\n1. If we create an exploration with a state having None interaction id and try to update its answer_group without updating its interaction id. then an error showed up, because when we update an exploration a `update_exploration` method is called:\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L1422\r\nso, here we are updating an exploration's state's answer_groups without interaction id, so update_exploration will call the apply_change_list method https://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L1477\r\nin apply change list method we check for the `exp_domain.STATE_PROPERTY_INTERACTION_ANSWER_GROUPS` property_name \r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/domain/exp_services.py#L423\r\nand after that, we call `update_interaction_answer_groups` method, and in this method we fetch interaction for the given interaction id https://github.com/oppia/oppia/blob/989056a001a8410e22480d040ed59912ef280c03/core/domain/state_domain.py#L3329\r\nwhich in turn call this line of code:\r\nhttps://github.com/oppia/oppia/blob/d11c54301d0ec478c1a37e8db183938cf9521e44/core/domain/interaction_registry.py#L93\r\nHere interaction_id is None so an error is showed up and further code is not executed.\r\n\r\nSo, from above we can conclude that state having None interaction Id does not contain answer_groups. and due this it does not pass `can_ungergo_classifiation` check and in turn, its state_name is not passed to  `handle_trainable_states`.\r\n\r\n2.  >  It is a fact that explorations can be saved in the datastore with states that have a null interaction ID (typically the last state in the branch)\r\n \r\nYes, explorations can be saved in the datastore with states having None interaction_id. Because every exploration is created from the `create_default_exploration` method \r\nhttps://github.com/oppia/oppia/blob/989056a001a8410e22480d040ed59912ef280c03/core/domain/exp_domain.py#L781\r\nand explorations created by this method contain a state having None interaction_id but these default explorations cannot contain answer_gropus. So, it does not pass can_undergo_clssification check and in turn its states name is not passed to `handle_trainable_states`. \r\n\r\nSo, only those states can go to the `handle_trainable_states` method which contains answer_groups and states having None interaction_id cannot contain answer_groups. So, no state having None interaction_id can passed to `handle_trainable_states` method."", 'comment_created': datetime.datetime(2022, 7, 31, 11, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933977661, 'comment_body': 'But when I created a test (test_raises_key_error_for_invalid_id present in exp_services_test.py) where I first created an exploration with a state having interaction_id as `NumericInput` and then after saving the exploration when I try to update the exploration for answer_groups ( enabling ENABLE_ML_CLASSIFIERS and lowering down the threshold for `can_undergo_classification` )  the code failed at https://github.com/oppia/oppia/blob/76af14d34ebe54a5dd84d955dcb073ddf5ef5886/core/domain/classifier_services.py#L120\r\nBecause here Interaction_id is `NumericInput` and there is no algorithm mapped for `NumericInput` so a KeyError is showed up. Here, the algorithm exists for `Textinput` only.\r\n\r\nSo, here my suggestion is we should put an if clause like this:\r\nhttps://github.com/oppia/oppia/blob/5c6c538ec98b9de3f3d95c1222d66bd2a31bda2a/core/controllers/classifier.py#L146', 'comment_created': datetime.datetime(2022, 7, 31, 12, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 934285414, 'comment_body': 'Spelling error: include', 'comment_created': datetime.datetime(2022, 8, 1, 8, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 934285780, 'comment_body': 'Spelling: exist', 'comment_created': datetime.datetime(2022, 8, 1, 8, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 934285871, 'comment_body': 'Spelling: exist', 'comment_created': datetime.datetime(2022, 8, 1, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 934286935, 'comment_body': 'Yes, this is a good analysis. Thanks! Please modify the code here to use the if clause you mentioned with the relevant exception, rather than an assert.', 'comment_created': datetime.datetime(2022, 8, 1, 8, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 934290659, 'comment_body': '@sahiljoster32 Just to follow up on this thread, we should have a backend test that prevents the previous error from happening. Did you write one, and if so, could you please point me to it?\r\n\r\nThanks!', 'comment_created': datetime.datetime(2022, 8, 1, 8, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 935805284, 'comment_body': 'To de_assign the role we have to first assign the role using the method `assign_role_for_exploration`. So, if the user id does not exist at the time of assignment then an error is displayed. \r\nAlso, if we just pass any `user_id` to de_assign, then the error is displayed just before we hit the line `1125`. Because in this case, every condition results in false because `user_id` is not assigned before to any role. So line 1122 throws an error.\r\n\r\nBut to cover the backend coverage I have written a test with hypothetical case where i mock the function and return None . Name of the test case `test_deassign_editor_is_successful_with_commit_message_having_anonymous`', 'comment_created': datetime.datetime(2022, 8, 2, 16, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935811976, 'comment_body': 'If clause is added!! and docstring is updated.', 'comment_created': datetime.datetime(2022, 8, 2, 16, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935812829, 'comment_body': 'If clause is added and docstring is updated.', 'comment_created': datetime.datetime(2022, 8, 2, 16, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935813176, 'comment_body': 'if clause is added and docstring is updated.', 'comment_created': datetime.datetime(2022, 8, 2, 16, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935813482, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 16, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935813623, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 16, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935814739, 'comment_body': 'Ok then, i will change [] -> {}.', 'comment_created': datetime.datetime(2022, 8, 2, 16, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935815360, 'comment_body': 'The comment is added for all type-ignores.', 'comment_created': datetime.datetime(2022, 8, 2, 16, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935818478, 'comment_body': 'I think we already discussed this in a comment https://github.com/oppia/oppia/pull/15693#discussion_r919937597.\r\nIf we use `if clause` then that would never be executed and to cover the backend coverage I have to write the test for this private method individually.', 'comment_created': datetime.datetime(2022, 8, 2, 16, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935818757, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 16, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935818869, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 16, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935818956, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 16, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938706499, 'comment_body': 'If clause is added and docstring is also updated!\r\nAlso, a PR to update the backend annotations doc is raised PTAL!. https://github.com/oppia/oppia-web-developer-docs/pull/16', 'comment_created': datetime.datetime(2022, 8, 5, 11, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939060262, 'comment_body': ""> use assertions only for conditions that have been already validated within the same function.\r\n\r\nIf the conditions are already validated within the same function then I doubt that we really need any assertion. Because till now I didn't encounter any case, where we have both assertion and validation for the same condition within the same function.\r\n\r\n> The assertion on its own is not sufficient here because someone may write another function that calls this one in the future.\r\n\r\nIf someone calls a function with Optional type and we have assertion written in the called function, then assertion will caught this situation and throw an assertion error that value cannot be None."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939496256, 'comment_body': 'While creating default interaction, interaction_id is always initialized as None:\r\nhttps://github.com/oppia/oppia/blob/135e85b4419bd022b9da28718402697b28362262/core/domain/state_domain.py#L973', 'comment_created': datetime.datetime(2022, 8, 6, 7, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939499939, 'comment_body': ""While converting `GeneralFeedbackThreadModel` to `FeedbackThread` domain object we are providing None to state_name because `GeneralFeedbackThreadModel` does not contain state_name field. Also, I didn't find any case where we are using this state_name but in the frontend, state_name field is defined:\r\nhttps://github.com/oppia/oppia/blob/135e85b4419bd022b9da28718402697b28362262/core/templates/domain/feedback_thread/FeedbackThreadObjectFactory.ts#L33\r\nCan you please take a look, also please correct me if I'm missing something!!\r\n"", 'comment_created': datetime.datetime(2022, 8, 6, 8, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939500140, 'comment_body': 'Per https://github.com/oppia/oppia/pull/15693#discussion_r939060262 (trying to avoid this discussion being buried in GitHub):\r\n\r\n>> The assertion on its own is not sufficient here because someone may write another function that calls this one in the future.\r\n>\r\n> If someone calls a function with Optional type and we have assertion written in the called function, then assertion will caught this situation and throw an assertion error that value cannot be None\r\n\r\nBut that error will happen at runtime and possibly in production, whereas mypy checks are supposed to be compile-time and developer-time checks. So, it would be good to try and catch as many errors as possible using mypy rather than rely on assertions.\r\n', 'comment_created': datetime.datetime(2022, 8, 6, 8, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939501196, 'comment_body': ""Sorry, I'm a bit confused by this. I don't think the issue is that the user ID does not exist at the time of assignment. I think the issue is that assignee_username used to be calculated wrongly, and that means that the resulting commit message is wrong.\r\n\r\nSo all your test needs to do is to verify that the commit message that is sent to _save_activity_rights is correct now. You can do this by, for example, retrieving the relevant model with the commit message after this function is called, and examining it.\r\n\r\nAlso @sahiljoster32 I have a question. Why didn't `user_services.get_usernames(removed_user_id)` previously detect that the argument was a string rather than a list(str), as it should have been instead?"", 'comment_created': datetime.datetime(2022, 8, 6, 8, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939501655, 'comment_body': ""Ah, thanks -- yeah, agreed, the assertion is better than what existed before, and I get your point about not wanting to test a private method for this. I'm fine with that.\r\n\r\nJust to check though. Is there a way to more strictly check that the activity_type matches one of the given string literals using mypy?"", 'comment_created': datetime.datetime(2022, 8, 6, 8, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939557003, 'comment_body': ""> But that error will happen at runtime and possibly in production, whereas mypy checks are supposed to be compile-time and developer-time checks.\r\n\r\nOk, now I have a clear picture of why assert is not preferred. Thanks!!\r\nI'll keep that in mind from now on!!"", 'comment_created': datetime.datetime(2022, 8, 6, 18, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939559526, 'comment_body': ""> So all your test needs to do is to verify that the commit message that is sent to _save_activity_rights is correct now.\r\n\r\nTest is added as `test_deassign_editor_is_successful_with_all_valid_commit_messages` in line `868`. In this test, I have checked both the assigning and the de-assigning commit messages.\r\n\r\n> Why didn't user_services.get_usernames(removed_user_id) previously detect that the argument was a string rather than a list(str)?\r\n\r\nLet me explain it with a simple example first:\r\n```python\r\ndef print_elements(x: Union[str, List[str]) -> None:\r\n    for item in x:\r\n        print(item)\r\n\r\n# calling `print_elements` with list ~ call 1\r\nprint_elements(['hi', 'bie'])\r\n# output of call 1\r\nhi\r\nbie\r\n\r\n# calling `print_elements` with string ~ call 2\r\nprint_elements('hi')\r\n# output of call 2\r\nh\r\ni\r\n```\r\n\r\nNow, somewhat similar happened with `user_services.get_usernames` previously:\r\n```python\r\ndef get_usernames(user_ids) -> List[Optional[str]]:\r\n        for index, user_id in enumerate(user_ids):\r\n             # pseudocode just for explaining.\r\n             if user_id exists return user_name:            # Keep this line's user_id in mind. ----------x\r\n                 return username\r\n             else: \r\n                 None\r\n\r\nuser_id_a = 'abcdefg'     # This user_id has sahil username.\r\n\r\n# calling `get_usernames` with list ~ call 1\r\nget_usernames([user_id_a])[0]\r\n# output of call 1\r\nsahil                                                       # Because the above user_id is 'abcdefg' and it has username sahil.\r\n\r\n\r\n# calling `get_usernames` with string ~ call 2\r\nget_usernames(user_id_a)[0]\r\n# output of call 2                                   # Because above user_id has 'a', 'b', 'c', 'd', 'e' and 'f' values and there is no user_id for these values.\r\nNone\r\n```\r\n\r\nI hope it make things clearer :)\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 6, 18, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939561015, 'comment_body': ""> Is there a way to more strictly check that the activity_type matches one of the given string literals using mypy?\r\n\r\nNo, Reason:\r\nIn many cases, we are providing `constants.ACTIVITY_TYPE_EXPLORATION` or `constants.ACTIVITY_TYPE_COLLECTION`, and all these `constants`'s constants have values only at runtime. So, MyPy is not able to fetch that these are constants having a particular Literal strings."", 'comment_created': datetime.datetime(2022, 8, 6, 18, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939739611, 'comment_body': ""For the last question, I get that (re the behaviour of str vs list). I'm just asking why this wasn't caught by mypy typing (should it have been?)"", 'comment_created': datetime.datetime(2022, 8, 7, 23, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939739743, 'comment_body': 'Given the error that happened previously, I suggest you use a multi-character username here.', 'comment_created': datetime.datetime(2022, 8, 7, 23, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939739803, 'comment_body': 'Hardcode the editor username in the expected values for assertions, don\'t do any ""logic"" here. Ditto below.', 'comment_created': datetime.datetime(2022, 8, 7, 23, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 940086622, 'comment_body': 'Is that the only place where ""state_name"" is used? From my quick look it seems that the field is not used anywhere and thus can be removed.', 'comment_created': datetime.datetime(2022, 8, 8, 10, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940103027, 'comment_body': ""```suggestion\r\n        with self.assertRaisesRegex( # type: ignore[no-untyped-call]\r\n            Exception,\r\n            'No classifier algorithm found for Invalid_id interaction'\r\n        ):\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 10, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940103203, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 8, 8, 10, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940108523, 'comment_body': '```suggestion\r\nclass SnapshotsMetadataDict(TypedDict):\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 10, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940112048, 'comment_body': ""```suggestion\r\n        with self.assertRaisesRegex(\r\n            Exception,\r\n            'No classifier algorithm found for NumericInput interaction'\r\n        ):\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 11, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940151903, 'comment_body': ""```suggestion\r\n        with self.assertRaisesRegex(  # type: ignore[no-untyped-call]\r\n            Exception, 'Cannot get activity rights for unknown activity'\r\n        ):\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940152404, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 8, 8, 11, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940395339, 'comment_body': 'Same comment as https://github.com/oppia/oppia/pull/15762#discussion_r938987280.', 'comment_created': datetime.datetime(2022, 8, 8, 15, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940409194, 'comment_body': 'But `model` here could be `None`, right? Can we instead just return the non-`None` models? e.g.\r\n\r\n```\r\n    return [\r\n        _get_thread_from_model(model)\r\n        for model in feedback_models.GeneralFeedbackThreadModel.get_multi(\r\n            thread_ids)\r\n        if model is not None\r\n    ]\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 15, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940412939, 'comment_body': '```suggestion\r\n    exp_thread_user_models, exp_models = (\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 16, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940415376, 'comment_body': '```suggestion\r\n                user_services.get_username(author_id)\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 16, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940485552, 'comment_body': 'Done ~ new username is `TestUser`', 'comment_created': datetime.datetime(2022, 8, 8, 17, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940485911, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940492172, 'comment_body': 'Actually, this error is caught by MYPY, but previously MYPY is not throwing error because this file is not excluded from MYPY_DENY_LIST. So, Mypy is not checking for this file. As soon as we removed rights_manager.py from deny_list, MyPY checked argument types from both sides and due to the difference in types, Mypy throws an `incompatible argument type error`, from that point we get to know that something is wrong.\r\n\r\nDoes that answers your question?', 'comment_created': datetime.datetime(2022, 8, 8, 17, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940497170, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940497274, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940497354, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940497437, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940499550, 'comment_body': 'I checked this function is called in only two places and there we are not handling the case of None. So, not including None is a better option thanks!\r\nhttps://github.com/oppia/oppia/blob/2a7010146be012039f453895219b52a846b999f1/core/controllers/creator_dashboard.py#L252', 'comment_created': datetime.datetime(2022, 8, 8, 17, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940503508, 'comment_body': 'This is done on purpose!!\r\nIf we see line `40` then there we have the same name.', 'comment_created': datetime.datetime(2022, 8, 8, 17, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940503823, 'comment_body': 'Line `40` of feedback_services.py', 'comment_created': datetime.datetime(2022, 8, 8, 17, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940504040, 'comment_body': 'Done, Thanks for pointing that out!!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940510800, 'comment_body': ""I'm not sure about these changes because even if we removed `state_name` from here then in front_end we are still expecting `state_name` from the dictionary that was passed from the backend. \r\nhttps://github.com/oppia/oppia/blob/135e85b4419bd022b9da28718402697b28362262/core/templates/domain/feedback_thread/FeedbackThreadObjectFactory.ts#L26\r\n\r\nMy Opinion ~ If we want to remove `state_name` then we have to do it for the front_end and backend at the same time. Maybe I'm wrong please correct me if I'm wrong!! "", 'comment_created': datetime.datetime(2022, 8, 8, 17, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940518398, 'comment_body': 'Hi @sagangwee,\r\nCan you please take a look at this comment https://github.com/oppia/oppia/pull/15693#discussion_r939500140\r\nAlso, @seanlip please take a look at the comment that @sagangwee mentioned. \r\n\r\nBecause both of you have a different opinion on the usage of assert, it would be very helpful for me if you guys come to a mutual decision ( like whether to use assert to not here. ) ', 'comment_created': datetime.datetime(2022, 8, 8, 18, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940532588, 'comment_body': ""I don't think Sean and I are actually conflicting here. Re Sean's comment:\r\n\r\n> The assertion on its own is not sufficient here because someone may write another function that calls this one in the future. In general I think it is a good rule of thumb to use assertions only for conditions that have been already validated within the same function.\r\n\r\nWe should be able to assert not None below since we're explicitly checking no models are `None` on line 269."", 'comment_created': datetime.datetime(2022, 8, 8, 18, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940533862, 'comment_body': ""This variable seems unnecessary? Can't we inline the function call below like it was originally?"", 'comment_created': datetime.datetime(2022, 8, 8, 18, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940536268, 'comment_body': 'I see. Then maybe `exploration_models` to be consistent with `exp_thread_user_models`.', 'comment_created': datetime.datetime(2022, 8, 8, 18, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940549174, 'comment_body': 'ohh really sorry!! I mistakenly misinterpreted it.\r\nThanks for pointing it out!', 'comment_created': datetime.datetime(2022, 8, 8, 18, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940576874, 'comment_body': ""I have tried, If we remove these new variables from here then we have to add 3 assertions ( at lines `310`, `335`, `348`) and 2 casts ( at lines `357`and `359`) because methods `update_timestamps_multi` and `put_multi` cannot accept Optional[...] values. Please correct me if I'm wrong somewhere!!"", 'comment_created': datetime.datetime(2022, 8, 8, 19, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940577231, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 8, 19, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940577981, 'comment_body': 'removed!', 'comment_created': datetime.datetime(2022, 8, 8, 19, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940637468, 'comment_body': '```suggestion\r\n            the feedback thread or None, if no state is associated.\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 20, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940637700, 'comment_body': '```suggestion\r\n        state_name: str|None. The name of the state associated with\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 20, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940644845, 'comment_body': 'I see. That does seem overly verbose in this case. SGTM.', 'comment_created': datetime.datetime(2022, 8, 8, 20, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 940804817, 'comment_body': 'Yup. Thanks!', 'comment_created': datetime.datetime(2022, 8, 9, 1, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 941340902, 'comment_body': 'I think in the convert function it should be kept as is.', 'comment_created': datetime.datetime(2022, 8, 9, 13, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941356724, 'comment_body': 'Yep it needs to be removed form BE and FE at once. I think this can be done in a separate PR.', 'comment_created': datetime.datetime(2022, 8, 9, 13, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941370464, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 9, 13, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 941370565, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 9, 13, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': 'ca1887d0466d1b711804a5283f2c807d0e6f9350', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97e5b7f64c5ea2a085784634808456550de5fac9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7d3e49d115e9d16280db152415e98ebdd78eac5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35e48c36da6b93e1d91caa01944b352a523d7470', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f2a5974b07323f316ee96b2d77b35a772cdaff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b02e014447ba0a948298d2252fabbfe5cf6d879e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '371cb90b4d3083571eff72838c9106eafbe72130', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcefd8b8b9a4460f1b96a1190dc237a3be316f55', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09d2208c8e79397c2e44b8d7750344296adb89c3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '400e13856061bbacae60331e8b862576d5df783d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b704565ff95bd1b3e1690a91d058f445a73cdf33', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d7b34c3fbad3cf360100fc8271ab6ce6a7a3338', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b03edb188ce73d5aa15eb1421217ec7587e5700', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd74275edccd51954e897da0e44a38709f4f6e333', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03294d4ab993b3b0efce4d528df68ebc7f59cf98', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '629db9b3890742cabce7761367cdd9cece7f0275', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b6bd70950a021d5e3091679a26ecbc623e715a8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a709e90059a8cfd186e8dae88207a24d8aae2f6f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d22c54de9739059f0ef4b0d9a34bb5b8fa54f1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7655f78a259a02ad7bfc458c7b3bc0394b56a80e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb99bed7732689a72976d7ebc553c07008fdb13', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e154e78031cd01a85760ab210339a412e0c32b9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d1cad983913d712f364f3bc04423a93c359036e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd548e4bae592aae11cdccf2c51ff765b5de11ae', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a98705f9b05de626b2a0d264ee7e33ab0a4dde75', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aef0960ee099896cbdd762d62ab6c6fa2f288fd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce324a075aafb61f91ccb2ca85b1672df3f52573', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c4d6e56b3fca85cfbde70bf47f118d5e6fcde5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d41e3deab3812836f6dcf1c428fa289b74cf43', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a157ebaa908c812f1e27e6a10bb42fd680d0684', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd757b74dd8827ef95288671c4c2a66e9a018b8e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c43b5c361ab1ef340b8f46bfd395d6a2f1f63f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8187db66ab3b1374912bc7133b2dee32cffcf48f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb9dbec56d6e159562218c692d0b23db8c84bab6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6374b069407da167cf51b827c69790b4317fafb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d1510080d7a5a2af9a061481f7938b30a90b7f5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e071911e8594a231abeb6254d8a28487f59a86', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41a4ae407e4997bf74383bc07f5a4393e630ade1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d332a6f8ab67b689fa9e5db0a19c38b00b80f19', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd3fc15e13f9a69cf4f981cd90d23aeee91731b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd80153b586ea4a7da48c3c5e945257243a1b0af4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '989007711a2e1f6bd4f2262be12fd65fff870045', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '733067db087e0e445cec0e074469232240ca1d1b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1eda0a2b01d47d8defa4939517062bbaf58dfce', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d6a838d5a7cc120e1cd103a61a6a5284ff3554', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d1e25a6ea3cfe9c79f6dca23ba3a44c6f04d3e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b09e2ce1821e6081aecb6d8b06562e06e3773a3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af1ab5d175d6292a85edeba0f4287de252328ee0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2032d8537ac06e7516cd6a4532cbe2a095c5ce95', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb7d97b360ad5e19cc33fd06fa4b3ac337bd106', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26385481497bf4179c9b22e8bef123f84251868e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e0e42f015258ba0e5fa12e560f613881f05e64', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '086456571c6715df948a0bf397e3752fbd12e2c6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cc68945c3013d92f754550a508c6e285d8dffb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a450cbd0d6e8c845a1422dfe01b4b14c3a595d5c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dcf48d7ec034c94a08b9221ea58bf7090f087eb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '282fb7b8ac6b0c764598d14b2d3ec15748d6235e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0b9ba64679746c2128a5c12617f985e552c632', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '235dd77fbe524256f714c8913680ff39b425a1fb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '770ad6bef0fd46fae583a48cd2bd3529428d6dfd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43d4bd7807814a6d0e33e6e3f4cbc8ab2cec92a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e2bac3436069bd2b70cf1ee0762785d4c8e24e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62a8755fe486f9637329e23eba4454f80b0a4a12', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f133cb9bced23647941cdafae673a3d3e013e16', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f10f38ae7991ef395709121164ad664720fe84b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6857299fcd863bce2e75baf30d5547d1a5757dc8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a872d62cf3c169c977e6ac88e138559a7c3981f5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b05af4d4a152f78cd48ec2eee9b966cf6fbbe164', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64edcfcfcfd6a4116fdbbcc8bc54f7122485714c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637ac96521103429461476f7efa2e59a13fa1fe5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7149e70555ad78f0182af8ccf5a1678066ae7f90', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9660c715978dc001fdc0ec2d42fb950fedec7b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a4c1d979cf760aa3df4930365c211ebc741696', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d82d1712f395b18d667a20e81d0dae0c834033', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17d6f8837783ea6ad1dc3cc0fccbef308e50939', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a731fae2863d984920e1d9cc66549f61ecebd6e6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b69e0aeb230df93d50a5bb5d3319a071207b0a2d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe919d13a7502ad65b4bfc33c3e60576a7213c2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a5209fb8472176439bb3808f4abcb7f848bb4d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271ffc842a825575b0f1b9afd0503199e0d5dd6a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9a485c034d1834176d762529807853ed8131b2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c89827b76eb796f84d851fbab13009a9c4a907', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b016a3b591ee6b1b28bb758a633ac7c579a10767', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ecc31365f20448c51a5e10ea6fa7321e3d319b4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
999559711,Fix part of #14033: Added Mypy type annotations to some files of domain folder. -- M1.8,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - html_validation_service.py
 - opportunity_services.py
 - question_services.py
 - collection_services.py
 - event_services.py


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15762,https://api.github.com/repos/oppia/oppia/pulls/15762,https://github.com/oppia/oppia/pull/15762,closed,1856,955,44,43,48,81,1,1,[{'name': 'PR: LGTM'}],2022-07-18 15:37:50+00:00,2022-08-10 10:29:02+00:00,1968672.0,"22 days, 18:51:12","[{'comment_id': 924592700, 'comment_body': 'Every attribute ( other than cmd ) is created dynamically on instances of BaseChange class.\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/change_domain.py#L172\r\n\r\nAlso, here we defined the `__getattr__` method with return type str.\r\n\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/change_domain.py#L283\r\n\r\nso every attribute which is created dynamically has type str. I did not altered the return type of `__getattr__` method because in codebase most of the attributes has str type. if we put union here then we have to use assertion in every place.', 'comment_created': datetime.datetime(2022, 7, 19, 14, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924601459, 'comment_body': 'Here we are sure that collection_summary is never going to be none, because:\r\nThis method is only used in collection_editor.py https://github.com/oppia/oppia/blob/99eb242993656fb9defa534496fb0b147ddd8a7f/core/controllers/collection_editor.py#L233\r\nand there we are fetching the model with same `collection_id` keeping strict = true. https://github.com/oppia/oppia/blob/99eb242993656fb9defa534496fb0b147ddd8a7f/core/controllers/collection_editor.py#L225 ', 'comment_created': datetime.datetime(2022, 7, 19, 14, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924612873, 'comment_body': ""We have an assurance that collection is not going to be none, but in all the callers, there is no validation that proves that `collection.last_updated` and `collection.created_on` is not going to be none. That's why I added assert here."", 'comment_created': datetime.datetime(2022, 7, 19, 15, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924619654, 'comment_body': 'The return type of `utils.get_file_contents` is bytes, but `save_new_collection_from_yaml` can only accept string. This behavior is also observed in exp_services where `save_new_exploration_from_yaml_and_assets` can only accept string but bytes are provided. \r\nhttps://github.com/oppia/oppia/blob/99eb242993656fb9defa534496fb0b147ddd8a7f/core/domain/state_domain_test.py#L986', 'comment_created': datetime.datetime(2022, 7, 19, 15, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924642288, 'comment_body': ""Below we used too many overrides ( which is expected if we go according to MyPy ). One way to suppress these overrides is by defining a variable with a Callable type.\r\n```python\r\n    _handle_event: Callable[..., None]  # type: ignore[no-redef]\r\n    @classmethod\r\n    def _handle_event(cls, *args, **kwargs):    # type: ignore[no-untyped-def]\r\n```\r\nThis is a bit odd pattern so I need confirmation that it's ok?\r\nSource:https://stackoverflow.com/a/70231676"", 'comment_created': datetime.datetime(2022, 7, 19, 15, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 925857676, 'comment_body': ""I don't have a strong opinion; @vojtechjelinek @aasiffaizal any thoughts?\r\n\r\nThe main question I have is whether there are any options for proceeding which avoid ignore-pragmas? It seems to me like there ought to be other use cases in the general ecosystem that involve *args and **kwargs and a standard way for handling those.\r\n\r\nAlso, thanks for calling this out @sahiljoster32."", 'comment_created': datetime.datetime(2022, 7, 20, 17, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 925857851, 'comment_body': 'kind --> kinds', 'comment_created': datetime.datetime(2022, 7, 20, 17, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 925863047, 'comment_body': 'Slightly concerned about this. In what cases can the commit message be None? Perhaps we need to fix those.\r\n\r\nDitto below and in other files.', 'comment_created': datetime.datetime(2022, 7, 20, 17, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 925863778, 'comment_body': 'This reads oddly to me because the type seems singular but commit_cmds should be a list of items.\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2022, 7, 20, 17, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 925875212, 'comment_body': 'I actually feel like commit messages should be mandatory, so some investigation may be needed here.', 'comment_created': datetime.datetime(2022, 7, 20, 17, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 926392467, 'comment_body': ""I think I'm fine with it. Another option would be to remove `_handle_event` from here and only verify that it exists in the `record()` below, that way we can check if it exists while keeping the signatures up to the child classes."", 'comment_created': datetime.datetime(2022, 7, 21, 8, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926537890, 'comment_body': 'Please add a few words about the fact why is this inside `if MYPY`', 'comment_created': datetime.datetime(2022, 7, 21, 10, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926544017, 'comment_body': 'This seems like a bug, why do we add `node_count` when it is not defined on the model?', 'comment_created': datetime.datetime(2022, 7, 21, 11, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926545995, 'comment_body': 'Why not use `assert`?', 'comment_created': datetime.datetime(2022, 7, 21, 11, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926550818, 'comment_body': 'But that means this code will fail, right?\r\n\r\nThis needs to be rewritten. Also looking at the doctrine of https://github.com/oppia/oppia/blob/develop/core/utils.py#L136 it seems that maybe we should actually implement it correctly and also add overloads there and that should fix this issue.', 'comment_created': datetime.datetime(2022, 7, 21, 11, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926557099, 'comment_body': 'Why we need to do `bool()`?', 'comment_created': datetime.datetime(2022, 7, 21, 11, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926574915, 'comment_body': 'Why is this optional?', 'comment_created': datetime.datetime(2022, 7, 21, 11, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 926801542, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 21, 15, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926801976, 'comment_body': 'Basically, when the collection is unpublished, commit_message can be accepted as None. \r\nhttps://github.com/oppia/oppia/blob/22e557ebd3d5394aacd9c30c45698fb30d8e5a6a/core/domain/collection_services.py#L956\r\nSimilarly in skill:\r\nhttps://github.com/oppia/oppia/blob/22e557ebd3d5394aacd9c30c45698fb30d8e5a6a/core/domain/skill_services.py#L819\r\nSimilar case in exploration:\r\nhttps://github.com/oppia/oppia/blob/22e557ebd3d5394aacd9c30c45698fb30d8e5a6a/core/domain/exp_services.py#L1422', 'comment_created': datetime.datetime(2022, 7, 21, 15, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926802430, 'comment_body': ""The name is Changed to match the commit command's type.\r\nAlso, I used a type variable here because the same type is repeated in all files."", 'comment_created': datetime.datetime(2022, 7, 21, 15, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926802945, 'comment_body': ""As mentioned above, there are cases where None is expected. But I also agree that commit_message should not be none. \r\n\r\nI think we can generate a commit message if `commit_message` is None, inside the if clause.\r\nSomething like:\r\n```python\r\nif commit_message is None:\r\n   commit_message = '<<some commit message>>'\r\n```"", 'comment_created': datetime.datetime(2022, 7, 21, 15, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926872795, 'comment_body': 'After defining `node_count` we are just committing the model and not using `node_count` in further function calls. Also, after removing the node_count line, tests are working fine.', 'comment_created': datetime.datetime(2022, 7, 21, 16, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926872894, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2022, 7, 21, 16, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926873997, 'comment_body': 'actually `exploration.version` belongs to exp_domain and that file is not annotated in this PR, but now bool is removed by adding only necessary changes in exp_domain.', 'comment_created': datetime.datetime(2022, 7, 21, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926874179, 'comment_body': 'According to docstring, it can accept None:\r\nhttps://github.com/oppia/oppia/blob/22e557ebd3d5394aacd9c30c45698fb30d8e5a6a/core/storage/opportunity/gae_models.py#L111\r\nAlso, in opportunity_service we are providing None:\r\nhttps://github.com/oppia/oppia/blob/22e557ebd3d5394aacd9c30c45698fb30d8e5a6a/core/domain/opportunity_services.py#L447', 'comment_created': datetime.datetime(2022, 7, 21, 16, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926875136, 'comment_body': ""But I have doubts, `assert isinstance(yaml_content, str)` passing all the backend tests, so I think the return value is string but if we look at the method https://github.com/oppia/oppia/blob/22e557ebd3d5394aacd9c30c45698fb30d8e5a6a/core/utils.py#L136\r\nIn both the cases `whether raw_bytes is true or false` it always returns bytes, because looking at the code implementation it returns f.read() ( and .read() always returns bytes ). Can you provide some more info!!\r\n\r\nAlso, please correct me if I'm wrong somewhere."", 'comment_created': datetime.datetime(2022, 7, 21, 16, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926878251, 'comment_body': ""Before reaching this line of code we are already checking two times if the collection exists or not. I added a raise exception just for a more specific error message. If any reviewer has any concerns, I'm ok to revert it to assert!!"", 'comment_created': datetime.datetime(2022, 7, 21, 16, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926882604, 'comment_body': 'Just to confirm, the second approach that you mentioned is something like:\r\n```python\r\n    @classmethod\r\n    def record(cls, *args: Any, **kwargs: Any) -> None:\r\n           \r\n         if cls._handle_event do not exist:\r\n              raise exception ....\r\n\r\n         cls._handle_event(*args, **kwargs)\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 16, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 926903401, 'comment_body': ""> it seems that maybe we should actually implement it correctly\r\n\r\nI'm ok to implement it again but I'm not sure on which argument we differentiate the output values for overloads. Because as mentioned in above comment, the method always returns bytes."", 'comment_created': datetime.datetime(2022, 7, 21, 16, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 927039860, 'comment_body': ""This is a create() method, isn't it? The examples you showed seem to be update methods, but I thought creation always has a commit message."", 'comment_created': datetime.datetime(2022, 7, 21, 19, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 927040354, 'comment_body': 'Oh wait, sorry, this is creation of a version snapshot. OK, then it sounds like str/None is fine, thanks.', 'comment_created': datetime.datetime(2022, 7, 21, 19, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 927042644, 'comment_body': 'No, don\'t do that -- the idea of automatically generating commit messages is fine but the trigger should not be ""if what\'s passed in is None"". Instead, we should look into what process caused the commit message to be written and add a commit message in that call itself (e.g. unpublishing would result in a commit message like ""Exploration unpublished"" and other triggers would have their own commit messages).\r\n\r\nGiven the prevalence of this, though, I think it\'s fine to just update BaseModel\'s docstring to explain where the None cases would arise (e.g. are they generally for drafts or automatic processes, or does this really just depend on which type of model is involved)? And I think it\'s fine for specific subclasses of BaseModel to override with a required commit_message.', 'comment_created': datetime.datetime(2022, 7, 21, 19, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 927044614, 'comment_body': ""Something's wrong with the typing for BaseLogEntryAllowedCommitCmdTypes in core/storage/base_model/gae_models.py -- you basically say it's a union of a list(dict) and a dict. It can't represent both, it should be either singular or plural.\r\n\r\nIt probably makes sense to have just one Type for the mapping and, in places where you are working with a list of those, type that as Sequence[Type]. I don't think you need VersionedAllowedCommitCmdTypes either since that's basically Sequence[Type]."", 'comment_created': datetime.datetime(2022, 7, 21, 19, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 927199661, 'comment_body': ""I think the approach that @vojtechjelinek mentioned would let us remove the ignore-pragma in `_handle_event: Callable[..., None]  # type: ignore[no-redef]`\r\n\r\n@sahiljoster32, you might need to use `getattr(cls, '_handle_event')` instead of `cls._handle_event` in `record()`"", 'comment_created': datetime.datetime(2022, 7, 22, 0, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 927361930, 'comment_body': 'Thx!', 'comment_created': datetime.datetime(2022, 7, 22, 7, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 927364016, 'comment_body': '@sahiljoster32 Yep, smth like that.', 'comment_created': datetime.datetime(2022, 7, 22, 7, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 927364819, 'comment_body': ""I think it is fine too keep just the assert if we don't expect a `None` at this point in code."", 'comment_created': datetime.datetime(2022, 7, 22, 7, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 927636514, 'comment_body': 'Yeah, if everything works and it is not used elsewhere then remove it.', 'comment_created': datetime.datetime(2022, 7, 22, 13, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 927645012, 'comment_body': 'When `raw_bytes` is `True` then we should return bytes, otherwise str. ', 'comment_created': datetime.datetime(2022, 7, 22, 13, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 927715845, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 22, 14, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 927717711, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 7, 22, 14, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 927720571, 'comment_body': 'Overloads are removed! PTAL!', 'comment_created': datetime.datetime(2022, 7, 22, 14, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 927721436, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 7, 22, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 927735095, 'comment_body': ""In some base_test cases, `commit_cmds` is initialized as `empty dict` due to this I have to include mapping as an individual type in BaseLogEntryAllowedCommitCmdTypes but after looking at docstring and other model's implementations I think in test cases it should be List[Dict[...]] not only Dict[].\r\n\r\nSo, now dict is removed from BaseLogEntryAllowedCommitCmdTypes. Now we know List is used throughout the codebase so I defined a single type variable and used it everywhere. "", 'comment_created': datetime.datetime(2022, 7, 22, 14, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 927744903, 'comment_body': 'Only unpublished cases of models ( unpublished-collection, unpublished-exploration ) are allowed to have None. But yeah there is an exception, the story model does not allow the commit message to be none. https://github.com/oppia/oppia/blob/ff417630fecfcc4ab0c0b404a40f8941b873bf93/core/domain/story_services.py#L566', 'comment_created': datetime.datetime(2022, 7, 22, 15, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 927752800, 'comment_body': 'Docstring is added PTAL! ', 'comment_created': datetime.datetime(2022, 7, 22, 15, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928098588, 'comment_body': ""As usual I think this needs an explanation in the comment of why it's impossible for collection_summary to be None here."", 'comment_created': datetime.datetime(2022, 7, 23, 8, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 928098775, 'comment_body': ""Let's call this ListOfAllowedCommitCmds or similar? It's basically one type, not multiple types, and that type is a list of stuff."", 'comment_created': datetime.datetime(2022, 7, 23, 8, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 928098866, 'comment_body': ""Why this change? Can it be standardized to bytes only? If not then maybe you'll need some explanation in the return docstring of when it'll be str and when it'll be bytes."", 'comment_created': datetime.datetime(2022, 7, 23, 8, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 928160110, 'comment_body': '> Here we are sure that collection_summary is never going to be none, because: This method is only used in collection_editor.py\r\n> \r\n> https://github.com/oppia/oppia/blob/99eb242993656fb9defa534496fb0b147ddd8a7f/core/controllers/collection_editor.py#L233\r\n> \r\n> \r\n> and there we are fetching the model with same `collection_id` keeping strict = true.\r\n> https://github.com/oppia/oppia/blob/99eb242993656fb9defa534496fb0b147ddd8a7f/core/controllers/collection_editor.py#L225\r\n\r\nOhhh, Sorry for the wrong info!!\r\n\r\nBasically here we checking for the collection model ( not for the collection summary model ). So due to the absence of  check for collection_summary model before this line, I think assert is applicable here. So for this reason I reverted the changes.', 'comment_created': datetime.datetime(2022, 7, 23, 20, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928161407, 'comment_body': 'Docstring is changed PTAL!', 'comment_created': datetime.datetime(2022, 7, 23, 20, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928161539, 'comment_body': ""The name is changed to `AllowedCommitCmdsListType`, I'm emphasizing on `Type` word because it helps to separate type variables from normal variables. Also, I didn't use `ListOfAllowedCommitCmds` and `ListTypeOfAllowedCommitCmds` because it sounds like more as a sentence than a variable name. But if you have any concerns, I'm ok to change it to `ListOfAllowedCommitCmds`."", 'comment_created': datetime.datetime(2022, 7, 23, 20, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928161568, 'comment_body': ""I reverted the changes because I didn't find any specific validation which stops collection_summary from being None. However, if we see the docstring of this function it looks to me that collection_summary is never going to be none, but for security, I added a raise exception here.\r\n\r\nA small conversation regarding this can be found here https://github.com/oppia/oppia/pull/15762#discussion_r928160110"", 'comment_created': datetime.datetime(2022, 7, 23, 20, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928162149, 'comment_body': '> Why this change? Can it be standardized to bytes only? \r\n\r\nThere are places in the codebase where string values are expected from this method but since it is annotated with bytes only, sometimes a conflict is showed up. So, to cover those conflicts we did this change.\r\n\r\nA small discussion regarding this can be found here https://github.com/oppia/oppia/pull/15762#discussion_r924619654\r\n', 'comment_created': datetime.datetime(2022, 7, 23, 20, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928163125, 'comment_body': 'give --> given', 'comment_created': datetime.datetime(2022, 7, 23, 20, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 928163147, 'comment_body': 'Exception: No collection ...', 'comment_created': datetime.datetime(2022, 7, 23, 20, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 928163228, 'comment_body': 'OK, yup -- with the overrides, this looks fine. Thanks!', 'comment_created': datetime.datetime(2022, 7, 23, 20, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 928198410, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 24, 5, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928198417, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 24, 5, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928248759, 'comment_body': 'I think we need to change the test name `test_get_collection_summaries_with_no_query_dash_dash` to a more understandable one.', 'comment_created': datetime.datetime(2022, 7, 24, 12, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 928249741, 'comment_body': '```suggestion\r\n    EVENT_TYPE: Final = feconf.EVENT_TYPE_ANSWER_SUBMITTED\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 12, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 928249817, 'comment_body': ""Isn't this `Final`?\r\nDitto elsewhere `EVENT_TYPE` is used"", 'comment_created': datetime.datetime(2022, 7, 24, 12, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 928249827, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2022, 7, 24, 12, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 928249941, 'comment_body': '```suggestion\r\n(stats_models, feedback_models, user_models) = models.Registry.import_models([\r\n    models.NAMES.statistics, models.NAMES.feedback, models.NAMES.user\r\n])\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 12, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 928251805, 'comment_body': '```suggestion\r\n(opportunity_models,) = models.Registry.import_models([\r\n    models.NAMES.opportunity\r\n])\r\n```', 'comment_created': datetime.datetime(2022, 7, 24, 12, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 928695667, 'comment_body': '```suggestion\r\nclass SnapshotsMetadataDict(TypedDict):\r\n```', 'comment_created': datetime.datetime(2022, 7, 25, 10, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 928899388, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2022, 7, 25, 13, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928903053, 'comment_body': 'EVENT_TYPE is already defined in BaseEventHandler and we are just redefining it in all child classes. Also, if we use Final here then MyPy throws an error. Because Final is only used with Constants but here `EVENT_TYPE` is not a constant because we are redefining it in child classes.\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 25, 13, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928904644, 'comment_body': 'EVENT_TYPE is already defined in BaseEventHandler and we are just redefining it in all child classes. Also, if we use Final here then MyPy throws an error. Because Final is only used with Constants but here `EVENT_TYPE` is not a constant because we are redefining it in child classes.\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 25, 13, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928905316, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 25, 13, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928905394, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 25, 13, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 928905522, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 25, 13, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 929066405, 'comment_body': 'Can we do something similar that we did with `_handle_event`?', 'comment_created': datetime.datetime(2022, 7, 25, 16, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 929234023, 'comment_body': 'No, I have tried!!. Reason:\r\nIf we do something like the below:\r\n```python\r\nclass BaseEventHandler:\r\n    EVENT_TYPE: str\r\n\r\nclass StatsEventsHandler(BaseEventHandler):\r\n    EVENT_TYPE: Final = feconf.EVENT_TYPE_ALL_STATS\r\n```\r\n\r\nThen in `BaseEventHandler`,  `EVENT_TYPE` is considered as a writable attribute ( non-constant ) but in `StatsEventsHandler` it is considered as read-only attribute ( because of Final ), so here again, we are contradicting the same constant and non-constant idea.\r\n', 'comment_created': datetime.datetime(2022, 7, 25, 19, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938285836, 'comment_body': 'Why are these changes necessary? It seems strange to me to have to create a new `stories_with_none` variable here.', 'comment_created': datetime.datetime(2022, 8, 4, 22, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 938458366, 'comment_body': 'if we use `stories = story_fetchers.get_stories_by_ids(story_ids)`, then stories have `List[Story | None]` type and if we see line `991` there we are accessing attributes on the elements of this stories list. So, due to the type of `List[Story | None]`, every element of the stories list has the type  `Story | None`, and accessing attributes on these kind of types causes MyPy to throw an error `item None has no attribute story_contents`. \r\n\r\nTo avoid this error, I declared a new variable that can only contain Story ( not none ) `stories: List[story_domainStory] = []`. And I changed the name of previous `stories` to `stories_with_none` so that the type `List[Story | None]` cannot collide with `List[story_domain.Story] `. \r\n\r\nSo, stories_with_none points to the list that can contain None elements as well, and stories point to the list that can only contain Story elements.', 'comment_created': datetime.datetime(2022, 8, 5, 5, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938987280, 'comment_body': ""I see. Thanks for the detailed explanation. It seems the real issue here though is that MyPy cannot infer that `stories` won't have `None` objects since we would return early on line 983. So instead of adding a new `stories_with_none` object and changing the logic just to satisfy the type checks, can we add an ignore statement explaining that we already checking for `None` via the guard clause on line 983?"", 'comment_created': datetime.datetime(2022, 8, 5, 16, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 938997033, 'comment_body': ""> I see. Thanks for the detailed explanation. It seems the real issue here though is that MyPy cannot infer that `stories` won't have `None` objects since we would return early on line 983. So instead of adding a new `stories_with_none` object and changing the logic just to satisfy the type checks, can we add an ignore statement explaining that we already checking for `None` via the guard clause on line 983?\r\n\r\nWe can use ignore here, but we usually avoid doing this. Because if we use ignore here then we have to use ignores in other places also to make typing pattern consistent over the codebase, and that will set up a pattern of ignores in the codebase, and having more ignores in the codebase usually indicates that the codebase is not typed strictly. So, we prefer refactoring over the ignores wherever it is applicable!!"", 'comment_created': datetime.datetime(2022, 8, 5, 16, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938998483, 'comment_body': ""That's the reason we are not using ignore here."", 'comment_created': datetime.datetime(2022, 8, 5, 16, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939121635, 'comment_body': 'I believe another alternative would be to define `stories` with `Optional` and assert that `story` cannot be `None` on line 991. Would that work? Perhaps @aasiffaizal has some guidance here?', 'comment_created': datetime.datetime(2022, 8, 5, 18, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 939492187, 'comment_body': 'Yup, asserting is better than ignoring.\r\nassert is added, PTAL!\r\n', 'comment_created': datetime.datetime(2022, 8, 6, 6, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '554e82b4396ba5dfc84ae6f9641d2c119ba4b7ed', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700646dd08d1e6e7961cdd67aa85b3186134e889', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffb89c8cdd4f82f40c07307fc8c4b8c511c64b0a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af730356f47f74e497604e5a082df84797d1cf3f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577a69109b09e85bc06584f903beed6162595849', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '150f2c4b1fbb9e36f0a54eaa2792df5bd6d331a0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e08701019db39146034edad1704872e4f063c8d0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6efadd9152fac53e75722cd46bfc72c05ccccf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a910c6ca383a0e80e9377251ce2caf77f177c661', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713e9124075eec11356c3eb0003dca344c3646fb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '039eff0255f88a791b22e083ebdb17bcbcdfe194', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d3d402daa2ac2259844cf3e04ac82d1876af5ad', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f0a901345452eb6793db05d9bcacca417dfc5e3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08832ca0e2bd441fabf88a17c91748781821c2df', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91028d514d75275ba4a1285eeef38401cd47dac2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2deb8979347aabba7cd6b4d7163f1d2d704f3a4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b6c8399975c91bc213fd4733344db6c0bd37b37', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd4504247b77588a0cffe6de608849487326390', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd645f9faa114f30c01c3c5f30f2f51ae6f665f62', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74096d60b853047955b80582fc2c070ee898c7a8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f446af53a861796ba7e9d516c88c6c693a3026', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4fa7ded84b72c326171bbced9f74582a7af1212', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '350af313f7831274d293eb374de0d4e9db648723', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a59e5c5fd7c50fa01bdf0efa06be66d514cd9c2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '721a3502ffb973d0ac353e97ce33fc47afaa8728', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b459982983154fed4f2599df6771a04c222967', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a64b04c6bb7521f5da74be56c319dc33dae72a2c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2853c03379513cc0a168a7685d46809d5323723c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db05cebb630c7daedc2a37067ef3b96090bc9266', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1934c8d0a9f53d2466ce2f2ca51d634f1351d4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76985ddc5b58614ef17522c5936c0947b0065cc1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade85ceb2eacfa88e26ec2ccc0ba48a342124024', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d8db766cebc4a8852b5d8ee41c56e1250ca859', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab7a731696da03a8e36ad3a401d98f6548e65435', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a86b3f4013ca9260319f12b48d041372bbe4b85', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271e80d56ec4f4e5f427b8d02b79532dc031fb0a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e920f3e3a588ec27f842cfa077753fb78449a7e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d00eed469d6d48de023a1cadfde5dc81d0b3a68', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73dea318f9d9368a82470fc2886c7a0047abd803', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da15bac1ff1985672db88ce1bd0d929d6ab3fb4f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a77a8a8555658ff9901608937d96854cb5c1925e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36ea0105e573a8979965737ff90c4c248bbfa513', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb54daeba8a9843b708ff5831804c1a0990822a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1008164695,Fix part of #14033: Added Mypy type annotations to some files of domain folder. -- M1.9,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - expression_parser.py
 - voiceover_services.py
 - story_services.py
 - suggestion_services.py
 - suggestion_registry.py
 - summary_services.py
 - question_domain.py



## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15801,https://api.github.com/repos/oppia/oppia/pulls/15801,https://github.com/oppia/oppia/pull/15801,closed,4437,2263,54,52,32,67,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2022-07-26 07:41:27+00:00,2022-08-11 18:54:45+00:00,1422798.0,"16 days, 11:13:18","[{'comment_id': 931435548, 'comment_body': 'if suggestion is None', 'comment_created': datetime.datetime(2022, 7, 27, 18, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 931807037, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 28, 5, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 932211866, 'comment_body': ""This doesn't seem to be the correct solution. Should we rather modify the `create_default_state` type info."", 'comment_created': datetime.datetime(2022, 7, 28, 13, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932214507, 'comment_body': 'I think the important thing here is that this is a migration function and this was old version of this domain object so we allow less strict typing, this should be mentioned in all comments in all conversion functions everywhere.', 'comment_created': datetime.datetime(2022, 7, 28, 13, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932219862, 'comment_body': ""Don't already have a type like this elsewhere?"", 'comment_created': datetime.datetime(2022, 7, 28, 13, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932223373, 'comment_body': ""Why isn't `assert` used here?"", 'comment_created': datetime.datetime(2022, 7, 28, 13, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932228642, 'comment_body': 'Why is this changed?', 'comment_created': datetime.datetime(2022, 7, 28, 13, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932229435, 'comment_body': 'Is this needed?', 'comment_created': datetime.datetime(2022, 7, 28, 13, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932230469, 'comment_body': '```suggestion\r\n    """"""Type for the translation contributions stats dictionary.""""""\r\n```', 'comment_created': datetime.datetime(2022, 7, 28, 13, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932236345, 'comment_body': '```suggestion\r\n    """"""Type for the displayable collection summary dictionary.""""""\r\n```\r\n\r\ndiet elsewhere where we represent a dict directly and not dict of some domain object.', 'comment_created': datetime.datetime(2022, 7, 28, 13, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932239896, 'comment_body': 'Should this `Union` be separated into a type variable?', 'comment_created': datetime.datetime(2022, 7, 28, 13, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932244795, 'comment_body': '```suggestion\r\n            feconf.SUGGESTION_TYPE_ADD_QUESTION] = set()\r\n```', 'comment_created': datetime.datetime(2022, 7, 28, 13, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932255010, 'comment_body': 'TODO here?', 'comment_created': datetime.datetime(2022, 7, 28, 13, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932256601, 'comment_body': 'ditto above', 'comment_created': datetime.datetime(2022, 7, 28, 14, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932262333, 'comment_body': 'Hmm, I remember we have this issue with `BaseChange` quite a lot, do you think there is any possible change that would strengthen the typing?', 'comment_created': datetime.datetime(2022, 7, 28, 14, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932268376, 'comment_body': 'Why cannot this be executed at runtime?', 'comment_created': datetime.datetime(2022, 7, 28, 14, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 932276159, 'comment_body': ""```suggestion\r\n            question_dict['question_state_data']),\r\n```"", 'comment_created': datetime.datetime(2022, 7, 28, 14, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 933571697, 'comment_body': '`node_id` is Optional ?\r\n\r\nI see that the param is typed as `str`\r\n`def require_valid_node_id(cls, node_id: str) -> None:`', 'comment_created': datetime.datetime(2022, 7, 29, 19, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 933579777, 'comment_body': '```suggestion\r\n        def conversion_fn(_: str) -> str:\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 19, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 933592717, 'comment_body': 'If this is used quite a lot, should we move it to a `TypeVar`?', 'comment_created': datetime.datetime(2022, 7, 29, 20, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 933768280, 'comment_body': 'Done!, Docstring is fixed', 'comment_created': datetime.datetime(2022, 7, 30, 7, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933768284, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 30, 7, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933768291, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 30, 7, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933768900, 'comment_body': 'Fixed, Done!', 'comment_created': datetime.datetime(2022, 7, 30, 7, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933769379, 'comment_body': 'The Type of `default_dest_state_name` argument  of  `create_default_state` is changed to Optional[str], docstring is also updated. ', 'comment_created': datetime.datetime(2022, 7, 30, 7, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933769466, 'comment_body': 'The comment is Updated for all `_convert_*` functions, PTAL!', 'comment_created': datetime.datetime(2022, 7, 30, 7, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933770080, 'comment_body': ""I think you are pointing to `change_domain.py`'s type https://github.com/oppia/oppia/blob/c142cc99b7caab02bac0f45fd3e65a03f66b0a52/core/domain/change_domain.py#L30\r\n`AcceptableChangeDictTypes` contain more types than required for `RuleSpec`'s inputs. Also, `AcceptableChangeDictTypes` point to `commit_cmds` type but `AllowedRuleSpecInputTypes` defined for RuleSpec's inputs https://github.com/oppia/oppia/blob/c142cc99b7caab02bac0f45fd3e65a03f66b0a52/core/domain/state_domain.py#L2387 "", 'comment_created': datetime.datetime(2022, 7, 30, 8, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933770299, 'comment_body': 'A comment is also added above the type.', 'comment_created': datetime.datetime(2022, 7, 30, 8, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933770404, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 30, 8, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933770440, 'comment_body': 'Comment is changed wherever it is applicable!', 'comment_created': datetime.datetime(2022, 7, 30, 8, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933770460, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 30, 8, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933770823, 'comment_body': ""Done, but due to this, I have to change one test case mentioned in cron_test.py and after changing the test OppiaBot adds a `PR: Affects datastore layer` label, but I didn't change any cron_job. PLease take a look and please correct me if I'm wrong somewhere!"", 'comment_created': datetime.datetime(2022, 7, 30, 8, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933779674, 'comment_body': ""Previously I didn't find any validation for initial_node_id but now I found that https://github.com/oppia/oppia/blob/c142cc99b7caab02bac0f45fd3e65a03f66b0a52/core/domain/story_domain.py#L573 \r\nBasically, `validate_prerequisite_skills_in_story_contents` method is only used in `_save_story` method and before calling `validate_prerequisite_skills_in_story_contents` method we are calling validate method. And in validate method we are already checking if len(nodes) > 0 then initial_node_id should not be None. \r\n\r\nSame thing we are doing here, if len(story_contents.nodes) == 0 then we are not processing further.\r\n\r\nSo, assert is added and the exception is removed.\r\n"", 'comment_created': datetime.datetime(2022, 7, 30, 9, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933780925, 'comment_body': 'I think we only maintain 2 issues for type checking, one is for removing wrong type-checks from test cases and another is for ndb properties, can you provide more info on which TODO we add here ( or shall I create a new todo here! ).', 'comment_created': datetime.datetime(2022, 7, 30, 9, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933781747, 'comment_body': ""It can be executed at runtime but I'm not doing this before because I'm not sure about the test cases. But now all the cases are passing so I removed the `if MYPY` clause and updated the comment.\r\n"", 'comment_created': datetime.datetime(2022, 7, 30, 10, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933785678, 'comment_body': 'Previously when we are doing `set().union(*[acc.contribution_dates for acc in accumulators])`. Basically, we are first defining an empty set whose type is `Set[<nothing>]` and when we apply union on this set then here we contradict the types. Because the type we are passing in the union is `List[Set[Date]]` but we are using this union on set having the type `Set[<nothing>]`. So, the expected type for union is `Iterable[<nothing>]` but here we are providing `Iterable[Set[Date]]`. To fix this type of contradiction I first defined an empty set having the type Set[datetime.date]:\r\n`contribution_dates: Set[datetime.date] = set()`', 'comment_created': datetime.datetime(2022, 7, 30, 10, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933786257, 'comment_body': ""Yes, to define an empty set of type Set[datetime.date]. if don't do this then the type of contribution_dates is going to be `Set[<nothing>]` which again contradicts the type as mentioned in the above comment."", 'comment_created': datetime.datetime(2022, 7, 30, 10, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 933797409, 'comment_body': 'I think looking at the current scenario we are doing the best solution ( as far I know ):\r\nbecause in base change every attribute is defined dynamically and most of the attributes have str type that\'s why the __getattr__ method has str return type. \r\nAlso, we are allowing only a limited number of types to enter in _init_ method of BaseChange. \r\n\r\nNow, I think the only concerned left is that can we add different types to different attributes ( like: question_dict should have QuestionDict without any explicit declaration ), for this i think we can do the following:\r\n```python \r\nclass BaseChange:\r\n    """"""Domain object for changes made to storage models\' domain objects.""""""\r\n    if MYPY:\r\n        question_dict: QuestionDict\r\n        new_value: PossibleNewValueTypes\r\n        old_value: PossibleOldValueTypes\r\n        .\r\n        .\r\n        <<other attributes>>\r\n```\r\nin this way we have a sub-set of types for each individual attribute. The problem with this is that it only reduces 5 to 10% percent of assertions ( I\'m not sure ) because if new_value has a subset of 3 types ( str, int, bool) then we have to use assertion again to narrow down it to a specific type. But for cases like question_dict we don\'t have to use assertion anymore. Also, This can be implemented once we have enough info about each attribute may be after covering the domain folder ( at least ).\r\n\r\n@vojtechjelinek PTAL! and let me know about this approach. \r\n', 'comment_created': datetime.datetime(2022, 7, 30, 11, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 934939742, 'comment_body': '```suggestion\r\n        # on ExplorationChange are created dynamically except cmd, so because\r\n        # of this MyPy is unable to recognize `old_value` as an attribute\r\n        # of change and throws an `""ExplorationChange"" has no attribute\r\n```', 'comment_created': datetime.datetime(2022, 8, 1, 21, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 934939989, 'comment_body': '```suggestion\r\n        # on ExplorationChange are created dynamically except cmd, so because\r\n        # of this MyPy is unable to recognize `old_value` as an attribute\r\n        # of change and throws `""ExplorationChange"" has no attribute\r\n```', 'comment_created': datetime.datetime(2022, 8, 1, 21, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 934940290, 'comment_body': '```suggestion\r\n        # in types MyPy throws an `Incompatible types in assignment` error.\r\n```', 'comment_created': datetime.datetime(2022, 8, 1, 21, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 934940435, 'comment_body': '```suggestion\r\n        # None MyPy throws an `Incompatible types in assignment` error.\r\n```', 'comment_created': datetime.datetime(2022, 8, 1, 21, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 935250820, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 8, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935250958, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 8, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935251034, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 8, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935251126, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 2, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 935364844, 'comment_body': 'No problem this is just a small oppiabot issue.', 'comment_created': datetime.datetime(2022, 8, 2, 10, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 935365894, 'comment_body': 'Or maybe why we add ignore here and not modify the type?', 'comment_created': datetime.datetime(2022, 8, 2, 10, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 935369160, 'comment_body': 'Yeah, that looks good.', 'comment_created': datetime.datetime(2022, 8, 2, 10, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 935436030, 'comment_body': '```suggestion\r\n        # Instead of deleting the version key, we are making them equal to\r\n        # check if the other contents of the two dicts are the same or not.\r\n```', 'comment_created': datetime.datetime(2022, 8, 2, 11, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 935443824, 'comment_body': 'Should we change the definitions in the base type?', 'comment_created': datetime.datetime(2022, 8, 2, 11, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 935458101, 'comment_body': 'Why is MyPy expecting return value in a `swap`?', 'comment_created': datetime.datetime(2022, 8, 2, 11, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 935469169, 'comment_body': '```suggestion\r\nclass PlaythroughDict(TypedDict):\r\n```', 'comment_created': datetime.datetime(2022, 8, 2, 11, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 938151916, 'comment_body': 'Ignore and comment is removed from here!!\r\nBut ignore cannot be removed from the above case because in the above case `suggestion_domain_class` is of Union type ( `Union[\r\n        Type[SuggestionEditStateContent],\r\n        Type[SuggestionTranslateContent],\r\n        Type[SuggestionAddQuestion]\r\n    ]` ) and out of all these classes only `SuggestionEditStateContent` can accept Optional[str] for language_code and for other classes that cannot accept Optional[str] for language_code, MYPY throwing an error.', 'comment_created': datetime.datetime(2022, 8, 4, 18, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938152128, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 4, 18, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938152188, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 4, 18, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938163096, 'comment_body': ""Ah, actually this is not related to `swap` particularly, because:\r\nLet's consider the following cases:\r\n```python\r\ndef foo(x: int) -> None:\r\n    x = 5\r\n\r\nvar_1 = foo(39)        # Here MyPy throws an error because Mypy assumes that the return value of methods that return None should not be used.\r\n\r\n\r\ndef foo_one(x: str) -> str\r\n    return x\r\n\r\nfoo_one(foo(35))       # Here also MyPy throws an error, because Mypy assumes that the return value of methods that return None should not be used.\r\n```\r\nSo, a similar is happening with the swap.\r\n`self.edit_before_pre_accept_validate(suggestion)` is used inside swap as an argument. So Mypy assumes that it will return something."", 'comment_created': datetime.datetime(2022, 8, 4, 19, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938163971, 'comment_body': 'Reference: https://github.com/python/mypy/issues/6549\r\nIt is not an exact issue but I hope it makes things clearer.', 'comment_created': datetime.datetime(2022, 8, 4, 19, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 938171437, 'comment_body': 'I think we should not do this!!. because `self.image_context` can be of Optional[str] type in this class only and in other classes ( majority of the classes ) it has a string type. And in the base class also, we are using `self.image_context` as str type not Optional[str] so in methods where it is used as a string, we have to assert there to narrow down its type.', 'comment_created': datetime.datetime(2022, 8, 4, 19, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940177870, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2022, 8, 8, 12, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940184954, 'comment_body': ""Hmm, okay I think I understand this error, but I'm still confused why it is used like this here, if we want to swap `suggestion_registry.SuggestionEditStateContent.pre_accept_validate` with `None` we don't need to use `self.edit_before_pre_accept_validate(suggestion)`. Should just `self.edit_before_pre_accept_validate` be used? Or maybe we call `self.edit_before_pre_accept_validate(suggestion)` outside the `swap`."", 'comment_created': datetime.datetime(2022, 8, 8, 12, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940201199, 'comment_body': 'Ignore still here', 'comment_created': datetime.datetime(2022, 8, 8, 12, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 940903846, 'comment_body': ""Actually, we are not replacing it for the None value, instead, we are changing the implementation of `SuggestionEditStateContent.pre_accept_validate` with `self.edit_before_pre_accept_validate(suggestion)` for testing purpose.\r\n\r\nAnd we are calling `self.edit_before_pre_accept_validate(suggestion)` here because we are providing sample suggestion defined in line `607`\r\n\r\nI also tried to refactor it but didn't find any working solution."", 'comment_created': datetime.datetime(2022, 8, 9, 5, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 940907652, 'comment_body': 'Before there were 2 ignores, one of them is removed but other ignore (defined on line `223`) cannot be removed because:\r\n suggestion_domain_class is of Union type ( Union[ Type[SuggestionEditStateContent], Type[SuggestionTranslateContent], Type[SuggestionAddQuestion] ] ) and out of all these classes only SuggestionEditStateContent can accept Optional[str] for language_code and for other classes that cannot accept Optional[str] for language_code, MYPY throwing an error.\r\n', 'comment_created': datetime.datetime(2022, 8, 9, 5, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 941508122, 'comment_body': 'Ah I see.', 'comment_created': datetime.datetime(2022, 8, 9, 15, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941517116, 'comment_body': ""The problem is that when we swap elsewhere we swap with the function and not the function call. `swap(a, 'b', c)` not `swap(a, 'b', c())` that is why is this so confusing."", 'comment_created': datetime.datetime(2022, 8, 9, 15, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942015793, 'comment_body': 'We cannot do\r\n```python\r\n            with self.swap(\r\n                suggestion_registry.SuggestionEditStateContent,\r\n                \'pre_accept_validate\',\r\n                self.edit_before_pre_accept_validate):\r\n```\r\nBecause  edit_before_pre_accept_validate is implemented as below:\r\n```python\r\n    def edit_before_pre_accept_validate(\r\n        self, suggestion: suggestion_registry.BaseSuggestion\r\n    ) -> None:\r\n        """"""Edits suggestion immediately before pre-accept validation.""""""\r\n        suggestion.score_category = \'invalid_score_category\'\r\n        suggestion.pre_accept_validate()\r\n```\r\nso if we replace `edit_before_pre_accept_validate` with `pre_accept_validate`, and then whenever we call `pre_accept_validate`, a `edit_before_pre_accept_validate` will be called which in turn will call `pre_accept_validate` and the cycle goes on.\r\n\r\nBut if we call `self.edit_before_pre_accept_validate` without the swap then everything works fine, so I removed swap from here.', 'comment_created': datetime.datetime(2022, 8, 10, 4, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '9a43afe075fb1c5d14837bc13c1fd4e266c0654d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '553d7124b95963cac76508bce231ade123a947ef', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c5f6c96b6e6f80e648927f3bfd0b75b526c164e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f4719b1aff76a3866e045710d8b47fe31dab21b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85954f5cc0d34238c43f7f7929e32d64766a481e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83cb0a4751970529d307c1f42d5efe8d8da1ab3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd90be7fca5894e94c8b4d0b05a8c242062f48c59', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '312d327533a3fbbf7f72e704251438d7d36c2080', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fed30b5b3cd95b2b842c730bc4d977246be0c84', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83ce620efafcbbd3a91456634ae0060169f24cb3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397960072cd5cabb2fca8cc8df45edfe0c9df484', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6cf084789b7e0aa321807802b154242998e4da5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '048d3c8b5cfb46bb0c4cc1fb126889e3607faf07', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26571fb5f5628000d319b89cb3dfe41f14131246', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ddfb764f995eddcdaaa9e5b71220a47dbda6a16', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2323ee1ab485660bddd1cd8ea01a76826879511', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be848c3f6442b8aa6168216bd055404e81111b3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1960714861e7a7146d5851199c3da02c3ceebbf7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6dfd614d9fdba360d3c71a4683dd32feb17c2e5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eb03c5f70e1d15b2b99bcbf8e3dd5b08a84eb99', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e344f2721d5377f1189eb559bba61ed7cbff826', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465719504b309289eee1db7a8a172fcc78f9f8a6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '987cc9f3d609850fc10c6a2b59abfc54ae3a4a01', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2af759e4050eb66494633d98da7f005546ddb4e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '385c2b7a94e8cb0d15a081867c40f2391a49f2d8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd0d5448c6201b856a0b3b1a9a16d139c2c719f7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '979d39a0afac33f76c8922273b4c9215627e294c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca24b61e8a12c61d45337261775f40ad65c447af', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fcb70ea3deb8c6b0d9d430dc44abc005e0d2ed5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '147c54f187b79dade5a607383a768fe49b64c995', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64804027848c7f532ad1865087eca0e2d6ce077a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94598a43c8c8a5deccbddf019b8728c16f7fbe5d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbfc26f33e7085940ac21039810b564af86936a6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af4f439379e54e28b1ed021123cad28c8c26d8f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d4b23a756851679856ab193b7eda001a9313c5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cac7663c2922b40986021945619e4befee70d81', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1841d35c55c220518e86e75362068ca1f58e2a37', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2e3675c2e7224093e7edc7efac91dacd95cdd7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72266957253e88bc73cb7ee013ba38baa36628c9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57723aec2120a9c487eedf0d2d2287b2bba4f670', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '561a57de730af44590e316485b4c554b707a98ca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f413bc4933eb6ad5c24ccc1a87f47f2687825c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66b284caa3986b505ca57794f37da99f68444baa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d1ec22f1483af10d2fbc815afaf525ee39436a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf527e70487e93138bb933f62115dfeec9099d0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f05899d1c81da371179c6f7d72807185a39827', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a736200bf0bd6f180cb105129adaa26f347c078', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04aa903c7810ee6b0ae2627dffc2b349f53e188', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '098dc6ebeb5dc9aad09f7e6a4c5dc2ef00290a68', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '237a313a2935690a52ba6026d65be2e63ac7f9d6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbd22d5317927653988d1bfba13ff7cc20443bf4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e313d95d0396fbb55e7512d4d8553f37d704bb8e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1014319744,Fix part of #14033: Added Mypy type annotations to some files of domain folder. -- M1.10,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #14033
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - wipeout_service.py
 - learner_progress_services.py
 - skill_services.py
 - state_domain.py
- object_registry.py
 - exp_services.py



## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15827,https://api.github.com/repos/oppia/oppia/pulls/15827,https://github.com/oppia/oppia/pull/15827,closed,5430,2740,83,77,39,200,1,1,[{'name': 'PR: LGTM'}],2022-08-01 20:30:37+00:00,2022-08-28 14:51:07+00:00,2312430.0,"26 days, 18:20:30","[{'comment_id': 939503408, 'comment_body': 'Previously, `pprint` only prints the message and does not return anything but still, we use this inside a string formatting, and because of this MyPy throws an error. Thus to avoid the error I used `pformat` that returns the same string as printed by `pprint`.', 'comment_created': datetime.datetime(2022, 8, 6, 8, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939522551, 'comment_body': 'Here I changed it to None because the solution of `InteractionInstance`  can only accept either None or SolutionDict.', 'comment_created': datetime.datetime(2022, 8, 6, 12, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939523825, 'comment_body': 'Here I changed the implementation a bit, because in line `218` we are using this all_topics variable and not handling the case of None. So, I removed none from here. \r\nPTAL!', 'comment_created': datetime.datetime(2022, 8, 6, 12, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939528020, 'comment_body': 'Here I splitted put_multi, because previously we are adding two different lists. `metadata_models` is a list of type `base_models.BaseSnapshotMetadataModel` and whereas `commit_log_models` is a list of type `base_models.BaseCommitLogEntryModel`. So, because of this MyPy throws an error and to avoid the error I did this change.', 'comment_created': datetime.datetime(2022, 8, 6, 13, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939528201, 'comment_body': 'Similar to the above, we are adding two different types of list comprehensions here.', 'comment_created': datetime.datetime(2022, 8, 6, 13, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939529803, 'comment_body': 'This method can only accept domain objects, but here we are providing Models.\r\nPreviously it was working, because in method `recommendations_services.get_item_similarity` we accessed those attributes that are defined in both model and domain object. PTAL and confirm that is it a Model or domain object!\r\n\r\nhttps://github.com/oppia/oppia/blob/3d856cc26e083e460ea183860c6fd58124498766/core/domain/recommendations_services.py#L306', 'comment_created': datetime.datetime(2022, 8, 6, 13, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 939814150, 'comment_body': ""I think in the previous code an error would be thrown if it's None.\r\n\r\nShouldn't we replicate that behaviour here?"", 'comment_created': datetime.datetime(2022, 8, 8, 4, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939814978, 'comment_body': 'This looks odd to me. Why is this optional? Ditto for the next one.\r\n\r\n/cc @vojtechjelinek ', 'comment_created': datetime.datetime(2022, 8, 8, 4, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939815213, 'comment_body': 'I think you should have something like: if commit log model class exists but the field name is not specified, throw error.\r\n\r\nTry not to rely on runtime asserts, where possible.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939816028, 'comment_body': ""@vojtechjelinek Just to check, is this OK? I think we generally want everything to be put at once, so that there isn't a danger of one happening and not the other.\r\n\r\n@sahiljoster32 is there a possibility of using union types or similar to satisfy mypy here?"", 'comment_created': datetime.datetime(2022, 8, 8, 4, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939816439, 'comment_body': ""Same notes as above re not splitting to avoid an inconsistent state; also, one call is faster than three.\r\n\r\nIn general, put_multi() _should_ be able to accept multiple kinds of models, so probably worth digging more into why mypy can't handle this. /cc @vojtechjelinek "", 'comment_created': datetime.datetime(2022, 8, 8, 4, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939816858, 'comment_body': 'Why the ""optional""? It\'s not reflected in the list name and I\'m wondering why we need it at all.\r\n\r\n/cc @vojtechjelinek ', 'comment_created': datetime.datetime(2022, 8, 8, 4, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939817218, 'comment_body': 'Same note about not splitting.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939817518, 'comment_body': ""I'm a bit confused about why mypy can't handle the old code. I mean ... at the end of the process in the new code you end up with a list with multiple types anyway, right, so shouldn't mypy have problems with the new code as well?"", 'comment_created': datetime.datetime(2022, 8, 8, 4, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 939817702, 'comment_body': 'Same note about not splitting.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 941177076, 'comment_body': 'Yeah, for `put_multi` we should prioritize doing it only once when possible. Even if some MyPy ignores are needed.', 'comment_created': datetime.datetime(2022, 8, 9, 10, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941185099, 'comment_body': 'Should we rather not call this function if `interaction_id` is `None`', 'comment_created': datetime.datetime(2022, 8, 9, 10, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941186614, 'comment_body': ""```suggestion\r\n        constants.get_package_file_contents(\r\n            'extensions', feconf.OBJECT_DEFAULT_VALUES_EXTENSIONS_MODULE_PATH\r\n        )\r\n    )\r\n```"", 'comment_created': datetime.datetime(2022, 8, 9, 10, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941193442, 'comment_body': ""```suggestion\r\n        with self.assertRaisesRegex( # type: ignore[no-untyped-call]\r\n            NotImplementedError,\r\n            re.escape(\r\n                'The get_schema() method is missing from the derived class. It '\r\n                'should be implemented in the derived class.'\r\n            )\r\n        ):\r\n```"", 'comment_created': datetime.datetime(2022, 8, 9, 10, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941203603, 'comment_body': ""Somewhere you use ` and somewhere ' please be consistent."", 'comment_created': datetime.datetime(2022, 8, 9, 11, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941204935, 'comment_body': ""```suggestion\r\n    # Here, 'change_domain' is imported only for type checking.\r\n```"", 'comment_created': datetime.datetime(2022, 8, 9, 11, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941211880, 'comment_body': ""Yep we should use domain objects here, can you maybe skip this file for now, create an issue, and I will find someone to fix this as I don't want you to handle the Beam stuff."", 'comment_created': datetime.datetime(2022, 8, 9, 11, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941226835, 'comment_body': 'It is fine for config models we do not have commit log models so we just pass `None` ', 'comment_created': datetime.datetime(2022, 8, 9, 11, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941242752, 'comment_body': ""I don'ŧ think there should be an empty line between the typing and deepdiff"", 'comment_created': datetime.datetime(2022, 8, 9, 11, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941245617, 'comment_body': 'Here we can simplify the code to smth like `exploration.validate(strict=exploration_rights.status == rights_domain.ACTIVITY_STATUS_PUBLIC)`', 'comment_created': datetime.datetime(2022, 8, 9, 11, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941276972, 'comment_body': 'Why so many new optionals?', 'comment_created': datetime.datetime(2022, 8, 9, 12, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941278900, 'comment_body': 'Can this be overloaded on `schema_obj_type`?', 'comment_created': datetime.datetime(2022, 8, 9, 12, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941282321, 'comment_body': 'Should this be placed at the top of this file?', 'comment_created': datetime.datetime(2022, 8, 9, 12, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 941337425, 'comment_body': ""Is there a possibility that `topic_rights_with_none` can contain `None`?\r\n\r\nI see we are asserting `topic_rights_with_none[index]` is not `None` below. If we are sure that `topic_rights_with_none` won't contain `None`, then wouldn't it be better to change the variable name?\r\n\r\nDitto elsewhere."", 'comment_created': datetime.datetime(2022, 8, 9, 13, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 941338175, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2022, 8, 9, 13, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 941351420, 'comment_body': 'Why are `status` and `classroom_name` Optional?', 'comment_created': datetime.datetime(2022, 8, 9, 13, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 945132048, 'comment_body': ""> @sahiljoster32 is there a possibility of using union types or similar to satisfy mypy here?\r\n\r\nWe cannot use Sequence here because we are modifying the list using +, and Sequences are not mutable.\r\n\r\nWe cannot use List[Union[base_models.BaseSnapshotMetadataModel, base_models.BaseCommitLogEntryModel]] for `commit_log_models` here because attribute `user_id` is only defined in `base_models.BaseCommitLogEntryModel` not in `base_models.BaseSnapshotMetadataModel`. So, MyPy will throw an error for the same.\r\n\r\nBut we can use something like the below:\r\n```python\r\ncombine_func: Callable[[List[Any], List[Any]], List[Any]] = lambda l1, l2: l1+l2\r\n\r\ndatastore_services.put_multi(combine_func(metadata_models + commit_log_models))\r\n```\r\nthis will suppress the error.\r\n\r\nAnd another approach to suppress the error can be:\r\n```python\r\n        all_models: List[base_models.BaseModel] = []\r\n        for model in metadata_models:\r\n            all_models.append(model)\r\n        for model_other in commit_log_models:\r\n            all_models.append(model_other)\r\n        datastore_services.put_multi(all_models)\r\n```\r\nIn the second approach we have to use repeated loops so I'm not sure that it is a good approach PTAL and let me know.\r\n\r\nFor now, i have added an ignore with comment!!\r\n"", 'comment_created': datetime.datetime(2022, 8, 13, 12, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945132172, 'comment_body': ""I think I have handled this case before. So, I made some changes PTAL!! and I'm ok to revert these changes if you have concerns."", 'comment_created': datetime.datetime(2022, 8, 13, 12, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945132242, 'comment_body': 'Done, an exception is added and docstring is also updated!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945132281, 'comment_body': 'Thanks for clearing the ambiguity!!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945132288, 'comment_body': 'Done, an exception is added and docstring is also updated!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945132635, 'comment_body': 'As mentioned above in the comment https://github.com/oppia/oppia/pull/15827#discussion_r945132048 I have added an Ignore here', 'comment_created': datetime.datetime(2022, 8, 13, 12, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945133240, 'comment_body': ""Optional is removed and assert is added with comment. Basically, we cannot use `if exception` here because we are fetching models with those ids that already belong to existing models. So, if we put an Exception then that exception will never be executed.\r\n\r\nIf we see line 1124 there we are collecting ids and with these same ids we are fetching models in line 1127. The return type of `get_multi` is List[Optional[]] so that's why we have to use assert here."", 'comment_created': datetime.datetime(2022, 8, 13, 12, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945133341, 'comment_body': 'As mentioned above in the comment https://github.com/oppia/oppia/pull/15827#discussion_r945132048 I have added an Ignore here', 'comment_created': datetime.datetime(2022, 8, 13, 12, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945134817, 'comment_body': ""Here we know that ' In this process ' we end up having a list with multiple types ( because i think it is a special case ), But MyPy will throw an error considering it as a normal case like others.\r\nfor eg:\r\n```python\r\nL1: List[str] = ['a', 'b']\r\nL2: List[int] = [1, 2]\r\n\r\nL1 + L2     # MyPy will throw an error. \r\n```\r\nAlso can you please be more specific about old_code and new_code."", 'comment_created': datetime.datetime(2022, 8, 13, 12, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945134829, 'comment_body': 'As mentioned above in the comment https://github.com/oppia/oppia/pull/15827#discussion_r945132048 I have added an Ignore here', 'comment_created': datetime.datetime(2022, 8, 13, 12, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135335, 'comment_body': 'This function is called in many places, so I think one assertion is better than too many `if interaction_id is None` conditions.', 'comment_created': datetime.datetime(2022, 8, 13, 12, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135343, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135381, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135390, 'comment_body': 'Sorry, This is fixed now!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135405, 'comment_body': ""now ' is used everywhere!"", 'comment_created': datetime.datetime(2022, 8, 13, 12, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135412, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135449, 'comment_body': 'Line removed from above! Done!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135458, 'comment_body': 'Done wherever it is applicable!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135527, 'comment_body': 'Done wherever it is applicable!', 'comment_created': datetime.datetime(2022, 8, 13, 12, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945135988, 'comment_body': 'I think No, If we do this then at runtime it will throw an error because classes `SubtitledHtml`, `SubtitledHtmlDict` and etc are defined below this!\r\n\r\nif we import it under the `if MYPY` clause then everything will work fine but IDE throws an error by putting yellow ( on my VS code ) curly lines under the words. ', 'comment_created': datetime.datetime(2022, 8, 13, 12, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945136002, 'comment_body': 'Changed !', 'comment_created': datetime.datetime(2022, 8, 13, 12, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945136005, 'comment_body': 'Changed !', 'comment_created': datetime.datetime(2022, 8, 13, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945136413, 'comment_body': 'In many test cases we are providing None, but apart from test cases If we see the functions that are called inside this method we can see that there we are handling the case of None. \r\nEg:\r\nhttps://github.com/oppia/oppia/blob/cc8f6d73d492d77aada65e73d7f94d258746185d/core/domain/skill_services.py#L230 \r\n\r\nAlso `_filter_skills_by_status` is only used here. ', 'comment_created': datetime.datetime(2022, 8, 13, 12, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945147265, 'comment_body': 'id can be None because at the time of creating default InteractionInstance we are providing None.\r\nhttps://github.com/oppia/oppia/blob/cc8f6d73d492d77aada65e73d7f94d258746185d/core/domain/state_domain.py#L982\r\nFor default_outcome and solution, In method from_dict and to_dict we passing None as well \r\nhttps://github.com/oppia/oppia/blob/cc8f6d73d492d77aada65e73d7f94d258746185d/core/domain/state_domain.py#L755\r\n', 'comment_created': datetime.datetime(2022, 8, 13, 13, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945204386, 'comment_body': ""Please go with the second approach rather than an ignore. It's fine to have multiple for loops, that's not a problem. It's nested for loops that typically leads to issues.\r\n\r\nThat said, is it possible to do something like: `for model in metadata_models + commit_log_models` or is that not OK?"", 'comment_created': datetime.datetime(2022, 8, 13, 22, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945204416, 'comment_body': 'I would suggest leaving a comment here to explain that, then.', 'comment_created': datetime.datetime(2022, 8, 13, 22, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945204748, 'comment_body': ""By old code I mean the original code in this file before you modified it. I get the issue with different types but wouldn't they all still be subclasses of BaseModel (say)? Or you could perhaps explicitly type the final list as a list of a union type (of three possible types) so that you don't need the `ignore[operator]`?"", 'comment_created': datetime.datetime(2022, 8, 13, 22, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945238223, 'comment_body': ""> Please go with the second approach rather than an ignore\r\n\r\nDone!\r\n\r\n> is it possible to do something like: for model in metadata_models + commit_log_models or is that not OK?\r\n\r\nNo, it's not ok, because the main issue is that we are using `+` with two different types of lists."", 'comment_created': datetime.datetime(2022, 8, 14, 6, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945238323, 'comment_body': 'Done PTAL!', 'comment_created': datetime.datetime(2022, 8, 14, 6, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945239534, 'comment_body': ""Yes, they all are subclasses of BaseModel and that's the reason why we are able to combine all models inside in one list ( by defining `feedback_related_models`  as a list of BaseModels )\r\n\r\nAlso, Ignore is Removed!"", 'comment_created': datetime.datetime(2022, 8, 14, 7, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945242138, 'comment_body': ""We should not be using Any. Wouldn't AcceptableChangeDictTypes or similar work?"", 'comment_created': datetime.datetime(2022, 8, 14, 7, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945242465, 'comment_body': ""You can't just do this, as explained before; you'll need an explanation about why we know for certain that dest is not None at this stage, otherwise we're setting ourselves up for a runtime error in production."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945242521, 'comment_body': ""We shouldn't be using Any."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945242848, 'comment_body': ""Not sure about this. Shouldn't this be checked in the controller layer?\r\n\r\nAs usual, any assertion needs a clear justification of why the condition could not possibly occur in practice, even if some other function written by a new developer in the future calls this one."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945242857, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945242864, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945242873, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945242878, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243028, 'comment_body': ""Could you pull this out into a new local variable instead, defined before this line? What you've written here is a bit complex and makes an important part of the code harder to understand."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243051, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243193, 'comment_body': ""Every use of an assertion needs a comment that justifies that this situation cannot possibly happen in production. The current comment is insufficient because it doesn't explain this.\r\n\r\nIf you cannot justify it rigorously then you would need to check for it and either (a) make this checkable using mypy typing, (b) handle the null case, or (c) throw an exception, as previously discussed in similar PR reviews. The best choice is (a), but if you need to do (b) or (c), try to understand the context of the code so that you can figure out the right thing to do.\r\n\r\nPlease note this elsewhere, too. /cc @aasiffaizal "", 'comment_created': datetime.datetime(2022, 8, 14, 7, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243465, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243565, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243573, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243658, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243666, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243673, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243677, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243683, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243685, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243724, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243741, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243780, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945243783, 'comment_body': 'Ditto, needs justification.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945244071, 'comment_body': ""This is getting complex enough that I'm wondering if you should have a named type for it, similar to what's done in exp_domain.py for the different commit cmds."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945244278, 'comment_body': ""Don't forget to update the docstring below."", 'comment_created': datetime.datetime(2022, 8, 14, 7, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945244499, 'comment_body': 'I am a bit worried about bundling all these together in one type -- e.g. the first two of these seem clearly different.\r\n\r\nWhat is going on here conceptually -- can you explain? There may be multiple different types of conversion functions acting on different things. What is the rationale for grouping them all together?', 'comment_created': datetime.datetime(2022, 8, 14, 7, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945244735, 'comment_body': 'Does it make sense for this to be non-optional? When a suggestion is first submitted, there is no reviewer yet. /cc @sagangwee \r\n\r\n(Ditto in multiple places below.)', 'comment_created': datetime.datetime(2022, 8, 14, 7, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945244921, 'comment_body': 'Both of these conditions seem incorrect -- we have states with ""try again"" answer groups all the time and there\'s no issue with them being checkpoints. /cc @paprajapati9 in case he wants to leave any comments here.\r\n\r\nPresumably we should just not add the destination to the BFS queue if the destination is None?', 'comment_created': datetime.datetime(2022, 8, 14, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945245122, 'comment_body': 'Ditto, this and the below block seem wrong to me.', 'comment_created': datetime.datetime(2022, 8, 14, 7, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945245796, 'comment_body': 'This change (from Union[Dict[str, Any], List[Dict[str, Any]], None] to AllowedCommitCmdsListType) is great. Can you make similar changes to other places in this PR where the type is similarly messy?', 'comment_created': datetime.datetime(2022, 8, 14, 7, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945570436, 'comment_body': 'Whenever we create a default question, we create a `default_question_state_data` and while creating a `default_question_state_data` we are providing an outcome to that default question.\r\n\r\nSo, `create_default_question` will call `create_default_question_state`.\r\nhttps://github.com/oppia/oppia/blob/a65d963b3268c484a2fafa6778979a79c5effefe/core/domain/question_domain.py#L1592\r\n which calls `create_default_state`\r\nhttps://github.com/oppia/oppia/blob/a65d963b3268c484a2fafa6778979a79c5effefe/core/domain/question_domain.py#L258\r\n `create_default_state` calls -> `create_default_interaction`\r\nhttps://github.com/oppia/oppia/blob/933bfccb33903dff2025a1590126326e5c7e4fca/core/domain/state_domain.py#L3855\r\n\r\nand here we create a default outcome:\r\nhttps://github.com/oppia/oppia/blob/933bfccb33903dff2025a1590126326e5c7e4fca/core/domain/state_domain.py#L976\r\n\r\nSo, default_outcome for question is never going to be None.', 'comment_created': datetime.datetime(2022, 8, 15, 9, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945570494, 'comment_body': 'Done, the condition is pulled out into a new variable and passed that variable for strict.', 'comment_created': datetime.datetime(2022, 8, 15, 9, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945570548, 'comment_body': 'Done, the condition is pulled out into a new variable and passed that variable for strict.', 'comment_created': datetime.datetime(2022, 8, 15, 9, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945570610, 'comment_body': ""In the same function ( validate ), we are checking that every answer's outcome (belongs to exploration ) should have a destination. \r\nhttps://github.com/oppia/oppia/blob/a65d963b3268c484a2fafa6778979a79c5effefe/core/domain/exp_domain.py#L1194\r\n\r\nwe are also checking for default_outcome, I mean if default_outcome exists for an interaction then it should have a destination:\r\nhttps://github.com/oppia/oppia/blob/a65d963b3268c484a2fafa6778979a79c5effefe/core/domain/exp_domain.py#L1211\r\n\r\nSo, before reaching this code we are already validated that dest exists or not."", 'comment_created': datetime.datetime(2022, 8, 15, 9, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945611062, 'comment_body': ""above we are using `get_descriptions_of_skills()` method and this method returns a tuple. In this tuple we have 2 items, first one is a dictionary -- in this dictionary, we have a skill id as a key and value as a corresponding skill_id's skill description but if a skill corresponding to a particular skill_id is deleted then its description value is None. And the second item in the tuple is a list of all deleted skill_ids. \r\n\r\nSo here, at line 1422 description can only be None when its corresponding skill does not exist and the main motive of this function is to Categorize skills so if a skill does not exist then there is no point to Categorize a non-existing skill.  \r\n\r\nMy solution -- We should skip those cases where skill does not exist, I mean skip those cases where the description value is none."", 'comment_created': datetime.datetime(2022, 8, 15, 10, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945611473, 'comment_body': 'same as above-- reason mentioned above', 'comment_created': datetime.datetime(2022, 8, 15, 10, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945611685, 'comment_body': 'Type variable is added', 'comment_created': datetime.datetime(2022, 8, 15, 10, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945611750, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 15, 10, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945615279, 'comment_body': 'If we see line 1455, then there this type is used. Basically, function `traverse_by_schema_and_convert` can accept different type of functions. So instead of Any, we decided to go with the Union of all the allowed functions that this `traverse_by_schema_and_convert` can take. ', 'comment_created': datetime.datetime(2022, 8, 15, 10, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945615531, 'comment_body': 'Reverted to previous, Optional[str]', 'comment_created': datetime.datetime(2022, 8, 15, 10, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945621285, 'comment_body': '> we have states with ""try again"" answer groups all the time and there\'s no issue with them being checkpoints\r\n\r\nYes agreed, but `""try again"" answer groups` do not contain None dest, right? Because I have downloaded some exploration and I found that `try again answer group` points to its own state, for eg:\r\n\r\nIf we have a state as \'home\' and we have a try-again answer group then its destination will also point to \'Home\'.\r\n\r\nThe only interaction that I have found which contains None destination is End-exploration and I think that one should not be a checkpoint ( if I\'m not wrong ).\r\n\r\nAlso, from this comment (https://github.com/oppia/oppia/pull/15827#discussion_r945570610), it seems to me that every anwser_group\'s dest should exist and default_outcome\'s dest should also exist if default_outcome exists. \r\n\r\nPlease correct me if I\'m wrong!!\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 15, 11, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945622612, 'comment_body': 'Reason mentioned above.', 'comment_created': datetime.datetime(2022, 8, 15, 11, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945622812, 'comment_body': '`if skill.created_on is None` exception is added. Basically, we create a summary for those models that are fetched from the datastore and every model that is fetched from the datastore should have created_on and last_updated values because of the update_timestamps method. ', 'comment_created': datetime.datetime(2022, 8, 15, 11, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945624696, 'comment_body': 'If we use `AcceptableChangeDictTypes or Union` then we have to use `assert isinstances` ( or some casts ) in the below places to narrow down the type of `new_value` from `Union` to a particular type.', 'comment_created': datetime.datetime(2022, 8, 15, 11, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945628981, 'comment_body': 'This Any is used in only one place which is:\r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/domain/exp_domain.py#L2087\r\nPTAL at the comment and docstring.', 'comment_created': datetime.datetime(2022, 8, 15, 11, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945658328, 'comment_body': ""Here, stories is the List of all completed stories and these completed stories are fetched using the `get_stories_by_ids` method,  by providing ids of completed stories (story_ids). This `_get_filtered_completed_story_summaries` method is a private method and we are calling this in only one place:\r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/domain/learner_progress_services.py#L1827\r\n\r\nAnd here if we see the argument -- it says it is a completed_story_ids, but this completed_story_ids are fetched from `activity_ids_in_learner_dashboard` which is fetched from the `get_learner_dashboard_activities` method.\r\n\r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/domain/learner_progress_services.py#L1771 \r\n \r\nAnd this `get_learner_dashboard_activities` method fetch `CompletedActivitiesModel` \r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/domain/learner_progress_services.py#L1682\r\nand from this model we get completed story_ids.\r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/domain/learner_progress_services.py#L1694\r\nNow, the question arise how we know that id in `completed story_ids` is a id of actually existing story's id.\r\n\r\nSo, to add story_id in completed_story_ids we have to call below method\r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/domain/learner_progress_services.py#L213\r\nThis method basically adds story_id in CompletedActivitiesModel. \r\n\r\nAnd this method is called in only one place:\r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/controllers/story_viewer.py#L240\r\nand before calling this method we are checking if story with story_id exists or not.\r\nhttps://github.com/oppia/oppia/blob/a6f1a20b482e41083cc223f4dafde60bdf7c27df/core/controllers/story_viewer.py#L193\r\n"", 'comment_created': datetime.datetime(2022, 8, 15, 12, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945680402, 'comment_body': 'Here, change is of type ExplorationChange which is a sub-class of BaseChange.\r\n\r\nEvery attribute ( other than cmd ) is created dynamically on instances of BaseChange class.\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/change_domain.py#L172\r\n\r\nAlso, here we defined the `__getattr__` method with return type str.\r\n\r\nhttps://github.com/oppia/oppia/blob/60f19a72f06d50363572e318cf7d6c56e820dc34/core/domain/change_domain.py#L283\r\n\r\nso every attribute which is created dynamically has type str. I did not altered the return type of `__getattr__` method because in codebase most of the attributes has str type. if we put union here then we have to use assertion in every place.', 'comment_created': datetime.datetime(2022, 8, 15, 12, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945681344, 'comment_body': 'Ditto for all places where we use assert to narrow down the type. ', 'comment_created': datetime.datetime(2022, 8, 15, 12, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945682327, 'comment_body': 'Done, wherever it is applicable!', 'comment_created': datetime.datetime(2022, 8, 15, 12, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 946347017, 'comment_body': ""Is your reasoning that (a) every outcome must have a destination from its moment of creation -- i.e. it's impossible for it not to have one, or (b) we have checked for it above?\r\n\r\nYour code comment implies (a) but your argument above implies (b), so I'm not quite sure what the reasoning is and, therefore, how to respond to it."", 'comment_created': datetime.datetime(2022, 8, 16, 5, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946348204, 'comment_body': ""I'm not sure I follow -- wouldn't you need to do that as well if you use Any? If so, it seems that AcceptableChangeDictTypes or Union constrains it better."", 'comment_created': datetime.datetime(2022, 8, 16, 5, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946350391, 'comment_body': ""There is [this comment](https://github.com/oppia/oppia/pull/15827#discussion_r945628981) which I can't seem to figure out how to reply to (that line is not changed in this PR but is still problematic?) -- so I'll reply to it here.\r\n\r\nI understand that Any is used in one function, but on looking at that function I think we need a Union type for the possible values of solutions and we should use that type there. Otherwise, importing Any at the top gives a blanket exception for anyone to use Any in the entire file."", 'comment_created': datetime.datetime(2022, 8, 16, 5, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946351416, 'comment_body': 'As discussed in chat, I think the right thing to do here is to not use `__getattr__` for dynamic creation. Instead, we should make different named types or classes similar to what is done in the frontend for the different cases, and use the correct type/class for each type of change. See extensions/interactions/customization-args-defs.ts', 'comment_created': datetime.datetime(2022, 8, 16, 5, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946351874, 'comment_body': 'It is misleading to call this variable ""status"". It\'s a boolean, whereas a status is an enum.\r\n\r\nDo something like exploration_is_public or exploration_is_private, perhaps. Please try to name your variables so that they clearly describe the meaning of what is being stored (otherwise, there will be more back-and-forth in code review).', 'comment_created': datetime.datetime(2022, 8, 16, 5, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946352129, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 16, 5, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946352782, 'comment_body': ""Why don't you filter the list for None before you pass it in, so that the type can be made non-optional and you don't need the assert? That way, the list generation can be done closer to the location which provides info on whether the story exists or not.\r\n\r\nTry to consider this sort of thing whenever you find you need to write an assertion and a long piece of reasoning justifying it."", 'comment_created': datetime.datetime(2022, 8, 16, 5, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946353966, 'comment_body': ""If this is the case then why isn't default_outcome _always_ not None? Based on this argument we should have non-None as part of the type."", 'comment_created': datetime.datetime(2022, 8, 16, 5, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946354233, 'comment_body': '...for when the skill was last updated.', 'comment_created': datetime.datetime(2022, 8, 16, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946354258, 'comment_body': '...for when the skill was last updated.', 'comment_created': datetime.datetime(2022, 8, 16, 5, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946355433, 'comment_body': ""I'm a little confused. Shouldn't the description always be a string (possibly the empty string) -- isn't that what happens on creation? It seems odd to change the description to None solely because of a deletion -- I would expect it to be still typed as str throughout because I don't think I see what None represents exactly (that couldn't be represented by, say, the `deleted=True` field)."", 'comment_created': datetime.datetime(2022, 8, 16, 5, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946358329, 'comment_body': 'After reading through traverse_by_schema_and_convert(), I don\'t think I buy that. I think it\'s fine to take the Union but I\'m not convinced that the union you have here is correct.\r\n\r\nFrom reading the function it looks to me like it deals entirely with ""plain Python constructs"" (dicts, strings, etc.). So why do you have domain objects like SubtitledHtml, etc. here?', 'comment_created': datetime.datetime(2022, 8, 16, 5, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946359761, 'comment_body': 'Apologies -- on this one, you are correct! Thank you for checking.\r\n\r\nI would just suggest rewording to ""States with a null destination can never be a checkpoint."" and similarly below. This is because checkpoints are states, and it\'s weird to say that a ""destination can\'t be a checkpoint"".', 'comment_created': datetime.datetime(2022, 8, 16, 5, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949274229, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 8, 18, 15, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949274356, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 8, 18, 15, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949277525, 'comment_body': ""because in exploration `default_outcome` can be None\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/exp_domain.py#L1043\r\nthis default_outcome passed to interaction class\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/exp_domain.py#L1060\r\n\r\n\r\n> Based on this argument we should have non-None as part of the type.\r\n\r\nNot possible because both question and exploration shares the same state_domain's interaction class. So, to fulfill the cases of exploration we have to mark `default_outcome` as None."", 'comment_created': datetime.datetime(2022, 8, 18, 15, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949277980, 'comment_body': 'changed to exploration_is_public', 'comment_created': datetime.datetime(2022, 8, 18, 15, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949278159, 'comment_body': 'changed to exploration_is_public', 'comment_created': datetime.datetime(2022, 8, 18, 15, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949282363, 'comment_body': ""The reason why the solution's correct_answer is marked as Any: The collection of values that 'correct_answer' can take is too complex. I mean we have List[Set[str]], List[List[str]], Dict[str, str], List[str], str, and int ( these are the mentioned ones in docstring and used in tests ).\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L453\r\nNow, the problem is that if we use Union of all these types then we have to use assert, and in some places, we have to use cast also.\r\n\r\nThe case where we have to use a cast:\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L584\r\nIf we do assert here like this `assert isinstance(solution_dict['correct_answer'], list)` then MyPy rule out all those type from Union where List is not used. So, it will assume that  solution_dict['correct_answer'] can be of any type from (List[Set[str]], List[List[str]], List[str]) so to narrow the type further we have to use cast. \r\n\r\nThe same behaviour can be observed here https://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L590\r\n\r\nIn exp_domain Any type is used at only 1 place: which is at https://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/exp_domain.py#L2091\r\nNow if we see this function, it can also accept different types of values, like\r\n\r\nhere, solution's correct_answer https://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/exp_domain.py#L2160\r\nAnd in here we are passing ruleInput's values that have it's own sub set of types\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/exp_domain.py#L2185\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L50\r\nSo, if do not use Any here then we have to use assert and casts again.\r\n\r\nI also agree with your concern that some can also use Any but i think for that we have linters.\r\n"", 'comment_created': datetime.datetime(2022, 8, 18, 15, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949285224, 'comment_body': 'Any is removed!', 'comment_created': datetime.datetime(2022, 8, 18, 15, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949286337, 'comment_body': 'I was pointing to point `(b) we have checked for it above?`\r\n\r\nComment is updated!!', 'comment_created': datetime.datetime(2022, 8, 18, 15, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949297785, 'comment_body': ""If your mean is that we should change the non-existing skill's description from None to '' (empty string) then I'm not sure about this change because the `get_descriptions_of_skills` function is directly used inside the controller and there we are not handling the case of none and passing the value to front-end directly ( if I'm not wrong ).\r\n\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/controllers/topic_editor.py#L347\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/controllers/topic_editor.py#L438\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/controllers/topic_viewer.py#L104\r\n"", 'comment_created': datetime.datetime(2022, 8, 18, 15, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949375196, 'comment_body': 'Here I think it accepts function signatures \r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L1363\r\nand `AcceptableConversionFnType` is Union of all those function that `conversion_fn` attribute can take.\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L1095\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L1225\r\nhttps://github.com/oppia/oppia/blob/4ba04d87b7e8aea3953287ae183c8e7d1c0031b6/core/domain/state_domain.py#L1273', 'comment_created': datetime.datetime(2022, 8, 18, 16, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949381459, 'comment_body': ""If I'm not wrong you mean we should do something like. below:\r\n```\r\nstories_with_none = story_fetchers.get_stories_by_ids(story_ids)\r\nstories = [story for story in stories if story is not None ]\r\n```\r\nand then use it further in the code, right ? If not, please explain!"", 'comment_created': datetime.datetime(2022, 8, 18, 16, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949390082, 'comment_body': 'Encountered some issues, working on them -- till then can you please take look at other comments?', 'comment_created': datetime.datetime(2022, 8, 18, 16, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949748569, 'comment_body': 'Why does this need to be defined at all here (since it is defined almost immediately after)?', 'comment_created': datetime.datetime(2022, 8, 19, 2, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949748860, 'comment_body': ""As usual, please explain more about why we can guarantee this for certain. Only having what's in this comment is insufficient."", 'comment_created': datetime.datetime(2022, 8, 19, 2, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949750814, 'comment_body': 'I think dropping the Any and using the assertions is actually appropriate here. Each of the examples you point to is conditioned by something relating to the interaction type, and the explanation for the assertion would be something like ""For interactions of type XYZ, the solution is always formatted as a ABC."".\r\n\r\nThat feels to me like a tighter condition than using Any. In general I think the priority is (a) don\'t use Any, (b) don\'t use assertions. (a) is more important than (b).', 'comment_created': datetime.datetime(2022, 8, 19, 2, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949754724, 'comment_body': ""No, that is not what I mean. I mean, why can't the callers of this function ensure that they pass in only items that are non-None, so that this function is guaranteed not to need to deal with this case?"", 'comment_created': datetime.datetime(2022, 8, 19, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949755541, 'comment_body': 'OK, please explain that in your comment.', 'comment_created': datetime.datetime(2022, 8, 19, 2, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949756054, 'comment_body': 'OK, thanks. But just to be clear, every time I say ""needs justification"", the comment should be in the code rather than in the PR review, so that other developers looking at the code in the future can see it too.', 'comment_created': datetime.datetime(2022, 8, 19, 2, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949756734, 'comment_body': 'No, what I mean is, where is a skill description ever set to None? Is there even a None case here?\r\n\r\nI also don\'t understand what you mean by a ""non-existing skill\'s description"". If a skill doesn\'t exist, how can it have a description (or any other field for that matter)?', 'comment_created': datetime.datetime(2022, 8, 19, 2, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949756927, 'comment_body': 'Replied above.', 'comment_created': datetime.datetime(2022, 8, 19, 2, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949759507, 'comment_body': 'Aha, I know what the issue is here. I think there are functions here which convert from ""customization arg that\'s all dict-ified"" to ""customization arg that uses only domain objects"", and vice versa. Unfortunately they look the same outwardly because the customization args in both cases just looks like a dictionary and the keys are similar. But there are really two types of things being represented here.\r\n\r\nI think the correct way to handle this is to define two types -- one for customization args which use domain objects for their inner values, and the other for customization args which use dicts throughout. That would bring clarity to which is which.', 'comment_created': datetime.datetime(2022, 8, 19, 3, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952657467, 'comment_body': 'In frontend, only Dict[str, str] is expected,\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/templates/domain/topic/subtopic.model.ts#L33\r\n\r\nSo, as per the discussion in chat I changed the implementation of `get_descriptions_of_skills` a bit. Now, assert is removed. PTAL!', 'comment_created': datetime.datetime(2022, 8, 23, 13, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952659650, 'comment_body': 'Callable types are separated into two subtypes -- `DictCustomizationArgsConversionFnTypes` and `DomainObjectCustomizationArgsConversionFnTypes`.', 'comment_created': datetime.datetime(2022, 8, 23, 13, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952660596, 'comment_body': 'Any is removed and assertions are added with suggested and proper comment PTAL!', 'comment_created': datetime.datetime(2022, 8, 23, 13, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952663672, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 8, 23, 13, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952664174, 'comment_body': 'I think i already did !', 'comment_created': datetime.datetime(2022, 8, 23, 13, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952686837, 'comment_body': ""The main motive of this function is to filter the stories into different categories. So, in the argument `story_summaries` we are accepting `List[Optional[story_domain.StorySummary]` and these are the story_summaries of story_ids that were passed to the `story_ids` argument.\r\nSo, if a story_summary is None then we are putting that story's id into the `nonexistent_completed_story_ids` list (line 1041) and if a story_summary is None then it's a sure thing that it's corresponding story also does not exists. \r\nSo, that is why assert is valid here. Because in this else clause story_summary exists and if story summary exists then it's a sure thing that story also exists. ( I'm saying this because when  I write `if story is None: raise` block then that block is never executed ).\r\n\r\nI hope I answered your question."", 'comment_created': datetime.datetime(2022, 8, 23, 14, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952759786, 'comment_body': 'Firstly, TypedDict is not going to work here because here we are accessing values as attributes, not keys.\r\n\r\nNow, If we define a new domain object for each changeCmd, then we have to define all attributes of that changeCmd as a class variable to tell the mypy type of each attribute ( we cannot use __init__ here because we are accepting values as dictionary ). -- following example will explain things even more clearly.\r\n\r\n```python\r\nclass TopicChange(change_domain.BaseChange):\r\n    # Other things of topic_change\r\n    pass ...\r\n\r\nclass DeleteSubtopicChangeCmd(TopicChange):    # this class represents `CMD_DELETE_SUBTOPIC` command.\r\n    subtopic_id: str          # This is the required attribute name, which is used while making `CMD_DELETE_SUBTOPIC` command.\r\n\r\nclass AddCanonicalStoryChangeCmd(TopicChange):\r\n    story_id: str              # This is the required attribute name, which is used while making `CMD_ADD_CANONICAL_STORY` command.\r\n\r\nclass UpdateSubtopicPropertyChangeCmd(TopicChange):\r\n    subtopic_id: str           # This is the required attribute names, which is used while making `CMD_UPDATE_SUBTOPIC_PROPERTY` command.\r\n    property_name: str\r\n    new_value: Union[ union of all subtopic property types ]\r\n    old_value: Union[ union of all subtopic property types ]\r\n\r\n\r\n.\r\n..\r\n.\r\n..\r\nsimilarly all other commands.\r\n\r\n```\r\nNow, Currently we are using assert only when we need some other type from str (whereas str is the majority type -- I mean most of the change commands have str type ) but after implementing the above feature  ( or similar ) we have to use assert every time because in that case ( taking an example of above lines --  mentioned in this thread ) `change` is a union of all Change command domain classes ( Union[DeleteSubtopicChangeCmd, AddCanonicalStoryChangeCmd, UpdateSubtopicPropertyChangeCmd, ...]) and to use the `change` we have to first bring it down to the correct type using assert otherwise it will make the more confusion and throw more errors.\r\n\r\n\r\nThis is the most feasible approach that I get ( Keeping in mind the available info that I have ) -- please take a look and let me know if you have any other approach or if I missed something!!\r\n', 'comment_created': datetime.datetime(2022, 8, 23, 15, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952764845, 'comment_body': '@seanlip @aasiffaizal PTAL!', 'comment_created': datetime.datetime(2022, 8, 23, 15, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952773365, 'comment_body': 'I think this issue is the same issue that we are discussing right now !!', 'comment_created': datetime.datetime(2022, 8, 23, 15, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 953452866, 'comment_body': 'an --> a', 'comment_created': datetime.datetime(2022, 8, 24, 7, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953453249, 'comment_body': 'I don\'t really understand what you mean when you say ""here we are returning conditionally"". Maybe you could explain this in plainer language?', 'comment_created': datetime.datetime(2022, 8, 24, 7, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953482027, 'comment_body': 'I\'m not sure about that. I think my comment still holds -- there needs to be at least a reason.\r\n\r\nIn this case wouldn\'t the new_value follow a specific type if it\'s an Outcome dict?\r\n\r\nWe should also rename one of the ""new_value"", I think, to avoid redefinition of the same thing.', 'comment_created': datetime.datetime(2022, 8, 24, 8, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953484545, 'comment_body': 'calling --> calls', 'comment_created': datetime.datetime(2022, 8, 24, 8, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953484664, 'comment_body': 'assuming --> assumes its', 'comment_created': datetime.datetime(2022, 8, 24, 8, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953484933, 'comment_body': 'So, because of this, ...\r\n\r\n\r\n(Similar comments to these three apply below as well.)', 'comment_created': datetime.datetime(2022, 8, 24, 8, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953485424, 'comment_body': 'Any --> any, ditto elsewhere. (You are using ""any"" in the colloquial sense here and not as the type ""Any"".)', 'comment_created': datetime.datetime(2022, 8, 24, 8, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953485930, 'comment_body': 'mypy --> MyPy, I commented on this elsewhere. Please fix throughout your PR(s).', 'comment_created': datetime.datetime(2022, 8, 24, 8, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953489532, 'comment_body': ""I'm not sure you have, actually, but I think my original question was wrong because I was confusing story_summaries with stories. Sorry about that.\r\n\r\nI think we will need to handle the None case here. This occurs when a story summary is passed in that does not have a corresponding story datastore model. Presumably this is not possible so we should raise an exception if we encounter it."", 'comment_created': datetime.datetime(2022, 8, 24, 8, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953491700, 'comment_body': 'I meant in the code -- ""Note that interaction.default_outcome can be None in the case of explorations but not for questions, which is why we need the assertion here."" or something like that.', 'comment_created': datetime.datetime(2022, 8, 24, 8, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953498977, 'comment_body': 'It seems to me like both the assert and the comment are still there.', 'comment_created': datetime.datetime(2022, 8, 24, 8, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953502548, 'comment_body': 'You should not need this? Each function type should take only one of the above types -- that was the point of the sepration.', 'comment_created': datetime.datetime(2022, 8, 24, 8, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953503330, 'comment_body': ""I'm not sure if this was addressed? Just flagging."", 'comment_created': datetime.datetime(2022, 8, 24, 8, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 954914580, 'comment_body': ""After yesterday's discussion, We'll add more details for this comment and the one below, right?"", 'comment_created': datetime.datetime(2022, 8, 25, 12, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 954915741, 'comment_body': 'ditto elsewhere comments require more details on why assert is used', 'comment_created': datetime.datetime(2022, 8, 25, 12, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 954919420, 'comment_body': ""```suggestion\r\n        # conditionally, which causes MyPy to throw a 'Missing return statement'\r\n```"", 'comment_created': datetime.datetime(2022, 8, 25, 12, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 954920631, 'comment_body': ""```suggestion\r\n                # Here 'migrate_rule_inputs_and_answers' method calls itself\r\n```"", 'comment_created': datetime.datetime(2022, 8, 25, 12, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 954920987, 'comment_body': ""```suggestion\r\n                # Here 'migrate_rule_inputs_and_answers' method calls itself\r\n```"", 'comment_created': datetime.datetime(2022, 8, 25, 12, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 955029967, 'comment_body': 'changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955043742, 'comment_body': 'Comment is changed PTAL!', 'comment_created': datetime.datetime(2022, 8, 25, 14, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955043921, 'comment_body': 'changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955043998, 'comment_body': 'changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955044081, 'comment_body': 'changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955044169, 'comment_body': 'changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955044252, 'comment_body': 'changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955047921, 'comment_body': ""> Each function type should take only one of the above types\r\n\r\nI'm not able to understand what you mean by this\r\n\r\n\r\nBecause `AcceptableConversionFnType` is defined for the argument of `traverse_by_schema_and_convert` ( and i think i point it out earlier also ).\r\n\r\nhttps://github.com/oppia/oppia/blob/9980b23608f22a227ea53adff5312b8d4dbfc342/core/domain/state_domain.py#L1351\r\n\r\n`AcceptableConversionFnType` is defined for the argument `conversion_fn`"", 'comment_created': datetime.datetime(2022, 8, 25, 14, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955049047, 'comment_body': 'comment changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955049194, 'comment_body': 'comment changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955049231, 'comment_body': 'comment changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955049299, 'comment_body': 'comment changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955053993, 'comment_body': 'As per the discussion in meeting comment is changed.', 'comment_created': datetime.datetime(2022, 8, 25, 14, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955054237, 'comment_body': 'comment changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955054643, 'comment_body': 'Comment is changed', 'comment_created': datetime.datetime(2022, 8, 25, 14, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955056129, 'comment_body': 'forgot to remove them , now Done!', 'comment_created': datetime.datetime(2022, 8, 25, 14, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955057756, 'comment_body': 'yeah this is addressed already', 'comment_created': datetime.datetime(2022, 8, 25, 14, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 955369592, 'comment_body': 'In the event that skill.created_on is the one that is None, is this error message accurate?', 'comment_created': datetime.datetime(2022, 8, 25, 20, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 955371874, 'comment_body': 'This seems odd though. Shouldn\'t we raise an error or return something when no condition applies (whatever makes sense)? I don\'t think an exception is warranted here, based on what you are describing.\r\n\r\nThe question is really whether ""no condition matches"" is expected or not. If it is an expected case then we should handle it gracefully. If it is not expected then we should throw an error.', 'comment_created': datetime.datetime(2022, 8, 25, 20, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 955372572, 'comment_body': ""I think that considering new_value to be a string is an error, and we have a way forward to address this, but let me know if that's not the case.\r\n\r\nDitto below (several places)."", 'comment_created': datetime.datetime(2022, 8, 25, 20, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 955390477, 'comment_body': ""Ah, sorry, I should have explained this more. I dug into this in a bit more detail, here is my thought process.\r\n\r\nThe traverse function is called in 3 places. Two of them, convert_html_in_interaction() and to_customization_arg_dict() (where the conversion_fn takes a SubtitledHtml/SubtitledUnicode value), seem fine. However, there is also a from_customization_arg_dict() (where the conversion_fn takes a dict value). \r\n\r\nIf you read the traverse_by_schema_and_convert() **docstring**, it seems inconsistent with what from_customization_arg_dict() is using it for (the conversion goes in the other direction and the dict wouldn't contain any domain objects).\r\n\r\nSo there seems to be a contradiction here, in terms of what the various functions are actually supposed to do, that needs to be resolved. This is the source of my confusion. Does this more specific context help clarify?"", 'comment_created': datetime.datetime(2022, 8, 25, 20, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 956614511, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 8, 27, 19, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 956614945, 'comment_body': 'Every call to this method is hardcoded and this method is defined under the private method `_convert_states_v41_dict_to_v42_dict`. So, I think if we put any kind of condition here then that condition is never going to be executed. And always going to throw backend coverage error.', 'comment_created': datetime.datetime(2022, 8, 27, 19, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 956615203, 'comment_body': ""This issue is fixed under PR #15958, but PR 15958 can only be available to review when this PR is merged because #15958 is built on top of this PR and shows this PR's changes as well."", 'comment_created': datetime.datetime(2022, 8, 27, 19, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 956615247, 'comment_body': 'Hope it sounds good!!', 'comment_created': datetime.datetime(2022, 8, 27, 19, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 956615541, 'comment_body': 'I think this issue now belongs to PR #15870 more than this PR because there we have discussed more about customization_args.', 'comment_created': datetime.datetime(2022, 8, 27, 19, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 956622512, 'comment_body': ""OK, yeah, I see that this is an inner function, and with any luck we'll actually have migrated everything to a version later than 42 by now. Let's leave it. I'll talk to the migration team to make sure everything is up to date and then we can delete this method altogether in the future."", 'comment_created': datetime.datetime(2022, 8, 27, 20, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 956622851, 'comment_body': ""OK, yup, I think that's fine -- thanks!"", 'comment_created': datetime.datetime(2022, 8, 27, 20, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '107b844df55cfe6f13e228fd8c34d5c6eeb73888', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ce744a2760b0be5188d949f7117c321f51b26f9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b8d65c4f3ae541b9b0951fb04082a77b7878fe', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '280f018ef123eafdd587cd94f9ad47fccd44f372', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afa4ccde287c94914bf8ff8f4879133b917801da', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2ec544b50ed8353ddbc50a1122c742e0ea669f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65b8b87ef766c9cb91fabed071ffd298c99a0ea0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce76214b3c655d5b943bca6ebf6ed567019744c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc83652c0ca85e0cb6530c61d2fc98a273690c5a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64d1a11f6a684080e45ea05d31fc553a8108bfa3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753c3e42f22efec2d4cdaf0a6a80f1380e648c42', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50f262d778423462a23cfa190fedded83cea005d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a3f5b9f87920a3eb551b7aa5fdb71e0b8aeae71', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb20c8f6c53b70fbd665f83ad85b2b4c92b5cc3b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '813b1d6782a26b6da6892e74d71893fdb4022a8f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20be74962b12f1fafaebdc5a1d74e9a60ae62d47', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73f3496a2e4b45948ab4307a28216cc1c309439', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6404eb7e3a005b23dc39aa37fe5e1f05267ec252', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1601ea38461246c214f6a39a92ee0b934060aa95', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537854840c707d88304bd44708f6988070f5c743', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '282c1decc74756fc8a959afe111d762746813397', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10ec99ecc00fdcf41fa2b39c11a75326829024d0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60be3f443737d36deb9290fd878a3417bf69a858', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '551eb786c33b62603813b513543abccebc1965ea', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22b0433f61eb1421884a2cbf9c20fafb336af4ce', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '575e9b073b64868109feaa06ab3e9916f58f6824', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '459e479bf2ec3db837bfbf23d5faa046d90798b2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7d11d1b745bca001cf3246d8f0ab0478ed36f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c33d146ec5e2bdd7b6e12675a97a6a2805f990b2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '587d3b595706f573f5dbfb32f4680842a97f04eb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f23b2009e69118a7ff575c4d04ac35053fe8707', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c65cef61c0b5cccd8bd130c3fa0aa3ab28a76145', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e5beb8c46301c98d492e7c12fa96198a40f3a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab55641058d7049a42cde0c6e0f163a30eb25ee6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa981836a3e3ce16b2ef8192ca2af01618d3fe29', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae951a7b08b4ea70e15ac892e893794b7aa3a8f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be303e2c2c32b041948a6b7f21ea9bee6e770756', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8674ad2654de7484ab3df72aba6e6c628a0ead', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f547b41036670e7b336a579db0a7267becdaf88f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02276fbcd5c63213e600c9f024e7ac2b59c090e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f54581c508db657a71230a5011aeb52c7e2935b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc223142db61116498cb97e1769055c85fd6ccbf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b257b1fce30e1e9cdda5e2d74d9ee051bfa407', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862d6cb616b832f030e9e15c88373a12ea600416', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adcfa6d54c5a3b1bf77aba51f16b636e913b8083', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf5e246e49826ae1785ee408220c84f2ffe9de4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33354c5e7fb39effb78b79f39cb35b6957d8bb67', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f4572aa6abbd9fae52ef1d236aa7fa3f121d3de', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e5f26bdb1d2872c44083e8d6d7f388ced75eac', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c41d1d6b5accac89cf0e2b7a80c0854ee13a88', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730cb162162c2359eda1f46c86e18213fe4a3b8d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '468619650e30baa1632873f6839130313bfcbf89', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '717daffe2f2f6dcd4d279138a1234178aa23be51', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2b238a60a6a817e2e05e9633a4fd2858ed0ccbf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea756ad778b542306f645521eea3990ad005456', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c53456a7d7d23dab962f3920c5437186229407ca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a5aaa48c3b6f6a27843974f6e7bde4c14ecb007', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6fef3d395e2f56c8b2c801f445bd05052f3a662', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0064deb8436f7b5cec29d39dda72d06d16346bca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97dd0df8bfd27f41cf9214327e578e7a335ee397', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0830ab0006348b5856512924a3d28b05a2d976d4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a085dd3226d1fee642d846b210f664be68b5f917', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ad0a97c62da5f2432f8a2f93f15a554df25fe4f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0599648a802a42dc3cdc5c24c3a825b42ba46c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef285c5ab590b38e8bb8f4e86e5816973722e57', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5625805c63763b72a81dc91c8131cb2d6585aa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d287771effcf432ee5c7f1038fd64c00ae9e4f1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c95eaf8f35a093eb08eeb39f5ff3ac6839238ff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '654feab429805999fcfb741b3976083fefe68198', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a2ab5cf85b9380a54bc64e216e41f7c73d9ac2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5662b17ea3ad13f15bb152a3d96b1105ce6c7438', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2229b19364655843a5b1212ca4e5f037d132426e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454deb5f072aec6373b9b43660821e8c040e4388', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3f382d2aff0cc8ce7f74d41d2c6c653b5bbcf8e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff4cc5a60131527db8d4cc527a3fa7aef9d522e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7aed98aefc4736b0936faf5bd00a7ffaa798e0e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0011197d61e2612b3f3479b083c549b5de3b1bf1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
951064446,Added Mypy type annotations to `validation_decorators.py` and `job_result_transforms.py`,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type annotations to the validation_decorators.py and job_result_transforms.py

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15501,https://api.github.com/repos/oppia/oppia/pulls/15501,https://github.com/oppia/oppia/pull/15501,closed,191,78,4,15,15,14,1,1,[{'name': 'PR: LGTM'}],2022-05-30 14:30:29+00:00,2022-06-23 14:44:52+00:00,2074463.0,"24 days, 0:14:23","[{'comment_id': 886383551, 'comment_body': ""The explanation for why I am using cast here:\r\n\r\nConsidering the above case, The return type of `references_of(p)` is `Set[str]` and the return type of `tuple(references_of(p))` is Tuple[str, ...] but it should be `Tuple[str]`. Similar goes for `tuple((p, tuple(references_of(p)))` becasue the expected return type is `Dict[str, Tuple[Tuple[ModelProperty, Tuple[str]]]]` but mypy assumes its type as `Dict[str, Tuple[Tuple[ModelProperty, Tuple[str, ...]], ...]]`  and throws incompatble return type error.\r\n\r\nAlso, the behavior of python's tuple function is weird with the MyPy library. Because in general if  we do the following:\r\n```\r\nstring_set: Set[str] = { 'a', 'ab'}\r\ntuple_str: Tuple[str] = tuple(string_Set)\r\n```\r\nThen mypy throws an error because it assumes that the type of `tuple_Str` is `Tuple[str, ...]` but we are providing the type `Tuple[str]`. To fix this issue we can either use the ignore statement or we can use the cast as done above in the code.\r\n\r\n(references: \r\n1. https://stackoverflow.com/questions/47948965/how-do-i-convert-a-list-to-a-tuple-without-angering-mypy\r\n\r\n2. https://github.com/python/mypy/issues/7509)\r\n\r\nI also tried to refactor the code but the problem remains the same:\r\n```\r\n        result_dict = {}\r\n        per_kind = []\r\n        for kind, properties in id_referencing_properties_by_kind_of_possessor:\r\n            for p in properties:\r\n                reference_of_value = tuple(references_of(p))\r\n                dict_entry = (p, reference_of_value)\r\n                per_kind.append(dict_entry)\r\n            result_dict[kind] = tuple(per_kind)\r\n        return result_dict\r\n```\r\n\r\nHere also the type of `tuple(references_of(p))` is considered as `Tuple[str, ...] ` not `Tuple[str]. \r\n"", 'comment_created': datetime.datetime(2022, 6, 1, 7, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 887149360, 'comment_body': '```suggestion\r\n_MODEL_TYPES_BY_BASE_CLASS: Dict[\r\n    Type[base_models.BaseModel],\r\n    FrozenSet[Type[base_models.BaseModel]]\r\n] = {\r\n```', 'comment_created': datetime.datetime(2022, 6, 1, 17, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 887161701, 'comment_body': ""> Also, the behavior of python's tuple function is weird with the MyPy library. Because in general if we do the following:\r\n> \r\n> ```\r\n> string_set: Set[str] = { 'a', 'ab'}\r\n> tuple_str: Tuple[str] = tuple(string_Set)\r\n> ```\r\n> \r\n> Then mypy throws an error because it assumes that the type of `tuple_Str` is `Tuple[str, ...]` but we are providing the type `Tuple[str]`. To fix this issue we can either use the ignore statement or we can use the cast as done above in the code.\r\n\r\nBut in this example it actually makes sense that the value is `Tuple[str, ...]`, the ideal case would be `Tuple[str, str]` but not `Tuple[str]`.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 1, 18, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 887164703, 'comment_body': 'Should we add our own stubs?', 'comment_created': datetime.datetime(2022, 6, 1, 18, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 887170786, 'comment_body': 'Again, should we add stubs?', 'comment_created': datetime.datetime(2022, 6, 1, 18, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 887695096, 'comment_body': ""ohh really sorry, actually I misinterpreted the concept of Tuple[str, ...].\r\nI was assuming that the `Tuple[str, ...]` is a tuple of string value and any other type value ( because of `...` in the type ). But in actuality `Tuple[str, ...]` points to the tuple where each value is of type string. That's why previously I'm assuming that the return type is wrong `Dict[str, Tuple[Tuple[ModelProperty, Tuple[str, ...]], ...]]` according to the docstring.\r\n\r\nBut now the concept is clear and the cast is removed!!"", 'comment_created': datetime.datetime(2022, 6, 2, 8, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902666456, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 6, 21, 14, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902671044, 'comment_body': 'I tried but there is too little info to write stubs for apache_beam, also some parts of the library do not contain type info. Even there are no stubs available in Typesheds. So, shall we add TODO here ?', 'comment_created': datetime.datetime(2022, 6, 21, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902671964, 'comment_body': 'I tried but there is too little info to write stubs for apache_beam, also some parts of the library do not contain type info. Even there are no stubs available in Typesheds. So, shall we add TODO here ?', 'comment_created': datetime.datetime(2022, 6, 21, 14, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 902952270, 'comment_body': 'Okay, TODO makes sense as it would be quite hard to write the types for so complicated class.', 'comment_created': datetime.datetime(2022, 6, 21, 18, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903606901, 'comment_body': '```suggestion\r\n        model_property.ModelProperty, Set[str]\r\n```', 'comment_created': datetime.datetime(2022, 6, 22, 11, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 903636732, 'comment_body': 'Done!!', 'comment_created': datetime.datetime(2022, 6, 22, 11, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 904958253, 'comment_body': '```suggestion\r\n    _DO_FN_TYPES_BY_KIND: Dict[str, Set[Type[beam.DoFn]]] = (\r\n        collections.defaultdict(set)\r\n    )\r\n```', 'comment_created': datetime.datetime(2022, 6, 23, 12, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 904969682, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 23, 12, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '29e62a219b973ab97ad586c1017df4843cae50fc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12f739e2efb652bf689b61ad6fe94f1b551a89f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f678eb7f9c18e11d0200083ba728d827f13a701', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30b8a8636a12bce2c27ec5962cb7286573f4665', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4513437ae3912a31116a79959fe4f58ab941cc1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b2ee0aabfb9a6800eabb6396bf964be7bf1deed', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed183f37509ac57682f93f93164f9b1265b5647a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3309ada2fd00dbea685dce621d175831553196b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b4130baeededd2c85bdcadfaa028a470badd63', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '547dabbdaa9299f6bf42524708850edec1458e9e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25bfbf03b5b3ccdaaae063f60ca74a6183092581', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30e406170c726178a9ccdff9cea5b29c626f2572', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de1cc6e18f2c62af5902a9bef64527bb4d11b2e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3000f21cb4f4d00bdd6414f8a89ed7f801038c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd3a64121bd686abfdb8e2f09dd20640783fcdee', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
988916365,Added Mypy type annotations to the files of `core/jobs/transforms/validation` directory.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy static type annotations to jobs/transforms/validation*

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI in any of the files listed in rtl_css.py (i.e, those that have
a separate .rtl.css file for styling), make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15687,https://api.github.com/repos/oppia/oppia/pulls/15687,https://github.com/oppia/oppia/pull/15687,closed,1251,414,32,25,15,20,0,1,[],2022-07-06 14:54:59+00:00,2022-07-12 09:34:17+00:00,499158.0,"5 days, 18:39:18","[{'comment_id': 915055317, 'comment_body': 'Changed it from List to sequence, because in other places we are providing a sub-type of this type and List cannot allow subtyping due to its invariant property!. So, to allow subtyping  i used Sequence.', 'comment_created': datetime.datetime(2022, 7, 6, 16, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 915953304, 'comment_body': 'Should we store this inside a type variable?', 'comment_created': datetime.datetime(2022, 7, 7, 14, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 915953611, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 7, 7, 14, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 915956329, 'comment_body': 'Ditto save this into a type variable.', 'comment_created': datetime.datetime(2022, 7, 7, 14, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 916510889, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2022, 7, 8, 6, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 917204555, 'comment_body': '```suggestion\r\n        self, entity: ModelInstanceType\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 1, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 917204936, 'comment_body': '```suggestion\r\n        self, _: base_models.BaseModel\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 1, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 917205081, 'comment_body': ""I think we can take away this ignore by replacing the parameter name with '_'\r\n\r\nDItto elsewhere"", 'comment_created': datetime.datetime(2022, 7, 9, 1, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 917205097, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2022, 7, 9, 1, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 917205400, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2022, 7, 9, 1, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 917253149, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 9, 10, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917253188, 'comment_body': 'Done wherever it is applicable!!', 'comment_created': datetime.datetime(2022, 7, 9, 10, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917253207, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 9, 10, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917253367, 'comment_body': '`_` approach is working fine for test files but it is throwing an lint error for main files ( non-test files ).', 'comment_created': datetime.datetime(2022, 7, 9, 10, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917253566, 'comment_body': ""There are too many types like this, so as per the discussion I'm not introducing a type variable here!"", 'comment_created': datetime.datetime(2022, 7, 9, 10, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917253675, 'comment_body': 'the reason is mentioned above!', 'comment_created': datetime.datetime(2022, 7, 9, 10, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 917259718, 'comment_body': 'Removed!!', 'comment_created': datetime.datetime(2022, 7, 9, 12, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 918047751, 'comment_body': ""Let's keep it only for tests then"", 'comment_created': datetime.datetime(2022, 7, 11, 15, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 933895663, 'comment_body': '@sahiljoster32 input_model can also be of the type BlogPostSummaryModel not just BlogPostModel.  (line numbers 97-99). Can you please fix this?', 'comment_created': datetime.datetime(2022, 7, 30, 21, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 934135802, 'comment_body': 'As per the offline discussion, Rijuta is going to update the type in his PR.\r\nThanks!!', 'comment_created': datetime.datetime(2022, 8, 1, 4, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': 'ece555366bcd4c2940f7caf9257aefed242e9b75', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1675fed0e22f9bcab6ef00f4eea0035a14022da7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f3a4ca4ff98e6539e14466e90dd63ca6ae33a5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd60426dea44522f7e8b7c28361594f5934deca50', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8549856273b91a9468be43f6f688cf82343faa2d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21f04a519cab329dfa7ad049fd039998457efba7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf6b33d7f5edd099929bb037a0854379b06c3ee7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2f661eb82a6895b0b9c5b5f22ebdf83a7641d7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834c633ea49af33aa2db3d5cff13dc63e53397c4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28a94c9c8fd7fd1c02ad57b6631a60840bb093fc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c95984abfd61534b4206f9a8510c3c27ef1bbb2c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19462d17eafc3ce775394e7ce22eba5f22b73e97', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8649f5656bf477e3f48d5d5635914a7b3acf2bc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b74175d4781f008c40dabfd3e83c13889faf218', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f17c941c8d29180f4f3cc4363693c596b3a27c63', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91764982d35a5ee6758173f0ffc1605c70a88857', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90b09c0102f2688311333ab84ccbef3eb85fa9c1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e843724f5c4183dff652982fd763ea0c4922903', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9793bca42d9f56cf8c6bc097aabc07570e9f1adc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f510f753ab31a0b9ede86f0c6c592ab49a3e00b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0bb47869f1d379d42bbd447fd7e3483df800e29', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '643ad4995e2f153a79c74d72c66573dfd2ab51f2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9e8f1772e70d71cb61177f87bee76dbc646aa0d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c4d1d87cbd69e42f33a1cd27ffd0cee97904b23', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aaff03d9a1abf22de4612203b833a8d43c3a26e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
996423555,Added Mypy type annotations to the files of `core/jobs/batch_jobs` directory.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy static type annotations to core/jobs/batch_jobs*


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15711,https://api.github.com/repos/oppia/oppia/pulls/15711,https://github.com/oppia/oppia/pull/15711,closed,594,270,34,31,17,21,1,1,[{'name': 'PR: LGTM'}],2022-07-14 09:16:20+00:00,2022-07-27 09:16:03+00:00,1123183.0,"12 days, 23:59:43","[{'comment_id': 922691095, 'comment_body': '```suggestion\r\n(collection_models, feedback_models, user_models) = (\r\n    models.Registry.import_models([\r\n        models.NAMES.collection, models.NAMES.feedback, models.NAMES.user\r\n    ])\r\n)\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 15, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922691194, 'comment_body': '```suggestion\r\n(collection_models, feedback_models, user_models) = (\r\n    models.Registry.import_models([\r\n        models.NAMES.collection, models.NAMES.feedback, models.NAMES.user\r\n    ])\r\n)\r\n```\r\n\r\nSame as above', 'comment_created': datetime.datetime(2022, 7, 16, 15, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922691362, 'comment_body': ""Isn't the previous formatting better?"", 'comment_created': datetime.datetime(2022, 7, 16, 15, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922691420, 'comment_body': '```suggestion\r\n(email_models, feedback_models, user_models) = models.Registry.import_models([\r\n    models.NAMES.email, models.NAMES.feedback, models.NAMES.user\r\n])\r\n```\r\n\r\nDitto as above', 'comment_created': datetime.datetime(2022, 7, 16, 15, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922691618, 'comment_body': '```suggestion\r\n(exp_models, recommendations_models) = models.Registry.import_models([\r\n    models.NAMES.exploration, models.NAMES.recommendations\r\n])\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 15, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922691676, 'comment_body': '```suggestion\r\n(exp_models, recommendations_models) = models.Registry.import_models([\r\n    models.NAMES.exploration, models.NAMES.recommendations\r\n])\r\n```\r\n\r\nDitto as above', 'comment_created': datetime.datetime(2022, 7, 16, 15, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 922697058, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 16, 16, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922697067, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 16, 16, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922697117, 'comment_body': 'Done!\r\nPrevious style is added!', 'comment_created': datetime.datetime(2022, 7, 16, 16, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922697138, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 16, 16, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922697162, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 16, 16, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 922697164, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 7, 16, 16, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923306669, 'comment_body': ""Wouldn't just `Final` work here?"", 'comment_created': datetime.datetime(2022, 7, 18, 12, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923306963, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 7, 18, 12, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923319513, 'comment_body': 'Should a TODO be added here?', 'comment_created': datetime.datetime(2022, 7, 18, 12, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 923680144, 'comment_body': 'Ah, I think this is not for testing type checking so I think TODO is not applicable here!!', 'comment_created': datetime.datetime(2022, 7, 18, 18, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 923681268, 'comment_body': '`Final` only works for read-only values ( constants ),\r\nWe cannot use `Final` here because `JOB_CLASS` is already defined in super class and we just reassigning it here.', 'comment_created': datetime.datetime(2022, 7, 18, 18, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924266586, 'comment_body': 'For which purposes it is then?', 'comment_created': datetime.datetime(2022, 7, 19, 9, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 924267720, 'comment_body': 'I see', 'comment_created': datetime.datetime(2022, 7, 19, 9, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 924392954, 'comment_body': 'I think you are right because in line 152 we are performing a test `broken_skill_is_not_migrated` due to wrong type of value.', 'comment_created': datetime.datetime(2022, 7, 19, 11, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 924393216, 'comment_body': 'Comment is changed, Now TODO is added.', 'comment_created': datetime.datetime(2022, 7, 19, 11, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '1d81ba40ca327211629ad02c3c3e0ab0aa0d7750', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '509f464e6f480ff277bee203dbf5f0983a59622c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45881f4bb26d64356c9202d9133922a18164f671', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27ff35b3800635b465068ebb8bb863b632a0bca9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aac4e6883e24d43fe49113ab065c188e28417f8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25d80810a9fe98ac727ea6f9bdccf8696c1f4746', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101cca67d320938e8e706aa34a718fc80c91f17a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b82e009695933ee633cb6e7c051c0d2befb88d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd062570419b5332905da9decd452aef88e32647f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb0c30968554d8a1bca6b4941d7950cb2b421ba', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cc0aa92dcf8d86f5028bec2f5c65d29508090c7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '048deaedbcb3df1d811c5fec377346c394278b4c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a36fc0d1b4bb0d0432f2f42b46829e4d05e94e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e700c59679fa679f68938a938c017f716973e793', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f178b37b9c03f24b3625d88d7def7317c76e77fd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb52aee985ed8ce87dc4008e387fc7921695194', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae87fc1df8f85c220e98dd3aa2e727a4c7af1e6e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e4cd5ca8f35c2e3b6b5a424c5aede2705a6979', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a083feb30d739035d6235d97da909a16e75a5136', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3176af25bfb9181a89fe7c842cad4537b2a7f470', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf4175ebce927f7ccda0017ec4bf04dc956e17de', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31f61ba1d0a815d83dfd81d0ac7a3076b9c9a33a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c78f50102b83000a0c4f5121933a903d2af924', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b73a6e772845a6c96c4944a7bcad7bbd1cbe193', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c339b2cbdef28e1bad117f2cc916aa706a224349', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db40e260fcea892ff8e6357ce6115d622a69d76', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a87318903e6f5c924afa862483aac2b0d374631a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b2fc1515ce27ae9f1d4866c57c883cbe1c72df', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd731206c3943d94d18ed52b46ff40dcda282379e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a18e40250921f5d3391b0d59d865560a96d39d8b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3110c2bf07a704086ec733954913e8400b184061', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1021765666,Added Mypy type annotations to `core/test`,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type infos to the following files.
 - test_utils.py
 - gae_suite.py
 - tests/load_tests/feedback_thread_summaries_test.py
 - tests/build_sources/extensions/base.py


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,15864,https://api.github.com/repos/oppia/oppia/pulls/15864,https://github.com/oppia/oppia/pull/15864,closed,3463,2665,172,41,21,82,2,1,"[{'name': 'PR: LGTM'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-08-09 17:02:39+00:00,2022-08-24 07:29:16+00:00,1261597.0,"14 days, 14:26:37","[{'comment_id': 942160935, 'comment_body': 'Here, I removed the raise keyword because inside `self._generate_index_not_found_error` method we are already raising an error without any additional conditions. \r\nhttps://github.com/oppia/oppia/blob/8679f6fda167a87ec316a3d7ccc207b179987b62/core/tests/test_utils.py#L237', 'comment_created': datetime.datetime(2022, 8, 10, 8, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 942212068, 'comment_body': ""This method has 2 overloads, an overload that has `args and kwargs` is expected to return Any type but overload that does not contain `args and kwargs` returns the expected type. \r\n\r\nIf we remove `args and kwargs` from here then we don't need ignore and extra stub class ( defined at the starting of this file  ~ _AssertRaisesContext )"", 'comment_created': datetime.datetime(2022, 8, 10, 9, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 942216265, 'comment_body': 'TaskqueueServicesStub can only accept `GenericTestBase` but here we are providing self (`AppEngineTestBase`) which is a supertype of  GenericTestBase. So, due to this conflict in types, MyPy throws an error. Thus to avoid the error I used cast here.', 'comment_created': datetime.datetime(2022, 8, 10, 9, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 942280632, 'comment_body': ""Here, `sys.modules` have `dict[str, ModuleType]` type \r\nhttps://github.com/sahiljoster32/typeshed/blob/266fed2f831580d0d46ee904f07543a3dca9523e/stdlib/sys.pyi#L44\r\nbut the ModulType that is referenced here is wrong. Ideally, it should points to types.pyi's ModuleType\r\n\r\nhttps://github.com/sahiljoster32/typeshed/blob/266fed2f831580d0d46ee904f07543a3dca9523e/stdlib/types.pyi#L330\r\n\r\nbut it is pointing to inbuilt's ModuleType\r\nhttps://github.com/python/cpython/blob/5a97a93be086c19343df4352672bfda32f6cbd0c/Lib/types.py#L51\r\n\r\nbecause of this MyPy is not able to recognise __path__ attribute. Can you guys PTAL! \r\n\r\n\r\nAlso, correct me if I'm wrong or missing something !!"", 'comment_created': datetime.datetime(2022, 8, 10, 10, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 942334850, 'comment_body': 'I think the files in _core/tests/data_ and in _core/tests/build_sources_ can be ignored as they are just used for testing the tests.', 'comment_created': datetime.datetime(2022, 8, 10, 11, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942340748, 'comment_body': 'I think the assert is not needed, I think MyPy handles that from now.', 'comment_created': datetime.datetime(2022, 8, 10, 11, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942342078, 'comment_body': ""```suggestion\r\n        with self.assertRaisesRegex(\r\n            Exception, 'No file exists for the given file name'\r\n        ):\r\n            test_utils.mock_load_template('invalid_path')\r\n\r\n    def test_raises_error_if_no_user_name_exists_with_strict_true(self) -> None:\r\n        with self.assertRaisesRegex(\r\n            Exception, 'No user_id found for the given email address'\r\n        ):\r\n            self.get_user_id_from_email(\r\n```"", 'comment_created': datetime.datetime(2022, 8, 10, 11, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942346230, 'comment_body': 'What are the implementation purposes?', 'comment_created': datetime.datetime(2022, 8, 10, 11, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942349210, 'comment_body': ""```suggestion\r\n            raise Exception(\r\n                'No user_id found for the given email address: %s' % email\r\n            )\r\n```"", 'comment_created': datetime.datetime(2022, 8, 10, 11, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942351637, 'comment_body': ""Can't we change the type that `TaskqueueServicesStub` accepts?"", 'comment_created': datetime.datetime(2022, 8, 10, 11, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942353142, 'comment_body': 'Can we remove the `args` and `kwargs` then?', 'comment_created': datetime.datetime(2022, 8, 10, 11, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942355903, 'comment_body': 'Should maybe `ListStream` inherit from `IO`?', 'comment_created': datetime.datetime(2022, 8, 10, 11, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942357841, 'comment_body': 'Could some other set function be used for this?', 'comment_created': datetime.datetime(2022, 8, 10, 11, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 942401507, 'comment_body': 'Not sure what is happening here, I think you would need to investigate.', 'comment_created': datetime.datetime(2022, 8, 10, 12, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 945168963, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 16, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945169319, 'comment_body': 'Directories `core/tests/build_sources` and `core/tests/data` are moved to `EXCLUDED_DIRECTORIES` list.', 'comment_created': datetime.datetime(2022, 8, 13, 17, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945169373, 'comment_body': 'Done, this test is removed!', 'comment_created': datetime.datetime(2022, 8, 13, 17, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945169399, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 17, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945169429, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 17, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945169476, 'comment_body': 'Update method is used!', 'comment_created': datetime.datetime(2022, 8, 13, 17, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945171249, 'comment_body': 'No, we cannot do this because in `TaskqueueServicesStub` we are defining `self._test_base` https://github.com/oppia/oppia/blob/cc8f6d73d492d77aada65e73d7f94d258746185d/core/tests/test_utils.py#L817\r\nand the type of `self._test_base` needs to be `GenericTestBase`, because in method `_task_handler` we using `get_new_csrf_token` and `post_task` methods on `self._test_base` and these methods are only defined in `GenericTestBase`.\r\nhttps://github.com/oppia/oppia/blob/cc8f6d73d492d77aada65e73d7f94d258746185d/core/tests/test_utils.py#L846', 'comment_created': datetime.datetime(2022, 8, 13, 17, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945171985, 'comment_body': 'working on it!', 'comment_created': datetime.datetime(2022, 8, 13, 17, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945173135, 'comment_body': ""I have tried and after doing this I get a strange error:\r\n`Cannot instantiate abstract class 'ListStream' with abstract attributes '__enter__', '__exit__', ... and 'writelines' (14 methods suppressed)  [abstract]`\r\nIn search for the error, I found that this is a bug ( reference: https://github.com/python/mypy/issues/3115 )"", 'comment_created': datetime.datetime(2022, 8, 13, 17, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945174426, 'comment_body': 'basically, we are implementing a state whose dest is None. Also, the comment is changed!', 'comment_created': datetime.datetime(2022, 8, 13, 18, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945240233, 'comment_body': 'The comment is also added!\r\n', 'comment_created': datetime.datetime(2022, 8, 14, 7, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945350666, 'comment_body': 'But then there is a mistake in the code, right? As we are passing `AppEngineTestBase` which should not work anyway? ', 'comment_created': datetime.datetime(2022, 8, 14, 22, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 945352108, 'comment_body': ""Ah, you might actually need to provide the implementation of these abstract methods in the `ListStream` class, as we probably don't use these most of the implementation could just do `pass`"", 'comment_created': datetime.datetime(2022, 8, 14, 22, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 945907969, 'comment_body': 'Done and comment is added PTAL!', 'comment_created': datetime.datetime(2022, 8, 15, 16, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945922370, 'comment_body': 'After some investigation, I found that the Module type was pointed wrongly "" its\'s not oppia\'s codebase issue"".\r\n\r\nI think it\'s a bug of MYPY: https://github.com/python/mypy/issues/1422\r\n\r\nBut someone pointed at the last comment that after upgrading the MYPY it is fixed.', 'comment_created': datetime.datetime(2022, 8, 15, 16, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945942969, 'comment_body': ""https://github.com/oppia/oppia/blob/5e1fde53bce397f00e7f047c7fca18e2e1088a85/core/jobs/job_test_utils.py#L49\r\n\r\nIn the above line we are inheriting from AppEngineTestBase:\r\nand when we call Init of PipelinedTestBase class\r\nhttps://github.com/oppia/oppia/blob/5e1fde53bce397f00e7f047c7fca18e2e1088a85/core/jobs/job_test_utils.py#L63\r\n\r\n\r\nThen below self was provided as a AppEngineTestBase not generictestbase ( which prevent us from using assert )\r\nhttps://github.com/oppia/oppia/blob/5e1fde53bce397f00e7f047c7fca18e2e1088a85/core/tests/test_utils.py#L1464\r\nSo that's why we have to use cast here."", 'comment_created': datetime.datetime(2022, 8, 15, 16, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945944401, 'comment_body': '> But then there is a mistake in the code, right\r\n\r\nMaybe yes but not sure 100 percent.', 'comment_created': datetime.datetime(2022, 8, 15, 16, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 946162301, 'comment_body': 'This class is only used in the test? Regardless, can drop ""Test"" from the name .', 'comment_created': datetime.datetime(2022, 8, 15, 21, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 946163419, 'comment_body': 'Why does this need to be added here?', 'comment_created': datetime.datetime(2022, 8, 15, 22, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 947035533, 'comment_body': '> This class is only used in the test? \r\n\r\nYes\r\n\r\n> can drop ""Test"" from the name\r\n\r\nDone!', 'comment_created': datetime.datetime(2022, 8, 16, 17, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947050590, 'comment_body': 'Here `exploration.states` is a Dict whose keys are `state_names` and values are `state_domain.State` objects.\r\n\r\nThe `update_content` is one of the methods of `state_domain.State` object, but since state_domain is not fully type annotated yet  and `update_content` is defined in state_domain so `update_content` is also not type annotated yet.\r\n\r\nSo, until we typed the whole state_domain.py ( `update_content` method also -- because it is a part of state_domain ) we added this ignore statement -- to suppress the error because the suggestion_services_test.py file is annotated and any untyped call in the typed file throws an error.\r\n\r\nwe are not adding any comment here, because this ignore is going to be removed soon. ', 'comment_created': datetime.datetime(2022, 8, 16, 17, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947061477, 'comment_body': 'I hope I answered your question.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947222593, 'comment_body': 'Okay, add a TODO and issue for me to fix this (as I said I will be upgrading to latest MyPy in middle of September).', 'comment_created': datetime.datetime(2022, 8, 16, 20, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947226068, 'comment_body': 'Hmm, can you try moving the initialization to `GenericTestBase` then?', 'comment_created': datetime.datetime(2022, 8, 16, 20, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947231912, 'comment_body': 'Gotcha. Makes sense. Thanks for the detailed explanation!', 'comment_created': datetime.datetime(2022, 8, 16, 20, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 947253507, 'comment_body': ""```suggestion\r\n    # The files in 'build_sources' and 'data' directories can be ignored while\r\n    # type checking, because these files are only used as resources for the tests.\r\n```"", 'comment_created': datetime.datetime(2022, 8, 16, 21, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947863053, 'comment_body': 'Done!, PTAL! ', 'comment_created': datetime.datetime(2022, 8, 17, 12, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947863699, 'comment_body': 'TODO is created - https://github.com/oppia/oppia/issues/15913\r\nAlso, the comment is added at this place.', 'comment_created': datetime.datetime(2022, 8, 17, 12, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947952558, 'comment_body': ""After doing these changes I'm failing the backend tests, can please take a look at once?"", 'comment_created': datetime.datetime(2022, 8, 17, 13, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948546211, 'comment_body': 'Why is there an ignore here?', 'comment_created': datetime.datetime(2022, 8, 18, 0, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948546451, 'comment_body': ""same as above. Isn't this file already typed?"", 'comment_created': datetime.datetime(2022, 8, 18, 0, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948547081, 'comment_body': '```suggestion\r\n            **_: str\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 0, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948547184, 'comment_body': '```suggestion\r\n            **_: str\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 0, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948549979, 'comment_body': ""should we update the docstring? the argument definition doesn't show that its `Optional`"", 'comment_created': datetime.datetime(2022, 8, 18, 0, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948551147, 'comment_body': '```suggestion\r\n    def establish_auth_session(\r\n        cls, _: webapp2.Request, __: webapp2.Response\r\n    ) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 0, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948551193, 'comment_body': 'Update the docstring as well', 'comment_created': datetime.datetime(2022, 8, 18, 0, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948551276, 'comment_body': '```suggestion\r\n    def destroy_auth_session(cls, _: webapp2.Response) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 0, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948551851, 'comment_body': '```suggestion\r\n        cls, _: webapp2.Request\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 0, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948552706, 'comment_body': '```suggestion\r\n        def function_that_always_returns(*_: str, **__: str) -> Any:\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 0, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948553331, 'comment_body': '```suggestion\r\n        def function_that_always_raises(*_: str, **__: str) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 0, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948727739, 'comment_body': 'Hmm, interesting I think I remember this issue, please add a TODO and an issue for me to investigate this.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948733673, 'comment_body': ""```suggestion\r\n        with self.assertRaisesRegex(\r\n            Exception, 'No user_id found for the given email address'\r\n        ):\r\n```\r\n\r\nditto above"", 'comment_created': datetime.datetime(2022, 8, 18, 7, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948736885, 'comment_body': '```suggestion\r\n        self, \r\n        index_name: str, \r\n        document: Dict[str, str], \r\n        id: Optional[str] = None  # pylint: disable=redefined-builtin\r\n    ) -> ExistingIndexDict:\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 7, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948745787, 'comment_body': 'Not needed anymore.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948756950, 'comment_body': 'Missing explanation for the `Any`. Ditto below', 'comment_created': datetime.datetime(2022, 8, 18, 7, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948980976, 'comment_body': 'Before this file was expected to be covered with type checking but after some discussion, we are now not covering these files because these files are just for testing.\r\n\r\nA small discussion regarding this can be found here https://github.com/oppia/oppia/pull/15864#discussion_r942334850', 'comment_created': datetime.datetime(2022, 8, 18, 10, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948981900, 'comment_body': ""Same reason as above, that's why mypy is not throwing an error for these files and i missed it."", 'comment_created': datetime.datetime(2022, 8, 18, 10, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982037, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982100, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982399, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982466, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982523, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982571, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982654, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982713, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982815, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982906, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948982974, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948983068, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 8, 18, 10, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949022388, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 18, 11, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949023374, 'comment_body': ""> same as above. Isn't this file already typed?\r\nyes, these are typed."", 'comment_created': datetime.datetime(2022, 8, 18, 11, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949024848, 'comment_body': 'TODO is filed ( #15922  ). Also, TODO is added inside the comment.', 'comment_created': datetime.datetime(2022, 8, 18, 11, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949220714, 'comment_body': 'Can you properly parentheses the `or` or `and`? ', 'comment_created': datetime.datetime(2022, 8, 18, 14, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949228196, 'comment_body': 'This is quite weird can we refactor this and maybe use `math.inf` for infinity?', 'comment_created': datetime.datetime(2022, 8, 18, 14, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949242226, 'comment_body': ""This file doesn't need to be typed (but feel free to keep it typed)."", 'comment_created': datetime.datetime(2022, 8, 18, 14, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949472475, 'comment_body': 'Did some changes PTAL!', 'comment_created': datetime.datetime(2022, 8, 18, 18, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949472734, 'comment_body': 'refactored and tests are passing\r\n', 'comment_created': datetime.datetime(2022, 8, 18, 18, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949473022, 'comment_body': ""ok i'll keep that as it is"", 'comment_created': datetime.datetime(2022, 8, 18, 18, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '3c939a7a3f6be773b81fb67508f137f3bf3653eb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2260adb39f2b9320a12ca0c8e6f404b7e4122298', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7edb503eb6fa672dc1870c73b021a2c2e62be7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa72c1c7505054577d999ab97b3a1239663c7f07', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfefd41643f7314488682e3a8de653d92eb17a5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80cb9adb186d196d7f974b0f070ccde895b1b499', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59ec2b1dd33f64c21db4684042cf9eab09647690', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bdf5d9bab44993271c37c45242f24b29fdb8a51', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337d477a14090e86f1ac925e651241bf94f3cf03', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20fb3f5987e4e2709a6efefa97e09d0c104b4411', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '104acd6fc94dfcbd11dc556ad88786a47778ea48', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35a0af0941100594b00a8c091a34168ee5b1f0a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af855e83198c647b7def0488ce5994f2bbe6fbb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e56e87c85a3c2d8e3bd900304f0cf77e23c502', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b230832d6a5d08f1beb6c66a419be299497ab6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20fb455ef93eb9f2b27002e1ecea1384336b8f7f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56f7c3eab263d6c451401726ebfbcb42d4ba2e3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0be3e05a7d47f183edb3c9fda3a263a6bbfd6cf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2181c265f16bc94c9759b6bf1666d33b404a2785', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48d3a1073c933aecfa868b0c6b2bfed2759dec7f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b88ae75350f70317448ce6238db3dab291ad94b0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a3ae5c0ebce99ca2f39201a7c817c7f2c3c0de', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6a62021804aeff35d1ad36911e5d25986740873', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eec47e892539dd2c2d0c6db9322684dde9bc8dc3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73ce9561f20687d3bf1d3f925bbcddc0b4badcc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e203892f980f102154d39a3eee305b80f023fed', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a1cd25a09dbb3aea2c928b1e3433d888cc0673', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f86fb72d716c2e0fdf6a4153576f8364c954c9ac', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04c11d58452d7ac5157865a25cffe8139aafb7a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5736d26421ec0dab88ab46915a76bf66866cdc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08dc5347bc3124d6e5377758f8fd3a3bf103d2f3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89b5e9f6b75e7c240d8bf4c6203f1a110f38d72f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '782938cd3d8c40ca36ec94bd4d4f159116d33cea', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158bdb61aa297fc659af39748d037f24fbb2b5c8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eea3f292f5edc6195128d896a485f887d6946fc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d740d90633f31c083d291f54e91b008e414399', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49eb8ddd97cad296b46b8541326656182e8b1635', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '293b01345f20da1ceafea72e59991e576395b246', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3202e9fd7a994cf13051e5d028ff729cb7720c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c090ee6db02d5ab64c8332bb637e343f240b7e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dca6f5929c4da89356fccd3630f881c045bd8352', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1027758850,Added linters for exceptional types in backend type annotations,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds linters which do the following:
 - Throws an error if exceptional types ( Any, cast, and object ) are used without proper comments.
 - Throws an error if type-ignores are used without proper comment.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

Proof of linter that it is working fine:
1. Linter throw errors when exceptional types are used without proper comments - [Proof1](https://github.com/oppia/oppia/actions/runs/3058992518/jobs/4935845330#step:8:751), [Proof2](https://github.com/oppia/oppia/actions/runs/3060179831/jobs/4938386601#step:8:755)
2. Linter throw an error when MyPy `type: ingore` is used without proper comment: [Proof](https://github.com/oppia/oppia/actions/runs/3059652660/jobs/4937277922#step:8:756)

Proof that linters are working fine when every exceptional type and mypy ignore is documented - [Proof](https://github.com/oppia/oppia/actions/runs/3058363501/jobs/4934488717)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,15905,https://api.github.com/repos/oppia/oppia/pulls/15905,https://github.com/oppia/oppia/pull/15905,closed,5494,2811,183,128,44,429,0,2,[],2022-08-16 15:12:53+00:00,2022-09-17 07:33:53+00:00,2737260.0,"31 days, 16:21:00","[{'comment_id': 947199884, 'comment_body': 'Hmm, so this basically goes through every file and checks that for every ignore we have an explanatory comment above it? The only issue I see is smth like <explanatory comment><30 unrelated lines><the actual type ignore>, should we limit the number of lines in between the comment and the ignore?', 'comment_created': datetime.datetime(2022, 8, 16, 19, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947200640, 'comment_body': 'Ditto for the lint checks below', 'comment_created': datetime.datetime(2022, 8, 16, 20, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947202161, 'comment_body': ""```suggestion\r\n        type_ignore_comment_regex = r'^# Here we use MyPy ignore because'\r\n```"", 'comment_created': datetime.datetime(2022, 8, 16, 20, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947203654, 'comment_body': 'Slight repetition of code, can it be separated into a helper function?', 'comment_created': datetime.datetime(2022, 8, 16, 20, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947205366, 'comment_body': ""Isn't `outside_function_def` basically `!any_present_in_function_def`? If not then I think I need more explanation and better variable names."", 'comment_created': datetime.datetime(2022, 8, 16, 20, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947206986, 'comment_body': 'Also should we have similar check for `object` (like whether it is inside function definition or not)? I would imagine the `Any` and `object` check being basically the same except for the import part.', 'comment_created': datetime.datetime(2022, 8, 16, 20, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948769062, 'comment_body': '> Hmm, so this basically goes through every file and checks that for every ignore we have an explanatory comment above it?\r\n\r\nYes\r\n\r\n> The only issue I see is smth like <30 unrelated lines>, should we limit the number of lines in between the comment and the ignore?\r\n\r\nDone, Now only 10 lines of gaps are allowed.\r\n', 'comment_created': datetime.datetime(2022, 8, 18, 7, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948769107, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 18, 7, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948770309, 'comment_body': 'Here we are checking for every token and maintaining some variables ( multi_line_import, single_line_import ) to keep track the status of import. If we shift these lines inside a function then every time we call the function it will reinitialize all these variables and lose the previous data of import.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948774093, 'comment_body': ""> Also should we have similar check for object\r\n\r\nDone!\r\n\r\n> Isn't outside_function_def basically !any_present_in_function_def \r\n\r\n\r\nNo, `any_present_in_function_def` signifies that any type was present in function signature or not, whereas `outside_function_def` signifies that linters are in function signature scope or not -- if linters are in function signature block then it is False otherwise True.\r\n\r\nbecause we are throwing errors only when we are outside of the function signature. By this I mean, if we encountered an exceptional type inside function signature then there we are just keeping a record that yeah we have an exceptional type inside function signature and when we come outside of the function signature then we throw an error.\r\n\r\nsuppose \r\n```python \r\n\r\nsome_any_dict: Dict[str, Any] = {} # Here we throw error directly because we are outside of function signature. \r\n\r\n# some other content of the modules.\r\n\r\ndef foo(arg: Any) - > None:      # So, (Here we are not throwing an error, because we are in function signature but we are keeping a record that we have exceptional type inside signatures so as soon as we come out of the signature we throw an error ) Here we encountered expectational type inside args-section (explained in code comment ) so, any_present_inside_arg_section is True and arg-section belongs to function signature so any_present_in_function_signature is also true.\r\n   pass   # Here we throw an error that any was encountered inside function signature.\r\n\r\ndef foo1(arg1: str) -> str:\r\n    var: Any = None   # Here we are throwing an error because we are in function definition not function signature.\r\n    return 'hi'\r\n\r\ndef foo3(arg3: Any) -> None:    # here it will not throw an error but keep track that yeah we have an any in signature.\r\n   vasr: Any = None                   # Here it will throw 2 errors one for itself because any was used inside variable vasr and one for function signature's Any.\r\n\r\n\r\n```\r\n\r\n`if outside_function_def` basically means that we are not in the function signature. Because for function signatures we are checking separately as mentioned above. \r\n\r\nBtw outside_function_def changed to outside_function_signature_block and `any_present_in_function_def` is changed to  ` any_present_in_function_signature`. \r\n"", 'comment_created': datetime.datetime(2022, 8, 18, 7, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949136295, 'comment_body': '```suggestion\r\n                        line_num <= comment_line_number + 10\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 13, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 949136921, 'comment_body': 'I think this is more readable', 'comment_created': datetime.datetime(2022, 8, 18, 13, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 949158733, 'comment_body': ""Instead of having `outside_` prefix, which brings in negation. Should we rename it to `function_signature_block`?\r\n\r\nSo this line becomes \r\n`function_signature_block = False`?\r\nWouldn't that make it easier to read?\r\n\r\nditto elsewhere `outside_` prefix is used\r\n"", 'comment_created': datetime.datetime(2022, 8, 18, 13, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 949162597, 'comment_body': ""Isn't `multi_line_import` necessarily negation of `single_line_import` ?\r\n\r\nIf not, I guess we'll need better naming of the variables."", 'comment_created': datetime.datetime(2022, 8, 18, 13, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 949172089, 'comment_body': ""Grouping these to a dict or any mutable type and passing it to a helper function wouldn't be a problem, right?"", 'comment_created': datetime.datetime(2022, 8, 18, 14, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 949328320, 'comment_body': 'Also put the 10 into a constant', 'comment_created': datetime.datetime(2022, 8, 18, 15, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949966973, 'comment_body': 'import checks are separated into a helper function, PTAL!', 'comment_created': datetime.datetime(2022, 8, 19, 8, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949969605, 'comment_body': '> I think this is more readable\r\n\r\nDone!\r\n\r\n> Also put the 10 into a constant\r\n\r\nDone!', 'comment_created': datetime.datetime(2022, 8, 19, 8, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949971948, 'comment_body': ""> Isn't multi_line_import necessarily negation of single_line_import ?\r\n\r\nNo, Because multi_line_import is true only when linters are in multi line import's scope:\r\n```\r\nfrom typing import (\r\n    < multi line import scope>\r\n)\r\nbecause here we are excluding any exceptional type."", 'comment_created': datetime.datetime(2022, 8, 19, 8, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949975116, 'comment_body': 'I think `outside_function_signature_block` signifies that we are not in the signature block. \r\n\r\nBut if we change to `function_signature_block` and it is False, then I think it sounds more like a function signature block does not exist. \r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2022, 8, 19, 9, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 949976404, 'comment_body': 'Also name is changed PTAL!', 'comment_created': datetime.datetime(2022, 8, 19, 9, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950003714, 'comment_body': '```suggestion\r\n        """"""Custom pylint checker which allows only those MyPy type ignores that\r\n        are properly documented by a comment in the code. The comment must \r\n        be close to the actually ignore.\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 9, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 950004543, 'comment_body': 'Can we use dict for string these values or namedtuple?', 'comment_created': datetime.datetime(2022, 8, 19, 9, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 950021747, 'comment_body': 'We also have this code for `Any`, again, please separate this into helper function.', 'comment_created': datetime.datetime(2022, 8, 19, 9, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 950023958, 'comment_body': 'This is also pretty similar to this part of `Any`, please try to think how you can deduplicate the code where possible.', 'comment_created': datetime.datetime(2022, 8, 19, 9, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 950704042, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 20, 14, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950704095, 'comment_body': '> Can we use dict for string these values\r\n\r\nNow we are using Dict -- PTAL!', 'comment_created': datetime.datetime(2022, 8, 20, 14, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950704186, 'comment_body': 'Done, Now `Any` and `object` both calling the same helper function.', 'comment_created': datetime.datetime(2022, 8, 20, 14, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950705043, 'comment_body': ""The cast cannot be combined with the same helper function that we are using for Any and object, because:\r\n\r\n1. We are not checking for the presence of cast in the function signature explicitly, whereas in Any and object we are checking for the function signature explicitly.\r\n2. In Any and object we are excluding some cases but in cast, only the import case is excluded and for every other case we are throwing an error.\r\n3. Logic of cast is a bit simple whereas the logic of object and Any is a bit complex as compared to cast. If we combine all together then it makes cast's logic complex too."", 'comment_created': datetime.datetime(2022, 8, 20, 15, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950905311, 'comment_body': 'Should we keep this in feconfig?\r\n\r\nSeems like we are using the same value for `ExceptionalTypesCommentChecker ` as well', 'comment_created': datetime.datetime(2022, 8, 21, 21, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 950906930, 'comment_body': ""Isn't this statement a repetition from above?\r\nshould we move it to a helper function?"", 'comment_created': datetime.datetime(2022, 8, 21, 22, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 950907295, 'comment_body': ""How about `is_function_signature_block`? \r\n\r\nIt's just that outside sounds like negation."", 'comment_created': datetime.datetime(2022, 8, 21, 22, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 951066247, 'comment_body': 'If we see the `if clause` there we have different conditions but yeah both of the `else clauses` have similar code so i pushed it into the helper function PTAL!', 'comment_created': datetime.datetime(2022, 8, 22, 6, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 951066436, 'comment_body': '> Should we keep this in feconfig?\r\n\r\nI think `ALLOWED_LINES_OF_GAP`  is related to only this file, so instead of transferring it to the feconf I put it on the top of the file PTAL!', 'comment_created': datetime.datetime(2022, 8, 22, 6, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952136133, 'comment_body': 'Note: passes --> pass an', 'comment_created': datetime.datetime(2022, 8, 23, 4, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952136327, 'comment_body': ""any --> Any\r\n\r\nThat said, shouldn't this be 'union of typedicts'? I don't think I buy that this can't be reduced from Any."", 'comment_created': datetime.datetime(2022, 8, 23, 4, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952136680, 'comment_body': ""Same thing (and in fact that's in line with the TODO comment that was here previously)."", 'comment_created': datetime.datetime(2022, 8, 23, 4, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952137039, 'comment_body': 'Drop ""because""', 'comment_created': datetime.datetime(2022, 8, 23, 4, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952137517, 'comment_body': 'This one seems odd. If it actually ends up being None then what does casting it into a BaseSnapshotMetadataModel do?', 'comment_created': datetime.datetime(2022, 8, 23, 4, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952137635, 'comment_body': 'Er, no, same concern as above.', 'comment_created': datetime.datetime(2022, 8, 23, 4, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952137878, 'comment_body': 'Suggest replacing ""..."" with BaseModel (assuming that\'s accurate), ditto below. Otherwise the connection between the old / new type is less clear.', 'comment_created': datetime.datetime(2022, 8, 23, 4, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952138324, 'comment_body': 'typed --> type\r\n\r\nand maybe add a comma after ""properties""\r\n\r\nDitto below (3 places in this file, possibly more elsewhere).', 'comment_created': datetime.datetime(2022, 8, 23, 4, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952138621, 'comment_body': ""the --> to\r\n\r\nAlso let's be consistent everywhere: MyPy instead of mypy. (Please fix elsewhere if needed.)"", 'comment_created': datetime.datetime(2022, 8, 23, 4, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952139006, 'comment_body': 'Same notes as above.', 'comment_created': datetime.datetime(2022, 8, 23, 4, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952139235, 'comment_body': ""Needs more explanation (as usual) about how we know for certain it can't be None, and some discussion about why asserting rather than erroring is the right thing to do."", 'comment_created': datetime.datetime(2022, 8, 23, 4, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952139678, 'comment_body': 'Same thing, needs more justification.', 'comment_created': datetime.datetime(2022, 8, 23, 4, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 952434189, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 23, 10, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952434786, 'comment_body': 'No we cannot use Union here because:\r\n```\r\nclass A:\r\n   def foo(x: Union[str, int, bool]) -> None:\r\n         pass\r\n\r\nclass B(A):\r\n     def foo(x: int) -> None:  # Here Mypy throw an override error because function signature does not match with base class.\r\n         pass\r\n\r\nclass C(A):\r\n     def foo(x: Union[str, int]) -> None:  # Here Mypy throw an override error because function signature does not match with base class.\r\n         pass\r\n\r\n```\r\n\r\nSimilar reason goes for return values.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952436184, 'comment_body': ""Since this method is defined in base class and redefined in other subclasses -- the above reasoning is also applied here.\r\n\r\nI'm not sure why previously we have This todo here because BasseModel does not have any domain object specifically."", 'comment_created': datetime.datetime(2022, 8, 23, 10, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952436488, 'comment_body': 'No, we cannot because we are checking for Any type comment with the help of `Here we use type Any because`.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952436617, 'comment_body': 'In the for loop just above it, we are already checking if these values are none or not. -- comment is also updated', 'comment_created': datetime.datetime(2022, 8, 23, 10, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952436711, 'comment_body': 'Since this method is defined in base class and redefined in other subclasses -- the above reasoning also applied to here\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 23, 10, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952436911, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 23, 10, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952436960, 'comment_body': 'Done everywhere it is applicable !!', 'comment_created': datetime.datetime(2022, 8, 23, 10, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952437015, 'comment_body': 'Done everywhere it is applicable !!', 'comment_created': datetime.datetime(2022, 8, 23, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952437065, 'comment_body': 'mypy is fixed !!', 'comment_created': datetime.datetime(2022, 8, 23, 10, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 953001014, 'comment_body': 'Comment is updated!', 'comment_created': datetime.datetime(2022, 8, 23, 18, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 953001307, 'comment_body': 'assert is removed and exception is added ', 'comment_created': datetime.datetime(2022, 8, 23, 18, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 953423928, 'comment_body': ""I'm kind of confused by this comment. If we return None and something calls X.lists then aren't we just waiting for an error to happen?"", 'comment_created': datetime.datetime(2022, 8, 24, 7, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953425041, 'comment_body': 'it\'s --> its\r\n\r\nBut perhaps better: ...and this Dict has no constraints on its values.\r\n\r\n(since it is not clear what ""it"" refers to in the original sentence).', 'comment_created': datetime.datetime(2022, 8, 24, 7, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953427090, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 24, 7, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953427303, 'comment_body': 'payload --> the payload', 'comment_created': datetime.datetime(2022, 8, 24, 7, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953427481, 'comment_body': 'Any --> as Any', 'comment_created': datetime.datetime(2022, 8, 24, 7, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953430088, 'comment_body': ""I'm not sure I buy the override error argument, because it would make sense to override if a class was more specific than its parent. However, since this is on BaseVersionedModel I think it's OK to keep it generic.\r\n\r\nAlso I think you didn't address the typo I mentioned initially."", 'comment_created': datetime.datetime(2022, 8, 24, 7, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953430676, 'comment_body': 'Then update the sentence, because currently it isn\'t grammatically correct (""because to ..."")', 'comment_created': datetime.datetime(2022, 8, 24, 7, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953434673, 'comment_body': 'You missed ""the"" --> ""to"" in my previous comment.\r\n\r\nPlease pay attention to detail and make sure you\'ve addressed everything before marking something as ""Done"". Otherwise we have unnecessary review cycles.', 'comment_created': datetime.datetime(2022, 8, 24, 7, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 953435691, 'comment_body': 'I\'m not sure you can block a data export because of this. Can you treat it in a similar way to ""user_model is None"" above -- i.e. just omit the problematic data?', 'comment_created': datetime.datetime(2022, 8, 24, 7, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 954511961, 'comment_body': 'this Dict has no constraints on its values.\r\n\r\n added', 'comment_created': datetime.datetime(2022, 8, 25, 5, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954511978, 'comment_body': 'changes are done', 'comment_created': datetime.datetime(2022, 8, 25, 5, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954511995, 'comment_body': 'change `payload --> the payload` is added\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 25, 5, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954512011, 'comment_body': 'change `Any --> as Any` is added', 'comment_created': datetime.datetime(2022, 8, 25, 5, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954512027, 'comment_body': 'change `""the"" --> ""to""` is added', 'comment_created': datetime.datetime(2022, 8, 25, 5, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954512402, 'comment_body': 'As per the discussion, now we are skipping the None case.', 'comment_created': datetime.datetime(2022, 8, 25, 5, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954512586, 'comment_body': 'Updated PTAL!', 'comment_created': datetime.datetime(2022, 8, 25, 5, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954512736, 'comment_body': 'change `any --> Any` is added', 'comment_created': datetime.datetime(2022, 8, 25, 5, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954513090, 'comment_body': 'Optional[] is added to the return value and comment is added in one place.', 'comment_created': datetime.datetime(2022, 8, 25, 5, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954513219, 'comment_body': 'PTAL! and let me know if that comment is ok or not?', 'comment_created': datetime.datetime(2022, 8, 25, 5, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 954626188, 'comment_body': 'Docstring is not updated.', 'comment_created': datetime.datetime(2022, 8, 25, 7, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 954627889, 'comment_body': 'No, do ""if client is None, raise exception"", etc.\r\n\r\nRemember, you can only make these sorts of arguments if the verification has already happened in the same function. Developers may modify the code in the future. We have talked about this before.', 'comment_created': datetime.datetime(2022, 8, 25, 7, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 954631293, 'comment_body': 'You still need to fix the name of your test, I think.', 'comment_created': datetime.datetime(2022, 8, 25, 7, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 954929603, 'comment_body': ""Instead of unpacking the dict and packing it again at the end of the function, can't we just update the values in the dict directly in the lines below?"", 'comment_created': datetime.datetime(2022, 8, 25, 12, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 954943754, 'comment_body': ""this if clause can be a helper function right?\r\n\r\n```py\r\ndef _comment_present_within_scope(self, line_number, comment_line_number):\r\n    return line_number <= comment_line_number + ALLOWED_LINES_OF_GAP_IN_COMMENT\r\n```\r\n\r\nSomething like this, so that all the conditions can use this?\r\nFeel free to change the helper function's name to something meaningful"", 'comment_created': datetime.datetime(2022, 8, 25, 13, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 955491461, 'comment_body': '(It might also make more sense to pass `client` into the function directly if the caller has already done the verification.)', 'comment_created': datetime.datetime(2022, 8, 25, 23, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963042634, 'comment_body': ""@seanlip @aasiffaizal can any of you please help me with this?\r\n\r\nBasically, the situation here is that we are expecting `device_context`, `platform_type`, `report_submission_timestamp_sec`, and many other keys but these keys are not returned by any of the to_dict methods. So, My query is that from where these values are coming from I tried to search for these keys but the max I found is that these values are used in tests but there is no method that returns these keys in the dictionary. \r\n\r\nTaking an example of `platform_type` key:\r\n\r\nAppFeedbackReport class's to_dict() method return a dict with `platform` key\r\nhttps://github.com/oppia/oppia/blob/d4b06399ad2859df6917c5e18ce9024e452351d0/core/domain/app_feedback_report_domain.py#L106\r\nBut on other hand AppFeedbackReport class's from_dict method expecting a `platform_type` key.\r\nhttps://github.com/oppia/oppia/blob/d4b06399ad2859df6917c5e18ce9024e452351d0/core/domain/app_feedback_report_domain.py#L231\r\n\r\neven if we look at the docstring i think they are pointing to same dict -- please correct me If I'm missing something!!"", 'comment_created': datetime.datetime(2022, 9, 5, 16, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963044259, 'comment_body': 'Docstring updated!', 'comment_created': datetime.datetime(2022, 9, 5, 16, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963044362, 'comment_body': '> It might also make more sense to pass client into the function directly if the caller has already done the verification\r\n\r\nDone ', 'comment_created': datetime.datetime(2022, 9, 5, 16, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963044425, 'comment_body': 'Name changed', 'comment_created': datetime.datetime(2022, 9, 5, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963047261, 'comment_body': 'I have tried this approach and after this approach, the code looks more complicated because the dictionary name and variable names are long so they usually exceed the 80 char limit. Also, we are accessing the same variable sometimes so I think it is better to use a variable instead of accessing Dict again and again. ', 'comment_created': datetime.datetime(2022, 9, 5, 16, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963048477, 'comment_body': 'I have some thoughts on this:\r\n1. Passing variables just for 1 line of code does not sound good to me.\r\n2, In the future, If we need to change the logic for any of the exceptional types ( cast, any, and object) then we have to take down this function again. ', 'comment_created': datetime.datetime(2022, 9, 5, 16, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963053659, 'comment_body': 'Done name changed to is_function_signature_block', 'comment_created': datetime.datetime(2022, 9, 5, 16, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963074225, 'comment_body': ""```suggestion\r\n            # Here we use type Any because this method returns the return value\r\n            # of the swapped function, and that value can be of any type.\r\n```\r\n\r\nA lot of these comments have grammar issues. Please proofread and fix the comments you're changing, especially the new ones you're adding"", 'comment_created': datetime.datetime(2022, 9, 5, 17, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963076955, 'comment_body': 'Why is this indented?', 'comment_created': datetime.datetime(2022, 9, 5, 18, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963080383, 'comment_body': 'What is the plan for these? Should we aim to eventually add type comments to them, or leave them in the exclusion list indefinitely?', 'comment_created': datetime.datetime(2022, 9, 5, 18, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963080700, 'comment_body': 'What are the criteria of a ""proper comment""? Either explain in the error message or provide a link to documentation', 'comment_created': datetime.datetime(2022, 9, 5, 18, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963080813, 'comment_body': 'These ""established patterns"" should be documented', 'comment_created': datetime.datetime(2022, 9, 5, 18, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963081077, 'comment_body': 'So here there are two different concepts: `type: ignore` and `type ignore comment`. These names are confusingly similar', 'comment_created': datetime.datetime(2022, 9, 5, 18, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963081686, 'comment_body': ""The strings in `EXCLUDED_DIRS_HAVING_IGNORE_TYPE_COMMENTS` are not regexes, so I don't think `re.search` is correct here. Instead, you could add the path to the root `oppia/` directory to `directory` and then use `startswith()`"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963081856, 'comment_body': 'Can you just return early at this point?', 'comment_created': datetime.datetime(2022, 9, 5, 18, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963082317, 'comment_body': '```suggestion\r\n        must be close to the actual ignore.\r\n```\r\n\r\nI think this is another example of why we better names to distinguish the documentation comments from the `type: ignore` comments', 'comment_created': datetime.datetime(2022, 9, 5, 18, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963082596, 'comment_body': 'A regex seems like overkill here. Why not just do a substring search?', 'comment_created': datetime.datetime(2022, 9, 5, 18, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963083169, 'comment_body': 'I think this hasn\'t been joined to the frontend yet, which is why there\'s a bit of difficulty here. This is what is supposed to happen:\r\n\r\n- Feedback dicts may be submitted through either web or Android.\r\n- The fields in each dict will depend on what the platform_type of the dict is. Web feedback dicts have certain fields and Android feedback dicts have certain fields.\r\n\r\nI also think that from_dict() in app_feedback_report_domain.py is not well-named. It is not the usual from_dict() method which converts a dict of the current object into the corresponding domain object -- instead, what this method is doing is taking a ""report dict"" from outside and constructing the general domain object for it. So perhaps the best thing to do there is rename from_dict() to from_submitted_feedback_dict() or similar, to clarify that these are different concepts.\r\n\r\nDoes this help?', 'comment_created': datetime.datetime(2022, 9, 5, 18, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963083441, 'comment_body': 'What if the `type: ignore` is the second ignore in the comment? For example `# pylint disable=no-docstring type: ignore[no-untyped-call]`', 'comment_created': datetime.datetime(2022, 9, 5, 18, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963083937, 'comment_body': 'This \'ignore\' seems slightly odd to me. Normally in mypy if you subclass `dict` and possibly add some more functionality, what is the ""correct"" way to specify the type? It seems like this would be a standard use case so there should be some way of handling subclassing (I guess the comment doesn\'t really justify why what we\'re doing here is particularly special).', 'comment_created': datetime.datetime(2022, 9, 5, 18, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963084275, 'comment_body': 'Instead of saying ""the above method"", specify the name specifically, in case other methods get added in the future.', 'comment_created': datetime.datetime(2022, 9, 5, 18, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963085180, 'comment_body': ""What if you had the following all close together in the code:\r\n\r\n1. A documentation comment justifying a `type: ignore` comment\r\n2. A documentation comment justifying a `type: ignore` comment\r\n3. A `type: ignore` comment\r\n\r\nWe should raise an error for the first documentation comment, but I don't think this code will"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963085535, 'comment_body': ""This constant shouldn't be changed, so why do you need to deepcopy it?"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963085963, 'comment_body': 'ditto: explain what a ""proper comment"" is', 'comment_created': datetime.datetime(2022, 9, 5, 18, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963086187, 'comment_body': ""ditto: `re.search` doesn't seem correct here since `directory` is really just a path, not a regex"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963086641, 'comment_body': 'There is actually a proper structure for these which you can infer from the implementation -- see my comment explaining.', 'comment_created': datetime.datetime(2022, 9, 5, 18, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963086689, 'comment_body': ""This isn't the checker, it's a method of the checker. Also, please double-check the grammar\r\n\r\nThere are grammar issues with other docstrings too. Please proofread them"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963086899, 'comment_body': ""I think you need stronger typing here -- you'll want a TypedDict that properly represents the entry point domain object."", 'comment_created': datetime.datetime(2022, 9, 5, 18, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963087759, 'comment_body': ""Instead of checking whether you're currently inside an import, is it possible to check whether `cast` is being called? That seems simpler. e.g. we care about instances of `cast(...)` but not instances of just `cast`"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963087764, 'comment_body': ""Shouldn't newest_report_creation_timestamp have an optional type, then (since this looks valid)? If so, then maybe add some notes to the docstring for that to explain the circumstances in which None can arise."", 'comment_created': datetime.datetime(2022, 9, 5, 18, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963088332, 'comment_body': 'It seems to me that you can avoid all of this by writing the following:\r\n\r\n```\r\nif job_class is None:\r\n    if job_name is not None:\r\n        job_class = ...\r\n    else:\r\n        raise ValueError(...)\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 18, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963088588, 'comment_body': 'Can you shorten the variable/key names? I agree that unpacking and repacking the dictionary seems overly complicated', 'comment_created': datetime.datetime(2022, 9, 5, 18, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963089194, 'comment_body': ""set_multi\r\n\r\nI'm a bit confused by the rest of the comment. Maybe explain why we are passing an object?"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963089384, 'comment_body': ""silent --> silence\r\n\r\nActually I think this is a bit of a problem. Can we just avoid adding 'name' to the dict in the first place? The point of a TypedDict is that the keys are fixed, and this seems to violate that, with the result that no one will know what the schema of the TypedDict is supposed to be when they look at it in the codebase, which is actually the thing we're trying to fix with typing."", 'comment_created': datetime.datetime(2022, 9, 5, 18, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963089758, 'comment_body': 'Here and elsewhere, I find the name of this kind of variable confusing. It reads as if now the type comment is not present, but I don\'t think that\'s what you mean. Instead, the type comment is ""no longer pending"" / ""has been resolved"" because we\'ve found it\'s matching exceptional type', 'comment_created': datetime.datetime(2022, 9, 5, 18, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963089933, 'comment_body': ""Same thing, if we are modelling this as a TypedDict can we avoid putting the key we don't want into it in the first place?"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963090243, 'comment_body': ""Isn't `ALLOWED_LINES_OF_GAP_IN_COMMENT` a maximum, and isn't it 15 not 10? "", 'comment_created': datetime.datetime(2022, 9, 5, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963090578, 'comment_body': 'ditto: regex seems like overkill here', 'comment_created': datetime.datetime(2022, 9, 5, 18, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963090729, 'comment_body': 'ditto: regex seems like overkill', 'comment_created': datetime.datetime(2022, 9, 5, 18, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963090739, 'comment_body': ""I don't think I understand your modification of this. Try reading the whole sentence again and updating as needed?"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963090828, 'comment_body': '*do not --> does not', 'comment_created': datetime.datetime(2022, 9, 5, 18, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963090898, 'comment_body': '...but MyPy expects collection_dict, a dictionary which ...', 'comment_created': datetime.datetime(2022, 9, 5, 18, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963090936, 'comment_body': ""That's why we are explicitly changing the type of collection_dict, here which causes MyPy to throw an error. Thus, to silence the error, we add an ignore here.\r\n\r\nThat said ... I don't think I agree with this approach. Couldn't we type the return value of to_dict() explicitly using a TypedDict?"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963091025, 'comment_body': 'ditto: regex is overkill', 'comment_created': datetime.datetime(2022, 9, 5, 18, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 963091211, 'comment_body': ""Same note, can we just avoid adding this in the first place if we are representing the dict as a typed dict? E.g. using a dict comprehension {k: v for k in ... if k != 'id')"", 'comment_created': datetime.datetime(2022, 9, 5, 18, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963091455, 'comment_body': 'throw --> throws; ditto below; also in several other places later.', 'comment_created': datetime.datetime(2022, 9, 5, 18, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963091683, 'comment_body': 'Sounds like a cast is more appropriate here?', 'comment_created': datetime.datetime(2022, 9, 5, 18, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963092816, 'comment_body': 'Indent by 4.', 'comment_created': datetime.datetime(2022, 9, 5, 18, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963093074, 'comment_body': ""You can't do this typing inline?\r\n\r\nIf not, then at least prefix this with an underscore to indicate that it's private to this module."", 'comment_created': datetime.datetime(2022, 9, 5, 18, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963093310, 'comment_body': 'This and the validation-method TODO below could potentially be a problem given your planned changes to customization args, but I think you can handle that in the separate PR we were talking about.', 'comment_created': datetime.datetime(2022, 9, 5, 18, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963145822, 'comment_body': ""Here and below: isn't this the sort of thing that should be addressed with casting? Once you cast `value` to the correct type then everything should be deterministic, right? Ditto in the next elif."", 'comment_created': datetime.datetime(2022, 9, 5, 22, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963145949, 'comment_body': ""I think you should create a new dict here (for the yaml) and not modify exp_dict. That way you won't need to deal with this error, and doing it that way will also respect type safety. Similarly for the ignore[misc] below."", 'comment_created': datetime.datetime(2022, 9, 5, 22, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963146188, 'comment_body': 'In cases like this, define a new dict and name/type it appropriately.\r\n\r\nI think in general, if your stated reasoning is ""to silence the error"", it is better to think again. (You don\'t want other coders to follow that logic, right?)', 'comment_created': datetime.datetime(2022, 9, 5, 22, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963146345, 'comment_body': ""Same notes as before; don't mutate the list of keys of a TypedDict. That's actually changing its type instead."", 'comment_created': datetime.datetime(2022, 9, 5, 22, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963146552, 'comment_body': '... annotations, this argument ...\r\n\r\nThat said, I\'m actually not particularly sure that this is the way to go. Can\'t you add stubs for the parts you need? I mean, you already know it\'s a TextClassifierFrozenModel so I\'m not sure what the ""enough info"" in the TODO refers to.\r\n\r\n/cc @aasiffaizal ', 'comment_created': datetime.datetime(2022, 9, 5, 22, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963146887, 'comment_body': 'silent --> silence the\r\n\r\nDitto everywhere else (I see this phrasing come up quite a bit in comments).', 'comment_created': datetime.datetime(2022, 9, 5, 22, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963147746, 'comment_body': ""This does not make sense to me because this test is not checking validation of types (as far as I can make out). Could you please take another look at this? The types here should be compatible, even if things are mocked. \r\n\r\nAlso, given the existence of #14419 I think this comment will also become confusing because everything will end up being called ParamNames, so see if you could add additional clarity here about what's going on."", 'comment_created': datetime.datetime(2022, 9, 5, 23, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963149132, 'comment_body': 'Not sure I buy that, why not Union(bool, list) or something similar?', 'comment_created': datetime.datetime(2022, 9, 5, 23, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963149261, 'comment_body': ""Per the reasoning described here, if we are sure that the first element is always a List[str], why don't we update the return type for platform_search_services.search() accordingly?"", 'comment_created': datetime.datetime(2022, 9, 5, 23, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963149270, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 9, 5, 23, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963229797, 'comment_body': ""This seems odd. Wouldn't created_on and last_updated always exist? If so then let's just always add them."", 'comment_created': datetime.datetime(2022, 9, 6, 3, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963230441, 'comment_body': 'I think you\'ll want to explain something along the lines of this being an old schema version and therefore not compatible with the current types (like you\'ve done elsewhere). The current comment is basically ""we are using MyPy ignore because we have to"" and isn\'t that useful.', 'comment_created': datetime.datetime(2022, 9, 6, 3, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963232315, 'comment_body': 'Should update the docstring.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963232660, 'comment_body': 'Wrong issue number.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963232999, 'comment_body': ""I think you'll need to define a new type for the augmented dict (and possibly use a different varname)."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963233271, 'comment_body': 'This does not seem correct, at the very least it should be a Union type.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963233396, 'comment_body': ""Shouldn't BaseSuggestion's language_code be fixed, then?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963233691, 'comment_body': ""Same thing here ... but what does it mean for last_updated to be None? I thought last_updated is always set (it's first equal to the created_on date and then updated to later dates thereafter) so could you explain which conditions cause last_updated to be equal to None?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963233955, 'comment_body': ""Then shouldn't we fix it in BaseSuggestion (with explanation) and give it more specific types in the relevant subclasses? (Ditto elsewhere, re giving more specific types in the subclasses.)\r\n\r\nAlso the justification seems wrong, it's possible to make content suggestions with images. So, may need more detail on when this is equal to None exactly."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963234303, 'comment_body': 'This should be handled the usual way similar to how you handled ExplorationChange commands. Ditto below.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963234396, 'comment_body': 'Same question as above, why can last_updated be None?', 'comment_created': datetime.datetime(2022, 9, 6, 4, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963234558, 'comment_body': 'Ditto here and below.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963234622, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963234669, 'comment_body': ""Why can't we make it match? There should be more explanation."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963235162, 'comment_body': ""Please double-check this and the other comments below. I'm not sure the rationale is correct here, per earlier comments."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963235377, 'comment_body': 'This should be done using subclasses of BaseChange.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963235803, 'comment_body': ""I think this needs to be fixed properly and the types clarified using approaches we've talked about before."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963236078, 'comment_body': 'Same note about using subclasses.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963236344, 'comment_body': ""Shouldn't this cast rather than ignore (at the point where we specialize to LearnerCollectionDict)?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963236728, 'comment_body': ""This doesn't seem right at all, please fix the code and drop the ignore."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963237441, 'comment_body': 'There should be a new type defined here, right?', 'comment_created': datetime.datetime(2022, 9, 6, 4, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963238086, 'comment_body': ""I'm not sure about this. In practice, what are the types of values that are actually used? We can specialize to those."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963238598, 'comment_body': 'Can we add just the stubs we need (here and elsewhere)?', 'comment_created': datetime.datetime(2022, 9, 6, 4, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963239102, 'comment_body': 'Great renaming!', 'comment_created': datetime.datetime(2022, 9, 6, 4, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963239980, 'comment_body': 'But if this is the case, how do we know that assert_called() is actually a method on self.job.run (i.e. that this code will actually work)?', 'comment_created': datetime.datetime(2022, 9, 6, 4, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963240078, 'comment_body': 'Ditto here and below.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963240221, 'comment_body': 'that --> those', 'comment_created': datetime.datetime(2022, 9, 6, 4, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963241131, 'comment_body': ""Probably should expain why we can't make it match?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963241260, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963241282, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963242367, 'comment_body': 'silent --> silence', 'comment_created': datetime.datetime(2022, 9, 6, 4, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963242988, 'comment_body': '... represents the object to be normalized, and that object can ...', 'comment_created': datetime.datetime(2022, 9, 6, 4, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963243040, 'comment_body': 'Ditto (see phrasing above).', 'comment_created': datetime.datetime(2022, 9, 6, 4, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963243725, 'comment_body': ""Why can't we handle this in the typedefs at the top of the method?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963243752, 'comment_body': ""Why can't we handle this in the typedefs at the top of the method?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963246750, 'comment_body': 'Can we fix our typestubs then?', 'comment_created': datetime.datetime(2022, 9, 6, 4, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963246956, 'comment_body': ""I don't understand the rationale, can you elaborate more on this?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963247001, 'comment_body': 'Can we fix the typestubs then?', 'comment_created': datetime.datetime(2022, 9, 6, 4, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963247312, 'comment_body': '... in its stubs.\r\n\r\nBut again, can we fix the stubs?', 'comment_created': datetime.datetime(2022, 9, 6, 4, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963247509, 'comment_body': ""I don't quite follow this. Don't we typically import top-of-file constants in other places? If so, why is this the only one that needs a MyPy ignore?"", 'comment_created': datetime.datetime(2022, 9, 6, 4, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963247692, 'comment_body': 'Odd, why was this here in the first place? Maybe @U8NWXD can verify.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963247918, 'comment_body': ""I think they'll be covered in Milestone 2.\r\n\r\nBut @sahiljoster32 you should leave a TODO here, please."", 'comment_created': datetime.datetime(2022, 9, 6, 4, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963248362, 'comment_body': 'Don\'t start boolean variables with verbs.\r\n\r\nNot sure what this means, too, in the context of this function. What is it that ""is a function signature block""? Do you mean in_function_signature_block, perhaps? Maybe add a comment to explain what this variable represents exactly.', 'comment_created': datetime.datetime(2022, 9, 6, 4, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 966333257, 'comment_body': 'These 2 methods relate to both customization args issues, so it will be covered in a separate PR', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333288, 'comment_body': ""You can't do this typing inline? -- no. This is an empty list and it has nothing type (basically Mypy wants explicit typing here ).\r\n\r\n>If not, then at least prefix this with an underscore\r\n\r\ndone"", 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333329, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333366, 'comment_body': 'cast is added !', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333404, 'comment_body': 'Done, wherever possible.', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333431, 'comment_body': 'No that will not work:\r\n\r\n1. TypedDict does not work with dict comprehensions -- typeddicts always need each key defined explicitly.\r\n2. If something has typeddict type and we are deleting any key from that then mypy is always going to raise an error.', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333473, 'comment_body': ""> Couldn't we type the return value of to_dict() explicitly using a TypedDict?\r\n\r\nto_dict's return type is already defined which is -- CollectionDict, and this dict does not contain some keys. And here we are defining some extra keys on collectionDict which causes MyPy to throw an error. So, we are explicitly changing the type so that MyPy does not throw an error for missing keys."", 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333495, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333537, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333568, 'comment_body': 'removed', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333605, 'comment_body': ""Similar as above -- but here 'cmd' points to command. Also, if you are saying like remove cmd or name completely from the dicts of all over the codebase  then I think that was too much work just for 2 ignores "", 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333643, 'comment_body': ""> silent --> silence\r\n\r\n Done\r\n\r\n> Actually I think this is a bit of a problem ...\r\n\r\n`name` refers to cmd_name so I don't think we should remove the name from dict completely, also `name` is removed only in this place and here we are validating the dict.\r\n\r\nhttps://github.com/oppia/oppia/blob/c2be7ec34a04f79f46304aae4109ba685da9d1b9/core/domain/exp_domain.py#L324\r\n\r\n\r\n>  no one will know what the schema of the TypedDict is supposed to be when they look at it in the codebase\r\n\r\nI think these are the only 2 places in the codebase where we are removing the name. And if we add proper comments then it will clear the things for someone who is looking into the codebase."", 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333683, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333711, 'comment_body': 'raise exception is not needed, some refactoring worked!!', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333740, 'comment_body': 'Done and docstring is also updated!!', 'comment_created': datetime.datetime(2022, 9, 8, 19, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333767, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2022, 9, 8, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333810, 'comment_body': ""I tried but didn't find any solid proof which defines these dicts and their types ( there is a definition in the test -- but I'm not sure if it is correct or not ). where can I find these dicts definitions?"", 'comment_created': datetime.datetime(2022, 9, 8, 19, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333843, 'comment_body': 'name is added', 'comment_created': datetime.datetime(2022, 9, 8, 19, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966333874, 'comment_body': ""There is a flag (--disallow-any-generics) in MyPy which takes care of this thing:\r\n\r\nExplanation about flag -- If this flag is false then any generic type ( types that can accept type parameters like List \r\n because in List[str] str is a type parameter ) is forced to have type parameters. And if this flag is True then we can use generic types without type parameters and in this case, type parameters are considered as Any:\r\n\r\n```python\r\ndef foo(x: list) -> list    # This is allowed if --disallow-any-generics is True and here list is equivalent to List[Any]\r\n   return ['x', 'y']\r\n\r\ndef foo(x: list) -> list:    # This is not allowed and throw an error if --disallow-any-generics is False and Here MyPy will ask for type parameters like -- list[str], list[int]\r\n   return ['x', 'y']\r\n```\r\n\r\nBy default -disallow-any-generics is false, so alone dict is not allowed and MyPy asks for type argument like dict[str, str]. \r\n\r\nCan we set the true to -disallow-any-generics flag?\r\nWe can but I am completely against it, because we if allow -disallow-any-generics then dict is equivalent to Dict[Any, Any]. So, in the future, someone can easily use dict and pass the error.\r\n"", 'comment_created': datetime.datetime(2022, 9, 8, 19, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966347564, 'comment_body': 'Fixed -- wherever I found these issues !!', 'comment_created': datetime.datetime(2022, 9, 8, 19, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966349142, 'comment_body': ""Stubs of proto are not simple -- we have to build protobuf's stubs everytime we run MyPy because usage of protobuf is different from user to user (org to org ) ( implementation of protobuf can be different according to users, so there are no universal stubs available  ). So we have to build the stubs using the main proto file. \r\n\r\nFor that, I have already raised an idea PR -- https://github.com/oppia/oppia/pull/15601\r\n\r\nNow, as per the plan after M1 ( mid - September), vojita going to upgrade the MyPy version and raise a PR for this ( because protobuf stubs need extra work like adding a built process )\r\n\r\n"", 'comment_created': datetime.datetime(2022, 9, 8, 19, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966349776, 'comment_body': ""I'm not sure what do mean by this -- because if you see the usage, there we are deleting the key dynamically. Also ( again ) no matter if we define any kind of TypeDDict, if we are deleting the key then MyPy will throw an error."", 'comment_created': datetime.datetime(2022, 9, 8, 19, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966349831, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 8, 19, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966350496, 'comment_body': 'Just to confirm like how defining a new type will suppress the below error ? `Similarly for the ignore[misc] below` because below we are deleting the key, and the deletion of key from typedict is prohibited .', 'comment_created': datetime.datetime(2022, 9, 8, 19, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966350790, 'comment_body': ""No -- Because as mentioned in the comment this method is recursive. So, if we cast its return type to List[str] then MyPy expects its return type as List[List[str]]. And if we cast to List[List[str]] then MyPy expects it's type as List[List[List[str]]. cycle never ends."", 'comment_created': datetime.datetime(2022, 9, 8, 19, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966379216, 'comment_body': ""To clarify, here's a code example:\r\n\r\n```python\r\n# Here we use MyPy ignore because ...\r\na = 1\r\n# Here we use MyPy ignore because ...\r\nb = 1  # type: ignore\r\n```\r\n\r\nThe linter should complain that the first comment has no accompanying `type: ignore` comment, but I don't think the current code will. With the current code, here's what I think will happen:\r\n\r\n* We will analyze the first comment, see that it matches `type_ignore_comment_regex`, and set `type_ignore_comment_present = True`.\r\n* We will analyze the second comment, see that it matches `type_ignore_comment_regex`, and set `type_ignore_comment_present = True` even though it already had that value.\r\n* We will analyze the third comment, see that it is a `type: ignore comment` within `ALLOWED_LINES_OF_GAP_IN_COMMENT` lines of the second comment, and so set `type_ignore_comment_present = False` without triggering a lint failure."", 'comment_created': datetime.datetime(2022, 9, 8, 20, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 966790125, 'comment_body': ""In platform_feature_services.py, we have defined ALL_FEATURES_LIST as list of `PARAM_NAMES` enum. https://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/platform_feature_services.py#L42\r\n\r\nAnd in tests, we are providing a different list of enum to ALL_FEATURES_LIST:\r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/platform_feature_services_test.py#L32\r\n\r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/platform_feature_services_test.py#L111\r\n\r\nSo, due to this a error is raised.\r\n\r\n > The types here should be compatible, even if things are mocked.\r\n\r\n\r\nTwo differently define enums can never be same, even if the name is same  if I'm not wrong? or maybe explain a bit more please!"", 'comment_created': datetime.datetime(2022, 9, 9, 8, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966799834, 'comment_body': 'we cannot define Union[bool, list, str], because here we have a generic type list without type arguments and as explained above in the comment -- https://github.com/oppia/oppia/pull/15905#discussion_r966333874. Currently, we cannot use generics without type arguments.', 'comment_created': datetime.datetime(2022, 9, 9, 8, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966806374, 'comment_body': 'As per the docstring, it can return both Dict and list. (please read the doc string first -- this will make things clear )\r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/platform/search/elastic_search_services.py#L185\r\nAlso, we cannot use overload with platform_search_services.search() because we are returning Tuple there which is not a mutable type.', 'comment_created': datetime.datetime(2022, 9, 9, 9, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966808799, 'comment_body': 'reasoned above!', 'comment_created': datetime.datetime(2022, 9, 9, 9, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966809760, 'comment_body': 'The new type is defined and explanation is added.', 'comment_created': datetime.datetime(2022, 9, 9, 9, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966812960, 'comment_body': 'Added correct explanation PTAL!', 'comment_created': datetime.datetime(2022, 9, 9, 9, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966813080, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 9, 9, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966813206, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 9, 9, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966815121, 'comment_body': ""I think I already defined and assigned the new typeddict, that's why MyPy throws an error. And that's why ignore is needed here."", 'comment_created': datetime.datetime(2022, 9, 9, 9, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966821752, 'comment_body': 'I think I have explained before -- that we cannot define Union in the superclass.\r\n\r\nhttps://mypy-play.net/?mypy=latest&python=3.10&flags=strict%2Cdisallow-any-expr&gist=df9686c78b9ef983d6c1892b5b6e3e8c \r\n\r\nPlease run the example that I have put above -- by clicking on the `run` button to see the error.', 'comment_created': datetime.datetime(2022, 9, 9, 9, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966835996, 'comment_body': ""That makes sense -- thanks, that's a very helpful reply. I read up on the various principles and understand the issue.\r\n\r\nMy question then becomes: how do other codebases handle it -- what's the best practice? Surely we aren't the first to tackle subclasses in mypy. Do they use Any?"", 'comment_created': datetime.datetime(2022, 9, 9, 9, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 966838564, 'comment_body': 'Then it will be optional for every sub-class. And not all sub-classes accept language_code as None.', 'comment_created': datetime.datetime(2022, 9, 9, 9, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966848063, 'comment_body': 'In all suggestion classes, last_updated is defined as a keyword argument with the default value as None ( this is also a reason why we have to use Optional in typing ). Also, while creating suggestions we are not providing last_updated argument,\r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/suggestion_services.py#L224\r\nSo, None is used for last_updated.', 'comment_created': datetime.datetime(2022, 9, 9, 9, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966858096, 'comment_body': 'Image_context can only be None in SuggestionEditStateContent ( here none is not added by me, it is added already before my changes in the codebase  ) https://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/suggestion_registry.py#L389\r\n\r\nWhile in all other sub-classes It is not None -\r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/suggestion_registry.py#L675\r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/suggestion_registry.py#L900\r\n\r\nSo, if we use Optional[str] in BaseSuggestion then we have to use more if else exception clauses unnessesarly to narrow down the type in all other suggestions.', 'comment_created': datetime.datetime(2022, 9, 9, 9, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966859303, 'comment_body': 'This issue is already fixed in https://github.com/oppia/oppia/pull/15958', 'comment_created': datetime.datetime(2022, 9, 9, 9, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966860074, 'comment_body': 'https://github.com/oppia/oppia/pull/15905#discussion_r966848063 -- mentioned in this comment!', 'comment_created': datetime.datetime(2022, 9, 9, 9, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966860459, 'comment_body': 'This issue is already fixed in https://github.com/oppia/oppia/pull/15958', 'comment_created': datetime.datetime(2022, 9, 9, 9, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966860848, 'comment_body': 'https://github.com/oppia/oppia/pull/15905#discussion_r966848063 -- mentioned in this comment!', 'comment_created': datetime.datetime(2022, 9, 9, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966868791, 'comment_body': ""Because in BaseSuggestion it is expected to return a sequence of BaseChange \r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/suggestion_registry.py#L294\r\nbut in this sub-class's method we are not returning anything which causes mypy to throw an error.\r\n\r\nComment is also updated!"", 'comment_created': datetime.datetime(2022, 9, 9, 9, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966869184, 'comment_body': 'This issue is already fixed in https://github.com/oppia/oppia/pull/15958', 'comment_created': datetime.datetime(2022, 9, 9, 10, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966883170, 'comment_body': 'This issue is already fixed in https://github.com/oppia/oppia/pull/15958', 'comment_created': datetime.datetime(2022, 9, 9, 10, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966883533, 'comment_body': 'This issue is already fixed in https://github.com/oppia/oppia/pull/15958', 'comment_created': datetime.datetime(2022, 9, 9, 10, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966884044, 'comment_body': 'Done cast is used!', 'comment_created': datetime.datetime(2022, 9, 9, 10, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966888767, 'comment_body': 'As per the code comment, the expression provides a list of collectionNodeDict but the expected type here is list of LearnerCollectionNodeDict. And LearnerCollectionNodeDict is expected because below we are accessing `exploration_summary` key which is not defined in collectionNode dict. \r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/summary_services.py#L296', 'comment_created': datetime.datetime(2022, 9, 9, 10, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966889223, 'comment_body': 'I think we are already defining new type `CannonicalStoryDict`', 'comment_created': datetime.datetime(2022, 9, 9, 10, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966891413, 'comment_body': ""I didn't find any specific case -- which explains the types that this argument can accept. For now, I have just put str here and it worked. However, in the future, if we encounter an error then we can add Union here."", 'comment_created': datetime.datetime(2022, 9, 9, 10, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966904554, 'comment_body': 'https://github.com/oppia/oppia/pull/15501#discussion_r887164703\r\n\r\nCurrently, there are no stubs for the beam. Also, the library is complex and very big -- so if we add stubs by ourselves then it will take much much time because this is equivalent to reading through a whole new codebase and writing the stubs for it. Also, we are using `|`  operator in the codebase which is not legal according to python 3 -- this is also a hurdle in stubs. ', 'comment_created': datetime.datetime(2022, 9, 9, 10, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966906853, 'comment_body': ""That's a runtime thing, right? and MyPy deals only with typing, and here run is of callable type and callable type does not contain this `assert_called` attribute."", 'comment_created': datetime.datetime(2022, 9, 9, 10, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966907126, 'comment_body': 'reasoned above!', 'comment_created': datetime.datetime(2022, 9, 9, 10, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966907576, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 9, 10, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966907860, 'comment_body': 'Comment updated ', 'comment_created': datetime.datetime(2022, 9, 9, 10, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966907936, 'comment_body': 'Comment updated ', 'comment_created': datetime.datetime(2022, 9, 9, 10, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966908031, 'comment_body': 'Comment updated ', 'comment_created': datetime.datetime(2022, 9, 9, 10, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966908492, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 9, 10, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966908785, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 9, 10, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966909263, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 9, 10, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966909717, 'comment_body': 'Fixed ', 'comment_created': datetime.datetime(2022, 9, 9, 10, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966910046, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 9, 10, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966910364, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 9, 10, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966913667, 'comment_body': 'Here OrderedDict is also a generic type and the reason why we are adding ignore is explained above. https://github.com/oppia/oppia/pull/15905#discussion_r966333874', 'comment_created': datetime.datetime(2022, 9, 9, 10, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966914130, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 9, 10, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966915338, 'comment_body': 'Fixed ', 'comment_created': datetime.datetime(2022, 9, 9, 10, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966918664, 'comment_body': 'Actually, I have defined this shard only to get the errors from the files of core/test simultaneously. ', 'comment_created': datetime.datetime(2022, 9, 9, 10, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966919308, 'comment_body': 'reverted to the previous naming.', 'comment_created': datetime.datetime(2022, 9, 9, 10, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966977279, 'comment_body': 'No -- as far as I know, we cannot remove this ignore. reason:\r\n\r\nIn dict \r\nhttps://github.com/oppia/oppia/blob/68bb129c7fe773b989670a59162534b8893789bb/core/domain/suggestion_services.py#L78\r\nwe are defining different lambda functions with different suggestions. So, to allow every suggestion we have to use BaseSuggestion and in baseSuggestion change is defined as BaseChange and base change does not contain extra methods/attributes. ', 'comment_created': datetime.datetime(2022, 9, 9, 11, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 967312868, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2022, 9, 9, 17, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 967617815, 'comment_body': 'Thanks for the great explanation. I agree with you that we shouldn\'t set that flag to True for the reasons you mention, but the comment in the code is not clear at all. What do you mean by ""here we don\'t need to specify type parameters because we are inheriting dict only for implementation purpose"" -- can you explain this more clearly? In a way, anything that\'s done in the code is ""for implementation purpose"".', 'comment_created': datetime.datetime(2022, 9, 10, 8, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967618080, 'comment_body': 'Please read the implementation: there must be a platform_type key and it must map to the correct literal. The rest of the keys must match AndroidFeedbackReportDict. You can also cross-check with the test.\r\n\r\nThere is more that needs to be developed for this functionality, so you can leave extension of the type to future developers. For now, just have the types represent what the code itself represents.', 'comment_created': datetime.datetime(2022, 9, 10, 8, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967618113, 'comment_body': 'Replied above.', 'comment_created': datetime.datetime(2022, 9, 10, 8, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967618141, 'comment_body': '@sahiljoster32 Did you see this comment?', 'comment_created': datetime.datetime(2022, 9, 10, 8, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967618402, 'comment_body': ""Optional: I'm slightly worried about this name being the same as the field in the domain object (especially since they have different types). Could you rename it throughout to newest_report_creation_timestamp_isoformat instead, please?"", 'comment_created': datetime.datetime(2022, 9, 10, 8, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967618781, 'comment_body': 'Nit: get --> fetched (or gotten)', 'comment_created': datetime.datetime(2022, 9, 10, 8, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967618844, 'comment_body': 'a error --> an error. \r\n\r\nDitto everywhere else.', 'comment_created': datetime.datetime(2022, 9, 10, 8, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967618863, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 10, 8, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 967619543, 'comment_body': ""No, that's not what I mean at all; the 'cmd' key etc. is needed in the original locations.\r\n\r\nWhat I mean is that we shouldn't be modifying these variables in-place because it makes them not obey their type constraint any more. Instead, it would be better to construct these variables so that they have the correct (new) types in the first place. \r\n\r\nFor example, when you construct `valid_cmd_attribute_specs` above, use a dict comprehension like [this one](https://stackoverflow.com/a/17665928) (but with better variable naming) to exclude the key you don't want. And similarly for when you construct actual_cmd_attributes.\r\n\r\nDoes that make sense?"", 'comment_created': datetime.datetime(2022, 9, 10, 8, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967621915, 'comment_body': 'EDIT: Ah, per a comment of yours [below](https://github.com/oppia/oppia/pull/15905#discussion_r966333431), it seems like TypedDict doesn\'t work with dict comprehensions.\r\n\r\nI did a bit of research and I think I agree with you that getting proper typing here is complicated. However, I think the current comments are still problematic. This is because the main point of the comments are that we use ignore ""to avoid/silence the error"" ... and that is not helpful, since it raises the question ""but why don\'t you use alternative ways of avoiding the error that don\'t just require ignoring it?"". It would be better for your comments to address that question instead; this will help preempt questions from reviewers as well.\r\n\r\nIn this case, the conceptual problem I\'m having is that, when you call validate_cmd(), you are passing in valid_cmd_attribute_specs as a feconf.ValidCmdDict, and actual_cmd_attributes as a Mapping[str, AcceptableChangeDictTypes]. Are these types correct, and what actually ensures that these conditions hold? For example, will a dict comprehension work for Mapping (so that instead of a copy.deepcopy() you can do a dict comprehension instead with a copy.deepcopy() on the values instead)?\r\n\r\nAlternatively, if you need to modify the implementation of validate_cmd() slightly so that it doesn\'t actually require the keys to be deleted before they\'re passed in (and still does the same thing), that might be the easiest route to take.', 'comment_created': datetime.datetime(2022, 9, 10, 8, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967622688, 'comment_body': 'OK, I think this one is fine -- just add point (1) above to the comment here as well. Thanks!', 'comment_created': datetime.datetime(2022, 9, 10, 8, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967623136, 'comment_body': 'You don\'t need the comma after ""collection_dict"". (You can put a comma after ""here"" if you like.)', 'comment_created': datetime.datetime(2022, 9, 10, 9, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967623749, 'comment_body': 'But then you can just define multiple specific overrides for this method, right? (There are just a few cases to consider, per the docstring.)', 'comment_created': datetime.datetime(2022, 9, 10, 9, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967624084, 'comment_body': 'Drop comma before ""here"" (though, if you like, you can put it after the word).', 'comment_created': datetime.datetime(2022, 9, 10, 9, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967624362, 'comment_body': '> Just to confirm like how defining a new type will suppress the below error ? `Similarly for the ignore[misc] below` because below we are deleting the key, and the deletion of key from typedict is prohibited .\r\n\r\nIf you have a TypedDictA with key A, and TypedDictAB with keys A and B, is it possible to do something like second_dict = first_dict.update({B: ...}) and have the types still work out? That was what I was thinking.', 'comment_created': datetime.datetime(2022, 9, 10, 9, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967624613, 'comment_body': ""I looked into this a bit more and I'm a bit confused now actually.\r\n\r\nWhere do we even use new_state_dict and old_state_dict? We define them here but in the deepdiff.DeepDiff() below we still seem to be passing the original old_states_dict[state_name] etc., so I wonder if all this stuff is even needed. Am I missing something here?"", 'comment_created': datetime.datetime(2022, 9, 10, 9, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967624716, 'comment_body': 'This --> this', 'comment_created': datetime.datetime(2022, 9, 10, 9, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967625138, 'comment_body': ""Oh, I think I see. OK, let's leave it as it is then, thanks!"", 'comment_created': datetime.datetime(2022, 9, 10, 9, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967625195, 'comment_body': 'Ah, sorry. I now see that the second thing is a Type, my bad.', 'comment_created': datetime.datetime(2022, 9, 10, 9, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967625802, 'comment_body': 'Ah, thanks, that helps. But this comment doesn\'t really explain any of that (e.g. it doesn\'t explain why we\'re sure that the type of the first element is always a List[str], etc.).\r\n\r\nI would have thought an overload would make sense here. Can you explain what you mean by ""we can\'t do X because tuple is not a mutable type"" -- could you please point to a reference which explains this?\r\n\r\nThe other thought I have (if overload isn\'t feasible) is to just reduce platform_search_services\'s functionality to have it always use the ids_only=True case, assuming we never use the False case in the codebase.', 'comment_created': datetime.datetime(2022, 9, 10, 9, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967625809, 'comment_body': 'Replied above!', 'comment_created': datetime.datetime(2022, 9, 10, 9, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967626089, 'comment_body': '@sahiljoster32 Just flagging this comment since you might not have seen it.', 'comment_created': datetime.datetime(2022, 9, 10, 9, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967626191, 'comment_body': 'Well, yup, but then could those subclasses override the type of language_code to make it stricter?', 'comment_created': datetime.datetime(2022, 9, 10, 9, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967626490, 'comment_body': 'Hm, interesting ... that\'s not common actually for how we usually handle last_updated. OK, can you please add a note in the comment here (after the ""last_updated can accept None values as well"") to provide a reference/examples for where this happens? Just name the create_suggestion() method and explain your observation.', 'comment_created': datetime.datetime(2022, 9, 10, 9, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967626542, 'comment_body': 'OK, agree with you that this is probably the least painful option.', 'comment_created': datetime.datetime(2022, 9, 10, 9, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967626620, 'comment_body': 'Thanks! See my reply above for the suggested update to the code comment.', 'comment_created': datetime.datetime(2022, 9, 10, 9, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967626731, 'comment_body': 'See above!', 'comment_created': datetime.datetime(2022, 9, 10, 9, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967627601, 'comment_body': ""I looked at the code and really the thing to do here is:\r\n\r\n- get rid of get_change_list_for_accepting_suggestion() from the base class and all the subclasses\r\n- in the one place it's used, just inline its functionality into accept()\r\n\r\nIt doesn't make any sense to maintain that function if all classes except one basically ignore it."", 'comment_created': datetime.datetime(2022, 9, 10, 9, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967628514, 'comment_body': ""OK, but conceptually the current comment does't make sense. If there is a question_dict and it is a dict then something seems conceptually wrong if it's being considered as a str type by default? This doesn't really make sense to me (it sounds like the default type is just wrong in describing the actual situation) ."", 'comment_created': datetime.datetime(2022, 9, 10, 9, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967628626, 'comment_body': 'OK! But, also, I don\'t think it\'s useful to say ""for implementation purpose"". This doesn\'t explain anything, please give a clearer explanation. (Ditto elsewhere you have that phrase.)', 'comment_created': datetime.datetime(2022, 9, 10, 9, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967629171, 'comment_body': 'Sorry, I don\'t get it. If the expression provides a list of collectionNodeDict then ... well, it is a list of collectionNodeDict. You can\'t really make it a different type of dict just by declaring it so.\r\n\r\nIf you need to create collection_dict[\'nodes\'] then start it off with [], construct the node dict each time and put the fully-formed dict into it, so that the type is correct from the start. Basically, you want to minimize the number of cases when you say that variable V is of type X but it really isn\'t (since that\'s just incorrect), and that seems correlated to the usage of ""type: ignore"".', 'comment_created': datetime.datetime(2022, 9, 10, 9, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967629425, 'comment_body': ""Sorry, I'm confused. Where is assert_called() defined? How do you know this is a runtime thing .. what's the evidence?"", 'comment_created': datetime.datetime(2022, 9, 10, 10, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967629487, 'comment_body': 'Same question...', 'comment_created': datetime.datetime(2022, 9, 10, 10, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967629694, 'comment_body': '... object can be of any ...', 'comment_created': datetime.datetime(2022, 9, 10, 10, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967629712, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 9, 10, 10, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967630126, 'comment_body': 'OK, I think you can still explain in the code comment why ""we don\'t need to specify this"".', 'comment_created': datetime.datetime(2022, 9, 10, 10, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 967630143, 'comment_body': '@sahiljoster32 Did you see this comment?', 'comment_created': datetime.datetime(2022, 9, 10, 10, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 968105623, 'comment_body': ""I'm not introducing Opitional[str] in the base class's language_code because:\r\n1. Only `SuggestionEditStateContent` can accept None value for language_code https://github.com/oppia/oppia/blob/20af54e0574a4f99690f15f2fbb97f2a397f22f9/core/domain/suggestion_registry.py#L479\r\nand all other classes cannot accept None values for language_code https://github.com/oppia/oppia/blob/20af54e0574a4f99690f15f2fbb97f2a397f22f9/core/domain/suggestion_registry.py#L698\r\nhttps://github.com/oppia/oppia/blob/20af54e0574a4f99690f15f2fbb97f2a397f22f9/core/domain/suggestion_registry.py#L951\r\n\r\n2. If we use Optional[str] in the base class, then in all sub-classes language_code is going to be Optional[str] and we have to use `if else raise exception` unnecessary ( even though we know that in particular sub-class language_code is not going to be None) -- you can see an example that I have created for this case https://mypy-play.net/?mypy=latest&python=3.10&flags=strict%2Cdisallow-any-expr&gist=ac114a174340b007d549a4eca10e3e99"", 'comment_created': datetime.datetime(2022, 9, 12, 8, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968105779, 'comment_body': ""I think i need to explain a bit more here:\r\n\r\n> In this Dict, we are defining different lambda functions with different suggestions. So, to allow every suggestion we have to use BaseSuggestion and in baseSuggestion change is defined as BaseChange and base change does not contain extra methods/attributes.\r\n\r\nSo, these extra attributes have type str because they are created dynamically in BaseChange class. that's why question_dict is considered as a type of str. Becasue question_dict is created dynamically in BaseChange class."", 'comment_created': datetime.datetime(2022, 9, 12, 8, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968105884, 'comment_body': ""If we do not change the type of collection_node['nodes'] explicitly, then the following things will happen:\r\n\r\nIf we do not change the type of collection_dict['nodes'], then it's type will become `List[collectionNodeDict]`. So, here\r\nhttps://github.com/oppia/oppia/blob/20af54e0574a4f99690f15f2fbb97f2a397f22f9/core/domain/summary_services.py#L278\r\ncollection_node will have type `CollectionNodeDict` and below we are defining a new key `exploration_summary` https://github.com/oppia/oppia/blob/20af54e0574a4f99690f15f2fbb97f2a397f22f9/core/domain/summary_services.py#L296\r\nhttps://github.com/oppia/oppia/blob/20af54e0574a4f99690f15f2fbb97f2a397f22f9/core/domain/summary_services.py#L298\r\n\r\nAnd CollectionNodeDict does not contain this `exploration_summary` key. So, if we don not change the type of collection_dict['nodes'] explicitly to the List[LearnerCollectionNodeDict] ( this LearnerCollectionNodeDict contains exploration_summary key ) then we have to use the two ignores here.\r\n\r\nThe main thing -- is that I'm changing the type of collection_dict['nodes'] explicitly to make this dict consistent with rest of the function rather than using ignore every time we found a different key that was not defined in CollectonNodeDict. "", 'comment_created': datetime.datetime(2022, 9, 12, 8, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968105959, 'comment_body': 'I tried to find where this `assert_called()` is defined but was unable to find it.\r\n\r\nThe main thing here is that `run_job` is of callable type and currently MyPy does not support the addition of attributes in Callable types.\r\n\r\nI found an issue that was already opened in MyPy, basically, they are currently in discussion about this feature and this feature is not implemented yet. -- issue https://github.com/python/mypy/issues/2087\r\n\r\nBut yeah, at the last of the conversation someone suggested a hack for this issue but that seems odd to me. -- suggested hack/way to suppress the error https://github.com/python/mypy/issues/2087#issuecomment-769266912', 'comment_created': datetime.datetime(2022, 9, 12, 8, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968106012, 'comment_body': 'replied above ', 'comment_created': datetime.datetime(2022, 9, 12, 8, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968106088, 'comment_body': 'Yeah, I already did changes!', 'comment_created': datetime.datetime(2022, 9, 12, 8, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968170546, 'comment_body': 'Yeah, I did! and changed the function name!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968171446, 'comment_body': 'comment changed!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968172078, 'comment_body': 'Added Typeddict!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968172394, 'comment_body': 'Added TypedDict instead of Dict[str, Any]', 'comment_created': datetime.datetime(2022, 9, 12, 9, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968173485, 'comment_body': 'Fixed - actually i did some changed in valid_cmd() method PTAL!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968174079, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968174748, 'comment_body': 'Overloads added!!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968175542, 'comment_body': 'Removed new_state_dict and old_state_dict', 'comment_created': datetime.datetime(2022, 9, 12, 9, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968176444, 'comment_body': 'Fixed by adding overloads. ', 'comment_created': datetime.datetime(2022, 9, 12, 9, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968176876, 'comment_body': 'overloads are added!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968178862, 'comment_body': 'comment added!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968179079, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968179413, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2022, 9, 12, 9, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968179926, 'comment_body': 'This method is removed!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968187862, 'comment_body': 'Comment Updated!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968188910, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968189025, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968189290, 'comment_body': 'Done -- wherever i found this issue!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968189647, 'comment_body': 'Done -- wherever i found this issue!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968189817, 'comment_body': 'Done -- wherever i found this issue!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968190011, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 12, 9, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968191284, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968191393, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968197561, 'comment_body': ""I'm assuming first_dict is of type TypedDictA and second_dict is of type TypedDictAB, if that's the case then `second_dict = first_dict.update({B: ...}) ` is not allowed, reason is simple: Key B is not defined in first_dict (TypedDictA) so mypy throws an error `error: Unexpected TypedDict key 'B'  [misc]`.\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 9, 12, 9, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968252776, 'comment_body': ""The most closet answer that I have found is https://stackoverflow.com/a/54359797\r\n\r\nDo they use Any? -- yes some of them.\r\n\r\nAnd i don't see any problem using Any here -- because we are allowing for sub-classes and here we are throwing error if someone used this method accidentally and not usingAny for any implementation purpose like we have done in customization arg one!"", 'comment_created': datetime.datetime(2022, 9, 12, 10, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968723762, 'comment_body': 'Now we are using dict, variables are removed!\r\n', 'comment_created': datetime.datetime(2022, 9, 12, 17, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968724652, 'comment_body': 'tried my best to fix these nits, PTAL!', 'comment_created': datetime.datetime(2022, 9, 12, 17, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968724755, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 12, 17, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968726216, 'comment_body': '> provide a link to documentation\r\n\r\nFor this, we are going to make some changes in the backend annotations doc itself, but that thing is a part of M2.', 'comment_created': datetime.datetime(2022, 9, 12, 17, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968727225, 'comment_body': 'The backend annotations doc is going to be updated!\r\n\r\nFor now, we noted that we should include these patterns also, THanks!', 'comment_created': datetime.datetime(2022, 9, 12, 17, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968728773, 'comment_body': '> So here there are two different concepts: type: ignore and type ignore comment\r\n\r\nNo\r\n\r\n\r\nsorry, It was inaccurately typed. Now fixed!', 'comment_created': datetime.datetime(2022, 9, 12, 17, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968729184, 'comment_body': 'substring search is used.', 'comment_created': datetime.datetime(2022, 9, 12, 17, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968729300, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2022, 9, 12, 17, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968729627, 'comment_body': 'Fixed -- wherever it is possible ', 'comment_created': datetime.datetime(2022, 9, 12, 17, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968729982, 'comment_body': '> Why not just do a substring search?\r\n\r\nDone\r\n', 'comment_created': datetime.datetime(2022, 9, 12, 17, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968730815, 'comment_body': 'Thanks for pointing out this case, now linters are supporting this case as well -- also a test case is also added PTAL!', 'comment_created': datetime.datetime(2022, 9, 12, 17, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968731558, 'comment_body': 'Now linters are supporting this case as well. but thanks to point that out !!', 'comment_created': datetime.datetime(2022, 9, 12, 17, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968731779, 'comment_body': 'copy.deepcopy removed', 'comment_created': datetime.datetime(2022, 9, 12, 17, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968731942, 'comment_body': 'Fixed ', 'comment_created': datetime.datetime(2022, 9, 12, 17, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968732266, 'comment_body': 'Substring search is used', 'comment_created': datetime.datetime(2022, 9, 12, 17, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968733119, 'comment_body': '> There are grammar issues with other docstrings too\r\n\r\nI tried my best to rule out these nits as much as possible !', 'comment_created': datetime.datetime(2022, 9, 12, 17, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968738277, 'comment_body': ""> is it possible to check whether cast is being called?\r\n\r\nYeah, it's possible but if we only check that cast is being called then how do we check for comments that are present above it?\r\n\r\nCurrently, we are traversing through token-to-token, and whenever we encounter a comment we keep that info as a flag, and when we encounter cast we use that flag to check if that is a ok case or not. Please provide more info if you think I'm missing something. \r\n"", 'comment_created': datetime.datetime(2022, 9, 12, 17, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968739960, 'comment_body': 'Name changed', 'comment_created': datetime.datetime(2022, 9, 12, 17, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968740091, 'comment_body': 'FIxed', 'comment_created': datetime.datetime(2022, 9, 12, 17, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968740284, 'comment_body': 'substring search is used', 'comment_created': datetime.datetime(2022, 9, 12, 17, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968740470, 'comment_body': 'substring search is used\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 12, 17, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968740620, 'comment_body': 'substring search is used\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 12, 17, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968746631, 'comment_body': 'https://github.com/oppia/oppia/actions/runs/3039355891/jobs/4894192430#step:8:755 \r\n\r\nPTAL!\r\n', 'comment_created': datetime.datetime(2022, 9, 12, 18, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968779376, 'comment_body': ""The function's name is reverted from from_submitted_feedback_dict to from_dict because it is causing backend schema validation tests to fail. "", 'comment_created': datetime.datetime(2022, 9, 12, 18, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 968908118, 'comment_body': '```suggestion\r\n            # of type \'callable\' do not contain a \'call_num\' attribute. So,\r\n            # because of this, MyPy throws a \'""Callable"" has no attribute\r\n```\r\n\r\nditto below', 'comment_created': datetime.datetime(2022, 9, 12, 20, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968909529, 'comment_body': '```suggestion\r\n    # kind of iterables to compare them against each other, and these iterables can\r\n    # be of type List, Dict, Tuple, etc.\r\n```', 'comment_created': datetime.datetime(2022, 9, 12, 20, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968910481, 'comment_body': ""This comment explains why the error gets thrown, but not why it's okay to do the assignment. Could you explain why it's acceptable in this case?"", 'comment_created': datetime.datetime(2022, 9, 12, 20, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968914478, 'comment_body': 'I don\'t think ""see other parts of the codebase"" is good enough explanation here. Oppia is a huge codebase, and it\'s unreasonable to ask contributors to read through that much code just to find a good example. Further, even if they find an example, it won\'t be clear to them what parts of that example are important (e.g. the importance of the `Here we use type Any` string at the start). I think we need to directly document the expectations for these comments, either in the error messages or on the wiki (with a link to the wiki in the error message).\r\n\r\nI see that in https://github.com/oppia/oppia/pull/15905#discussion_r968726216 you say that the documentation is coming in M2, but I don\'t think this can really wait. Contributors are going to start getting these error messages as soon as this PR gets merged, and when they do, we need to have the documentation ready so they know what to do.\r\n\r\nThe same applies to the other error messages below.', 'comment_created': datetime.datetime(2022, 9, 12, 20, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968915220, 'comment_body': ""Resolving this since it's been superseded by another comment"", 'comment_created': datetime.datetime(2022, 9, 12, 20, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968918074, 'comment_body': ""This is hard to understand. How about: `MyPy ignores (except for 'type: ignore[no-untyped-call]') should be accompanied by proper comments ...`"", 'comment_created': datetime.datetime(2022, 9, 12, 20, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968921274, 'comment_body': '```suggestion\r\n        """"""Checks if the MyPy type ignores present in a module are properly\r\n        documented by a code comment or not.\r\n```\r\n\r\nAlso checks for unnecessary code comments', 'comment_created': datetime.datetime(2022, 9, 12, 20, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968921592, 'comment_body': ""This is still defined and named like a regex even though you're just doing a substring search now"", 'comment_created': datetime.datetime(2022, 9, 12, 20, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968923287, 'comment_body': ""Why not do this check under the `if type_ignore_comment_regex in line:` block? I think that'll be clearer"", 'comment_created': datetime.datetime(2022, 9, 12, 20, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968924065, 'comment_body': 'Same problem as above: we need to explain to confused users how to write a proper comment', 'comment_created': datetime.datetime(2022, 9, 12, 20, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968926248, 'comment_body': ""I agree with your token-by-token traversal. I'm just suggesting that if you look for cases where `cast` is being called rather than just referenced, you wouldn't need to keep track of whether the linter is inside an import statement"", 'comment_created': datetime.datetime(2022, 9, 12, 20, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968927875, 'comment_body': ""Isn't it now `True` that the type comment is no longer pending?"", 'comment_created': datetime.datetime(2022, 9, 12, 21, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 968929109, 'comment_body': 'Do you want to require that this be at the start of the line? If so, change it everywhere', 'comment_created': datetime.datetime(2022, 9, 12, 21, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 969128037, 'comment_body': ""You mentioned [here](https://github.com/oppia/oppia/pull/15905#discussion_r963083169) that the name change to from_submitted_feedback_dict() is causing backend schema validation tests to fail.\r\n\r\nHowever, for reasons mentioned in that comment, the way this is currently framed seems wrong -- would you agree? If so, can you provide more info about the failure? Perhaps we need a different from_dict() function that does the expected thing (in addition to renaming this one to be from_submitted_feedback_dict() instead), but keeping things the way they are seems like it's going to cause problems in the future."", 'comment_created': datetime.datetime(2022, 9, 13, 4, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969132073, 'comment_body': 'Can you link to a reference that supports this claim?', 'comment_created': datetime.datetime(2022, 9, 13, 4, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969132405, 'comment_body': 'deprecated, not depreciated (they mean different things)', 'comment_created': datetime.datetime(2022, 9, 13, 4, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969134561, 'comment_body': 'Hmm, OK. I don\'t have a good alternative suggestion here. I\'m not entirely comfortable with how it is ... I wish there was a way to define a new type that\'s ""similar to this dict but with these key additions/subtractions"", but for now, let\'s keep it as you have it.', 'comment_created': datetime.datetime(2022, 9, 13, 4, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969138721, 'comment_body': ""The discussion on that SO thread is a good one, thanks for linking it. I think what I would suggest is to add a TODO to try and address the Any here (and provide a clear, detailed explanation in the issue as to what mypy is complaining about and why the approach of using a Union type is wrong, etc., so that anyone reading the issue will be able to think about it without needing to refer to large PRs like this one -- though you can still link to this comment as a supplementary reference). Link to the SO answer as well.\r\n\r\nThe TODO here would be to audit how these classes are set up and find a different way of structuring things so that the types are correct. If you read the SO post, you will find that the conclusion is that something is likely to be unsound about the design. This suggests that more work is needed here, but for this case I think it's fine to document that clearly with signposts so that it can be taken up later."", 'comment_created': datetime.datetime(2022, 9, 13, 4, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969140391, 'comment_body': 'OK, thanks. I think keeping it as you have it is probably fine (ditto below) but only because I believe we are going to be deprecating the SuggestionEditStateContent class at some point (since we turned off the functionality in prod a few months back) -- in general, we *really* want to avoid ""type: ignore"". But yup, let\'s leave it as-is for now.', 'comment_created': datetime.datetime(2022, 9, 13, 4, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969142141, 'comment_body': ""On further reflection I am still uncomfortable about this.\r\n\r\nCould you please create a TODO here (and in the similar places below) to investigate whether we can remove the None option for this and the other two cases (list them all specifically with links)? Then let's loop in @sagangwee (who leads the Contributor Dashboard team) and consult him on it."", 'comment_created': datetime.datetime(2022, 9, 13, 4, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969144078, 'comment_body': ""Yes, I understood that the first time. But the point I am making is that we should be typing question_dict correctly at the point we are creating it, possibly using subclasses etc. like you did for the exploration changes. It's just completely wrong to call a dict a str and then mypy-ignore it ... don't you see that?\r\n\r\nIn other words, what matters is not how it's currently being created; what matters is what the correct representation is. If the current approach doesn't match the correct representation then we should fix it so that it does."", 'comment_created': datetime.datetime(2022, 9, 13, 4, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969145808, 'comment_body': 'Mm, this is the usual issue we\'ve been seeing about how it\'s hard to define a new TypedDict based off an existing one without enumerating all the keys one-by-one.\r\n\r\nSo yeah ... it\'s not great. And I think that conceptually it\'s OK to keep it the way you have it. But I think you\'ll need to explain this issue in the comment rather than saying ""to avoid the error we use ignore here"". Also every time you say ""for implementation purpose"" this really doesn\'t tell the reader anything; you\'ll need a better explanation in such cases.', 'comment_created': datetime.datetime(2022, 9, 13, 4, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969161584, 'comment_body': ""Hm, this is indeed a bit odd.  I dug into it using `git blame` but I also can't find any information on what this is.\r\n\r\nFor this and the cases below, I suggest writing a TODO to investigate where assert_called() and return_value come from, and whether they can be replaced by something more standard. (Give more info in the issue than this to explain the context properly.) I think this is something that does needs to be fixed in the longer term, but not urgently enough to block this PR on. Does that sound good?\r\n\r\n/cc @vojtechjelinek "", 'comment_created': datetime.datetime(2022, 9, 13, 5, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969164339, 'comment_body': ""@sahiljoster32 Given all this complexity and the fact that we always only use ids_only=True (I think? Please double-check) -- let's just hardcode ids_only=True in the call to elasticsearch and get rid of the other cases.\r\n\r\nI don't see us using ids_only=False in the future -- we would always fetch the data from our own datastore anyway.\r\n\r\nWhat do you think? (Also, if ids_only=False is used only in tests and nowhere else, it's fine to convert those tests to use ids_only=True, or drop them if the path they are testing no longer makes sense.)"", 'comment_created': datetime.datetime(2022, 9, 13, 5, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 969723049, 'comment_body': ""After changing the name from `from_dict()` to `from_submitted_feedback_dict()`, Schema validation fails because:\r\n\r\nIn `controllers/incoming_app_feedback_report.py` we are defining schema which says that incoming value has type `object_dict` https://github.com/oppia/oppia/blob/8e710ba0e6179e0cf5debc84c808a5cb40677a77/core/controllers/incoming_app_feedback_report.py#L35\r\n\r\nAnd values of type `object_dict` are first initialized from their domain object using the `from_dict` method.\r\nhttps://github.com/oppia/oppia/blob/8e710ba0e6179e0cf5debc84c808a5cb40677a77/core/schema_utils.py#L248\r\n\r\nSince, after changing the name of `from_dict()` to `from_submitted_feedback_dict()`, the schema validator is unable to find the `from_dict` method to initialize the object and due to this, an error is showed up. \r\n\r\nError messages that I get in the backend are: https://github.com/oppia/oppia/actions/runs/3039355879/jobs/4894192305#step:8:1179\r\n\r\nPlease correct me If I'm missing something."", 'comment_created': datetime.datetime(2022, 9, 13, 14, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969723678, 'comment_body': 'The link of MyPy playground is added with an example', 'comment_created': datetime.datetime(2022, 9, 13, 14, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969724262, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2022, 9, 13, 14, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969727904, 'comment_body': 'TODO is added!', 'comment_created': datetime.datetime(2022, 9, 13, 14, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969742066, 'comment_body': ""> let's just hardcode ids_only=True in the call to elasticsearch and get rid of the other cases\r\n\r\nDone and test cases are also passing!"", 'comment_created': datetime.datetime(2022, 9, 13, 14, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969746072, 'comment_body': 'TODO is added with a detailed explanation.', 'comment_created': datetime.datetime(2022, 9, 13, 15, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969747124, 'comment_body': 'ok', 'comment_created': datetime.datetime(2022, 9, 13, 15, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969749005, 'comment_body': 'Did some refactoring and It worked PTAL!', 'comment_created': datetime.datetime(2022, 9, 13, 15, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969749958, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 9, 13, 15, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969750738, 'comment_body': 'Comment is updated PTAL!', 'comment_created': datetime.datetime(2022, 9, 13, 15, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 969751908, 'comment_body': 'TODO is added', 'comment_created': datetime.datetime(2022, 9, 13, 15, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970006820, 'comment_body': 'Fixed -- wherever i found these issues.', 'comment_created': datetime.datetime(2022, 9, 13, 19, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970006946, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 13, 19, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970007381, 'comment_body': 'Comment Updated PTAL!', 'comment_created': datetime.datetime(2022, 9, 13, 19, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970008206, 'comment_body': 'Now error messages are also explaining the required format of the comment!', 'comment_created': datetime.datetime(2022, 9, 13, 19, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970008599, 'comment_body': ""> MyPy ignores (except for 'type: ignore[no-untyped-call]') should be accompanied by proper comments\r\n\r\nlooks good to me, changes added "", 'comment_created': datetime.datetime(2022, 9, 13, 19, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970008824, 'comment_body': 'Fixed -- wherever I found these issues.', 'comment_created': datetime.datetime(2022, 9, 13, 19, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970008999, 'comment_body': 'Name changed PTAL!', 'comment_created': datetime.datetime(2022, 9, 13, 19, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970009267, 'comment_body': 'Added suggested changes PTAL!', 'comment_created': datetime.datetime(2022, 9, 13, 19, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970009670, 'comment_body': 'Error messages updated, now they are showing the correct format of comments.', 'comment_created': datetime.datetime(2022, 9, 13, 19, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970019507, 'comment_body': ""No - it should be false here because at this point we have encountered the `type: ignore` for comment. And to check the next comment we have to make it False here. \r\n\r\n```python\r\n# Here we use MyPy ignore because ...            # at this point type_comment_no_longer_pending will change it's value from False to true.\r\nvar_1 = 'asd'   # type: ignore[some-msg]         # at this point type_comment_no_longer_pending will change it's value from true to false, so that in next line if linters encounter new comment then it can be True again.\r\n\r\n\r\n# Here we use MyPy ignore because ...        # Here again type_comment_no_longer_pending will change it's value from false to True and it will only become false again when linter encounter `type: ignore`.\r\n\r\n```"", 'comment_created': datetime.datetime(2022, 9, 13, 19, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970019897, 'comment_body': 'Ahh, sorry but can you please explain this comment a bit more, please!', 'comment_created': datetime.datetime(2022, 9, 13, 19, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970212864, 'comment_body': ""I agree that your implementation is technically correct. I'm arguing that the name of the dictionary key is misleading. To take your example:\r\n\r\n```\r\n# Here we use MyPy ignore because ...            # At this point the type comment is now pending because we're looking for the associated type: ignore comment\r\nvar_1 = 'asd'   # type: ignore[some-msg]         # Now we've found the type: ignore comment, so the comment we found above is no longer pending\r\n```\r\n\r\nIn other words, I think the key should be `type_comment_pending`"", 'comment_created': datetime.datetime(2022, 9, 14, 1, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 970214154, 'comment_body': ""The current code will recognize the following as a valid documentation comment: `The following code does ... Here we use MyPy ignore because ...`. Do we really want to accept such a comment, or do we want to require that the `Here we use MyPy ignore because ...` part come at the start of the line so it's easier to identify? I'm not sure what the intended behavior is here"", 'comment_created': datetime.datetime(2022, 9, 14, 1, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 970318204, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2022, 9, 14, 5, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970319891, 'comment_body': ""We really want to require that the `Here we use MyPy ignore because ...` part come first, but there might be some cases where we are using TODOs. So, to allow todos as well I'm not forcing  `Here we use MyPy ignore because ...`  to be the start of the comment. "", 'comment_created': datetime.datetime(2022, 9, 14, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970497578, 'comment_body': ""TODOs generally need to be an instruction or have an instruction within them. This one doesn't seem to have one."", 'comment_created': datetime.datetime(2022, 9, 14, 8, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 970497703, 'comment_body': 'Ditto, here and below.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 970499527, 'comment_body': 'it\'s --> its\r\n\r\n(the former means ""it is"")', 'comment_created': datetime.datetime(2022, 9, 14, 8, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 970499889, 'comment_body': 'Missing instruction -- see above. Ditto below.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 970501341, 'comment_body': 'I think this is a valid scenario to test, you should replace it with an ids_only version of this right?', 'comment_created': datetime.datetime(2022, 9, 14, 8, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 970515887, 'comment_body': ""I think conceptually you can't validate the input as an AppFeedbackReport dict because it isn't one. So (a) this method name should change, and (b) the schema validation should be done in some other way (possibly manually).\r\n\r\nAre there examples of schema validation where the controller just calls a custom validation function? Or, if the Android dict only has certain keys and values then specify those explicitly in the controller schema and don't use an object class.\r\n\r\n/cc @Nik-09 who might also be able to help here."", 'comment_created': datetime.datetime(2022, 9, 14, 8, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 970824638, 'comment_body': 'Comment updated but not able to fit all info because they are lot of info and that info is already mentioned in TODO. PTAL!', 'comment_created': datetime.datetime(2022, 9, 14, 13, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970827225, 'comment_body': 'Comment Updated PTAL!', 'comment_created': datetime.datetime(2022, 9, 14, 13, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970827352, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 14, 13, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970827562, 'comment_body': 'comment Updated!', 'comment_created': datetime.datetime(2022, 9, 14, 13, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970827748, 'comment_body': 'added !', 'comment_created': datetime.datetime(2022, 9, 14, 13, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 970832685, 'comment_body': '> /cc @Nik-09 who might also be able to help here.\r\n\r\nAn email was sent to Nikhil -- waiting for his reply, meanwhile can you please take a look at the other comments !!', 'comment_created': datetime.datetime(2022, 9, 14, 13, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 971413819, 'comment_body': ""My earlier comment https://github.com/oppia/oppia/pull/15905#discussion_r963087759 is getting buried, so I'm leaving it again here:\r\n\r\n> Instead of checking whether you're currently inside an import, is it possible to check whether cast is being called? That seems simpler. e.g. we care about instances of cast(...) but not instances of just cast\r\n\r\n> I agree with your token-by-token traversal. I'm just suggesting that if you look for cases where cast is being called rather than just referenced, you wouldn't need to keep track of whether the linter is inside an import statement"", 'comment_created': datetime.datetime(2022, 9, 15, 0, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971415039, 'comment_body': 'Why is the assert raised upon the temporary file being closed rather than when `visit_module()` is called?\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 15, 0, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971464437, 'comment_body': ""Isn't the gap limit now 15 lines?"", 'comment_created': datetime.datetime(2022, 9, 15, 2, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971465345, 'comment_body': ""Shouldn't we be asserting that no messages are added?"", 'comment_created': datetime.datetime(2022, 9, 15, 2, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971466275, 'comment_body': ""ditto: don't we want `assertNoMessages()`?"", 'comment_created': datetime.datetime(2022, 9, 15, 2, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971483899, 'comment_body': '```suggestion\r\n    def test_raises_error_if_exceptional_types_are_combined_in_module(\r\n```', 'comment_created': datetime.datetime(2022, 9, 15, 3, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971484927, 'comment_body': ""ditto: isn't this 15 now?"", 'comment_created': datetime.datetime(2022, 9, 15, 3, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971485394, 'comment_body': ""Although, you do have to check whether `Any` is inside an import, so maybe it's simpler overall to use the same approach for `cast`. If that's your thinking, then I'm fine with leaving this as-is"", 'comment_created': datetime.datetime(2022, 9, 15, 3, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 971683004, 'comment_body': 'Yes, I agreed that we have to check whether `Any` is inside an import or not and I think it is a simpler approach if we do it for the `cast` as well. Thanks.', 'comment_created': datetime.datetime(2022, 9, 15, 8, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 971691794, 'comment_body': ""I'm doing this previously because in documentation we have an example where we are asserting on a closed temporary file.\r\nhttps://github.com/oppia/oppia/wiki/Custom-Pylint-checks#tests-for-hello-world-token-checker\r\n\r\nBut now, we are asserting on `visit_module()` -- but i didn't removed `temp_file.close()` because `temp_file.close()` allow us to close and delete the temporary file that was created using `tempfile.NamedTemporaryFile()`. If I'm not wrong."", 'comment_created': datetime.datetime(2022, 9, 15, 8, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 971691908, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 15, 8, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 971692027, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2022, 9, 15, 8, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 971692133, 'comment_body': 'Added', 'comment_created': datetime.datetime(2022, 9, 15, 8, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 971692272, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 15, 8, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 971692390, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 15, 8, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 973102829, 'comment_body': 'This is still `more_than_ten` ditto elsewhere', 'comment_created': datetime.datetime(2022, 9, 16, 14, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 973223532, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 16, 17, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '9831d98cb832dabea6442159ae3acde92680ac50', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab37284d1cbadd599823f93eedf6b9b21788abb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce9fe3f94b1d6861db567de06eddc6e99b64b8e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51a908ce045f6223d0aac77c2118986d4b573a6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1922d4ac70ae6b5e0cdefbc6faec756de72c3765', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08caebf6fbcda1fbf68a962d6883667c7610eea', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '853c91625ebcd587ca5c7d05f2907e174bdb0aa0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb61822302dd27e309ae13f35d5ef2121938182', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180346f44cd63fbfd90228681d0395681f47e852', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f694abaa8ebea0369c67561f47fe2923496ee09f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50749b464c8eef9e3d30119558e211b54b9ea990', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '697273a7357e335c8fcb41505aa21ba5e62777e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deba975099a345dde6a8c7d85fa3e62d7d36c4db', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff583c470e93f6e3b80fa1aaa3a66f51102f08d3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c86a58efcf32f81f74d0371c6580e1db99f1dc42', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fe4486c72a91cf7562907ab992b51d104d1708e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b4175a6c8a3864c15b4ff6c7cc26830456e12b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9614528f91f67e81fb2113f003afc654859bbb7a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94d22e715dd67f0e9e32c3caade0f84dd32af33', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eb42dd45f74c47a6d221eeb67fb402b43584a76', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b968feeb6491bc136ce9383ca4792ce943101f5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b2b199d3cbc72ec192b14f8c5b0de9f64d17688', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59fc1b3d317b752f8aed139b1f18e8b249b1b75', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '509a2f9d171071cad40e467c0229b3b50fc87420', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03884a09ca17746b29577a04421002ad4ef94c46', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba5ddb3fac77892b7724d1c40e5fc34547a467b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95574c818590758167f9e270cc749bcaa916626', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c14b5a33bc93c90ff42118425c9f8cdda053aeaa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff1d52e274aff8218adf0752c7b6689d2bd8d52', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ffd120b6c512187914fa3e668b40e842b56451f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e425dd13cc9edd82e51f91727bb520660e7cc035', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01f3f09e0a39d922bde0acd265c697e37419d7e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0276dfc65e7246534b6fa49304280d2630912792', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82cc62fc277f076dc037fd6d15a5317c6dc93cdc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f9855194dc5c4d01e3b7d9bf712afb9ac94c1ab', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b5f0849e02b7e8af3b6b9773b337d7be4d3d7d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c228ed1708b86d7b131577c243507899bd2d7f3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cede759baa3bf53c759a6f717cdf371b822ce59a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745da65330fb388e1c303dee09892ab168cf4fa6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08092a7b4aca80b94c32bc38e5df381ea4c95be8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25042d2e163af8353913e695be25f18002c81448', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb169bc8b550821fc7af1fd6dac49b6066857cc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e0a0f77b71f57b7103de765be04323bee34144', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb4dd8d41d9b3040fd8648e341d874fc0a2fe416', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca5d2df0cfc4baf3862b86ae903b37bd9a96a535', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f47e775e9f9f0910039e18ca21e348687f3e05a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0484de0bd8f09334943bc251e9a30e76d690fdd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349caac46e86c35010528912b6cb1e56c65a12f5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68cfd3f0e2c82049cdc8e6ec86a1b3e7eb0a2759', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618789c4b6aaa4b171d23e10a38c0740422e84c8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5609d0c440fb6e97fd802f5ab4582206c9d553a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df1bb2bf1614c879a39adbbd041d232998f7f94e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd78a322e985397be994ec06ba1c24ec1cf847718', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f0422506b4fca476e300642b00bdbbe138b8c4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbdf650fc1f3f29ef93166514e8fd60b9033aa0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b974eb8027161e9dd3de9f6a1874eb39ab27e89', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97cf9f81a1fb086dabcdd77a242c4acb4eff1a7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4978257253e882a34b51b305620e09df8ae083e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b162fe85cf6e86c4b5898d00e3aeca567c5a49dc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f39111c29f74330553e2c806daccc71d8531b594', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb45a8ecf92baa53672e7ba0f16f553c73d9bdc7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a08030983b61b507dd3a999624f2d13f806d69f5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017cca8fdb483ffe3cbe3829f780aa79c186f025', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bececfee2aaccd008651c380e31612b254299678', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa12204d9f7cf5ffc8f79559c7054b038e746c2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dba2bd6f3b772bd5b16172e05c16db61e4381d29', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93980c430d294564baa4cd240bd312fb26d957bb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4626071a0b3c4496390acbb956a57be1292650d7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd001c20b46676d690880b19cd15c20737e8b2c78', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb58d90572b76368d0fa0721540ce9436627665f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07dbc9cce188a285c624a5a0f80d6c8afa287d55', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a96106cf6ed17977f539fd6760d1bf5783f2650', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70885bbcd24a1b2f29e069f9174b3b0d537eed0e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a952c5935b78f9f8f899441d8d1e0b14f1e93f7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c9b127b0fd97c41c7fad00bd6dd6ba74926b21', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5c10391422f20d6aa6a323ab6744da5e2998ab', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ebb34e769d0e9871b0a77d413bcd175a7373b6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1f815579b35f4120c6d118cbb7d7ac45a6c3de', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ffc7e0748fcf830fbc3ee17ec4e3a084cef9cc2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9171ad8aaa53b1d3a8e51b46b99c48f8119581aa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4209d4ebf0085f94b04fbc6ce3d48e362893028', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f284d940e1bb8a382035b22d4738983efc0a453', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba03f0b4d4138955b5db0e45f8e097c5a2d4d3c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb4e3d73ef4c3aa985e5ff3c1ae12181139c50c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193d449db44863d0c85051e194c71304bfc62288', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da1efc4bb6f77a9b139f714421b39c23a33d2ce3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bf03ea29b363df2d8e1916e2a105ca161c6077e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '137692ad12830f4d558b882a5dc051ed3fd5bcc5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1bdbb8e50d344c1503d03792bad59615e1dcb36', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c5ae1c18606f694876f45c26f725e3836cfd1eb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2afb6e1aea71171ea27dd1251bf7def7b324a84', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5956d863099d35f5de91aa7bca6c4d68f3d61135', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '434a46cc32820b13ceb06bf9c5388568d02f505c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6496ee8c33620ee5e3be9aeae8ec9bf33654770d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a35c427878a7fb856e9506fb12b6f05c54cccaee', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f30995c30a28cc81071132b9eac2992a76ba018', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b5a2a21de72b69a283dac1a8e37d220f06e8004', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22515c1c4a11575518c9042fd8a7d8ba9eb38f07', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919e6a5b18ae0fc52407874ba1e6b6d401707145', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c50630ed034722d2507e4618178f1213005ea3f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e99a1264574c8e31a70ecffde427be34feb677', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda68839ef7b1e45f484a0da57636beae8fea210', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91268a0ad893a478cdc4eda5f83680c8f5f4eb81', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76c7607149d7d8277e23c5eceaf61bee8b69d852', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3277d55d3a2c2754646a34890acb6a6e7de8781e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7032a4c15c461231cf021786b84fdb5daeac237e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3d10d8a2fb0f39d4555cba3162386b117caaae0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e7ed672da854fc1a0149d4c5373e7aa8876d15', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c526d4c9c822ab87e41ec3e0a97f1d4dbcd52f4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ad23e0cae25003f1f9b529a4d4f49cad5faf35', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e6062f53305fac566ba6130b27507c01a2e3621', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4465817e99654be3cc4edebc30c29271eb60d9b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '548c750fb5f77dbd82c9c5e183e21d1bed831659', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb999c6bc5ebb40cc9c309e0f21606ea5c94741', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3c4c0245754551e2913dfcf9c4eee514e883e0d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3dbe88883d00d8760722060c3f60cb052e5334', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c7437b253c6a9f1e96ef1746bc7d5716b36d57', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c4781accc9ae6734d3b53abac55389f3b153f1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad7fad1bc19f1898604de657555ec1c6fac8137', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93047639019ea58cfdc1d34b6e6eaae0ef912bd2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36410b2c5d577a13bbd5f77fc9a8f259b02a47b0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f391f8376570ec3eec3c06f1c95087a457e1f49', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d13813aa9281d7ae4e8467d13e2e4028b8a6436', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb0f8d79a58b9a486269b4d360a9fd336f58736', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84652e2c488fa56025aecdeaad7efe816f9ad72c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bd22fe697b7f5ae0949ce027c24b6e4595d8b66', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07463a849172b209b4e194f7b78001c6d2f84ac2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6893c7fd9d94f7321e52cb6bd8451350d00dff2f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1038652810,Fixing ChangeDomain typing issue in the backend type annotations.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR narrows down the typing of change domain sub-classes, by introducing new classes which only keep the typing information about individual attributes that are going to be created on the object dynamically.
## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,15958,https://api.github.com/repos/oppia/oppia/pulls/15958,https://github.com/oppia/oppia/pull/15958,closed,3136,628,26,106,17,70,0,0,[],2022-08-27 15:11:34+00:00,2022-09-10 02:57:31+00:00,1165557.0,"13 days, 11:45:57","[{'comment_id': 957920767, 'comment_body': ""I think we shouldn't be introducing Any"", 'comment_created': datetime.datetime(2022, 8, 30, 1, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957921463, 'comment_body': ""I think this is not so great -- you'll want subtypes of EditExplorationStatePropertyCmd instead that condition on the property name, and should deal with the typing there, not here. I.e. cast the entire edit_state_property_cmd.\r\n\r\nDitto for the others."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957922362, 'comment_body': ""This seems wrong, it should be a union of the different customization arg dicts that we talked about for the other problem you are solving. Don't use Any."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957922573, 'comment_body': 'Same notes for the others.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957922910, 'comment_body': ""Confirming this rationale is fine in general, but please explain which specific fields are discontinued in this particular case (it's not clear)."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957923277, 'comment_body': ""This change seems wrong. If it's a list of hint_dict then it should be hint_dicts, and if it's a list of Hint domain objects then it should be hints. Important to be clear about which it is (you seem to be using them interchangeably above as well and redefining the variable `hints`, remember we want to avoid redefinitions)."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957924215, 'comment_body': 'To avoid this, every time you use isinstance, cast to a narrower union type (make a new subtype for answers that are lists, etc.).\r\n\r\nConceptually, that is what should be happening with isinstance, so we do it manually instead. But that is better logically than using `type: ignore`.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957924808, 'comment_body': 'Same comments as usual, define subtypes based on property_name and cast the whole edit_state_property_cmd object. Ditto below.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957925147, 'comment_body': ""In the naming everywhere, be sure to differentiate between objects and their dicts. Names of dict vars should end with _dict. Names of object variables shouldn't."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957925669, 'comment_body': ""Can you point to the latest domain object? I'm asking because I don't believe html is actually discontinued ... I thought it was still in use. Ditto everywhere else."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957925979, 'comment_body': 'We should not be using Any.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957926246, 'comment_body': 'Same notes as before about casting edit_state_property_cmd instead, and using subtypes.\r\n\r\nI think the general rule is that you should only cast to a explicit subtype.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957926337, 'comment_body': 'Deindent by 4.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957927753, 'comment_body': 'Similar notes, cast the edit_exp_property_cmd to the relevant subtype. I actually think you can then shorten the comment, e.g. ""This \'if\' condition forces edit_exp_property_cmd to have type XXX.""\r\n\r\nBtw, can you use literals in the subtype definitions (so, property_name is typed as a literal rather than an arbitrary string)?', 'comment_created': datetime.datetime(2022, 8, 30, 1, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957928410, 'comment_body': 'Thanks for adding this test!', 'comment_created': datetime.datetime(2022, 8, 30, 1, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957928556, 'comment_body': 'Deindent this and the following lines by 4.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957928575, 'comment_body': 'Deindent this and the following lines by 4.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957928738, 'comment_body': 'Start all docstrings with capital letters.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957928931, 'comment_body': 'Same notes as before.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 957928998, 'comment_body': 'Start docstrings with capital letters, here and elsewhere.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 959493371, 'comment_body': 'New subtypes are defined! now instead of casting to a particular type, we are casting to cmd type.', 'comment_created': datetime.datetime(2022, 8, 31, 11, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514087, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514132, 'comment_body': 'Addressed as mentioned above.', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514172, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514217, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514281, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514352, 'comment_body': ""using `This 'if' condition forces edit_exp_property_cmd to have type XXX` similar comment to reduce the comment length.\r\n\r\n> Btw, can you use literals in the subtype definitions -- done"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514407, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514461, 'comment_body': 'Now we are using explicit subtypes.', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514510, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514567, 'comment_body': 'https://github.com/oppia/oppia/blob/37ff4591fc7e57f273e54ac5a0226b8561086dbf/core/domain/state_domain.py#L1931\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514606, 'comment_body': 'Now we are using new subtypes, so no intermediate variables are needed. Hence this variable is removed.', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514681, 'comment_body': 'Instead of using two casts, I defined one cast at the top of the first `isinstance` with reasoning.', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514741, 'comment_body': 'Naming fixed!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514821, 'comment_body': ""Here 'html' field is missing from the latest domain object. This is also updated in the code comment. Here `new_value['translations_mapping'][content_id][language_code]` is of type `WrittenTranslationDict` and `WrittenTranslationDict` don not contain HTML field.\r\n\r\nhttps://github.com/oppia/oppia/blob/37ff4591fc7e57f273e54ac5a0226b8561086dbf/core/domain/state_domain.py#L1923"", 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514903, 'comment_body': 'New subtypes are defined!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959514973, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959521065, 'comment_body': 'As per the plan, a new PR is going to be raised for the customization args. So, currently, these interaction_customization_args are pointed to `CustomizationArgsDictType`\r\nhttps://github.com/oppia/oppia/blob/37ff4591fc7e57f273e54ac5a0226b8561086dbf/core/domain/state_domain.py#L68\r\n but once the PR is raised, the union of all  interaction_customization_args are named as `CustomizationArgsDictType` -- so that these customization args points to union of all  interaction_customization_args automatically.\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 31, 12, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 959521694, 'comment_body': 'Addressed!', 'comment_created': datetime.datetime(2022, 8, 31, 12, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960003973, 'comment_body': 'Um. In that case, it sounds like this code needs to be updated. Can we have it use the correct field instead? It looks like the current code is just wrong.\r\n\r\n/cc @kevintab95 ', 'comment_created': datetime.datetime(2022, 8, 31, 20, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 960005693, 'comment_body': 'I don\'t think this one is OK -- as usual, you need to cast to an explicit subtype. I also don\'t really see the condition that forces this to be List[List[str]] -- the only ""if"" here is whether ""new_value[\'correct_answer\']"" exists which is not sufficient to determine that.\r\n\r\nRemember, to cast, you can only rely on past code (and if conditions), not what happens in the future.', 'comment_created': datetime.datetime(2022, 8, 31, 20, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 960006323, 'comment_body': 'Is this a dict or a domain object? If the former, end the name with _dict.', 'comment_created': datetime.datetime(2022, 8, 31, 20, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 960007335, 'comment_body': 'Same as usual, should cast to a subtype of the `change` instead, similar to the above.', 'comment_created': datetime.datetime(2022, 8, 31, 20, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 960007795, 'comment_body': ""Hm ok. I think these are wrong. Let's update them to the correct ones. I'm a bit surprised this code is still working tbh.\r\n\r\nDitto below.\r\n\r\n@kevintab95 have there been any server errors related to this? (issues with converting drafts that have translations) I would guess it just results in a failed conversion?"", 'comment_created': datetime.datetime(2022, 8, 31, 20, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 960009430, 'comment_body': 'Indent by 4 only, not 8. Then you can do:\r\n\r\n```\r\n    state.update_param_changes(list(map(\r\n        to_param_domain, edit_param_changes_cmd.new_value\r\n    )))\r\n```', 'comment_created': datetime.datetime(2022, 8, 31, 20, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 960010179, 'comment_body': 'hint_dicts', 'comment_created': datetime.datetime(2022, 8, 31, 20, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 960621569, 'comment_body': "" > I think these are wrong. Let's update them to the correct ones\r\n\r\nI'm not sure to which field we should convert - I have sent an email to Kevin I hope he reply soon  "", 'comment_created': datetime.datetime(2022, 9, 1, 12, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960623313, 'comment_body': ""> Can we have it use the correct field instead?\r\n\r\nCan you please explain a bit more like what the correct fields are instead of 'Html'?"", 'comment_created': datetime.datetime(2022, 9, 1, 12, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960626553, 'comment_body': 'We cannot change the type at each isinstane because we are changing the value within the list. But yeah I  have changed the type at last if clause which makes more sense than the previous one PTAL!\r\n\r\nAlso please specify if you have any other idea! \r\n\r\n ', 'comment_created': datetime.datetime(2022, 9, 1, 13, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960627206, 'comment_body': ""It's a dict, name is changed !!"", 'comment_created': datetime.datetime(2022, 9, 1, 13, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960627920, 'comment_body': ""Done -- but i'm not doing this before because it was a deprecated command!"", 'comment_created': datetime.datetime(2022, 9, 1, 13, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960628075, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 1, 13, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960628179, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 1, 13, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 960631287, 'comment_body': 'Because looking at the code it is not clear to me which field should i replace here.', 'comment_created': datetime.datetime(2022, 9, 1, 13, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 961309401, 'comment_body': 'Er, when was it deprecated / in what PR? If you can link to that then I can let you know if we can delete it altogether.', 'comment_created': datetime.datetime(2022, 9, 2, 5, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 961314290, 'comment_body': 'https://github.com/oppia/oppia/pull/7036\r\n\r\nIn this PR we are introducing this deprecated command! PTAL!', 'comment_created': datetime.datetime(2022, 9, 2, 6, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 961327523, 'comment_body': ""OK, thanks for checking. Let's leave it as you currently have it. I think it is actually OK to delete this entire method but let's leave doing that to later since I think a fuller audit is worthwhile here. Thanks!"", 'comment_created': datetime.datetime(2022, 9, 2, 6, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 962381043, 'comment_body': 'Some context in case it is useful: Edits to written translations are no longer recorded as an edit to a ""state property"". It has its own commit cmd that is used in the translation editor as well as the contributor dashboard translation suggestion flow (see ""exp_domain.CMD_ADD_WRITTEN_TRANSLATION"".)\r\n\r\nWe maintained support for existing suggestion / changelists on the server, see the apply_changelist method here:\r\nhttps://github.com/oppia/oppia/blob/d4b06399ad2859df6917c5e18ce9024e452351d0/core/domain/exp_services.py#L637-L642\r\n\r\nFor this specific case, could we add a check to see if ""data_format"" matches HTML and only then run the HTML conversion function?', 'comment_created': datetime.datetime(2022, 9, 4, 23, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 962768058, 'comment_body': '> could we add a check to see if ""data_format"" matches HTML and only then run the HTML conversion function?\r\n\r\nCan please explain this change a bit more @kevintab95 !', 'comment_created': datetime.datetime(2022, 9, 5, 10, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 963565607, 'comment_body': 'Sorry if that wasn\'t clear, let me try again.\r\n\r\nThe content of written translations can be of different types e.g. HTML, unicode, set of strings etc. (see state_domain.WrittenTranslation) -- ""data_format"" field stores this info. In this code, we seem to be assuming that there will always be a \'html\' key in the dict, this may not be true -- it may be that in the previous schema prior to introduction of data_format, we used the html key (see [comment](https://github.com/oppia/oppia/blob/d65bea24b446331803bd06faed2772905e61c535/core/domain/state_domain.py#L2369-L2373)) but we no longer use it. So we could check if there is a \'html\' key and only then update it.', 'comment_created': datetime.datetime(2022, 9, 6, 10, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 963703424, 'comment_body': ""Thanks for the clear explanation -- As suggested I have added a check for 'html' key. PTAL!"", 'comment_created': datetime.datetime(2022, 9, 6, 13, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 965603920, 'comment_body': 'Written translations are no longer treated as a ""state property"" in either the CD or in the translation tab in the editor. We now use a dedicated change command that records the change in the content as well as the ""data format"" corresponding to the content (e.g. HTML, unicode, set of unicode, so on). That said, in the apply_change_list function, we still maintain support for the old CMD so either accepting suggestions or applying draft changes with the older ""state property"" CMD in the server would not result in an error.', 'comment_created': datetime.datetime(2022, 9, 8, 7, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 965615667, 'comment_body': ""Ok - So, I think we don't need any change here! because this thing will not result in an error. Thanks."", 'comment_created': datetime.datetime(2022, 9, 8, 7, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966177552, 'comment_body': 'else raise Exception, I suppose?', 'comment_created': datetime.datetime(2022, 9, 8, 16, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 966192887, 'comment_body': ""Ahh, I don't think so!!\r\n\r\nBecause as per the comment https://github.com/oppia/oppia/pull/15958#discussion_r963565607, other values can also come here. The main motive of this function is that only convert HTML values, not others -- so if another type of value come here we should just pass it."", 'comment_created': datetime.datetime(2022, 9, 8, 16, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966196541, 'comment_body': 'Oh I see! Yes I agree with you, thanks! ', 'comment_created': datetime.datetime(2022, 9, 8, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 966376588, 'comment_body': ""Could this be replaced by something like: retrieve the suggestion; check its type; raise error if it's the wrong type?"", 'comment_created': datetime.datetime(2022, 9, 8, 20, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 966377516, 'comment_body': ""Ditto here, I feel this isn't an appropriate use of cast() since it relies on unchecked assumptions."", 'comment_created': datetime.datetime(2022, 9, 8, 20, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 966686556, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 9, 6, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 966686604, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 9, 6, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '107b844df55cfe6f13e228fd8c34d5c6eeb73888', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ce744a2760b0be5188d949f7117c321f51b26f9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b8d65c4f3ae541b9b0951fb04082a77b7878fe', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '280f018ef123eafdd587cd94f9ad47fccd44f372', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afa4ccde287c94914bf8ff8f4879133b917801da', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2ec544b50ed8353ddbc50a1122c742e0ea669f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65b8b87ef766c9cb91fabed071ffd298c99a0ea0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce76214b3c655d5b943bca6ebf6ed567019744c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc83652c0ca85e0cb6530c61d2fc98a273690c5a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64d1a11f6a684080e45ea05d31fc553a8108bfa3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753c3e42f22efec2d4cdaf0a6a80f1380e648c42', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50f262d778423462a23cfa190fedded83cea005d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a3f5b9f87920a3eb551b7aa5fdb71e0b8aeae71', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb20c8f6c53b70fbd665f83ad85b2b4c92b5cc3b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '813b1d6782a26b6da6892e74d71893fdb4022a8f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20be74962b12f1fafaebdc5a1d74e9a60ae62d47', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73f3496a2e4b45948ab4307a28216cc1c309439', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6404eb7e3a005b23dc39aa37fe5e1f05267ec252', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1601ea38461246c214f6a39a92ee0b934060aa95', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537854840c707d88304bd44708f6988070f5c743', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '282c1decc74756fc8a959afe111d762746813397', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10ec99ecc00fdcf41fa2b39c11a75326829024d0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60be3f443737d36deb9290fd878a3417bf69a858', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '551eb786c33b62603813b513543abccebc1965ea', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22b0433f61eb1421884a2cbf9c20fafb336af4ce', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '575e9b073b64868109feaa06ab3e9916f58f6824', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '459e479bf2ec3db837bfbf23d5faa046d90798b2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7d11d1b745bca001cf3246d8f0ab0478ed36f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c33d146ec5e2bdd7b6e12675a97a6a2805f990b2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '587d3b595706f573f5dbfb32f4680842a97f04eb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f23b2009e69118a7ff575c4d04ac35053fe8707', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c65cef61c0b5cccd8bd130c3fa0aa3ab28a76145', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e5beb8c46301c98d492e7c12fa96198a40f3a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab55641058d7049a42cde0c6e0f163a30eb25ee6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa981836a3e3ce16b2ef8192ca2af01618d3fe29', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae951a7b08b4ea70e15ac892e893794b7aa3a8f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be303e2c2c32b041948a6b7f21ea9bee6e770756', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8674ad2654de7484ab3df72aba6e6c628a0ead', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f547b41036670e7b336a579db0a7267becdaf88f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02276fbcd5c63213e600c9f024e7ac2b59c090e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f54581c508db657a71230a5011aeb52c7e2935b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc223142db61116498cb97e1769055c85fd6ccbf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b257b1fce30e1e9cdda5e2d74d9ee051bfa407', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862d6cb616b832f030e9e15c88373a12ea600416', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adcfa6d54c5a3b1bf77aba51f16b636e913b8083', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf5e246e49826ae1785ee408220c84f2ffe9de4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33354c5e7fb39effb78b79f39cb35b6957d8bb67', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f4572aa6abbd9fae52ef1d236aa7fa3f121d3de', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e5f26bdb1d2872c44083e8d6d7f388ced75eac', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c41d1d6b5accac89cf0e2b7a80c0854ee13a88', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730cb162162c2359eda1f46c86e18213fe4a3b8d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '468619650e30baa1632873f6839130313bfcbf89', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '717daffe2f2f6dcd4d279138a1234178aa23be51', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2b238a60a6a817e2e05e9633a4fd2858ed0ccbf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea756ad778b542306f645521eea3990ad005456', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c53456a7d7d23dab962f3920c5437186229407ca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a5aaa48c3b6f6a27843974f6e7bde4c14ecb007', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6fef3d395e2f56c8b2c801f445bd05052f3a662', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0064deb8436f7b5cec29d39dda72d06d16346bca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97dd0df8bfd27f41cf9214327e578e7a335ee397', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0830ab0006348b5856512924a3d28b05a2d976d4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a085dd3226d1fee642d846b210f664be68b5f917', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ad0a97c62da5f2432f8a2f93f15a554df25fe4f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0599648a802a42dc3cdc5c24c3a825b42ba46c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef285c5ab590b38e8bb8f4e86e5816973722e57', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5625805c63763b72a81dc91c8131cb2d6585aa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d287771effcf432ee5c7f1038fd64c00ae9e4f1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c95eaf8f35a093eb08eeb39f5ff3ac6839238ff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '654feab429805999fcfb741b3976083fefe68198', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a2ab5cf85b9380a54bc64e216e41f7c73d9ac2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5662b17ea3ad13f15bb152a3d96b1105ce6c7438', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2229b19364655843a5b1212ca4e5f037d132426e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057992d8abbf9fdf2b8a26c76d0053d73b5c7c41', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe5f7b0c2fa617d164c7ab1c40360ee052654b6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4b4aef6f0a4bba55f47c218f33eb93f3df736f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ffa677bf58da2ede335ce59eae59fe35b474b62', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f002619840b2bb7e8eecb7f85418b54f1a0168', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e61d3ca69b93ef774c5e391e574aeeb564d698a2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85effa68467c26d5f6cca817a5ef4a1503d6c038', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8e4fe7b9e33ff18445d7ad561bbf83d911e5eec', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '805678a6db697688fabcb55685d8b7a86f126aea', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2a39b5ea6bfd329e7d84df794259cdeeb4891d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1b80852ea77b233646c9f8f2cc6b9e45a5723f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d64adc1f9fdf7ce3e4ea09ca902bf4edf85068c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45430321dc9548a1ddd18f83dc2f8b279c0ce29c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19aea2169c8adee3909f207f3393840cc591ba57', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd35ec87b817f1ac2b7384b7d6284011b63ccc53d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd7ad2305b885de1858b36bf4f209b577eee94c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af13b734db4f3c013e789687077a011b0cef4f1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '528bee943c2c8775094dc908d8d379b7444df355', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d7e92aaa159d5eb3f0e9c599c8d6739449718a2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df45a23f1102c9318f869a0ff88b6ec1a8f7ee6e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b950a39221c9afef2f4b498b09bff91c72549447', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2098f0e7fdb9e46d94b653c525a1dc036833b430', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40384e64c0b8c2ab3ac395b7aa3b0c638dc469a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09b805ca8a4edfae4b64fd8d55f2d380917b0fe', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79cbc9f572872c536d462429d5ffcb031b27f47b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99f4c9dc690373469c69a24f5fb7070e94fa729', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34b7336e5b9a6987fd18bd5a43fd1202bd9c4d0e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f527071119b85a249a8f2f8359f8c712d49e81', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9bec00c70deabbf244e138cdfa2851ef84d4318', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c39b1d3441cf811f26ed163a7ccd6463fc831f1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79327a216b98c827fea553c1914410102bb7779a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6179cd2a08a0c613f4bbe3a1c36b6f7c8fa1779', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '429ffd1ab5ff2c68df3f15b72f5491cbddb2fb65', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94cd213a42bfd9f45a88d2f690331bedd9abb229', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1045423440,Fixes some assert issues.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR add reasons for asserts in the codebase if they are necessary, otherwise handled them by throwing an error. 

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [X] The linter/Karma presubmit checks have passed locally on your machine.
- [X] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [X] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.
<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,15980,https://api.github.com/repos/oppia/oppia/pulls/15980,https://github.com/oppia/oppia/pull/15980,closed,354,118,18,20,11,32,1,1,[{'name': 'PR: LGTM'}],2022-09-03 07:39:44+00:00,2022-09-09 17:47:03+00:00,554839.0,"6 days, 10:07:19","[{'comment_id': 963094244, 'comment_body': ""Put quotations marks around 'translation, 'voiceover'."", 'comment_created': datetime.datetime(2022, 9, 5, 19, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963094357, 'comment_body': ""Add `\\'` quotation marks, as described in the previous comment."", 'comment_created': datetime.datetime(2022, 9, 5, 19, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963094514, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 9, 5, 19, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963094536, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 9, 5, 19, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963094816, 'comment_body': 'Not sure I buy this. If it happens in prod for any reason (maybe data corruption), should we raise exception or handle this gracefully? @paprajapati9 @aks681 ', 'comment_created': datetime.datetime(2022, 9, 5, 19, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963095229, 'comment_body': ""A better way to do this is probably:\r\n\r\n    retrieved_topic_similarities_entity = (\r\n        recommendations_models.TopicSimilaritiesModel.get(\r\n            recommendations_models.TOPIC_SIMILARITIES_ID, strict=False))\r\n    topic_similarities_entity = (\r\n        retrieved_topic_similarities_entity \r\n        if retrieved_topic_similarities_entity is not None\r\n        else ...)\r\n\r\nand then you shouldn't need this assert."", 'comment_created': datetime.datetime(2022, 9, 5, 19, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963095390, 'comment_body': 'Just restructure:\r\n\r\n```\r\nif not cached:\r\n    if state_schema_version is None:\r\n        ...\r\n    else:\r\n        ...\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 19, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963095442, 'comment_body': 'No story model exists for ...', 'comment_created': datetime.datetime(2022, 9, 5, 19, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963095518, 'comment_body': 'No story model exists for ...', 'comment_created': datetime.datetime(2022, 9, 5, 19, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963095609, 'comment_body': 'Ditto (capitalization, grammar)', 'comment_created': datetime.datetime(2022, 9, 5, 19, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963095635, 'comment_body': '\r\nDitto (capitalization, grammar)', 'comment_created': datetime.datetime(2022, 9, 5, 19, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963095719, 'comment_body': 'Same notes as before.', 'comment_created': datetime.datetime(2022, 9, 5, 19, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 963266338, 'comment_body': 'Hmm... on second thought we should do that. @sahiljoster32 can you please raise an exception saying `Expected learner group user model to exist for the given user_id` if model is None. Thanks!', 'comment_created': datetime.datetime(2022, 9, 6, 5, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'paprajapati9', 'type': 'User'}, {'comment_id': 964093648, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964093711, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964093780, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964093865, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964093957, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964094009, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964094060, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964094115, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964094176, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964094235, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964094293, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 6, 19, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964098413, 'comment_body': 'This one is done but there are some other asserts that are introduced by you -- in PR https://github.com/oppia/oppia/pull/15840\r\n\r\nhttps://github.com/oppia/oppia/blob/dc57146488ae724111b012e5d5c88d06faf537a0/core/domain/learner_group_services.py#L616\r\nhttps://github.com/oppia/oppia/blob/dc57146488ae724111b012e5d5c88d06faf537a0/core/domain/learner_group_services.py#L541\r\n\r\ncan you please give a reason or confirm that exception is expected here !!!', 'comment_created': datetime.datetime(2022, 9, 6, 19, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964098575, 'comment_body': '@paprajapati9 PTAL!', 'comment_created': datetime.datetime(2022, 9, 6, 19, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964254551, 'comment_body': '...is saved. Even if we create an exploration, a commit occurs.', 'comment_created': datetime.datetime(2022, 9, 6, 23, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 964301185, 'comment_body': 'No topic model exists for ...', 'comment_created': datetime.datetime(2022, 9, 7, 1, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 964380062, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 7, 4, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964380092, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 7, 4, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 964455959, 'comment_body': 'Yes @sahiljoster32, please add an exception saying `Expected learner group user model to exist for the given learner invited to join the learner group` at both places. Thanks!', 'comment_created': datetime.datetime(2022, 9, 7, 6, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'paprajapati9', 'type': 'User'}, {'comment_id': 964550407, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 7, 8, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '7ec3ff3efe179403d9e610d04d5cc31b8cb8c904', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04ea524297d32ca7ee47b9d62fb2fdbf99a61d87', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf00edf6d6dd5d3d0fae3609b21d6d2d3e63e0aa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b05d50c14d9248d25d8eb58d64712ec22aaf13', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c840b423bf7bb1bb281868cc6fea855c632553d5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26c629d06be4b3e0b3e574e4b2ad9b9d66b1bd7a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa5f8d5dfa3e91fdd73969cd197c092b49896e1d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a582c7e3023ea0428137abe02b2779a2e0c5d7a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd322038f9afe826ede538431de2ca8a68a3f6df8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd092f1579ac3f643128f87fceac9d7a26f110509', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380828dda311b353ea3a23e94cdbc5025055346a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f646400b8ea90355c7a3345eedc2f9da72fc9c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f22ee4b7e8a7e4eac91f67f4c20d3236ba31f92', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96d2746b985f9ed402b57315b0d690690ed2655', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91866efd6a73c6b89487f7742120a25600455976', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e28dc2ee72382f51a4d7b36bef2f3733a758a04', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18cb2320c1ad2ab7ca89dff7ae831c4ffbf83861', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe304c011d4bcc9534d2140aac99fac2d79d759d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf018c0dd619f3b6d18c0c82020b3204a363e3e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a30eaa724ecbb3f05df7a027d469a324e975cca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1024116268,Added Mypy type annotations ~ miscellaneous,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following:
- This PR covers 2 files that are expected to cover by other contributors, but due to the inactivity of those contributors I de-assigned them and covered those files: 
  - stats_services.py
  - topic_services.py
- This PR fixes some old overload signatures.
- This PR introduces the final keyword for all the constants that are defined in the storage directory.


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,15870,https://api.github.com/repos/oppia/oppia/pulls/15870,https://github.com/oppia/oppia/pull/15870,closed,2432,1471,86,59,35,86,1,1,[{'name': 'PR: LGTM'}],2022-08-11 17:10:07+00:00,2022-09-06 16:20:05+00:00,2243398.0,"25 days, 23:09:58","[{'comment_id': 944409537, 'comment_body': '```suggestion\r\n            thumbnail_filename: str|None. The filename for the topic thumbnail, or\r\n                None if no filename is provided.\r\n            thumbnail_bg_color: str|None. The background color for the thumbnail, or\r\n                None if no background color provided for the thumbnail.\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 12, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 944428821, 'comment_body': 'Lest use strict and remove the error below.', 'comment_created': datetime.datetime(2022, 8, 12, 12, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 945087941, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 5, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945087949, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 5, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945156654, 'comment_body': 'The type of `issue_customization_args` seems to be repeated multiple times in this file. Should we make it a type var?', 'comment_created': datetime.datetime(2022, 8, 13, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 945156793, 'comment_body': 'Same as above\r\n\r\nShould we use the type var mentioned above?', 'comment_created': datetime.datetime(2022, 8, 13, 14, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 945157852, 'comment_body': ""Should we change the name since this list will not contain 'None'?"", 'comment_created': datetime.datetime(2022, 8, 13, 15, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 945158454, 'comment_body': 'Same as above.\r\n\r\nShould we change the variable name since `playthrough_model` is not `None`?', 'comment_created': datetime.datetime(2022, 8, 13, 15, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 945175212, 'comment_body': 'The methods `update_timestamps_multi` and `put_multi` can only accept `non-none lists`. So, if we keep the original name then at line 543 and 544 it will contradict the argument type because then `playthrough_models` have List[Optional[]] type.', 'comment_created': datetime.datetime(2022, 8, 13, 18, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945175440, 'comment_body': 'If we keep the original name then at line 942 it will contradict the argument type because at line 942 `delete_multi` can only accept `non-none lists`.', 'comment_created': datetime.datetime(2022, 8, 13, 18, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945177628, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 18, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945177632, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 13, 18, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945212341, 'comment_body': ""I don't think I understand this. Isn't the revert case handled in the block of code above?"", 'comment_created': datetime.datetime(2022, 8, 14, 0, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945212515, 'comment_body': ""Why can't this be done using the type of issue_customization_args? (if we make it a typed dict with named keys, and specify the type of issue_customization_args['state_names'])? Ditto below in several places."", 'comment_created': datetime.datetime(2022, 8, 14, 0, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945212605, 'comment_body': 'Can you update the docstring too? It does not address the None case.', 'comment_created': datetime.datetime(2022, 8, 14, 0, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945212734, 'comment_body': 'I don\'t think you need the ""with_none"" naming here. You assert immediately after that it\'s not None.', 'comment_created': datetime.datetime(2022, 8, 14, 0, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945212790, 'comment_body': 'dif is misspelled -- should be diff', 'comment_created': datetime.datetime(2022, 8, 14, 0, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945212819, 'comment_body': 'Same thing re the name, ditto below. I think if it\'s just a single item (not a list) and you assert it\'s not None immediately after, then you don\'t need the ""with none"" in the name.', 'comment_created': datetime.datetime(2022, 8, 14, 0, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945212963, 'comment_body': 'Can the return value not include Any?', 'comment_created': datetime.datetime(2022, 8, 14, 0, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945213017, 'comment_body': ""Why are we adding * here and below? I'm not familiar with this syntax and it might need some explanation if we aren't using it elsewhere."", 'comment_created': datetime.datetime(2022, 8, 14, 0, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945213079, 'comment_body': 'Ditto here and below.', 'comment_created': datetime.datetime(2022, 8, 14, 0, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945213108, 'comment_body': 'Can the arg not include Any (e.g. use TypedDict)?', 'comment_created': datetime.datetime(2022, 8, 14, 0, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945213137, 'comment_body': 'Ditto here and below.', 'comment_created': datetime.datetime(2022, 8, 14, 0, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945213224, 'comment_body': 'Same concerns about Any.', 'comment_created': datetime.datetime(2022, 8, 14, 0, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945213246, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 8, 14, 0, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945256447, 'comment_body': 'Changed to the variable type mentioned in stats_domian.py', 'comment_created': datetime.datetime(2022, 8, 14, 9, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256458, 'comment_body': ""While calling this method we are providing JSON values whose type is Any. So that's why Any is used here and there is no domain object which matches this function's argument.   "", 'comment_created': datetime.datetime(2022, 8, 14, 9, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256623, 'comment_body': 'Basically, we are using * to separate named arguments from keyword arguments. By this I mean if we need to use strict then we have to use it as a strict keyword argument if we use it like a normal named argument then MYPY will throw an error. So, to force developers to use strict as a keyword argument we used * here.\r\n\r\nCurrently, all the overloads that contain a strict argument, are following the * pattern. \r\nIn this PR, these are the only places where * is not implemented.', 'comment_created': datetime.datetime(2022, 8, 14, 9, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256638, 'comment_body': ""I didn't find proof of any other type so I changed this to List[str]."", 'comment_created': datetime.datetime(2022, 8, 14, 9, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256670, 'comment_body': 'Same as above, name is changed to `exploration_stats_domain_object`', 'comment_created': datetime.datetime(2022, 8, 14, 9, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256673, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 14, 9, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256676, 'comment_body': 'We cannot revert to the previous name because above we are already defining `exploration_stats` and there its type is `ExplorationStats`. But here we are providing `Optional[ExplorationStats]` so I changed the name to `exploration_stats_domain_object`.', 'comment_created': datetime.datetime(2022, 8, 14, 9, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256713, 'comment_body': 'Can those JSON values not have type Any? Somewhere down the line there should be a type certainty.', 'comment_created': datetime.datetime(2022, 8, 14, 9, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945256729, 'comment_body': 'Docstring Updated!', 'comment_created': datetime.datetime(2022, 8, 14, 9, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256732, 'comment_body': 'We cannot use TypedDict here because:\r\nIn issue_customization_args, we are providing an arbitrary number of keys with different types of values.\r\neg: here we are providing str and int \r\nhttps://github.com/oppia/oppia/blob/3c8d9fa916bdd40105a042915162bdccb8ec6a62/core/domain/stats_services_test.py#L1018\r\n\r\nHere we are providing only one key `state_names` whose type is Dict[str, List[str]]\r\nhttps://github.com/oppia/oppia/blob/3c8d9fa916bdd40105a042915162bdccb8ec6a62/core/domain/stats_services_test.py#L1068\r\n\r\nHere, we are providing different key `time_spent_in_exp_in_msecs`\r\nhttps://github.com/oppia/oppia/blob/3c8d9fa916bdd40105a042915162bdccb8ec6a62/core/domain/stats_domain_test.py#L749', 'comment_created': datetime.datetime(2022, 8, 14, 9, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945256734, 'comment_body': ""> Isn't the revert case handled in the block of code above?\r\n\r\nYes we are handling the revert case above, but that was only for the case where `revert_to_version` is not none and `exp_versions_diff` is none.\r\n\r\nBecasue it is not a private method so I think this can be called in other places ( may be in the future ) and there we provide both `revert_to_version and exp_versions_diff` as none. So in this case, I think error makes sense, right?\r\n"", 'comment_created': datetime.datetime(2022, 8, 14, 9, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945257334, 'comment_body': 'Reason mentioned above', 'comment_created': datetime.datetime(2022, 8, 14, 9, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945257345, 'comment_body': 'Reason mentioned above', 'comment_created': datetime.datetime(2022, 8, 14, 9, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945258473, 'comment_body': 'Reasoned above', 'comment_created': datetime.datetime(2022, 8, 14, 9, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945259529, 'comment_body': 'Here, we are calling `_reconstitute` method:\r\nhttps://github.com/oppia/oppia/blob/3c8d9fa916bdd40105a042915162bdccb8ec6a62/core/storage/base_model/gae_models.py#L933\r\n\r\nAnd providing `snapshot_model.content`, which is a JSON property. If we see the description of `content` then it just says JSON blob nothing else.\r\nhttps://github.com/oppia/oppia/blob/3c8d9fa916bdd40105a042915162bdccb8ec6a62/core/storage/base_model/gae_models.py#L1805', 'comment_created': datetime.datetime(2022, 8, 14, 9, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945259887, 'comment_body': '> Somewhere down the line there should be a type certainty\r\n\r\nFrom docstring and usage, we are sure that it is going to be a Dict.', 'comment_created': datetime.datetime(2022, 8, 14, 9, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 945260619, 'comment_body': ""I don't see the condition on exp_versions_diff above. When reading the code I think the above code (lines 316-330) executes and returns if revert_to_version is true-y. Is that not correct?\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 14, 9, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945260811, 'comment_body': ""If I remember correctly, there are 3 different types of issues, and each of them has a specific set of customization args. See extensions/issues.\r\n\r\nBtw, don't justify your arguments with code from the tests. The tests may be wrong. Justify your arguments with code from the main code since that is what gets run in production."", 'comment_created': datetime.datetime(2022, 8, 14, 9, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945261219, 'comment_body': ""No, don't do that -- typically we don't use the _domain_object suffix, so this is theoretically still exploration_stats. So if you do this it will create confusion about whether these are the same or different.\r\n\r\nInstead, if you don't want to use the same name for both, then this means the two variables are conceptually different things. So, name them accordingly. E.g. the first one seems to be something like exploration_stats_for_new_exploration and the second one is presumably something else -- add some context to the variable names to differentiate them clearly."", 'comment_created': datetime.datetime(2022, 8, 14, 9, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945261312, 'comment_body': ""See my concern above with this, it applies here too.\r\n\r\nIn general don't use the suffix _domain_object."", 'comment_created': datetime.datetime(2022, 8, 14, 9, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945261400, 'comment_body': 'Small note: empty is misspelled here.', 'comment_created': datetime.datetime(2022, 8, 14, 9, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945261589, 'comment_body': ""That's interesting. I feel like folks will not have any idea what this means and it's not straightforward to search for it. Could you perhaps add a comment at the top of each block of overloads explaining this? If you prefer you could also write a short blurb and point people to the relevant Mypy docs page."", 'comment_created': datetime.datetime(2022, 8, 14, 9, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945261963, 'comment_body': 'I see, interesting. Actually, all our JsonProperties have strict types (for a given schema version) so it\'s a bit of a shame this info gets completely lost. Can we annotate it somehow in the storage layer and assert at that point that it follows the type in question?\r\n\r\nThat said, I think it\'s fine to have Any here for now, for the reason you mention. I suggest doing all of the following:\r\n\r\n(1) Add a comment here to explain what you just explained above, because that is necessary for justifying why it\'s not possible to type this strictly.\r\n\r\n(2) Discuss with @vojtechjelinek what exactly should be done about this going forward -- ideally we can maintain a type mapping for each JsonProperty in each model that maps the relevant schema version to the expected schema for that version.\r\n\r\n(3) File an issue explaining the plan in (2) that both of you come up with, so that we don\'t lose track of this ""hole"" in the typing. Add a TODO to that issue here.', 'comment_created': datetime.datetime(2022, 8, 14, 9, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 945349139, 'comment_body': 'I think that as this is standard Python 3 syntax (although maybe not widely used), we shouldn\'t add comments for all occurrences of this (and if so then only some kind of blurb), I tried searching for ""python 3 star as function argument"" and the [first link](https://stackoverflow.com/questions/14301967/bare-asterisk-in-function-arguments) (at least for me) shows the explanation.\r\n\r\nShould we maybe announce that we started using this syntax is some places through mailing list and just keep it without explanation? ', 'comment_created': datetime.datetime(2022, 8, 14, 22, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 945349347, 'comment_body': ""Ah, sorry, I thought this was some mypy thing and didn't realize it was standard Python 3.\r\n\r\nIn that case I agree with what you suggest. Thanks!"", 'comment_created': datetime.datetime(2022, 8, 14, 22, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 946822017, 'comment_body': 'ditto as above', 'comment_created': datetime.datetime(2022, 8, 16, 14, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 946822607, 'comment_body': 'So what I meant to say was, that we are asserting that playthrough_model is not None.\r\nSo should we consider renaming playthrough_models_with_none to something meaningful since it wont contain None?\r\n\r\nDitto elsewhere', 'comment_created': datetime.datetime(2022, 8, 16, 14, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 947522552, 'comment_body': 'I think we have already discussed this before (https://github.com/oppia/oppia/pull/15640#discussion_r913354208).', 'comment_created': datetime.datetime(2022, 8, 17, 7, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947528706, 'comment_body': 'Done, we can change the name here --  because we are updating the model and then putting it inside the method. \r\nSo, older ones are named `playthrough_models`, and new ones are named as  `updated_playthrough_models`.', 'comment_created': datetime.datetime(2022, 8, 17, 7, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947529679, 'comment_body': 'We cannot change the name here, because we are not updating the model in any way instead we are just fetching the models and passing it to the methods. ', 'comment_created': datetime.datetime(2022, 8, 17, 7, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947754632, 'comment_body': 'If we do Typedict for each `issue`, then we have some of the following issues:\r\n\r\n1. As we know, Typedict only works with static keys ( by this I mean fetching a value from a dictionary using a string literal as we are doing above `playthrough.issue_customization_args[\'state_names\']` ) so if we use any string variable here then MyPy throws an error like\r\n```python\r\nclass EarlyQuitIssueDict(TypedDict):\r\n    """"""dash""""""\r\n\r\n    state_name: Dict[str, str]\r\n    time_spent_in_exp_in_msecs: Dict[str, int]\r\n\r\nearly_quit_dict: EarlyQuitIssueDict\r\n\r\nearly_quit_dict[\'state_name\']   # MYPY will work fine.\r\n\r\nearly_quit_dict[some_string_variable] #here MYPY will throw following errors.\r\n\r\n\r\nTypedDict key must be a string literal; expected one of (\'state_names\')  [misc]\r\nTypedDict key must be a string literal; expected one of (\'state_name\', \'time_spent_in_exp_in_msecs\')  [misc]\r\n```\r\n\r\nand there are places in the codebase where we are doing this\r\nhttps://github.com/oppia/oppia/blob/a2fb9adca12ee1949aa2e1940f1b58f2a15f4d22/core/domain/stats_services.py#L374\r\nhttps://github.com/oppia/oppia/blob/a2fb9adca12ee1949aa2e1940f1b58f2a15f4d22/core/domain/stats_services.py#L375\r\n\r\nTo suppress the errors we have to use ignores.\r\n\r\n\r\n2. Currently, we are using assert only for value ( as we are doing above `playthrough.issue_customization_args[\'state_names\'][\'value\']` )\r\nBut if we define each issue\'s TypedDict and assign the union of all to the `issue_customization_args` attribute of Playthrough then it will also throw an error and to suppress the error we have to use cast. Like below:\r\n```python\r\nclass CyclicStateTransitionsIssueDict(TypedDict):\r\n    """"""dash""""""\r\n\r\n    state_names: Dict[str, List[str]]\r\n\r\n\r\nclass EarlyQuitIssueDict(TypedDict):\r\n    """"""dash""""""\r\n\r\n    state_name: Dict[str, str]\r\n    time_spent_in_exp_in_msecs: Dict[str, int]\r\n\r\n\r\nclass MultipleIncorrectSubmissionsDict(TypedDict):\r\n    """"""dash""""""\r\n\r\n    state_name: Dict[str, str]\r\n    num_times_answered_incorrectly: Dict[str, int]\r\n\r\n\r\nAllowedIssuesDict = Union[\r\n    CyclicStateTransitionsIssueDict,\r\n    EarlyQuitIssueDict,\r\n    MultipleIncorrectSubmissionsDict\r\n]\r\n\r\nclass Playthrough:\r\n    """"""Domain object representing a learner playthrough.""""""\r\n\r\n    def __init__(\r\n        self,\r\n        issue_customization_args: AllowedIssuesDict,\r\n    ):\r\n\r\n        self.issue_customization_args = issue_customization_args\r\n\r\n# Now considering the above line -- that was mentioned in this thread.\r\n        if \'state_names\' in playthrough.issue_customization_args:\r\n            state_names = (\r\n                playthrough.issue_customization_args[\'state_names\'][\'value\']) # Here MyPy throws an error, because issue_customization_args is of Union type (AllowedIssuesDict), so it will throw the following error.\r\n```\r\nerror log:\r\n```\r\ncore/domain/stats_services.py:494: error: TypedDict ""EarlyQuitIssueDict"" has no key \'state_names\'  [misc]\r\ncore/domain/stats_services.py:494: note: Did you mean ""state_name""?\r\ncore/domain/stats_services.py:494: error: TypedDict ""MultipleIncorrectSubmissionsDict"" has no key \'state_names\'  [misc]\r\n```\r\nThe cause of errors is that `issue_customization_args` is a union of `AllowedIssuesDict` and each dict that was mentioned in AllowedIssuesDict does not contain the same keys.\r\nSo, to suppress these errors we have to use casts and make `issue_customization_args` of the appropriate TypedDict type before using it.', 'comment_created': datetime.datetime(2022, 8, 17, 10, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947754761, 'comment_body': '> I think the above code (lines 316-330) executes and returns if revert_to_version is true-y. Is that not correct?\r\n\r\nYes, it is correct..\r\n\r\nError message is changed from `ExplorationVersionsDiff cannot be None when the change is a revert.` to `ExplorationVersionsDiff cannot be None when the change is not a revert.`', 'comment_created': datetime.datetime(2022, 8, 17, 10, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947754824, 'comment_body': 'Name changed PTAL!', 'comment_created': datetime.datetime(2022, 8, 17, 10, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947754896, 'comment_body': 'Name changed PTAL!', 'comment_created': datetime.datetime(2022, 8, 17, 10, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947754952, 'comment_body': ""Ok, I'll send an email to the oppia-dev once this PR gets merged."", 'comment_created': datetime.datetime(2022, 8, 17, 10, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947755535, 'comment_body': '(1) comment is added, PTAL!\r\n(2) We plan to type each JSON property explicitly.\r\n(3) TODO is created -- #15911 ', 'comment_created': datetime.datetime(2022, 8, 17, 10, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947773786, 'comment_body': ""> typically we don't use the _domain_object suffix, \r\n\r\nOk"", 'comment_created': datetime.datetime(2022, 8, 17, 10, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 947783040, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 8, 17, 10, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 948562313, 'comment_body': 'I am just concerned about the naming of the variable as it is `playthrough_models_with_none`, and we are iterating below and asserting that it is not `None` in line 940.  \r\n', 'comment_created': datetime.datetime(2022, 8, 18, 1, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 948666358, 'comment_body': 'I see -- thanks for the clear explanation. Of all the possible approaches we can take, which would you recommend and why?', 'comment_created': datetime.datetime(2022, 8, 18, 5, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 948668340, 'comment_body': 'I don\'t understand your choice of naming here. In what sense is this ""updated""?\r\n\r\nTry to use a name that reflects what is actually being conveyed by the point of the test, rather than something applied ""automatically"".', 'comment_created': datetime.datetime(2022, 8, 18, 5, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 948668457, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2022, 8, 18, 5, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 948668777, 'comment_body': 'Thanks! I took a look at #15911. Could you please add more detail on how to type each JSON property explicitly (at least roughly)?', 'comment_created': datetime.datetime(2022, 8, 18, 5, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 949095903, 'comment_body': 'If we add one more named key in the typedicts mentioned above as `Literal`. We\'ll be able to narrow the type down without asserting. This key has to be populated in `get_playthrough_from_model`\r\n\r\n```py\r\nclass CyclicStateTransitionsIssueDict(TypedDict):\r\n    """"""dash""""""\r\n    type: Literal[\'CyclicStateTransitionsIssue\']\r\n    state_names: Dict[str, List[str]]\r\n\r\n\r\nclass EarlyQuitIssueDict(TypedDict):\r\n    """"""dash""""""\r\n    type: Literal[\'EarlyQuitIssue\']\r\n    state_name: Dict[str, str]\r\n    time_spent_in_exp_in_msecs: Dict[str, int]\r\n\r\n\r\nclass MultipleIncorrectSubmissionsDict(TypedDict):\r\n    """"""dash""""""\r\n    type: Literal[\'MultipleIncorrectSubmissions\']\r\n    state_name: Dict[str, str]\r\n    num_times_answered_incorrectly: Dict[str, int]\r\n```\r\n\r\nNow considering the above line\r\n```py\r\nif \'state_names\' in playthrough.issue_customization_args:\r\n\r\n# this can be replaced by\r\nif playthrough.issue_customization_args[\'type\'] == \'CyclicStateTransitionsIssueDict\':\r\n   reveal_type(playthrough.issue_customization_args) # The type should be CyclicStateTransitionsIssueDict\r\n```\r\n\r\nI was looking into narrowing the Union of typedicts based on the named keys in mypy, but turns out it is not implemented yet. The issue can be found [here](https://github.com/python/mypy/issues/11080). I found another issue linked with this. They have implemented narrowing Union of typedicts based on Literals which can be found [here](https://github.com/python/mypy/issues/7944). The approach I mentioned above is based on this.\r\n\r\nI am not sure if this will throw more mypy errors', 'comment_created': datetime.datetime(2022, 8, 18, 12, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 950122934, 'comment_body': ""I have tried @aasiffaizal 's approach and it seems to me that MYPY can only differentiate between the union of typedicts when all the typeddicts have `type` key. \r\n\r\nSo, My first concern is that currently `playthrough.issue_customization_args` does not contain `type` key -- how do we populate this type key? ( I have tried to add the type key in issue_customization_args but I'm not sure if that's not going to break anything).\r\n\r\nBut yeah, That's a great approach and we should keep this in mind while implementing something in the future -- so that this kind of issue does not occur again. "", 'comment_created': datetime.datetime(2022, 8, 19, 12, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950133444, 'comment_body': ""> which would you recommend and why?\r\n\r\nI would recommend 1st one because in that way we have a subset of types that an issue_customization_args can take and we need to use a lesser number of assertions ( basically we need to use assert at the time only when we are providing value to some other function )\r\n\r\nIf we use the 2nd approach then we have to use assert and casts ( because assert will not work with typeddict ) every time when we access the `issue_customization_args` dict's value like: `playthrough.issue_customization_args['state_names']` because in 2nd approach `issue_customization_args` is Union of several typeddicts, and `state_names` is defined in only one TypedDict not in all so mypy throws error for all other typeddict and to suppress the error we have use assert and casts."", 'comment_created': datetime.datetime(2022, 8, 19, 12, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950182194, 'comment_body': 'The name is changed to `newly_created_exploration_stats` because we are fetching stats that are created just above this line.', 'comment_created': datetime.datetime(2022, 8, 19, 13, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950182546, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2022, 8, 19, 13, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950186025, 'comment_body': ""One example is added in the issue like how we add annotations to JSON properties.\r\n\r\n> at least roughly\r\n\r\nThere is no direct method, which we follow and annotate them -- so that's why an example is added to the issue."", 'comment_created': datetime.datetime(2022, 8, 19, 13, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950646707, 'comment_body': '@sahiljoster32 Every Playthrough object has an issue_type key, right? That will fully determine the format of the issue_customization_args.\r\n\r\nSo can we do this at the level of the Playthrough object instead (i.e. one level higher)?', 'comment_created': datetime.datetime(2022, 8, 20, 4, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 950719571, 'comment_body': ""In this comment (https://github.com/oppia/oppia/pull/15870#discussion_r947754632) I mentioned all the problems if use typedict for each issue.\r\n\r\nNow, Aasif's approach can only solve 2nd point's issue, where I mentioned that to narrow down the type from Union of typeddicts to a particular typedict we have to use assertion and casts. But as mentioned by Aasif if we use an extra `if clause` then we can narrow down the type easily -- which is true. \r\n\r\nNow, the problems that are still unsolved are:\r\n1. As mentioned in this comment (https://github.com/oppia/oppia/pull/15870#discussion_r947754632), if we see 1st point there I mentioned about dynamically accessing the dict and in that case, Aasif's approach will not work and MYPY still floods the console. Because in Aasif's approach we already knew the `issue_customization_args`'s type and we are narrowing down the type using a hardcoded key ('type')\r\n```python\r\nif 'state_names' in playthrough.issue_customization_args:\r\n\r\n# this can be replaced by\r\nif playthrough.issue_customization_args['type'] == 'CyclicStateTransitionsIssueDict':\r\n   reveal_type(playthrough.issue_customization_args) # The type should be CyclicStateTransitionsIssueDict\r\n```\r\nbut in dynamically accessed dicts we don't know the specific type and we cannot use if clause there ( as far as I know ).\r\n\r\n2. To differentiate between different TypedDicts we need at least one key which contains a string Literal, like in Aasif's comment we have `type` key (https://github.com/oppia/oppia/pull/15870#discussion_r949095903). -- now the problem here is that we don't have any key in `issue_customization_args` which contains only string literal. And if we add a new key -- then I'm not confident because then in that case typing comes to a runtime level ( ideally typing should be not executed at runtime ). "", 'comment_created': datetime.datetime(2022, 8, 20, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950721766, 'comment_body': ""> @sahiljoster32 Every Playthrough object has an issue_type key, right? That will fully determine the format of the issue_customization_args.\r\n> \r\n> So can we do this at the level of the Playthrough object instead (i.e. one level higher)?\r\n\r\nTo narrow down the `issue_customization_args`'s Union type ( union of typeddicts ) to a particular typeddict, we need a key on `issue_customization_args`. So that we can do this `if playthrough.issue_customization_args['type'] == 'CyclicStateTransitionsIssueDict':` and Mypy will narrow down the type for us and it will not throw an error at runtime.\r\n\r\nSo, are your saying to define a new key in `issue_customization_args` in the Playthrough domain object?"", 'comment_created': datetime.datetime(2022, 8, 20, 17, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950786164, 'comment_body': ""No, I am wondering if you can use an analogue of the issue_customization_args approach for the Playthrough domain object instead. That is, define three separate types of Playthrough domain object instead of three separate types of issue customization arg dicts, and then do `if playthrough.issue_type == ...` so that Mypy can narrow down the type for the playthrough domain object (which in turn will constrain what its issue customization dict must look like).\r\n\r\nWould an approach like that work? I don't see adding a key to the issue customization args dict as being feasible, it is too big a change just for the benefit of typing IMO."", 'comment_created': datetime.datetime(2022, 8, 21, 4, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 950795377, 'comment_body': 'If you are mentioning to do something like below:\r\n```python\r\nclass CyclicStateTransitionsIssueDict(TypedDict):\r\n    """"""dash""""""\r\n\r\n    state_names: Dict[str, List[str]]\r\n\r\n\r\nclass MultipleIncorrectSubmissionsDict(TypedDict):\r\n    """"""dash""""""\r\n\r\n    state_name: Dict[str, str]\r\n    num_times_answered_incorrectly: Dict[str, int]\r\n\r\n\r\nclass EarlyQuitIssueDict(TypedDict):\r\n    """"""dash""""""\r\n\r\n    state_name: Dict[str, str]\r\n    time_spent_in_exp_in_msecs: Dict[str, int]\r\n\r\nclass Playthrough:\r\n    """"""Domain object representing a learner playthrough.""""""\r\n\r\n    def __init__(\r\n        self,\r\n        exp_id: str,\r\n        exp_version: int,\r\n        issue_type: str,\r\n        issue_customization_args: Union[MultipleIncorrectSubmissionsDict, EarlyQuitIssueDict, CyclicStateTransitionsIssueDict],\r\n        actions: List[LearnerAction]\r\n    ): ...\r\n\r\n\r\nclass MultipleIncorrectSubmissionsPlaythrough(Playthrough):\r\n\r\n    def __init__(\r\n        self,\r\n        exp_id: str,\r\n        exp_version: int,\r\n        issue_type: str,\r\n        issue_customization_args: MultipleIncorrectSubmissionsDict,\r\n        actions: List[LearnerAction]\r\n    ) -> None:\r\n        super().__init__(\r\n            exp_id, exp_version, issue_type, issue_customization_args, actions\r\n        )\r\n\r\n\r\nclass EarlyQuitIssuePlaythrough(Playthrough):\r\n\r\n    def __init__(\r\n        self,\r\n        exp_id: str,\r\n        exp_version: int,\r\n        issue_type: str,\r\n        issue_customization_args: EarlyQuitIssueDict,\r\n        actions: List[LearnerAction]\r\n    ) -> None:\r\n        super().__init__(\r\n            exp_id, exp_version, issue_type, issue_customization_args, actions\r\n        )\r\n\r\n\r\nclass CyclicStateTransitionsIssuePlaythrough(Playthrough):\r\n\r\n    def __init__(\r\n        self,\r\n        exp_id: str,\r\n        exp_version: int,\r\n        issue_type: str,\r\n        issue_customization_args: CyclicStateTransitionsIssueDict,\r\n        actions: List[LearnerAction]\r\n    ) -> None:\r\n        super().__init__(\r\n            exp_id, exp_version, issue_type, issue_customization_args, actions\r\n        )\r\n```\r\n\r\nThen at every step we have to use different Playthrough domain object -- taking an example of the lines mentioned in this thread:\r\n\r\n```python\r\n        if \'state_names\' in playthrough.issue_customization_args:\r\n            state_names = (\r\n                playthrough.issue_customization_args[\'state_names\'][\'value\'])\r\n```\r\nWe have to use CyclicStateTransitionsIssuePlaythrough instead of playthrough\r\n\r\n```python\r\n        if \'state_names\' in CyclicStateTransitionsIssuePlaythrough.issue_customization_args:\r\n            state_names = (\r\n                playthrough.issue_customization_args[\'state_names\'][\'value\'])\r\n```\r\n\r\nNow, my question is how we return `CyclicStateTransitionsIssuePlaythrough` from `get_playthrough_from_model` explicitly because currently `get_playthrough_from_model` return Playthrough domain object.\r\n\r\n\r\nAnd I\'m not sure like how `if playthrough.issue_type == ...` will work because here `playthrough` is of domain object type not typeddict.', 'comment_created': datetime.datetime(2022, 8, 21, 6, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 950915963, 'comment_body': ""Should we use generics as shown below? We wouldn't have to add an extra key, we could just initialize a `Playthrough` object based on `issue_type`\r\n\r\n```py\r\nclass Playthrough(Generic[T]):\r\n    def __init__(\r\n        self,\r\n        exp_id: str,\r\n        exp_version: int,\r\n        issue_type: str,\r\n        issue_customization_args: T,\r\n        actions: List[LearnerAction]\r\n    ):\r\n         # rest of the code\r\n```\r\n\r\nWe'll need to initialize an instance as shown below based on `issue_type`\r\n\r\n```py\r\nPlaythrough[EarlyQuitIssueDict](playthrough_model.exp_id, playthrough_model.exp_version,\r\n        playthrough_model.issue_type,\r\n        playthrough_model.issue_customization_args, actions))\r\n```"", 'comment_created': datetime.datetime(2022, 8, 21, 23, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 951085855, 'comment_body': ""The problem with this approach is that it only works when we are initializing `Playthrough` object directly, I mean by `Playthrough` class.\r\n\r\nBut the problem in this thread is that we are getting `Playthrough` object from `get_playthrough_from_model` and I think this approach will not work there -- because in generics we have to provide type explicitly and in `get_playthrough_from_model` method we are just initializing object. ( Please correct me if I'm missing something ).\r\n"", 'comment_created': datetime.datetime(2022, 8, 22, 7, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 951380392, 'comment_body': ""In `get_playthrough_from_model`, we can initialize `Playthrough` object based on the `issue_type` in it right?\r\nEither by the conditional statement or by dict of mapping of `issue_type` and the corresponding typedict if that works. Wouldn't that narrow down the type of `issue_customization_args` in the `Playthrough`  instance?\r\n \r\n```py\r\nif playthrough_model.issue_type == 'EarlyQuit':\r\n    return Playthrough[EarlyQuitIssueDict](playthrough_model.exp_id, playthrough_model.exp_version,\r\n        playthrough_model.issue_type,\r\n        playthrough_model.issue_customization_args, actions))\r\n```\r\n@sahiljoster32 \r\n"", 'comment_created': datetime.datetime(2022, 8, 22, 12, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 952934062, 'comment_body': 'Places where we have to use ignores:\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L433\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L441\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L450\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L478\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L491\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L374\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L375', 'comment_created': datetime.datetime(2022, 8, 23, 17, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 952944865, 'comment_body': 'For LearnerAction we have to define different set of TypedDicts:\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_domain.py#L1266\r\nDue to which we have to use more ignores and casts. Like below:\r\nhttps://github.com/oppia/oppia/blob/b1ec86cb2b3471530e74840dabb5755ea1b2a692/core/domain/stats_services.py#L457 ', 'comment_created': datetime.datetime(2022, 8, 23, 17, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 953480504, 'comment_body': 'This last thing isn\'t a typed dict, is it? I thought for typed dicts we explicitly state what the keys are, and provide a type for each one.\r\n\r\nFor the comment before that, I think in general after you have something like ""if \'state_name\' in exp_issue.issue_customization_args"" you can narrow the type of the customization args down to a union of TypedDict.', 'comment_created': datetime.datetime(2022, 8, 24, 8, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 962804328, 'comment_body': 'As per the discussion, for this issue, a different PR is going to be raised, and to keep track of this issue I have created a TODO issue https://github.com/oppia/oppia/issues/15995', 'comment_created': datetime.datetime(2022, 9, 5, 11, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '68f05b1f9f9cf8fc0b74930c774901e1970fe485', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d95d7ffa50d924d8a7854024437c5fcab8b1b4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12fc709051461c243c9d1358d07f73bc997c43ec', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bfcf9a67ec146dbc9fe028f57137a9258522c3e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcac9e03d0de631604fb5e922c6786416dae5f8f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6356a2c93d9f71a6ab3129d4b2b9d5b7563ea02e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b213262093fb4c3e53be276c96b5a8831f3ec77', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1d599dd3ac1230212ee876f8c8a32289426fe1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94ecdba4b65725a7c5021b9008994b9f3b0fbff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbc148b367fb495bfae7e08daebd613bf573dc12', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4282763c64158685c940bd2b330ab1846dc2e96', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efaf47f1592b8f53bd2dea4a77bff704f4a0f736', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe83388fda13ff379793ed8f4270d37801e0e70d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae82dae0724d79a983bd7f374ad64295438999c9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f78ff067dc07358c4fd9c08437c42ef24ae1729', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071c93fe472f237048dc6fd0cd4bb6dc48729158', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d0d72cd2095c3568f02faec68ae6f668ae7579', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56951bd47d48a4888b241d0ef06093cd40658ea', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c273de4b8a5d39f8ef0719524cb7007322d886b1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a512261f342e970ded00b2920989ee759a5ce64', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0adbb4e12fceb222a649e83d6430e5204ea696bf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '864ec9e73e844dae75a882069be637755fae3333', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e22a18e370c95412e4e506b580c964d9950a88', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '576f4b9af863de9426ec12a4339dc7e94066d8fc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df5fd7f0953e97495379eb26a2ba3e89e9785913', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c67a2c84566f6aba80fd257ff1fa32b9ffb514', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6311a7e56355f50b2f7e0b777be11ffe3fb1b2bd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1bdd687a3fea707ad5bad7e252c6341834d075c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb73da61a2483e32de056e0c974af5ce16f54f01', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '792bd6931a2eafae84d0441b54dd17104f58c2f9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e595aa6e885529faa92f9c1adfa22dc33789200f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57ec6713037decd25f521aec68e4c8f2eff06f26', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c878dcf1ed5d83fcca66b598ac7857d08a5bdf1b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d878a8c44a40a4ddab2226d6ea96c1a510dc815', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e20ea3d7887046ee9fbe25cac01d6a7beff6034b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b4c196cef0d9c97ebf1a3a1ab2ca742280e925', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c731079c964567def1cd54ed8f56b225fb26c28f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e7af68c5c5ac8173f6ced26f5683427800a738', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b38ec850532fb979c84204d8f8f94caaf0b9b3d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716c1ae2753eff7af64af2fd1af29115507384f8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff419d4d7ab55458424c49700c4dd2a232855685', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '298d23ec2972125ff2bfe3b6c4a8a0a9a7d0f91a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c308eb9839d971f5941dbabaf42f09b72fea2c22', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e5b98949c212690fed8db4a70e77b5c6c6b325', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63d92d080a15d4f969644302c7a6ff2689c7480a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b192b6a58ca5cc5a8242bfae8d48e20069a1156', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd57a4d7b7d7bdd9cf8cf7b1fd2f73472cdad025', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54cabb28a9038fca3b84ffe10fa3774fc501c5ca', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e2e2760235b18debd73226610747279381107f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b4e29345cdf5c099f96185e9b186a27152febc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c36e29460c6bc92e02f02458116d7f70950ffd4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e929490413ae511b9dcccbc0c78cb1f88c8550e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3495aca99c914d23d33ed0902542add0176f60', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80bcc3e005519bcd8565e26dd317050f111964b6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48a1357f6d4b74456b67c008ce6fdd4330d86ac8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aea229dd17e94d1857a98ca997df5c8fef50929', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37267ebc2aeef283906dfe7d15186f9d07f4198d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99846b70407223a82a0f00e84f1c732355ce1768', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98bd0f8a3fb1f3bea0dd5045aeaeff845f2dcb24', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1090443798,Added Mypy type annotations to the `core/controller` directory's files.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type annotations to the files of the `core/controllers` directory. 

## Essential Checklist
- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
Proof of MyPy checks that changes are correct.
![Screenshot from 2022-10-19 18-38-36](https://user-images.githubusercontent.com/12553576/196700087-42ffe481-c2e0-41f2-a1e1-41a408086bde.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16342,https://api.github.com/repos/oppia/oppia/pulls/16342,https://github.com/oppia/oppia/pull/16342,closed,4149,1915,35,43,25,121,1,1,[{'name': 'PR: LGTM'}],2022-10-18 08:51:21+00:00,2022-11-01 12:50:50+00:00,1223969.0,"14 days, 3:59:29","[{'comment_id': 999396280, 'comment_body': 'This whole file is going to be removed.', 'comment_created': datetime.datetime(2022, 10, 19, 12, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 999418065, 'comment_body': 'I did these changes because MyPy is unable to find the definition of `user_settings`, because `user_settings` is defined inside the if clause. So according to python, we are accessing `user_settings` outside of the scope and due to this MyPy is unable to find the type of `user_settings`.', 'comment_created': datetime.datetime(2022, 10, 19, 13, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 999422768, 'comment_body': 'Mypy is unable to find here what super points to, and this is because super can accept `base class and self` but here we are passing different args.', 'comment_created': datetime.datetime(2022, 10, 19, 13, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 999452139, 'comment_body': 'Can you import `Pattern` from `re` instead? Importing it from `typing` is deprecated from Python 3.9 and we should try to futureproof.', 'comment_created': datetime.datetime(2022, 10, 19, 13, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999452619, 'comment_body': 'Why is this needed?', 'comment_created': datetime.datetime(2022, 10, 19, 13, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999454404, 'comment_body': 'Why so many `Any`?', 'comment_created': datetime.datetime(2022, 10, 19, 13, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999455650, 'comment_body': 'Why `Any`?', 'comment_created': datetime.datetime(2022, 10, 19, 13, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999457349, 'comment_body': 'Thinking about the stuff in this file. Should we enforce comments for `Any` and `object` in .pyi files too?', 'comment_created': datetime.datetime(2022, 10, 19, 13, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999458892, 'comment_body': ""Missing comment for any? Why this wasn't detected by the linter?"", 'comment_created': datetime.datetime(2022, 10, 19, 13, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999459792, 'comment_body': 'Ah, the comment is there but not updated for the `payload`.', 'comment_created': datetime.datetime(2022, 10, 19, 13, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999464802, 'comment_body': 'Why is this ignore added?', 'comment_created': datetime.datetime(2022, 10, 19, 13, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999516717, 'comment_body': ""Ah, don't use `{}` but use `None` for `params`."", 'comment_created': datetime.datetime(2022, 10, 19, 14, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999517270, 'comment_body': 'Add explanation for the `params` too.', 'comment_created': datetime.datetime(2022, 10, 19, 14, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999519497, 'comment_body': 'I know that we approved the usage of  `Optional[str]` for `get_user_actions_info`, but is it fine even for `get_user_settings`? How hard it would be to refactor this?', 'comment_created': datetime.datetime(2022, 10, 19, 14, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999532932, 'comment_body': '```suggestion\r\n    elif (\r\n        activity_rights.is_private() and \r\n        role_services.ACTION_DELETE_OWNED_PRIVATE_ACTIVITY in user.actions and\r\n        user.user_id and activity_rights.is_owner(user.user_id)\r\n    ):\r\n```', 'comment_created': datetime.datetime(2022, 10, 19, 14, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 999533526, 'comment_body': '```suggestion\r\n            activity_rights.is_owner(user.user_id) or\r\n            activity_rights.is_editor(user.user_id)\r\n```', 'comment_created': datetime.datetime(2022, 10, 19, 14, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1000140029, 'comment_body': 'Add a code comment explaining why these are needed.\r\n\r\nWe also talked about preventing others from using GenericReturnType. You could do it with a lint check, but perhaps a simpler way is to just make it private to this module by prefixing it with an underscore? If you go this route, explain why it is intentionally private to this module so that folks don\'t make it public in the future.\r\n\r\nI also think you should rename this to make it less generic. It\'s only supposed to be used for ACL handler decorators, right? That should be reflected in the name (you can still keep the word ""generic"" but there should be some additional qualifiers).', 'comment_created': datetime.datetime(2022, 10, 20, 4, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000142950, 'comment_body': 'What is the effect of this change? Does the docstring need to be updated with a new exception?', 'comment_created': datetime.datetime(2022, 10, 20, 4, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000143307, 'comment_body': 'Btw, out of curiosity ... isn\'t ""return"" the same thing as ""return None""?', 'comment_created': datetime.datetime(2022, 10, 20, 4, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000143676, 'comment_body': ""What's the rationale for returning None rather than raising? Ditto below."", 'comment_created': datetime.datetime(2022, 10, 20, 4, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000248976, 'comment_body': ""Shouldn't this error if the username is not provided? I.e. shouldn't the username be required if we get to this branch?"", 'comment_created': datetime.datetime(2022, 10, 20, 7, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000250763, 'comment_body': ""I don't think you should make this optional; have the caller make sure that it's present and don't call this function if it's None."", 'comment_created': datetime.datetime(2022, 10, 20, 7, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000251445, 'comment_body': 'Ditto, please try not to make things optional. Handle the None case in the caller. I think I only gave approval for get_user_actions_info() but not the other functions, and in general we should try to keep the interface constrained to reduce the ""surface area"".', 'comment_created': datetime.datetime(2022, 10, 20, 7, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000253707, 'comment_body': 'Put parentheses around the clause after ""or"", to avoid any ambiguity.\r\n\r\nAlso something feels off here. How can you have a user object without a user_id?', 'comment_created': datetime.datetime(2022, 10, 20, 7, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000254401, 'comment_body': 'Probably better to have a ""if not user.user_id: return False"" before this, and leave this as it was, assuming that from this point onward the user needs to have a user_id to do the action.\r\n\r\nDitto below, where applicable.', 'comment_created': datetime.datetime(2022, 10, 20, 7, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000256866, 'comment_body': 'Why did this change?', 'comment_created': datetime.datetime(2022, 10, 20, 7, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000260719, 'comment_body': ""This seems wrong, shouldn't it be a non-optional str? What does None represent conceptually?"", 'comment_created': datetime.datetime(2022, 10, 20, 7, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000261647, 'comment_body': 'Have we incorrectly been omitting the status_code all this while? (Where did you see that it was needed?)\r\n\r\nSlightly confused since AFAICT we pass it as the first argument to _render_exception().', 'comment_created': datetime.datetime(2022, 10, 20, 7, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000263712, 'comment_body': ""I don't understand this, it just seems incorrect. Presumably this should be labelled as an abstract method or something like that, if subclasses are the issue?\r\n\r\nWhat are the return types of the subclass methods? This should have the same return type as those."", 'comment_created': datetime.datetime(2022, 10, 20, 7, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1000436240, 'comment_body': ""Don't we need a comment for `cast`?"", 'comment_created': datetime.datetime(2022, 10, 20, 10, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1000520126, 'comment_body': ""Can you please add a TODO to refactor this so that we don't use `action` property in the request but rather have two separate handlers for each action? This is an antipattern as if we had separate handlers we wouldn't need this logic.\r\n\r\ncc @Rijuta-s "", 'comment_created': datetime.datetime(2022, 10, 20, 11, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1000528628, 'comment_body': ""Crazy idea (maybe :smile:). Wouldn't it be possible to use [generics](https://mypy.readthedocs.io/en/stable/generics.html) for this class? Basically do `class Base(Generic[T])` where the `T` would be then used here `Optional[T]`?"", 'comment_created': datetime.datetime(2022, 10, 20, 11, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1000529517, 'comment_body': 'Missing exception text?', 'comment_created': datetime.datetime(2022, 10, 20, 11, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1000531316, 'comment_body': 'Yeah, that makes sense, can you please extend the comment above it?', 'comment_created': datetime.datetime(2022, 10, 20, 11, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1004820733, 'comment_body': '> Add a code comment explaining why these are needed.\r\n\r\ncomments are added!, Names are also changed! PTAL!', 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004820773, 'comment_body': ""> What is the effect of this change? \r\n\r\nPreviously, If `topic_fetchers.get_topic_rights` somehow results into the None value, then that value is assigned to `topic_rights` and in further code, we are doing `topic_rights.topic_is_published` so this thing will become an error ( a python error ). So just to prevent this thing and to throw explicit error I used true here ( and to strict the type also ). \r\n\r\n> Does the docstring need to be updated with a new exception?\r\n\r\nI don't think so, because `strict=True`'s exception belongs to `get_topic_rights` and those exceptions are already documented there. If we write `get_topic_rights`'s exceptions here then I think we are just repeating ourselves. "", 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004820818, 'comment_body': 'MyPy needs an explicit declaration of return type if we are using more than one type of return value. Please see MyPy playground:\r\nhttps://mypy-play.net/?mypy=latest&python=3.10&flags=strict%2Cdisallow-any-expr&gist=60a1a32081acf08f3b02927ff4a7cc9c', 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004820876, 'comment_body': ""Previously I'm just following the code and returning None. But now, we are raising an error PTAL! and let me know if the exception is ok or not. (change added ditto below)"", 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004820929, 'comment_body': 'None `username` is ok here because in the next line we are passing the username to `role_services.log_role_query` method https://github.com/oppia/oppia/blob/900a25a62a37057c4779247cf9c9c0f14b66e788/core/controllers/admin.py#L884 \r\n\r\nand in `log_role_query` method we are passing Optional[str] `username` directly to `RoleQueryAuditModel` https://github.com/oppia/oppia/blob/900a25a62a37057c4779247cf9c9c0f14b66e788/core/domain/role_services.py#L309\r\n\r\nand in RoleQueryAuditModel, `username` can be None https://github.com/oppia/oppia/blob/900a25a62a37057c4779247cf9c9c0f14b66e788/core/storage/audit/gae_models.py#L56\r\n\r\nBut None `user_id` is not acceptable, and for this we already have a check https://github.com/oppia/oppia/blob/900a25a62a37057c4779247cf9c9c0f14b66e788/core/controllers/admin.py#L887', 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004820975, 'comment_body': ""> have the caller make sure that it's present and don't call this function if it's None.\r\n\r\nFixed, now we are calling when `user_id` is a string!"", 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004821031, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004821075, 'comment_body': '> How can you have a user object without a user_id?\r\n\r\nA guest user can also have a `UserActionsInfo` object with user_id as None and role as GUEST_ROLE', 'comment_created': datetime.datetime(2022, 10, 25, 18, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004821161, 'comment_body': 'Done, but in some places, it is not applicable because if we do this we will exceed the limit of return statements in a function that is currently 6.', 'comment_created': datetime.datetime(2022, 10, 25, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004821307, 'comment_body': 'I changed False -> True, because keeping False returns Optional type and the return value of this function is never expected to be None while testing. So, to fix the type I have two choices either user assert or True.', 'comment_created': datetime.datetime(2022, 10, 25, 18, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004821370, 'comment_body': 'Here we are passing None value https://github.com/oppia/oppia/blob/900a25a62a37057c4779247cf9c9c0f14b66e788/core/controllers/base.py#L666', 'comment_created': datetime.datetime(2022, 10, 25, 18, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004821433, 'comment_body': '> Presumably this should be labelled as an abstract method\r\n\r\nFixed', 'comment_created': datetime.datetime(2022, 10, 25, 18, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004830096, 'comment_body': ""https://github.com/oppia/oppia/blob/900a25a62a37057c4779247cf9c9c0f14b66e788/core/controllers/base.py#L710\r\n\r\nTill now (before this PR's changes), we are first defining a Dict[str, str] value and passing it to `_render_exception` but in `_render_exception` function after asserting the error code we are adding an int value to the same Dict ( Dict having Dict[str, str] value ) so mismatch in typing occurs. \r\nhttps://github.com/oppia/oppia/blob/a09b592e76daf7af1818928d89a302085609f99c/core/controllers/base.py#L649\r\n`First, we are doing Dct[str, st] and then we are adding int value. `\r\n\r\nSo what I try to do here is -- defining a dict in the first place with proper TypedDict structure ( before passing to `_render_exception` function as an argument) rather than passing the error code and Dict[str, str] individually. And instead of asserting the error code explicitly, I'm asserting the dict's error code value. "", 'comment_created': datetime.datetime(2022, 10, 25, 18, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004830849, 'comment_body': ""I hope that clears the thing up, but please let me know If you need more info, I'll try again to explain, Thanks!"", 'comment_created': datetime.datetime(2022, 10, 25, 18, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1004838635, 'comment_body': 'Yeah `return` is same as `return None` at runtime.', 'comment_created': datetime.datetime(2022, 10, 25, 18, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005284907, 'comment_body': 'Comment updated!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005284996, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285028, 'comment_body': 'Because at these places we are accessing GET https://github.com/oppia/oppia/blob/c52105dd384b02dfbad49208f384a274c46534c7/core/controllers/base_test.py#L1050\r\nhttps://github.com/oppia/oppia/blob/c52105dd384b02dfbad49208f384a274c46534c7/core/controllers/suggestion.py#L493', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285072, 'comment_body': 'added more strict types!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285102, 'comment_body': ""I have added stubs for webapp2 by reading the doc itself(https://webapp2.readthedocs.io/en/latest/api/webapp2.html), because there is no pre-defined stubs in typesheds and there is not much typing info in the source code itself. So, that's why there are `Any`s -- but i have tried my best to reduce the Any. PTAL!"", 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285140, 'comment_body': 'Ahh, I think we should not do this, reason:\r\n1. `Any` is used heavily in stubs file, you can pick any of the file -- finding reasons for all of them is cumbersome work ( or unnecessary in some cases because someone has already added Any for a reason without mentioning the reason ).\r\n2. In somecases, libraries do have thier official stubs and we have to wrtie stubs for ourselves which forces us to use Any in some cases and finding reason for them is also a time taking.', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285179, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285226, 'comment_body': 'Nope, we cannot use None here because testapp.delete can only accept iterable `params` and providing None here can result in backend test failuers. https://github.com/oppia/oppia/blob/c52105dd384b02dfbad49208f384a274c46534c7/core/tests/test_utils.py#L2920', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285268, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285319, 'comment_body': 'Fixed, Optional removed!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285360, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285401, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285429, 'comment_body': 'Added PTAL!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285465, 'comment_body': 'Added a todo https://github.com/oppia/oppia/issues/16364. In the code also!', 'comment_created': datetime.datetime(2022, 10, 26, 6, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285509, 'comment_body': 'I don\'t think generics really needed here because:\r\n1. we still need to define typedDict in every subclass.\r\n2. In some subclasses, `normalized_request` posses different typedDict than `normalized_payload`. So, if we use generics here then both of them is assigned with same type.\r\n3. For optional thing we have to use assert everytime. For example:\r\n```python\r\nclass BaseHandler(Generic[T]):\r\n   self.normalized_payload: Optional[T] = None\r\n\r\nclass BlogAdminHandlerNormalizedPayloadDict(TypedDict):\r\n    """"""Dict representation of BlogAdminHandler\'s normalized_payload\r\n    dictionary.\r\n    """"""\r\n\r\n    action: str\r\n    config_property_id: Optional[str]\r\n\r\n\r\nclass BlogAdminHandler(base.BaseHandler)[BlogAdminHandlerNormalizedPayloadDict]:\r\n    """"""Handler for the blog admin page.""""""\r\n\r\n    GET_HANDLER_ERROR_RETURN_TYPE = feconf.HANDLER_TYPE_JSON\r\n    URL_PATH_ARGS_SCHEMAS: Dict[str, str] = {}\r\n    HANDLER_ARGS_SCHEMAS = {\r\n        \'GET\': {},\r\n        \'POST\': {\r\n            \'action\': {\r\n                \'schema\': {\r\n                    \'type\': \'basestring\',\r\n                    \'choices\': [\r\n                        \'save_config_properties\', \'revert_config_property\']\r\n                }\r\n            },\r\n            \'config_property_id\': {\r\n                \'schema\': {\r\n                    \'type\': \'basestring\',\r\n                },\r\n                \'default_value\': None\r\n            },\r\n        }\r\n    }\r\n\r\n    @acl_decorators.can_access_blog_admin_page\r\n    def post(self) -> None:\r\n        """"""Handles POST requests.""""""\r\n        assert `self.normalized_payload` is not None   # This is because iternally self.normalized is initialziled as None. And before reaching this point we have already raised error for None schemas.\r\n```', 'comment_created': datetime.datetime(2022, 10, 26, 6, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005285543, 'comment_body': 'Nope, as `raise exception` is inside the try block so if an exception is raised then the `except` block will raise the error with a message.', 'comment_created': datetime.datetime(2022, 10, 26, 6, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005296702, 'comment_body': '> Put parentheses around the clause after ""or"", to avoid any ambiguity.\r\n\r\nDone!', 'comment_created': datetime.datetime(2022, 10, 26, 7, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005329686, 'comment_body': ""Thanks for explaining. The change sounds fine, but I actually think you should update the docstring. If you think about it from the point of view of a caller of this function (who doesn't look at its internals), this is part of the function's contract, so it's worth documenting."", 'comment_created': datetime.datetime(2022, 10, 26, 7, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1005334865, 'comment_body': 'I think this analysis is incorrect (but thanks for providing it so that it can be audited). The reason for username being allowed to be None in RoleQueryAuditModel is because such queries can come based on either role or username, so if the query is for a role then username would be None.\r\n\r\nBut in this branch we are doing a query by username, so a username needs to be specified (and role would be None). Makes sense?', 'comment_created': datetime.datetime(2022, 10, 26, 7, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1005335811, 'comment_body': 'Why do you need the ""2"" here and elsewhere? That just looks weird.', 'comment_created': datetime.datetime(2022, 10, 26, 7, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1005337930, 'comment_body': 'That seems sensible to me. Thanks!', 'comment_created': datetime.datetime(2022, 10, 26, 7, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1005338698, 'comment_body': 'Can you talk to @Rijuta-s about this? If this is what needs to be done then she should probably resolve it. /cc @gp201 ', 'comment_created': datetime.datetime(2022, 10, 26, 7, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1005344061, 'comment_body': ""It's fine to change that call to use feconf.HANDLER_TYPE_JSON (this seems consistent with the downstream logic, too). Are there any other examples?"", 'comment_created': datetime.datetime(2022, 10, 26, 7, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1005484359, 'comment_body': '1. I see.\r\n2. Not sure what you mean by this, can you elaborate?', 'comment_created': datetime.datetime(2022, 10, 26, 10, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1005484922, 'comment_body': 'Then fix the backend tests, please.', 'comment_created': datetime.datetime(2022, 10, 26, 10, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1005485934, 'comment_body': ""Why wasn't this caught by the linter?"", 'comment_created': datetime.datetime(2022, 10, 26, 10, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1005512683, 'comment_body': '1. That is fine. But if we use generic the typing will be enforced more strongly.\r\n2. You can introduce two type variables in the `Generic[X, Y]` and thus add a separate typing for `normalized_request` and for `normalized_payload`.\r\n3. I think assert is fine as we will be sure that it is not `None` (when we are using `cast` this is not checked).', 'comment_created': datetime.datetime(2022, 10, 26, 10, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1005520853, 'comment_body': 'Hmm. I would still give it some text even though it is not going to be propagated.', 'comment_created': datetime.datetime(2022, 10, 26, 10, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1005946528, 'comment_body': '2 removed!', 'comment_created': datetime.datetime(2022, 10, 26, 16, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005947030, 'comment_body': 'An email thread is sent to rijuta\r\nThanks!', 'comment_created': datetime.datetime(2022, 10, 26, 16, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005947739, 'comment_body': 'docstring updated!', 'comment_created': datetime.datetime(2022, 10, 26, 16, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005948848, 'comment_body': 'oh sorry, I misinterpreted the code. Now, we are throwing an error for the None username.', 'comment_created': datetime.datetime(2022, 10, 26, 16, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005949165, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2022, 10, 26, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005949729, 'comment_body': '> Are there any other examples?\r\n\r\nAhh, till now no!\r\n', 'comment_created': datetime.datetime(2022, 10, 26, 16, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1005959538, 'comment_body': 'Erm, so, are you planning to remove the None possibility in this method then?', 'comment_created': datetime.datetime(2022, 10, 26, 17, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1005960784, 'comment_body': ""OK -- though I'm not approving until this is resolved since we need clarity on whether this TODO is appropriate or not. (In general I would suggest flagging new TODOs for reviewers at the outset unless they are part of an already-established pattern.)"", 'comment_created': datetime.datetime(2022, 10, 26, 17, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1006513592, 'comment_body': 'No no -- I mean to say `testapp.delete can only accept iterable params` and if we provide `None` here then `testapp.delete` will throw an error which results in backend test failures ( I have mentioned backend tests explicitly because this function is used only in backend tests ).\r\n', 'comment_created': datetime.datetime(2022, 10, 27, 7, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1006514215, 'comment_body': '2. In some cases libraries do not have official stubs and in those cases, we have to write stubs by ourselves which forces us to use Any in some method/function signatures because lack of information.', 'comment_created': datetime.datetime(2022, 10, 27, 7, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1006523521, 'comment_body': 'Because previously `core/controllers` is not removed from the exclude list https://github.com/oppia/oppia/blob/c7ea503b0c545951eb7d8d977e5548d3b53cca37/scripts/linters/pylint_extensions.py#L55\r\n\r\nMy main motive to keep `core/controllers` in exclude list is that in some files we are using Any type and those files are not annotated yet. But yeah, this thing is fixed by pointing `EXCLUDED_TYPE_COMMENT_DIRECTORIES` to `run_mypy_checks.NOT_FULLY_COVERED_FILES`. So that whenever a file is removed from MyPy deny list, linters are automatically imposed on that file.', 'comment_created': datetime.datetime(2022, 10, 27, 7, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1006523749, 'comment_body': 'Added text!', 'comment_created': datetime.datetime(2022, 10, 27, 7, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1006674328, 'comment_body': 'Ah, still set it to `None` and then in the function set it to `{}` if it is `None`, I know that it might seem kinda redundant but it is safer than passing `{}` right away.', 'comment_created': datetime.datetime(2022, 10, 27, 10, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1006675152, 'comment_body': ""Great! Thanks a lot. I think it will save your time as you don't have to go over these files later just to write the comments."", 'comment_created': datetime.datetime(2022, 10, 27, 10, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1007074772, 'comment_body': ""I think having generics would be a good idea in this situation, and keeping `normalized_request` and `normalized_payload` different types since they aren't necessarily the same"", 'comment_created': datetime.datetime(2022, 10, 27, 15, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1007087988, 'comment_body': 'Just curious, why have we removed the return?\r\n\r\n', 'comment_created': datetime.datetime(2022, 10, 27, 15, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1007104091, 'comment_body': ""why is this needed?\r\n\r\nWouldn't we get the same result for this condition even if the action is `None`?"", 'comment_created': datetime.datetime(2022, 10, 27, 16, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1007319309, 'comment_body': ""@vojtechjelinek @sahiljoster32 I think having a single handler should be fine as both the actions, 'reverting' and 'saving' change the value of the config property i.e  update the value of config property in the backend. Having separate handler would be more reasonable if the type of action being performed would have been different. We follow the same logic in `admin.py` for saving and reverting config property ( i.e both the actions are performed within the same handler):  https://github.com/oppia/oppia/pull/16342/files#diff-981a56d20653e10899f2301ebcb06864bda37939c907e36965e2840ae1c36cbbR323  and https://github.com/oppia/oppia/pull/16342/files#diff-981a56d20653e10899f2301ebcb06864bda37939c907e36965e2840ae1c36cbbR336. \r\n\r\nI am okay with having separate handlers as well, but I think it should be uniform in both `admin.py` and `blog_admin.py`.\r\n\r\n//cc @seanlip @gp201 "", 'comment_created': datetime.datetime(2022, 10, 27, 20, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rijuta-s', 'type': 'User'}, {'comment_id': 1007918618, 'comment_body': 'Looking at the reasoning and example I think it is ok to keep the current handler but It would be great if @seanlip @vojtechjelinek confirm it as well. Thanks!', 'comment_created': datetime.datetime(2022, 10, 28, 10, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1007918700, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2022, 10, 28, 10, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1007921988, 'comment_body': 'In most places `return` is not used with `self.render_json` because `self.render_json` does not return anything and using return with `self.render_json` feels just redundant.', 'comment_created': datetime.datetime(2022, 10, 28, 10, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1007922490, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2022, 10, 28, 10, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1007925563, 'comment_body': ""I was working on a Generic approach and found a scenario that does not fit into this generic approach.\r\nBasically, If I'm not wrong different call methods can have different `self.normalized_request` dicts like here in `AdminRoleHandler`  https://github.com/oppia/oppia/blob/29059ed45efe10f87324ff6edbeb8be937d514b3/core/controllers/admin.py#L809 -- \r\nIn this handler, the get method can have self.normalized_request with role and username as Optional[str] whereas in its delete method self.normalized_request can have role and username as only string. But in the Generic approach, we are defining self.normalized_request and self.normalized_payload only once so there is a contradiction in this approach. Can you please take a look at this? @vojtechjelinek @aasiffaizal "", 'comment_created': datetime.datetime(2022, 10, 28, 10, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1007926310, 'comment_body': 'Docstring updated! ', 'comment_created': datetime.datetime(2022, 10, 28, 10, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1008466107, 'comment_body': ""I think I'm ok with the current handler -- I find the argument about parity between /admin and /blog_admin compelling. @vojtechjelinek what do you think?"", 'comment_created': datetime.datetime(2022, 10, 28, 20, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1008611523, 'comment_body': 'This is a functional change from before--why is it necessary?', 'comment_created': datetime.datetime(2022, 10, 29, 2, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1008611662, 'comment_body': 'This is a functional change from before--is this needed?', 'comment_created': datetime.datetime(2022, 10, 29, 2, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1008651310, 'comment_body': ""Shouldn't the return_type be non-optional?"", 'comment_created': datetime.datetime(2022, 10, 29, 7, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1008664581, 'comment_body': 'Generics Added PTAL!', 'comment_created': datetime.datetime(2022, 10, 29, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1008667365, 'comment_body': 'If we keep `strict=False` then `topic_rights` can be a None value and if we see line 93 just below this line, there we are not accounting for the case that topic_rights can be None and accessing the `topic_is_published` attribute. So, if topic_rights is None, then a python error will occur because there is no `topic_is_published` attribute on None. So, just to throw a more explicit error than the python attribute error on None. I used `strict=true` here. Also, `strict=true` also narrows down the type, now topic_rights can only be a non-None value.', 'comment_created': datetime.datetime(2022, 10, 29, 9, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1008667962, 'comment_body': ""> is this needed?\r\n\r\nYes, because strict=false allows None values, whereas strict=True only allows non-None values and on None values, an explicit error is thrown. And if we see the flow of code then it seems to me that a None topic is not expected here. \r\n\r\nLet me know if this clears things up. I'm happy to explain a bit further if needed. "", 'comment_created': datetime.datetime(2022, 10, 29, 9, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1008668013, 'comment_body': ""Yeah, you're right. Fixed!"", 'comment_created': datetime.datetime(2022, 10, 29, 9, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1008726285, 'comment_body': 'I partially agree. The thing is that we should differentiate between the different actions on the same object by using different HTTP handlers (like PUT and DELETE). This is better because it enables us to do more precise handler schema validation and also this will help with more proper typing (in the future). ', 'comment_created': datetime.datetime(2022, 10, 29, 16, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1008730134, 'comment_body': ""But in this case, both operations are logically PUTs, right? (according to REST) since they modify the data. I don't think reverting is the same as a delete operation."", 'comment_created': datetime.datetime(2022, 10, 29, 16, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1009432143, 'comment_body': ""Yeah, I think you're right. But the issue still stays I think. We cannot really easily validate schema in the handlers that use `action` (and also MyPy). For some the solution might be to split them up (for example in the preferences page or in _admin.py_ (where `action` is used just to reduce the number of handlers)."", 'comment_created': datetime.datetime(2022, 10, 31, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1009466428, 'comment_body': ""You can maybe put this into `setUp`, so you don't need to redefine it in every function."", 'comment_created': datetime.datetime(2022, 10, 31, 14, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1009470198, 'comment_body': '```suggestion\r\n    def test_banning_topic_manager_should_remove_user_from_topics(\r\n```', 'comment_created': datetime.datetime(2022, 10, 31, 14, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1009487155, 'comment_body': 'Unneeded empty line.', 'comment_created': datetime.datetime(2022, 10, 31, 14, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1009514341, 'comment_body': '```suggestion\r\n        self,\r\n        template: Union[str, Pattern[str]],\r\n        handler: Callable[..., object],\r\n        *,\r\n        name: str = ...\r\n```', 'comment_created': datetime.datetime(2022, 10, 31, 14, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1009790505, 'comment_body': 'Got it--thanks for the explanation!', 'comment_created': datetime.datetime(2022, 10, 31, 19, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1010323673, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 1, 11, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1010323714, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 1, 11, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1010323779, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 1, 11, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1010323837, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 1, 11, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '4b855a5c8ddc6eceae558be5893fa8842d2853dc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3980a78eb8bb023ceaa395a38a0564b465bde832', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0de77f245e482ee877246f94da774905ed2056a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a8e8664de3192e2e77b2025587652723379b42', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dfa66a175f5902ee4693261937eb02aa8749868', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500b5f946632e0e0375f57933f9babe9c5a5d5cb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa2a9edae4dfa0b66ac5521b82ba09eba23d7e3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16fb7b245f94917ff0f5e5aa61da11050b521227', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19678301cbdacd245b12f345150cc810a2188c17', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0fb787ceadae46ab436b3be4c50b618eab7197', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b42827eabb50ae0a5be4b8fe317a0494cc58a38', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7db9f3913acbc21f7a91e6e3df920fbb4682caa3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030d539ea97b4bee058ccf58b4978fd520a52917', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c7bade745fa015f995a9a05596a8723d98aa5c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1182b928d8ede36e77c6e5ec28ac7559955b0cc9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a174e9b7909875c46a8dc696b4bf98cf0a9cba8a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2f052e737396d7bebbbb9448455e8437a80c54', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311fac1cf7ddc0aeb78b7c7728731837bb50db91', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c8ad15b18f5db721e47bc6af298cf11310b1bde', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2105f9fca7ca255eb109a3b836a3250b6836645b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97421f1d7308e6bdd594eee35dd0cb05fbb056cc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e03a25cc6b0b52a409f4f4c27e7b202fb1ea8aa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27d66404639743692bae5eaa9d3778c103a35cf8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ab6176b4f87c2c3244a6442adf45aa0332d212', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c76d90cae3d85f6cd948754ccd5c95a5969a0c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb80ccfd0c04986afb33449cfcfbd1fa08047f23', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2593b156627e9b73d85af243732330605505c43', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ada81e43a731122f0d0688117af32baff9e06c9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6460145c032d4d024ca984d4ea9e764e3ec98f3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a6c9845e11cc365ebf7be3edbfa03081ee1e43', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3241b959302fabcbf674036c16ed63519850e421', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dcf7d3a95aac02280343945001d2b065199c365', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62192e466def8a9ee61baf189c9bf318aaaf347d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f263b016459b0374e11253d3cf2a7810238e9b1f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b4076c7d59e25d043dee6cfb9315f2a860e41d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f911c70c391a8f4504abc2c36cc18ce78adbd2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ab928370fc8e9874fe4ad4fd0d805af77d21a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f795284e13e84d44580a6f2978bff3935f417f08', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '876da8b7b8a11c937340b4fc708188b2a927549e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4a2bbd7a0964eac23c0801041528a0e6c191e1f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba83e65f3ab7375fbc2ff81324fc0a44978a498', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71de1fb96303c98a5bcc598868689f05a13dffd1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3216fab5c9f3a0e5aaecb727206f02884b404a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1106464110,Added Mypy type annotations to the `core/controller` directory's files - 2.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type annotations to the files of the `core/controllers` directory. 

## Essential Checklist
- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
Proof of MyPy checks that changes are correct.

![Screenshot from 2022-11-01 14-45-36](https://user-images.githubusercontent.com/12553576/199201050-c9df02fb-2ea8-4f87-a7b6-8dc5cff97e21.png)


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16461,https://api.github.com/repos/oppia/oppia/pulls/16461,https://github.com/oppia/oppia/pull/16461,closed,2511,1020,36,80,17,76,1,1,[{'name': 'PR: LGTM'}],2022-11-01 09:18:18+00:00,2022-11-10 11:47:44+00:00,786566.0,"9 days, 2:29:26","[{'comment_id': 1011028809, 'comment_body': '```suggestion\r\n    normalized_payload dictionary.\r\n```', 'comment_created': datetime.datetime(2022, 11, 2, 0, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1011242667, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 2, 6, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1011440077, 'comment_body': ""I don't think I follow the explanation for why an assert is sensible here -- this seems based on general reasoning and not a condition from earlier in the code. So, if we don't expect node.exploration_id to be None in practice, then shouldn't we raise an exception instead?"", 'comment_created': datetime.datetime(2022, 11, 2, 9, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011443932, 'comment_body': 'Why is this the right thing to do, rather than check for the condition and raise an exception?', 'comment_created': datetime.datetime(2022, 11, 2, 9, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011450269, 'comment_body': 'exists --> exist\r\n\r\nWhy don\'t we just do ""if self.user_id is not None"" instead of ""if self.username""?', 'comment_created': datetime.datetime(2022, 11, 2, 9, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011453669, 'comment_body': ""This won't work, remember we talked before about how assertions can't assume particular behaviour from caller functions which are currently calling the code. You'll need to do an exception, or strictly type the dict.\r\n"", 'comment_created': datetime.datetime(2022, 11, 2, 9, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011456799, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 11, 2, 9, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011458741, 'comment_body': 'Should the comment refer to stats_dict?\r\n\r\nIf you are going this route then I think you need a backend test or some check to confirm that each possible element of AllowedStatsTypes has a topic_name field. Though I\'m a bit confused about why it\'s OK to read the topic_id field but not topic_name,\r\n\r\nEDIT: by ""indexing"" do you mean writing / adding a field? Ditto below.', 'comment_created': datetime.datetime(2022, 11, 2, 9, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011467110, 'comment_body': 'Why did this change?', 'comment_created': datetime.datetime(2022, 11, 2, 9, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011468447, 'comment_body': ""This seems off to me. Can you make it more specific or justify why we need this level of generality? I don't think we have different kinds of thread dicts and even if we did you should be using an explicit Union rather than Any."", 'comment_created': datetime.datetime(2022, 11, 2, 9, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011472352, 'comment_body': 'Why does this need to change?', 'comment_created': datetime.datetime(2022, 11, 2, 9, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1011530140, 'comment_body': 'Should a list of choices be only allowed here?', 'comment_created': datetime.datetime(2022, 11, 2, 10, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1011551971, 'comment_body': '```suggestion\r\n            for opp in self._get_reviewable_exploration_opportunity_summaries(\r\n                self.user_id, topic_name\r\n            ):\r\n```', 'comment_created': datetime.datetime(2022, 11, 2, 10, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1013242962, 'comment_body': ""> shouldn't we raise an exception instead?\r\n\r\nDone"", 'comment_created': datetime.datetime(2022, 11, 3, 18, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013245620, 'comment_body': 'Because at this point self.normalized_* can never be None:\r\n\r\nAs soon as we removed the class name from `handler_schema_constants.HANDLER_CLASS_NAMES_WITH_NO_SCHEMA`. The code executed further than this `if` clause \r\nhttps://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/base.py#L386\r\nand if the code is executed further, then self.normalized_* always populated. It may become empty dict but it will not stay as None.\r\nhttps://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/base.py#L504', 'comment_created': datetime.datetime(2022, 11, 3, 18, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013247572, 'comment_body': 'Because `self.username` can only be recorded if a user is logged in correctly.\r\nBy this I mean,\r\nif a user logged in with deleted account ( or is supposed to be deleted ) then its username not recoded https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/base.py#L259\r\nIf a user is partially logged in then also username is not recorded\r\nhttps://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/base.py#L261\r\nIff user is correctly logged in then username recorded:\r\nhttps://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/base.py#L265\r\n\r\nBut in all cases `self.user_id` is recorded:\r\nhttps://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/base.py#L257', 'comment_created': datetime.datetime(2022, 11, 3, 18, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013247756, 'comment_body': 'An exception is raised. Thanks to point that out it was supposed to be done before the PR review, sorry.', 'comment_created': datetime.datetime(2022, 11, 3, 18, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013247903, 'comment_body': 'Above we are raising an error -- so assert is applicable here.', 'comment_created': datetime.datetime(2022, 11, 3, 18, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013248401, 'comment_body': ""> Should the comment refer to stats_dict?\r\n\r\nYes, the comment updated!\r\n\r\n> If you are going this route then I think you need a backend test or some check to confirm that each possible element of AllowedStatsTypes has a topic_name field.\r\n\r\ntopic_name is always going to exist because we are defining topic_name for every dict https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/contributor_dashboard.py#L836 \r\nif topic_id does not exist then topic_name is populated with `UNKNOWN` value. \r\n\r\n> Though I'm a bit confused about why it's OK to read the topic_id field but not topic_name,\r\n\r\nSorry, but can you please explain a bit more about this part?"", 'comment_created': datetime.datetime(2022, 11, 3, 18, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013248898, 'comment_body': ""> Why did this change?\r\n\r\nBecause `{'img.png': None, 'test2_svg.svg': None}` makes `files` variable of Dict[str, None] type but `domain_objects_validator.validate_suggestion_images` method can only accept Dict[str, bytes] type. So, to make the type correct I did this change. \r\n\r\nHowever, the test of None case is not removed, please see the test case just above this one `test_invalid_images_raises_exception`."", 'comment_created': datetime.datetime(2022, 11, 3, 18, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013249417, 'comment_body': ""If we define a Union of typeddicts here then 3 errors will occur:\r\n1.  https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/feedback.py#L42 here `username_key` is a sting variable and typedDict with string variable is prohibited ( only string literals are allowed ).\r\n2. https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/feedback.py#L44 similar error as 1 will occur.\r\n3. https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/feedback.py#L42 index assignment error, since it is a Union type so mypy don't know which typeddict is assigned/changed."", 'comment_created': datetime.datetime(2022, 11, 3, 18, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013250343, 'comment_body': 'Because here `max_recipients` can be None (please see the schemas )\r\nhttps://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/email_dashboard.py#L236\r\n\r\nAnd inside the `send_email_to_qualified_users` method we are also accounting the None case of `max_recipients` https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/domain/user_query_services.py#L205\r\n\r\nIn my opinion, I think we are sending mails to all recipients if `max_recipients` is not provided, if it is provided then we are sending to only those last recipients.  ', 'comment_created': datetime.datetime(2022, 11, 3, 18, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013261314, 'comment_body': ""I intentionally not used `choices` here, because:\r\n1. As far as I have observed, I think `activity_type` can only have `constants.ACTIVITY_TYPE_LEARN_TOPIC` as an available choice.\r\n2. If we use `choices` here then we have to remove the else clause's exception https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/learner_goals.py#L38 and if we remove this exception then backend pending line coverage error pop-up, to fix that we have to remove if clause ( which is ok, because at this time activity_type have only one choice ).\r\n3. after removing the if clause, the `activity_type` variable is not used in method -- so pylint will throw an error.\r\n\r\nPlease let me know if I'm wrong somewhere or if maybe I missed something!"", 'comment_created': datetime.datetime(2022, 11, 3, 18, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013262387, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 3, 18, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013504820, 'comment_body': 'Drop ""Error""', 'comment_created': datetime.datetime(2022, 11, 4, 0, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013504954, 'comment_body': 'with --> for\r\n\r\nDitto in docstring above, too.', 'comment_created': datetime.datetime(2022, 11, 4, 0, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013504981, 'comment_body': 'Drop ""Error""', 'comment_created': datetime.datetime(2022, 11, 4, 0, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013505939, 'comment_body': 'Thanks for explaining. In that case, shouldn\'t the right thing to do be to write the assertion after the ""if"" clause in base.py (with a comment), rather than here? That way, the rationale for the assertion is clear and in the place where it\'s expected, and you can avoid propagating this downstream to all the individual controllers where there\'s no easy way to verify whether it\'s warranted or not.', 'comment_created': datetime.datetime(2022, 11, 4, 0, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013508451, 'comment_body': 'Ah, thanks for explaining. OK, in that case, please do two things:\r\n\r\n(a) Change the last part to ""...then user_id is also going to exist."" (this is just a grammar thing)\r\n\r\n(b) Add more comments about why it won\'t help to check self.user_id instead.\r\n\r\nThanks!', 'comment_created': datetime.datetime(2022, 11, 4, 0, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013508765, 'comment_body': 'Maybe call this corrupt_stats -- conveys its purpose more. Ditto above for corrupt_story.', 'comment_created': datetime.datetime(2022, 11, 4, 0, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013512293, 'comment_body': ""This is really just one type, representing a list of stats, right?\r\n\r\nIf so, then maybe this should be ListOfContributorDashboardStats and the next one should be ListOfContributorDashboardStatsDicts? Because that's what the type represents, I think."", 'comment_created': datetime.datetime(2022, 11, 4, 0, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013515029, 'comment_body': 'I think the confusion comes because you are using the word ""indexing"", which implies looking up or filtering or sorting on a field that is already there. \r\n\r\nLooking at the code, I think what you mean is ""adding a new field to a Union type"", is that correct? If so, then it\'s better to say that instead.\r\n\r\nThat said, on reading this in more detail, I think you are playing a bit fast-and-loose with types here because you\'re mutating a TypedDict, and that\'s quite messy. Instead, I suggest that you add a new to_frontend_dict() method and just call that instead of to_dict(). That method should create the correct dict directly (enumerating all its key-value pairs). The only one you\'ll have trouble with is probably the topic_id --> topic_name conversion but it\'s fine to do just that one here with the MyPy ignore. (But when you have ignores for practically the whole method then the code starts to smell quite a bit.)', 'comment_created': datetime.datetime(2022, 11, 4, 0, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013516324, 'comment_body': 'Oh, I think I see the issue, you are only populating the values of the dict later, which is why the initial (invalid) representation doesn\'t matter.\r\n\r\nDon\'t do that. Construct the values first and then only construct the dict with those values. That would be cleaner. You can use separate temporary variables to store the ""file content"" values.\r\n', 'comment_created': datetime.datetime(2022, 11, 4, 0, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013517570, 'comment_body': 'Got it, but I wasn\'t saying you needed a typeddict. Why can\'t you have something like ""dict: str --> the-relevant-type-for-the-value""? I think the question I have is why we can\'t solve this without using Any.', 'comment_created': datetime.datetime(2022, 11, 4, 0, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1014111295, 'comment_body': '1. Then only restrict it to one thing for now.\r\n2. I think you can use assert to overcome the backend coverage\r\n3. I think that is fine.\r\n\r\nBasically lets only use the stuff we actually do.', 'comment_created': datetime.datetime(2022, 11, 4, 14, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1016310843, 'comment_body': 'Done, added choices field in schemas', 'comment_created': datetime.datetime(2022, 11, 8, 8, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016351205, 'comment_body': ""There are only 3 possibilities we can do here:\r\n1. We can use Union of typedDicts as mentioned in above comment.\r\n2. we can use `ThreadDictType = TypeVar('ThreadDictType', bound=List[Mapping[str, Any]])`, but this will again throw an error. Because below we are doing `thread_dict.pop` and the pop method is not defined on mapping dicts.\r\n3. We can use `ThreadDictType = TypeVar('ThreadDictType', bound=List[Union of typedDicts])` but this will throw the same error as 1. So, kind of we has only 2 approaches.\r\n\r\nIf you have any other approach I'm happy to try. "", 'comment_created': datetime.datetime(2022, 11, 8, 9, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016351280, 'comment_body': 'Fixed as suggested!', 'comment_created': datetime.datetime(2022, 11, 8, 9, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016351351, 'comment_body': 'to_frontend_dict() method is added! \r\nThe comment is also updated!', 'comment_created': datetime.datetime(2022, 11, 8, 9, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016351425, 'comment_body': '> (a)\r\n\r\nDone\r\n\r\n> (b)\r\n\r\nDone\r\n', 'comment_created': datetime.datetime(2022, 11, 8, 9, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016351498, 'comment_body': ""`asserts` can narrow down the types of variables only in those scopes where assert is used. If we use assert in the base class then assert's changes will not be reflected in subclasses. Eg: [MYPY_PLAYGROUND](https://mypy-play.net/?mypy=latest&python=3.10&flags=strict%2Cdisallow-any-expr&gist=939b558999720f89cf7d661f8639a6e4)\r\n\r\nAnd I think self.normalized_*  will never be a none value in the handlers that have schemas. If a handler is still not covered with schemas then we cannot use self.normalized_* there.\r\n"", 'comment_created': datetime.datetime(2022, 11, 8, 9, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016351892, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 8, 9, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016351994, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 8, 9, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016352091, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 8, 9, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016352291, 'comment_body': 'Done! ', 'comment_created': datetime.datetime(2022, 11, 8, 9, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016352462, 'comment_body': 'Fixed as suggested', 'comment_created': datetime.datetime(2022, 11, 8, 9, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016509694, 'comment_body': '```suggestion\r\n        state_names_to_content_id_mapping: Dict[\r\n            str, Dict[str, state_domain.TranslatableItem]\r\n        ]\r\n```', 'comment_created': datetime.datetime(2022, 11, 8, 11, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1016510494, 'comment_body': '```suggestion\r\n            if reference.story_is_published\r\n        ], strict=True)\r\n```', 'comment_created': datetime.datetime(2022, 11, 8, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1016511142, 'comment_body': '```suggestion\r\n        opportunity_dicts: List[\r\n            opportunity_domain.PartialExplorationOpportunitySummaryDict\r\n        ] = []\r\n```', 'comment_created': datetime.datetime(2022, 11, 8, 11, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1016511764, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 11, 8, 11, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1017618335, 'comment_body': 'Done, wherever it is applicable!', 'comment_created': datetime.datetime(2022, 11, 9, 8, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1017618588, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 9, 8, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1017618753, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 9, 8, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1017744275, 'comment_body': '] indentation should match the [, so try:\r\n\r\n```\r\n    if reference.story_is_published\r\n], strict=True)\r\n```', 'comment_created': datetime.datetime(2022, 11, 9, 10, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017747708, 'comment_body': '... will never be None, because ...', 'comment_created': datetime.datetime(2022, 11, 9, 10, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017747936, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 11, 9, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017749964, 'comment_body': 'Please provide a role for the new member of the exploration.', 'comment_created': datetime.datetime(2022, 11, 9, 10, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017752355, 'comment_body': ""You'll need a comment to justify why the pylint exception is needed (rather than changing the signature of the handler)."", 'comment_created': datetime.datetime(2022, 11, 9, 10, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017765522, 'comment_body': ""OK, thanks for explaining. Yes, I think the main issue is that MyPy doesn't know that get() can only be called after dispatch(), so it regards the payload value as possibly None because that's what is defined in the init method.\r\n\r\nThanks for the explanation, I think we can leave this as-is."", 'comment_created': datetime.datetime(2022, 11, 9, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017772878, 'comment_body': 'Just for clarity -- since I think this will help with future discussions -- I generally can\'t parse arguments along the lines of ""here are these three things I tried and none of them work"". It skips a very important step, which is explaining what the actual issue is. Without understanding the actual issue (which in this case is ""what exactly is being represented by each type""), I can\'t reason through the logic and we need to do more back-and-forth, which makes the discussions longer.\r\n\r\nFor this case, the core thing I need to understand as a reviewer is: what are the different types of thread dicts that makes this sort of construct necessary? Can we split ThreadDictType into different types that distinguish the meaning of each subtype? (This is a bit like what we did with the to_frontend_dict for stats -- if you are running into contortions with the types then that is likely a sign that you need to define more specific types because you are probably inappropriately treating two different things similarly.)', 'comment_created': datetime.datetime(2022, 11, 9, 10, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1018738223, 'comment_body': 'Did some changes PTAL!', 'comment_created': datetime.datetime(2022, 11, 10, 7, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018738343, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 10, 7, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018738399, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 10, 7, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018738456, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 10, 7, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018738612, 'comment_body': 'Added a comment PTAL!', 'comment_created': datetime.datetime(2022, 11, 10, 7, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018739326, 'comment_body': 'Did some changes PTAL!', 'comment_created': datetime.datetime(2022, 11, 10, 7, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018788626, 'comment_body': ""Deindent this by 4, since it's in the (...) scope"", 'comment_created': datetime.datetime(2022, 11, 10, 8, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1018791855, 'comment_body': 'accepting --> accepts', 'comment_created': datetime.datetime(2022, 11, 10, 8, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1018792042, 'comment_body': '...inside the function body. But, in future, if this ...', 'comment_created': datetime.datetime(2022, 11, 10, 8, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1018792297, 'comment_body': ""...one activity type, then please remove the pylint exception below and use an 'if-else' ..."", 'comment_created': datetime.datetime(2022, 11, 10, 8, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1018792381, 'comment_body': 'Ditto as above.', 'comment_created': datetime.datetime(2022, 11, 10, 8, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1018825884, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 10, 9, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018825967, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 10, 9, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018826045, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 10, 9, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018826123, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 10, 9, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018826190, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 10, 9, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '4b855a5c8ddc6eceae558be5893fa8842d2853dc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3980a78eb8bb023ceaa395a38a0564b465bde832', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0de77f245e482ee877246f94da774905ed2056a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a8e8664de3192e2e77b2025587652723379b42', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dfa66a175f5902ee4693261937eb02aa8749868', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500b5f946632e0e0375f57933f9babe9c5a5d5cb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa2a9edae4dfa0b66ac5521b82ba09eba23d7e3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16fb7b245f94917ff0f5e5aa61da11050b521227', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19678301cbdacd245b12f345150cc810a2188c17', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0fb787ceadae46ab436b3be4c50b618eab7197', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b42827eabb50ae0a5be4b8fe317a0494cc58a38', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7db9f3913acbc21f7a91e6e3df920fbb4682caa3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030d539ea97b4bee058ccf58b4978fd520a52917', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8c7bade745fa015f995a9a05596a8723d98aa5c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1182b928d8ede36e77c6e5ec28ac7559955b0cc9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a174e9b7909875c46a8dc696b4bf98cf0a9cba8a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2f052e737396d7bebbbb9448455e8437a80c54', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311fac1cf7ddc0aeb78b7c7728731837bb50db91', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c8ad15b18f5db721e47bc6af298cf11310b1bde', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2105f9fca7ca255eb109a3b836a3250b6836645b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97421f1d7308e6bdd594eee35dd0cb05fbb056cc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e03a25cc6b0b52a409f4f4c27e7b202fb1ea8aa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27d66404639743692bae5eaa9d3778c103a35cf8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ab6176b4f87c2c3244a6442adf45aa0332d212', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c76d90cae3d85f6cd948754ccd5c95a5969a0c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb80ccfd0c04986afb33449cfcfbd1fa08047f23', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2593b156627e9b73d85af243732330605505c43', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ada81e43a731122f0d0688117af32baff9e06c9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6460145c032d4d024ca984d4ea9e764e3ec98f3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a6c9845e11cc365ebf7be3edbfa03081ee1e43', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3241b959302fabcbf674036c16ed63519850e421', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dcf7d3a95aac02280343945001d2b065199c365', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62192e466def8a9ee61baf189c9bf318aaaf347d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f263b016459b0374e11253d3cf2a7810238e9b1f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b4076c7d59e25d043dee6cfb9315f2a860e41d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f911c70c391a8f4504abc2c36cc18ce78adbd2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ab928370fc8e9874fe4ad4fd0d805af77d21a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f795284e13e84d44580a6f2978bff3935f417f08', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77408311cc728ec4f1f3deb1261a8aad8ee035f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbb15ddcb956f78feccd3ded91cda3fae06ac1e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe4adabd0d1329a3fe83c95aacabb406cab4fb2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a726bff335bd6412109047e92088aeecbba8d4a6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '727a8ff11eaa741d83af7ba19d7010a41d7ca1dd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '729c271c9c46f9474d6db9ee20436541e66d66b5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8edd8d6e4798927c58a045a4eb550e00e1ce8e54', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa28d33cce16d44646ea7bef28b84e513519edc6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0db407205cb3be24cbb48bc01ee91ba461b727b0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '876da8b7b8a11c937340b4fc708188b2a927549e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4a2bbd7a0964eac23c0801041528a0e6c191e1f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba83e65f3ab7375fbc2ff81324fc0a44978a498', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f7021d30edd2e804625ddce89bf1a019bfe70dc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f079bd91a6b2484e436ca74cfc632a551bb8a204', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f19a0bc9603f6c250cc0e852abffcd2e345854ac', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c17ab7c352d0417d16837b6afe3091585484bc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e6d6f0b5447a84b35af3848a550df7bd1bb820', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71de1fb96303c98a5bcc598868689f05a13dffd1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3216fab5c9f3a0e5aaecb727206f02884b404a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6cc72b87591674019b385947bbf8b52f01ed62', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb02980b7a159f98e6b595ffa02f46389e426caf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0014ac49b47395b905a1bb64ad7b900da4653ca2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d7214272b02cb178609d79cc92392ecc7985123', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4130a8c1112fd02c70722bc8263ce999de69cad6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e416184803a9ecd195b0ebfef964d99fc070bf82', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c3c730d71526fe9136754d883c3fc467033b093', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6766a95671a8a5a609a1ee0443fe91091b6ac8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c17258675c5d50fa35881c318d2e7dea9cbe9f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8d0b61e3190270bc0f060a3688575d7565f4d22', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fa9bcac448bbf47f594883e69c3c57f96de970d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70eb7fddd1f39d5e6e0e65e33d5dee7a1afaf42e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae09dabcecc0ee2a4be0dacb1f7307c26201052c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b44a1f66831aa207f8d95b7f14dc16033327894f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee472961daf5114d93b195b4ee449947f042df5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a855c7a9f882e16039aa38c30da182b1d541a0b5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a12eb1ef4a8cba33a2fa0f89a03c8f067f4bda26', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2180fcae2c58c2076a75dcf9c7b9d6e3004c918f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c05c1d93a10a80adb6c460a932b4cc3842773dfc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfe2f30b606ef2436ccbcb766e7cb91d5ac3e5b7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd4670182fa206f3b83af9b1f3bb74062b1f0c5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c0ec7e92037e31c4309148d24f2848f3de7aed', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc82c26fdfa4e35bd3d0dfa52cfaf5f149bac60a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1108187042,Added Mypy type annotations to the `core/controller` directory's files - 3.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type annotations to the files of the `core/controllers` directory. 

## Essential Checklist
- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
Proof of MyPy checks that changes are correct.
![Screenshot from 2022-11-02 17-59-14](https://user-images.githubusercontent.com/12553576/199490007-2a29d7de-03d6-444b-a19e-86a60ce768ab.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16473,https://api.github.com/repos/oppia/oppia/pulls/16473,https://github.com/oppia/oppia/pull/16473,closed,2153,916,41,39,11,23,2,1,"[{'name': 'PR: LGTM'}, {'name': 'PR: Affects datastore layer'}]",2022-11-02 12:31:02+00:00,2022-11-10 02:31:25+00:00,655223.0,"7 days, 14:00:23","[{'comment_id': 1013176362, 'comment_body': ""I did this change because here https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/contributor_dashboard_admin.py#L106\r\nLanguage_code can be none. At first, it seems that language_code should not be none but the method just above `allow_user_to_review_translation_in_language` in contributor_dashboard_admin is accepting optional language_code https://github.com/oppia/oppia/blob/934e23416ebb513935c124ed2be93e26a2632785/core/controllers/contributor_dashboard_admin.py#L101\r\n\r\nSo I'm not sure is Optional language_code ok or not."", 'comment_created': datetime.datetime(2022, 11, 3, 16, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013177797, 'comment_body': 'This is the same case as mentioned for `allow_user_to_review_translation_in_language` above', 'comment_created': datetime.datetime(2022, 11, 3, 16, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1013598330, 'comment_body': 'Same question here as in the other PR (about why we need to do this); ditto elsewhere.', 'comment_created': datetime.datetime(2022, 11, 4, 4, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013599145, 'comment_body': 'Deindent this and the following few line by 4. (The closing paren should be at the same indentation level as the line with the opening paren.)', 'comment_created': datetime.datetime(2022, 11, 4, 4, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013600039, 'comment_body': 'No --> There is no\r\n\r\nAlso it\'s a bit confusing -- what is ""the"" TranslationContributionStats? From the function signature it looks like there can be more than one TranslationContributionStats so I think some clarification is needed.', 'comment_created': datetime.datetime(2022, 11, 4, 4, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013600522, 'comment_body': 'This needs an explanatory comment.', 'comment_created': datetime.datetime(2022, 11, 4, 4, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013601170, 'comment_body': ""`No language_code exists for the topic with topic_id %s`\r\n\r\nThat said, I'm a bit confused -- does the language code not exist for the topic, or in the stats dict? These are different things."", 'comment_created': datetime.datetime(2022, 11, 4, 4, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013601860, 'comment_body': ""In both cases it can't be optional (conceptually). Could you please modify accordingly?"", 'comment_created': datetime.datetime(2022, 11, 4, 4, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1013602015, 'comment_body': ""Yup, it shouldn't be None. That would be an error case. Worth double-checking the callsites to ensure that that's not a possible argument."", 'comment_created': datetime.datetime(2022, 11, 4, 4, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1016436622, 'comment_body': 'Raised an exception PTAL!', 'comment_created': datetime.datetime(2022, 11, 8, 10, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016436849, 'comment_body': 'Raised an exception PTAL!', 'comment_created': datetime.datetime(2022, 11, 8, 10, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016439330, 'comment_body': 'Done indentation is fixed', 'comment_created': datetime.datetime(2022, 11, 8, 10, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016442304, 'comment_body': ""Previously I was adding `the` because we can throw an error for None `stats_dict['topic_id']` only once at a time. But now, I have changed the error statement PTAL!"", 'comment_created': datetime.datetime(2022, 11, 8, 10, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016442416, 'comment_body': 'added!', 'comment_created': datetime.datetime(2022, 11, 8, 10, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016443538, 'comment_body': '> does the language code not exist for the topic, or in the stats dict? \r\n\r\nThis exception is for the stats dict, and the error statement is changed for the same.', 'comment_created': datetime.datetime(2022, 11, 8, 10, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016446393, 'comment_body': 'I think we should keep the conversation in only one place https://github.com/oppia/oppia/pull/16461#discussion_r1011443932 and mention the conclusion of that conversation here.', 'comment_created': datetime.datetime(2022, 11, 8, 10, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016450582, 'comment_body': ""> Previously I was adding the because we can throw an error for None stats_dict['topic_id'] only once at a time.\r\n\r\nBy this statement I mean, If we have two consecutive None `stats_dict['topic_id']` then the error for the second None can only be displayed until the first none's error is resolved."", 'comment_created': datetime.datetime(2022, 11, 8, 10, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1017738653, 'comment_body': 'give --> given', 'comment_created': datetime.datetime(2022, 11, 9, 10, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017738817, 'comment_body': 'Missing period at end.', 'comment_created': datetime.datetime(2022, 11, 9, 10, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017740790, 'comment_body': 'give --> given', 'comment_created': datetime.datetime(2022, 11, 9, 10, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1018214187, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 9, 17, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018214278, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 9, 17, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1018214507, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2022, 11, 9, 17, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '4b855a5c8ddc6eceae558be5893fa8842d2853dc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3980a78eb8bb023ceaa395a38a0564b465bde832', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0de77f245e482ee877246f94da774905ed2056a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a8e8664de3192e2e77b2025587652723379b42', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dfa66a175f5902ee4693261937eb02aa8749868', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500b5f946632e0e0375f57933f9babe9c5a5d5cb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa2a9edae4dfa0b66ac5521b82ba09eba23d7e3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16fb7b245f94917ff0f5e5aa61da11050b521227', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19678301cbdacd245b12f345150cc810a2188c17', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698e2d6117c905e3e132735c5841273c1cea45d8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f48da5321e4ebb76fe33ed5c4a08adaf75d34a2f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d115b42e454672704b1c6ff69a2365074fdd928', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '703503bead8015440ed59c45a7a0de71089bbac0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0077051e9ee6e0f4f2a8444a0704176a92daf66e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db590642827dd9a2e2fc4cbc635ddfddced3a742', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '403bc332c64ee0ef9ab861660f2684f030350909', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcf488822b8e3885d9999d08c0721a8b7c58b730', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4da852fc0d50e8719962ba24edc9df1558a61b13', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '575c12851f26933fa9d37267d8bf50859df6af9b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41838ed1f5489a4ba43d360ab3f9a68c1970eb7d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7544f0877ae897016242d17d8a9974c6d64a0b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40100b75f3f85c476c96331cd7656d5be828af35', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff5edd126fe486e0bf96176da0f1754285315e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a602ea4fe28d819244f5a3d7e5b09d3ec36bb619', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e61436502b317e7bf1016a4079d4e7e5b2a9c1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b2d9b8a6284433d6139f55c8159d8335f5daafd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '143a8367bf641b1722c6a514dcaf4787c54b10fe', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d2eaff3f35cbb61a820f6eb6bddbf120606ec4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd809b045f22b8856918e43a9004b5351175dbf2f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '778c369f88ae3b8a8158128e12bea6ae82f186cc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37a195fa2f8bd28abbd64b1e7d685b25be35066', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4cf3ebe97651cf1488fb11923791e5e4c69b10', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4a9c6f74905f2d1af8781b6e38b626b90019389', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '496b2872499d17ad7745e2b4101aefd653a43bfa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a198499a7e4bc06ed8022be9d81a8c332100cec1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8492ad17657e7281d30a992ead333201b85bea5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e3c852cf441549a5243bb11ff800670ef8d100', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25b14617841a75791b531d5f7074f8b9c428dae8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97f0e54e04f26c4d6d1a2accb68dc40578494403', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1113044675,Added Mypy type annotations to the `core/controller` directory's files - 4,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type annotations to the files of the `core/controllers` directory. 

## Essential Checklist
- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
Proof of MyPy checks that changes are correct.
![Screenshot from 2022-11-07 22-21-32](https://user-images.githubusercontent.com/12553576/200368062-a0363f4f-6459-4a3e-a76d-f0810541915e.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16501,https://api.github.com/repos/oppia/oppia/pulls/16501,https://github.com/oppia/oppia/pull/16501,closed,3611,1581,47,53,28,158,1,1,[{'name': 'PR: LGTM'}],2022-11-07 16:53:08+00:00,2022-11-19 15:09:14+00:00,1030566.0,"11 days, 22:16:06","[{'comment_id': 1016488721, 'comment_body': ""This method is decorated with `open_acess` but here we are passing `self.user_id` without any condition to set `user_has_viewed_lesson_info_modal_once`. I'm not sure what should be the behavior here because if a user is not logged in then `self.user_id` is None and this can lead to an error."", 'comment_created': datetime.datetime(2022, 11, 8, 11, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1016524497, 'comment_body': '@vojtechjelinek @seanlip PTAL!', 'comment_created': datetime.datetime(2022, 11, 8, 11, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1017409742, 'comment_body': 'Why is this removed?', 'comment_created': datetime.datetime(2022, 11, 9, 4, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1017410202, 'comment_body': '```suggestion\r\n        self, \r\n        config_obj: config_domain.ConfigProperty,\r\n        new_config_value: Union[str, bool]\r\n```', 'comment_created': datetime.datetime(2022, 11, 9, 4, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1017412809, 'comment_body': 'Why `list` is needed?', 'comment_created': datetime.datetime(2022, 11, 9, 4, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1017413400, 'comment_body': 'I think this should be replaced with `JsonEncodedInString`, which will probably require frontend changes. So feel free to add it as a TODO.', 'comment_created': datetime.datetime(2022, 11, 9, 4, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1017594358, 'comment_body': 'While this was the code before, is this actually logically correct? The MyPy error here may be pointing out a real inconsistency in the test that could (and probably should) be corrected rather than ignoring the type error.', 'comment_created': datetime.datetime(2022, 11, 9, 8, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1017793120, 'comment_body': 'What forced this to change? (In general we should try to avoid expanding a union since it adds additional complexity to the codebase, so I need to ask this as a reviewer.)', 'comment_created': datetime.datetime(2022, 11, 9, 11, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017793457, 'comment_body': '...complex dicts, etc.', 'comment_created': datetime.datetime(2022, 11, 9, 11, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017793644, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 11, 9, 11, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017793922, 'comment_body': 'needs --> need', 'comment_created': datetime.datetime(2022, 11, 9, 11, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017794055, 'comment_body': 'used --> uses', 'comment_created': datetime.datetime(2022, 11, 9, 11, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017794622, 'comment_body': ""Maybe update the docstring since this doesn't actually always return a bool."", 'comment_created': datetime.datetime(2022, 11, 9, 11, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017797095, 'comment_body': 'I\'m slightly confused. If we don\'t use the ""secret"" then why are we sending it at all? \r\n\r\nDitto below.', 'comment_created': datetime.datetime(2022, 11, 9, 11, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017797941, 'comment_body': 'Can you use a more descriptive variable name here than x -- what does x actually represent?', 'comment_created': datetime.datetime(2022, 11, 9, 11, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017801397, 'comment_body': ""Good catch. What in the frontend is calling this handler -- can you tell me which page it comes from and in what circumstances it is called?\r\n\r\nIf this is related to the checkpoints functionality please check with @nithinrdy @paprajapati9 what is the expected behaviour for logged-out users (you can also use the 'blame' functionality at the top right [here](https://github.com/oppia/oppia/blob/c1e593fabe117c238e7d187582ce7b1baff38967/core/controllers/profile.py) to see who actually added this handler)."", 'comment_created': datetime.datetime(2022, 11, 9, 11, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017803636, 'comment_body': 'Optional: could simplify to ""if strict and user_id is None""', 'comment_created': datetime.datetime(2022, 11, 9, 11, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017804589, 'comment_body': 'Why delete this? Seems like a useful double-check for defense-in-depth.', 'comment_created': datetime.datetime(2022, 11, 9, 11, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1017868095, 'comment_body': 'This is weird, also the schema is probably incorrect, we should pass false as a bool and not as a string.', 'comment_created': datetime.datetime(2022, 11, 9, 12, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1017869084, 'comment_body': 'Ditto as above. This should only be `str`.', 'comment_created': datetime.datetime(2022, 11, 9, 12, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1017869464, 'comment_body': 'Feel free to ask the author of these handlers to fix this.', 'comment_created': datetime.datetime(2022, 11, 9, 12, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020594144, 'comment_body': 'I think this should be replaced with JsonEncodedInString, which will probably require frontend changes. So feel free to add it as a TODO.', 'comment_created': datetime.datetime(2022, 11, 11, 22, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020594435, 'comment_body': 'Do we still need this? Or can we validate these using the schemas?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020594663, 'comment_body': 'This can be disallowed by schema, right?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020594791, 'comment_body': 'Why can this be `None`?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020594803, 'comment_body': 'Why can this be `None`?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020594908, 'comment_body': 'Are there more rules for this one?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020595031, 'comment_body': ""```suggestion\r\n        'question_id': {\r\n            'schema': SCHEMA_FOR_QUESTION_ID\r\n        }\r\n```"", 'comment_created': datetime.datetime(2022, 11, 11, 22, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020595145, 'comment_body': 'Any more rules for this one?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020595290, 'comment_body': ""```suggestion\r\n                raise self.InvalidInputException(\r\n                    '%s %s' % (e, image_validation_error_message_suffix)\r\n                )\r\n```"", 'comment_created': datetime.datetime(2022, 11, 11, 22, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020596143, 'comment_body': ""```suggestion\r\n        with self.assertRaisesRegex(\r\n            Exception, 'No email_id found.'\r\n        ):\r\n```"", 'comment_created': datetime.datetime(2022, 11, 11, 22, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020597378, 'comment_body': '```suggestion\r\nclass AndroidListSubscriptionHandler(\r\n    base.BaseHandler[\r\n        AndroidListSubscriptionHandlerNormalizedPayloadDict, Dict[str, str]\r\n    ]\r\n):\r\n```', 'comment_created': datetime.datetime(2022, 11, 11, 22, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020597635, 'comment_body': 'Why can this be `None`?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020597741, 'comment_body': 'Why can this be `None`?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020597778, 'comment_body': 'Why can this be `None`?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020597857, 'comment_body': 'Any more rules to add?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020598331, 'comment_body': 'Why can this be `None`?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020598796, 'comment_body': 'Any more rules to add?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1020598999, 'comment_body': 'Why can this be `None`?', 'comment_created': datetime.datetime(2022, 11, 11, 22, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021060272, 'comment_body': 'If we do not remove this then backend test fails: https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/base_test.py#L1531\r\n\r\n\r\nBasically in this test, we check for the existence of url_path arguments. So, when we define the schema of assetsdevhandler then list of url_path arguments from that schema is [page_context, page_identifier, asset_type, encoded_filename]. But the list that was fetched from URL is [page_context, page_identifier, asset_type:(image|audio|thumbnail), encoded_filename] and this is because the regex_pattern that was used in fetching the values from URL is `<.*?>`. So instead of getting `asset_type` it is getting it as `asset_type:(image|audio|thumbnail)`\r\nhttps://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/base_test.py#L1548', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060289, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060302, 'comment_body': 'added PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060309, 'comment_body': 'Because secret is used in decorator -- https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/acl_decorators.py#L133', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060321, 'comment_body': 'Updated PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060335, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060347, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060363, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060378, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060385, 'comment_body': 'At this place, we are passing List of TypedDict https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/learner_group.py#L954\r\n\r\nAnd at this place we are passing a list of dictionaries https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/learner_group.py#L314', 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021060404, 'comment_body': ""This handler's PUT method is called here https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/templates/domain/exploration/editable-exploration-backend-api.service.ts#L192\r\n\r\nAnd recordLearnerHasViewedLessonInfoModalOnce is called when the user is logged in:\r\nhttps://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/templates/pages/exploration-player-page/layout-directives/exploration-footer.component.ts#L380\r\n"", 'comment_created': datetime.datetime(2022, 11, 14, 4, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021062751, 'comment_body': 'ca --> can', 'comment_created': datetime.datetime(2022, 11, 14, 4, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021062770, 'comment_body': 'ca --> can', 'comment_created': datetime.datetime(2022, 11, 14, 4, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021063203, 'comment_body': 'Ah, thanks for explaining. Those two places are wrong. They should be fixed to be in line with the other cases.\r\n\r\nCould you please create a TODO/issue and assign it to @paprajapati9? Part of that issue should include making the type here stricter again.', 'comment_created': datetime.datetime(2022, 11, 14, 4, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021064757, 'comment_body': 'OK, can you add a comment to explain?', 'comment_created': datetime.datetime(2022, 11, 14, 4, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021066021, 'comment_body': 'I would say, keep it open access but just do nothing in the case of self.user_id being None (and explain that in the comments).\r\n\r\nHave you tried checking with @nithinrdy @paprajapati9 too? ', 'comment_created': datetime.datetime(2022, 11, 14, 4, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021066691, 'comment_body': 'I think this is not a problem because, in the same setup method, we are creating platform parameters with `ParamNames.PARAMETER_A` https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/platform_feature_test.py#L56\r\nand the value of `ParamNames.PARAMETER_A` is `parameter_a`.\r\n\r\nand also, we are not changing it permanently we are reverting this mock behavior in teardown method by assigning the original values https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/platform_feature_test.py#L87\r\n\r\nPlease let me know If i missed or not answered something from your question!', 'comment_created': datetime.datetime(2022, 11, 14, 4, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021067569, 'comment_body': ""OK, thanks for explaining. In that case, can you just edit this line of the test to strip anything after the colon, and explain why you are doing so? Make sure to add a comment explaining why you're doing this. https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/base_test.py#L1550"", 'comment_created': datetime.datetime(2022, 11, 14, 4, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021073385, 'comment_body': 'So this controller is only called for logged in user so I agree to what sean has suggested to keep it open access and do nothing if user id is None and explain it in a comment saying that this controller is only called when user is logged in so user id cannot be none. Thanks!', 'comment_created': datetime.datetime(2022, 11, 14, 4, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paprajapati9', 'type': 'User'}, {'comment_id': 1021074725, 'comment_body': 'Because if list_id is not None then we return earlier by doing `self.render_json({})`', 'comment_created': datetime.datetime(2022, 11, 14, 4, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021074746, 'comment_body': ""I don't think so because list_id can be anything! right?"", 'comment_created': datetime.datetime(2022, 11, 14, 4, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021074848, 'comment_body': 'Yup, we can pass it as dict with list of typed dicts as values. Just assign the issue opened to me, I will make that change here and at the required backend service APIs as well. Thanks!', 'comment_created': datetime.datetime(2022, 11, 14, 4, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'paprajapati9', 'type': 'User'}, {'comment_id': 1021075336, 'comment_body': 'Because if list_id is not equal to `feconf.MAILCHIMP_AUDIENCE_ID` then we no need to pass email_id and type.', 'comment_created': datetime.datetime(2022, 11, 14, 5, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021075635, 'comment_body': 'explained above.', 'comment_created': datetime.datetime(2022, 11, 14, 5, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021076528, 'comment_body': 'Because here we are handling it gracefully ( I guess) https://github.com/oppia/oppia/blob/f8a8d680c6f95dfc3c63a003484177ac06e4ce21/core/controllers/reader.py#L718', 'comment_created': datetime.datetime(2022, 11, 14, 5, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079548, 'comment_body': ""Because if `entity_type == feconf.ENTITY_TYPE_EXPLORATION` condition is not true then we don't need state_name."", 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079566, 'comment_body': ""for fetch_by_difficulty I have added some more rules but for question_count I don't think we have more rules."", 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079605, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079608, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079617, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079624, 'comment_body': 'Added PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079631, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079636, 'comment_body': 'Added PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079646, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079655, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079659, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079672, 'comment_body': 'Did some changes, and basically shifted this method to domain_object_validator to reduce repetition in handlers. PTAL!\r\n\r\nAnd yeah we need this to validate every single skill id.', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079689, 'comment_body': 'TODO https://github.com/oppia/oppia/issues/16538 is added!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079714, 'comment_body': ""I'll send a mail to them, Thanks!"", 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079718, 'comment_body': ""I'll send a mail to them, Thanks!"", 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079731, 'comment_body': 'TODO https://github.com/oppia/oppia/issues/16538 is added!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079735, 'comment_body': 'Because skill_ids is a set of strings but the expected value is list of strings', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079748, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021079758, 'comment_body': 'Replied here https://github.com/oppia/oppia/pull/16501#discussion_r1021060272', 'comment_created': datetime.datetime(2022, 11, 14, 5, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021135330, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 7, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021135377, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 14, 7, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021135609, 'comment_body': 'Todo added PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 7, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021135837, 'comment_body': 'Comment added PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 7, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021136102, 'comment_body': 'Changes are added with comment PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 7, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021136389, 'comment_body': 'Changes are added with comment PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 7, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021142408, 'comment_body': ""I think it's worth noting that, in the case where ':' doesn't exist, the url_argument_delimiter_index is -1 ... which, by chance, is actually what you want it to be since you're trimming the last character.\r\n\r\nBut that's not obvious conceptually. So I suggest you actually parse out the thing between `<` and `>`, and _then_ trim the ':' if it exists. Otherwise this is hard to maintain and reason through intuitively."", 'comment_created': datetime.datetime(2022, 11, 14, 7, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021154591, 'comment_body': ""re.findall() can return a list of strings iff it found something. \r\n\r\n> So I suggest you actually parse out the thing between < and >, and then trim the ':' if it exists.\r\n\r\na keyword can only exist if we have something between <>. Because if URL does not contain `<`and `>` then re.findall will return an empty list. But is there a case we have `some_url/<>`?, because in that case only, keyword exist with an empty string? "", 'comment_created': datetime.datetime(2022, 11, 14, 7, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021163934, 'comment_body': ""No, you wouldn't have an empty string here.\r\n\r\nBasically, the previous code took out the part between `<` and `>`. I am suggesting continuing to do that, and then finding a ':' in that string if needed."", 'comment_created': datetime.datetime(2022, 11, 14, 7, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021241481, 'comment_body': 'Positive at least?', 'comment_created': datetime.datetime(2022, 11, 14, 9, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021253788, 'comment_body': '@paprajapati9 Would it be possible to add more rules here? For example maximal length?', 'comment_created': datetime.datetime(2022, 11, 14, 9, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021263831, 'comment_body': ""I'm not really sure."", 'comment_created': datetime.datetime(2022, 11, 14, 9, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021271051, 'comment_body': 'Hmm I think we still should enforce this to be not `None`, then you can remove the condition for throwing the error when email is `None` below.', 'comment_created': datetime.datetime(2022, 11, 14, 9, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021271704, 'comment_body': 'ditto as for email', 'comment_created': datetime.datetime(2022, 11, 14, 9, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021274264, 'comment_body': 'Hmm, can you investigate whether is this really needed?', 'comment_created': datetime.datetime(2022, 11, 14, 9, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021282997, 'comment_body': ""```suggestion\r\n        'question_id': {\r\n             'schema': SCHEMA_FOR_QUESTION_ID\r\n        }\r\n```"", 'comment_created': datetime.datetime(2022, 11, 14, 9, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021294378, 'comment_body': '```suggestion\r\n                        logged_out_user_data.exploration_id, \r\n                        unique_progress_url_id, \r\n                        strict=True\r\n                    )\r\n                )\r\n```', 'comment_created': datetime.datetime(2022, 11, 14, 10, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021298757, 'comment_body': 'But we are logging an exception in the case when `new_state_name` is `None`, so it seems like it is not an expected case.', 'comment_created': datetime.datetime(2022, 11, 14, 10, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021300877, 'comment_body': 'Can we allow `Set` as an input to the called function?', 'comment_created': datetime.datetime(2022, 11, 14, 10, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021307012, 'comment_body': 'Why is this not `bool`?', 'comment_created': datetime.datetime(2022, 11, 14, 10, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021307178, 'comment_body': 'Should we validate the regex?', 'comment_created': datetime.datetime(2022, 11, 14, 10, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021312205, 'comment_body': 'Hmm, that makes sense, the ideal solution would probably be to split up the handler into two, one for exp and one for question.', 'comment_created': datetime.datetime(2022, 11, 14, 10, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1022076751, 'comment_body': ""I'm not sure that fully addresses my question, actually. The issue here seems to be that we shouldn't be assigning a list of str to ALL_FEATURES_LIST, regardless of whether it's temporary. I think MyPy is actually revealing that the test is wrong here: we should be assigning a list of features, as expected, to ALL_FEATURES_LIST."", 'comment_created': datetime.datetime(2022, 11, 14, 21, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1022284065, 'comment_body': 'There are no limitations for length of the group title, but if you want some form of comparison to add rules, we can add similar rules as topic or exploration titles if any are present for them.', 'comment_created': datetime.datetime(2022, 11, 15, 3, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'paprajapati9', 'type': 'User'}, {'comment_id': 1022286971, 'comment_body': ""Let's definitely limit it. I believe exploration titles do have a max length of 38 or so (at least for curated ones, not sure about the general case).\r\n\r\n@lkbhitesh07 @EricZLou do you have any pointers to the code for this?"", 'comment_created': datetime.datetime(2022, 11, 15, 3, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022298752, 'comment_body': 'Yep, we have a constant `MAX_CHARS_IN_EXPLORATION_TITLE = 36`,', 'comment_created': datetime.datetime(2022, 11, 15, 4, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'EricZLou', 'type': 'User'}, {'comment_id': 1022308282, 'comment_body': 'In that case @sahiljoster32, can you please add a maximum limit of 36 chars to rules here. I will add the frontend validation for it when fixing #16549 issue which I opened for this.', 'comment_created': datetime.datetime(2022, 11, 15, 4, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'paprajapati9', 'type': 'User'}, {'comment_id': 1023136569, 'comment_body': 'Did some changes, PTAL!. Basically, now we are not assigning list of str, we are assigning list of ParamEnums.', 'comment_created': datetime.datetime(2022, 11, 15, 18, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023137809, 'comment_body': 'default None removed!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023138326, 'comment_body': 'default None removed!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023139185, 'comment_body': 'default None removed! -- basically, this function is never called from frontend, but after looking at test I think can be removed from here.', 'comment_created': datetime.datetime(2022, 11, 15, 18, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023139341, 'comment_body': 'default None removed!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023139613, 'comment_body': 'Added more rules to skill_ids and fetch_by_difficulty', 'comment_created': datetime.datetime(2022, 11, 15, 18, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023140146, 'comment_body': 'Did some changes PTAL! and let me know if i misinterpreted something!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023140834, 'comment_body': 'Rule for max chars is added PTAL!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023141029, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023141157, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023143636, 'comment_body': ""I don't think so because if we make the argument type as a set then we have to change the argument type of all the functions that are called inside the get_displayable_exp_summary_dicts_matching_ids method. Because then `recommended_exp_ids` will propagate as set over function to function not as list and now currently most of the functions are accepting list. Please let me know if that clears the thing or i need to explain with references?"", 'comment_created': datetime.datetime(2022, 11, 15, 18, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023144399, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 11, 15, 18, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023144604, 'comment_body': 'added more rule, PTAL!', 'comment_created': datetime.datetime(2022, 11, 15, 18, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023328697, 'comment_body': ""This is now a bit confusing and potentially reads as a contradiction. What's the difference between a ParamName and a PARAM_NAME?"", 'comment_created': datetime.datetime(2022, 11, 15, 22, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1023329947, 'comment_body': ""I think this is closer to what seems like a correct solution, but potentially introduces other confusion. Left a follow-up, but I think it's fine to resolve this thread now."", 'comment_created': datetime.datetime(2022, 11, 15, 22, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1023333753, 'comment_body': ""Does this docstring need to be updated?\r\n\r\nAlso, why did this change? Is it because the passed value doesn't match the schema (do we always throw 404 rather than 400 in such cases)?"", 'comment_created': datetime.datetime(2022, 11, 15, 22, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023520374, 'comment_body': ""> Does this docstring need to be updated?\r\n\r\nYes, updated!\r\n\r\n> why did this change? Is it because the passed value doesn't match the schema (do we always throw 404 rather than 400 in such cases)?\r\n\r\nPreviously, I was using this `assets/<asset_type>/<encoded_filename>` URL so invalid asset_type able to reach the schema_validation and throw 400 InvalidInputException. But when we use `assets/<asset_type:(image|audio|thumbnail)>/<encoded_filename>` URL, then exception for invalid asset_type is raised before it reaches the schema validation because in url itself we are define limited allowed values so exception status changed to 404."", 'comment_created': datetime.datetime(2022, 11, 16, 5, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023554536, 'comment_body': ""Comment updated, PTAL!\r\n\r\nBasically, here ALL_FEATURES_LIST is expected to be a list of `platform_feature_list.ParamNames` enums https://github.com/oppia/oppia/blob/cc1376ab305ef647b2c8f7a817c5f1e595ed0661/core/domain/platform_feature_services.py#L42\r\nbut here for testing purposes, we are defining our own custom ParamNames enums and assigning the list of its elements to the ALL_FEATURES_LIST:\r\nhttps://github.com/oppia/oppia/blob/cc1376ab305ef647b2c8f7a817c5f1e595ed0661/core/controllers/platform_feature_test.py#L30\r\n\r\nand according to MyPy, `platform_feature_list.ParamNames` enum is different from platform_feature_test's ParamNames enum.\r\n\r\n> What's the difference between a ParamName and a PARAM_NAME?\r\n\r\nSorry, PARAM_NAME was added accidently. it should be `platform_feature_list.ParamNames`\r\n"", 'comment_created': datetime.datetime(2022, 11, 16, 6, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025186038, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2022, 11, 17, 13, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025194292, 'comment_body': 'Any update on this? At least TODO should be added.', 'comment_created': datetime.datetime(2022, 11, 17, 13, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025194955, 'comment_body': 'ditto as above', 'comment_created': datetime.datetime(2022, 11, 17, 13, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025197895, 'comment_body': 'Why can this be optional, that seems weird for a boolean.', 'comment_created': datetime.datetime(2022, 11, 17, 13, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025207360, 'comment_body': ""Why not\r\n```suggestion\r\n        new_state_name = self.normalized_payload['new_state_name']\r\n```"", 'comment_created': datetime.datetime(2022, 11, 17, 13, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025500881, 'comment_body': 'Ah I see--this is much clearer now. Thanks!', 'comment_created': datetime.datetime(2022, 11, 17, 17, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1025521029, 'comment_body': '> Any update on this?\r\n\r\n@paprajapati9 will fix this, but currently, he is busy with some other work. So todo is added #16566 ', 'comment_created': datetime.datetime(2022, 11, 17, 17, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025521580, 'comment_body': 'Todo is added #16566', 'comment_created': datetime.datetime(2022, 11, 17, 17, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025522024, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 17, 17, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025539218, 'comment_body': ""As far as I understand from the handler's code, I think keeping `can_receive_email_updates` as Optional is ok because we are deciding the execution of a particular piece of code on this condition https://github.com/oppia/oppia/blob/d7c0fb67e30cafa6d1d33d55128535ec36caadb5/core/controllers/profile.py#L445\r\n\r\nI mean `user_services.update_email_preferences` can accept both false and true for its second argument.\r\n\r\ncurrently, I'm looking at a case where the user wants to update_email_prefences but doesn't want to receive email updates, in that case, `can_receive_email_updates` can be false. But in a case where the user does not want to update email preferences then can_receive_email_updates can be None."", 'comment_created': datetime.datetime(2022, 11, 17, 18, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1026341638, 'comment_body': 'Hmm, did you try looking at what we actually send from the frontend?', 'comment_created': datetime.datetime(2022, 11, 18, 11, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1026371882, 'comment_body': 'From frontend, we are passing bool, https://github.com/oppia/oppia/blob/dcdf7f3cc131f8243240dbae3c6db6717e387f23/core/templates/pages/signup-page/services/signup-page-backend-api.service.ts#L37\r\n\r\nBut if I remove the default value `None` from here then all backend tests fail, because while testing we are never providing `can_receive_email_updates`:\r\n https://github.com/oppia/oppia/blob/dcdf7f3cc131f8243240dbae3c6db6717e387f23/core/tests/test_utils.py#L2452\r\n\r\nAnother possibility is that we should make the default value False and change this condition https://github.com/oppia/oppia/blob/dcdf7f3cc131f8243240dbae3c6db6717e387f23/core/controllers/profile.py#L445\r\nto `if can_receive_email_updates:` but in this case this assertion fails https://github.com/oppia/oppia/blob/dcdf7f3cc131f8243240dbae3c6db6717e387f23/core/controllers/profile_test.py#L491', 'comment_created': datetime.datetime(2022, 11, 18, 12, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1026595062, 'comment_body': 'TODO https://github.com/oppia/oppia/issues/16574 is added ( as per offline discussion )', 'comment_created': datetime.datetime(2022, 11, 18, 15, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1026789434, 'comment_body': ""Hi @sahiljoster32 @vojtechjelinek -- if the frontend is always sending bool, then what is being proposed here (keeping it optional) doesn't make sense. We should just update the tests to always use that parameter, if the tests are wrong.\r\n\r\nIn general, please don't let the tests drive the code. Make sure to do the correct thing from the code perspective. If the tests need fixing, then so be it."", 'comment_created': datetime.datetime(2022, 11, 18, 19, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1026819442, 'comment_body': 'Could you please update the docstring of this arg?', 'comment_created': datetime.datetime(2022, 11, 18, 19, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1026824129, 'comment_body': 'if we are sure that `user_id` is not None over here then why not just assert it? Because I see you have asserted everywhere else for `user_id`.\r\n\r\nIs there any specific reason for having a condition here?', 'comment_created': datetime.datetime(2022, 11, 18, 19, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1026827667, 'comment_body': '```suggestion\r\n            user_services.update_learner_checkpoint_progress(\r\n                self.user_id,\r\n                exploration_id,\r\n                most_recently_reached_checkpoint_state_name,\r\n                most_recently_reached_checkpoint_exp_version\r\n            )\r\n```', 'comment_created': datetime.datetime(2022, 11, 18, 19, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1026832058, 'comment_body': 'can we remove this line?', 'comment_created': datetime.datetime(2022, 11, 18, 20, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1026835767, 'comment_body': ""```suggestion\r\n        promo_bar_enabled_value = self.normalized_payload['promo_bar_enabled']\r\n        promo_bar_message_value = self.normalized_payload['promo_bar_message']\r\n```\r\n\r\nI think these can be in a single line since `get` is taken away"", 'comment_created': datetime.datetime(2022, 11, 18, 20, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1026838665, 'comment_body': 'Why is this overload needed?', 'comment_created': datetime.datetime(2022, 11, 18, 20, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1027039135, 'comment_body': '> Why is this overload needed?\r\n\r\nBecause at this point in the code https://github.com/oppia/oppia/blob/d72b38601acdb90b933d2c5cb57ee3501e3a285b/core/controllers/reader.py#L320 we are fetching value from the function `sync_logged_out_learner_checkpoint_progress_with_current_exp_version`, and previously this method can return None value as well so `synced_exp_user_data` can be None and further in the code we are accessing some attributes on this `synced_exp_user_data` variable. So if `synced_exp_user_data` is None then a python error will occur `attribute is not defined on None object`. So to rule out the None possibility here and if None occurs somehow here, then to throw a more explicit error instead of python we defined strict paradigm here.', 'comment_created': datetime.datetime(2022, 11, 19, 5, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027039137, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 19, 5, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027039138, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 19, 5, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027039139, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 19, 5, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027039300, 'comment_body': ""Basically, this method is given open_access by applying the `open_access` decorator. So we just can't use assert here, and here we are returning early if self.user_id is None because we are sure that from the front end we are never calling this handler for a not-logged user. You can refer to this conversation https://github.com/oppia/oppia/pull/16501#discussion_r1021066021 where this solution is concluded."", 'comment_created': datetime.datetime(2022, 11, 19, 5, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027039303, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 19, 5, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027080657, 'comment_body': ""`default_value` None is removed. In test_utils.py Now I'm using `feconf.DEFAULT_EMAIL_UPDATES_PREFERENCE`"", 'comment_created': datetime.datetime(2022, 11, 19, 11, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027089872, 'comment_body': ""Yea, for that, I don't think this specific `overload` is necessary. \r\n\r\nIt is redundant to the overload above it"", 'comment_created': datetime.datetime(2022, 11, 19, 13, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1027089983, 'comment_body': 'makes sense', 'comment_created': datetime.datetime(2022, 11, 19, 13, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 1027090215, 'comment_body': 'Done!, removed it!', 'comment_created': datetime.datetime(2022, 11, 19, 13, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '7d10507c7998c4765b3abbc4e256dc8ee2a04abd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de036983d69d83fe5c428bf385b29eb692dec34', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba08caeb7c52a6d6a972b66209eb7199ce17b4da', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b229c5163a1d9815b30b8cc32a27b93c8cbc5e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b288cc02947f93e0329ebd424714a801f11cee7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '546c4cdc074aa92c883f8bb7f4eb92d6dd78b927', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e6531f0fa2551a7ec60db858eba15b4df182354', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e57cc611317680a9f43b45173e34b87c169703', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6658219780d4f48fa7f319d2da9c36034a8b9010', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b3bb204879b0091bacd5e763a79eb6c1eafb90', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae5da011c2a8ce743c28c5ddc0aa0291f2321aa5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4be364604f3f91c0571ecd0f9cc2df81825491ef', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4cb4587f6581352c7058032993b30a504fc5065', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b44d1bef33c5aaba9be0647a1a27127435844218', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc6749d84d4fc07003336c117b0e1b9ab4d6a6f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07a2e3d965d096ba33d00816c29a79201e971337', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac9ddc29080a3ae0f06804bee8699c6d6b77f75d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '095a81396e4819601726dd8710f0520c0242d018', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e593fabe117c238e7d187582ce7b1baff38967', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29ff8b9f119eb39b0f2eec4d0961a2e69417d5f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc778df112639509695699169f1529be2bbe9463', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b322342b870cfc234fbfe4da21aa1b3cf434fa3e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '149c096782eacbcde984b3e56b1bda39de105995', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a97cfc207aeb189e4d687209cb7a860da93c6c7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d8a99cd8f8a2c0f78821551721d329a6e4e1de6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13954c8f421b8feb736d6a33afc5c39d9a54c666', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25d97ed32602395e7013b8f7baf9cee900c6ad15', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1afd297af6d2c8b569d44d3438b78948d5f4e884', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee20afb82aaa17d7d332e3283b2641f4d41e450a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af0cd638d03877c599594b7ea1a98a268b580380', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369c9aec66fd73a77e18eab1654a380fed3a9cc1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbeb86c012283abdcc13c0930e3efe7c89cc45d0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dbb04a2873303d557edaf8ec05989b17af88b47', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb18d5710125dfe96ed21ed145346f070d9249f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86f41cf63f61839164e1b3d783a25cc5a4a694e1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '894e4bdd24543038eeba4a2d073d761ce955e3c4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37df1e029517073cfd01ee06b090e8517c57f305', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4faadfae3d5423dad11de00de5c63f53eb8fe625', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87629a9ebbfeea4ba0691af100988429c7cc9d26', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1567f11ef06a96b438d02258d4289cfc604d8c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0e4f3bd634238e810cc311c522d66a954a45343', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46ed90660f99eaf6b56af3b77ae446ca90b1b9f8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '225e12c5e03328cead7a4292fbdcb831b77e86fc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f34eba1300e374239de7c8557af15a0e7fd347da', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7aae00fd503f67f23f39f8f41bbbc00cc49af22', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4df3daae1c3f0bb9937271ec1601078406421837', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0df8594da767c1ae6dc194183de5a57b7854f03', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fee15adb51e3e664956014eb32ac87de15d372c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecf90d9ebddbf22628c9c2af9ad932140e7aafc7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2982261582738857bd650fe34f10a9ada825fee8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '505e5dd90ecc25a7714028f61270413721b91917', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c1f84fd45fd99b42240407f580ca1ba794ead1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485d688c499147d54716da803b234f44d59dad34', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1119971931,Added Mypy type annotations to the `core/controller` directory's files - 5.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type annotations to the files of the `core/controllers` directory. 

## Essential Checklist
- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".
## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network
Proof of MyPy checks that changes are correct.
![Screenshot from 2022-11-12 19-18-58](https://user-images.githubusercontent.com/12553576/201477180-99f4b77e-3cbd-4cb8-98bc-f52dc29b4e42.png)

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16532,https://api.github.com/repos/oppia/oppia/pulls/16532,https://github.com/oppia/oppia/pull/16532,closed,3296,1153,34,35,16,69,1,1,[{'name': 'PR: LGTM'}],2022-11-12 13:51:01+00:00,2022-11-19 00:35:10+00:00,557049.0,"6 days, 10:44:09","[{'comment_id': 1020930819, 'comment_body': ""Here `self.user_id` can be None because this private method is used inside this handler's get method and that get method is allowed for non-logged in users ( at least this is what I can infer from the decorator ). But at this point I don't think None self.user_id is ok because `record_completed_node_in_story_context` method can only accept string values for user ids, not None."", 'comment_created': datetime.datetime(2022, 11, 13, 16, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1020933941, 'comment_body': 'The same situation as above, Here also self.user_id can be None because this post method is decorated with `can_play_exploration` that can allow non-logged in users. But looking at the method `record_user_started_state_translation_tutorial` it seems to me that only string values are acceptable here.', 'comment_created': datetime.datetime(2022, 11, 13, 16, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1020972993, 'comment_body': 'Reading the implementation, this clearly returns something, so how can the return type be None?', 'comment_created': datetime.datetime(2022, 11, 13, 22, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020974652, 'comment_body': 'With regards to the context, this function only relates to ""translate"" suggestions, right? If so, then the callers should be clamping down on the type at the point where we first know it\'s a ""translate"" suggestion, and this function should use the more specific type rather than BaseSuggestion.', 'comment_created': datetime.datetime(2022, 11, 13, 22, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020974676, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2022, 11, 13, 22, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020975516, 'comment_body': 'Shouldn\'t this be ""post"" method?\r\n\r\nAlso I\'m wondering, why are all these mypy-ignores coming in now (why didn\'t they arise in earlier rounds of typing)? What changed and what\'s the reasoning behind this fix?', 'comment_created': datetime.datetime(2022, 11, 13, 22, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020975686, 'comment_body': ""Ditto, please check other cases where you're copy-pasting docstrings."", 'comment_created': datetime.datetime(2022, 11, 13, 22, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020975799, 'comment_body': 'These are too general and makes these sound like they could be applied to anything. Can you make the names more specific and explain here why they are needed?', 'comment_created': datetime.datetime(2022, 11, 13, 22, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020975878, 'comment_body': ""We shouldn't use Any. There are only a small fixed number of possible schemas so this should be a union or similar. Ditto below."", 'comment_created': datetime.datetime(2022, 11, 13, 22, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020976914, 'comment_body': 'Would it be more correct to give the resulting dict a different named type? Otherwise I can see issues down the line with not knowing which type of opportunity dict it is.', 'comment_created': datetime.datetime(2022, 11, 13, 22, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020977921, 'comment_body': ""Why is there now ambiguity here if there wasn't before? Can we standardize it to either str or bytes depending on what is currently being accepted (when you try it using the local dev server)?"", 'comment_created': datetime.datetime(2022, 11, 13, 22, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020978094, 'comment_body': 'Why are these parts removed?', 'comment_created': datetime.datetime(2022, 11, 13, 22, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020978242, 'comment_body': 'When a question suggestion comes in from the frontend (when you run the dev server), is the id usually an empty string? Can you show a screenshot to confirm this?', 'comment_created': datetime.datetime(2022, 11, 13, 22, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1020978541, 'comment_body': 'Why is this field dropped?', 'comment_created': datetime.datetime(2022, 11, 13, 22, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1021698814, 'comment_body': ""```suggestion\r\n            iframe_restriction = self.normalized_request.get('iframe_restriction')\r\n```"", 'comment_created': datetime.datetime(2022, 11, 14, 15, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021704919, 'comment_body': 'Add a TODO to refactor this into JsonEncoded later.', 'comment_created': datetime.datetime(2022, 11, 14, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021710188, 'comment_body': 'Hmm, not sure if it should be allowed for None or not, maybe check the history and ask the previous authors.', 'comment_created': datetime.datetime(2022, 11, 14, 15, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021710541, 'comment_body': 'This `get_decorator_for_accepting_suggestion` decorator is only used for HTTP methods and it is used in only 3 places, and we know HTTP methods always return none:\r\n \r\nhttps://github.com/oppia/oppia/blob/5471941da48071723b5f7e8684716584c08c6a1d/core/controllers/suggestion.py#L146\r\nhttps://github.com/oppia/oppia/blob/5471941da48071723b5f7e8684716584c08c6a1d/core/controllers/suggestion.py#L216\r\nhttps://github.com/oppia/oppia/blob/5471941da48071723b5f7e8684716584c08c6a1d/core/controllers/acl_decorators_test.py#L3535\r\n\r\n> so how can the return type be None?\r\n\r\nthis `test_can_accept_suggestion` method return the value of decorated function not the function itself and here the decorated function is HTTP method. So I think docstring need to be updated as well!. ', 'comment_created': datetime.datetime(2022, 11, 14, 15, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021710641, 'comment_body': 'reverted back to `suggestion_registry.SuggestionTranslateContent` type. ', 'comment_created': datetime.datetime(2022, 11, 14, 15, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021710704, 'comment_body': 'reverted back to suggestion_registry.SuggestionTranslateContent type.\r\n\r\n', 'comment_created': datetime.datetime(2022, 11, 14, 15, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021710791, 'comment_body': '> Shouldn\'t this be ""post"" method?\r\n\r\nYes, and this thing is fixed all over the file!\r\n\r\n> Also I\'m wondering, why are all these mypy-ignores coming in now\r\n\r\nThis issue is mentioned earlier in the doc, but after covering half the folder I realized that this issue is only occurring inside base_test.py, not in other files, and this is because in base_test.py get method ( or other HTTP methods ) are directly compared with its superclass ( because we do not have any decorator for them ) while in main files we have decorators that changes the function signature.\r\n\r\nAnd I think it is guaranteed that in the future this error will not occur in any main file because every handler\'s HTTP method is going to have a decorator, and we have test for that:\r\nhttps://github.com/oppia/oppia/blob/5471941da48071723b5f7e8684716584c08c6a1d/core/controllers/base_test.py#L1073\r\n\r\n', 'comment_created': datetime.datetime(2022, 11, 14, 15, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021710869, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 14, 15, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021710965, 'comment_body': '> These are too general and makes these sound like they could be applied to anything. Can you make the names more specific \r\n\r\nNames changed! PTAL!\r\n\r\n> explain here why they are needed?\r\n\r\nBecause `SuggestionsProviderHandler` act as a superclass for some handlers and to keep the generic behavior for those handlers we have to introduce generic here.', 'comment_created': datetime.datetime(2022, 11, 14, 15, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021711076, 'comment_body': 'I think no because even if there are small fixed number of schemas, we cannot remove Any from here because those schemas are the complex dicts and defining type for them is going to use a union with a very deep nesting of types, and maintaining a union of all those types is an ugly thing.\r\n', 'comment_created': datetime.datetime(2022, 11, 14, 15, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021711195, 'comment_body': 'A new type is added PTAL!', 'comment_created': datetime.datetime(2022, 11, 14, 15, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021711310, 'comment_body': ""> Can we standardize it to either str or bytes depending on what is currently being accepted (when you try it using the local dev server)?\r\n\r\nYes, we can use str here because from the frontend the string value is coming, Also a proof is attached for the same.\r\n\r\nhttps://user-images.githubusercontent.com/12553576/201693941-20a6fcc4-b13c-4a7d-81b0-6c8993c44603.mp4\r\n\r\n> Why is there now ambiguity here if there wasn't before?\r\n\r\nAhh. really sorry for that I got confused between base64 string and encoding function earlier while managing to many things same time."", 'comment_created': datetime.datetime(2022, 11, 14, 15, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021711404, 'comment_body': 'Because these things are passed to `UpdateQuestionSuggestionHandler` and there we are not expecting any  files, before no error is reported because schemas are not there.\r\n\r\nhttps://github.com/oppia/oppia/blob/5471941da48071723b5f7e8684716584c08c6a1d/core/controllers/suggestion.py#L547\r\n\r\nAlso if we check frontend we are not passing any file:\r\nhttps://github.com/oppia/oppia/blob/5471941da48071723b5f7e8684716584c08c6a1d/core/templates/pages/contributor-dashboard-page/services/contribution-and-review-backend-api.service.ts#L198\r\n', 'comment_created': datetime.datetime(2022, 11, 14, 15, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021711484, 'comment_body': '> When a question suggestion comes in from the frontend (when you run the dev server), is the id usually an empty string?\r\n\r\nfrom frontend id is not provided -- proof attached:\r\n\r\nhttps://user-images.githubusercontent.com/12553576/201696703-6ace513e-0f3c-4ffa-81ca-fec3e2b2e003.mp4\r\n\r\nHowever, a null id is provided from the front end but changing that here to an empty id does not affect the test case!!', 'comment_created': datetime.datetime(2022, 11, 14, 15, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021711572, 'comment_body': 'Because these fields are passed to `SuggestionToSkillActionHandler` and there we are not expecting these fields\r\nhttps://github.com/oppia/oppia/blob/5471941da48071723b5f7e8684716584c08c6a1d/core/controllers/suggestion.py#L213', 'comment_created': datetime.datetime(2022, 11, 14, 15, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1021737829, 'comment_body': 'Should we add `strict` to `get_user_id_from_username`?', 'comment_created': datetime.datetime(2022, 11, 14, 16, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021745701, 'comment_body': ""```suggestion\r\n        suggestion_to_accept = self.get_json(\r\n            '%s?author_id=%s' % (\r\n                feconf.SUGGESTION_LIST_URL_PREFIX,\r\n                self.author_id\r\n            )\r\n        )['suggestions'][0]\r\n```"", 'comment_created': datetime.datetime(2022, 11, 14, 16, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021755815, 'comment_body': 'Can we have regex for suggestion ID?', 'comment_created': datetime.datetime(2022, 11, 14, 16, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1021773078, 'comment_body': '```suggestion\r\n        opp_id: opp.to_dict() if opp is not None else None  # type: ignore[misc]\r\n```', 'comment_created': datetime.datetime(2022, 11, 14, 16, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1022200287, 'comment_body': 'We should not do this recording for a guest user, good catch. Could you update the decorator for POST only to require that the user is logged in? (You can make a new ""can_save_story_progress"" decorator if needed.)', 'comment_created': datetime.datetime(2022, 11, 15, 0, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022202025, 'comment_body': 'I agree with you and I think that the decorator is wrong.\r\n\r\nFor this and the other case, maybe we should make a `@acl_decorators.is_logged_in` check that is used for these cases.', 'comment_created': datetime.datetime(2022, 11, 15, 0, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022203800, 'comment_body': ""Hm, fair point. I'm a bit confused still, though. Why is this treated in a different way to the other similar functions in this file?"", 'comment_created': datetime.datetime(2022, 11, 15, 0, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022207025, 'comment_body': ""I think there's a bit of a problem in the way you've updated this. Now you're making two calls to get_submitted_suggestions_by_offset() and that will take twice as long (it's not a cheap function).\r\n\r\nCan you make refactor to make a single call in each case?"", 'comment_created': datetime.datetime(2022, 11, 15, 0, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022220138, 'comment_body': 'Got it, thanks! That additional context is helpful and I think you should include it in the comment -- something like ""... This happens because all handler methods in the main codebase have decorators which modify the function signature accordingly, but these methods in base_test.py do not.""', 'comment_created': datetime.datetime(2022, 11, 15, 1, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022220628, 'comment_body': 'Ah, sorry, by ""here"" I mean as part of the code comment, so that other developers don\'t get confused.', 'comment_created': datetime.datetime(2022, 11, 15, 1, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022221105, 'comment_body': ""But you still can't use Any. I think the issue is actually that in this case there are a small fixed number of schemas. You can name the subtypes so that you refer to them by their names rather than the complex dicts -- this is basically the same thing as all the other cases we've been tackling with change cmds etc.\r\n\r\nAs usual, union is OK if at this point in the code, all you know is that it's a union. When the code specializes, you can cast to a more specific type (with reasoning). But we can't be using Any here, it's as good as not typing at all."", 'comment_created': datetime.datetime(2022, 11, 15, 1, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1022223585, 'comment_body': 'Hmm, it should be null here, actually. I get that it doesn\'t affect the test case but we should test with ""correct"" data, and empty string actually means something different from null (it means that the id is actually specified and it is explicitly meant to be an empty string, which shouldn\'t be a case that occurs in practice). This is why it caught my attention as odd.\r\n\r\nWe should fix this to be None since that reflects that the ID is not provided (and also to avoid other developers looking at this, thinking ""oh it must be correct"", and replicating this pattern all over the codebase).', 'comment_created': datetime.datetime(2022, 11, 15, 1, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023936473, 'comment_body': 'Added `can_access_story_viewer_page_as_logged_in_user` decorator PTAL!', 'comment_created': datetime.datetime(2022, 11, 16, 12, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023936642, 'comment_body': 'Added `can_play_exploration_as_logged_in_user` decorator.', 'comment_created': datetime.datetime(2022, 11, 16, 12, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023939902, 'comment_body': '> Why is this treated in a different way to the other similar functions in this file?\r\n\r\nBecause previously `get_decorator_for_accepting_suggestion` decorator is defined like this:\r\n```python\r\ndef get_decorator_for_accepting_suggestion(\r\n    decorator: Callable[..., Callable[..., _GenericHandlerFunctionReturnType]]\r\n) -> Callable[..., Callable[..., _GenericHandlerFunctionReturnType]]:...\r\n```\r\nand from implementation, we can see that this decorator is accepting another decorator as an argument, and in acl_decorator.py file, every decorator has a Generic return type. for eg: `acl_decorators.can_edit_exploration`\r\n\r\n```python\r\ndef can_edit_exploration(\r\n    handler: Callable[..., _GenericHandlerFunctionReturnType]\r\n) -> Callable[..., _GenericHandlerFunctionReturnType]: ...\r\n```\r\n\r\nSo, when we pass this `can_edit_exploration` decorator to `get_decorator_for_accepting_suggestion` decorator then __GenericHandlerFunctionReturnType is figured as again __GenericHandlerFunctionReturnType by MyPy because in this case `can_edit_exploration` has `Callable[..., Callable[..., _GenericHandlerFunctionReturnType]]` type and decorator argument also has  Callable[..., Callable[..., _GenericHandlerFunctionReturnType]] type. So, due to this actual return type is never figured out.\r\n\r\nBut in the case of other decorators, we are providing Http methods directly to the decorators. and every Http method has a None return type so __GenericHandlerFunctionReturnType is figured as None.\r\n\r\nThis is the only decorator in the whole file which accepting another decorator as an argument.', 'comment_created': datetime.datetime(2022, 11, 16, 12, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023940266, 'comment_body': 'Comment added.', 'comment_created': datetime.datetime(2022, 11, 16, 12, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023940360, 'comment_body': 'Added more explanation, PTAL!', 'comment_created': datetime.datetime(2022, 11, 16, 12, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023940433, 'comment_body': 'Added type, and removed Any!', 'comment_created': datetime.datetime(2022, 11, 16, 12, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023940522, 'comment_body': ""changed 'id' to None."", 'comment_created': datetime.datetime(2022, 11, 16, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023940709, 'comment_body': 'None removed', 'comment_created': datetime.datetime(2022, 11, 16, 12, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023940898, 'comment_body': 'TODO added', 'comment_created': datetime.datetime(2022, 11, 16, 12, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023941100, 'comment_body': 'strict added', 'comment_created': datetime.datetime(2022, 11, 16, 12, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023941344, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 16, 12, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023942058, 'comment_body': ""I tried but I didn't find any regex or rule for suggestion id,"", 'comment_created': datetime.datetime(2022, 11, 16, 12, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023942186, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 16, 12, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1023943457, 'comment_body': 'Removed the call from the inside of `if` clause and used cast to narrow down the type with a comment.', 'comment_created': datetime.datetime(2022, 11, 16, 12, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1024544712, 'comment_body': '...some other handlers. So, to transfer ...', 'comment_created': datetime.datetime(2022, 11, 16, 21, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1024573043, 'comment_body': ""Ah ok, thanks! Sounds good, I had missed that this wasn't itself a decorator. "", 'comment_created': datetime.datetime(2022, 11, 16, 22, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1024573140, 'comment_body': ""Ah ok, thanks! Sounds good, I had missed that this wasn't itself a decorator. "", 'comment_created': datetime.datetime(2022, 11, 16, 22, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1024752081, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 17, 4, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025231044, 'comment_body': '```suggestion\r\n        if (\r\n            (story_is_published and topic_is_published) or\r\n            role_services.ACTION_VISIT_ANY_TOPIC_EDITOR_PAGE in\r\n            user_actions_info.actions\r\n        ):\r\n```', 'comment_created': datetime.datetime(2022, 11, 17, 14, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025238911, 'comment_body': '```suggestion\r\n    Dict[str, Union[Dict[str, str], List[str]]]\r\n```', 'comment_created': datetime.datetime(2022, 11, 17, 14, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025239510, 'comment_body': '```suggestion\r\n        if suggestion_type != feconf.SUGGESTION_TYPE_ADD_QUESTION:\r\n```', 'comment_created': datetime.datetime(2022, 11, 17, 14, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025252575, 'comment_body': 'Why `None`?', 'comment_created': datetime.datetime(2022, 11, 17, 14, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1025449071, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 17, 16, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025449164, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 17, 16, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025449237, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 17, 16, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025451858, 'comment_body': 'Basically, whenever we are getting question suggestion dict from the front end we are not getting `id` with it. Can you please check this comment https://github.com/oppia/oppia/pull/16532#discussion_r1020978242', 'comment_created': datetime.datetime(2022, 11, 17, 16, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025467296, 'comment_body': 'Hmm, okay that is a bit weird though, should we have an explanatory comment why is it `None` or a TODO on how this needs to be changed? cc @seanlip \r\n', 'comment_created': datetime.datetime(2022, 11, 17, 17, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1026458575, 'comment_body': '> should we have an explanatory comment why is it None\r\n\r\nDone', 'comment_created': datetime.datetime(2022, 11, 18, 13, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': 'a8d6a6e58bfef87e9558cf4bffed170f552fcaaf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7720ead54eb935ed9ce66531f1f772bcf4f14664', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743e48017cf57f98c2d5b54a50564e03cecb51e0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12c56a8e6bbbb6b94a1891140d872a2e5fcba678', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4b6ea5522e1a696a662001aa7b62cba5fd1b109', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af7667ce402d141fb026c6fa470bcacf4d569ef', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c955a1d117bc76928b555371dc6f146c0d5763b5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4bb747991e3779924795d2ab79825a6b8dd89f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '701745d5c590bbb89078f86f7fe79180388c1d98', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101374b2b5f3cde79f41db71c5a1bdc12a4e17d0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae03dc275b31a5d5da12302d256ee69d26af5df', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f16453eb5fcfdb65dc232586849a7bbf0b8aa2f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab763dd13a66eb093b3fb2c3b6f1213a098068fd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccbb5e4869900930a95a2bd65486fdd5fa3f2e45', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd169cfe1bc074405e86720d56ebb91f335e0a304', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b79bdd503fd0f05d5a56b029b39c8d13feac23', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb17516a2ae3fff157aa59de513db7753db9e66', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cebbf4f1d7df09ef3173d774036660fe3d2c65a0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc371b83c1159a8b5a5bbbaaf2fc85b13cc2ed7b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae3f1b84ce22b1e53828fb1a366cb57d072bd73c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fce838ae3c138c5859d4820c23030a3eb2f2701c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8576742de18121f3769fdbc397d41a9e7f61e3c3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33e403662fe92347dc1be5fb99ba5657b308bd3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '801cacf1e62f00e27832854e64dbd4e7b37ba01b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '742a8ae61ceb9ec2590f5e296ba6097ea3b8d591', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f269ec35625853045c3be79695dfefcf4bf81737', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6024e30a35de12c65ac077206af107c8a6ffda22', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7d7a5e4352c9e315fde5d5a90cce69a8e92b4a9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aaebcd38de1a9ed9aa17902f2dda80ace081ba1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a289ff4e09a56bc04ff50efce307083f18ad14cc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed14515bc0f34d7553b861b4d749bf558dc4e483', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f8c3def536708c8e2c144713bf3a55dde62d973', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81c02028465fa3321a6df75a3207c51ea460c8e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dded0b9b23c5273111b3572a01fd3913175d339', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb400fc093ecf73cf3e0bb3aa75282257e3a4f5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1061281647,Added Mypy type annotations to the `extensions` directory.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: This PR adds MyPy type info to -
 - The `extensions` directory.
 - core/platform_feature_list.py
 - storage/storage_models_test.py
 

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16083,https://api.github.com/repos/oppia/oppia/pulls/16083,https://github.com/oppia/oppia/pull/16083,closed,1812,697,64,34,11,36,1,1,[{'name': 'PR: LGTM'}],2022-09-20 09:04:41+00:00,2022-10-01 09:30:31+00:00,951950.0,"11 days, 0:25:50","[{'comment_id': 980348538, 'comment_body': ""I think I'm missing the point of this ... what's the point of this overload? The signature seems exactly the same as what's shown below..."", 'comment_created': datetime.datetime(2022, 9, 26, 18, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980542820, 'comment_body': 'How are we guaranteeing this? Should we also have a clause earlier on to say something like ""assert interaction ID is not linear""?', 'comment_created': datetime.datetime(2022, 9, 26, 22, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980542903, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 9, 26, 22, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980543006, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 9, 26, 22, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980543130, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 9, 26, 22, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980543252, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 9, 26, 22, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 980543295, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 9, 26, 22, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 981070281, 'comment_body': ""Why don't we use `assert`?"", 'comment_created': datetime.datetime(2022, 9, 27, 10, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981077130, 'comment_body': 'Again, why we cannot use `isinstance`?', 'comment_created': datetime.datetime(2022, 9, 27, 10, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981118787, 'comment_body': ""Would't a `Literal` for `_answer_visualizations_specs_schema` help with this?"", 'comment_created': datetime.datetime(2022, 9, 27, 11, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981119073, 'comment_body': 'ditto above', 'comment_created': datetime.datetime(2022, 9, 27, 11, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981129445, 'comment_body': 'Why not use `TypedDict` here?', 'comment_created': datetime.datetime(2022, 9, 27, 11, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981135964, 'comment_body': ""```suggestion\r\n            'Answers of linear interactions should not be present while '\r\n            'calculating the top unresolved answers, by frequency.'\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 11, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981136485, 'comment_body': 'ditto elsewhere, we usually place the space towards the end', 'comment_created': datetime.datetime(2022, 9, 27, 11, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981141307, 'comment_body': ""Can you please try to shorten these, so that we don't need `# pylint: disable=line-too-long`."", 'comment_created': datetime.datetime(2022, 9, 27, 11, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981141477, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 9, 27, 11, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981636902, 'comment_body': 'correct_answer is a Union type of all allowed correct answer types https://github.com/oppia/oppia/blob/741cd122e84ac041ac5e52585e038ae3d86a6cdb/core/domain/state_domain.py#L96\r\n\r\nIn the above link, we can see that we have both List[str] and List[List[str]] as the correct answer.  So, if do assert like below:\r\n```python\r\n\r\nAcceptableCorrectAnswerTypes = Union[\r\n    List[List[str]], List[str], str, Dict[str, str], int, List[int]\r\n]\r\n\r\ncorrect_answer: AcceptableCorrectAnswerTypes      # Here we are supposing that correct_answer is of AcceptableCorrectAnswerTypes.\r\n\r\n# Now if we do assert --\r\nassert isinstance(correct_answer, list)    # This assert will rule out only non-list types.\r\n\r\ncorrect_answer          # At this point ( basically after assertion ), correct_answer has Union[List[List[str]], List[str], List[int]] type.\r\n```\r\nAlso, if we see line 1103 of this PR, then it confirms that here correct_answer can only be of type List[List[str]].\r\n', 'comment_created': datetime.datetime(2022, 9, 27, 19, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981636960, 'comment_body': ""`assert isinstance` is not allowed with TypdDict, because TypedDict is a type that may not be present at runtime where as assert is always present and executed at runtime.\r\n```python\r\nif mypy:\r\n   class A(typedDict):           # This typeddict will be inert during runtime.\r\n       a: str\r\n\r\nnew_dict = {'a': 'asd'}\r\n\r\nassert isinstance(new_dict, A)             # this will not work -- not allowed by MyPy. Also, this assert will throw an error because it will not find A during runtime.\r\n```\r\n\r\nYou can verify the error by taking a look at the [MYPY_PLAYGROUD](https://mypy-play.net/?mypy=latest&python=3.10&flags=strict%2Cdisallow-any-expr&gist=0e6bd5ce42a68b3ef3611d634376b9a8)"", 'comment_created': datetime.datetime(2022, 9, 27, 19, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981637450, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 27, 19, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981637509, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 9, 27, 19, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981637834, 'comment_body': 'Done, wherever it is possible.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981638002, 'comment_body': 'Fixed, PTAL!', 'comment_created': datetime.datetime(2022, 9, 27, 19, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981654794, 'comment_body': "" > what's the point of this overload? \r\n\r\nIn codebase there are 2 places, where we are providing the str variable to the first argument, and before now we didn't encountered any case where we have provided a string variable to this argument ( we have just provided specific string literals ) so we didn't introduced this overload till now. \r\nCases where we are providing string to the first argument:\r\nhttps://github.com/oppia/oppia/blob/741cd122e84ac041ac5e52585e038ae3d86a6cdb/extensions/visualizations/models.py#L51\r\nhttps://github.com/oppia/oppia/blob/741cd122e84ac041ac5e52585e038ae3d86a6cdb/extensions/answer_summarizers/models_test.py#L95\r\n"", 'comment_created': datetime.datetime(2022, 9, 27, 19, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981656827, 'comment_body': 'So, to support these cases as well we have introduced a new overload. Also, It does not affect the rest of the overload because this overload is placed at the very last so it will be checked as a last condition.', 'comment_created': datetime.datetime(2022, 9, 27, 19, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981673730, 'comment_body': 'Okay, I see, thanks.', 'comment_created': datetime.datetime(2022, 9, 27, 20, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981675622, 'comment_body': 'Okay, I see.', 'comment_created': datetime.datetime(2022, 9, 27, 20, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 981960083, 'comment_body': ""> How are we guaranteeing this?\r\n\r\nIn the whole codebase including tests, I didn't find any case where we are calculating answer frequencies for Linera interactions ( by linear interaction I mean `continue` interaction ) https://github.com/oppia/oppia/blob/741cd122e84ac041ac5e52585e038ae3d86a6cdb/core/feconf.py#L829\r\n\r\nIf I did mistake in understanding something I'm happy to remove this raise exception :)"", 'comment_created': datetime.datetime(2022, 9, 28, 5, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981961434, 'comment_body': 'Also, at this place, we are validating that linear interactions should have None answers only https://github.com/oppia/oppia/blob/741cd122e84ac041ac5e52585e038ae3d86a6cdb/core/domain/stats_domain.py#L1608', 'comment_created': datetime.datetime(2022, 9, 28, 5, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 981961688, 'comment_body': 'ditto for other cases!', 'comment_created': datetime.datetime(2022, 9, 28, 5, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 982031799, 'comment_body': ""I agree that we can assume linear interactions have None answers.\r\n\r\nWhat I don't understand is how we guarantee that, going forward, developers are prohibited from calculating answer frequencies for linear interactions. We should have a check for that."", 'comment_created': datetime.datetime(2022, 9, 28, 7, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 982649803, 'comment_body': 'Why are these camel-cased and not snake cased?', 'comment_created': datetime.datetime(2022, 9, 28, 16, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 982829342, 'comment_body': 'Are these attributes `Final`?\r\nAre we changing the value of these anywhere?\r\n\r\nditto for other interactions', 'comment_created': datetime.datetime(2022, 9, 28, 20, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 983186063, 'comment_body': 'Because here `isLabeled`, `isDirected`, and `isWeighted` represent the keys that are defined here:\r\nhttps://github.com/oppia/oppia/blob/741cd122e84ac041ac5e52585e038ae3d86a6cdb/extensions/interactions/GraphInput/GraphInput.py#L69', 'comment_created': datetime.datetime(2022, 9, 29, 7, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 983212785, 'comment_body': 'These attributes are already defined in base.py https://github.com/oppia/oppia/blob/741cd122e84ac041ac5e52585e038ae3d86a6cdb/extensions/interactions/base.py#L112\r\nand here we are just changing their values, so the final is not applicable here.', 'comment_created': datetime.datetime(2022, 9, 29, 8, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 983559016, 'comment_body': 'Added new check PTAL!', 'comment_created': datetime.datetime(2022, 9, 29, 13, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 983559232, 'comment_body': 'Ditto for all other cases !', 'comment_created': datetime.datetime(2022, 9, 29, 13, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '67f89e2ab8840c68ffa561098396eb73245ae228', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '686f89d09b70d8a6f2e9531fb83e305c8c0de4ee', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e90d4c7bc999fb51ea44c092a01165a0b6184bc', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffabaaf880b03b5d881dcb2794cacbdbe5b16f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc88acec66ad7dc2ff64e88d565eb2b3ebdc029f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c08fbed85d04d91178862dc82bb6f3633d6fd805', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f49948ee489dbb4386a1a14ba0d35213416255b2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb406c2a38b42868093ab6a70d2ae0bf72c156d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd21fbb151dd9666e6398c2c4b2bc94e3c0dc3da6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28a1b2f7400df48eb3eb3813a484bc11919191b4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfeb15a9d0b8790a3f633e743f85ee8e4eea8e6a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86afc8c93f29080c9f96ffe2dcd26505218f4b0a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2097ab5acd5473b3111934a730fb1d3898fe1f74', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a7e0edddd946bb0c1b436dbed6c41dc645ce3ff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32efbee6f1bd7e8430a2e49535440e6a7d91dfee', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f384d7658d73b9a07ba1b07c0aef95c102e37e8', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34491c71d98c6230becbd334efc2b89ba1c906c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981b8f8d0e69a9c1b09b00be5e29c00f9ee1c3ad', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99dfe202d9491ea46fc54d6698ad394009ccd61', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44b42991726dff916057aa8e0a3b6c41da3a55bb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff3f462a6fef0854fc3ee8de7477ca52c96e2a37', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f67b41b0e94bb6a425b2e973537346ebfc5c645', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0a0651cf9beb3edb42add0d1132ab4d5190defa', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8da8119b7b76605144a0745a056dd825263c5320', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '022f0291109acaf088fa1cc45fb3966cf82d6691', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de2f84baec6a53f83e3a0c755039f4e103ad60e4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dcfe70865530422f7936485ca7c04fd0a109380', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91558dd598b499e2303fa9f84aa8aad55cc542ee', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41ba82f5d54af2c6431c59e050a935b86c078000', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b600f6c427b7f26d963fd6d77e566b21773d80ef', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af0b3c87800ce770a898290eacc1e42b6c737c2', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd23192f3588e767bea726ab3fd76031e6dce43b0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b6757af4097028002a19d484fbf5cfe2bf1dbff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a85bc4e80951961278a1d7e1bafcca5c8add63c3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1072543192,Fix part of #13341: Added Mypy type annotations to the `script directory`'s root level files.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13341.
2. This PR does the following: This PR adds MyPy type annotations to the root-level files of the script directory.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
No proof of changes needed because tests are passing on local machine.
<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16169,https://api.github.com/repos/oppia/oppia/pulls/16169,https://github.com/oppia/oppia/pull/16169,closed,2045,1007,34,41,17,37,1,1,[{'name': 'PR: LGTM'}],2022-09-30 10:48:39+00:00,2022-10-11 05:28:41+00:00,931202.0,"10 days, 18:40:02","[{'comment_id': 986005518, 'comment_body': 'Why also `urllib.request.Request` can we limit this somehow?', 'comment_created': datetime.datetime(2022, 10, 3, 16, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986010703, 'comment_body': ""Shouldn't this be\r\n```suggestion\r\n    **kwargs: Dict[str, Any]\r\n```"", 'comment_created': datetime.datetime(2022, 10, 3, 16, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986011158, 'comment_body': ""Doesn't this return `ContextManager`?"", 'comment_created': datetime.datetime(2022, 10, 3, 16, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986025745, 'comment_body': 'Should we rather allow and then return `None`?', 'comment_created': datetime.datetime(2022, 10, 3, 16, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986028281, 'comment_body': 'There should be no empty line below this one I think.', 'comment_created': datetime.datetime(2022, 10, 3, 17, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 986028601, 'comment_body': 'Can we report this as an issue?', 'comment_created': datetime.datetime(2022, 10, 3, 17, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 987148963, 'comment_body': ""Both string and `urllib.request.Request` is equivalently used in the codebase. Also, in urlib's official stubs, `url_open` can accept both https://github.com/python/typeshed/blob/807f3a8fc63877727996ccfd594d5b0b6301de92/stdlib/urllib/request.pyi#L56"", 'comment_created': datetime.datetime(2022, 10, 4, 17, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 987150010, 'comment_body': 'No, because MyPy automatically infers the type for kwargs. For eg: if we type kwargs as \r\n`**Kwargs: str` then kwargs have type `Dict[str, str]` and if type `**Kwargs: Dict[str, Any]` then MyPy assume `kwargs` type as `Dict[str, Dict[str, Any]]`. Basically, we have to provide value type only ( not key type ).', 'comment_created': datetime.datetime(2022, 10, 4, 17, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 987151164, 'comment_body': ""I think no, because decorator `@contextlib.contextmanager` is responsible for returning ContextManager, not the method. That's why method `create_managed_web_browser` is annotated with ContextManager ( because that method is directly returning context manager ), not other methods are annotated with context manager because other methods have `contextlib.contextmanager` decorator. Please correct me If I'm missing something!"", 'comment_created': datetime.datetime(2022, 10, 4, 17, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 987151625, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 4, 17, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 987151681, 'comment_body': 'Removed!', 'comment_created': datetime.datetime(2022, 10, 4, 17, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 987151724, 'comment_body': 'Reported: https://github.com/PyGithub/PyGithub/issues/2322', 'comment_created': datetime.datetime(2022, 10, 4, 17, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 987715544, 'comment_body': 'Okay, makes sense.', 'comment_created': datetime.datetime(2022, 10, 5, 9, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 987723457, 'comment_body': 'Ah, okay, thanks!', 'comment_created': datetime.datetime(2022, 10, 5, 9, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 987724196, 'comment_body': 'Okay, great!', 'comment_created': datetime.datetime(2022, 10, 5, 9, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 987724354, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 10, 5, 9, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 988287555, 'comment_body': ""Shouldn't `close` also happen when the status is not 200?\r\n"", 'comment_created': datetime.datetime(2022, 10, 5, 19, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 988288780, 'comment_body': '```suggestion\r\n        def mock_run_cmd(_: List[str]) -> str:\r\n```', 'comment_created': datetime.datetime(2022, 10, 5, 19, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 988289121, 'comment_body': 'ditto for all the unused args in test', 'comment_created': datetime.datetime(2022, 10, 5, 19, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 988295976, 'comment_body': '```suggestion\r\ndef test_function(_: str) -> Callable[[], None]:\r\n```', 'comment_created': datetime.datetime(2022, 10, 5, 19, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 988304410, 'comment_body': '```suggestion\r\n        # Here we use MyPy ignore because we are assigning value to\r\n```', 'comment_created': datetime.datetime(2022, 10, 5, 20, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 988304607, 'comment_body': '```suggestion\r\n        # Here we use MyPy ignore because we are assigning value to\r\n```', 'comment_created': datetime.datetime(2022, 10, 5, 20, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 989333938, 'comment_body': 'I think we should not do that because if change all unused args with `_` then it creates ambiguity among other developers about which variable denotes what. Taking an example:\r\n\r\nan example is taken from https://github.com/oppia/oppia/blob/953dc2b1d39f604bca41db8540b865140e14a808/scripts/run_mypy_checks_test.py#L55\r\n```python\r\n        def mock_popen_success(\r\n            unused_cmd: str,\r\n            stdout: Optional[str] = None,  # pylint: disable=unused-argument\r\n            stdin: Optional[str] = None,  # pylint: disable=unused-argument\r\n            stderr: Optional[str] = None,  # pylint: disable=unused-argument\r\n            env: Optional[str] = None  # pylint: disable=unused-argument\r\n        ) -> subprocess.Popen[bytes]: \r\n            return process_success\r\n```\r\n```python\r\n        def mock_popen_success(\r\n            _: str,\r\n            _: Optional[str] = None,\r\n            _: Optional[str] = None, \r\n            _: Optional[str] = None, \r\n            _: Optional[str] = None \r\n        ) -> subprocess.Popen[bytes]:\r\n            return process_success\r\n```\r\n\r\nI think the first one looks better than the second one, I need your opinion!\r\n', 'comment_created': datetime.datetime(2022, 10, 6, 17, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 989335035, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 6, 17, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 989335074, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 6, 17, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 989335144, 'comment_body': 'Added `response.close()`.', 'comment_created': datetime.datetime(2022, 10, 6, 17, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 989483761, 'comment_body': 'You could also use `unused_` as prefix just like `unused_` to silence the pylint error.', 'comment_created': datetime.datetime(2022, 10, 6, 21, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 990728295, 'comment_body': ""What if `--name-status` is not in `tokens` and `tokens[-1]` is not `modified`? Then won't we get an error for not defining `cmd_string` whereas before the function would have returned `None`"", 'comment_created': datetime.datetime(2022, 10, 9, 3, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 990730690, 'comment_body': 'This changes the behavior of the mock. Why?', 'comment_created': datetime.datetime(2022, 10, 9, 4, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 990730769, 'comment_body': 'Why this change? We usually prefer to use `self.assertIsNotNone` for testing. Ditto below', 'comment_created': datetime.datetime(2022, 10, 9, 4, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 990730804, 'comment_body': 'This also changes behavior. Why?', 'comment_created': datetime.datetime(2022, 10, 9, 4, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 990753396, 'comment_body': 'Here `managed_web_browser` is of `Optional[ContextManager]` type and below in line 620, `enter_context` method can only accept ContextManager type not None. So, to narrow down the type by keeping the assertion in place I did this change.\r\n\r\nBasically, `self.assertIsNotNone` only checks for None but it does not narrow the type for type checking. Whereas, `assert is not None` check for None values and also narrow down type from Optional types to non-optional types.', 'comment_created': datetime.datetime(2022, 10, 9, 8, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 990754243, 'comment_body': 'Previously I was doing this because whenever we define a return type of a function then MyPy expects a return value in every case, but since we are returning in only 2 cases that causes MyPy to throw an error `Missing return statement`. So, to fix this issue I did these changes.\r\n\r\nBut, Now it is fixed by returning the None value at the end. PTAL and let me know if you have comments.', 'comment_created': datetime.datetime(2022, 10, 9, 8, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 990754279, 'comment_body': 'Fixed by returning None at the end.', 'comment_created': datetime.datetime(2022, 10, 9, 8, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 990754325, 'comment_body': 'Fixed PTAL!', 'comment_created': datetime.datetime(2022, 10, 9, 8, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 990866407, 'comment_body': ""OK, in that case, can you do both? i.e. the code would look like this:\r\n\r\n```python\r\n        self.assertIsNotNone(managed_web_browser)\r\n        assert managed_web_browser is not None\r\n```\r\n\r\nThe first line is for the test, while the second line is for type checking. The reason to keep the `self.assertIsNotNone` is twofold. First, by convention, the assertions we are making in the tests use the self.assert... methods, so by using just a plain `assert`, you're implying that the assertion isn't part of what the test is checking for. Second, `unittest` gives us more informative debugging output when you use its methods than if you just use a plain `assert`. See https://stackoverflow.com/a/45947566 for more explanation"", 'comment_created': datetime.datetime(2022, 10, 10, 0, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 990919322, 'comment_body': 'Thanks for the information!\r\n```python\r\n        self.assertIsNotNone(managed_web_browser)\r\n```\r\nis added.', 'comment_created': datetime.datetime(2022, 10, 10, 5, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': 'ff3af4013437267b2c2123392fe41c236c2c0f96', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aabd7835f78bc22cb70181bee4a51cc03f8b9328', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f01cf2634afbc42e4516951b825ae781e36c041a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84e394bdb67f0be6bb9fbffa52b2c095a8f81318', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b586c5b84f6190d485d12b79fc2d941a3df517cb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f909f527581d6c84a7fd98fbab2adcaca208e276', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b36ca093f75a46664bf72dfad34eaf2f7a6bf85', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea815a129106514d8cae63a8ce0c3f24e1e5099b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c059cdb474c09f02cf2d6850393f0466127b13f6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917900d55af262ba330f2a79906e09e8c891d4eb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af20d4d9a6a804819a6b043a99c67d0d0110fa1d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c24d0cb958b5fd194f377dea3f007f9f657bdc00', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e06dc995cd18b4aefdccab7b31ac50bc5071f1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '164a523f4d70155b02d16db88650a2791c406125', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b453c2c04b667c130c1208b5d6beda7189988d4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e5021731d2103b10aa2a877c433bab35d1a536', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aaebf8979da62fe5c98f8d290c0cccdc598a518', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86cb511e8a02e232ca3329c68d13d770ee9aa49', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '378febf3eba3f2fe7b18cb56ef2e52315bc60b86', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '943e2095ca7a2f40efdd282e61ede3e134897474', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b11219cf9a3aa286dfbf265d56f657303233f9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '868e79725ed5563ef0be7dd3d72635c548b76ef6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9760d0be42aa4dd2fd29f46912dab8542d627159', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5576c65ce3d9914546d6613992bb2a88a91c8518', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '047ee9143ca98be61f50f341af31cae76ce1436c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64bbedce6dac586aa0f2e568fde6a446b3490c33', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1612000b17f4a8d40f002bcb708310746762813c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1ee84b2ee1091736bd58b3751501e82a9bffb8f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdc704d4de8b93102c028a4bb21d70a0c073e14c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b49e05e435fae672a600120c9b3ddbda0b6cee', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1452817a0ed4555a1cbd3efae276c5f288b43f12', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2ba986cccb430634afc67efeffed329665a60e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4ee207c624f4db37a9698ca2e8be3a4e3e9753', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b9585511f669e8e185ffbce509ed411e553d96', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d2ff379cba9a8ff2904c071d23dd75cc22032da', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9892b094d59fc418e9d162a79d6f1bc74b3f3ff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff81e99ae87675216f1e7a1f1341383c76824b5e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a319bd47a9c4762e9cd22edde4eff3cea47e3ff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82bb1683e12c9ffe293bd82ec12634de4241974a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46a8272e2c1b2c06c076440caf997d6c23a0ba', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1814e6511e2ef0ee584627a4e8299f353f66d3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1079371909,Fix part of #13341: Added Mypy type annotations to the `script directory`'s pending files.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #13341.
2. This PR does the following: This PR adds MyPy type annotations to the files of subdirectory `scripts/linters`. Also, This PR  covers some root-level files of the script directory.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
MyPy tests are passing locally:
![Screenshot from 2022-10-16 13-53-56](https://user-images.githubusercontent.com/12553576/196025926-99a37670-3e48-4397-8771-85d8c81678f3.png)



## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16226,https://api.github.com/repos/oppia/oppia/pulls/16226,https://github.com/oppia/oppia/pull/16226,closed,1233,794,38,42,13,64,1,1,[{'name': 'PR: LGTM'}],2022-10-06 17:20:23+00:00,2022-10-17 02:23:08+00:00,896565.0,"10 days, 9:02:45","[{'comment_id': 990633751, 'comment_body': ""In line 196 ( of this PR ), we are defining git_cmd which is a list of strings but here we are extending that list with a **list of bytes** and below in line 202 we are again appending a string. So I just want to confirm if it is expected behavior. If yes, then I'll have to define git_cmd as a list of Union[str, bytes]. "", 'comment_created': datetime.datetime(2022, 10, 8, 12, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 990635261, 'comment_body': ""According to docstring, the handler should have `Callable[[str], int]` type, but here https://github.com/oppia/oppia/blob/fb0c69b8fcd531169b496e3341fb483cc2d9920a/scripts/run_portserver.py#L534\r\nwe are providing different Callable signature and in the test cases also we are providing different signatures. So, please take a look and let me know if I'm missing something."", 'comment_created': datetime.datetime(2022, 10, 8, 12, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 990635287, 'comment_body': 'The same thing is encountered here as we have encountered in https://github.com/oppia/oppia/pull/16226/files#r990635261 !!!', 'comment_created': datetime.datetime(2022, 10, 8, 12, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 990724012, 'comment_body': 'Should be ""Args:""?', 'comment_created': datetime.datetime(2022, 10, 9, 3, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990724168, 'comment_body': ""This seems incorrect to me, I don't think stdout and stderr are typically represented as ints."", 'comment_created': datetime.datetime(2022, 10, 9, 3, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990724227, 'comment_body': 'Well-spotted!', 'comment_created': datetime.datetime(2022, 10, 9, 3, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990724489, 'comment_body': ""Why can't starttag_text always return a non-None value, and the callers handle the case where there's no tag (and don't call get_starttag_text at all when there's no tag to call it for)?"", 'comment_created': datetime.datetime(2022, 10, 9, 3, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990724573, 'comment_body': ""Let's not use kwargs. What arguments are actually passed in the kwargs? Let's turn those into concrete arguments instead so that all this is more deterministic."", 'comment_created': datetime.datetime(2022, 10, 9, 3, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990724657, 'comment_body': 'its --> it\'s\r\n\r\nDrop extra space before ""will""', 'comment_created': datetime.datetime(2022, 10, 9, 3, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990724822, 'comment_body': ""Seems like we're passing component names rather than components, so maybe call the last arg `possible_component_names` instead? (Make sure to update the docstring, too.)"", 'comment_created': datetime.datetime(2022, 10, 9, 3, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725201, 'comment_body': ""No, I think it should be all strings or all bytes -- thanks for flagging. Do we typically use str or bytes for other cmds? We should do the same thing for this command.\r\n\r\n(After you've changed the code, try invoking it manually to confirm that it works.)"", 'comment_created': datetime.datetime(2022, 10, 9, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725247, 'comment_body': 'If None, the remote branch is considered to be the same as the local branch.', 'comment_created': datetime.datetime(2022, 10, 9, 3, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725307, 'comment_body': 'Let\'s get rid of these ""union"" things and have single-typed cmd lists throughout all the scripts/ files. I don\'t see the need to maintain a union for these.\r\n\r\nI feel like, in general, str are more standard, but please let me know if I\'m wrong here and doing this causes some issues. You might want to read up a bit on what Python 3 prefers, too.', 'comment_created': datetime.datetime(2022, 10, 9, 3, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725793, 'comment_body': ""This seems odd to me, isn't the return value of subprocess.Popen a file object (not a method)?\r\n\r\nDitto elsewhere."", 'comment_created': datetime.datetime(2022, 10, 9, 3, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725804, 'comment_body': 'Maybe use `unused_` and drop the pylint pragma.', 'comment_created': datetime.datetime(2022, 10, 9, 3, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725846, 'comment_body': ""Why is bool used for something called `text`? (I don't even really understand what the arg name is trying to convey, maybe some explanation would help.)"", 'comment_created': datetime.datetime(2022, 10, 9, 3, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725982, 'comment_body': ""Something is indeed probably off here, could you please check with @U8NWXD (who wrote this code)? We shouldn't use Any."", 'comment_created': datetime.datetime(2022, 10, 9, 3, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990725991, 'comment_body': 'Ditto as above.', 'comment_created': datetime.datetime(2022, 10, 9, 3, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990726046, 'comment_body': 'Why is the cast needed? Can _parse_port_ranges() provide the correct thing or is that a bad idea for some reason?', 'comment_created': datetime.datetime(2022, 10, 9, 3, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990726151, 'comment_body': 'Indentation is off. Previous indentation was fine, but if you want it like this then this line must be indented by 4.', 'comment_created': datetime.datetime(2022, 10, 9, 3, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990726234, 'comment_body': 'Why are we adding this argument in various places?', 'comment_created': datetime.datetime(2022, 10, 9, 3, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990726239, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 10, 9, 3, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990822468, 'comment_body': 'Oh, sorry, I misread -- I thought this comment was saying `process` is a method. \r\n\r\nOn rereading I think normally the way we handle this is using self.swap() rather than direct assignment, can we do that here?', 'comment_created': datetime.datetime(2022, 10, 9, 18, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 990912978, 'comment_body': ""In practice, `handler` can accept any input that it can call `int()` on, which is why the tests can be so variable without failing. My guess is that the handler should accept bytes, but I'd recommend adding a print statement or a breakpoint to check what kind of data it receives in practice.\r\n\r\nThe handler definitely returns the allocated port number as a string though, not an int.\r\nhttps://github.com/oppia/oppia/blob/fb0c69b8fcd531169b496e3341fb483cc2d9920a/scripts/run_portserver.py#L305"", 'comment_created': datetime.datetime(2022, 10, 10, 4, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 991122005, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 10, 10, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122052, 'comment_body': 'This `mock_popen` method mocks the behavior of `subprocess.Popen`, and in the codebase whenever we are calling `subprocess.Popen`, we are providing `stdout` and `stderr` as int constant. Some of the examples are:\r\nhttps://github.com/oppia/oppia/blob/e03494900a56d5e0d1470137c8b9b75d53445114/scripts/pre_push_hook.py#L107\r\nhttps://github.com/oppia/oppia/blob/e03494900a56d5e0d1470137c8b9b75d53445114/scripts/pre_push_hook.py#L126\r\nhttps://github.com/oppia/oppia/blob/e03494900a56d5e0d1470137c8b9b75d53445114/scripts/pre_push_hook.py#L134\r\nhttps://github.com/oppia/oppia/blob/e03494900a56d5e0d1470137c8b9b75d53445114/scripts/run_frontend_tests.py#L91\r\nhttps://github.com/oppia/oppia/blob/e03494900a56d5e0d1470137c8b9b75d53445114/scripts/run_mypy_checks.py#L290\r\n\r\nWhere `subprocess.PIPE` is an Integer constant whose value is `-1` ( reference: https://github.com/python/cpython/blob/8827b95e80302ef19d19561fdcd81c6efde2ecdb/Lib/subprocess.py#L259 )', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122106, 'comment_body': 'This `get_starttag_text` method is used in `handle_starttag` method and `handle_starttag` method is only called when a start tag of an element is encountered. So, for the `get_starttag_text` method, there is always a tag so its value will never be None. \r\n\r\nReference for `handle_starttag` method: https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_starttag\r\n\r\nReference for `get_starttag_text` method:\r\nhttps://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.get_starttag_text', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122135, 'comment_body': '**kwargs is replaced with the `comment` argument because this is the only extra argument we are passing. Docstring is also updated!', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122202, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122257, 'comment_body': '> maybe call the last arg possible_component_names instead\r\n\r\nDone! \r\n\r\n> Make sure to update the docstring, too\r\n\r\nDone!', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122306, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122356, 'comment_body': 'I did some changes PTAL! ( tests and pre_commit_hook are working fine with new changes )', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122390, 'comment_body': 'Done -- now `self.swap()` is used.', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991122441, 'comment_body': 'We cannot do this because we  are providing stdout and stderr as a keyword argument\r\nhttps://github.com/oppia/oppia/blob/e03494900a56d5e0d1470137c8b9b75d53445114/scripts/pre_push_hook.py#L126\r\nand If we use `unused_` prefix then a mismatch will occur and the backend test will fail.', 'comment_created': datetime.datetime(2022, 10, 10, 10, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991123354, 'comment_body': '> Can _parse_port_ranges() provide the correct thing\r\n\r\nFixed', 'comment_created': datetime.datetime(2022, 10, 10, 10, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991123548, 'comment_body': '> Indentation is off \r\n\r\nFixed', 'comment_created': datetime.datetime(2022, 10, 10, 10, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991137346, 'comment_body': 'The `subprocess.check_output` method is returning a string value at runtime but while type checking its return type is bytes because previously while calling this method we are not matching any overload so its return type is bytes but after defining the text argument as True. we matched the overload that returns a string type. Reference: https://github.com/python/typeshed/blob/fe3a34503cb54f30c932c329d40e615be14c1ddf/stdlib/subprocess.pyi#L1689 ', 'comment_created': datetime.datetime(2022, 10, 10, 10, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991137671, 'comment_body': 'Also, the indentation is fixed!', 'comment_created': datetime.datetime(2022, 10, 10, 10, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991138110, 'comment_body': 'The reason is mentioned in this comment https://github.com/oppia/oppia/pull/16226#discussion_r991137346\r\n\r\nAlso, the indentation is fixed!', 'comment_created': datetime.datetime(2022, 10, 10, 10, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991140812, 'comment_body': 'The reason why we are using text argument is mentioned in this comment https://github.com/oppia/oppia/pull/16226#discussion_r991137346\r\n\r\nBut there we are defining it for typing purposes, and here we are defining text so that the mock function matches with the original function and backend tests do not throw an error for missing argument.', 'comment_created': datetime.datetime(2022, 10, 10, 10, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991164775, 'comment_body': ""> Do we typically use str or bytes for other cmds?\r\n\r\nwe use strings for other cmds. So, `.encode('utf-8')` is removed."", 'comment_created': datetime.datetime(2022, 10, 10, 11, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991165237, 'comment_body': '> try invoking it manually to confirm that it works \r\n\r\nEverything is working fine!', 'comment_created': datetime.datetime(2022, 10, 10, 11, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991180494, 'comment_body': '> The handler definitely returns the allocated port number as a string though, not an int.\r\n\r\nBut In `handle_port_request`, we are returning Optional[bytes] not string. Because here we are returning bytes https://github.com/oppia/oppia/blob/fb0c69b8fcd531169b496e3341fb483cc2d9920a/scripts/run_portserver.py#L332\r\nand here we are returning None https://github.com/oppia/oppia/blob/fb0c69b8fcd531169b496e3341fb483cc2d9920a/scripts/run_portserver.py#L326', 'comment_created': datetime.datetime(2022, 10, 10, 11, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 991180682, 'comment_body': '@U8NWXD @seanlip PTAL!', 'comment_created': datetime.datetime(2022, 10, 10, 11, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 992021993, 'comment_body': 'Ah, thanks for checking. OK sounds good, can you please just put a comment here saying something like ""Note that, in general, stdout and stderr can be ints -- e.g. subprocess.PIPE is an Integer constant whose value is -1. Reference: https://github.com/python/cpython/blob/8827b95e80302ef19d19561fdcd81c6efde2ecdb/Lib/subprocess.py#L259"" ? That will probably help other devs.\r\n\r\nThanks!', 'comment_created': datetime.datetime(2022, 10, 11, 8, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 992038665, 'comment_body': ""Sorry, I don't understand your explanation. By default I believe text=None. Wouldn't that match [this overload](https://github.com/python/typeshed/blob/fe3a34503cb54f30c932c329d40e615be14c1ddf/stdlib/subprocess.pyi#L1692) and return a str as well?"", 'comment_created': datetime.datetime(2022, 10, 11, 8, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 992040181, 'comment_body': ""OK, maybe you could add a code comment + reference to explain what's going on. It reads a bit confusingly."", 'comment_created': datetime.datetime(2022, 10, 11, 8, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 992043033, 'comment_body': 'Sorry -- this thread is still open from my perspective as a reviewer, but you\'ll need to get @U8NWXD\'s help on this (I\'m not familiar with the code, I just think what is currently going on here ""smells"" a bit and should be tightened up). ', 'comment_created': datetime.datetime(2022, 10, 11, 8, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 993826441, 'comment_body': ""Should we just place the value of `WEBPACK_CONFIG_FILE_NAME` since the variable isn't used anywhere else? "", 'comment_created': datetime.datetime(2022, 10, 12, 19, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 993880854, 'comment_body': '@seanlip Just checked out why it is coming as `bytes`. The overloaded function you pointed out requires `encoding` kwarg as `str` rather than `str | None`\r\n\r\nTook the signature diff of only a few overload functions tho.\r\n\r\nI guess we might have to pass `text` kwarg. This is the playground [URL](https://mypy-play.net/?mypy=latest&python=3.7&gist=bc653d54f065f708143b616b2ff09471) in which I checked the return type.', 'comment_created': datetime.datetime(2022, 10, 12, 20, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aasiffaizal', 'type': 'User'}, {'comment_id': 994177049, 'comment_body': ""Sorry, still don't understand. Why is the behaviour during runtime and typechecking different, in terms of the returned type? That doesn't make sense to me -- what's different in the two envs that causes this?"", 'comment_created': datetime.datetime(2022, 10, 13, 5, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 994681408, 'comment_body': 'This variable is used in 2 places:\r\n1. In line 54\r\n2. [HERE](https://github.com/oppia/oppia/blob/b511dc1f080f79ac72c274ee2c1f3efcc3231f41/scripts/linters/other_files_linter.py#L242)', 'comment_created': datetime.datetime(2022, 10, 13, 13, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 994723896, 'comment_body': '@sahiljoster32 Yes, I agree. Sorry my comment wasn\'t clear. I was trying to emphasize that the port number is not returned as an int, and I used ""string"" in the generic sense (which includes bit strings that Python calls `bytes`), not the Python `str` type. I think as written, the return type here should be `Union[bytes, str, None]` since we can also return an empty string. However, I agree with Sean, this code is suspect. I\'d probably re-write it to return empty byte strings in the failure cases instead of a mix of `None` and `\'\'`', 'comment_created': datetime.datetime(2022, 10, 13, 14, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 995172163, 'comment_body': ""Hm, one question. It seems to me that the point of `handler` is to return an allocated port number (or possibly None, I'm not sure).\r\n\r\nIf this is the case, why can't we just force the handlers to return ints|None and do any necessary casting within the handler? It seems really odd to me to return an int as a string (especially if it can never be a string) and I think that we should just constrain the interface on our end. (I assume we have control over the handler code in all cases?)"", 'comment_created': datetime.datetime(2022, 10, 13, 22, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 995687297, 'comment_body': 'Comment added!', 'comment_created': datetime.datetime(2022, 10, 14, 12, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 995688333, 'comment_body': 'As per the offline conversation, `encoding` arg is added.', 'comment_created': datetime.datetime(2022, 10, 14, 12, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 995689052, 'comment_body': 'As per the offline conversation, encoding arg is added wherever possible!', 'comment_created': datetime.datetime(2022, 10, 14, 12, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 995719477, 'comment_body': 'I think @U8NWXD we need your help again, PTAL!', 'comment_created': datetime.datetime(2022, 10, 14, 12, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 996248702, 'comment_body': ""The port number has to be sent over the socket, so it'll have to be converted to bytes eventually. See the socket documentation here: https://docs.python.org/3/library/socket.html#socket.socket.sendall"", 'comment_created': datetime.datetime(2022, 10, 15, 4, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 996251367, 'comment_body': 'Yup, but we can do that conversion at the interface just before sending, right? In our domain logic we should just represent it as what it is.', 'comment_created': datetime.datetime(2022, 10, 15, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 996254354, 'comment_body': 'Can we pick either str or bytes for the second item here, and be consistent throughout? Or, for that matter, int?', 'comment_created': datetime.datetime(2022, 10, 15, 5, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 996254402, 'comment_body': 'specify --> specifies', 'comment_created': datetime.datetime(2022, 10, 15, 5, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 996408842, 'comment_body': 'following the documentation that was provided by chris (https://github.com/oppia/oppia/pull/16226#discussion_r996248702 ) I think here we should allow bytes.', 'comment_created': datetime.datetime(2022, 10, 16, 8, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 996408848, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 10, 16, 8, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': '85df0cad2d2734a4709d94ebf5fe435f3e85bebf', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69eea4bc0c26b65265d69bcf5dc53b8c48679976', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef738956a99d416be91bf86d2fb5c1ff7cb16b6e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dffdd59dcdf2d084890d2451b10e446da6d9b63', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6479b4f73b905a76b7b09bb6b06b2f962b57bfb0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e48d1303dff57cb323427138858257cf3dac987', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0de4de766718938a3d4994ccee1e0467af5281e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be4d42a324485c00dd4abb1e638c31a7209151d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76cada1ca4c0227199f723aaae228e200a91db76', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c427fa20b34295c9925eda63bb8edbbbacf468b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd48333094fb35681f863b7c3614b05013ba5c687', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f665b1b86060e4676d8fd74ef62a96eb65608146', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42f3bfac2e352794437d90271cad92ef248f7c6c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd98fbb8db28cf0a516e000b62a91831e540f5c2f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd274c9b67d6c109346e8fed8ddad3b9962f8b0a1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bef45c72c81265f6e1e2e213e25c628692f01b17', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be414451a204eb0a8398c72ac4ae88604de4fc31', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f02c96025f0b5fe0e9186f412c04c7dc7ed1476', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15e5088b5c5700df324ced62067851d20db2fa9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050464e30b3a31f360f0242d1cb7c3233ca4acfb', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0950b97467c0a01784a1d9e97f98596e0a064183', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb8522b0f2082a23329348c168b2b4b4307697a9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '619d8d24d3b44d46183f3fe036c2d3e513e33f9e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade790394fcdf37cfe6ee746ff5ef67d0bf7d882', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e006e0c03a26ced642a241c9a0aaedf2e67fcb3d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95a86a1c7901c65ec21367897993c18520115a50', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1daf6572fcf9ee666076b06fd6578ed9db301b7', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52615ec93f1fe0d2ea8b2e7eb8e5dd2961620a2d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cf5c3309b721675dff0cd94324e1f99ac391581', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9031ee7442204016c1e18eb1e5bd943d2444297', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff0fd9712cae29760d3e404828c17b76f83f74e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '557fec3267524c6fea19a5e4786198472c8abede', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39263979c57f9099eadda291741faba4724b81af', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4c39a03911d226694722e086e45dc2409e8c81', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3807821f0a48bc66a5d74760dcbd2723ed4b3874', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8df655fd30a04c763a33b3bb2933cba0de84ff', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0418299f8d47906f8ecd0cd5726c60b6a670aac1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd856b1eb57a87766c591cd7ea9745088dd41fc50', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3843ccbc2f80819c0a07037c7e3fc320b9922b9c', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4adbe0daf88f5f93681b2c7c3c447621cd731ca5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7942fbf7dd651dc945e35596f3b755a7df45d4bd', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d3ecc2d645147a0b7a33ee1afb9a04450bdc5d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1090529321,Removed `voiceover application` from codebase.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: Oppia discontinued the usage of voiceover_services, so this part of the codebase can be treated as dead code and can be removed.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16343,https://api.github.com/repos/oppia/oppia/pulls/16343,https://github.com/oppia/oppia/pull/16343,closed,4,2777,30,13,17,0,2,1,"[{'name': 'PR: LGTM'}, {'name': ""PR: don't merge - STALE BUILD""}]",2022-10-18 09:58:01+00:00,2022-10-28 08:54:16+00:00,860175.0,"9 days, 22:56:15",[],"[{'commit_sha': '15890e790fc602d0c3758e2b9188ee71caf1d8ac', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84bd64ca4b3dde6bbe7e304dfe43b9b6f7122e0a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2b3c28331db8e8b37511ee2c94b7574d9889eba', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3158dcdec775f5e48950194279e1ae3f214910', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2ab441909c822d929967d89b48baa5cdbeb255f', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bb807e5859425c210bedf66586fdefb46161129', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c85a420684b3dff18ace16b9effaf6d5e0e487', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477f9bea0bb8285a8db26e63183c6a2e501ce223', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1acce6e41a0729f0a90c1be21c7ef2738e26d35', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc689d3560774751173961b0be11477e44511d29', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b7d2a6076a534718a3846283853cda0fb3a6a5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b3fa9ce2c7dba43db60cb58907517ee2c32c74', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93fdde451e14b2f7aad87d00f43b6752df7cc9b6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1123205325,Fix #15995: Adding more strict types to customization args.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part:
#15995 and
#15982.
3. This PR does the following: This PR adds more strict typing to customization args area.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
![Screenshot from 2022-11-15 23-05-49](https://user-images.githubusercontent.com/12553576/201988176-8fd6a94b-4377-401d-a697-683c2f733d41.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16551,https://api.github.com/repos/oppia/oppia/pulls/16551,https://github.com/oppia/oppia/pull/16551,closed,944,654,20,21,11,58,1,1,[{'name': 'PR: LGTM'}],2022-11-15 17:37:39+00:00,2022-11-21 06:53:16+00:00,479737.0,"5 days, 13:15:37","[{'comment_id': 1023363456, 'comment_body': ""This is too cryptic and needs more explanation for devs who aren't that familiar with typing.\r\n\r\nAlso didn't we talk about using a MutableMapping to get around this issue?"", 'comment_created': datetime.datetime(2022, 11, 15, 23, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023364817, 'comment_body': 'Deindent by 4', 'comment_created': datetime.datetime(2022, 11, 15, 23, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023365329, 'comment_body': ""Should state the key name, since the value type typically depends on which key it's for, not just on the interaction."", 'comment_created': datetime.datetime(2022, 11, 15, 23, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023366040, 'comment_body': 'Sometimes you cast xxx and sometimes you cast xxx.value. Can we be consistent throughout?\r\n\r\nI suggest casting xxx.value always.', 'comment_created': datetime.datetime(2022, 11, 15, 23, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023366279, 'comment_body': 'Deindent by 4. Check your indentation elsewhere, too.', 'comment_created': datetime.datetime(2022, 11, 15, 23, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023448441, 'comment_body': 'Indentation seems wrong, please check throughout.', 'comment_created': datetime.datetime(2022, 11, 16, 2, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023449196, 'comment_body': ""Is there some reason you're splitting choices_subtitled_dict out? The previous definition of the entire constant at once seems more readable to me (less context to keep in the reader's head)."", 'comment_created': datetime.datetime(2022, 11, 16, 2, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023449698, 'comment_body': ""This is wrong, it forces the 'filepath' customization arg to have type str."", 'comment_created': datetime.datetime(2022, 11, 16, 2, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023450972, 'comment_body': 'I don\'t think I understand this. What\'s ""Unaltered"" mean?\r\n\r\nAlso we should have just one ""Union"" type for this that\'s used everywhere.', 'comment_created': datetime.datetime(2022, 11, 16, 2, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023451600, 'comment_body': 'Should try to avoid Any.', 'comment_created': datetime.datetime(2022, 11, 16, 2, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023451925, 'comment_body': 'narrowing the down --> narrowing down\r\n\r\nDitto elsewhere.', 'comment_created': datetime.datetime(2022, 11, 16, 2, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023452052, 'comment_body': 'What does ""sue"" mean here?', 'comment_created': datetime.datetime(2022, 11, 16, 2, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023452128, 'comment_body': 'Multi --> Multiple', 'comment_created': datetime.datetime(2022, 11, 16, 2, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023452991, 'comment_body': ""Wouldn't assertions be more appropriate here (and below)?"", 'comment_created': datetime.datetime(2022, 11, 16, 2, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023453325, 'comment_body': 'If this is for mutability, then why not MutableMapping?\r\n\r\nIn general, ""avoid mypy complaining"" is not a sufficient reason on its own.', 'comment_created': datetime.datetime(2022, 11, 16, 2, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023453533, 'comment_body': 'Why are these defined at the bottom of the file, rather than at the top?', 'comment_created': datetime.datetime(2022, 11, 16, 2, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023454616, 'comment_body': ""Every assert needs a justification.\r\n\r\nActually I think it would be better (for issue customization args) to have a union of the possible types for each type of issue -- the choices there are pretty limited. But if you want to go with asserts and justification, that's fine too."", 'comment_created': datetime.datetime(2022, 11, 16, 2, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1023454720, 'comment_body': 'Can we not use Any?', 'comment_created': datetime.datetime(2022, 11, 16, 2, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1024963187, 'comment_body': ""Here I didn't cast value, because we are re-assigning updated value to the same dict."", 'comment_created': datetime.datetime(2022, 11, 17, 9, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1024970745, 'comment_body': ""Here I didn't cast value, because we are re-assigning updated value to the same dict."", 'comment_created': datetime.datetime(2022, 11, 17, 9, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1024970911, 'comment_body': ""Here I didn't cast value, because we are re-assigning updated value to the same dict.\r\n"", 'comment_created': datetime.datetime(2022, 11, 17, 9, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108201, 'comment_body': ""> This is too cryptic and needs more explanation for devs who aren't that familiar with typing.\r\n\r\nComment updated!\r\n\r\n> Also didn't we talk about using a MutableMapping to get around this issue?\r\n\r\nMutableMapping does not allow the assignment of dict subtypes, and I think this is already concluded while discussion using this link(https://github.com/python/mypy/issues/8136) as a ref."", 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108252, 'comment_body': 'Indentation is corrected throughout The PR, PTAL! ', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108318, 'comment_body': 'comment updated!', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108366, 'comment_body': '> I suggest casting xxx.value always.\r\n\r\nDone, but in some cases casting to xxx is necessary. I pointed out those cases explicitly in the comments below PTAL!\r\n\r\ncomment where this is mentioned https://github.com/oppia/oppia/pull/16551#discussion_r1024963187', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108397, 'comment_body': 'Indentation is corrected throughout The PR, PTAL!\r\n\r\n', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108427, 'comment_body': 'Indentation is corrected throughout The PR, PTAL!\r\n\r\n', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108463, 'comment_body': ""> Is there some reason you're splitting choices_subtitled_dict out? \r\n\r\nyes, because MyPy considers List of SubtitledHtmlDicts as a list of Dict[str, str] by itself. for eg:\r\n\r\n```python\r\n[\r\n            {\r\n                'content_id': 'ca_choices_0',\r\n                'html': '<p>This is value1 for MultipleChoice</p>'\r\n            },\r\n            {\r\n                'content_id': 'ca_choices_1',\r\n                'html': '<p>This is value2 for MultipleChoice</p>'\r\n            }\r\n]\r\n```\r\n\r\nHere every element of List is Dict[str, str] if we just depends on MyPy, so to fix this behavior I just taken out these lists and annotate them explicitly. "", 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108497, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108506, 'comment_body': 'Fixed, Now only single Union type is used everywhere.', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108540, 'comment_body': 'Now Any is used for schema dicts https://github.com/oppia/oppia/blob/aaa1987fc06a5eee127ba41dc3fc8b4cfaf0af4c/core/domain/state_domain.py#L2585\r\nhttps://github.com/oppia/oppia/blob/aaa1987fc06a5eee127ba41dc3fc8b4cfaf0af4c/core/domain/state_domain.py#L2440', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108575, 'comment_body': 'comment is updated', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108596, 'comment_body': 'sorry, fixed!', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108650, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108687, 'comment_body': ""> Wouldn't assertions be more appropriate here\r\n\r\nAssertion won't help, because conversion_fn can take `SubtitledHtml` and `SubtitledUnicode` but one at a time. So if we use assertion here then value will become Union of [ `SubtitledHtml` and `SubtitledUnicode`] and this is not expected by MyPy. \r\n\r\nAnother thing is that we are assigning value to the Generic type variable `value`,  which is again not allowed."", 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108729, 'comment_body': '>If this is for mutability, then why not MutableMapping?\r\n\r\nMutableMapping does not allow the assignment of dict subtypes, and I think this is already concluded while discussion using this link(https://github.com/python/mypy/issues/8136) as a ref.\r\n\r\n> In general, ""avoid mypy complaining"" is not a sufficient reason on its own.\r\n\r\nMore explicit reason is added!\r\n', 'comment_created': datetime.datetime(2022, 11, 17, 12, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108815, 'comment_body': 'Because If we define this type at the top of the file then backend tests will fail with `undefined` error.\r\n\r\n### this is wrong case\r\n\r\n```python\r\nUnionOfCustomizationArgsDictValues = Union[\r\n    str,\r\n    int,\r\n    bool,\r\n    List[str],\r\n    List[SubtitledHtml],\r\n    List[SubtitledHtmlDict],\r\n    SubtitledHtmlDict,\r\n    SubtitledUnicode, --- # Here this is referenced before definition. ( similar for other classes as well )\r\n    SubtitledUnicodeDict,\r\n    domain.ImageAndRegionDict,\r\n    domain.GraphDict\r\n]\r\n\r\nclass SubtitledUnicode:\r\n    """"""Value object representing subtitled unicode."""""" \r\n\r\n....\r\n```\r\n\r\n### this is ok case\r\n\r\n```python\r\n\r\nclass SubtitledUnicode:\r\n    """"""Value object representing subtitled unicode."""""" \r\n\r\n    ....\r\n\r\nUnionOfCustomizationArgsDictValues = Union[  ----------- # At this point every class is defined so no error will occur.\r\n    str,\r\n    int,\r\n    bool,\r\n    List[str],\r\n    List[SubtitledHtml],\r\n    List[SubtitledHtmlDict],\r\n    SubtitledHtmlDict,\r\n    SubtitledUnicode, \r\n    SubtitledUnicodeDict,\r\n    domain.ImageAndRegionDict,\r\n    domain.GraphDict\r\n]\r\n```', 'comment_created': datetime.datetime(2022, 11, 17, 12, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108849, 'comment_body': 'reasons added for every assert PTAL!', 'comment_created': datetime.datetime(2022, 11, 17, 12, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025108890, 'comment_body': 'Any is used at only this place https://github.com/oppia/oppia/blob/aaa1987fc06a5eee127ba41dc3fc8b4cfaf0af4c/core/domain/suggestion_registry.py#L311\r\n and this is already addressed.', 'comment_created': datetime.datetime(2022, 11, 17, 12, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1025912474, 'comment_body': ""Thanks, the updated comment is more understandable.\r\n\r\nI'm still a bit dubious about this whole thing though, because you seem to be assigning customization_args to a general dict type, which feels way too general. However, is this function even used by anything else (besides tests)? If not, you can probably just delete it."", 'comment_created': datetime.datetime(2022, 11, 18, 1, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1025913474, 'comment_body': 'Ah ok, then in that case, can you *always* cast xxx instead of xxx.value?\r\n\r\nI am fine with whatever you do as long as it is consistent for everything.', 'comment_created': datetime.datetime(2022, 11, 18, 1, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1025914336, 'comment_body': 'Oh ok. Just to confirm, you\'re saying that if you leave them inline, MyPy will throw an error (even though you\'ve annotated the ""outer object"" completely)? ', 'comment_created': datetime.datetime(2022, 11, 18, 1, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1025915102, 'comment_body': ""While I'm ok with using mapping/dict/etc., could you please make the dict cast more specific in terms of what's actually in it? Currently you've cast it very generally to any sort of dict."", 'comment_created': datetime.datetime(2022, 11, 18, 2, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1025916529, 'comment_body': 'Oh, interesting. This is unusual so please could you add a comment explaining that? Something like ""This union type depends on XYZ so it has to be defined after XYZ is defined.""\r\n\r\nAlso should this go in an ""if MYPY"" block? Not sure.', 'comment_created': datetime.datetime(2022, 11, 18, 2, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1025916854, 'comment_body': ""But you're just narrowing it down to list, not List[str]? Ditto elsewhere.\r\n\r\nShould it be more explicit?"", 'comment_created': datetime.datetime(2022, 11, 18, 2, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1025917652, 'comment_body': 'Er, I\'m looking at that justification and it seems a bit off. What exactly prevents BaseSuggestion from using strict typing? The whole point is to use strict typing so saying ""we use Any because we don\'t use strict typing"" doesn\'t really explain anything.', 'comment_created': datetime.datetime(2022, 11, 18, 2, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1025920136, 'comment_body': ""I see, ok. Yeah, it's not quite the right representation but I agree here that the logical conditions are a bit too complicated here for mypy checking. Thanks for explaining."", 'comment_created': datetime.datetime(2022, 11, 18, 2, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1027258086, 'comment_body': 'Done, instead of assertions now cast is used.\r\n\r\n', 'comment_created': datetime.datetime(2022, 11, 20, 9, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027258094, 'comment_body': 'Done, instead of assertions now cast is used.', 'comment_created': datetime.datetime(2022, 11, 20, 9, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027258100, 'comment_body': 'everything is casted to `xxx.value` with some refactoring!', 'comment_created': datetime.datetime(2022, 11, 20, 9, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027258115, 'comment_body': '> This is unusual so please could you add a comment explaining that? Something like ""This union type depends on XYZ so it has to be defined after XYZ is defined.""\r\n\r\nDone\r\n\r\n> Also should this go in an ""if MYPY"" block? Not sure\r\n\r\nThis Union type is imported into other modules also where it is used with the cast, so while running backend tests those modules will again throw an error.', 'comment_created': datetime.datetime(2022, 11, 20, 9, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027258131, 'comment_body': '> Oh ok. Just to confirm, you\'re saying that if you leave them inline, MyPy will throw an error (even though you\'ve annotated the ""outer object"" completely)?\r\n\r\nyes', 'comment_created': datetime.datetime(2022, 11, 20, 9, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027258150, 'comment_body': 'This method is not used besides tests so I removed it!', 'comment_created': datetime.datetime(2022, 11, 20, 9, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027258759, 'comment_body': ""I'm not sure if you have actually opened the issue that is mentioned in the TODO because to cover all the info in just a code comment is hard."", 'comment_created': datetime.datetime(2022, 11, 20, 9, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027263721, 'comment_body': ""You don't need to write everything that is on the issue here. But try to summarize the actual problem and write that in the justification; what you have written in that justification is not clear."", 'comment_created': datetime.datetime(2022, 11, 20, 10, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1027570723, 'comment_body': 'Comment updated PTAL!', 'comment_created': datetime.datetime(2022, 11, 21, 4, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 1027571323, 'comment_body': '...used. So, to...\r\n\r\nAlso, when you say (below) ""once this BaseSuggestion class is refactored"", what do you mean? You should give the exact condition for when to remove type Any, and there are other refactorings of BaseSuggestion that are possible that wouldn\'t solve this issue.', 'comment_created': datetime.datetime(2022, 11, 21, 4, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1027579543, 'comment_body': ""> ..used. So, to...\r\n\r\nDone\r\n\r\n> You should give the exact condition for when to remove type Any, and there are other refactorings of BaseSuggestion that are possible that wouldn't solve this issue\r\n\r\nI'll add more info on the issue itself, as it requires more investigation!"", 'comment_created': datetime.datetime(2022, 11, 21, 4, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': 'd505f430afbaaf7c1f4a6dfec69a164b476cc11a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953b640ddf4c4da89d41c86a76d5a32390c6fe44', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fac68492c94c4a1e194ea7e0e9f2c1521d3ef', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f0308e969e5756628084b2011f2e1c0dd3ba206', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b858198cac761df3b2950da5aae385e79a7e5a06', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b595f0180f51bf239faefad1bdbd3f301bc0a84', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13bb24f8d33f69e76a490544251edcc279b8746', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5931d4c8f64aca6ae33e1dba88e337ed86522df6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad0c042feea385079b108b9ac14c1a0a58d9fa9', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa7b44883442a6befd145e61f8ef01451ba5e26', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb11054528491f2b4c86351b1d63eb6c4af7905', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2cc6736c0529f79d775ba1ab341e6adaaa2ddfe', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72ad48c5ac0b406f370ed6569fed867874fe58b', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c78f03cec1573d4d73139e99994ef5a999c806a4', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09bea6111b70e8192c731e7f3c64b597debab090', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '074e4023081f4579fc6dd5e4e8e26154825af624', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cc1b44729f375be171caa77619ab098c3d06f1d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05cfa129a5dd006c6368b56abef9e0853f462bc5', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '475dd180b55b2a19dd8f7835502452d02dfa877d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c49d35ab63b31675cb603ee0d61ad35b03a73ac', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d33ad754a32ea3498e0cc4b3e442e1103a690b1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24
1062965023,Added support to stop the usage of prohibited type ignores in the codebase. ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of N/A.
2. This PR does the following: 
 - This PR adds functionality in linters to stop the usage of disallowed type ignore error codes in the codebase.
 - This PR adds functionality in linters to stop the usage of generic type: ignores.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

#### 1. Linter should throw an error when a prohibited error code is used 
 - In this [Proof](https://github.com/oppia/oppia/actions/runs/3112171122/jobs/5045302736): `type-arg` is excluded from the allowed error codes, so linter showing errors for the `type: ignore[type-arg]`
 - In this [Proof](https://github.com/oppia/oppia/actions/runs/3113560192/jobs/5048345388): `no-return` is used with type ignore in the combined form ( `no-return` with other allowed error codes, eg: `type: ignore[on-untyped-call, no-return, arg-type]` )
 - In any of the above proof no error related to comment ( Please use a comment like Here we use mypy because ... ) is shown which is expected for these cases. Because comment error is only expected for those cases where we are using allowed error codes and for prohibited error codes we are just throwing errors to remove this type of ignore.
#### 2. Linter should not throw any error when no error codes apart from the allowed list are used. -- [Proof](https://github.com/oppia/oppia/actions/runs/3112702563/jobs/5046426922) 



## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16104,https://api.github.com/repos/oppia/oppia/pulls/16104,https://github.com/oppia/oppia/pull/16104,closed,356,9,3,18,17,8,1,1,[{'name': 'PR: LGTM'}],2022-09-21 14:44:49+00:00,2022-11-09 04:30:19+00:00,4196730.0,"48 days, 13:45:30","[{'comment_id': 978742961, 'comment_body': '```suggestion\r\nallowed-type-ignore-error-codes=\r\n    attr-defined,\r\n    union-attr,\r\n    call-overload,\r\n    override,\r\n    return,\r\n    assignment,\r\n    list-item,\r\n    dict-item,\r\n    typeddict-item,\r\n    func-returns-value,\r\n    misc,\r\n    arg-type,\r\n    type-arg,\r\n    no-untyped-def,\r\n    no-untyped-call,\r\n    no-any-return\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 14, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 978895868, 'comment_body': 'I think this should lead to our own wiki with more explanation.', 'comment_created': datetime.datetime(2022, 9, 23, 17, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 979011520, 'comment_body': 'Deindent all these by 4?', 'comment_created': datetime.datetime(2022, 9, 23, 19, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979012438, 'comment_body': 'Should you have tests for ""no error if allowed error code is used in single/combined form"", or is that not necessary?', 'comment_created': datetime.datetime(2022, 9, 23, 19, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 979034014, 'comment_body': ""You can put `encountered_prohibited_error_codes` here instead. It will evaluate as being truthy if the list isn't empty, and then you don't need the `prohibited_error_code_present` variable"", 'comment_created': datetime.datetime(2022, 9, 23, 20, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 979285630, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 24, 18, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 979285654, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 9, 24, 18, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}, {'comment_id': 979285977, 'comment_body': '> no error if allowed error code is used in single/combined form\r\n\r\nIf an allowed error code is used then it should be documented by a code comment -- So, a test for combined type_ignore is added ( which was missing previously ).', 'comment_created': datetime.datetime(2022, 9, 24, 18, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahiljoster32', 'type': 'User'}]","[{'commit_sha': 'f3b8753d504d5fb79cdef69e145dde82845d61a0', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6702831d1bd9eff6eb638206dec109ce9861761', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d7c373ab21c8cf419b47bea8ccd2da95b179b1', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e355fbaf0a12305905c7dce2f3b691f623275da3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71ac15098998eb55023d8ad14d16e0806154cf20', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b5b4c6413b10fd1de2a9314fb9f50151b4592e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e44fbd2d405aacd5fe26658ff15c18442db800a', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7521c3e574a4e76097e645dd2dd4340c5f0fb53', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0498c34090ae2876ec170ba1874fa3534d60330d', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81d933ece5f7d3cf624adec733e9c1a05e2e23ea', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '538bd53225061b03e84f23f4b81c05c9fa5aeaef', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e25d1df276baaff6417f38505bb87357e690b256', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b497bdae71f82ba082b59a58c8c8ebf61d980b6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39bfcf55e7701ffe1b0d62d9c6afe1037778e60', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e46f9c43c8a42da6876a3a71ca72468a6ed1abb3', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dffb97bba76b54962ef322e91342c23c9f2bc88', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b180349fa35e3147d64b9fd160390dc5531844e', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302079b230b54df33a5f98e93d21722ab2817bc6', 'committer_username': 'sahiljoster32', 'committer_name': 'sahil jhangar', 'committer_email': 'souravjangar91@gmail.com', 'commit_date': datetime.datetime(2015, 5, 22, 2, 18, 30, tzinfo=datetime.timezone.utc)}]",sahil jhangar,12553576,souravjangar91@gmail.com,User,,24,,15,24

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3843,5716,240,775,15755,1425,421,28,"[{'id': 1271987482, 'number': 17674, 'closed': datetime.datetime(2023, 3, 28, 16, 39, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 11, 8, 13, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1499202.0, 'time_delta': '17 days, 8:26:42', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1134521520, 'number': 16619, 'closed': datetime.datetime(2022, 11, 24, 16, 23, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 24, 7, 36, 37, tzinfo=datetime.timezone.utc), 'time_taken': 31605.0, 'time_delta': '8:46:45', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 1124583627, 'number': 16558, 'closed': datetime.datetime(2022, 11, 16, 21, 47, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 16, 14, 29, 2, tzinfo=datetime.timezone.utc), 'time_taken': 26325.0, 'time_delta': '7:18:45', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1123205325, 'number': 16551, 'closed': datetime.datetime(2022, 11, 21, 6, 53, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 15, 17, 37, 39, tzinfo=datetime.timezone.utc), 'time_taken': 479737.0, 'time_delta': '5 days, 13:15:37', 'additions': 944, 'deletions': 654, 'state': 'closed'}, {'id': 1119971931, 'number': 16532, 'closed': datetime.datetime(2022, 11, 19, 0, 35, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 12, 13, 51, 1, tzinfo=datetime.timezone.utc), 'time_taken': 557049.0, 'time_delta': '6 days, 10:44:09', 'additions': 3296, 'deletions': 1153, 'state': 'closed'}, {'id': 1113044675, 'number': 16501, 'closed': datetime.datetime(2022, 11, 19, 15, 9, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 7, 16, 53, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1030566.0, 'time_delta': '11 days, 22:16:06', 'additions': 3611, 'deletions': 1581, 'state': 'closed'}, {'id': 1108187042, 'number': 16473, 'closed': datetime.datetime(2022, 11, 10, 2, 31, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 2, 12, 31, 2, tzinfo=datetime.timezone.utc), 'time_taken': 655223.0, 'time_delta': '7 days, 14:00:23', 'additions': 2153, 'deletions': 916, 'state': 'closed'}, {'id': 1106464110, 'number': 16461, 'closed': datetime.datetime(2022, 11, 10, 11, 47, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 1, 9, 18, 18, tzinfo=datetime.timezone.utc), 'time_taken': 786566.0, 'time_delta': '9 days, 2:29:26', 'additions': 2511, 'deletions': 1020, 'state': 'closed'}, {'id': 1090529321, 'number': 16343, 'closed': datetime.datetime(2022, 10, 28, 8, 54, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 18, 9, 58, 1, tzinfo=datetime.timezone.utc), 'time_taken': 860175.0, 'time_delta': '9 days, 22:56:15', 'additions': 4, 'deletions': 2777, 'state': 'closed'}, {'id': 1090443798, 'number': 16342, 'closed': datetime.datetime(2022, 11, 1, 12, 50, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 18, 8, 51, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1223969.0, 'time_delta': '14 days, 3:59:29', 'additions': 4149, 'deletions': 1915, 'state': 'closed'}, {'id': 1084591620, 'number': 16286, 'closed': datetime.datetime(2022, 12, 9, 18, 37, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 12, 12, 8, 51, tzinfo=datetime.timezone.utc), 'time_taken': 5034519.0, 'time_delta': '58 days, 6:28:39', 'additions': 5495, 'deletions': 6093, 'state': 'closed'}, {'id': 1079371909, 'number': 16226, 'closed': datetime.datetime(2022, 10, 17, 2, 23, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 6, 17, 20, 23, tzinfo=datetime.timezone.utc), 'time_taken': 896565.0, 'time_delta': '10 days, 9:02:45', 'additions': 1233, 'deletions': 794, 'state': 'closed'}, {'id': 1072543192, 'number': 16169, 'closed': datetime.datetime(2022, 10, 11, 5, 28, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 30, 10, 48, 39, tzinfo=datetime.timezone.utc), 'time_taken': 931202.0, 'time_delta': '10 days, 18:40:02', 'additions': 2045, 'deletions': 1007, 'state': 'closed'}, {'id': 1062965023, 'number': 16104, 'closed': datetime.datetime(2022, 11, 9, 4, 30, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 21, 14, 44, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4196730.0, 'time_delta': '48 days, 13:45:30', 'additions': 356, 'deletions': 9, 'state': 'closed'}, {'id': 1061281647, 'number': 16083, 'closed': datetime.datetime(2022, 10, 1, 9, 30, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 20, 9, 4, 41, tzinfo=datetime.timezone.utc), 'time_taken': 951950.0, 'time_delta': '11 days, 0:25:50', 'additions': 1812, 'deletions': 697, 'state': 'closed'}, {'id': 1045423440, 'number': 15980, 'closed': datetime.datetime(2022, 9, 9, 17, 47, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 7, 39, 44, tzinfo=datetime.timezone.utc), 'time_taken': 554839.0, 'time_delta': '6 days, 10:07:19', 'additions': 354, 'deletions': 118, 'state': 'closed'}, {'id': 1045180768, 'number': 15976, 'closed': datetime.datetime(2022, 9, 3, 3, 39, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 18, 27, 56, tzinfo=datetime.timezone.utc), 'time_taken': 33116.0, 'time_delta': '9:11:56', 'additions': 17, 'deletions': 12, 'state': 'closed'}, {'id': 1038652810, 'number': 15958, 'closed': datetime.datetime(2022, 9, 10, 2, 57, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 27, 15, 11, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1165557.0, 'time_delta': '13 days, 11:45:57', 'additions': 3136, 'deletions': 628, 'state': 'closed'}, {'id': 1027758850, 'number': 15905, 'closed': datetime.datetime(2022, 9, 17, 7, 33, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 15, 12, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2737260.0, 'time_delta': '31 days, 16:21:00', 'additions': 5494, 'deletions': 2811, 'state': 'closed'}, {'id': 1024116268, 'number': 15870, 'closed': datetime.datetime(2022, 9, 6, 16, 20, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 17, 10, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2243398.0, 'time_delta': '25 days, 23:09:58', 'additions': 2432, 'deletions': 1471, 'state': 'closed'}, {'id': 1021765666, 'number': 15864, 'closed': datetime.datetime(2022, 8, 24, 7, 29, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 17, 2, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1261597.0, 'time_delta': '14 days, 14:26:37', 'additions': 3463, 'deletions': 2665, 'state': 'closed'}, {'id': 1014319744, 'number': 15827, 'closed': datetime.datetime(2022, 8, 28, 14, 51, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 20, 30, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2312430.0, 'time_delta': '26 days, 18:20:30', 'additions': 5430, 'deletions': 2740, 'state': 'closed'}, {'id': 1008164695, 'number': 15801, 'closed': datetime.datetime(2022, 8, 11, 18, 54, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 7, 41, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1422798.0, 'time_delta': '16 days, 11:13:18', 'additions': 4437, 'deletions': 2263, 'state': 'closed'}, {'id': 1003914277, 'number': 15771, 'closed': datetime.datetime(2022, 7, 21, 10, 4, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 9, 19, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2711.0, 'time_delta': '0:45:11', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 999559711, 'number': 15762, 'closed': datetime.datetime(2022, 8, 10, 10, 29, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 15, 37, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1968672.0, 'time_delta': '22 days, 18:51:12', 'additions': 1856, 'deletions': 955, 'state': 'closed'}, {'id': 996961295, 'number': 15716, 'closed': datetime.datetime(2022, 7, 21, 8, 23, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 17, 46, 16, tzinfo=datetime.timezone.utc), 'time_taken': 571010.0, 'time_delta': '6 days, 14:36:50', 'additions': 391, 'deletions': 161, 'state': 'closed'}, {'id': 996793440, 'number': 15715, 'closed': datetime.datetime(2022, 7, 17, 14, 13, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 15, 3, 47, tzinfo=datetime.timezone.utc), 'time_taken': 256177.0, 'time_delta': '2 days, 23:09:37', 'additions': 1135, 'deletions': 573, 'state': 'closed'}, {'id': 996423555, 'number': 15711, 'closed': datetime.datetime(2022, 7, 27, 9, 16, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 9, 16, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1123183.0, 'time_delta': '12 days, 23:59:43', 'additions': 594, 'deletions': 270, 'state': 'closed'}, {'id': 991599457, 'number': 15693, 'closed': datetime.datetime(2022, 8, 12, 9, 46, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 12, 19, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3014845.0, 'time_delta': '34 days, 21:27:25', 'additions': 3977, 'deletions': 2217, 'state': 'closed'}, {'id': 988916365, 'number': 15687, 'closed': datetime.datetime(2022, 7, 12, 9, 34, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 14, 54, 59, tzinfo=datetime.timezone.utc), 'time_taken': 499158.0, 'time_delta': '5 days, 18:39:18', 'additions': 1251, 'deletions': 414, 'state': 'closed'}, {'id': 984195264, 'number': 15663, 'closed': datetime.datetime(2022, 7, 13, 12, 40, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 19, 12, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1099644.0, 'time_delta': '12 days, 17:27:24', 'additions': 2756, 'deletions': 1704, 'state': 'closed'}, {'id': 979813965, 'number': 15640, 'closed': datetime.datetime(2022, 7, 7, 23, 56, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 9, 34, 32, tzinfo=datetime.timezone.utc), 'time_taken': 915692.0, 'time_delta': '10 days, 14:21:32', 'additions': 942, 'deletions': 438, 'state': 'closed'}, {'id': 976663373, 'number': 15618, 'closed': datetime.datetime(2022, 7, 3, 10, 38, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 6, 2, 28, tzinfo=datetime.timezone.utc), 'time_taken': 880589.0, 'time_delta': '10 days, 4:36:29', 'additions': 1567, 'deletions': 707, 'state': 'closed'}, {'id': 971536225, 'number': 15603, 'closed': datetime.datetime(2022, 6, 20, 4, 35, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 17, 51, 41, tzinfo=datetime.timezone.utc), 'time_taken': 38602.0, 'time_delta': '10:43:22', 'additions': 364, 'deletions': 143, 'state': 'closed'}, {'id': 971463303, 'number': 15601, 'closed': datetime.datetime(2022, 7, 2, 18, 27, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 11, 23, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1148617.0, 'time_delta': '13 days, 7:03:37', 'additions': 89, 'deletions': 11, 'state': 'closed'}, {'id': 971201443, 'number': 15596, 'closed': datetime.datetime(2022, 7, 3, 14, 29, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 18, 7, 25, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1321427.0, 'time_delta': '15 days, 7:03:47', 'additions': 1359, 'deletions': 647, 'state': 'closed'}, {'id': 966429386, 'number': 15580, 'closed': datetime.datetime(2022, 6, 24, 23, 58, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 4, 25, 9, tzinfo=datetime.timezone.utc), 'time_taken': 934408.0, 'time_delta': '10 days, 19:33:28', 'additions': 1064, 'deletions': 584, 'state': 'closed'}, {'id': 953819623, 'number': 15513, 'closed': datetime.datetime(2022, 6, 1, 14, 18, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 1, 12, 46, 25, tzinfo=datetime.timezone.utc), 'time_taken': 5507.0, 'time_delta': '1:31:47', 'additions': 20, 'deletions': 13, 'state': 'closed'}, {'id': 951064446, 'number': 15501, 'closed': datetime.datetime(2022, 6, 23, 14, 44, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 30, 14, 30, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2074463.0, 'time_delta': '24 days, 0:14:23', 'additions': 191, 'deletions': 78, 'state': 'closed'}, {'id': 941467382, 'number': 15483, 'closed': datetime.datetime(2022, 6, 15, 4, 57, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 19, 12, 17, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2306431.0, 'time_delta': '26 days, 16:40:31', 'additions': 807, 'deletions': 470, 'state': 'closed'}, {'id': 925432137, 'number': 15424, 'closed': datetime.datetime(2022, 5, 22, 20, 59, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 2, 10, 50, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1764518.0, 'time_delta': '20 days, 10:08:38', 'additions': 394, 'deletions': 245, 'state': 'closed'}, {'id': 919392560, 'number': 15399, 'closed': datetime.datetime(2022, 4, 26, 13, 15, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 13, 1, 5, tzinfo=datetime.timezone.utc), 'time_taken': 867.0, 'time_delta': '0:14:27', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 917193213, 'number': 15390, 'closed': datetime.datetime(2022, 5, 3, 15, 27, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 23, 12, 43, 21, tzinfo=datetime.timezone.utc), 'time_taken': 873870.0, 'time_delta': '10 days, 2:44:30', 'additions': 260, 'deletions': 129, 'state': 'closed'}, {'id': 915657464, 'number': 15373, 'closed': datetime.datetime(2022, 5, 16, 13, 19, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 18, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2142269.0, 'time_delta': '24 days, 19:04:29', 'additions': 241, 'deletions': 99, 'state': 'closed'}, {'id': 905195396, 'number': 15288, 'closed': datetime.datetime(2022, 4, 10, 11, 31, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 10, 11, 31, 15, tzinfo=datetime.timezone.utc), 'time_taken': 10.0, 'time_delta': '0:00:10', 'additions': 297, 'deletions': 55, 'state': 'closed'}, {'id': 899059139, 'number': 15266, 'closed': datetime.datetime(2022, 4, 5, 12, 44, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 13, 51, 57, tzinfo=datetime.timezone.utc), 'time_taken': 82362.0, 'time_delta': '22:52:42', 'additions': 167, 'deletions': 112, 'state': 'closed'}, {'id': 898805246, 'number': 15264, 'closed': datetime.datetime(2022, 4, 8, 18, 36, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 9, 56, 26, tzinfo=datetime.timezone.utc), 'time_taken': 376788.0, 'time_delta': '4 days, 8:39:48', 'additions': 16, 'deletions': 1, 'state': 'closed'}, {'id': 891691331, 'number': 15228, 'closed': datetime.datetime(2022, 4, 7, 15, 52, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 28, 11, 32, 57, tzinfo=datetime.timezone.utc), 'time_taken': 879600.0, 'time_delta': '10 days, 4:20:00', 'additions': 189, 'deletions': 85, 'state': 'closed'}, {'id': 878170396, 'number': 15119, 'closed': datetime.datetime(2022, 3, 25, 11, 25, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 12, 13, 22, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1116165.0, 'time_delta': '12 days, 22:02:45', 'additions': 92, 'deletions': 37, 'state': 'closed'}, {'id': 872431006, 'number': 15086, 'closed': datetime.datetime(2022, 6, 2, 8, 59, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 10, 34, 49, tzinfo=datetime.timezone.utc), 'time_taken': 7597485.0, 'time_delta': '87 days, 22:24:45', 'additions': 360, 'deletions': 0, 'state': 'closed'}, {'id': 870554085, 'number': 15068, 'closed': datetime.datetime(2022, 3, 10, 6, 20, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 3, 12, 46, 33, tzinfo=datetime.timezone.utc), 'time_taken': 581660.0, 'time_delta': '6 days, 17:34:20', 'additions': 9, 'deletions': 11, 'state': 'closed'}, {'id': 870477586, 'number': 15067, 'closed': datetime.datetime(2022, 3, 7, 9, 14, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 3, 11, 13, 15, tzinfo=datetime.timezone.utc), 'time_taken': 338473.0, 'time_delta': '3 days, 22:01:13', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 869500616, 'number': 15057, 'closed': datetime.datetime(2022, 3, 18, 16, 18, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 12, 41, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1395451.0, 'time_delta': '16 days, 3:37:31', 'additions': 595, 'deletions': 303, 'state': 'closed'}, {'id': 863454336, 'number': 15021, 'closed': datetime.datetime(2022, 3, 2, 6, 2, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 25, 13, 39, 52, tzinfo=datetime.timezone.utc), 'time_taken': 404545.0, 'time_delta': '4 days, 16:22:25', 'additions': 182, 'deletions': 1, 'state': 'closed'}, {'id': 862437801, 'number': 15008, 'closed': datetime.datetime(2022, 3, 8, 8, 37, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 24, 13, 24, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1019575.0, 'time_delta': '11 days, 19:12:55', 'additions': 85, 'deletions': 32, 'state': 'closed'}, {'id': 858831911, 'number': 14986, 'closed': datetime.datetime(2022, 2, 25, 12, 32, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 20, 14, 20, 8, tzinfo=datetime.timezone.utc), 'time_taken': 425566.0, 'time_delta': '4 days, 22:12:46', 'additions': 84, 'deletions': 56, 'state': 'closed'}, {'id': 856626744, 'number': 14961, 'closed': datetime.datetime(2022, 2, 21, 12, 49, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 18, 8, 19, 34, tzinfo=datetime.timezone.utc), 'time_taken': 275417.0, 'time_delta': '3 days, 4:30:17', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 855560838, 'number': 14958, 'closed': datetime.datetime(2022, 3, 23, 9, 18, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 17, 14, 47, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2917896.0, 'time_delta': '33 days, 18:31:36', 'additions': 498, 'deletions': 450, 'state': 'closed'}, {'id': 845242190, 'number': 14903, 'closed': datetime.datetime(2022, 2, 21, 0, 46, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 10, 13, 4, 3, tzinfo=datetime.timezone.utc), 'time_taken': 906140.0, 'time_delta': '10 days, 11:42:20', 'additions': 116, 'deletions': 19, 'state': 'closed'}, {'id': 841013301, 'number': 14868, 'closed': datetime.datetime(2022, 2, 9, 12, 41, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 6, 7, 22, 4, tzinfo=datetime.timezone.utc), 'time_taken': 278392.0, 'time_delta': '3 days, 5:19:52', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 837987643, 'number': 14836, 'closed': datetime.datetime(2022, 2, 7, 11, 56, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 2, 6, 21, 27, tzinfo=datetime.timezone.utc), 'time_taken': 452084.0, 'time_delta': '5 days, 5:34:44', 'additions': 14, 'deletions': 14, 'state': 'closed'}, {'id': 831313840, 'number': 14768, 'closed': datetime.datetime(2022, 1, 28, 18, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 10, 38, 43, tzinfo=datetime.timezone.utc), 'time_taken': 286277.0, 'time_delta': '3 days, 7:31:17', 'additions': 64, 'deletions': 11, 'state': 'closed'}, {'id': 827458262, 'number': 14721, 'closed': datetime.datetime(2022, 1, 27, 10, 45, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 20, 12, 0, 31, tzinfo=datetime.timezone.utc), 'time_taken': 600312.0, 'time_delta': '6 days, 22:45:12', 'additions': 52, 'deletions': 31, 'state': 'closed'}, {'id': 816276951, 'number': 14583, 'closed': datetime.datetime(2022, 1, 12, 22, 39, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 7, 10, 47, 51, tzinfo=datetime.timezone.utc), 'time_taken': 474721.0, 'time_delta': '5 days, 11:52:01', 'additions': 43, 'deletions': 14, 'state': 'closed'}, {'id': 811434018, 'number': 14512, 'closed': datetime.datetime(2022, 1, 19, 21, 54, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 29, 11, 48, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1850765.0, 'time_delta': '21 days, 10:06:05', 'additions': 409, 'deletions': 42, 'state': 'closed'}, {'id': 807534474, 'number': 14469, 'closed': datetime.datetime(2022, 1, 19, 18, 20, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 21, 13, 23, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2523429.0, 'time_delta': '29 days, 4:57:09', 'additions': 490, 'deletions': 191, 'state': 'closed'}, {'id': 801418027, 'number': 14420, 'closed': datetime.datetime(2021, 12, 18, 8, 30, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 13, 15, 58, 41, tzinfo=datetime.timezone.utc), 'time_taken': 405132.0, 'time_delta': '4 days, 16:32:12', 'additions': 38, 'deletions': 14, 'state': 'closed'}, {'id': 790079121, 'number': 14331, 'closed': datetime.datetime(2021, 12, 4, 13, 26, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 28, 11, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 525730.0, 'time_delta': '6 days, 2:02:10', 'additions': 17, 'deletions': 1, 'state': 'closed'}, {'id': 785340974, 'number': 14292, 'closed': datetime.datetime(2021, 11, 26, 16, 28, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 21, 7, 40, 36, tzinfo=datetime.timezone.utc), 'time_taken': 463682.0, 'time_delta': '5 days, 8:48:02', 'additions': 36, 'deletions': 13, 'state': 'closed'}, {'id': 781940482, 'number': 14258, 'closed': datetime.datetime(2021, 12, 12, 7, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 16, 18, 9, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2208326.0, 'time_delta': '25 days, 13:25:26', 'additions': 405, 'deletions': 146, 'state': 'closed'}, {'id': 774459710, 'number': 14191, 'closed': datetime.datetime(2021, 11, 8, 12, 32, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 5, 17, 49, 4, tzinfo=datetime.timezone.utc), 'time_taken': 240215.0, 'time_delta': '2 days, 18:43:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 769228855, 'number': 14149, 'closed': datetime.datetime(2021, 11, 7, 7, 39, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 13, 11, 41, tzinfo=datetime.timezone.utc), 'time_taken': 757654.0, 'time_delta': '8 days, 18:27:34', 'additions': 35, 'deletions': 74, 'state': 'closed'}, {'id': 765662803, 'number': 14134, 'closed': datetime.datetime(2021, 11, 8, 16, 12, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 25, 16, 54, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1207090.0, 'time_delta': '13 days, 23:18:10', 'additions': 34, 'deletions': 20, 'state': 'closed'}, {'id': 755256754, 'number': 14043, 'closed': datetime.datetime(2021, 10, 21, 16, 51, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 11, 12, 58, 6, tzinfo=datetime.timezone.utc), 'time_taken': 878016.0, 'time_delta': '10 days, 3:53:36', 'additions': 65, 'deletions': 23, 'state': 'closed'}, {'id': 742735433, 'number': 13924, 'closed': datetime.datetime(2021, 10, 7, 5, 52, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 18, 9, 19, tzinfo=datetime.timezone.utc), 'time_taken': 992578.0, 'time_delta': '11 days, 11:42:58', 'additions': 70, 'deletions': 41, 'state': 'closed'}, {'id': 737739748, 'number': 13888, 'closed': datetime.datetime(2021, 9, 22, 18, 29, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 20, 16, 30, tzinfo=datetime.timezone.utc), 'time_taken': 179978.0, 'time_delta': '2 days, 1:59:38', 'additions': 69, 'deletions': 44, 'state': 'closed'}]"
