pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1383311466,Ghidra: Implement Global Feature Extraction,"<!--
Thank you for contributing to capa! <3

Please read capa's CONTRIBUTING guide if you haven't done so already.
It contains helpful information about how to contribute to capa. Check https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md

Please describe the changes in this pull request (PR). Include your motivation and context to help us review.

Please mention the issue your PR addresses (if any):
closes #issue_number
-->


### Checklist

<!-- CHANGELOG.md has a `master (unreleased)` section. Please add bug fixes, new features, breaking changes and anything else you think is worthwhile mentioning in the release notes to this file. -->
- [X] No CHANGELOG update needed
<!-- Tests prove that your fix/work as expected and ensure it doesn't break on the feature. -->
- [ ] No new tests needed
<!-- Please help us keeping capa documentation up-to-date -->
- [X] No documentation update needed

Fixes #1507 

I've removed the redundancies and confirmed that the extractor is working as expected :)
",True,1526,https://api.github.com/repos/mandiant/capa/pulls/1526,https://github.com/mandiant/capa/pull/1526,closed,2,1,2,8,0,2,2,1,"[{'name': 'ghidra'}, {'name': 'gsoc'}]",2023-06-07 20:16:22+00:00,2023-07-06 08:27:37+00:00,2463075.0,"28 days, 12:11:15","[{'comment_id': 1228362175, 'comment_body': 'Does this pass black formatting?', 'comment_created': datetime.datetime(2023, 6, 13, 15, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1238069108, 'comment_body': ""I've gone ahead and linted the entire repo to the capa config's specifications. Please see 536677a505a6697ba3ca01998fe39cc78fe3104b and additional commits."", 'comment_created': datetime.datetime(2023, 6, 22, 6, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}]","[{'commit_sha': '82cdc26be79d8472a7777d0b99f844b34467efc7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59a64ffe3db7dc76158e8f8abcfe1e5e0444391e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009f73f0766c6632c0f4021ea3d6d4e74fdd463b', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd763dc20568fe30f0cdd7abe66cb7b662051ecfd', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1ff4422f6eee9f83bc3e41450d7bf0878486f91', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536677a505a6697ba3ca01998fe39cc78fe3104b', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eabb7df408a3d64b51c2bb9cb8fd9bb094de5ead', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3928392c6a9feb3cac3923ddc0ce17b33dba48', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}]",Colton Gabertan,66766340,,User,,12,,21,20
1398900468,Add Ghidra File Feature Extraction,"<!--
Thank you for contributing to capa! <3

Please read capa's CONTRIBUTING guide if you haven't done so already.
It contains helpful information about how to contribute to capa. Check https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md

Please describe the changes in this pull request (PR). Include your motivation and context to help us review.

Please mention the issue your PR addresses (if any):
closes #issue_number
-->


### Checklist

<!-- CHANGELOG.md has a `master (unreleased)` section. Please add bug fixes, new features, breaking changes and anything else you think is worthwhile mentioning in the release notes to this file. -->
- [X] No CHANGELOG update needed
<!-- Tests prove that your fix/work as expected and ensure it doesn't break on the feature. -->
- [ ] No new tests needed
<!-- Please help us keeping capa documentation up-to-date -->
- [ ] No documentation update needed

Fixes #1508 : Ghidra File Feature Extraction
",True,1564,https://api.github.com/repos/mandiant/capa/pulls/1564,https://github.com/mandiant/capa/pull/1564,closed,292,4,5,26,0,45,2,1,"[{'name': 'ghidra'}, {'name': 'gsoc'}]",2023-06-19 22:11:58+00:00,2023-07-07 00:05:08+00:00,1475590.0,"17 days, 1:53:10","[{'comment_id': 1234802705, 'comment_body': '(how) does this work (yet)?', 'comment_created': datetime.datetime(2023, 6, 20, 6, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1234805261, 'comment_body': 'use `generate_symbols` helper to get all variations', 'comment_created': datetime.datetime(2023, 6, 20, 6, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1234807815, 'comment_body': 'does this only get names of identified (library) functions?', 'comment_created': datetime.datetime(2023, 6, 20, 6, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1234808845, 'comment_body': 'could be good to compare these against vivisect/IDA extracted features for potential differences', 'comment_created': datetime.datetime(2023, 6, 20, 6, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1235303429, 'comment_body': 'What about exceptions thrown by `getBytes`? https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html#getBytes(ghidra.program.model.address.Address,int)', 'comment_created': datetime.datetime(2023, 6, 20, 13, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235312537, 'comment_body': 'Can you explain the use of `SourceType.IMPORTED` to identify file exports?', 'comment_created': datetime.datetime(2023, 6, 20, 13, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235315875, 'comment_body': 'Suggest using `for` loop e.g. `for f in currentProgram.getFunctionManager().getFunctions(True)`', 'comment_created': datetime.datetime(2023, 6, 20, 13, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235451587, 'comment_body': 'Suggest using classic `for` loop here.', 'comment_created': datetime.datetime(2023, 6, 20, 15, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235453755, 'comment_body': 'Can we use `f.getEntryPoint().getOffset()`?', 'comment_created': datetime.datetime(2023, 6, 20, 15, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235466700, 'comment_body': ""We have had issues in the past with relying on a tool's built-in string identification. e.g. for IDA we opted to manually identify strings for each loaded section: https://github.com/mandiant/capa/blob/2ce4f8769d1f333141be3689a56bd75fa1a66948/capa/features/extractors/ida/file.py#L144-L152\r\n\r\nI suggest we do the same here."", 'comment_created': datetime.datetime(2023, 6, 20, 15, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235467135, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2023, 6, 20, 15, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235469464, 'comment_body': 'Same concern', 'comment_created': datetime.datetime(2023, 6, 20, 15, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235474470, 'comment_body': 'We could possibly skip some indirection here by using `currentProgram.getSymbolTable().getExternalEntryPointIterator()` and `currentProgram.getSymbolTable().getPrimarySymbol(_addr_)`\r\n\r\nhttps://ghidra.re/ghidra_docs/api/ghidra/program/model/symbol/SymbolTable.html#getExternalEntryPointIterator()\r\nhttps://ghidra.re/ghidra_docs/api/ghidra/program/model/symbol/SymbolTable.html#getPrimarySymbol(ghidra.program.model.address.Address)', 'comment_created': datetime.datetime(2023, 6, 20, 15, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235475163, 'comment_body': 'https://ghidra.re/ghidra_docs/api/ghidra/program/model/address/Address.html#getOffset()', 'comment_created': datetime.datetime(2023, 6, 20, 15, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1235479557, 'comment_body': 'Do we have a good idea of the variations returned by `getExecutableFormat`?', 'comment_created': datetime.datetime(2023, 6, 20, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1237798549, 'comment_body': 'I found this a bit weird as well; however, I got this from observing samples with exports from the symbol table in the Ghidra gui. I found that what we traditionally think of as imported functions, such as from the Windows API, have the following configurations:\r\n\r\n```\r\nType: External Function\r\nNamespace: <MODULE_NAME>\r\nSource: Imported\r\n```\r\n\r\nWhile exported functions have the following:\r\n\r\n```\r\nType: Function\r\nNamespace: Global\r\nSource: Imported\r\n```\r\n\r\nSo, this function pulls the functions in the `Global` namespace and checks for the `IMPORTED` SourceType. See an example from Practical Malware Analysis Lab 03-02.dll_\r\n\r\n![image](https://github.com/mandiant/capa/assets/66766340/eb96355e-32c2-44a4-a314-d50375322c9c)\r\n![image](https://github.com/mandiant/capa/assets/66766340/0ee521a9-3be1-485b-8b31-f9846451d856)\r\n> Exported functions compared to normal functions\r\n\r\n![image](https://github.com/mandiant/capa/assets/66766340/714076cc-11b5-4639-ad37-fedcee82787e)\r\n> Imported functions compared to normal functions\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 21, 22, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1237799723, 'comment_body': ""Good call, thanks! I'll generate some data from the various backends and `diff` them to see where I can clean things up."", 'comment_created': datetime.datetime(2023, 6, 21, 22, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1238078664, 'comment_body': ""Please see d043647024ef739e4274fbc4b2979de370ae0f52. The Ghidra API has made it (somewhat) convenient to parse for all of the xor'd bytes in the file. But there are a couple of issues which I'll address here:\r\n\r\n For the statically xor’d bytes that we check against, I would have to re-encode them back into UTF-8 in order for the Ghidra api’s function (findBytes()) to parse the file. However the advantage with parsing using findBytes() is that it handles any invalid memory accesses and iterates over all of the segments that need to be parsed. Another challenge comes from a string handling issue with Java as there are special characters generated that it wants us to have to escape. As a temporary workaround, pending a more solid solution, I have the helper function throw an exception. See the picture below. As a note, this is the only variation from all of the xor’d bytes that needs to have the exception handled.\r\n\r\n![image](https://github.com/mandiant/capa/assets/66766340/74ae6a80-25e8-4296-ae72-372c3e18c9ea)\r\n> Java would like us to escape the '[' character ('\\\\[')\r\n\r\nBytes that are not UTF-8 encodable are ignored by the `decode()` function and the string still gets passed to `findBytes()`."", 'comment_created': datetime.datetime(2023, 6, 22, 6, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1238161143, 'comment_body': ""Thank you for catching that. I went ahead and tested for the exception and found that Jep likes to throw a RuntimeError on the Python3 side, so I'll be handling that in the upcoming commits.\r\n\r\n![image](https://github.com/mandiant/capa/assets/66766340/19e78c85-e29d-4742-be79-0211f61e965d)\r\n"", 'comment_created': datetime.datetime(2023, 6, 22, 8, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1238195980, 'comment_body': 'Please see 9849a174df27064392736052a2f3cf0be3cca891', 'comment_created': datetime.datetime(2023, 6, 22, 8, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1238196328, 'comment_body': 'Please see 9849a174df27064392736052a2f3cf0be3cca891', 'comment_created': datetime.datetime(2023, 6, 22, 8, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1239260999, 'comment_body': 'Implemented in c1441035f1ad4ae209d65649a4f77a7ea0fb821e', 'comment_created': datetime.datetime(2023, 6, 23, 2, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1239295714, 'comment_body': ""In fd6b87750cc80f0ed4d73da7a1fee5f877ea1618 I've updated the code to pull all of the external symbols and then filter it further to only the function symbols i.e. the statically-linked library functions. For the samples I've tested on, it seems to pull the import name or ordinal. Are there any samples in the test-files that might allow me to test further?"", 'comment_created': datetime.datetime(2023, 6, 23, 3, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1240066414, 'comment_body': 'Totally understand the problem you\'re having here. We actually had a similar issue with IDA that we resolved using a wrapper that converts the byte sequence to a format suitable for the IDA\'s `find_binary` API: https://github.com/mandiant/capa/blob/33a3170bc4160dbfe925ef053e61823ece245996/capa/features/extractors/ida/helpers.py#L20-L35\r\n\r\nWe can do something similar for Ghidra e.g. we want to search for the byte sequence `0x7f`, `0x45` we can call Ghidra\'s `findBytes` as follows:\r\n\r\n```python\r\n>>> hex(findBytes(currentProgram.getMinAddress(), ""\\\\x7f\\\\x45"").getOffset())\r\n\'0x100000\'\r\n```\r\n\r\nand can write a wrapper that converts `0x7f`, `0x45` into the string `\\\\x7f\\\\x45` and pass that to Ghidra\'s `findBytes` API. The key here is the `\\\\`. Thoughts?', 'comment_created': datetime.datetime(2023, 6, 23, 17, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240075870, 'comment_body': 'The `\\\\` eliminates the error you described above:\r\n\r\n```python\r\n>>> findBytes(currentProgram.getMinAddress(), ""\\\\x4c\\\\x5b"")\r\n>>> \r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 17, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240080777, 'comment_body': 'You manually verify the following tests pass: https://github.com/mandiant/capa/blob/33a3170bc4160dbfe925ef053e61823ece245996/tests/fixtures.py#L765-L803', 'comment_created': datetime.datetime(2023, 6, 23, 17, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240096774, 'comment_body': 'Gotcha\' - based on the Ghidra docs an ""imported"" source means:\r\n```\r\nImported - This filter includes all symbols named by some imported information.\r\n```\r\nBased on this loose description I\'m a little weary of relying on the correspondence between `Global` and `Imported` to identify exports, and only exports. Have you considered something like `currentProgram.getSymbolTable().getExternalEntryPointIterator()` (https://ghidra.re/ghidra_docs/api/ghidra/program/model/symbol/SymbolTable.html#getExternalEntryPointIterator)?\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 23, 17, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1245983310, 'comment_body': 'This implementation worked much better! Please see: f36f48bdba2eeb73a95423b62c22053cee45bc98', 'comment_created': datetime.datetime(2023, 6, 29, 1, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247309510, 'comment_body': '![image](https://github.com/mandiant/capa/assets/66766340/49b5e7ea-7749-4367-a441-60cddde17382)\r\n\r\nTest can currently identify the function name; however, for this specific sample, I found that the viv backend fails to extract it while Ghidra processes this symbol as an export.\r\n\r\nref: 12286312b457b34ca8773a16c199a324a205284f', 'comment_created': datetime.datetime(2023, 6, 30, 1, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247309974, 'comment_body': 'However, both backends match up well on PE files, rather than ELFs.', 'comment_created': datetime.datetime(2023, 6, 30, 1, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247320768, 'comment_body': ""Here are the returned strings via PE, ELF, and Raw samples from our test files:\r\n```\r\n'Executable and Linking Format (ELF)'\r\n'Portable Executable (PE)'\r\n'Raw Binary'\r\n```"", 'comment_created': datetime.datetime(2023, 6, 30, 1, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1253803355, 'comment_body': 'I dug and I did not find a solution for mypy complaining about undefined names. Let’s be explicit about the names Ghidrathon has injected by adding the comment # type: ignore [name-defined] to each line that uses a name injected by Ghidrathon. This solution is unfortunately far more verbose but helps us avoid creating a new object just to make mypy happy.', 'comment_created': datetime.datetime(2023, 7, 6, 1, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1253805562, 'comment_body': 'Let’s make these lines into a single helper function that we can call elsewhere.', 'comment_created': datetime.datetime(2023, 7, 6, 1, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1253808085, 'comment_body': 'See earlier comment about creating a helper function that combines “getBytes” and the signed to unsigned conversion.\r\n\r\nAlso, can we grab all of the bytes from a block using a single call to “getBytes” e.g. “getBytes(block.getStart(), block.getEnd() - block.getStart())”?', 'comment_created': datetime.datetime(2023, 7, 6, 1, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254377319, 'comment_body': 'No longer needed?', 'comment_created': datetime.datetime(2023, 7, 6, 12, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254378367, 'comment_body': 'Do we need the “int” cast here?', 'comment_created': datetime.datetime(2023, 7, 6, 12, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254378555, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2023, 7, 6, 12, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254381503, 'comment_body': 'Can you explain the “.add(1)” portion of this?', 'comment_created': datetime.datetime(2023, 7, 6, 12, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254383510, 'comment_body': 'Should this line be included in the exception handler?', 'comment_created': datetime.datetime(2023, 7, 6, 12, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254383760, 'comment_body': 'See above. ', 'comment_created': datetime.datetime(2023, 7, 6, 12, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254384573, 'comment_body': 'Rouge “print” statement?', 'comment_created': datetime.datetime(2023, 7, 6, 12, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1254610991, 'comment_body': ""There will always be a match in regular PE files, since it begins its parsing from the beginning of the file bytes (b'MZ'). So, we just start from the second byte to avoid a hit on the parent PE itself when using this helper to extract embedded PEs. "", 'comment_created': datetime.datetime(2023, 7, 6, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1254613680, 'comment_body': 'Thank you for catching that. ', 'comment_created': datetime.datetime(2023, 7, 6, 15, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1254618476, 'comment_body': 'Temp test for CI output. Will cleanup once official test script is pushed.', 'comment_created': datetime.datetime(2023, 7, 6, 15, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1254843676, 'comment_body': 'Makes sense! Let’s add a comment to explain so we don’t confused when looking back on this code in the future.', 'comment_created': datetime.datetime(2023, 7, 6, 19, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}]","[{'commit_sha': '82cdc26be79d8472a7777d0b99f844b34467efc7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59a64ffe3db7dc76158e8f8abcfe1e5e0444391e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '947d719d4a5463e3e6dce1487fd1152a6d075a5c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd043647024ef739e4274fbc4b2979de370ae0f52', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebe1c952cc4b376913db46c642bf1f09d3caf43f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348741db5688646f84ab43718b2877d12425dd9a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c2bf7fdb8ee2abf8ea3c4182390900279c70229', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9849a174df27064392736052a2f3cf0be3cca891', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1441035f1ad4ae209d65649a4f77a7ea0fb821e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37ece1237bd5e0e2a9977672df2d1f6f11b711dc', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd6b87750cc80f0ed4d73da7a1fee5f877ea1618', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a1ed785bed24880139be8c901ef87c0c681acd', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36f48bdba2eeb73a95423b62c22053cee45bc98', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e770b27e0efc6d09bf08a8a5534736bb6dae4898', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afcbb0b958b528ab022a8478fe3cb6525be8760f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f18af76de0c871be8ca7b1c35a397f6c71bee6', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12286312b457b34ca8773a16c199a324a205284f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95a6651ca3811ec224887a37c5d36667cb06cfb7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55919ffcd4fdcd6486d5fbc1de73a226acfc8d8c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b821a10a0a96b00cb5d886ad23297e40d041aef8', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4006a86becf6877e69eb5fce4e865c4b6cdae81e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb80073561ec6dce6c26d1525750d123289dab0', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29fc94091a4279d72a30cadc9af38f63cb10a66c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90404ee647bc78bd7f0b83c77b2d58a88f0a070c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5645251607e0d1f0319304dcf8dfec34ef1cbd9', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2d2ebd46ebd3f608d344ebe4eb5006ec1b0c1b', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}]",Colton Gabertan,66766340,,User,,12,,21,20
1425839737,Ghidra: Function Feature Extraction,"<!--
Thank you for contributing to capa! <3

Please read capa's CONTRIBUTING guide if you haven't done so already.
It contains helpful information about how to contribute to capa. Check https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md

Please describe the changes in this pull request (PR). Include your motivation and context to help us review.

Please mention the issue your PR addresses (if any):
closes #issue_number
-->


### Checklist

<!-- CHANGELOG.md has a `master (unreleased)` section. Please add bug fixes, new features, breaking changes and anything else you think is worthwhile mentioning in the release notes to this file. -->
- [X] No CHANGELOG update needed
<!-- Tests prove that your fix/work as expected and ensure it doesn't break on the feature. -->
- [ ] No new tests needed
<!-- Please help us keeping capa documentation up-to-date -->
- [ ] No documentation update needed

Implements #1509 Ghidra Function Feature Extraction
",True,1597,https://api.github.com/repos/mandiant/capa/pulls/1597,https://github.com/mandiant/capa/pull/1597,closed,104,13,4,7,2,10,2,1,"[{'name': 'ghidra'}, {'name': 'gsoc'}]",2023-07-08 06:48:42+00:00,2023-07-12 14:58:35+00:00,374993.0,"4 days, 8:09:53","[{'comment_id': 1258614565, 'comment_body': '`monitor` is injected by Ghidrathon and should already be available like `currentProgram` and friends', 'comment_created': datetime.datetime(2023, 7, 10, 17, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1258651114, 'comment_body': 'do we know if `isCall` also covers `isComputed`, `isConditional`, `isUnconditional` and `isJump`?', 'comment_created': datetime.datetime(2023, 7, 10, 17, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1258653043, 'comment_body': ""What's the error? Let's be sure to document this w/ a GitHub issue either in capa (if capa related) or Ghidrathon (if Ghidrathon related)."", 'comment_created': datetime.datetime(2023, 7, 10, 17, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1258656862, 'comment_body': ""Can you explain what you mean by overlap here? Ghidrathon includes [an example of using Ghidra's `SimpleBlockIterator` to iterate function basic blocks](https://github.com/mandiant/Ghidrathon/blob/b7bedaf4c8fe854e0144991cb4eacaae2b37eade/ghidra_scripts/ghidrathon_example.py#L16-L31). Can we use that here?"", 'comment_created': datetime.datetime(2023, 7, 10, 17, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1258666016, 'comment_body': '```suggestion\r\ndef fix_byte(b: int) -> bytes:\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 18, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1258674426, 'comment_body': 'Nice! I did not know about `getFunctionsNoStubs`', 'comment_created': datetime.datetime(2023, 7, 10, 18, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1258921912, 'comment_body': 'I\'m thinking this may be on the Ghidrathon side. For the most part, when the Ghidra API functions return an iterator, we can access it on the python side with the regular for loops; however, for this particular function `getDestinations()` it throws a type error when we try to iterate with a classic for loop. \r\n\r\nThe only way I\'ve gotten it to work is with the `while dests.hasNest()` loop.\r\n\r\n<img width=""658"" alt=""image"" src=""https://github.com/mandiant/capa/assets/66766340/154e15e8-e052-4824-ade3-f396bed9ba57"">\r\n\r\nNot exactly sure why this iterator in particular is treated differently than the others we\'ve used so far.', 'comment_created': datetime.datetime(2023, 7, 10, 21, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1258935137, 'comment_body': 'Locally tested, `isCall` covers all of the `*CALL*` flowtypes. Output also matches to the viv backend.', 'comment_created': datetime.datetime(2023, 7, 10, 21, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1258951966, 'comment_body': 'The ""overlap"" meant that the model would return overlapping address sets, which may have made iterating through destination addresses a bit different than having to go and check each one for each block. ', 'comment_created': datetime.datetime(2023, 7, 10, 21, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1259888128, 'comment_body': '@colton-gabertan please open a new Ghidrathon issue with what you detailed here.', 'comment_created': datetime.datetime(2023, 7, 11, 15, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}]","[{'commit_sha': 'ef712ace7cdebac72cd3f5664b0a8519ce5a51d0', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f66f18b83b941f4ebcedd8aa0edad330dffc02dc', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29cede9cf8508650c5d5124867d57f0a911e4cbc', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4a7ecf595e960630a9f03d62e782b421441cb5', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ef66deca3180ccef8e47bfa27e1cc2ef5ee606', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '123193d6a08c29313fc22cdc3f8d972158ba5b92', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44aadf6dd83c1ad50a37bd4f3e5a3faa10588c3a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}]",Colton Gabertan,66766340,,User,,12,,21,20
1432702243,Ghidra: Basic Block Feature Extraction,"<!--
Thank you for contributing to capa! <3

Please read capa's CONTRIBUTING guide if you haven't done so already.
It contains helpful information about how to contribute to capa. Check https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md

Please describe the changes in this pull request (PR). Include your motivation and context to help us review.

Please mention the issue your PR addresses (if any):
closes #issue_number
-->


### Checklist

<!-- CHANGELOG.md has a `master (unreleased)` section. Please add bug fixes, new features, breaking changes and anything else you think is worthwhile mentioning in the release notes to this file. -->
- [X] No CHANGELOG update needed
<!-- Tests prove that your fix/work as expected and ensure it doesn't break on the feature. -->
- [ ] No new tests needed
<!-- Please help us keeping capa documentation up-to-date -->
- [ ] No documentation update needed

Implements #1510 - Ghidra: Basic Block Feature Extraction",True,1637,https://api.github.com/repos/mandiant/capa/pulls/1637,https://github.com/mandiant/capa/pull/1637,closed,147,0,1,20,0,16,2,1,"[{'name': 'ghidra'}, {'name': 'gsoc'}]",2023-07-13 09:09:00+00:00,2023-07-17 15:00:04+00:00,366664.0,"4 days, 5:51:04","[{'comment_id': 1263959634, 'comment_body': 'Should these functions both divide by `8`? Also, should we be using floor division (`//`) for consistent typing? Floor division should allow us to remove the extra `int` cast.', 'comment_created': datetime.datetime(2023, 7, 14, 17, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1263960843, 'comment_body': 'Since we are dealing with printable characters, should we be using [`getUnsignedValue`](https://ghidra.re/ghidra_docs/api/ghidra/program/model/scalar/Scalar.html#getUnsignedValue()) here instead?', 'comment_created': datetime.datetime(2023, 7, 14, 17, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264056445, 'comment_body': '```suggestion\r\n    if insn.getMnemonicString().startswith(""MOV""):\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 19, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264056987, 'comment_body': 'Covering other `mov` instructions e.g. `movs`.', 'comment_created': datetime.datetime(2023, 7, 14, 19, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264062039, 'comment_body': 'Can we sub `getScalar(1)` for `getOpObjects(1)[0]`?', 'comment_created': datetime.datetime(2023, 7, 14, 19, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264062755, 'comment_body': '```suggestion\r\n    last_insn = listing.getInstructions(bb, True)[-1]  # all last insns are TERMINATOR\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 19, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264065119, 'comment_body': 'Can we sub [`getAddress(0)`](https://ghidra.re/ghidra_docs/api/ghidra/program/database/code/InstructionDB.html#getAddress(int)) for `getOpObjects(0)[0]`?', 'comment_created': datetime.datetime(2023, 7, 14, 19, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264066869, 'comment_body': ""Also, we can compare `ghidra.program.model.address.GenericAddress`'s directly without needing to convert to an offset first via `getOffset()`."", 'comment_created': datetime.datetime(2023, 7, 14, 19, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264068640, 'comment_body': 'Nice!', 'comment_created': datetime.datetime(2023, 7, 14, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1264254984, 'comment_body': 'Looks like this line threw the weird TypeError again. Will likely link this over into the Ghidrathon issue as well.\r\n\r\n![image](https://github.com/mandiant/capa/assets/66766340/7ad3bde9-c2c3-4014-8033-a037c6e3a298)\r\n', 'comment_created': datetime.datetime(2023, 7, 15, 0, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1264641795, 'comment_body': ""Yes we can! I'll likely have to go back and update lines like this in other areas later on."", 'comment_created': datetime.datetime(2023, 7, 16, 8, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1264642090, 'comment_body': ""I didn't want it to ever return a NoneType, and the `&'s` handle the conversion to an unsigned int. I was thinking that the NoneTypes would cause crashes."", 'comment_created': datetime.datetime(2023, 7, 16, 8, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1264642757, 'comment_body': 'I found that `getCodeUnits` worked in a similar manner. I just got the Iterator in reverse order, then pulled the first instruction. This also eliminated the possibility of having NoneTypes returned as well.', 'comment_created': datetime.datetime(2023, 7, 16, 8, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1265214655, 'comment_body': 'EDIT: `getCodeUnits()` was too wide as it also included declared data, so I changed it to `getInstructions` and pulled the last one using the same iterator method for now.', 'comment_created': datetime.datetime(2023, 7, 17, 11, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1265486116, 'comment_body': ""That makes sense - I'm not seeing anywhere in Ghidra's documentation where `getUnsignedValue` may return `None`? Did you find this was the case during testing?"", 'comment_created': datetime.datetime(2023, 7, 17, 14, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1265497196, 'comment_body': 'Yes please open a new Ghidrathon issue so we can investigate this later.', 'comment_created': datetime.datetime(2023, 7, 17, 14, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}]","[{'commit_sha': 'ef712ace7cdebac72cd3f5664b0a8519ce5a51d0', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f66f18b83b941f4ebcedd8aa0edad330dffc02dc', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29cede9cf8508650c5d5124867d57f0a911e4cbc', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4a7ecf595e960630a9f03d62e782b421441cb5', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ef66deca3180ccef8e47bfa27e1cc2ef5ee606', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '123193d6a08c29313fc22cdc3f8d972158ba5b92', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8172f23988aba2be50923e11fe4cb44d23fd8587', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2413c3ae0bb2105a23ca37b1293b8cfabe837904', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44aadf6dd83c1ad50a37bd4f3e5a3faa10588c3a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b07c330e29cbd8268ed015b9378f8cb65acc752', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dea2734bb783d093dfb1020d453fb0ac97ee2fe7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58a30042aa5f830ccd70c553b08b5131f35150c7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b350ed04603cf67065b752d84faab393e8440174', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6f74517ab9153661fe509b2ab79d0c54d8ff531', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f9dfea14d4b5c84f47f68444a9c1c530c1f2d5', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '894f5fe79eb262fd114fde62290bb4f86fc716ff', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf9993145e8ce5d12c863cccf1c275f027893bdb', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e80210a1955f1f875ebd15dedf28579c21dab74c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c0713b22014d9f019f5d186bf551a4eab967dad', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c8c947945e32d56d95b43870a8008f4c16404a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}]",Colton Gabertan,66766340,,User,,12,,21,20
1450692339,Ghidra insn features,"<!--
Thank you for contributing to capa! <3

Please read capa's CONTRIBUTING guide if you haven't done so already.
It contains helpful information about how to contribute to capa. Check https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md

Please describe the changes in this pull request (PR). Include your motivation and context to help us review.

Please mention the issue your PR addresses (if any):
closes #issue_number
-->


### Checklist

<!-- CHANGELOG.md has a `master (unreleased)` section. Please add bug fixes, new features, breaking changes and anything else you think is worthwhile mentioning in the release notes to this file. -->
- [X] No CHANGELOG update needed
<!-- Tests prove that your fix/work as expected and ensure it doesn't break on the feature. -->
- [ ] No new tests needed
<!-- Please help us keeping capa documentation up-to-date -->
- [ ] No documentation update needed

# Ghidra: Instruction Feature Extractor
---

Implements #1511 : Instruction Feature Extraction",True,1670,https://api.github.com/repos/mandiant/capa/pulls/1670,https://github.com/mandiant/capa/pull/1670,closed,655,1,2,18,1,36,2,0,"[{'name': 'ghidra'}, {'name': 'gsoc'}]",2023-07-26 17:52:13+00:00,2023-08-08 17:45:15+00:00,1122782.0,"12 days, 23:53:02","[{'comment_id': 1275459336, 'comment_body': '```suggestion\r\n    if insn_str not in (""JMP"", ""CALL""):\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 20, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275485686, 'comment_body': 'I think we can be more explicit here, as I don\'t think this code is limited to the cases we specifically want to identify which are cases where the stack pointer is modified e.g. `add esp, 0xc`, `sub esp, 0x10`, etc.\r\n\r\nWhat about something like this:\r\n```python\r\n[...]\r\nif ""SP"" in insn.getRegister(0).getName() and insn.getOperandRefType(0).isWrite():\r\n[...]\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 21, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275491257, 'comment_body': '```suggestion\r\n    for ref in insn.getReferencesFrom():\r\n        if ref.isStackReference():\r\n            return True\r\n```\r\n\r\nThis is slightly more generic than your solution above', 'comment_created': datetime.datetime(2023, 7, 26, 21, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275502181, 'comment_body': 'Nice find!', 'comment_created': datetime.datetime(2023, 7, 26, 21, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275512828, 'comment_body': 'What about instructions like `MOV [EBP + EDX*0x4 + -0x20],ESI`? We do not want the scale `0x4` to be included as an offset, but the current implementation does.', 'comment_created': datetime.datetime(2023, 7, 26, 21, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275514892, 'comment_body': 'Should this check be completed before the call to `get_bytes`?', 'comment_created': datetime.datetime(2023, 7, 26, 21, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275523182, 'comment_body': '```suggestion\r\n    if insn.getMnemonicString().startswith((""CALL"", ""JMP"")):\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 22, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275523478, 'comment_body': 'We do not want to include `JMP`s to functions when extracting `bytes`.', 'comment_created': datetime.datetime(2023, 7, 26, 22, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275531432, 'comment_body': '```suggestion\r\n        if OperandType.isScalarAsAddress(insn.getOperandType(i)):\r\n```\r\nCan we use ^ ?', 'comment_created': datetime.datetime(2023, 7, 26, 22, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275535955, 'comment_body': 'Should we also check `ghidra_data.isPointer()`?', 'comment_created': datetime.datetime(2023, 7, 26, 22, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275539397, 'comment_body': '```suggestion\r\n    if insn_str.startswith((""PUSH"", ""MOV"")):\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 22, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275541736, 'comment_body': '```suggestion\r\n    if not insn.getMnemonicString().startswith((""CALL"", ""JMP"")):\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 22, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275543442, 'comment_body': ""do we need these checks since we're limiting to `CALL` and `JMP` instructions above?"", 'comment_created': datetime.datetime(2023, 7, 26, 22, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275544948, 'comment_body': '```suggestion\r\n    if getMemoryBlock(insn.getAddress()) != getMemoryBlock(insn.getAddress(0)):\r\n```\r\n\r\nThis assumes the checks completed earlier (see comment) are not needed. Regardless, `MemoryBlocks`s can be directly compared without the need for additional redirection.', 'comment_created': datetime.datetime(2023, 7, 26, 22, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275546264, 'comment_body': ""I don't think this ignores API calls (see https://github.com/mandiant/capa/blob/dd53349aea7f0b30e85528a28ad33a843672ef5d/capa/features/extractors/ida/insn.py#L443-L458)."", 'comment_created': datetime.datetime(2023, 7, 26, 22, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275547029, 'comment_body': ""do we need these checks since we're limiting to `CALL` above?"", 'comment_created': datetime.datetime(2023, 7, 26, 22, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275549660, 'comment_body': 'This should align with the `extract_features`  function of our other extractors (see https://github.com/mandiant/capa/blob/dd53349aea7f0b30e85528a28ad33a843672ef5d/capa/features/extractors/ida/insn.py#L488-L492).', 'comment_created': datetime.datetime(2023, 7, 26, 22, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275552408, 'comment_body': 'You should already have access to the function (and basic block) containing this instruction. See comment below about `extract_features` definition.', 'comment_created': datetime.datetime(2023, 7, 26, 22, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275558746, 'comment_body': '```suggestion\r\n    if ""XOR"" not in insn.getMnemonicString():\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 22, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275558848, 'comment_body': 'Handle `pxor` instruction.', 'comment_created': datetime.datetime(2023, 7, 26, 22, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1275559605, 'comment_body': ""re: your comment in chat  - can we take the Vivisect extractor's approach (see https://github.com/mandiant/capa/blob/ecc45edd66740d36c58ecff16dd1d26124754ec9/capa/features/extractors/viv/insn.py#L345-L369)"", 'comment_created': datetime.datetime(2023, 7, 26, 22, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1277960909, 'comment_body': 'This guards against pulling NoneTypes as the operands can render as other things such as OperandType.REGISTER and so on. ', 'comment_created': datetime.datetime(2023, 7, 28, 18, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1278084164, 'comment_body': ""Apologies, those were old comments to self. The current implementation follows vivisect & binja's. Essentially, it excludes XOR's that are performed using the stack & base pointer registers as well as stack-referencing XOR's that are located within the deltas of the first and last blocks of each function. "", 'comment_created': datetime.datetime(2023, 7, 28, 21, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1278110137, 'comment_body': ""Good call on the pre-check, thank you. I've gone ahead and moved it in the next commit. Also, the `getAddress(i)` line is what extracts a pointer if any. Otherwise, the function bails."", 'comment_created': datetime.datetime(2023, 7, 28, 21, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1278164421, 'comment_body': '@colton-gabertan that\'s true but we want to avoid pointers to external functions when extracting bytes e.g. run the following code snippet on `mimikatz`:\r\n```python\r\nfor insn in currentProgram.getListing().getInstructions(True):\r\n\tfor i in range(insn.getNumOperands()):\r\n\t\tif insn.getAddress(i):\r\n\t\t\tdata = getDataAt(insn.getAddress(i))\r\n\t\t\tif data and data.isPointer():\r\n\t\t\t\tprint(f""{insn.getAddress()} : {insn}"")\r\n```\r\nYou\'ll see many of these addresses are in fact pointers to external functions versus data we\'d want to match using capa\'s `byte` feature.', 'comment_created': datetime.datetime(2023, 7, 28, 23, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1278164922, 'comment_body': 'If you agree with my findings above then we should emit `ghidra_data.isPointer()`.', 'comment_created': datetime.datetime(2023, 7, 28, 23, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1278165502, 'comment_body': 'Makes sense! Maybe we can clean this up using the following:\r\n```python\r\nif ref_type not in (code_ref, data_ref):\r\n    return\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 23, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1279598533, 'comment_body': 'Yes we can, thank you for pointing out that function ', 'comment_created': datetime.datetime(2023, 7, 31, 16, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1282481393, 'comment_body': ""I found that `.isStackReference()` actually wouldn't return anything on non-branching instructions, I've implemented an additional helper for specifically the xor checking."", 'comment_created': datetime.datetime(2023, 8, 2, 22, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1282484126, 'comment_body': ""This issue actually sent me down a big research rabbit hole into Ghidra and how it dereferences addresses. I found that this snippet:\r\n\r\n```python3\r\nfor ref in insn.getReferencesFrom():\r\n     reference = ref.getToAddress()\r\n```\r\n\r\nSeems like it would handle all cases. But, it would miss on a lot of external functions, especially external library or statically-linked ones, so in a few functions, I've implemented some custom dereference handling in order to avoid things like returning fake addresses (like 0x10) as well as catching those that are missed by the api."", 'comment_created': datetime.datetime(2023, 8, 2, 22, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1282485223, 'comment_body': ""As per the comment above, I've now added some dereferencing logic that checks against all of the api info. Ghidra stores these in three ways. \r\n\r\n1. mapped to fake addresses that represent unloaded memory (0x1, 0x2,...)\r\n2. actual addresses as entrypoints\r\n3. weird external addresses \r\n\r\nI cache these as three dicts during runtime and pull the appropriate real addresses where needed, but in the case of this function, it bails out if found."", 'comment_created': datetime.datetime(2023, 8, 2, 22, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1282485770, 'comment_body': 'See comments above about dereferencing. I believed only those two OperandTypes needed to be handled; however, there was a lot more that needed to go into it...', 'comment_created': datetime.datetime(2023, 8, 2, 22, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1283440737, 'comment_body': 'Remove?', 'comment_created': datetime.datetime(2023, 8, 3, 16, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1283454988, 'comment_body': ""do you have an example of this? if so, let's add a comment pointing to the example for future reference."", 'comment_created': datetime.datetime(2023, 8, 3, 16, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1283455096, 'comment_body': ""do you have an example of this? if so, let's add a comment pointing to the example for future reference."", 'comment_created': datetime.datetime(2023, 8, 3, 16, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1283455206, 'comment_body': ""do you have an example of this? if so, let's add a comment pointing to the example for future reference."", 'comment_created': datetime.datetime(2023, 8, 3, 16, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}]","[{'commit_sha': '1235a796a5ab9ec420463a00fdfe703b7da60974', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26cfd4797666da082389fbb77b9b0a95591e22f1', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b87b2106fc44c698f3c6b3d04271697adb01bf0', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc45edd66740d36c58ecff16dd1d26124754ec9', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5af05f1d10774a7a0173f55cf731e5346099e1f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be9bc765a53d17ad91333b14241b3c6464a9d694', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ed9aab7e1bc926e11216659db55a38e3118e42', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2f02aeb12d868f3fb274d986f9d99729f83c1f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a45993cf20d538e21fe2315ada741e93345c43', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37041cb2853745b633ff6c679f1bb57da5d41722', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb9c4503e6f57da14ab45f9e1380685babccf08', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948796f56549cbfe18688d1f3114712cfb4ce16e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270290f4e55704ae04690c0cbdcb9d9c80cb5f06', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e5220146b9a23bcc8ca0464051b73a4342edf30', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01862e5c0e6536ffc9e81edab05d168b00fe8339', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93b6d1bf8ecef8e3b3b72955c27942a4d1ef4817', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b68adc26414f70358eb96a47ac5ce0a5f8b627dd', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61dc45d091b95eecafdd24dbe8c7d6e1e04d866', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}]",Colton Gabertan,66766340,,User,,12,,21,20
1386869942,"Add Ghidra Backend CI configuration, fix CHANGELOG","<!--
Thank you for contributing to capa! <3

Please read capa's CONTRIBUTING guide if you haven't done so already.
It contains helpful information about how to contribute to capa. Check https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md

Please describe the changes in this pull request (PR). Include your motivation and context to help us review.

Please mention the issue your PR addresses (if any):
closes #issue_number
-->


### Checklist

<!-- CHANGELOG.md has a `master (unreleased)` section. Please add bug fixes, new features, breaking changes and anything else you think is worthwhile mentioning in the release notes to this file. -->
- [X] No CHANGELOG update needed
<!-- Tests prove that your fix/work as expected and ensure it doesn't break on the feature. -->
- [ ] No new tests needed
<!-- Please help us keeping capa documentation up-to-date -->
- [ ] No documentation update needed

Fixes #1505

The Ghidra backend CI configuration is now working and can execute the python test script.
",True,1529,https://api.github.com/repos/mandiant/capa/pulls/1529,https://github.com/mandiant/capa/pull/1529,closed,56,109,8,11,2,20,2,1,"[{'name': 'ghidra'}, {'name': 'gsoc'}]",2023-06-09 23:49:30+00:00,2023-07-06 00:48:45+00:00,2249955.0,"26 days, 0:59:15","[{'comment_id': 1228377720, 'comment_body': ""I'm concerned with maintaining all of the hard-coded `ghidra_10.3` values. What happens with a new release of Ghidra? Should we consider always testing against the latest Ghidra release?"", 'comment_created': datetime.datetime(2023, 6, 13, 16, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1228478154, 'comment_body': 'maybe we could use a matrix of version strings, like we do here: https://github.com/mandiant/capa/blob/43b2ee3c5281f3ec0f3834a34769e7e10af9ede3/.github/workflows/tests.yml#L69-L80\r\n\r\nand interpolate the zip/directory names like we do here: https://github.com/mandiant/capa/blob/43b2ee3c5281f3ec0f3834a34769e7e10af9ede3/.github/workflows/build.yml#L108\r\n\r\nthen its only one place to update when a new release comes up. maybe keeping around the last 3 or so releases is reasonable?', 'comment_created': datetime.datetime(2023, 6, 13, 17, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1228483963, 'comment_body': 'rules and testfiles should already be checked out, due to here: https://github.com/mandiant/capa/blob/e1d4fd44f5cc1e0ccbbde8d92089ea1d5e9cf382/.github/workflows/tests.yml#L152\r\nright?', 'comment_created': datetime.datetime(2023, 6, 13, 17, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1228485029, 'comment_body': ""as above, the testfiles should be available from the submodule. there's nothing really wrong with this, though."", 'comment_created': datetime.datetime(2023, 6, 13, 17, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1238042629, 'comment_body': ""I've updated the config to include the rest of the versions for the dependencies in a matrix. I believe that this was a good move; however, we may have to pick-and-choose which dependencies specifically to test on multiple versions. I'm not quite sure how github's runner will handle the CI with so much to download and install.\r\n\r\nHowever, if it's no issue, we can quite easily test against multiple versions of all dependencies."", 'comment_created': datetime.datetime(2023, 6, 22, 6, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1238044385, 'comment_body': 'I was under the same impression and have updated the config to get rid of this line (See a7a386759395b9162deaa3d63816a0a5da452a4c). I think it may have been an issue as I was testing using a local runner from another open-source project (https://github.com/nektos/act) that may not have supported the action fully. ', 'comment_created': datetime.datetime(2023, 6, 22, 6, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1238098498, 'comment_body': ""ah ok that makes sense. i haven't used a local Action runner but it seems like a great idea. let me know if you'd recommend this one. "", 'comment_created': datetime.datetime(2023, 6, 22, 7, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1240018534, 'comment_body': 'Thoughts on using https://github.com/gradle/gradle-build-action to clean this up a bit?', 'comment_created': datetime.datetime(2023, 6, 23, 16, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240026059, 'comment_body': ""`...PUBLIC_20230510...` is going to change with each release as it's the date when the build was completed (e.g. https://github.com/NationalSecurityAgency/ghidra/releases/tag/Ghidra_10.3.1_build) so we'll need to include this in the hard-coded Ghidra version."", 'comment_created': datetime.datetime(2023, 6, 23, 16, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240027470, 'comment_body': 'Thoughts on using `pip install jep==${{ matrix.jep-version }}` to clean this up a bit?', 'comment_created': datetime.datetime(2023, 6, 23, 16, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240032147, 'comment_body': 'See earlier comment about using `gradle` action.', 'comment_created': datetime.datetime(2023, 6, 23, 16, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240034299, 'comment_body': ""see https://github.com/mandiant/capa/blob/33a3170bc4160dbfe925ef053e61823ece245996/.github/workflows/build.yml#L30-L58 for directly referencing test files from submodules. Let's not download the test file twice."", 'comment_created': datetime.datetime(2023, 6, 23, 16, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1240034978, 'comment_body': 'See earlier comment about referencing test files from submodule pulled during initial checkout.', 'comment_created': datetime.datetime(2023, 6, 23, 16, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1247440981, 'comment_body': ""Added gradle-build-action to the CI. Confirmed it's working on the GH runner!"", 'comment_created': datetime.datetime(2023, 6, 30, 5, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247441587, 'comment_body': ""I've included a `build-version` variable in the matrix. I also made sure that the url string remains the same across builds. Hopefully we can continue to pull different/multiple versions in this manner. Please let me know if any changes should be made."", 'comment_created': datetime.datetime(2023, 6, 30, 5, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247441831, 'comment_body': 'Included the pip install. CI is working as expected.', 'comment_created': datetime.datetime(2023, 6, 30, 5, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247443037, 'comment_body': 'Act worked very well on my end! My issues stemmed from not configuring my github authentication stuff for it to use. ', 'comment_created': datetime.datetime(2023, 6, 30, 5, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247443615, 'comment_body': 'Found that the `submodules: recursive` variable was not initializing them. Changed the parameter to `true` and everything checked out.', 'comment_created': datetime.datetime(2023, 6, 30, 5, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1247849507, 'comment_body': '@colton-gabertan what is the purpose of this?', 'comment_created': datetime.datetime(2023, 6, 30, 13, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1247849753, 'comment_body': '@colton-gabertan what is the purpose of this?', 'comment_created': datetime.datetime(2023, 6, 30, 13, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}]","[{'commit_sha': 'e1d4fd44f5cc1e0ccbbde8d92089ea1d5e9cf382', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a386759395b9162deaa3d63816a0a5da452a4c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '088cb4a575a7b87c150904d3911da1f71a4c6f3c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ffc68615af77d331bd70e8154d8f32a127e6acc', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e805c5cefc24917684702cdc63ffb6f97981df', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91a07e0c416377d2fe2dc91b7688f460c940651e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7869d07186d925562a7c65e558caafeb9946ced5', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dec6abff2ea9c27dd9251d7efbf3f0c6a0f6a49c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9058b6db0daa3863cea3d226784669b38b5c735', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '514e2345e423684a7979b7d2512ea5d49e2d89df', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b4f2f0bb199b186fdcbac1822c90fa5bcd81bd', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}]",Colton Gabertan,66766340,,User,,12,,21,20
1475239596,Ghidra: Unit Test,"<!--
Thank you for contributing to capa! <3

Please read capa's CONTRIBUTING guide if you haven't done so already.
It contains helpful information about how to contribute to capa. Check https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md

Please describe the changes in this pull request (PR). Include your motivation and context to help us review.

Please mention the issue your PR addresses (if any):
closes #issue_number
-->


### Checklist

<!-- CHANGELOG.md has a `master (unreleased)` section. Please add bug fixes, new features, breaking changes and anything else you think is worthwhile mentioning in the release notes to this file. -->
- [X] No CHANGELOG update needed
<!-- Tests prove that your fix/work as expected and ensure it doesn't break on the feature. -->
- [ ] No new tests needed
<!-- Please help us keeping capa documentation up-to-date -->
- [ ] No documentation update needed

# Implement Ghidra Unit Testing
---

",True,1727,https://api.github.com/repos/mandiant/capa/pulls/1727,https://github.com/mandiant/capa/pull/1727,closed,133,48,10,49,1,12,2,0,"[{'name': 'ghidra'}, {'name': 'gsoc'}]",2023-08-14 23:19:55+00:00,2023-08-21 18:16:13+00:00,586578.0,"6 days, 18:56:18","[{'comment_id': 1297490764, 'comment_body': '```suggestion\r\n        func = getFunctionContaining(toAddr(addr))  # type: ignore [name-defined] # noqa: F821\r\n        return FunctionHandle(address=AbsoluteVirtualAddress(func.getAddress().getOffset()), inner=func)\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 16, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1297490951, 'comment_body': 'https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html#toAddr(int)https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html#toAddr(int)', 'comment_created': datetime.datetime(2023, 8, 17, 16, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1297498483, 'comment_body': 'Should this be located in `capa/tests/fixtures.py` alongside the other `get_xx_extractor` functions?', 'comment_created': datetime.datetime(2023, 8, 17, 16, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1297519413, 'comment_body': 'This code looks difficult to maintain. Can we compare the provided path to `currentProgram().getExecutablePath()`? We likely need to wrap the string using `PosixPath` before comparing the two.', 'comment_created': datetime.datetime(2023, 8, 17, 17, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1297519784, 'comment_body': 'Thank you for documenting!', 'comment_created': datetime.datetime(2023, 8, 17, 17, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1297564500, 'comment_body': ""The main issues is that when we import on the ghidra side, the name of the sample remains the same as it is in `/tests/data/`, but when it's parametrized by fixtures, the name changes to a shortened version. This shortened version is what's used to map against its md5 hash in fixtures as well. \r\n\r\nI'm not too sure if comparing PosixPaths would be enough, but I'll look more into it. "", 'comment_created': datetime.datetime(2023, 8, 17, 17, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1300208729, 'comment_body': ""Ok so it looks like we need the opposite of `fixtures.get_sample_md5_by_name` e.g. `fixtures.get_sample_short_name_by_md5` or the like. Let's leave this code as-is for now and I'll open a separate issue to update the fixtures."", 'comment_created': datetime.datetime(2023, 8, 21, 14, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1300212339, 'comment_body': ""@colton-gabertan let's move this function to `capa/tests/fixtures.py` alongside the other `get_xx_extractor` functions unless I am missing a reason to keep as-is."", 'comment_created': datetime.datetime(2023, 8, 21, 14, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1300213753, 'comment_body': ""I have released https://github.com/mandiant/Ghidrathon/releases/tag/v3.0.0 with these breaking changes. Let's update the code here to reflect that."", 'comment_created': datetime.datetime(2023, 8, 21, 14, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1300442664, 'comment_body': ""Example of what's passed in the `sample` parameter for fixtures:\r\n`sample = PosixPath('/home/wumbo/capa/tests/data/mimikatz.exe_')`"", 'comment_created': datetime.datetime(2023, 8, 21, 17, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}, {'comment_id': 1300478753, 'comment_body': '❤️ ', 'comment_created': datetime.datetime(2023, 8, 21, 18, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1300482140, 'comment_body': 'see https://github.com/mandiant/capa/issues/1743', 'comment_created': datetime.datetime(2023, 8, 21, 18, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}]","[{'commit_sha': '1235a796a5ab9ec420463a00fdfe703b7da60974', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26cfd4797666da082389fbb77b9b0a95591e22f1', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b87b2106fc44c698f3c6b3d04271697adb01bf0', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecc45edd66740d36c58ecff16dd1d26124754ec9', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5af05f1d10774a7a0173f55cf731e5346099e1f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be9bc765a53d17ad91333b14241b3c6464a9d694', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ed9aab7e1bc926e11216659db55a38e3118e42', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2f02aeb12d868f3fb274d986f9d99729f83c1f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a45993cf20d538e21fe2315ada741e93345c43', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37041cb2853745b633ff6c679f1bb57da5d41722', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb9c4503e6f57da14ab45f9e1380685babccf08', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948796f56549cbfe18688d1f3114712cfb4ce16e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc0eb4ba79c6658c07a2b50c5182932e518f76b5', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c29bada172408077dce4143671073389c90bd2c0', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270290f4e55704ae04690c0cbdcb9d9c80cb5f06', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cf96873b39a7b5d2faf7f5a4634b82f40add60', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e5220146b9a23bcc8ca0464051b73a4342edf30', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd155c0c045874c44cea76481cbf232f832f68e25', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01862e5c0e6536ffc9e81edab05d168b00fe8339', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93b6d1bf8ecef8e3b3b72955c27942a4d1ef4817', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b68adc26414f70358eb96a47ac5ce0a5f8b627dd', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffeb591510e7d3e7922b528bd7d81fca08ae227c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61dc45d091b95eecafdd24dbe8c7d6e1e04d866', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a10a7790724168bce399c37e73b70f2bccfc8c6e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c968cfa37a4160844e9a301adf64157199501b2d', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cfbafa7008cc0a0e6e12d0e9da3f46c3463341e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3e690e60168b40e3b79cd99417b893da6943c54', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4579a162d5832bee62cbbb5bb0bdfd6c0c019605', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f000ae84d5921d92da1535ce447d1e2a57253225', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e512d21a15a593b854f710260639644beb20bea8', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c717f9ebe3cb50a88d4c145c505603d83e2809c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1390a237b47bdf16f101621f6fb3f25ce4a7081d', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '126c4eb31e4cccc1a19b19de4f0423666559ce8d', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00d20148559b033a652987af387f5a4411eb57bd', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '123ae0b9b195473bea9e7df04fef745c570f1cf7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0de638a48a0527f003a8d327d4918d2f7a19fddc', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2d0479d5ee0da253a448ca370323d6a063c377', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f04f50fa682935310ae57c3ab67ebf988508b0a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ba0dbb78abecd088f8f30e8327e47551471d5a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058b5bd0dd9357ba6bb19222959c09a9667945d0', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ffea5064c305e9bf9d8ed08965e85b428a46af', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6bbce3c74115add95856bb4b3a65c78681fdbb', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd53644ed06df86d5449c6be1093e9dbe667e09', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '010598f775d4ad130b04a10c4c4bb8c99eab83b1', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f306179ea7ea67d43d83219d00167536b24cdd22', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a4131c249a6ea2b95dd61d19a6a423e249f81b', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88601197b34cdb80a4afdce31f9b20d69007e865', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6afbd5187bf0d351edaa5eacb58e81e533fc9b4a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eecba50a17e8752bd664c6e8fdff88ec2048b22', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}]",Colton Gabertan,66766340,,User,,12,,21,20
1492525539,ghidra: add Ghidra feature extractor and supporting code,"This PR is a result of @colton-gabertan 's Google Summer of Code (GSoC) 2023 project that integrates capa with Ghidra using the Python 3 support provided by [Ghidrathon](https://github.com/mandiant/Ghidrathon). Colton has provided a summary of his work on this project [here](https://colton-gabertan.github.io/Google-Summer-of-Code-2023/).

Closes https://github.com/mandiant/capa/issues/49.",True,1770,https://api.github.com/repos/mandiant/capa/pulls/1770,https://github.com/mandiant/capa/pull/1770,closed,2121,2,26,64,5,15,3,0,"[{'name': 'enhancement'}, {'name': 'ghidra'}, {'name': 'gsoc'}]",2023-08-28 18:37:37+00:00,2023-08-30 16:41:01+00:00,165804.0,"1 day, 22:03:24","[{'comment_id': 1308385388, 'comment_body': '```suggestion\r\non:\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 8, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308390744, 'comment_body': 'is ""Ghidra user scripts directory"" well defined? should we include an example/standard path?', 'comment_created': datetime.datetime(2023, 8, 29, 8, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308392713, 'comment_body': '```suggestion\r\nTo invoke capa headlessly (i.e. without the Ghidra user interface), you must call the `analyzeHeadless` script provided in your `$GHIDRA_INSTALL_DIR/support` and point it towards capa\'s `capa_ghidra.py`. One thing to note is that capa runs as a `PostScript`, as in post-analysis script, so we need to provide `analyzeHeadless` with the path and script to run against our project. The preferred method for the Ghidra feature extractor is the entrypoint script, `/capa/ghidra/capa_ghidra.py`. Additional capa command line arguments must be provided in a single, space-delimited string i.e. `""/path/to/rules -v""`. To display the help and usage statement, the keyword `help` must be used instead of the typical `-h or --help`.\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 8, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308394946, 'comment_body': 'this paragraph is tense and not easy to follow, maybe simplify it and break it up into bullet points/sub paragraphs?', 'comment_created': datetime.datetime(2023, 8, 29, 8, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308395880, 'comment_body': 'I don\'t know what ""gpr"" means. Maybe also add an actual example with real paths.', 'comment_created': datetime.datetime(2023, 8, 29, 8, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308396760, 'comment_body': '```suggestion\r\nIf you do not have an existing Ghidra project, you may also create one with the Headless Analyzer via the `-Import` flag. Post scripts may also be ran in the same invocation.\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 8, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308398439, 'comment_body': ""well, there's an example below, so that's fine"", 'comment_created': datetime.datetime(2023, 8, 29, 8, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308400450, 'comment_body': 'Is that the more common use-case? If so, it should go first.', 'comment_created': datetime.datetime(2023, 8, 29, 8, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308401129, 'comment_body': '```suggestion\r\n> **Note:** In order for the Script Manager to recognize `capa_ghidra.py` you must either copy it to your Ghidra user scripts directory or update the Script Manager search path to include the directory that contains it.\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 8, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308406291, 'comment_body': 'a few more would indeed be good, but not a stopper here :)', 'comment_created': datetime.datetime(2023, 8, 29, 8, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1308989832, 'comment_body': ""I suggest changing `/path/to/gpr_dir` to `/path/to/ghidra/project/` and `gpr_name` to `ghidra_project_name`. This goes for other places we've used `gpr` as it's not a well-known acronym."", 'comment_created': datetime.datetime(2023, 8, 29, 15, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1309000145, 'comment_body': 'See my original suggestion https://github.com/mandiant/capa/pull/1759#discussion_r1306711335. This can probably still be broken down into a concrete bullet list of steps/options. We want to ensure users know about at least four things: invoking the `analyzeHeadless` script, providing `capa_ghidra.py` using the `-postScript` argument, providing arguments to `capa_ghidra.py` using single, quoted string, and accessing help via `""help""`.', 'comment_created': datetime.datetime(2023, 8, 29, 15, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1309004279, 'comment_body': ""I suggest the order be: Ghidra Script Manager, Ghidra Headless Analyzer, and Ghidrathon script console. To be honest, we can probably leave out the Ghidrathon script console as I don't see any benefits of running capa using this method v. using the Ghidra Script Manager. The more concise we are the better, thoughts @colton-gabertan ?"", 'comment_created': datetime.datetime(2023, 8, 29, 15, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1309009377, 'comment_body': 'I suggest referring to the ""Ghidra user scripts directory"" as `$USER_HOME/ghidra_scripts` as this is the most common use case AFAIK. The same should apply to any other places we\'e used the phrase `Ghidra user scripts directory`.\r\n\r\nFrom Ghidra\'s documentation,\r\n\r\n> [...]The default directories are your home directory and the various system directories (e.g., $GHIDRA_HOME/Features/Base/ghidra_scripts). [...]\r\n\r\n> $GHIDRA_HOME - The installation directory of Ghidra.\r\n$USER_HOME - The user\'s home directory.', 'comment_created': datetime.datetime(2023, 8, 29, 15, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1309078018, 'comment_body': 'I agree with the re-ordering. We can also leave out the Script Console part, it seems more like a thing covered in the Ghidrathon repo 👍 ', 'comment_created': datetime.datetime(2023, 8, 29, 16, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'colton-gabertan', 'type': 'User'}]","[{'commit_sha': '14b0c5fdbf7645ede32913036996a903d8f9d815', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f09c923069be8597e21571d2836ce683578e3d8', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffe089d4448603d0ee67b6b9af5bf6fc82742e24', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50afc2f9b204a330f1367e2bf2c6efdd7df901fa', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78bd5e1e3b49796d5d58d33964dd6e22f02ba1b5', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c40e82796a1da8fe678118964694060999bc58b', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b35cfdaf6ae339cef35b3f2a871c05abbd9bc0b1', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73183e9c1970831d2b479ed40a13d8085019709d', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5af1a42bf1e0c45b2b303436423a9a007e537e77', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16444fe5edececfebc9be31cefb039462a1bd952', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b849cfd4a5b0ebf302951b61570ccdb68e6d459a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3f9c27e34ff62704da77529bcf477294795ea11', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7639d33b910457a9fe98cbf63bad2e48b15cb99', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de19c9300d8de87e2257ac4b434fecbfb82e1d8e', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7988a6e7868258db2c576f858f5c8ba91e94020', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3da233dcad430d2af14b40e7651d997690a7336d', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '855463b3195aa74edfab110a5b8299f09f082c48', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5f51e03f43aec06a858f9386ffe7d63e5ee4f5c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ea91d60acf3adbf2ff234b80be5af0f25902fe1', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f631b3ed16f3f857ce74b49313fa6401110171a', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ffb1d75cc3d42716a22851dd1d660bbb09cd5c', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd452fdeca5f625379bfa85cf7f8aa7cfa18440ae', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785825d77e4bbb4510a0e7eef0e221a351cb9707', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97c20056610701636994b391d2160ffc9f030773', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb0f785642ba7515a8443d51c0e0d052289e43d', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ce897e39bc837cc3184c289328c88daef766b17', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94aaaa297d4fe61a02ade5055d8b1a3afae885e6', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68caece2fab1ecdad6d9c07bc4dc9cdd5afcc9a5', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fa7f248183c37de544c9bad63ce8569fe786a3f', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0e126f81214de203b916d6d577eb8d4bd380c6f', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e58ec517657909f82b6c7653e19326b4519bac7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bab6c978fb441e60c8c0d22938a6980146a200a1', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6287fbb95864dd4924539941dad3396c91780bad', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c0509f813e0facd62aa273b728e55afe654883', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de6dc7cb8467250724e7f28975712a54e0a7516', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3cf1129e3a938482662bfe75fbc66713e5e27b3', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2a2949675c6c6270850612b0b25d31fca4b19ff', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058c1fefd2ddb9e2c01d16b104c1848729c8353b', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06f48063d0eed47c907abb103ab7233ceacffa93', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b8000c004984045628d62826436fb471e54cfa', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d36ab6406a46b5bc9c2cac3866a80a8c8ea38d', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd2f7bc1f4f724218543c9153d8b9b0c0425d646', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '448b122ef0821af640199912464e979f361ff57a', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65179805a77cd17b5dd8abd5027e8caed312b0f6', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fddec33d04d98ebca2c17b45db73ed3332117d28', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7c9ae26bcc7f280350efd77685e42aa3d1b43c7', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cea7346b23e8c32faa60f45a9c55b2e08309717', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed4062cf1a42b93ebd49fb1c341fb4bf6635fb8', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bd24670744e0a8b13005940effcbeedd364ce34', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '203fc368654b101d49f911c54ef712034e007e0a', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a522ae20f1c16fbcdc5a074137aa4844e6cbb19f', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995014afc20cadc292e53bd6739b586bc3d4d2f9', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00608e298c1fe997d71959c003abc16a09b936d', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d3f649a0c66a41a6cc5f0d91727aa29434ba930', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a2a5958df385326a6a1f71c3fe87d6be4cea51', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3929164fc2f8315c581a229d01b5801428925863', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc10401d5745dfdd38685fbde851190aee8ed85', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ffd6316060f6ac37aaf279158b87a379ebc560b', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fddf800c6307d4f9eea495ecb0328f20fcd1e33', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6e61ed6f13ee5280b60ea09d417fdfa45e582a3', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37917b61817c4ff17aa2d46b64e0d97265dfde70', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec682a46451557c10628ebd99426deee6158220', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ed4d1165ebe8b643a3a4385933f1bb266dbc80', 'committer_username': 'colton-gabertan', 'committer_name': 'Colton Gabertan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 11, 5, 8, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17db614b9bf394ae04262f8b97d5feb54ddc5ff', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}]",Mike Hunhoff,42192796,,User,,5,,0,36
1488779142,fix ints_to_bytes performance,"Apparently `int.to_bytes` is horribly inefficient.

Before changes
```
        7   13.215    1.888   13.620    1.946 helpers.py:60(get_block_bytes)
```

After changes:
```
        7    0.000    0.000    0.044    0.006 helpers.py:58(get_block_bytes)
```

This PR also contains small API changes to the Ghidra helper functions.",True,1761,https://api.github.com/repos/mandiant/capa/pulls/1761,https://github.com/mandiant/capa/pull/1761,closed,28,46,4,4,0,4,3,0,"[{'name': 'enhancement'}, {'name': 'ghidra'}, {'name': 'gsoc'}]",2023-08-24 22:32:43+00:00,2023-08-24 23:01:41+00:00,1738.0,0:28:58,"[{'comment_id': 1304939277, 'comment_body': 'Apparently `int.to_bytes` is horrible inefficient.', 'comment_created': datetime.datetime(2023, 8, 24, 22, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1304939684, 'comment_body': 'Makes `find_byte_sequence` generic by allowing caller to specify start address.', 'comment_created': datetime.datetime(2023, 8, 24, 22, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1304939816, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2023, 8, 24, 22, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}, {'comment_id': 1304940244, 'comment_body': 'Read all and fix all file bytes once, to avoid unnecessary overhead later.', 'comment_created': datetime.datetime(2023, 8, 24, 22, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mike-hunhoff', 'type': 'User'}]","[{'commit_sha': '09a06750ec20c6dec920d9e6529c58406440ea3a', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e59e0e4b658d35e166161a184c43fd745f003cf3', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba07b71e8c06daf9e767081d3fbe68d5c50174c5', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4692f879b88cc7c4673beb756a55f27e7ebf866', 'committer_username': 'mike-hunhoff', 'committer_name': 'Mike Hunhoff', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 8, 1, 10, 8, tzinfo=datetime.timezone.utc)}]",Mike Hunhoff,42192796,,User,,5,,0,36

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
272815213,capa,mandiant/capa,Python,509,4049,81,63,5190,219,25,13,"[{'id': 1511056129, 'number': 1786, 'closed': datetime.datetime(2024, 1, 31, 5, 58, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 11, 21, 45, 54, tzinfo=datetime.timezone.utc), 'time_taken': 12211961.0, 'time_delta': '141 days, 8:12:41', 'additions': 421, 'deletions': 18, 'state': 'closed'}, {'id': 1492566652, 'number': 1771, 'closed': datetime.datetime(2023, 8, 28, 19, 19, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 19, 3, 58, tzinfo=datetime.timezone.utc), 'time_taken': 947.0, 'time_delta': '0:15:47', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1490137281, 'number': 1766, 'closed': datetime.datetime(2023, 8, 26, 2, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 25, 18, 12, 31, tzinfo=datetime.timezone.utc), 'time_taken': 28267.0, 'time_delta': '7:51:07', 'additions': 71, 'deletions': 25, 'state': 'closed'}, {'id': 1488648623, 'number': 1759, 'closed': datetime.datetime(2023, 8, 28, 2, 21, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 20, 25, 3, tzinfo=datetime.timezone.utc), 'time_taken': 280593.0, 'time_delta': '3 days, 5:56:33', 'additions': 165, 'deletions': 0, 'state': 'closed'}, {'id': 1487061932, 'number': 1757, 'closed': datetime.datetime(2023, 8, 23, 21, 40, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 21, 32, 6, tzinfo=datetime.timezone.utc), 'time_taken': 489.0, 'time_delta': '0:08:09', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1479415846, 'number': 1733, 'closed': datetime.datetime(2023, 8, 23, 20, 35, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 17, 28, 13, tzinfo=datetime.timezone.utc), 'time_taken': 529625.0, 'time_delta': '6 days, 3:07:05', 'additions': 148, 'deletions': 102, 'state': 'closed'}, {'id': 1475239596, 'number': 1727, 'closed': datetime.datetime(2023, 8, 21, 18, 16, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 14, 23, 19, 55, tzinfo=datetime.timezone.utc), 'time_taken': 586578.0, 'time_delta': '6 days, 18:56:18', 'additions': 133, 'deletions': 48, 'state': 'closed'}, {'id': 1462740158, 'number': 1681, 'closed': datetime.datetime(2023, 8, 16, 22, 58, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 11, 3, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1079705.0, 'time_delta': '12 days, 11:55:05', 'additions': 362, 'deletions': 143, 'state': 'closed'}, {'id': 1450692339, 'number': 1670, 'closed': datetime.datetime(2023, 8, 8, 17, 45, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 26, 17, 52, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1122782.0, 'time_delta': '12 days, 23:53:02', 'additions': 655, 'deletions': 1, 'state': 'closed'}, {'id': 1432702243, 'number': 1637, 'closed': datetime.datetime(2023, 7, 17, 15, 0, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 13, 9, 9, tzinfo=datetime.timezone.utc), 'time_taken': 366664.0, 'time_delta': '4 days, 5:51:04', 'additions': 147, 'deletions': 0, 'state': 'closed'}, {'id': 1425839737, 'number': 1597, 'closed': datetime.datetime(2023, 7, 12, 14, 58, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 8, 6, 48, 42, tzinfo=datetime.timezone.utc), 'time_taken': 374993.0, 'time_delta': '4 days, 8:09:53', 'additions': 104, 'deletions': 13, 'state': 'closed'}, {'id': 1402877988, 'number': 1565, 'closed': datetime.datetime(2023, 6, 22, 5, 37, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 5, 31, 52, tzinfo=datetime.timezone.utc), 'time_taken': 324.0, 'time_delta': '0:05:24', 'additions': 252, 'deletions': 6, 'state': 'closed'}, {'id': 1398900468, 'number': 1564, 'closed': datetime.datetime(2023, 7, 7, 0, 5, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 22, 11, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1475590.0, 'time_delta': '17 days, 1:53:10', 'additions': 292, 'deletions': 4, 'state': 'closed'}, {'id': 1386869942, 'number': 1529, 'closed': datetime.datetime(2023, 7, 6, 0, 48, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 23, 49, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2249955.0, 'time_delta': '26 days, 0:59:15', 'additions': 56, 'deletions': 109, 'state': 'closed'}, {'id': 1383311466, 'number': 1526, 'closed': datetime.datetime(2023, 7, 6, 8, 27, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 20, 16, 22, tzinfo=datetime.timezone.utc), 'time_taken': 2463075.0, 'time_delta': '28 days, 12:11:15', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1383297587, 'number': 1525, 'closed': datetime.datetime(2023, 6, 7, 20, 6, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 20, 6, 24, tzinfo=datetime.timezone.utc), 'time_taken': 31.0, 'time_delta': '0:00:31', 'additions': 249, 'deletions': 3, 'state': 'closed'}, {'id': 1376696902, 'number': 1514, 'closed': datetime.datetime(2023, 6, 3, 6, 40, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 6, 39, 38, tzinfo=datetime.timezone.utc), 'time_taken': 45.0, 'time_delta': '0:00:45', 'additions': 258, 'deletions': 3, 'state': 'closed'}]"
