pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
666308741,feat(dhall-csv): add dhall csv skeleton,"This is my first PR to the Dhall project. It just contains the required haskell and cabal files required for a new haskell package and some hello world functions to test it compiles correctly.  

I also added the *.nix files but I'm not really sure about them, I just tried to mimic what was done in another package (dhall-docs). I'll keep this PR as a draft while waiting for feedback (specially on .nix files). ",True,2214,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2214,https://github.com/dhall-lang/dhall-haskell/pull/2214,closed,152,1,16,11,0,17,1,0,[{'name': 'merge me'}],2021-06-09 20:55:29+00:00,2021-06-10 16:56:55+00:00,72086.0,20:01:26,"[{'comment_id': 648690750, 'comment_body': 'Not sure if this actually matters\r\n\r\n```suggestion\r\nCopyright (c) 2021 Gabriel Gonzalez\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 21, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648692592, 'comment_body': 'Please use newlines at the end of files. Otherwise missing newlines often result in noisy commit diffs.\r\n\r\nMaybe you can configure this in your text editor?! ', 'comment_created': datetime.datetime(2021, 6, 9, 21, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648692723, 'comment_body': 'Another missing newline.', 'comment_created': datetime.datetime(2021, 6, 9, 21, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648693798, 'comment_body': ""AFAIK this is the more common way to handle abbreviations in CamelCase – I think it's more readable too.\r\n\r\n```suggestion\r\nimport qualified Dhall.CsvToDhall\r\n\r\nmain :: IO ()\r\nmain = putStrLn Dhall.CsvToDhall.hello\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 21, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648695650, 'comment_body': ""AFAIK we currently only have CI with GHC 8.6.5 and GHCJS. The other `Tested-With` stanzas are simply outdated. We should probably get rid of all of them, since we aren't doing a good job at keeping them up to date.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 21, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648696985, 'comment_body': '```suggestion\r\nExtra-Source-Files:\r\n    CHANGELOG.md\r\n    README.md\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 21, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648699253, 'comment_body': ""I'd suggest that we try to support GHC 8.6 and up, since 8.6 is what we use in CI. I don't expect that we'll get requests to support any older GHC versions.\r\n\r\nhttps://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history is a good resource for the core package versions.\r\n\r\n```suggestion\r\n        base                      >= 4.12.0.0  && < 5\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 21, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648699944, 'comment_body': '(As suggested above\r\n\r\n```suggestion\r\n        Dhall.Csv\r\n        Dhall.CsvToDhall\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 21, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648701445, 'comment_body': ""Let's wait with this until this package is ready for an initial release.\r\n\r\n```suggestion\r\nfor package in dhall-lsp-server dhall-openapi dhall-json dhall-yaml dhall-bash dhall-nix dhall-nixpkgs dhall-docs dhall; do\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 21, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 648705202, 'comment_body': 'That sounds correct, though if the work started earlier, it may be better to add dates rather than replace them, e.g. `2020-2021`', 'comment_created': datetime.datetime(2021, 6, 9, 21, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'TristanCacqueray', 'type': 'User'}, {'comment_id': 649190958, 'comment_body': ""I made it that way because it's the format that dhall-json package uses. But I agree with you in that it is more readable this way and I'm seeing that dhall-yaml package uses this format for abreviations, so I'll update it. Thanks! "", 'comment_created': datetime.datetime(2021, 6, 10, 13, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 649192435, 'comment_body': ""Thanks! I wasn't really sure about that, I was using an old commit from dhall-docs to guide myself, I'll change it right away"", 'comment_created': datetime.datetime(2021, 6, 10, 13, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 649193547, 'comment_body': 'Yeah. Maybe we should migrate to this style in `dhall-json` too.', 'comment_created': datetime.datetime(2021, 6, 10, 13, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 649209968, 'comment_body': 'Should I remove the references to dhall-csv from release.nix too or is it enough with removing it from scripts/release.sh? ', 'comment_created': datetime.datetime(2021, 6, 10, 13, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 649211608, 'comment_body': ""Thanks, I've just configured my editor to add final newlines and remove trailing whitespaces on save "", 'comment_created': datetime.datetime(2021, 6, 10, 14, 0, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 649236227, 'comment_body': ""IIUC the `release.nix` file mostly defines what's built by Hydra. We want to include `dhall-csv` there, so we get CI for it."", 'comment_created': datetime.datetime(2021, 6, 10, 14, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 649250409, 'comment_body': ""Ok thanks! I'll only change the release.sh then"", 'comment_created': datetime.datetime(2021, 6, 10, 14, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}]","[{'commit_sha': '550c72ce5776c7a652d1f8f579d163b5ddbc7e12', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9212aded2e81215b2f5859ff3444528c779ed1e8', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8126f02679f7c23623867e82bdefe43d07bffd60', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c476189555a4ae0ef8dbdeb6ed19036f72e4ecf', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fda115a457ebbf57134d663a2dbe5a5d4d3c5c2', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb0fd673481df390087734d80d4c3fe1b050e90c', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ef9ee8bf6988c2d271828fc2213d1733e7cefd', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1888ec5a3487be494f8208bbcb8a33eb8f71a9bf', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08ac27298e5a5d221fd3033262d7e70bed86f908', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbc7c56d84a8aae652a81a24017f98b27741b60b', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dc60e9c0773cf01763029ae3a427d16fd13c11e', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
673641463,feat(dhall-csv): skeleton to provide golden testing for the package,"I created a skeleton testing tool using `tasty` that allows you to add new tests only by adding new files to the desired test directory. 

As it is right now it doesn't make any processing to the input file and compares it is the same as the expected output. When the conversion functions are implemented we can replace `id` with the according function. ",True,2225,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2225,https://github.com/dhall-lang/dhall-haskell/pull/2225,closed,78,1,6,1,0,0,1,0,[{'name': 'merge me'}],2021-06-18 17:58:00+00:00,2021-06-19 00:34:08+00:00,23768.0,6:36:08,[],"[{'commit_sha': 'f80c0b9fe86e74c3ba8a747785048b51d71cb2be', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
673935424,Feature/dhall to csv basic conversion,"I created a function to convert a dhall expression to a csv only if the dhall expression is a list of records of primitive types. I plan to extend this functionality to support lists of primitive types and options to exclude csv header or use other separators (different than comma). 

This is still very raw and I would really appreciate comments/insights or ideas of what functionalities should be provided.",True,2226,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2226,https://github.com/dhall-lang/dhall-haskell/pull/2226,closed,170,22,10,16,1,17,1,0,[{'name': 'merge me'}],2021-06-19 21:20:06+00:00,2021-06-23 19:46:08+00:00,339962.0,"3 days, 22:26:02","[{'comment_id': 654954561, 'comment_body': 'I think you want to use `binary` here instead of `-text`', 'comment_created': datetime.datetime(2021, 6, 20, 15, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 654955330, 'comment_body': 'You could import `_ERROR` from `Dhall.Util` unqualified instead', 'comment_created': datetime.datetime(2021, 6, 20, 15, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 654955739, 'comment_body': '```suggestion\r\n        traverse recordConvert a\r\n```\r\n\r\nThis works because one of the monad laws is that `m >>= return` = `m`', 'comment_created': datetime.datetime(2021, 6, 20, 16, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 655784732, 'comment_body': 'It might be worth upstreaming everything up to the `Data.Csv.encodeByName` into the `dhall-csv` library since the same logic is also used by the `dhall-to-csv` executable', 'comment_created': datetime.datetime(2021, 6, 22, 0, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 656167648, 'comment_body': ""I already did it but it didn't work :c I think I'll have to change the file or remove it from the repo and add it again."", 'comment_created': datetime.datetime(2021, 6, 22, 12, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 656170283, 'comment_body': ""Will do! I got those lines from `dhall-json`, I don't know if there's a special reason for it there but if not, it could be changed there too. "", 'comment_created': datetime.datetime(2021, 6, 22, 12, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 656170705, 'comment_body': ""Thanks! You're right, I'll change it"", 'comment_created': datetime.datetime(2021, 6, 22, 12, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 656176291, 'comment_body': ""I was unsure of where to put that function because it doesn't really touch anything from Dhall. I think I can create a new `Dhall.Csv.Util` with those functions to encode and decode Csv records"", 'comment_created': datetime.datetime(2021, 6, 22, 12, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 656256197, 'comment_body': 'Duplicate line\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 656262973, 'comment_body': 'The output ordering of `keys` is arbitrary and depends on the `hashable` version and platform. Maybe `sort` the keys?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 656266693, 'comment_body': ""I think alpha-normalization doesn't really help us with the conversion to CSV. It might make some errors less useful though.\r\n\r\n```suggestion\r\ndhallToCsv e0 = listConvert $ Core.normalize e0\r\n```"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 656374709, 'comment_body': ""Thanks! I didn't know that, I thought it already had them sorted. I'll add the a `sort` for now, but I'm thinking it may be a good idea to return a header too in the `dhallToCsv` function, I'll try to do that in a future PR"", 'comment_created': datetime.datetime(2021, 6, 22, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 656388565, 'comment_body': ""I'm not quite sure of what alpha-normalization does, could you give a quick explanation? I put `alphaNormalize` there because it was in `dhall-json` package and I thought it was important 😅 but I'd like to know what it does and when I should use it"", 'comment_created': datetime.datetime(2021, 6, 22, 16, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 656601542, 'comment_body': 'α-normalization is used to ""canonicalize"" expressions that contain bound variables. For example, you can use it to check that lambdas with different variable names are equivalent:\r\n\r\n```\r\n$ echo \'\\(x : Natural) -> x + 1\' | dhall --alpha\r\n\\(_ : Natural) -> _ + 1\r\n$ echo \'\\(y : Natural) -> y + 1\' | dhall --alpha\r\n\\(_ : Natural) -> _ + 1\r\n```\r\n\r\nI\'m not sure why `dhall-json` uses it – I suspect it\'s unnecessary, but @Gabriel439 may know better.\r\n\r\nI think we can do without it for now. If it turns out that we need it, we can easily add it.', 'comment_created': datetime.datetime(2021, 6, 22, 21, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 656635054, 'comment_body': ""The reason `dhall-json` uses it is because it has to pattern match on Dhall functions that have a certain type (specifically functions of type `Prelude.JSON.Type`), and canonicalizing the variable names makes this logic much simpler\r\n\r\n`dhall-csv` definitely doesn't need it because it doesn't have to convert functions"", 'comment_created': datetime.datetime(2021, 6, 22, 22, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 657403111, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2021, 6, 23, 19, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 657582510, 'comment_body': ""You're welcome! 🙂 "", 'comment_created': datetime.datetime(2021, 6, 24, 2, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}]","[{'commit_sha': '02be6401fe635b46fd319eeefdc7f76cdfaedb3d', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '625b861c8a0c50bbc9be525aca5b623120345c89', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fa98ecaa39c2350f7d73fd6122d21efee785de', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e21238a46bab36ac810cf50d0027c4b084e52a1', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2899dd396acd17cfc55fa93cabdcccd42fa9edc5', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d467b2253a8defb2183e889b3313e364ad4aa01', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993dfd1ceac281a2dbef3184e708efbe4359ecf4', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21df5d765fac8c519f1ec6bc0fc9eed4fea6c938', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77ba72563e406ae77733d5c9e3ba51f0dd5278fc', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92cbcb14a8fe55c289a5d4a6167467385e59bfc7', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d433d7c308dd2cc2a91af905572e666adfa3eab', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad9a7c7eb2a75c10d53c462a5a34b9cf58dca68', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1c337b295a11de35b546373aef0dcb4abde88f', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccfc1614578a1939d8956084e5da361e8e9accad', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eed40620900efdb1ad9e17efccce83c046de3e92', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f206a46854315a6f32e214d1ed0dcb6bad1f5dd9', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
678522266,feat(csv-to-dhall): Basic conversion from CSV to Dhall,"Implemented some functions to convert CSVs to lists of records where every field value is Text. I plan to extend this functionality in the future by providing a way to specify a schema like `json-to-dhall` and `yaml-to-dhall`.

I will leave this PR as a draft because I still have to update the testing tool but I would like to resolve issue #2233 first because the testing tool could also use that function.
",True,2234,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2234,https://github.com/dhall-lang/dhall-haskell/pull/2234,closed,118,27,9,13,1,9,1,0,[{'name': 'merge me'}],2021-06-27 14:05:17+00:00,2021-07-06 16:53:15+00:00,787678.0,"9 days, 2:47:58","[{'comment_id': 659343869, 'comment_body': ""Performance isn't a priority for now, however:\r\n\r\nBy applying the key and value transformations on the pairs returned by `toList` you could avoid the overhead of hashing the new keys and reconstructing the hash map. `bimap` from `Bifunctor` might be useful for applying the transformations to the tuples."", 'comment_created': datetime.datetime(2021, 6, 27, 16, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 659344151, 'comment_body': '`ListLit` has an invariant that when the `Seq` is empty, the type annotation must be `(Just _)`. Can we be sure that the `Seq` will be nonempty for some reason? It might still be better style to check that `csv` is nonempty and to `error` out if it is empty.', 'comment_created': datetime.datetime(2021, 6, 27, 16, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 659348758, 'comment_body': ""Yes I saw that, but I wasn't really sure of what type to use when the list was empty. Would it work with the empty record? Or would it be better to just throw an error in that case as you suggested?"", 'comment_created': datetime.datetime(2021, 6, 27, 16, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 659350225, 'comment_body': '> Would it work with the empty record?\r\n\r\nMakes sense to me! If you want to take a look at how things are represented in the AST, maybe take a look at the `dhall haskell-syntax-tree` command.', 'comment_created': datetime.datetime(2021, 6, 27, 17, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 659354404, 'comment_body': ""You're right! I didn't know about `Bifunctor`s, it seems cleaner that way thanks"", 'comment_created': datetime.datetime(2021, 6, 27, 17, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 659357671, 'comment_body': ""Thanks! It was really helpful, I wasn't aware that the type should be `List {}`, I thought it was only `{}`. "", 'comment_created': datetime.datetime(2021, 6, 27, 18, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 664218998, 'comment_body': '`throwIO . userError` is the same as `fail`\r\n\r\n```suggestion\r\n                Left err -> fail err\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 3, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 664219438, 'comment_body': 'I typically use `fail` instead of `error` in `IO` code, for the reasons in this post:\r\n\r\nhttps://www.haskellforall.com/2019/12/prefer-to-use-fail-for-io-exceptions.html\r\n\r\n```suggestion\r\n        Left err -> fail err\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 4, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 664570020, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2021, 7, 6, 13, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}]","[{'commit_sha': '4476bded76c489272ae1dfff4bd9670178bf87c0', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e50929f5056b9a8b976387b14b4b1f30ab63bd52', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c0736d998e8e17fb09d63e45a151ab9249096e2', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f7022e85fe22e73c3c74e70440a1a6c68b5a15', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2349bd25955c2adbf370dcd459a5390f6c29e28', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2d011c3016d3c3d3b0f1a62c334c21ab97879b', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9730df0ed75ae0dc67f177a9098b7ea56c3caf9', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '749e90ab016e9da148da53185ad4bb9a51cca32c', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a84f3eaf2bf5ee440efceac6ba4d2062d44bd8', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34139556759674d6159682cefc2650ce93c0d66', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb68bffe05e9234baf0aadde143835e16caae89', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7abfe610cc1c1eb50bedd91baabc578efb1ea83', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29c3499d4de341e651f4b25f08045c115b6acdf', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
683204722,Feature/dhall csv command line options,"I provided some command line options to both executables guiding myself with `dhall-json` package. I added some options in `csv-to-dhall` that are not implemented yet, but (I hope) will be implemented soon 😅 let me know if that's ok or if it's better to delete the command line options while they're not implemented. 

This PR depends on #2234 ",True,2242,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2242,https://github.com/dhall-lang/dhall-haskell/pull/2242,closed,221,10,5,14,0,2,0,0,[],2021-07-04 16:52:02+00:00,2021-07-06 19:00:47+00:00,180525.0,"2 days, 2:08:45","[{'comment_id': 664372439, 'comment_body': 'Please add a newline here.', 'comment_created': datetime.datetime(2021, 7, 6, 9, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}]","[{'commit_sha': '4476bded76c489272ae1dfff4bd9670178bf87c0', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e50929f5056b9a8b976387b14b4b1f30ab63bd52', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c0736d998e8e17fb09d63e45a151ab9249096e2', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f7022e85fe22e73c3c74e70440a1a6c68b5a15', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2349bd25955c2adbf370dcd459a5390f6c29e28', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2d011c3016d3c3d3b0f1a62c334c21ab97879b', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9730df0ed75ae0dc67f177a9098b7ea56c3caf9', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '749e90ab016e9da148da53185ad4bb9a51cca32c', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a84f3eaf2bf5ee440efceac6ba4d2062d44bd8', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b34139556759674d6159682cefc2650ce93c0d66', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53844efddc8031c688621b29ec3a6a1c7ff6a28', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e77713856aa297ba02b4a2badbb480fa206847', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e1c356f9cbd9cc41b36199b6e3703cd3d7dfdb', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1217403bc2ebad600fc08c5e502826263005fde', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
690728324,Feature/convert headerless csv,"Create a new function to convert headerless CSVs to Dhall records with fields `_1, _2, ...` as discussed in issue #2241 ",True,2253,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2253,https://github.com/dhall-lang/dhall-haskell/pull/2253,closed,67,13,5,3,0,0,0,0,[],2021-07-15 13:41:25+00:00,2021-07-16 01:46:27+00:00,43502.0,12:05:02,[],"[{'commit_sha': '64c7e2cd428ec0c8dbe2f7dff2c1e62bf51904c0', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec6319f646e3f54700453c68898f73f9390614da', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b7c6f570df7147fcdc233ea5afc4174121fc16', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
695473615,Feature/csv to dhall with schema,"Implemented Dhall to CSV conversion using a Dhall Schema specifying the expected type for the resulting Dhall expression. The behaviour is very similar to `json-to-dhall` package. 

I plan to put up another PR in the next few days polishing everything up (specially error messages that are a bit sloppy). I would appreciate any feedback on how to further improve this functionality 😁",True,2260,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2260,https://github.com/dhall-lang/dhall-haskell/pull/2260,closed,307,38,8,16,1,15,1,0,[{'name': 'merge me'}],2021-07-22 20:21:25+00:00,2021-07-30 19:27:30+00:00,687965.0,"7 days, 23:06:05","[{'comment_id': 675272074, 'comment_body': 'Minor suggestion just for consistency with other parsing errors (e.g. `(input)`)\r\n\r\n```suggestion\r\n      case Dhall.Parser.exprFromText ""\\n\\ESC[1;31m(schema)\\ESC[0m"" code of\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 2, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 675807657, 'comment_body': 'Small stylistic suggestion:\r\n\r\n```suggestion\r\n            let f k v = fieldConvert k (Core.recordFieldValue v) (HashMap.lookup (encodeUtf8 k) csvRecord)\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 19, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 675843209, 'comment_body': ""I recommend using `decodeUtf8'` and handling the error, even if just to explain in the error message that the CSV is malformed\r\n\r\nSame comment for other uses of `decodeUtf8`"", 'comment_created': datetime.datetime(2021, 7, 23, 20, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 675843957, 'comment_body': 'I think this is the same thing:\r\n\r\n```suggestion\r\n            a <- Map.traverseWithKey (\\k v -> Core.makeRecordField (f k v)) record\r\n            return $ Core.RecordLit a\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 675846197, 'comment_body': 'I think this would be simpler (and doesn\'t require partial functions):\r\n\r\n```suggestion\r\n        case field of\r\n            ""true""  -> Right (Core.BoolLit True)\r\n            ""false"" -> Right (Core.BoolLit False)\r\n            _ -> Left $ Mismatch Core.Bool field key\r\n```', 'comment_created': datetime.datetime(2021, 7, 23, 20, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 675847162, 'comment_body': ""For `Natural` / `Integer` / `Double` I recommend using `decodeUtf8'` in conjunction with the `Data.Text.Read` module to parse them efficiently"", 'comment_created': datetime.datetime(2021, 7, 23, 20, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 676009906, 'comment_body': ""Thanks! I'll modify it right away, I got really tangled with the `ByteString`, `String` and `Text` conversion haha"", 'comment_created': datetime.datetime(2021, 7, 24, 15, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 676010809, 'comment_body': ""I thought you were right and committed the change, but types don't match becuase `f` returns `Either CompileError ExprX`. I'll use `mapRight` to have it in the same statement"", 'comment_created': datetime.datetime(2021, 7, 24, 15, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 676015785, 'comment_body': ""I changed it, in this case I'm still using `decodeUtf8` to keep it simple but I check in a previous guard with `decodeUtf8` if there are any errors. LMK if that's fine"", 'comment_created': datetime.datetime(2021, 7, 24, 16, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 676016048, 'comment_body': ""I changed it to use `decodeUtf8` and the functions in `Data.Text.Read` but those functions are reader monads, and I'm unsure of what to do when there is more Text left to read when parsing a `Natural` / `Integer` /  `Double` "", 'comment_created': datetime.datetime(2021, 7, 24, 16, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 676211167, 'comment_body': '```suggestion\r\n    { strictRecs :: Bool\r\n    , unions     :: UnionConv\r\n```', 'comment_created': datetime.datetime(2021, 7, 25, 22, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 676211422, 'comment_body': 'This is how you can easily enforce that there is no trailing `Text`:\r\n\r\n```suggestion\r\n                    Right (v, """") -> Right $ Core.NaturalLit v           -- What to do when there is more text left to read?\r\n                    _ -> Left $ Mismatch Core.Natural field key\r\n```\r\n\r\nSame trick for the other numeric types', 'comment_created': datetime.datetime(2021, 7, 25, 22, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 676932604, 'comment_body': ""I thought of that but wasn't sure of the case when there are trailing whitespaces. I suppose we can forbid any trailing text for now and later think of something to handle that case"", 'comment_created': datetime.datetime(2021, 7, 26, 20, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 676999185, 'comment_body': ""I think it's fine if we're strict about not allowing leading/trailing whitespace"", 'comment_created': datetime.datetime(2021, 7, 26, 23, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 677379677, 'comment_body': ""Great! I'll fix it and merge the branch "", 'comment_created': datetime.datetime(2021, 7, 27, 11, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}]","[{'commit_sha': '17c955e6f6ed1dd6ed91be2405b4be9719975dfd', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd612218abe8ab3d18e6f302488d92f39c408136b', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49318d4d03d0101154dbe6a9086fd177f4ff4ff9', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348691460559b51e7dc3531f813e19ca07a48520', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe5b775dfd1a841b95a1f0a20566eabe62bcf00', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eb072fff4027f48c5060ac42dc4d1a6d40d83e4', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91bcd16c3a5a726a5716692a72d1f757d053dcc5', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baa076c6be9c1d0243ea112357af815b3d2bda51', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a73667e7be8d993d1d41c7ec3484a39d151bbc21', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d44e61fd0be660f734c62a8cfa9f2466a288bf8', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f64d19bc4fb004f7fe2dfe52b2ea340954e61df6', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66d74f24e15abe77158c1448efa44570fe1be8df', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3acf5625bf0cefb74b13dbbbacb2e7a945bbe4', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f9263b01d4aa1d340c25f88838e6c0e1ecf9453', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3328918eebfc9fbe4dded3fdc80c787d2d1c57f0', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed58c622a5fa2d3887bc7f76c2e1ba94280edc36', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
706931206,Feature/dhall csv tests,"I made some tests for the `dhall-csv` package and fixed some bugs that I discovered along the way (like dealing with negative integers in `csv-to-dhall` or Bools in `dhall-to-csv`).

I'm open to any suggestion on other things that I should test. ",True,2277,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2277,https://github.com/dhall-lang/dhall-haskell/pull/2277,closed,304,2,37,12,1,2,1,0,[{'name': 'merge me'}],2021-08-09 23:56:57+00:00,2021-08-10 18:08:05+00:00,65468.0,18:11:08,"[{'comment_id': 685845926, 'comment_body': 'My impression was that missing values are often represented as the empty string (`,,`). Is `null` widely used too?', 'comment_created': datetime.datetime(2021, 8, 10, 9, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 685935754, 'comment_body': ""I actually didn't give it much thought haha now that you say it is way better the empty string than null 😅 I'll change it right away "", 'comment_created': datetime.datetime(2021, 8, 10, 11, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}]","[{'commit_sha': '2e559e7e8a8298fd262101bba2e65717a236ec06', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db6acc1fa8e3f6e6f0051167cd70b2ab6126421f', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c8ff668f24327d847a43fb1f525f1d616d9af6', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fc0fd552d87894f256126756f506cb29be50a8', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9279a0595acee6dd67724cee01831ecee2b7ea4b', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ad5fc17023ffdfd995fe419a9a91aab399e4eca', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c885c02d1c31e7d063a38f9d862e96d09881f0b3', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fdeb7a45feada88d4fb9e0922a6196f78012da', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f7bb928638137593337a6597fb88a3dc932da9e', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45a88a30bebb2aa4eb19759f036f9d379415695', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '815a141d6ed8c091ae1cae9ef7a554f14b1998b9', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42168b2a7554da6613b6be66382e7060b63ffb10', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15
712850206,Feature/dhall csv docs,"I created haddocks on all the exported functions and types of the libraries and I added the verification of missing haddocks in `dhall-csv` to ci in `nix/shared.nix`.

I also improved (a lot) the error messages, both on `dhall-to-csv` and `csv-to-dhall`, mostly the latter but because those messages were worse before. I'm open to any suggestion on the error messages because I found it very hard to create descriptive and helpful messages haha.

EDIT: Removed verification for CI because I can't find where are the missing Haddocks and Hydra log only reports ""Incomplete Haddocks""",True,2279,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2279,https://github.com/dhall-lang/dhall-haskell/pull/2279,closed,535,74,3,19,0,22,1,0,[{'name': 'merge me'}],2021-08-14 23:44:40+00:00,2021-08-18 13:43:03+00:00,309503.0,"3 days, 13:58:23","[{'comment_id': 689705533, 'comment_body': ""I think the `IO` explanation could be skipped in this place, because it's a fairly tangential detail, and the sentence already contains a lot of more important information.\r\n\r\n```suggestion\r\n    sequence of CSV `NamedRecord`s (from the @cassava@ library) while the latter\r\n    converts a `Text` containing Dhall code into a list of CSV `NamedRecord`s.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 16, 16, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689705655, 'comment_body': '```suggestion\r\n    The former converts a Dhall expression (with imports resolved already) into a\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 16, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689708618, 'comment_body': ""I don't understand the `exampleInt,` prefix here. Is the output correct?"", 'comment_created': datetime.datetime(2021, 8, 16, 17, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689711676, 'comment_body': 'I was wondering what `tp` might be an abbreviation for, before I realized that it\'s just ""type"". I think `t` might be a more conventional abbreviation.\r\n\r\n```suggestion\r\n            \\● ❰Optional t❱ (where ❰t❱ is a valid record field type)                         \\n\\\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689715648, 'comment_body': ""IMHO, it's a bit of a anti-pattern to implement error messages in `Show` instances – I think `Show` should primarily be used for debugging Haskell programs, and instances should usually be derived.\r\n\r\nA better place for error messages is `Exception`'s `displayException` method: https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Exception.html#v:displayException\r\n\r\n(This is just a side note – I know that other parts of this project use the same anti-pattern.)"", 'comment_created': datetime.datetime(2021, 8, 16, 17, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689717355, 'comment_body': 'Since the error complains about the _type_ of the expression, it might be helpful to output the actual type of the expression to the user.\r\n\r\n(This also applies to the other error messages)', 'comment_created': datetime.datetime(2021, 8, 16, 17, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689718567, 'comment_body': 'This looks really helpful! :heart: ', 'comment_created': datetime.datetime(2021, 8, 16, 17, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689720477, 'comment_body': '```suggestion\r\n{-| Convert a Dhall expression (with resolved imports) to an equivalent\r\n```\r\n\r\nMinor aside: If the CSV really was _equivalent_, we should be able to get _all_ the Union constructors back from it, not just the empty constructors. Maybe simply drop that word.', 'comment_created': datetime.datetime(2021, 8, 16, 17, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689721671, 'comment_body': '```suggestion\r\n{-| Convert CSV data to Dhall providing an expected Dhall type necessary\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689721794, 'comment_body': '```suggestion\r\n    The translation process will produce a Dhall expression where\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689722459, 'comment_body': '```suggestion\r\n    in the same order they were in the input CSV. You must still provide the\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689739067, 'comment_body': '```suggestion\r\n    show (BadSchemaType t e) =\r\n        Data.Text.unpack $\r\n            _ERROR <> "": Schema expression parsed successfully but has wrong Dhall type.     \\n\\\r\n            \\                                                                                \\n\\\r\n            \\Expected schema type: Type                                                       \\n\\\r\n            \\                                                                                \\n\\\r\n            \\Actual schema type:                                                              \\n\\\r\n            \\"" <> insert t <>\r\n            ""                                                                                \\n\\\r\n            \\                                                                                \\n\\\r\n            \\Schema expression:                                                              \\n\\\r\n            \\"" <> insert e\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689743204, 'comment_body': 'The word ""key"" is not part of the usual language about Dhall records.\r\n\r\n```suggestion\r\n    show (MissingField name) =\r\n        Data.Text.unpack $\r\n            _ERROR <> "": Missing field: \\\'"" <> name <> ""\\\'.                                     \\n\\\r\n            \\                                                                                \\n\\\r\n            \\Explanation: A field present in Dhall type (and not optional) is not provided       \\n\\\r\n            \\in CSV. Please make sure every non-optional field of the schema is        \\n\\\r\n            \\present in CSV header.                                                          \\n\\\r\n            \\                                                                                \\n\\\r\n            \\If working with headerless CSVs, fields in Dhall type should have the fields          \\n\\\r\n            \\_1, _2, _3, ... and so forth                                                    ""\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689743467, 'comment_body': '```suggestion\r\n    show (UnhandledFields keys) =\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 689744313, 'comment_body': '```suggestion\r\n            _ERROR <> "": Type mismatch at field: "" <> key <>                               ""\\n\\\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 17, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 690290593, 'comment_body': ""My bad 😅 I was going back and forth on it and forgot to fix that. Thanks! I'll fix it right away"", 'comment_created': datetime.datetime(2021, 8, 17, 11, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 690302811, 'comment_body': ""Thanks! I wasn't aware of that, I'll change it and keep it in mind for the future"", 'comment_created': datetime.datetime(2021, 8, 17, 12, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 690325262, 'comment_body': ""I have thought of that but couldn't think of a way to get the type (because all the `TypeCheck` functions return `Either` values). I just came up with a solution to use `fromRight` function and put the original expression as default (though this default should never be used, as the expression was already type checked). \r\n\r\nWould this solution be good?"", 'comment_created': datetime.datetime(2021, 8, 17, 12, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}, {'comment_id': 690460212, 'comment_body': '```suggestion\r\n> $ dhall-to-csv <<< ""[{ equality = True == False }]""\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 15, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 690462397, 'comment_body': 'I usually put a blank line after the insert to separate it from the prose and also lead into the prose with `...`, like this:\r\n\r\n```suggestion\r\n            \\"" <> insert e <>                                                               ""\\n\\\r\n            \\… because it has type:                                                          \\n\\\r\n```\r\n\r\nSame comment for the other error messages', 'comment_created': datetime.datetime(2021, 8, 17, 15, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 690463134, 'comment_body': 'I think this should say CSV instead of JSON/YAML', 'comment_created': datetime.datetime(2021, 8, 17, 15, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gabriella439', 'type': 'User'}, {'comment_id': 691185558, 'comment_body': ""Oops hahaha the dangers of copying and pasting. I'll change it right away"", 'comment_created': datetime.datetime(2021, 8, 18, 12, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}]","[{'commit_sha': 'a7b04e3db3bb42d569fdebdd505ec2322e5abcbf', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06d20e7b58daf8c91a2264c38b10d6598fa76914', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8688b9f0fe44d47ce1827155c3634138ea989e26', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e4f027c08b3d25817b9a9f68ebe195475e9a40', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1fa0460b331f0c446e3be0a9ada166c96e2f10f', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e842f6b637169bbd3e3b3accf00386d1298afe5c', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bccbfff40dbfeecf4f8ab04eeabf7e778f46ec1', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eca9c908f2dfbe9c84dbe805cdd3615dccaac42', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409c2f346f4852f0a2d5d7f45fb96dd71a40473a', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df75fcef1c810c9e10f9a6515e0cfcc7f1b0e1f0', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25c14e356af0fd14851fbfc6479bc183a1d210d', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648aade786e12955e064248c3f41fa56144c0d39', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9649a59c38376d78ec2d0ddb39aef07097da560a', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead624843522bce2fce8bea5ee1aac8625041270', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6066ce8f6fa2c8a687bfc4eefa606a9aca7dbcc5', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7d5e7b1cc8da7cdbeb42a21dbf1113646cc3b09', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '263f0a96d8f7f21819ba25e1b39855de20fc1f68', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f101507b5beed361f91fa60551bfca67e44a69', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da7783b18a2e944171a323cb77c4c4afa45caeee', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15

678583896,Feature/move render expression to Dhall.Utility,Created a function to render expression to avoid code repetition as mentioned in issue #2233 ,True,2235,https://api.github.com/repos/dhall-lang/dhall-haskell/pulls/2235,https://github.com/dhall-lang/dhall-haskell/pull/2235,closed,39,66,3,5,3,3,1,0,[{'name': 'merge me'}],2021-06-27 21:33:51+00:00,2021-07-03 13:08:26+00:00,488075.0,"5 days, 15:34:35","[{'comment_id': 660120745, 'comment_body': 'I think we\'ve been using import lists mostly for types and common functions, mostly from `base`.\r\n\r\nFor an ""uncommon"" utility like this one I\'d suggest rather using a qualified import.', 'comment_created': datetime.datetime(2021, 6, 28, 21, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 660142519, 'comment_body': '(Dito)', 'comment_created': datetime.datetime(2021, 6, 28, 21, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sjakobi', 'type': 'User'}, {'comment_id': 661400954, 'comment_body': ""Thanks! I didn't know, I'll fix it right away"", 'comment_created': datetime.datetime(2021, 6, 30, 12, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'MarcosJLR', 'type': 'User'}]","[{'commit_sha': '11e6321fd0e8819ddaffa96ce9d39151c6e0d5f5', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6dc908d31ecaff4b122b9b9573dff8fa6204f3', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b79804b9222a5f32e728e05e7cef4800c4f7153', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e5922d920474f47011ebb6ace702ca5f02f04f', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe41b7d3f40099e75914279d9a17cc52398fd04', 'committer_username': 'MarcosJLR', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 4, 26, 23, 57, 53, tzinfo=datetime.timezone.utc)}]",,38771386,,User,,17,,11,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
67623822,dhall-haskell,dhall-lang/dhall-haskell,Dhall,211,910,29,139,1996,155,146,11,"[{'id': 712850206, 'number': 2279, 'closed': datetime.datetime(2021, 8, 18, 13, 43, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 23, 44, 40, tzinfo=datetime.timezone.utc), 'time_taken': 309503.0, 'time_delta': '3 days, 13:58:23', 'additions': 535, 'deletions': 74, 'state': 'closed'}, {'id': 706931206, 'number': 2277, 'closed': datetime.datetime(2021, 8, 10, 18, 8, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 23, 56, 57, tzinfo=datetime.timezone.utc), 'time_taken': 65468.0, 'time_delta': '18:11:08', 'additions': 304, 'deletions': 2, 'state': 'closed'}, {'id': 695473615, 'number': 2260, 'closed': datetime.datetime(2021, 7, 30, 19, 27, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 20, 21, 25, tzinfo=datetime.timezone.utc), 'time_taken': 687965.0, 'time_delta': '7 days, 23:06:05', 'additions': 307, 'deletions': 38, 'state': 'closed'}, {'id': 690728324, 'number': 2253, 'closed': datetime.datetime(2021, 7, 16, 1, 46, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 13, 41, 25, tzinfo=datetime.timezone.utc), 'time_taken': 43502.0, 'time_delta': '12:05:02', 'additions': 67, 'deletions': 13, 'state': 'closed'}, {'id': 683204722, 'number': 2242, 'closed': datetime.datetime(2021, 7, 6, 19, 0, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 16, 52, 2, tzinfo=datetime.timezone.utc), 'time_taken': 180525.0, 'time_delta': '2 days, 2:08:45', 'additions': 221, 'deletions': 10, 'state': 'closed'}, {'id': 678583896, 'number': 2235, 'closed': datetime.datetime(2021, 7, 3, 13, 8, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 21, 33, 51, tzinfo=datetime.timezone.utc), 'time_taken': 488075.0, 'time_delta': '5 days, 15:34:35', 'additions': 39, 'deletions': 66, 'state': 'closed'}, {'id': 678522266, 'number': 2234, 'closed': datetime.datetime(2021, 7, 6, 16, 53, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 14, 5, 17, tzinfo=datetime.timezone.utc), 'time_taken': 787678.0, 'time_delta': '9 days, 2:47:58', 'additions': 118, 'deletions': 27, 'state': 'closed'}, {'id': 673935424, 'number': 2226, 'closed': datetime.datetime(2021, 6, 23, 19, 46, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 21, 20, 6, tzinfo=datetime.timezone.utc), 'time_taken': 339962.0, 'time_delta': '3 days, 22:26:02', 'additions': 170, 'deletions': 22, 'state': 'closed'}, {'id': 673641463, 'number': 2225, 'closed': datetime.datetime(2021, 6, 19, 0, 34, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 17, 58, tzinfo=datetime.timezone.utc), 'time_taken': 23768.0, 'time_delta': '6:36:08', 'additions': 78, 'deletions': 1, 'state': 'closed'}, {'id': 670593426, 'number': 2222, 'closed': datetime.datetime(2021, 6, 16, 1, 48, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 17, 6, 33, tzinfo=datetime.timezone.utc), 'time_taken': 31299.0, 'time_delta': '8:41:39', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 666308741, 'number': 2214, 'closed': datetime.datetime(2021, 6, 10, 16, 56, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 20, 55, 29, tzinfo=datetime.timezone.utc), 'time_taken': 72086.0, 'time_delta': '20:01:26', 'additions': 152, 'deletions': 1, 'state': 'closed'}]"
