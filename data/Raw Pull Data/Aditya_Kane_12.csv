pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
960820327,Stochastic depth,Please see #473. Implemented Stochastic Depth layer. Docstring and logic similar to TFA as it is closest to the original paper.  ,True,474,https://api.github.com/repos/keras-team/keras-cv/pulls/474,https://github.com/keras-team/keras-cv/pull/474,closed,131,0,4,6,11,15,1,0,[{'name': 'GSoC 2022'}],2022-06-07 19:43:27+00:00,2022-06-10 05:22:35+00:00,207548.0,"2 days, 9:39:08","[{'comment_id': 891854334, 'comment_body': 'Should we clarify that it performs these operations on a batch basis rather than on a sample basis i.e., either an entire batch is randomly dropped or none? ', 'comment_created': datetime.datetime(2022, 6, 8, 2, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 891854977, 'comment_body': 'I would expect this to move up where I suggested. But happy to know your thoughts too. ', 'comment_created': datetime.datetime(2022, 6, 8, 2, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 891855034, 'comment_body': 'Should this be moved up? ', 'comment_created': datetime.datetime(2022, 6, 8, 2, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 891932645, 'comment_body': ""Sure, that would reduce the confusion. I'll move it up."", 'comment_created': datetime.datetime(2022, 6, 8, 5, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 891933275, 'comment_body': 'Not sure whether to keep it in the main docstring as it will get displayed on the docs page.', 'comment_created': datetime.datetime(2022, 6, 8, 5, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 891937024, 'comment_body': ""We can mention it as an acknowledgement. I don't see any problem with that. @LukeWood thoughts?"", 'comment_created': datetime.datetime(2022, 6, 8, 5, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 891940401, 'comment_body': 'Is this the correct behavior with respect to what most do industry wide?', 'comment_created': datetime.datetime(2022, 6, 8, 5, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 891941205, 'comment_body': 'Do I understand correctly that this either drops the conv portion of a ResNet block or not depending on a random sample?', 'comment_created': datetime.datetime(2022, 6, 8, 5, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 891941552, 'comment_body': ""I don't see an issue in acknowledging it.  Feel free to reference it in the References: section too."", 'comment_created': datetime.datetime(2022, 6, 8, 5, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 891942122, 'comment_body': ""Yes that's right."", 'comment_created': datetime.datetime(2022, 6, 8, 5, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 891942928, 'comment_body': 'That is why we are discussing a separate later for DropPath here:\r\n\r\nhttps://github.com/keras-team/keras-cv/issues/473', 'comment_created': datetime.datetime(2022, 6, 8, 5, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 893612221, 'comment_body': 'From the paper: ""For each mini-batch we randomly select sets of layers and remove their\r\ncorresponding transformation functions, only keeping the identity skip connection"" -- so batch basis seems correct', 'comment_created': datetime.datetime(2022, 6, 9, 14, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tanzhenyu', 'type': 'User'}, {'comment_id': 894159781, 'comment_body': ""Do we already have it? That's nice."", 'comment_created': datetime.datetime(2022, 6, 10, 5, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 894159877, 'comment_body': 'References', 'comment_created': datetime.datetime(2022, 6, 10, 5, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 894161995, 'comment_body': 'Yes sir!  that we do!', 'comment_created': datetime.datetime(2022, 6, 10, 5, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}]","[{'commit_sha': 'c1057dd4424c29ba4fc6441952a2824bf65dfbca', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7627e6986a90244401aef179ab56ef65c06b74c4', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc1bd4ff4cd32df6a19a431d2c2eb80f1c776faf', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4837b620f7ca31d5c1618652b3c35f039a8f0ae', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '637b0f4683654aca3568ce0a4202412fbc6d9472', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6e1af92b56be1ef0fa654559e8516c7cd8f26a', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}]",Aditya Kane,64411306,,User,,113,,53,62
963712342,Drop Path,"@sayakpaul @LukeWood 

Implemented DropPath layer. I have used [timm](https://github.com/rwightman/pytorch-image-models/blob/7c67d6aca992f039eece0af5f7c29a43d48c00e4/timm/models/layers/drop.py#L135-L152) and [tensorflow/tpu](https://github.com/tensorflow/tpu/blob/b24729de804fdb751b06467d3dce0637fa652060/models/official/amoeba_net/network_utils.py#L164-L174) as source of truth and included timm in references as well. 

The tests were inspired by DropBlock2D's tests since both of them have (to some extent) similar functionallity.

I believe the docstring can be improved but I'm not really sure what to write. Open to suggestions.

Edit: Incorporated changes to `StochasticDepth` as discussed. Kept the argument names unchanged for the moment.

/auto Closes #130 ",True,480,https://api.github.com/repos/keras-team/keras-cv/pulls/480,https://github.com/keras-team/keras-cv/pull/480,closed,146,0,5,15,21,33,1,0,[{'name': 'GSoC 2022'}],2022-06-10 05:58:15+00:00,2022-06-24 05:00:32+00:00,1206137.0,"13 days, 23:02:17","[{'comment_id': 894416990, 'comment_body': '""Note that this layer drops individual samples within a batch and not the entire batch.""', 'comment_created': datetime.datetime(2022, 6, 10, 11, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 894417207, 'comment_body': '""References""', 'comment_created': datetime.datetime(2022, 6, 10, 11, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 894418703, 'comment_body': 'Why are these lines reformatted? 🤔\r\n\r\n@LukeWood ', 'comment_created': datetime.datetime(2022, 6, 10, 11, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 894420636, 'comment_body': ""I'm just wondering if we should also include a more robust statistical test like the one shown [here](https://gist.github.com/sayakpaul/0abaf4aec53a73e53cf68a67f7f5f511) for layers like this. The last test in the gist is a bit incomplete but hopefully gives the idea. \r\n\r\nThe idea is to get the results of the layer and repeat it through a number of trials and then verify if the target probability is being met or is closer (0.499 as opposed to being 0.5 for example). \r\n\r\n@LukeWood @AdityaKane2001 "", 'comment_created': datetime.datetime(2022, 6, 10, 11, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 894786329, 'comment_body': 'try updating black formatter', 'comment_created': datetime.datetime(2022, 6, 10, 18, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 894925991, 'comment_body': 'Let’s update drop_rate to rate', 'comment_created': datetime.datetime(2022, 6, 10, 22, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 894926223, 'comment_body': 'Let’s apply a random seed to ensure this test is not flaky. ', 'comment_created': datetime.datetime(2022, 6, 10, 22, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 894926498, 'comment_body': 'What’s the runtime of this?  5k iterations is quite large.', 'comment_created': datetime.datetime(2022, 6, 10, 22, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 894926915, 'comment_body': 'Yeah let’s just call this rate', 'comment_created': datetime.datetime(2022, 6, 10, 22, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 894927161, 'comment_body': 'Just for your own purposes, it’s good to note to never include probabilistic tests even if they’re extremely likely to pass.\r\n\r\nThe birthday problem applies to flaky tests.\r\nhttps://en.wikipedia.org/wiki/Birthday_problem', 'comment_created': datetime.datetime(2022, 6, 10, 22, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 894984681, 'comment_body': 'The runtime for this test only is 11.38 seconds.', 'comment_created': datetime.datetime(2022, 6, 11, 6, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 894985082, 'comment_body': 'When I was testing this, 5k iterations was the first mark where I got the test to pass on multiple runs. However when I set the seed to 42, the same test passes in 1000 iterations and takes 7.11 seconds. Could you please suggest what should be done in this case?', 'comment_created': datetime.datetime(2022, 6, 11, 6, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 894985449, 'comment_body': '@sayakpaul Could you please take a look at this [comment](https://github.com/keras-team/keras-cv/pull/480#discussion_r894985082) below?', 'comment_created': datetime.datetime(2022, 6, 11, 6, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 894986006, 'comment_body': 'Correction to my last comment, there was a small mistake. The `FEATURE_SHAPE` was set to `(1, 14, 14, 256)` which is a slightly unlikely scenario. I changed it to `(16, 14, 14, 256)` and ran for 200 iterations (with seed), which takes 6.11 seconds. ', 'comment_created': datetime.datetime(2022, 6, 11, 6, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 895169690, 'comment_body': '@AdityaKane2001 why would these be reformatted? ', 'comment_created': datetime.datetime(2022, 6, 12, 12, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 895169882, 'comment_body': '@LukeWood any reason to not do statistical testing (like the one I mentioned [here](https://github.com/keras-team/keras-cv/pull/480/files#r894420636)) of the probabilistic methods like the one added in this PR? ', 'comment_created': datetime.datetime(2022, 6, 12, 12, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 895170197, 'comment_body': ""I'm not really sure. I'll run the format script again."", 'comment_created': datetime.datetime(2022, 6, 12, 12, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 896215464, 'comment_body': 'As long as you properly seed your layer, the test case, TensorFlow, numpy, and any other library used then no it is not a problem.', 'comment_created': datetime.datetime(2022, 6, 13, 22, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 896329537, 'comment_body': ""I am still not too sure why including statistical tests is not a good idea but if you think we're okay without them then we'll go without them. 👍"", 'comment_created': datetime.datetime(2022, 6, 14, 3, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 896332499, 'comment_body': 'they are totally fine to include - as long as you seed properly. \r\n\r\nThe issue is around flaky tests - even if they are incredibly unlikely to flake this becomes a burden at Google scale due to the birthday problem.', 'comment_created': datetime.datetime(2022, 6, 14, 3, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 898663580, 'comment_body': 'any luck', 'comment_created': datetime.datetime(2022, 6, 16, 3, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 903112038, 'comment_body': 'what are ""Samples"" here?  Are they entire training samples along axis 0?\r\n\r\nLet\'s also use DropPath as the actor in the sentence structure:\r\n\r\nDropPath randomly drops samples during training with a probability of `rate`.', 'comment_created': datetime.datetime(2022, 6, 21, 22, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 903112363, 'comment_body': 'I updated our lint rules so you can use full links now :)', 'comment_created': datetime.datetime(2022, 6, 21, 22, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 903113735, 'comment_body': 'can we seed this?', 'comment_created': datetime.datetime(2022, 6, 21, 22, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 903113941, 'comment_body': 'lets add a seed argument here, perhaps we may want to subclass tf.keras.__internal__.layers.BaseRandomLayer.\r\n\r\nAll layers with random behavior should be seedable.', 'comment_created': datetime.datetime(2022, 6, 21, 22, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 903114226, 'comment_body': 'I recommend seeding as follows:\r\n\r\nlayer = DropPath(rate=0.5, seed=42)', 'comment_created': datetime.datetime(2022, 6, 21, 22, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 903185170, 'comment_body': '@LukeWood I think it would also make sense to add a sentence noting the difference between DropPath and StochasticDepth?', 'comment_created': datetime.datetime(2022, 6, 22, 0, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 903185431, 'comment_body': ""If so, the `seed` should be set to what's passed to the constructor I guess."", 'comment_created': datetime.datetime(2022, 6, 22, 0, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 903185577, 'comment_body': 'Nevermind, your https://github.com/keras-team/keras-cv/pull/480#discussion_r903113941 clears this.', 'comment_created': datetime.datetime(2022, 6, 22, 0, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 903186211, 'comment_body': 'Great idea', 'comment_created': datetime.datetime(2022, 6, 22, 0, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 903314222, 'comment_body': '> Are they entire training samples along axis 0?\n\nIt drops some samples along the axis 0. I\'ll add the following sentence: ""DropPath randomly drops some of the individual samples from a batch, whereas StachasticDepth randomly drops the entire batch.""', 'comment_created': datetime.datetime(2022, 6, 22, 6, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 903314438, 'comment_body': 'Awesome!', 'comment_created': datetime.datetime(2022, 6, 22, 6, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 904421844, 'comment_body': 'Awesome!  Resolve this conversation when done.', 'comment_created': datetime.datetime(2022, 6, 23, 0, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}]","[{'commit_sha': 'b23811d09dceabfb9d93f42f20e1cc31059d3b17', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '669cbe330aa83c3cac0d281953a429ffbab1a34b', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3af64561de159a57ae660745d2ff54de5f35a2', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24339510083b0b1e62c5425b2f7542dc75dbec57', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51d6bc57b3447841434af0a301a0a836f18fc284', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd63c6008b42227114c7b35136a3e95e78432d18b', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2fa9afc9d78f7b498da9e8d42114b719d9fcd1', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d84a290d19fba7b042b53bbc36a8cd89a43af36', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf4139640ae773a11c9d75b776e24e05febd065', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '000bfa33f680c858d99c75a17817d8f3d42dd0eb', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e66a23c580ca4d0c2b6f2da19dd6ec257c8317c', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d37c6a55a35da9a8a8be64c53e9eead5cdec14', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed8629bc7b4e052ed0433bdd9b5eed8b107b1ef6', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0083e0fb1a9feee2212d56d185ceedc2f2b41aed', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'febe287c2f1c466e073c64e219700cd9085a96b9', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}]",Aditya Kane,64411306,,User,,113,,53,62
971746011,Squeeze and Excite block,"Added SE Block. As discussed, this one can be done after #480 and #499 are merged.

/auto Closes #167",True,505,https://api.github.com/repos/keras-team/keras-cv/pulls/505,https://github.com/keras-team/keras-cv/pull/505,closed,180,0,5,15,10,34,1,0,[{'name': 'GSoC 2022'}],2022-06-20 05:10:40+00:00,2022-07-07 19:51:45+00:00,1521665.0,"17 days, 14:41:05","[{'comment_id': 902197529, 'comment_body': ""Let's do as follows to get rid of reshape layer.\r\n\r\n```python\r\nself.ga_pool = layers.GlobalAveragePooling2D(keepdims=True)\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 6, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'innat', 'type': 'User'}, {'comment_id': 906667419, 'comment_body': '```suggestion\r\n    x = tf.keras.layers.Conv2D(16, (3, 3))(input)\r\n```', 'comment_created': datetime.datetime(2022, 6, 25, 10, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 906667552, 'comment_body': 'Prefer `batch_size` over `B`.', 'comment_created': datetime.datetime(2022, 6, 25, 10, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 906686865, 'comment_body': 'Should we also add a test to check if the number of input and output filters are the same? ', 'comment_created': datetime.datetime(2022, 6, 25, 13, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 906695965, 'comment_body': 'I think `maintains_shape` takes care of that.', 'comment_created': datetime.datetime(2022, 6, 25, 15, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 906696269, 'comment_body': 'Added space between (3,3) manually.', 'comment_created': datetime.datetime(2022, 6, 25, 15, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 908817105, 'comment_body': 'Expand variable names,\r\n\r\n```\r\nga_pool => global_average_pool\r\n```', 'comment_created': datetime.datetime(2022, 6, 28, 18, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 908817411, 'comment_body': 'se_filters => bottleneck_filters ', 'comment_created': datetime.datetime(2022, 6, 28, 18, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 908824686, 'comment_body': 'Do we need to support `squeeze_activation`, `excite_activation` parameters?', 'comment_created': datetime.datetime(2022, 6, 28, 18, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 908825039, 'comment_body': 'we can support the use in https://github.com/keras-team/keras-cv/pull/526/files#diff-52481695cbe3cc1b1e1268ba5dd06ff45c52a4b204025e5b2c0b99ef1a277cfaR46 if we do this', 'comment_created': datetime.datetime(2022, 6, 28, 18, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 908827633, 'comment_body': ""![image](https://user-images.githubusercontent.com/64411306/176258786-23bbabb7-11a3-4bb2-9cc3-f5e53a8eaee7.png)\r\nThis implementation is based on the original paper (https://arxiv.org/pdf/1709.01507.pdf), so I think ReLU and Sigmoid are more or less mandatory. But would like to hear your and @sayakpaul's thoughts on the same."", 'comment_created': datetime.datetime(2022, 6, 28, 18, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 908844013, 'comment_body': 'MobileNetv3 uses SE blocks with HardSigmoid - we should support this level of parameterization whether or not the original paper used that or not.  \r\n\r\nKeep in mind ML research moves fast, and while research is great to reference it should not be treated as a hard source of truth.  Another examples of this is that ML research has a tendency to give things strange names that stick for a year or two, then are left behind in favor of a more idiomatic name.  This has happened numerous times, and as such we pick names based on idiomaticness rather than their name in the research - excluding some niche cases like RandAugment.', 'comment_created': datetime.datetime(2022, 6, 28, 19, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 909339508, 'comment_body': ""Makes sense. Thanks for the detailed explanation. I'll make the changes and re-request a review."", 'comment_created': datetime.datetime(2022, 6, 29, 8, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 909344451, 'comment_body': '`squeeze_activation` is a better naming than `excite_activation` IMO.', 'comment_created': datetime.datetime(2022, 6, 29, 8, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 909346663, 'comment_body': '@sayakpaul I agree but I guess we need to have both of those (one for squeeze conv and other for excite conv).', 'comment_created': datetime.datetime(2022, 6, 29, 8, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 909349515, 'comment_body': ""Oh yes, sorry I got mixed up. Supporting these two as per Luke's suggestions seems perfectly valid to me. "", 'comment_created': datetime.datetime(2022, 6, 29, 8, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 909395184, 'comment_body': ""@sayakpaul @LukeWood \r\n\r\nI was hoping to support a keras Layer as an argument to `squeeze_activation` and `excite_activation`, keeping in mind the MobileNetV3 use case. However, in that case, in the `get_config` method `squeeze_activation` or `excite_activation` will be keras Layers, which won't be serializable. I tried to work past it, but I couldn't find a way. Is there any workaround for this?"", 'comment_created': datetime.datetime(2022, 6, 29, 9, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 909397348, 'comment_body': ""> However, in that case, in the get_config method squeeze_activation or excite_activation will be keras Layers, which won't be serializable. \r\n\r\nWhy won't they be serializable? \r\n\r\nI think we could support strings that can be directly passed to `activation` or we could allow users to pass functions rather than layers. "", 'comment_created': datetime.datetime(2022, 6, 29, 9, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 909403830, 'comment_body': ""> I think we could support strings that can be directly passed to activation or we could allow users to pass functions rather than layers.\r\n\r\nSure, since the functional versions of activations are a strict superset (I believe) of the layer versions of the same, it would be favorable.\r\n\r\nJust as a side note, it is interesting to see if one can get layers to be serializable whose arguments are layer objects. I tried it just now but it isn't as simple as it seems 😅 "", 'comment_created': datetime.datetime(2022, 6, 29, 9, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 909411108, 'comment_body': 'Definitely. For one moment, I got confused with `tf.keras.initializers.*`. We can pass a class under it (such as `VarianceScaling`) to arguments like `kernel_initializer`. But this is not a layer like you mentioned. ', 'comment_created': datetime.datetime(2022, 6, 29, 9, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 910204212, 'comment_body': ""> > I think we could support strings that can be directly passed to activation or we could allow users to pass functions rather than layers.\r\n> \r\n> Sure, since the functional versions of activations are a strict superset (I believe) of the layer versions of the same, it would be favorable.\r\n> \r\n> Just as a side note, it is interesting to see if one can get layers to be serializable whose arguments are layer objects. I tried it just now but it isn't as simple as it seems 😅\r\n\r\nCan you paste a snippet of the issue here?  I think layers to the constructor should be serializable - it should call their get_config() under the hood if I remember correctly."", 'comment_created': datetime.datetime(2022, 6, 29, 16, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 910211410, 'comment_body': 'Sure. \r\n\r\nCode which raises error:\r\n```py\r\n    def get_config(self):\r\n        config = {\r\n            ""filters"": self.filters,\r\n            ""ratio"": self.ratio,\r\n            ""squeeze_activation"": self.squeeze_activation, # instance of, say, tf.keras.layers.ReLU()\r\n            ""excite_activation"": self.excite_activation,\r\n        }\r\n        base_config = super().get_config()\r\n        return dict(list(base_config.items()) + list(config.items()))\r\n```\r\nerror log: shared on https://codeshare.io/3AMwy6\r\n\r\n\r\nMy workaround:\r\n```py\r\ndef get_config(self):\r\n        squeeze_activation_serialized = (\r\n            serialize(self.squeeze_activation)\r\n            if hasattr(self.squeeze_activation, ""__call__"")\r\n            else self.squeeze_activation\r\n        )\r\n        excite_activation_serialized = (\r\n            serialize(self.excite_activation)\r\n            if hasattr(self.squeeze_activation, ""__call__"")\r\n            else self.excite_activation\r\n        )\r\n\r\n        config = {\r\n            ""filters"": self.filters,\r\n            ""ratio"": self.ratio,\r\n            ""squeeze_activation"": squeeze_activation_serialized,\r\n            ""excite_activation"": excite_activation_serialized,\r\n        }\r\n        base_config = super().get_config()\r\n        return dict(list(base_config.items()) + list(config.items()))\r\n\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 17, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 910289598, 'comment_body': 'please add a test case covering custom activations: https://github.com/keras-team/keras/issues/4076#issue-183230193', 'comment_created': datetime.datetime(2022, 6, 29, 18, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 910329763, 'comment_body': '@LukeWood \r\nAdded test. \r\nPlease see #544 before this one. I have changed the docstring assuming that one is merged before this one.', 'comment_created': datetime.datetime(2022, 6, 29, 19, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 910335765, 'comment_body': 'replace function with ""callable"" (or tf.keras.Layer), replace tf.keras.activations.* with ""tf.keras.activations.Activation"" -> we have a base class for these.\r\n\r\nAlso you forgot a space after optional :)', 'comment_created': datetime.datetime(2022, 6, 29, 19, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 910371085, 'comment_body': '@LukeWood even with the change in serialization_test, it errors out for activation functions. The earlier way seems to work though:\r\n```py\r\n\r\ndef get_config(self):\r\n        squeeze_activation_serialized = (serialize(self.squeeze_activation)\r\n                                         if hasattr(self.squeeze_activation,\r\n                                                    ""__call__"") else\r\n                                         self.squeeze_activation)\r\n        excite_activation_serialized = (serialize(self.excite_activation)\r\n                                        if hasattr(self.squeeze_activation,\r\n                                                   ""__call__"") else\r\n                                        self.excite_activation)\r\n\r\n        config = {\r\n            ""filters"": self.filters,\r\n            ""ratio"": self.ratio,\r\n            ""squeeze_activation"": squeeze_activation_serialized,\r\n            ""excite_activation"": excite_activation_serialized,\r\n        }\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 20, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 910377496, 'comment_body': 'can you link the error?', 'comment_created': datetime.datetime(2022, 6, 29, 20, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 910383617, 'comment_body': 'This one is a bit weird. Here\'s the test case:\r\n```py\r\n        (\r\n            ""SqueezeAndExciteBlock2D"",\r\n            regularization.SqueezeAndExciteBlock2D,\r\n            {\r\n                ""filters"": 16,\r\n                ""ratio"": 0.25,\r\n                ""squeeze_activation"": tf.keras.layers.ReLU(),\r\n                ""excite_activation"": tf.keras.activations.relu,\r\n            },\r\n        ),\r\n\r\n```\r\nError trace: https://codeshare.io/3AMwqv\r\n\r\nI have inserted the print statements as follows:\r\n```py\r\ndef custom_compare(obj1, obj2):\r\n    print(""#"" * 20, ""custom_compare"")\r\n\r\n    if isinstance(obj1, (core.FactorSampler, tf.keras.layers.Layer)):\r\n        print(obj1.get_config())\r\n        print(obj2.get_config())\r\n        return config_equals(obj1.get_config(), obj2.get_config())\r\n    else:\r\n        return obj1 == obj2\r\n\r\n\r\ndef config_equals(config1, config2):\r\n    print(""#""*20, ""config_equals"")\r\n    print(config1)\r\n    print(config2)\r\n    for key in list(config1.keys()) + list(config2.keys()):\r\n        v1, v2 = config1[key], config2[key]\r\n        if not custom_compare(v1, v2):\r\n            return False\r\n    return True\r\n\r\n```\r\n', 'comment_created': datetime.datetime(2022, 6, 29, 20, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 910384615, 'comment_body': 'Note that the function is getting ""auto-serialized"":\r\n\r\n```\r\noriginal: {\'name\': \'squeeze_and_excite_block2d\', \'trainable\': True, \'dtype\': \'float32\', \'filters\': 16, \'ratio\': 0.25, \'squeeze_activation\': <keras.layers.activation.relu.ReLU object at 0x0000025EC9F39208>, \'excite_activation\': <function relu at 0x0000025EF179B318>}\r\nrestored: {\'name\': \'squeeze_and_excite_block2d\', \'trainable\': True, \'dtype\': \'float32\', \'filters\': 16, \'ratio\': 0.25, \'squeeze_activation\': <keras.layers.activation.relu.ReLU object at 0x0000025EF1D86088>, \'excite_activation\': \'relu\'}\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 20, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 910385224, 'comment_body': 'The paste is empty. ', 'comment_created': datetime.datetime(2022, 6, 29, 20, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 910385817, 'comment_body': 'This code is still working: it is serializing and deserializing a relu activation.  the code should not be changed to work around the test case.  The test case should be changed to work around the code 👍 ', 'comment_created': datetime.datetime(2022, 6, 29, 20, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 910388259, 'comment_body': 'Could you try this one: https://www.codepile.net/pile/nP5Nnyl4', 'comment_created': datetime.datetime(2022, 6, 29, 20, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 916092068, 'comment_body': 'we can probably drop the name `Block` from this.  `SqueezeAndExcite2D` sounds nice.', 'comment_created': datetime.datetime(2022, 7, 7, 16, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 916092545, 'comment_body': ""brief overview of what this does would be good.  without context readers won't know what ratio really means (ie. they won't know what a bottleneck filter is at all!)"", 'comment_created': datetime.datetime(2022, 7, 7, 16, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}]","[{'commit_sha': '6b1db1f9b9a3f9ada9bf023a5237ae4efea9ecbf', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f53e296cca53d4a9e21d69791d18de81da5a84ef', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c364ccea375e3177d8f2166f78a209117977329d', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82babec9f2b92c79597b835b33816c938812824d', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e58882d55014edcfeee4f3251208ccff72fd1a9a', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08de268c433998df60d5257a9028351b2f448c3', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531ebdbb78376e326b635c32370a99ab94e61931', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22bf4574218aff37a57ff8c6c158f1550097428a', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e20dc8ff9342306bcf4de5740c5d2f5be0059b29', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ccac05607aed643d6ce36d08ea04695bfd9bab', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27830dbd6fcf83011cd20f6286d244b284ca4278', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f3b2d42e7842b24269af1f63d0fe1dd4a85c36c', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8783387dadad2060044333285051c7aff41b5867', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8107aa62aa570df816a062f2c3b61e478cf520', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1033b9c70c98ac933ec2ea45bf42ac48d496aa8e', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}]",Aditya Kane,64411306,,User,,113,,53,62
1039362133,"Split RandomlyResizedCrop into two API surfaces (RandomlyZoomedCrop, RandomCropAndResize)","@sayakpaul @LukeWood @martin-gorner

As discussed in #676 I have updated the RRC code to incorporate `zoom_factor`. I will be adding a Colab gist demonstrating the layer and to verify that it works as expected.

/auto Closes #676 ",True,738,https://api.github.com/repos/keras-team/keras-cv/pulls/738,https://github.com/keras-team/keras-cv/pull/738,closed,492,33,12,39,64,4,0,0,[],2022-08-29 08:49:43+00:00,2022-09-22 23:34:28+00:00,2126685.0,"24 days, 14:44:45","[{'comment_id': 957555709, 'comment_body': 'you can achieve this behavior using negative indices:\r\n\r\noriginal_heights = image.shape[-2] I believe should work!  examples of this are available in RandomCrop/RandomHeight', 'comment_created': datetime.datetime(2022, 8, 29, 16, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 968882723, 'comment_body': 'can we add some comments to justify each case?  Just to improve maintainability', 'comment_created': datetime.datetime(2022, 9, 12, 20, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 975608530, 'comment_body': 'lets actually make these a dictionary.', 'comment_created': datetime.datetime(2022, 9, 20, 16, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 976299693, 'comment_body': 'Probable error in the docstring:\r\nThe amount of distorsion is proportional to aspect_ratio_factor, not the zoom_factor. Distorsion means changing the aspect ratio, not zooming.', 'comment_created': datetime.datetime(2022, 9, 21, 9, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'martin-gorner', 'type': 'User'}]","[{'commit_sha': '9d36b7a67c6e0ec24364d3c397e934bf3654b853', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '815a3ac843b76118d24dcb4723e2873eb43455bb', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b897f349129f7c13d55510b58f592c85a3efdedc', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108b2997369cdd4004b5bd33630bacec18b60048', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2e98f44c4cfea9cc610bc191658d5779ad12aa', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'decd1ebf6e3ff77bfdde4a8549dde535d39eb646', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bf9994240b06284a8fe814681dbb26089b72af', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d6bb401f6b195db412a8618c287ae15edf7391', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71395404be732d6be16eb6808367d01a248f73e9', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19de16f7746ebff6b2c9f65d75ad77cc2b729060', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '972cdcbfbfcab752377badcf142bcc043161095a', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aef55ad457c98cfadd67c740418c10066923b3b', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eacdc4f930ca6287b05fd803625c8183c4e28a1', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198192810c73de2c8db3580884acd982af7125fc', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3158fd4f5f75d533864089083345774802d0cd2', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8bbca8c71918e050f00c1e3f75be8e1f8152f8', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f40f3a5ff678a01ca536ca92080ee8f4f3dbb3db', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c336c45224b52d3a824e81ebaf0e7acea00f91', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '849e40ff02d76c07cf85d0ba040d5cdfcf954827', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53182e83bda9204c51b71abc6e6532cba3f59d3', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d87fc1b5d7af603e7434e5c8473be5f969cc68', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc3fd597f6992077e9be5c92df419dfbe33c28d', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8cb71e5d13c12fe37f2cafee02707f19ab25e6', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a733fffc7b8fb932a0b7ec231ef878e5cac4fff7', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7be66f1b0b8bfd4f2415abcb7ad7bd0dda0d04d', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cb5149784084e031842df53268f2fef504c341c', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35b0086ba9fb5d86f2852964f73ec56c297807d', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06b0cd76d295fda1e6dc5c7c7a46471f2b57a2ff', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '138522831477ff4b4c5b3b56626b54c6ad3ab619', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9acc0241b9621c53e8eab306d1dfdde6be06bcaf', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '900e9fb93cc8497524d15d3fcaac2b6a7e37f911', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d7d2e8d8b3abb324104e44e7c7e8992d402a641', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2093b52fb1260e01da6f16a2205658d033e08c3', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc26727bd3a9b34fa1ba80db4e21d231712d4372', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7880d17e1ece108078ecfba55d53a524b78da870', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8871e47248b154d9b1f6c4de525b3242a52fd8', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55bbb143d03272405f1c0a5ee6f43a58d3eac354', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f132ab5a1232bb94d3fb3f085a19679800f0ed9', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0f42522aafa89e3a19c1ad348ae248cc76ca7d', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}]",Aditya Kane,64411306,,User,,113,,53,62
1039389187,Porting EfficientNets to KerasCV,"@sayakpaul @LukeWood 

Added Efficientnets as discussed in #625.

/auto Closes https://github.com/keras-team/keras-cv/issues/551",True,740,https://api.github.com/repos/keras-team/keras-cv/pulls/740,https://github.com/keras-team/keras-cv/pull/740,closed,2096,0,5,10,11,1,0,0,[],2022-08-29 09:14:16+00:00,2022-09-10 20:40:01+00:00,1077945.0,"12 days, 11:25:45","[{'comment_id': 960951275, 'comment_body': 'we use a standard rescaling in KerasCV:\r\n\r\nRescaling(1/255.0) - you can drop the normalization and other rescaling.', 'comment_created': datetime.datetime(2022, 9, 1, 17, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}]","[{'commit_sha': '89f9ff6a66701ca05e02194587a48268ecc2c944', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6807ad98ee416e8fb33d0d9c7a10286659384dde', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31663338d8c81fe3bf1c95b237d128fad0176c87', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6874af906b8906b36468600887d6971eec68776', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04a496a361f55ced9e3f72102b891e63635d288', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe722e2aa5cf80b8612370e16fa25fc79a1f7be', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c667356cff1e8c215ecb752ae59f9a739e6c4de8', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16f54c47c003dc6122f230d56066c132cddd0e71', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '765e80bb67f6c19cb20502038fb2c824e76031d1', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bdd2fd1c6dcb5f4e7299fd8ebc4cbc78b00bae', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}]",Aditya Kane,64411306,,User,,113,,53,62
1039379923,Adding RegNets to keras_cv,"@sayakpaul @LukeWood 

Added RegNets to keras_cv as per discussions in  #679, #530 , #552 , #590 

/auto Closes #530 ",True,739,https://api.github.com/repos/keras-team/keras-cv/pulls/739,https://github.com/keras-team/keras-cv/pull/739,closed,1693,0,4,28,17,4,0,0,[],2022-08-29 09:06:15+00:00,2022-11-16 19:35:47+00:00,6863372.0,"79 days, 10:29:32","[{'comment_id': 1022856711, 'comment_body': '`classes` should be specified iff `include_top` is true (independent of whether `weights` is specified)', 'comment_created': datetime.datetime(2022, 11, 15, 14, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 1022927769, 'comment_body': ""> Training scripts live in examples/training/classification/imagenet and you could add yours as regnet_training.py or similar.\r\n\r\nSure. I'll add that in a new PR>"", 'comment_created': datetime.datetime(2022, 11, 15, 15, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 1022964140, 'comment_body': ""sgtm. If you can update this `classes` docstring, I'll go ahead and and merge this one"", 'comment_created': datetime.datetime(2022, 11, 15, 15, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 1023034881, 'comment_body': '@ianstenbit \r\n\r\nDone.', 'comment_created': datetime.datetime(2022, 11, 15, 16, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}]","[{'commit_sha': '7b4b5276687e831624cf2b620813c15a1ca444eb', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ecee5afbca2eccfa9c1858de4f5924be45c78b0', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7bdee18ae4b5c2ea097f1b9152e03c25f20d156', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6644fd344fb387aee8b0e625b18289cedf151e', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e82a77b36bdc319d8566a7f7366aacc90f9568', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ccca42866f035559af9b3605dead64cdd5ba308', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3efe4b358e294e6b4c228a392927001ec1a3bbb8', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df061df97eaef8a7559fb391b2c0142845728f26', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e5c6d54fb2cb21aebe3b6da99a3fb103703de7b', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4597679ea85cb2642f2832bfa5f09457af681e79', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c0fe1f56a189ee57bb57833850c750650089ca', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf93ec6e0e653f88bbbfbef293f4e3b2a4c1221d', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a58ace4a784900cd8203f0ef0ae28155dff900', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ff4ff0b078d571d8117b64affde4532c20de89', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d4db12981bc2a7c4913fa0536727ef8aff5238a', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef728c0e54b7e1eb8e9453c7f1e8c226217d1b6', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e6c2ac87920dee54839703eb9a2ab7c80cb527', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b15f88f6226a1a8207d6ebf417e0271b3265a70', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e5e3317044ed7b9b211e52c7f1834687d070b2', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a204ced226cf2b5d867bb7192374004b3b0f63f0', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede168a9cd4963ed106a485ee1702c0e9d13b450', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '362d66d6264b949848d7eeecb19f16c34f000922', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86085a75224ad8e93d31f3996c9b33e72ee6252f', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90319746587b09eea803ab272012c0333265d70', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345a512082346606f5a337932d964d6ee92b3886', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75671a5607f65853f850746faf47faba2e30e200', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e1c1b654ce205f3a6afead74b77e51d692cca1f', 'committer_username': 'LukeWood', 'committer_name': 'Luke Wood', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 30, 20, 35, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9aac2b203c0a543b9b7dfb0768d47489d348a2', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}]",Aditya Kane,64411306,,User,,113,,53,62
985588882,Porting over ResNets from keras.applications,"@sayakpaul @LukeWood 

Ported over ResNets from keras applications. Most of the code is same as it was with minor changes as discussed in #476. 

Both `keras.applications.resnet.py` and `keras.applications.resnet_v2.py`  have been combined into one file since they belong to the same family of models. `block3` and `stack3` from `resnet.py` was removed as it was redundant. 

/auto Closes #78 ",True,558,https://api.github.com/repos/keras-team/keras-cv/pulls/558,https://github.com/keras-team/keras-cv/pull/558,closed,738,0,4,12,12,53,1,0,[{'name': 'awaiting review'}],2022-07-02 20:32:04+00:00,2022-07-21 17:07:00+00:00,1629296.0,"18 days, 20:34:56","[{'comment_id': 916700475, 'comment_body': 'Do we have an example of ResNeXt?', 'comment_created': datetime.datetime(2022, 7, 8, 10, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 916701257, 'comment_body': 'Would it make sense to add a comment here denoting the differences between ResNet v1 and v2?', 'comment_created': datetime.datetime(2022, 7, 8, 10, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 916701597, 'comment_body': 'Nevermind, I see that in the docstring.', 'comment_created': datetime.datetime(2022, 7, 8, 10, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 916702210, 'comment_body': 'Would it make sense to add a shot description of how the v1 block differs from the v2 block?', 'comment_created': datetime.datetime(2022, 7, 8, 10, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 916702903, 'comment_body': '```suggestion\r\n    """"""A residual block (v2).\r\n```', 'comment_created': datetime.datetime(2022, 7, 8, 10, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 916708359, 'comment_body': 'If we have It will cover https://github.com/keras-team/keras-cv/issues/37', 'comment_created': datetime.datetime(2022, 7, 8, 11, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bhack', 'type': 'User'}, {'comment_id': 916941604, 'comment_body': ""I removed the Resnext block from the file, I'll change the docstring as well. I thought it would be best that we support ResNetv1&2  for the time being, as ResneXt is not supported by `keras.applications` as of now either."", 'comment_created': datetime.datetime(2022, 7, 8, 15, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AdityaKane2001', 'type': 'User'}, {'comment_id': 919241064, 'comment_body': 'great, yeah update the docstring please!', 'comment_created': datetime.datetime(2022, 7, 12, 17, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919241331, 'comment_body': 'lets not abbreviate this.  use_preactivation would be easier to read', 'comment_created': datetime.datetime(2022, 7, 12, 17, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919241453, 'comment_body': 'missing space before if', 'comment_created': datetime.datetime(2022, 7, 12, 17, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919241845, 'comment_body': 'is the indentation right for Returns?', 'comment_created': datetime.datetime(2022, 7, 12, 17, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919242634, 'comment_body': 'why is this here for the not case?', 'comment_created': datetime.datetime(2022, 7, 12, 17, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919243462, 'comment_body': 'a comment would be helpful too.  I agree - the resnet code is harder to follow due to the reuse', 'comment_created': datetime.datetime(2022, 7, 12, 17, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919243682, 'comment_body': '+1', 'comment_created': datetime.datetime(2022, 7, 12, 17, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919245106, 'comment_body': 'meta comment: Is it even worth resharing the ResNet body across v1 and v2?   \r\n\r\nTo me it makes the code HARDER to read by adding an extra level of indirection', 'comment_created': datetime.datetime(2022, 7, 12, 17, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 919305150, 'comment_body': 'This looks like it was accidentally stringified', 'comment_created': datetime.datetime(2022, 7, 12, 18, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 919306788, 'comment_body': ""In the VGG and DenseNet impls in keras_cv, we use kwargs as a pass-through for params to Keras.model(). I think we should remain consistent with that here.\r\n\r\nEither way, I don't think we need to include them for backwards-compatability as this is being moved to a new namespace."", 'comment_created': datetime.datetime(2022, 7, 12, 18, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 919307852, 'comment_body': 'nit: I think we can drop this (same on line 313)', 'comment_created': datetime.datetime(2022, 7, 12, 18, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924616367, 'comment_body': '👍\r\n\r\nI think keeping the configs in the form of a dictionary helps provide a clear separation between the different parameters. ', 'comment_created': datetime.datetime(2022, 7, 19, 15, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924617713, 'comment_body': 'Do we want to spell out the arguments too to keep it consistent with the rest? Applies elsewhere too. ', 'comment_created': datetime.datetime(2022, 7, 19, 15, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924618938, 'comment_body': ""Since we're separating V1 and V2 already, I don't think this needs to be called `V1Block()`. Just `Block()` sounds good to me."", 'comment_created': datetime.datetime(2022, 7, 19, 15, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924621474, 'comment_body': ""Possible to delegate this to a separate function called something like `conv_bn_relu()`?  I am suggesting it because it's been used many times. Or would it make the code more complicated? "", 'comment_created': datetime.datetime(2022, 7, 19, 15, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924622052, 'comment_body': ""I don't think `V1` prefix is needed here and elsewhere. "", 'comment_created': datetime.datetime(2022, 7, 19, 15, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924625255, 'comment_body': ""Let's maybe raise a warning when both `include_top` and `pooling` are passed?"", 'comment_created': datetime.datetime(2022, 7, 19, 15, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924625709, 'comment_body': 'Argument spelling out. ', 'comment_created': datetime.datetime(2022, 7, 19, 15, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924628793, 'comment_body': ""Since this doesn't contain pre-trained weights let's have the `num_classes` and related argument as optional or required. An example is here: https://github.com/keras-team/keras-cv/pull/529/files."", 'comment_created': datetime.datetime(2022, 7, 19, 15, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sayakpaul', 'type': 'User'}, {'comment_id': 924744877, 'comment_body': 'nit: for KerasCV', 'comment_created': datetime.datetime(2022, 7, 19, 16, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924747391, 'comment_body': 'It looks like this isn\'t being used -- please include\r\n\r\n`setattr(ResNet50, ""__doc__"", BASE_DOCSTRING.format(name=""ResNet50""))` for each of the models, here and in V2\r\n\r\n(You can also drop the docstrings inside of the specific model methods such as `RestNet50`)', 'comment_created': datetime.datetime(2022, 7, 19, 16, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924750716, 'comment_body': ""nit: this method is now only V1, so the docstring shouldn't mention V2."", 'comment_created': datetime.datetime(2022, 7, 19, 16, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924753147, 'comment_body': ""This will never evaluate to true since `num_classes` has a default value. For consistency and clarity of behavior, let's make `num_classes` default to `None`."", 'comment_created': datetime.datetime(2022, 7, 19, 16, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924754899, 'comment_body': 'I think this is a reasonable warning, and if we include it here we should also update other KerasCV models to do the same (in this PR or a separate PR is fine with me)', 'comment_created': datetime.datetime(2022, 7, 19, 17, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924757046, 'comment_body': '(Same as in V1) -- please format and use this docstring as the __doc__ attribute for the exported model methods.', 'comment_created': datetime.datetime(2022, 7, 19, 17, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924757837, 'comment_body': 'nit: V2 only', 'comment_created': datetime.datetime(2022, 7, 19, 17, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924758874, 'comment_body': ""(Same as V1) -- let's make this default to `None`"", 'comment_created': datetime.datetime(2022, 7, 19, 17, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924760187, 'comment_body': ""For this internal method, and the V1 equivalent, let's default `include_top` to `None` for consistency with the external API.\r\n\r\nWhile this doesn't change behavior, it makes the behavior a bit more explicit"", 'comment_created': datetime.datetime(2022, 7, 19, 17, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 924760908, 'comment_body': '(Same as V1) -- these docstrings can be removed since they will be overwritten by a `setattr` call', 'comment_created': datetime.datetime(2022, 7, 19, 17, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 925744985, 'comment_body': ""My apologies -- I misspoke here. I meant let's make this a required parameter with no default."", 'comment_created': datetime.datetime(2022, 7, 20, 15, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 925746107, 'comment_body': ""For consistency with your changes in V1, let's drop the V2 suffix from these as well in this version"", 'comment_created': datetime.datetime(2022, 7, 20, 15, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 925747738, 'comment_body': ""(Same here as in my other comment -- let's make this required instead of default `None`)\r\nagain -- my mistake I misspoke on my first comment."", 'comment_created': datetime.datetime(2022, 7, 20, 15, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ianstenbit', 'type': 'User'}, {'comment_id': 926028874, 'comment_body': '+1', 'comment_created': datetime.datetime(2022, 7, 20, 20, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 926029860, 'comment_body': 'you need to assign `inputs = img_inputs` above before you override it in line 231', 'comment_created': datetime.datetime(2022, 7, 20, 20, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 926030030, 'comment_body': 'add `inputs = img_input` here', 'comment_created': datetime.datetime(2022, 7, 20, 20, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 926030706, 'comment_body': 'my recommendation would be to instead of reuse img_input, instead do:\r\n\r\nimg_input = layers.Input()\r\nx = img_input\r\n\r\nif include_rescaling:\r\n    x = layers.Rescaling(1/255.0)(x)\r\n\r\nx = layers.Conv2D(x)\r\n\r\nThis is less error prone than the approach you use here.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}, {'comment_id': 926031084, 'comment_body': 'same issue you here, you override img_input below here so your model construction will not do what you expect.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'LukeWood', 'type': 'User'}]","[{'commit_sha': 'f5e76217b5fdf0ae4062835ae7376c9a1f8c6edb', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1505379038de0406e652b9a998125e24bee8432b', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea5cba7430e51d345b15494606a298ecf767ab9', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1600226bb684df8cfd3c29ba47b87e487f74f4db', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c016a6cfa17b978a417cdddff3bdbcc5e0b690', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84547f346b135038e21a96e9b9ecf3b8a82b9ca4', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c145b9394da19d74f554d17da640f6373d5cd7', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753c989e12604be4819bde5ca2210d7cd6e25a1b', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b44dfaa3dd4b8b71acc07c2f826ace52c7f1053', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594b4f08edb0fbe38524638f96627a768204e6c4', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '868ad0aa83ba2bdc960fc2e41eee9d47cb01bb9f', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '772ea9495e4b3f990f979b37c82a859f777f86ca', 'committer_username': 'AdityaKane2001', 'committer_name': 'Aditya Kane', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 27, 11, 0, 10, tzinfo=datetime.timezone.utc)}]",Aditya Kane,64411306,,User,,113,,53,62

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
265079853,keras-cv,keras-team/keras-cv,Python,325,992,30,96,1212,208,15,42,"[{'id': 1039389187, 'number': 740, 'closed': datetime.datetime(2022, 9, 10, 20, 40, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 9, 14, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1077945.0, 'time_delta': '12 days, 11:25:45', 'additions': 2096, 'deletions': 0, 'state': 'closed'}, {'id': 1039379923, 'number': 739, 'closed': datetime.datetime(2022, 11, 16, 19, 35, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 9, 6, 15, tzinfo=datetime.timezone.utc), 'time_taken': 6863372.0, 'time_delta': '79 days, 10:29:32', 'additions': 1693, 'deletions': 0, 'state': 'closed'}, {'id': 1039362133, 'number': 738, 'closed': datetime.datetime(2022, 9, 22, 23, 34, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 8, 49, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2126685.0, 'time_delta': '24 days, 14:44:45', 'additions': 492, 'deletions': 33, 'state': 'closed'}, {'id': 1021180225, 'number': 679, 'closed': datetime.datetime(2022, 8, 29, 8, 51, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 8, 4, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1730835.0, 'time_delta': '20 days, 0:47:15', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1009456933, 'number': 625, 'closed': datetime.datetime(2022, 8, 29, 9, 6, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 10, 5, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2847687.0, 'time_delta': '32 days, 23:01:27', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1005211076, 'number': 610, 'closed': datetime.datetime(2022, 7, 22, 17, 38, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 6, 7, 54, tzinfo=datetime.timezone.utc), 'time_taken': 41410.0, 'time_delta': '11:30:10', 'additions': 67, 'deletions': 68, 'state': 'closed'}, {'id': 998471222, 'number': 591, 'closed': datetime.datetime(2022, 7, 21, 17, 9, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 16, 17, 53, 40, tzinfo=datetime.timezone.utc), 'time_taken': 429345.0, 'time_delta': '4 days, 23:15:45', 'additions': 59, 'deletions': 7, 'state': 'closed'}, {'id': 998443287, 'number': 590, 'closed': datetime.datetime(2022, 8, 5, 16, 36, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 16, 14, 58, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1733930.0, 'time_delta': '20 days, 1:38:50', 'additions': 1540, 'deletions': 0, 'state': 'closed'}, {'id': 985693241, 'number': 559, 'closed': datetime.datetime(2022, 7, 8, 18, 58, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 10, 38, 12, tzinfo=datetime.timezone.utc), 'time_taken': 462026.0, 'time_delta': '5 days, 8:20:26', 'additions': 16, 'deletions': 2, 'state': 'closed'}, {'id': 985588882, 'number': 558, 'closed': datetime.datetime(2022, 7, 21, 17, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 2, 20, 32, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1629296.0, 'time_delta': '18 days, 20:34:56', 'additions': 738, 'deletions': 0, 'state': 'closed'}, {'id': 983895938, 'number': 550, 'closed': datetime.datetime(2022, 6, 30, 17, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 14, 10, 59, tzinfo=datetime.timezone.utc), 'time_taken': 13621.0, 'time_delta': '3:47:01', 'additions': 75, 'deletions': 2, 'state': 'closed'}, {'id': 983022867, 'number': 544, 'closed': datetime.datetime(2022, 6, 29, 19, 41, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 29, 19, 30, 40, tzinfo=datetime.timezone.utc), 'time_taken': 643.0, 'time_delta': '0:10:43', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 977017134, 'number': 516, 'closed': datetime.datetime(2022, 6, 23, 17, 49, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 11, 25, 53, tzinfo=datetime.timezone.utc), 'time_taken': 23018.0, 'time_delta': '6:23:38', 'additions': 25, 'deletions': 11, 'state': 'closed'}, {'id': 971746011, 'number': 505, 'closed': datetime.datetime(2022, 7, 7, 19, 51, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 5, 10, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1521665.0, 'time_delta': '17 days, 14:41:05', 'additions': 180, 'deletions': 0, 'state': 'closed'}, {'id': 971336571, 'number': 503, 'closed': datetime.datetime(2022, 6, 19, 6, 48, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 18, 19, 5, 17, tzinfo=datetime.timezone.utc), 'time_taken': 42182.0, 'time_delta': '11:43:02', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 969695386, 'number': 499, 'closed': datetime.datetime(2022, 6, 29, 20, 10, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 19, 15, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1126514.0, 'time_delta': '13 days, 0:55:14', 'additions': 325, 'deletions': 0, 'state': 'closed'}, {'id': 969684193, 'number': 497, 'closed': datetime.datetime(2022, 6, 16, 20, 6, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 19, 1, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3889.0, 'time_delta': '1:04:49', 'additions': 15, 'deletions': 19, 'state': 'closed'}, {'id': 963712342, 'number': 480, 'closed': datetime.datetime(2022, 6, 24, 5, 0, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 5, 58, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1206137.0, 'time_delta': '13 days, 23:02:17', 'additions': 146, 'deletions': 0, 'state': 'closed'}, {'id': 960820327, 'number': 474, 'closed': datetime.datetime(2022, 6, 10, 5, 22, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 7, 19, 43, 27, tzinfo=datetime.timezone.utc), 'time_taken': 207548.0, 'time_delta': '2 days, 9:39:08', 'additions': 131, 'deletions': 0, 'state': 'closed'}]"
