pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1178315079,Maintain position in topic list when toggling topic list,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
-> This PR is based on the idea that just like a topic is always coupled with a stream, a stream can also be coupled with a particular a topic that was last focussed.
-> it solves the maintaining of focus of the topic list of a stream( say stream 1) from where the t button was pressed.
`api_types`: added new field ""curr_topic"" to Subscriptions
`buttons`: fill the `curr_topic` with topic button's name when `t` is pressed
`views`: In` TopicsView` when the view is created make the `""curr_topic""` focussed. (This would make the implementation work even if the topic list is rearranged as it depends on topic_name not the pos on the list)
`test_ui_tools`: change `self.view` to be a `MagicMock `object as `Mock `object is not subscriptable.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
https://github.com/zulip/zulip-terminal/issues/617
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behaviour)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first, commit to doing something
- maybe multiple commits doing similar things
-->
3rd and last commit is not related to the issue



",True,1277,https://api.github.com/repos/zulip/zulip-terminal/pulls/1277,https://github.com/zulip/zulip-terminal/pull/1277,closed,49,1,4,2,6,17,3,0,"[{'name': 'area: UI'}, {'name': 'size: M'}, {'name': 'PR ready to be merged'}]",2022-12-27 08:00:11+00:00,2023-09-18 05:57:04+00:00,22888613.0,"264 days, 21:56:53","[{'comment_id': 1071570128, 'comment_body': ""This file documents the data types we exchange with the Zulip API, so this change doesn't belong here.\r\n\r\n(I just opened #1286 to improve some docstrings/notes, including this)"", 'comment_created': datetime.datetime(2023, 1, 16, 20, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1071571939, 'comment_body': ""This sets the values in the model, which represent the state as seen by the user, not the UI state. It wouldn't necessarily not work, to put this here, but the data is local to the UI, so is likely easier to locate elsewhere."", 'comment_created': datetime.datetime(2023, 1, 16, 20, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1071574699, 'comment_body': 'When accessing the value here, note that this is diving into the (ideally private in future) stream_dict, inside the model, inside the view - inside each UI call. This suggests the state is better located closer, such as in the view itself.', 'comment_created': datetime.datetime(2023, 1, 16, 20, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178536665, 'comment_body': ""Since we're only using the stream_id here, not the button, can we initialize this in the main View class instead?"", 'comment_created': datetime.datetime(2023, 4, 27, 1, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178539229, 'comment_body': 'This would read more clearly if this was a call to a method on the view?', 'comment_created': datetime.datetime(2023, 4, 27, 1, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178539501, 'comment_body': 'Can we do more than the `Any` here?', 'comment_created': datetime.datetime(2023, 4, 27, 1, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178542090, 'comment_body': 'This long name, and using it twice, suggests assigning to a variable first to make it clearer to read.\r\n\r\nHowever, as with the setting/saving of the state, having an accessor for the state would be good, so you can write something like:\r\n```\r\nsaved_topic_state = self.view.saved_topic_in_stream_id(...)\r\nif saved_topic_state is not None:\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 1, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178543711, 'comment_body': ""It's good to place a blank line either side of the 'action' we're testing, to separate the 'arrange', 'act' and 'assert' sections."", 'comment_created': datetime.datetime(2023, 4, 27, 1, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178544320, 'comment_body': 'This is slightly simpler since you broke it out into a smaller function, but it still uses a lot of internal data. What if you passed in the stream+log and returned the index, for example?', 'comment_created': datetime.datetime(2023, 4, 27, 1, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1259506369, 'comment_body': 'Yep! we can directly use stream_dict in `ui.py`\r\n```\r\n for stream_id in self.model.stream_dict:\r\n            self.stream_topic_map[stream_id] = None\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 9, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1259541536, 'comment_body': 'This can be done in  `View` class in`ui.py`\r\n```\r\n   def update_stream_topic_map(self, stream_id: int, topic_name: str) -> None:\r\n        self.stream_topic_map[stream_id] = topic_name\r\n```\r\nand in `buttons.py`\r\n```\r\n self.view.update_stream_topic_map(self.stream_id,self.topic_name)\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 10, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1259547911, 'comment_body': 'Yup! `Optional[str]` can be used as the value is `None` or `topic_name: str`\r\n```\r\nself.stream_topic_map: Dict[int, Optional[str]]\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 10, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1263041374, 'comment_body': ""Note that we won't be guaranteed to know every stream in advance, particularly with subscribe/unsubscribe, so we'll always want to handle the 'not in dict' case. On that basis, I'm not sure if we gain anything by pre-initializing with None?\r\n\r\nNote that you can achieve this behavior by wrapping that into a small testable method which you can call from the focus-setting part, much like you'll have a method for the updating of the most-recently-focused topic."", 'comment_created': datetime.datetime(2023, 7, 13, 20, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1263046361, 'comment_body': ""Agreed, though for naming this, I'd recommend naming not from an implementation perspective but from the intent behind it. Yes this is updating a mapping - internally, at least for the moment, it may change later - but why is it being updated?"", 'comment_created': datetime.datetime(2023, 7, 13, 20, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1263049831, 'comment_body': ""To clarify this point, looking again my suspicion is that I meant you could adjust the function itself, which could make it easier to test?\r\n\r\nThis test method looks like it works - and we have quite a number like it - but you see how much mocking you need?\r\n\r\nIt's often easier to test a function which doesn't make a change itself, but rather determines what to do instead. You can still then test the result of the logic via return value(s). Similarly, in practice the input to the function might be the result of another small calculation function, but you can substitute fixed parameters while testing the original function. This decouples the code (and tests!) making it easier to change them independently later.\r\n\r\nApplying the idea here, one option would be to express this function as something like `focus_position_for_topic_name(Optional[str]) -> int`. You'd then test the expected focus position given different topic names, which in practice would come from the accessor method for the View mapping I mentioned elsewhere."", 'comment_created': datetime.datetime(2023, 7, 13, 20, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '24a70b276885a2fd7a4b1ee827f4a9a0d3ad1d0c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '63fce6b7aa0a921505344b34846b13f8ed1275b6', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}]",SUBHASISH BEHERA,92573882,,User,,72,,102,13
1486879206,Implement muted users,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?




### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [ ] Discussed in **#zulip-terminal** in `topic`
- [ ] Fully fixes #
- [X] Partially fixes issue #1001 
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [X] Manually - Behavioral changes
- [X] Manually - Visual changes
- [X] Adapting existing automated tests
- [ ] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [X] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [X] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [X] It has a commit summary describing the  motivation and reasoning for the change
- [X] It individually passes linting and tests
- [ ] It contains test additions for any new behavior
- [X] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
",False,1425,https://api.github.com/repos/zulip/zulip-terminal/pulls/1425,https://github.com/zulip/zulip-terminal/pull/1425,open,60,11,10,5,0,17,6,0,"[{'name': 'area: UI'}, {'name': 'size: L'}, {'name': 'area: event handling'}, {'name': 'PR awaiting update'}, {'name': 'missing feature: user'}, {'name': 'PR completion candidate'}]",2023-08-23 18:43:45+00:00,,0.0,,"[{'comment_id': 1304951975, 'comment_body': ""Please add a type for this; mypy guesses List[Any], likely since we don't have a type for initial_data.\r\n\r\nI'd suggest a leading underscore in the attribute name, to indicate this is intended for use internal to the model."", 'comment_created': datetime.datetime(2023, 8, 24, 23, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1304987388, 'comment_body': ""Note that this line will fail on older servers where `muted_users` is not present in initial_data, so you'll need to handle that situation.\r\n\r\nI'm not sure if we want to have `test_init` depend upon feature level (or server version), or have another test for this. I'd expect `self.muted_users` to be checked in `test_init` for now in any case."", 'comment_created': datetime.datetime(2023, 8, 25, 0, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1304990222, 'comment_body': 'Ideally we would pin down the Dict further by using a TypedDict. That would ensure that only the two specific str keys are allowed, even if all the values are of type int!', 'comment_created': datetime.datetime(2023, 8, 25, 0, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1304993002, 'comment_body': ""This same attribute is set later on already, so you shouldn't need this - it doesn't cause a problem, but it's confusing."", 'comment_created': datetime.datetime(2023, 8, 25, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1304993382, 'comment_body': ""If you don't include the timestamp data, it's worth including a comment noting it's available but unused."", 'comment_created': datetime.datetime(2023, 8, 25, 0, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1304996272, 'comment_body': 'This line is very similar to the one you have in the first commit which sets it from the value in initial data.\r\n\r\nUsing a private method which sets/updates the model data from server data passed in as an argument would keep that process centralized - eg. if we later wished to store the timestamp, or also synchronize with other data each time.', 'comment_created': datetime.datetime(2023, 8, 25, 0, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1304999953, 'comment_body': 'This is now the 3rd setting of `self.muted_users` - this time to a different type, though mypy cannot determine that.', 'comment_created': datetime.datetime(2023, 8, 25, 0, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305001874, 'comment_body': ""This seems unrelated to the `helper.py` change.\r\n\r\nI'd suggest placing it after the first commit with a simple test, at least for now."", 'comment_created': datetime.datetime(2023, 8, 25, 0, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305002778, 'comment_body': 'See elsewhere for discussion on whether we need this first.\r\n\r\nIf we do keep this:\r\n- `muted_messages` is a rather general name given we have muted streams and topics which can also affect the visibility of messages\r\n- do we need to cache this?', 'comment_created': datetime.datetime(2023, 8, 25, 0, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305005997, 'comment_body': ""We should know the sender of the message; can we use the accessor method you added instead of adding to the index?\r\n\r\nThat accessor method (function) could then likely be used in the various locations where you're directly accessing the model in this and the next commit."", 'comment_created': datetime.datetime(2023, 8, 25, 0, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305010426, 'comment_body': 'This should use the accessor as well, and the test should mock it.', 'comment_created': datetime.datetime(2023, 8, 25, 1, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305027970, 'comment_body': ""This works to indicate that the message is from a muted user, but we'll want this text to be something more user-friendly, and if we use it many places here the string should be a module-level constant."", 'comment_created': datetime.datetime(2023, 8, 25, 1, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305037425, 'comment_body': ""You should be able to retain the original code structure for the loop with a small change. It'd be ok to switch to this form for the loop if it was a lot more complex, but that doesn't seem necessary here.\r\n\r\nAlso, note that you've introduced self.recipients_list, which is used nowhere else, so if this were to be the new form of the loop, there is no need to add this new object attribute, it can simply be a local variable."", 'comment_created': datetime.datetime(2023, 8, 25, 1, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305082558, 'comment_body': ""Similar to above, we'll want this to be a more user-friendly text."", 'comment_created': datetime.datetime(2023, 8, 25, 3, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1305086509, 'comment_body': ""The comment should remain with the relevant code.\r\n\r\nIf you were unpacking once into the same variables, from an object that was dependent on the result of the conditional, unpacking overall would seem more reasonable. I'd suggest doing that, or simply assigning each individually in the top branch of the conditional."", 'comment_created': datetime.datetime(2023, 8, 25, 3, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1328130711, 'comment_body': 'True. However, I had a doubt regarding how to set `muted_users` for on load situation?\r\nThe function which you have suggested to create essentially work when an event occurs, but when the `initial_data` is first loaded, how will that be *set* by such a centralized method?', 'comment_created': datetime.datetime(2023, 9, 17, 18, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1329643733, 'comment_body': 'The only difference I saw is whether it is created from `event` or `initial_data`.\r\n\r\nHowever, it is currently confused by `self.muted_users` being set multiple times during `__init__`, to different values. I was comparing it to the current final line 213 (https://github.com/zulip/zulip-terminal/pull/1425/files#diff-a191cb76d9eed66d76cf34cd4e8781a70aa69d8e77cafda32af989919db8b527R213).', 'comment_created': datetime.datetime(2023, 9, 19, 6, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '561a7565edf838ba60666ed1f93d8296ec96177f', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc0f80756516c002a00ee4b94d65301e2a881d14', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50a083b77578d13b11eb94ea3d3047b49f5e7a', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b0c3d8f857d4cdb60e29154bba15c30b7e56b9', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53ecc1714d102c20405c04ee83bf18c4b3a86947', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}]",SUBHASISH BEHERA,92573882,,User,,72,,102,13
1185028302,[WIP] Disable cycling while editing a PM,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
-> Disables cycling during editing a PM by `tab` key .
->  Shows a warning if one uses tab during editing a PM.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Partial fix for #774 
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [X] Manually
- [X] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [X] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->
commit 1: changes made to boxes.py
commit 2: changes made to test_boxes.py
**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
![zt1](https://user-images.githubusercontent.com/92573882/210581649-7b23e518-dd15-4aeb-b3d7-0b2182660ed2.png)

",False,1280,https://api.github.com/repos/zulip/zulip-terminal/pulls/1280,https://github.com/zulip/zulip-terminal/pull/1280,open,201,48,3,11,7,36,6,0,"[{'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}, {'name': 'PR replaced by another PR'}, {'name': 'PR completion candidate'}]",2023-01-04 14:51:58+00:00,,0.0,,"[{'comment_id': 1071626506, 'comment_body': 'The edit state is encoded in `msg_edit_state` - does this give more information?', 'comment_created': datetime.datetime(2023, 1, 16, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1071626860, 'comment_body': ""Why are we tracking if it's a reply? Ah, this is since private edits are triggered by reusing the reply logic?"", 'comment_created': datetime.datetime(2023, 1, 16, 23, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1092912531, 'comment_body': 'Yes, the keypress of `EDIT_MESSAGE` on private messages works on calling the keypress for `REPLY_MESSAGE` using `self.keypress(size, primary_key_for_command(""REPLY_MESSAGE""))`.That\'s why reply_keypressed is used to differentiate between cases .', 'comment_created': datetime.datetime(2023, 2, 1, 8, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1092984049, 'comment_body': ""I didn't think of that...nope, it does not give any other information. It seems that the same work can be done using `msg_edit_state`(I ran the code replacing `edit_keypressed` with `msg_edit_state` and it worked fine.)\r\nSo I will remove the `edit_keypressed` part and use `msg_edit_state`  instead :)"", 'comment_created': datetime.datetime(2023, 2, 1, 9, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1174512665, 'comment_body': 'Lines 202-208 definitely make sense to move out of the common method, based on the stream design.\r\n\r\nIs the point here that the editing version will have typing updates of a different form, or something like that? So the other lines also move due to that reason?\r\n\r\nThis commit appears to be a refactor - please add that as an area if so - but my main query here is the order of operations from this refactoring. The deleted code is essentially moved to the top of `private_box_view`, so it would be worth mentioning that in the commit text.', 'comment_created': datetime.datetime(2023, 4, 23, 5, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1174514383, 'comment_body': 'Would this be better incorporated into `_set_regular_and_typing_recipient_user_ids`?', 'comment_created': datetime.datetime(2023, 4, 23, 6, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1174515114, 'comment_body': 'This is what enables the new edit-private-message functionality, correct?', 'comment_created': datetime.datetime(2023, 4, 23, 6, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1174515441, 'comment_body': ""Can we use the same conditional here as below? I expect isinstance to work, but it's not as descriptive as the current state."", 'comment_created': datetime.datetime(2023, 4, 23, 6, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1174515557, 'comment_body': ""This is now DM, but let's use a fuller version too."", 'comment_created': datetime.datetime(2023, 4, 23, 6, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1174515974, 'comment_body': 'We can adjust this test as soon as we have these functions, ie. sooner in the sequence of commits and potentially in the commit that adds this method (can squash later, but keep it adjacent). ', 'comment_created': datetime.datetime(2023, 4, 23, 6, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1175225755, 'comment_body': ""If I understood correctly, you are asking about lines other than 202 to 208. \r\nIn the overall implementation(beyond this particular commit), the plan is to **not send typing updates at all for the editing version**. Because we don't want to send typing notifications for editing a pre-existing message. so earlier the typing updates was sent for every kind of private writebox(reply,edit etc). but now it's not a part of the editing version.\r\n\r\nThe same thing is done behaviour-wise in the web app. Like when you edit a PM you won't see typing updates being a recipient of that message(similar to this PR's behaviour and unlike current upstream ZT's behaviour). "", 'comment_created': datetime.datetime(2023, 4, 24, 12, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1175385910, 'comment_body': 'Yep! Just like in the case of ""REPLY_MESSAGE"" keypress, but here calls to a `private_box_edit_view` function.', 'comment_created': datetime.datetime(2023, 4, 24, 14, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1175989746, 'comment_body': 'If I have understood correctly you are referring to `msg_edit_state`. Yep, that should be a better choice as it seems more basic. Probably used `isinstance(self.to_write_box, ReadlineEdit)` because I was thinking along the lines of `to_write_box` being editable or not as the variable between two cases.', 'comment_created': datetime.datetime(2023, 4, 25, 4, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1176352178, 'comment_body': 'It would be possible if we were only talking about `convert_id_to_info` but `_set_regular_and_typing_recipient_user_ids` is also used by `update_recipients` function .', 'comment_created': datetime.datetime(2023, 4, 25, 10, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1178461828, 'comment_body': ""If we shouldn't be sending typing updates for editing, I suspect that could be clearer in the API documentation. If you're sure this is the behavior we want, posting to that stream that you think that's the case would be useful, or even a quick PR for it.\r\n\r\nSince we're splitting the private-compose and private-edit UI it certainly makes it simpler to separate this behavior in this way."", 'comment_created': datetime.datetime(2023, 4, 26, 22, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178508035, 'comment_body': 'Right, `msg_edit_state` is used in the logic below.', 'comment_created': datetime.datetime(2023, 4, 27, 0, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1178508407, 'comment_body': 'OK, so\r\n- `_set_regular_and_typing_recipient_user_ids` does the following, dependent upon passed user_ids\r\n  - sets `recipient_user_ids` (autocompletion)\r\n  - sets `typing_recipient_user_ids` (not including user)\r\n- `update_recipients` (which appears to effectively be `update_recipients_from_emails_in_widget` or similar):\r\n  - sets `recipient_emails`\r\n  - calls `_set_regular_and_typing_recipient_user_ids` with calculated ids from recipient_emails\r\n- `convert_id_to_info` does the following, dependent upon the passed user_ids\r\n  - calls `_set_regular_and_typing_recipient_user_ids`\r\n  - sets `recipient_emails`\r\n  - sets `recipient_info`\r\n\r\nThis pattern suggests that the last two methods have a similar intent and so should share a name prefix, and generally could benefit from renaming.\r\n\r\nThe latter sets an extra attribute, which seems to be for initialization only - can we make that a return value instead?', 'comment_created': datetime.datetime(2023, 4, 27, 0, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346461051, 'comment_body': ""`self.recipient_info` doesn't appear to be used by any of your later commits, outside of the setup functions (this and the edit equivalent), so it seems like you can continue to use `recipient_info` instead?"", 'comment_created': datetime.datetime(2023, 10, 4, 21, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346485581, 'comment_body': ""While this isn't too likely to break anything, the assignment to write_box.recipient_info is related to the current implementation of the function that uses this new function (currently private_box_view, if we make that change in the earlier commit). This test should only care about what the function should achieve internally, including what it returns. The return value can be set to a local name in this test function - it doesn't need to be `write_box.recipient_info`.\r\n\r\nThis can be one of the challenges of writing tests for helper functions."", 'comment_created': datetime.datetime(2023, 10, 4, 21, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346490488, 'comment_body': 'Nit: Unless the test is only a few lines, please separate the line being tested from the setup and assert lines by blank lines, to make it easier to pick out which lines are which (you did this in the previous commit!)', 'comment_created': datetime.datetime(2023, 10, 4, 21, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346500385, 'comment_body': ""`to_write_box` is already a mock, so is the enable_autocomplete line necessary? It seems like it patches one part of the mock, but not to anything in particular, and returns that part. You do test that mocked/patched part, but I'm not sure it would be any different than\r\n```python3\r\nenable_autocomplete = write_box.to_write_box.enable_autocomplete\r\n```\r\nor alternatively substituting that inline where you have the assert_has_calls, since you only use/assert enable_autocomplete once in the test."", 'comment_created': datetime.datetime(2023, 10, 4, 21, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346504023, 'comment_body': ""I was going to suggest placing this as a default argument, but I'm not sure if this has the typical python issue with potential errors from persistent mutable default arguments. Typing it as a `Mapping` rather than `Dict` may help.\r\n\r\nIf we do this, that eases any parametrizing them later - and saves a blank line in this case ;)"", 'comment_created': datetime.datetime(2023, 10, 4, 21, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346533569, 'comment_body': ""Re this commit in general:\r\n- This would be good to have right at the start of the refactoring of the DM code in this PR, so when you refactor and move code around, this can act as a guarantee that the function continues to work, as long as the asserts cover the relevant parts of code\r\n- If you want to list in the commit summary what you test (assert) in the test, I'd suggest using a bulleted list of what you're testing and what it corresponds to - focusing on what features you're ensuring work (though mentioning how you do that is fine to add)"", 'comment_created': datetime.datetime(2023, 10, 4, 22, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346538994, 'comment_body': ""Re this commit (and others)\r\n- if it only moves code around, use a `refactor:` area in the title, with the files you modify (could the README be clearer?)\r\n- I'd suggest reading about types of refactor in general, but this is an 'Extract (method/function)', so using that phrasing helps communicate what you're doing and why"", 'comment_created': datetime.datetime(2023, 10, 4, 22, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346543527, 'comment_body': ""If we're testing these elements, it could be useful to include how the other internal function is called for completeness (`_set_regular_and_typing_recipient_user_ids`)."", 'comment_created': datetime.datetime(2023, 10, 4, 22, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346556072, 'comment_body': ""You could consider a multi-person DM here, to cover a more complex case, or parametrize this for empty/single/multi. The latter isn't necessary, but would cover all the cases and you might find it useful to flex your pytest muscles - particularly if you extract them into a fixture (see a comment on a later commit)\r\n\r\nNote how if you parametrize this, you can consider that as a series of changes:\r\n- the literal text here can be made a test function parameter (expected_...)\r\n- the recipient_user_ids (if moved into the argument list, as commented elsewhere) and the new parameter can lose their default values and be assigned by parametrize tuples"", 'comment_created': datetime.datetime(2023, 10, 4, 22, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346564565, 'comment_body': 'Same comments apply to this test as for the other test.\r\n\r\nI like the emphasis on testing the difference in behavior between the functions, though when you highlight that in the commits it would be useful to relate the feature to the code, eg. editable vs not (ReadlineEdit vs Text?), and one autocomplete vs two (for what user-facing boxes?).\r\n\r\nIf you do extract the common recipient_user_ids/expected_write_box_text (see another comment), note that you could convert it into a fixture local to this file. We do something similar elsewhere, to avoid duplicating cases between tests.', 'comment_created': datetime.datetime(2023, 10, 4, 23, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346592562, 'comment_body': ""I appreciate you committing to writing this test, though I'm not entirely sold on the importance of this test, since it's heavily focused on the UI only and risks mimicking the code itself (as per various other UI tests we have).\r\n\r\nThe DM vs DM-edit tests currently in later commits have more significance due to expressing the differences. Also note that the DM test, which should really be the first commit (see another comment) does already test some of this behavior. It can often be tricky knowing whether to test internal helper functions like this, since we could change the implementation of the DM view to not use this, or use this differently, and then we have a test that's less used/useful, or perhaps needs updating in addition to the test for the other functions, which adds more overhead to what needs doing without necessarily adding a benefit.\r\n\r\nFor now let's keep this, though note that comments I make regarding other tests also apply here to various degrees."", 'comment_created': datetime.datetime(2023, 10, 4, 23, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346595309, 'comment_body': ""`self.to_write_box` is not defined in this method. Rather than needing to assume that when we call this function that it does, we can require that it does, by passing it into the function.\r\n\r\nI've not checked, but the equivalent stream function could benefit from a similar refactor."", 'comment_created': datetime.datetime(2023, 10, 4, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346597141, 'comment_body': 'This is not necessary; we can use `mocker.call`.', 'comment_created': datetime.datetime(2023, 10, 4, 23, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346614918, 'comment_body': ""To improve readability later, it may be useful to regroup lines in this function, since we're eventually going to have\r\n- the new user setup function\r\n- the custom UI header, leading into setting up the common UI part using the header\r\n- setting up the typing status code\r\n\r\nIn particular, we have part of the last bullet oddly above this line (send_next_typing_update) and not with the related code. Once the code is simplified, it'd also be good if that was naturally further down, and each group separated by a blank line.\r\n\r\nIn the edit version you can do any grouping when you introduce it; for this function I'll leave you to decide where to add/leave blank lines and move the line I mentioned, but eg. you delete a blank line in this commit, that could separate where the new function is from the 'timedelta' lines below."", 'comment_created': datetime.datetime(2023, 10, 5, 0, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346632833, 'comment_body': ""This is missing a space.\r\n\r\nAlso note that you don't need a comma (or 2) - the string literals will automatically join together."", 'comment_created': datetime.datetime(2023, 10, 5, 0, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346639072, 'comment_body': ""Without this commit, the previous commit - using the new edit DM box, with different widgets - results in a crash when cycling with Tab, since it tries to validate the text and it has a different widget structure.\r\n\r\nSince this and the next commit affect the Tab behavior only, while the earlier commits handle the editable nature of the to-box and splitting out the typing notifications, I'd suggest moving these commits to the front of the PR - these are independent groups of changes that don't have to be done in a specific order. That will make the Tab fixes come in first, followed by fixing the clickable To box, and changing the notifications behavior."", 'comment_created': datetime.datetime(2023, 10, 5, 0, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346648832, 'comment_body': 'This is a valid commit, but we might squash with the previous one(s), as this change is small and straightforward now :)', 'comment_created': datetime.datetime(2023, 10, 5, 1, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1346658212, 'comment_body': 'Re commit title: good to see a `refactor:` here, but remember to include the file(s) as an area too. This should be clear from our README.', 'comment_created': datetime.datetime(2023, 10, 5, 1, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1610282798, 'comment_body': ""It seems rather that the previous line isn't necessary, as the `write_box.to_write_box` will be completely replaced by a new `ReadlineEdit` in [this line](https://github.com/Subhasish-Behera/zulip-terminal/blob/disable_cycling_PM/zulipterminal/ui_tools/boxes.py#L246).\r\n\r\nSo we need to patch `ReadlineEdit` here, but not patch `to_write_box` initially."", 'comment_created': datetime.datetime(2024, 5, 22, 16, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zormit', 'type': 'User'}]","[{'commit_sha': 'b45eb77b77cb13e9fed379ca23e84a2fef6e9a86', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7cfffe04e27ed25df376560a42cac1138dff5dec', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cdb0fadaedd851d37a8988a733afb0367a9a3001', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '415f31f4e686a159f54688a13a48d384859917f4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2a66b5d7c265404e7531418a26820823b20f5055', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '691296d397bd0a661f0454426568ea737d95d72e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f1590cbe0714f8528245519194d8495f1b1ae011', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba32129ebfd275e8d62158dcd83fa33f3280742d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '40e6067a4192f87ef5a45243ccdca3205d5a6219', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac20ad7dcb3b93408791aa90941e4dcce4a8bff9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2bd52289ac746773076e956b2dd5e90e781e8a33', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}]",SUBHASISH BEHERA,92573882,,User,,72,,102,13
1246519893,[WIP] Notify when a message with alert word is received,"model/test_model/conftest : Notify when a message with alert word is received

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Partial fix for #588
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [X] Manually
- [X] Existing tests (adapted, if necessary)
- [X] New tests added (for any new behavior)
- [X] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
->No changes have been made to for private messages(not required as alert_words would be a subset case for this) 
and in stream added the condition `not is_muted_topic` and `not is_muted_stream` when a message has `flag:'has_alert_word`'
-> Added tests specifically for stream with 3 parameters  `visual_notification_status`,`is_stream_muted`,`is_topic_muted`
-> Added a new `stream_msg_fixture` in `conftest.py` as msg_fixture was present for private messages but not for stream. And the same fixture has been used in added tests.

",False,1301,https://api.github.com/repos/zulip/zulip-terminal/pulls/1301,https://github.com/zulip/zulip-terminal/pull/1301,open,73,5,2,1,2,19,4,0,"[{'name': 'size: L'}, {'name': 'missing feature: user'}, {'name': 'area: notifications'}, {'name': 'PR replaced by another PR'}]",2023-02-20 01:39:32+00:00,,0.0,,"[{'comment_id': 1130039212, 'comment_body': 'You should be able to use stream_msg_template instead of introducing this new fixture.', 'comment_created': datetime.datetime(2023, 3, 8, 21, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1130040303, 'comment_body': ""user_id, flags, display_recipient and subject are the same through all the test cases you have, at least so far. For that reason it's easier to omit them from the parametrize and focus on the variables that do change - that makes it easier to identify why each test case relates to specific values. The constant values you can leave as defaults based on the fixture, or if they don't work for you for some reason, set them explicitly (and say why)."", 'comment_created': datetime.datetime(2023, 3, 8, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1130040436, 'comment_body': ""Four ids at the end are sort of OK here, but they'd be clearer inline. For complex - ie. long - sets of variables, it's useful to put the id inline, using `case` (pytest.param).\r\n\r\nWhile your id strings are nicely readable here, consider how they look when running with `pytest tests/model -v`. I've used underscores instead of spaces in the past, since multi-dimensional (nested parametrize) tests have `-` as a separator, and spaces may be unclear there."", 'comment_created': datetime.datetime(2023, 3, 8, 21, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1130040505, 'comment_body': 'All these fixture updates can be combined in some way, or as in the test I mentioned combining with:\r\n```python3\r\nvary_each_msg = {""flags"": [...]}  # in parametrize\r\n# ...\r\nmessage_fixture.update(vary_each_msg)\r\n```', 'comment_created': datetime.datetime(2023, 3, 8, 21, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1130040579, 'comment_body': 'Naming wise, our other tests tend to use `expected` as a prefix, not suffix.\r\n\r\nAlso, if your values are 0 or 1, use a bool for clarity.', 'comment_created': datetime.datetime(2023, 3, 8, 21, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1130041671, 'comment_body': 'Unrelated change.', 'comment_created': datetime.datetime(2023, 3, 8, 21, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1130043892, 'comment_body': 'The value we set here is identical. Can you reformulate the change to avoid that?', 'comment_created': datetime.datetime(2023, 3, 8, 21, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1228097400, 'comment_body': 'Maybe the parameters (with which the `notify` method is called) would also benefit from testing? If you decide to do that, you can use `notify.assert_called_once_with(param1,..)` and `notify.assert_not_called()`.', 'comment_created': datetime.datetime(2023, 6, 13, 13, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'theViz343', 'type': 'User'}, {'comment_id': 1240940096, 'comment_body': 'Yep! agreed.', 'comment_created': datetime.datetime(2023, 6, 24, 20, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1240942416, 'comment_body': ' I included `user_id` by seeing the  `model.user_id = user_id` of `test_notify_users_calling_msg_type` but I will be removing `user_id` totally(as it is not used).\r\n And set the rest of them as you suggested.', 'comment_created': datetime.datetime(2023, 6, 24, 20, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1341840463, 'comment_body': ""Could you address this, to avoid the duplication? The same action is done in each case, so we can combine the conditionals, though I'd suggest some intermediate variables to make the conditional more readable."", 'comment_created': datetime.datetime(2023, 9, 29, 22, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1345301465, 'comment_body': 'Nit: These are setup values, so it would be clearer to have them before the `types_when_notify_called`.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1345305636, 'comment_body': 'The return value for these functions cannot be None, so using it is confusing.\r\n\r\nConsider a real bool value in each case which will strengthen a test case - eg. if mentions work even if a stream or topic are muted, show that. The ids may need adjusting.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1345309609, 'comment_body': ""This is a lot of ids to manually map to the cases above them. Given there are already 5 and we're going to have many more, it would be great to have an initial refactor commit which inlines the existing ones into the test cases.\r\n\r\nAlso see my comment on an earlier iteration of the PR regarding this."", 'comment_created': datetime.datetime(2023, 10, 4, 7, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1345318864, 'comment_body': ""It's not clear to me why we need this change?"", 'comment_created': datetime.datetime(2023, 10, 4, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1345325703, 'comment_body': 'See my response to a comment on an earlier iteration of the PR regarding simplifying this.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1369662322, 'comment_body': 'How about creating a new function for providing value of `recipient`  in the notification?\r\nWe have 2 conditionals: private and stream message. Under stream message, the code for assigning value to `recipient` requires us to check across multiple conditions. One way to simplify this entire block can be to create a separate function which returns the value of `recipient`. This can also be used for assigning value to recipient under the private message conditional as well.\r\n\r\nWe can have the `message` as a parameter passed to the new function. Also, can we have this as an nested function?', 'comment_created': datetime.datetime(2023, 10, 24, 6, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1372012884, 'comment_body': 'The original simplification I saw possible here was the equivalent of changing\r\n```python\r\nif big_long_complicated_expression_for_one_case:\r\n  x = value\r\nif another_big_long_complicated_expression_for_second_case:\r\n  x = value\r\n```\r\ninto\r\n```python\r\nis_one_case = big_long_complicated_expression_for_one_case\r\nis_second_case = big_long_complicated_expression_for_second_case\r\nif is_one_case or is_second_case:\r\n  x = value\r\n```\r\nThis has the benefit of easily naming the two conditions one is testing for, via the intermediate variables, and deduplicating the assignment.', 'comment_created': datetime.datetime(2023, 10, 25, 16, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1373964919, 'comment_body': 'Oh alright. This is a simpler approach than what I had suggested.', 'comment_created': datetime.datetime(2023, 10, 27, 0, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}]","[{'commit_sha': '9d53f9ecaed095dd77ea9c843210c33db761cd05', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}]",SUBHASISH BEHERA,92573882,,User,,72,,102,13
1419981722,upload: Enable File Upload for users.,"<!-- See README for documentation, or ask in #zulip-terminal if unclear -->
### What does this PR do, and why?



### External discussion & connections
<!-- [x] all that apply, specifying topic and adding numbers after # for issues/PRs -->
- [x] Discussed in **#zulip-terminal** in `File Upload #T529 #T1414`
- [x] Fully fixes #529 
- [ ] Partially fixes issue #
- [ ] Builds upon previous unmerged work in PR #
- [ ] Is a follow-up to work in PR #
- [ ] Requires merge of PR #
- [ ] Merge will enable work on #

### How did you test this?
<!-- [x] all that apply -->
- [ ] Manually - Behavioral changes
- [ ] Manually - Visual changes
- [ ] Adapting existing automated tests
- [ ] Adding automated tests for new behavior (or missing tests)
- [ ] Existing automated tests should already cover this (*only a refactor of tested code*)

### Self-review checklist for each commit
- [ ] It is a [minimal coherent idea](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development)
- [ ] It has a commit summary following the [documented style](https://github.com/zulip/zulip-terminal#structuring-commits---speeding-up-reviews-merging--development) (title & body)
- [ ] It has a commit summary describing the  motivation and reasoning for the change
- [ ] It individually passes linting and tests
- [ ] It contains test additions for any new behavior
- [ ] It flows clearly from a previous branch commit, and/or prepares for the next commit

### Visual changes    <!-- DELETE SECTION IF NO VISUAL CHANGE -->
<!-- Zulip tips at https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html -->
<!-- For video, try asciinema; after uploading, embed using
[![yourtitle](https://asciinema.org/a/<id>.png)](https://asciinema.org/a/<id>)
-->
<!-- NOTE: Attached videos/images will be clearer from smaller terminal windows -->
",False,1414,https://api.github.com/repos/zulip/zulip-terminal/pulls/1414,https://github.com/zulip/zulip-terminal/pull/1414,open,238,1,9,9,2,45,6,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'area: event handling'}, {'name': 'PR awaiting update'}, {'name': 'missing feature: user'}, {'name': 'area: message compose'}]",2023-07-04 17:49:50+00:00,,0.0,,"[{'comment_id': 1262999232, 'comment_body': 'This function seems unnecessary.', 'comment_created': datetime.datetime(2023, 7, 13, 19, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1263005035, 'comment_body': ""There doesn't seem a need for the return statement at the bottom."", 'comment_created': datetime.datetime(2023, 7, 13, 20, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1263008976, 'comment_body': 'This function can be called when `keypress()` detects `ENTER` and the popup can be closed upon encountering this event.', 'comment_created': datetime.datetime(2023, 7, 13, 20, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1263010590, 'comment_body': 'Maybe execute a function/some logic when the user hits `ENTER`', 'comment_created': datetime.datetime(2023, 7, 13, 20, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1263015132, 'comment_body': 'Instead of simply setting the URI, is it possible for you to add the link generated for the uploaded file and append it to the `write_box`? Maybe that can eliminate the need to wait for the upload API to provide response.', 'comment_created': datetime.datetime(2023, 7, 13, 20, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1267921427, 'comment_body': '@mounilKshah  The `FileUploadView` is derived from `PopUpView`. `PopUpView` is supposed to get closed on pressing the same key which opened. So I think it is natural that the user wants to close as soon as he has uploaded the file.\r\nAs Neil is suggesting considering using something different [(relevant chat)](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/File.20Upload.20.23T529.20.23T1414/near/1607421) than `PopUpView`, we should first discuss a bit about the Base classes to inherit from and then come back to chose appropriate keys and their actions.', 'comment_created': datetime.datetime(2023, 7, 19, 11, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1274259740, 'comment_body': ""Upon sending the message  and opening the file, the URL wasn't able to fetch the file. This may be because of the extra `/` before the `uri`, because the URI returned from the server already has a `/` at the start.\r\n\r\nAlso, the function already has the type of `uri` as `str`, so there might be no need to typecast it to string.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 26, 1, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1274260272, 'comment_body': 'I think this can be added to the second commit, where the function has been declared?', 'comment_created': datetime.datetime(2023, 7, 26, 1, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1274264987, 'comment_body': 'This works for now, but I think in case of Windows, the file path contains [backward slashes](https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats), and this approach may not work there.', 'comment_created': datetime.datetime(2023, 7, 26, 1, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1274296410, 'comment_body': 'It would be good to have this further up in the dict, since it currently appears after the navigation commands in the help menu.', 'comment_created': datetime.datetime(2023, 7, 26, 2, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1274298286, 'comment_body': ""Please use full words for function/variable names - we're not short of space here :)\r\n\r\nI know we need to be more consistent here, but also note that while this method does return the URI, it doesn't only get the URI but also uploads the file first."", 'comment_created': datetime.datetime(2023, 7, 26, 2, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1274303441, 'comment_body': ""The following may feel minor, but is useful in the same way as naming things well :)\r\n\r\nIt would be useful to ensure that at calling sites users know what the parameters to a function are - if only inserting a URI, why are there two parameters? :)\r\n\r\neg. I could call this as `insert_uri(x,y)`, and it wouldn't be clear. I could try and name x and y clearly at the call site, but that doesn't guarantee that they are meaningful.\r\n\r\nFor a few parameters you could do something like `action_xthing_with_ything(x,y)` and the order can help, but otherwise it's useful to use `*` to require a named parameter. For example:\r\n```python3\r\ndef action_xthing(xthing, *, ything):\r\n    ...\r\n\r\naction_xthing(x, ything=y)\r\n```\r\n\r\nI expect you've iterated on what this method does, but it's good to reflect the behavior in the name, eg. perhaps now this should be `append_*`?"", 'comment_created': datetime.datetime(2023, 7, 26, 2, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1274305616, 'comment_body': ""For extraction of the file_name we should aim to use `urllib`, and I'd welcome changes to any of our other code which doesn't use it."", 'comment_created': datetime.datetime(2023, 7, 26, 2, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1274315997, 'comment_body': 'This is the first commit where you use this string, and adding it makes it available in the UI, so it would be good to have that commit just before this one.', 'comment_created': datetime.datetime(2023, 7, 26, 2, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1274356445, 'comment_body': ""There's no space before the parenthesis here, but let's keep the title simple and drop those and the text inside. The action should be clear from the internals of the popup?"", 'comment_created': datetime.datetime(2023, 7, 26, 4, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1274357146, 'comment_body': ""You're overriding the behavior of the keypress here, so you should be able to change the key we use here quite easily?"", 'comment_created': datetime.datetime(2023, 7, 26, 4, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1275190835, 'comment_body': 'Yep! We can use any other key(like Mounil used ENTER earlier).', 'comment_created': datetime.datetime(2023, 7, 26, 16, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1275746509, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2023, 7, 27, 5, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1275748006, 'comment_body': 'Here to get the `file_name` we are using the file location and NOT the `url`. So not sure how `urllib` can be used directly to get the file name.', 'comment_created': datetime.datetime(2023, 7, 27, 5, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1320903377, 'comment_body': 'Defining a variable can be avoided here as the value is being used only once.', 'comment_created': datetime.datetime(2023, 9, 11, 0, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1320906578, 'comment_body': 'Good thinking to use this.', 'comment_created': datetime.datetime(2023, 9, 11, 1, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1329420879, 'comment_body': ""Note that `os.path.exists` only checks that this is a valid path, not that it is a file or that it can be accessed by the active user.\r\n\r\nThere is also the slim possibility that we check it exists and then the file disappears before it is opened. The better pattern is therefore to try to open, and then handle any exceptions relevant to not being able to open the file, or the parent exception class of those we expect, and return None from there.\r\n\r\nHowever, this function now returns None if there is a problem uploading, as well as if the file doesn't exist - the calling function (and user!) cannot distinguish between these cases. In the short term using `display_error_if_present` for reporting any server error could enable a distinction there - though note that after reporting the error it would *still* return None, so trigger the same error handling in the caller.\r\n\r\nFor now we should certainly use a try/except around the `open` to look for file issues via exception(s). You could experiment with `display_error_if_present`, but duplicate error messages may look strange.\r\n\r\nAt a later point it may be clearer to handle *only* the uploading of an already-opened source file here, and handle other errors where this function is called, making the showing of different errors much simpler - including those arising from different exceptions when opening a proposed upload."", 'comment_created': datetime.datetime(2023, 9, 19, 0, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329421620, 'comment_body': 'Nit: The name of the function suggests that the first argument is the uri and the second the file_name.', 'comment_created': datetime.datetime(2023, 9, 19, 0, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329425741, 'comment_body': ""This error is triggered if the file to upload is the empty string, ie. just pressing `enter` with no contents in the box. As a user I'd expect that to be equivalent to exiting the box - so it doesn't even try and upload.\r\n\r\nThat would fit with doing more error handling in this location, as per another comment, though this would be easier to do without changing the way the function is called."", 'comment_created': datetime.datetime(2023, 9, 19, 0, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329428521, 'comment_body': 'The file upload works now, but the `str` conversion remains - is there a reason for this?', 'comment_created': datetime.datetime(2023, 9, 19, 0, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329429980, 'comment_body': ""The commits haven't been reordered for this yet. Do you understand what I was requesting?"", 'comment_created': datetime.datetime(2023, 9, 19, 0, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329455346, 'comment_body': 'The behavior of the method is also to set the position of the cursor, so that should be asserted here too.', 'comment_created': datetime.datetime(2023, 9, 19, 1, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329468512, 'comment_body': ""`expected_uri` is specifically assigned to something in the setup of the test, so it is not meaningful to think of it as an 'expected' value.\r\n\r\nMaybe something like `file_upload_response` instead? (though this value does not affect the result, only that it is consistently used in the assert).\r\n\r\nNote that this is also confusing as it is, since the return type of that function is currently Optional[str] instead of str, and you've not tested for the None values."", 'comment_created': datetime.datetime(2023, 9, 19, 1, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329479354, 'comment_body': ""Minor nit: Since the function starts with an underscore, in other similar cases we typically have two underscores after `test` - one for a 'space' and the other for the start of the function name :)"", 'comment_created': datetime.datetime(2023, 9, 19, 2, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329496915, 'comment_body': ""It would be better to make these tests standalone, rather than coupling them to another set of tests.\r\n\r\nLooking below, you pass the detailed `write_box` from the other test to FileUploadView, but in the test where it's used you've explicitly set it to a simple Mock(). I'd suggest trying that in `mock_external_classes` instead, and skipping this fixture."", 'comment_created': datetime.datetime(2023, 9, 19, 2, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329502595, 'comment_body': 'If the write_box is set in the external fixtures above, you can (instead/also) assign from there to a shortened variable for the write_box here, which will make the assert statements easier to read.', 'comment_created': datetime.datetime(2023, 9, 19, 2, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329502835, 'comment_body': ""This doesn't exist? It likely still passes due to the perils of Mock without spec."", 'comment_created': datetime.datetime(2023, 9, 19, 2, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329513991, 'comment_body': ""This file_name would be good as a test (case) parameter. It may look like a duplicate, but you're processing the result explicitly here instead, and it's clearer as a parameter to the test."", 'comment_created': datetime.datetime(2023, 9, 19, 3, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329526885, 'comment_body': ""This matches to the code we have (result is not success), but I'm unsure it's the actual form that we would get from the API in the case of an error, which we should be using - at a bare minimum for the value of `result`. Does it currently match?"", 'comment_created': datetime.datetime(2023, 9, 19, 3, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329529701, 'comment_body': 'In principle I agree, and using something like this for testing the file existence is certainly a valid approach. One of the downsides is that it involves filesystem actions in each test.\r\n\r\nWe actually use a similar approach for testing some of `run.py` right now, using some built-in fixtures that pytest provides. If we take this approach, it would likely be wise to use one of those.\r\n\r\nAn alternative approach would be to patch open - though that can be tricky since it is built-in - and set it to raise certain exceptions.', 'comment_created': datetime.datetime(2023, 9, 19, 3, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1329626863, 'comment_body': ""I don't see that we gain from using different `file_name` strings, when this variable is passed in as it is each time. Instead I'd suggest using a fixed string - if we continue to set a filename to create - and then using an alternative parameter here which may have a different path. That would allow using the same branch of the conditional each time, and using this new parameter to select the file that is generated or not."", 'comment_created': datetime.datetime(2023, 9, 19, 6, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1335017000, 'comment_body': 'will change the order of the arguments.', 'comment_created': datetime.datetime(2023, 9, 23, 14, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1388489393, 'comment_body': 'Got it. will remove it.', 'comment_created': datetime.datetime(2023, 11, 9, 19, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1388561761, 'comment_body': 'Cool. I think you are suggesting this\r\n```\r\n    def test__handle_file_upload(\r\n        self,\r\n        file_location: str,\r\n        file_name: str,\r\n        expected_uri: str,\r\n        expected_error_message: Optional[str],\r\n    ) -> None:\r\n```\r\nand directly use the `file_name`  parameter.', 'comment_created': datetime.datetime(2023, 11, 9, 20, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1388564185, 'comment_body': 'I probably thought along the lines of testing the code for different file types like `pdf` and `txt`.', 'comment_created': datetime.datetime(2023, 11, 9, 20, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1388572151, 'comment_body': ""I think you are suggesting that `file_name` doesn't help in testing that.I will change as you said.\r\n But should ZT-Client's code test if different file formats work?"", 'comment_created': datetime.datetime(2023, 11, 9, 20, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1388605687, 'comment_body': 'Right, the principle is that ideally a test is as simple as possible - less logic and calculation - and the test cases handle the input and corresponding expected output (`expected_*` parameters).', 'comment_created': datetime.datetime(2023, 11, 9, 21, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1388607711, 'comment_body': ""If you do wish to assert on the mocked details, then my point here was more that the object you're asserting on does not exist - and is different to that a few lines above."", 'comment_created': datetime.datetime(2023, 11, 9, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1388631600, 'comment_body': ""I agree that this illustrates that various file names should be acceptable to the function. However, how many would we include to show that? Also, file extensions do not necessarily correspond to file types - and I suspect the client/server accepts arbitrary files anyhow? So, if we want to demonstrate that, we could include a fixed string in the test - or as a default value to a test parameter - which looks fairly random.\r\n\r\nIn case it needs clarifying, using a mock for `client.upload` means that only ZT code sees this file in any case - it doesn't touch the actual `Zulip.Client`, and of course not any server.\r\n\r\nI mentioned using a path parameter combined with a fixed file_name, since you're not testing eg. `./file_name`, `path_to/file_name` or similar vs just `file_name`. The `file_name` could be a constant, with the path varying in the test cases."", 'comment_created': datetime.datetime(2023, 11, 9, 22, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1518647773, 'comment_body': ""Rereading this, it would definitely be better to use the exception approach here, and focus error handling for upload as occurring from the model, compared to error handling with accessing the file from the calling function.\r\n\r\nIt's possible there could be errors related to processing the upload related to the file handling, but that would be part of the upload process."", 'comment_created': datetime.datetime(2024, 3, 9, 19, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'd62aa99b5ef3b0cd10375d86afba643a459775cb', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5927ed867768362b705925c78904a7bea753cfb7', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94c863badd6ac7a58debbe60f6178f073461939b', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a444decce2b115eb6360fd84e1b2e2406e366e4', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd4f6b50d19a04d3623c289bd8179c046422a60', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0119c8d687000690826f4900882329c2f4df32ae', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a618d1e0c8043677d6214befff81803b379330', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7160bb4ed1d80d9b333f03764d9dda319ab138ed', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d1b7e456cf2e716b56d072d80a8e7731ea267f5', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}]",SUBHASISH BEHERA,92573882,,User,,72,,102,13
1232213687,[WIP] Handle typing events from multiple users in a PM narrow ,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Fixes #992 
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [X] Manually
- [X] Existing tests (adapted, if necessary)
- [X] New tests added (for any new behavior)
- [X] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
Basically now the `controller.active_conversation_info` is a `set` which adds a sender if the event is ""start"" and removes if the event is ""stop"". 
Reasons for change :-
1. There seems to be no requirement for Dict as It had only one key -""sender""
2. in dict , discarding/removing by element name is not possible (but possible in `set`)

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1291,https://api.github.com/repos/zulip/zulip-terminal/pulls/1291,https://github.com/zulip/zulip-terminal/pull/1291,open,956,278,29,46,4,25,5,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}, {'name': 'missing feature: user'}, {'name': 'area: typing notifications'}]",2023-02-07 16:01:26+00:00,,0.0,,"[{'comment_id': 1098958818, 'comment_body': 'In Line 571 and Line 589 ,The `{}` works for test whereas `set()` works for Lint', 'comment_created': datetime.datetime(2023, 2, 7, 17, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1098972309, 'comment_body': 'In the cases of 1. `in_pm_narrow_with_sender_typing:start`, \r\n2. `in_pm_narrow_with_sender_typing:start_while_animation_in_progress`,\r\n3 `in_pm_narrow_with_sender_typing:stop`,\r\nwhen the test function calls `model._handle_typing_event(event)`, there is a AttributeError where `self.controller.active_conversation_info` is considered as `Dict` where as it is actually `Set`\r\n', 'comment_created': datetime.datetime(2023, 2, 7, 17, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1100918998, 'comment_body': ""It's unclear to me why this change is necessary. The controller local variable is defined above this."", 'comment_created': datetime.datetime(2023, 2, 9, 2, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1100919560, 'comment_body': 'Whatever data structure we use here, we should move to a situation where we are not using `Any`, but rather the specific type being used.', 'comment_created': datetime.datetime(2023, 2, 9, 2, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1100920925, 'comment_body': ""If these are already strings - try changing that `Any` I mention elsewhere - then this is misleading, since we don't need to apply that mapping."", 'comment_created': datetime.datetime(2023, 2, 9, 2, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1100923052, 'comment_body': 'In the following if/elif chain, there is a lot of common structure which is repeated. Try setting the footer text once, with variables that are set in the if/elif chain.\r\n\r\nThe logic will likely read clearer if you also give a name to the `len` before that logic.', 'comment_created': datetime.datetime(2023, 2, 9, 2, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1100924583, 'comment_body': 'Is this change a bugfix? Why are we stripping?', 'comment_created': datetime.datetime(2023, 2, 9, 2, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1101343162, 'comment_body': 'Yep. Earlier only the first user was detected as there was a space after the comma. This problem was mentioned in the issue as well (""In a huddle/group PM, we only handle typing events from the first email in the narrow specification."")', 'comment_created': datetime.datetime(2023, 2, 9, 11, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1101347778, 'comment_body': ""My bad . I thought one way to clear the attribute error(in tests) could be to directly assign it (using self.controller.active_convesation_info rather than passing it from a variable). But that didn't work. So, this change is not necessary and I will fix it. "", 'comment_created': datetime.datetime(2023, 2, 9, 11, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1101360480, 'comment_body': 'Will keep this in mind and change `Any` to `str`', 'comment_created': datetime.datetime(2023, 2, 9, 11, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1102177727, 'comment_body': 'Ah, OK. Can we include the space in the split instead?', 'comment_created': datetime.datetime(2023, 2, 10, 1, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1146190293, 'comment_body': 'yes something like\r\n`[email for email in narrow[0][1].split("", "")]`\r\nworks fine as well', 'comment_created': datetime.datetime(2023, 3, 23, 13, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1146200508, 'comment_body': 'agreed.something like this would do the job \r\n```\r\nno_of_typing_users = len(self.active_conversation_info)\r\n            if no_of_typing_users == 1:\r\n                typing_text = [\r\n                    (""footer_contrast"", "" "" + active_conversation_info + "" ""),\r\n                    "" is typing"" + next(dots),\r\n                ]\r\n            elif no_of_typing_users < 4:\r\n                typing_text = [\r\n                    (""footer_contrast"", "" "" + active_conversation_info + "" ""),\r\n                    "" are typing"" + next(dots),\r\n                ]\r\n            else:\r\n                typing_text = [\r\n                    (""footer_contrast"", ""Multiple people are"" + "" ""),\r\n                    "" are typing"" + next(dots),\r\n                ]\r\n            self.view.set_footer_text(typing_text)\r\n```', 'comment_created': datetime.datetime(2023, 3, 23, 13, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1147013224, 'comment_body': 'I think you can modify it even further. If you notice, only the string containing `active_conversation_info` and *is/are typing* changes across all conditions. So you can set only those strings in the switch case.', 'comment_created': datetime.datetime(2023, 3, 24, 0, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 1147862688, 'comment_body': 'Yep. can be better. This version should address your suggestions\r\n```\r\n        while self.active_conversation_info:\r\n           active_conversation_info = "", "".join(\r\n                self.model.user_dict[x][""full_name""] for x in self.active_conversation_info\r\n            )\r\n            no_of_typing_users = len(self.active_conversation_info)\r\n            if no_of_typing_users == 1:\r\n                typing_phrase = "" is typing""\r\n            elif no_of_typing_users < 4:\r\n                typing_phrase = "" are typing""\r\n            else:\r\n                active_conversation_info = ""Multiple people""\r\n                typing_phrase = "" are typing""\r\n            typing_text = [(""footer_contrast"",active_conversation_info+"" "")]\r\n            typing_text.append(typing_phrase+next(dots))\r\n            self.view.set_footer_text(typing_text)\r\n```\r\nthe whole initial active_conversation_info part just addresses Neil\'s indexing through the user_id(rather than full name) suggestion. ', 'comment_created': datetime.datetime(2023, 3, 24, 17, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}, {'comment_id': 1193043496, 'comment_body': 'We should avoid single letter variable names except in extreme situations.', 'comment_created': datetime.datetime(2023, 5, 13, 21, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193044128, 'comment_body': ""I was going to merge this change, since it's a good bugfix for >=3 people in a DM, and the rest of the PR seems to need rebasing. However, I noticed there is no accompanying test yet, so to put it differently: what (new) test case would fail without this code? We should add that to this commit.\r\n\r\nDo we need the additional `list()`?\r\n\r\nSince this is a bugfix, you can prepend that to commit title."", 'comment_created': datetime.datetime(2023, 5, 13, 21, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193045166, 'comment_body': ""I'm a bit confused why this reformatting was necessary? If you drop the comma after the second list element, does black shrink it back again?"", 'comment_created': datetime.datetime(2023, 5, 13, 22, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193045660, 'comment_body': 'This part is definitely better with less duplication :+1:', 'comment_created': datetime.datetime(2023, 5, 13, 22, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193045866, 'comment_body': ""This commit doesn't yet add tests for this case, or the output the user sees.\r\n\r\nDoes the model change along show reasonable improvements? If so, you could add a test change for the model in this commit, and move the core changes into the next commit with the test you added."", 'comment_created': datetime.datetime(2023, 5, 13, 22, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193046113, 'comment_body': 'This conditional should not be present in the test. Instead add a different parameter to the test for what you expect in each case.', 'comment_created': datetime.datetime(2023, 5, 13, 22, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193046472, 'comment_body': 'These ids look confusing.', 'comment_created': datetime.datetime(2023, 5, 13, 22, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193047399, 'comment_body': ""Check the types across commits - whether we settle on Set[str] as now or Set[int] for user ids, we shouldn't need to use Any now."", 'comment_created': datetime.datetime(2023, 5, 13, 22, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1193960295, 'comment_body': ""This line is unnecessary. We already have the `sender_email`; this line's just reassigning it to itself."", 'comment_created': datetime.datetime(2023, 5, 15, 14, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 1195999016, 'comment_body': 'Yeah agreed. When I wrote the next line `active_conversation_info.add(sender_email)`, I was thinking that sender_email is the variable that we are talking about now to remove and not the previously declared `sender_email = event[""sender""][""email""]`.\r\nI think this can also be done in the `event[""op""] == ""stop""`', 'comment_created': datetime.datetime(2023, 5, 17, 6, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Subhasish-Behera', 'type': 'User'}]","[{'commit_sha': '96c93a20cb133aa622c5d6d2cd1dfce8b64eac84', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d4a326eecea0421679dafacb61d22610f5e5eaf', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71ee189fd33bf0af0a351cd57af5fe31be249666', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a140fc695195f73ac721d1c5647036b2ac7a2053', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab417de6500ff54b9e9221fe2a12ae82b39df8e', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75e8fa108ed6a9ace7ab9f1904fcf81b77724f9f', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c278304f314f05eefb5ce8d4cb85a1635a148ed3', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '212073d6a096a7eb4ba999ba7cf1c17e9de2ab14', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e93e3730343f934d1122ac7cd7101e164df2cb', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac15a066399aff3c5604ae98afa7a4847f11959c', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9022ea6f8dfb54ab95b02601fa72d92efbf3f64c', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0831bfc322fbe56289667912ffcccd2b63970c0e', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8bb40fd9a368ba275d4b0fb92a7404c9e0926b8', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b5435b0712ff517ae5598ba54f1b85c6a9b49f3', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06f8d4024f21d12b3fdf2d7814c1dbd0b547c03a', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '354e9cb56be154f71f0f9a60bdfe770110423779', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '052a37b6d87116eeff785f62aa5ebaeecc87dbe3', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e41aa12968527b52576c0e281a1c61867c13922', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35f2ecf21812e399837c0386c0620df11e7ccdd1', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b82fbac81b978b9ca0a996b0bce700c882d8e607', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38a35a2698a329d51cabab7be6220189e6138065', 'committer_username': 'supascooopa', 'committer_name': 'Mahmud Alptekin', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 21, 13, 26, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ef9f6da47c9078c01040fd441c0e6d76b691aa', 'committer_username': 'supascooopa', 'committer_name': 'Mahmud Alptekin', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 21, 13, 26, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd24748d0919e0a8d2ef0048af03a066da614f16', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efb253249014d5758687ba270d112c831f5bf493', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b030ac16cfb88fd16201a152d8f4775a2e259533', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ef010070a1c783130dcdb8abd6238261de19c37', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618651911be98d52c8e7cc6979411c964874c232', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0794ab7b69d8f472a332e07d0289bedb6b4d28ca', 'committer_username': 'jagadeesh-akshaya', 'committer_name': 'Akshaya Jagadeesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 22, 17, 33, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3221a666d756e837896d3496320b82802d075de2', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb99efdd342d19f69a7deb2997bb1eec2cb6a88a', 'committer_username': 'mounilKshah', 'committer_name': 'Mounil Shah', 'committer_email': None, 'commit_date': datetime.datetime(2019, 2, 23, 17, 43, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '080c4abb4b94d46899055f0df4e37f586e58289a', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e404d6097cd82e2e8ebba3d8ce8c0e750540db', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '361ddb19a898d647b2635d09d1f0822ced4ef5db', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a76ad2fb846631159cab091864c82469dcb6daf4', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981b5f3200a606b9441f7caa2c98dab080288843', 'committer_username': 'rsashank', 'committer_name': 'Sashank Ravipati', 'committer_email': 'sashankr04@gmail.com', 'commit_date': datetime.datetime(2022, 7, 31, 7, 43, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ea1efd77465dfd4f4163bae9c6705d049b3afd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '881e0abf75e4454d4e58dee91f8d8e033718a02f', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b774b31060040715a1972af43b16b89f68fb79a0', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b16063d847a12791765d9c33d5c6bcc8748bba26', 'committer_username': 'theViz343', 'committer_name': 'Vishwesh Pillai', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 19, 20, 50, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a0264035eab6b8fdb4562b9fc8f5fc26151775b', 'committer_username': 'supascooopa', 'committer_name': 'Mahmud Alptekin', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 21, 13, 26, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af8ff673e64970fdf72e2384a95c03c572a436c', 'committer_username': 'supascooopa', 'committer_name': 'Mahmud Alptekin', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 21, 13, 26, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a65ab68cab0d7789a3bee7b334cc8fc1f7c8e694', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8d035e4adb894a61cdb67b41255812a9346b6e3', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3756fe771f65fd6e0c20516e099d2a49baa54ceb', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e2509b7e26e578497e3395c24956b7c9cf5f25', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b388c15abdf44630f74c769889f97e2951d5fd', 'committer_username': 'Subhasish-Behera', 'committer_name': 'SUBHASISH BEHERA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 10, 15, 8, 35, 25, tzinfo=datetime.timezone.utc)}]",SUBHASISH BEHERA,92573882,,User,,72,,102,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,243,612,18,81,2276,423,3,165,"[{'id': 1486879206, 'number': 1425, 'closed': None, 'created': datetime.datetime(2023, 8, 23, 18, 43, 45, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 60, 'deletions': 11, 'state': 'open'}, {'id': 1419981722, 'number': 1414, 'closed': None, 'created': datetime.datetime(2023, 7, 4, 17, 49, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 238, 'deletions': 1, 'state': 'open'}, {'id': 1288417861, 'number': 1352, 'closed': datetime.datetime(2023, 4, 18, 22, 2, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 24, 3, 52, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2225448.0, 'time_delta': '25 days, 18:10:48', 'additions': 38, 'deletions': 38, 'state': 'closed'}, {'id': 1280661524, 'number': 1331, 'closed': None, 'created': datetime.datetime(2023, 3, 17, 19, 14, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 278, 'deletions': 15, 'state': 'open'}, {'id': 1260920928, 'number': 1314, 'closed': None, 'created': datetime.datetime(2023, 3, 2, 18, 57, 41, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 123, 'deletions': 3, 'state': 'open'}, {'id': 1246519893, 'number': 1301, 'closed': None, 'created': datetime.datetime(2023, 2, 20, 1, 39, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 73, 'deletions': 5, 'state': 'open'}, {'id': 1232213687, 'number': 1291, 'closed': None, 'created': datetime.datetime(2023, 2, 7, 16, 1, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 956, 'deletions': 278, 'state': 'open'}, {'id': 1185028302, 'number': 1280, 'closed': None, 'created': datetime.datetime(2023, 1, 4, 14, 51, 58, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 201, 'deletions': 48, 'state': 'open'}, {'id': 1178315079, 'number': 1277, 'closed': datetime.datetime(2023, 9, 18, 5, 57, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 27, 8, 0, 11, tzinfo=datetime.timezone.utc), 'time_taken': 22888613.0, 'time_delta': '264 days, 21:56:53', 'additions': 49, 'deletions': 1, 'state': 'closed'}, {'id': 1156658778, 'number': 1275, 'closed': datetime.datetime(2022, 12, 27, 8, 6, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 9, 20, 37, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1510148.0, 'time_delta': '17 days, 11:29:08', 'additions': 44, 'deletions': 11, 'state': 'closed'}]"
