pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1481400524,Better support for JMH Profiler Configuration," Introduces the capability for users to specify the desired JMH profiler directly as an advanced config option.

`advanced(""jmhProfiler"", ""gc"")`

Resolves: #50",False,146,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/146,https://github.com/Kotlin/kotlinx-benchmark/pull/146,closed,107,1,4,9,2,15,1,0,[{'name': 'enhancement'}],2023-08-19 09:03:29+00:00,2024-05-23 16:43:32+00:00,24046803.0,"278 days, 7:40:03","[{'comment_id': 1306761824, 'comment_body': 'Could you please explain what `libasyncProfiler` is and how can it be specified?', 'comment_created': datetime.datetime(2023, 8, 28, 0, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306762752, 'comment_body': '```suggestion\r\n        runner.runAndFail(""invalidJvmProfiler"") {\r\n```', 'comment_created': datetime.datetime(2023, 8, 28, 0, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306832955, 'comment_body': 'I am currently unfamiliar. \r\nhttps://github.com/async-profiler/async-profiler \r\nHttps://www.youtube.com/playlist?list=PLNCLTEx3B8h4Yo_WvKWdLvI9mj1XpTKBr \r\nI will look to dive in here and modify the pr if appropriate. ', 'comment_created': datetime.datetime(2023, 8, 28, 2, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1321620902, 'comment_body': '""jvmProfiler"" is also an accepted option now', 'comment_created': datetime.datetime(2023, 9, 11, 14, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1321686158, 'comment_body': 'What if `jvmProfiler` is not provided at all?', 'comment_created': datetime.datetime(2023, 9, 11, 14, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1321772401, 'comment_body': 'Should we support other profilers described here? https://github.com/openjdk/jmh/blob/362d6579e007f0241f05c1305f0b269fcc2cc27a/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_35_Profilers.java#L352C97-L352C97', 'comment_created': datetime.datetime(2023, 9, 11, 16, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1321777964, 'comment_body': 'Those profilers seem to require root privileges to run (at least for macOS). Such requirements can be documented in the configuration options document', 'comment_created': datetime.datetime(2023, 9, 11, 16, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1321985331, 'comment_body': 'Added a null case to address this https://github.com/Kotlin/kotlinx-benchmark/pull/146/commits/452c353fa30d886d5e65bbca170e7a568143a6ff.', 'comment_created': datetime.datetime(2023, 9, 11, 19, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1321988908, 'comment_body': 'Added https://github.com/Kotlin/kotlinx-benchmark/pull/146/commits/f3e0b8a7c2bfd62a5d4ab93447d42e4f42ba7b5a. ', 'comment_created': datetime.datetime(2023, 9, 11, 19, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1542666438, 'comment_body': 'One of the test above fails now. Because `jvmProfiler ` was added to the ""Accepted options"":\r\n```\r\nrunner.runAndFail(""invalidAdvancedConfigNameBenchmark"") {\r\n    assertOutputContains(""Invalid advanced option name: \'jsFork\'. Accepted options: \\""nativeFork\\"", \\""nativeGCAfterIteration\\"", \\""jvmForks\\"", \\""jsUseBridge\\""."")\r\n}\r\n```', 'comment_created': datetime.datetime(2024, 3, 28, 10, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1542671352, 'comment_body': 'Can it be changed to the following?\r\n```\r\nif (profilerName != null) {\r\n    jmhOptions.addProfiler(profilerName)\r\n}\r\n```', 'comment_created': datetime.datetime(2024, 3, 28, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1542735563, 'comment_body': 'When a profiler (e.g., `gc`) is added, each iteration result includes not just the primary result but also a secondary one. Currently, our reporters seem to ignore these secondary results from the iterations. To observe the discrepancy, one can run a benchmark directly with JMH adding a profiler, and compare it to running a benchmark via the kx-benchmark plugin, also with a profiler added.\r\n\r\nCould you please ensure that the secondary result (if not empty) of each iteration is reported as well?\r\nThe secondary result of a set of iterations should also be reported.', 'comment_created': datetime.datetime(2024, 3, 28, 11, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1542741572, 'comment_body': 'It might make sense to extract the list of advanced option names into a property of the `ValidOptions` object.', 'comment_created': datetime.datetime(2024, 3, 28, 11, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1542756617, 'comment_body': ""Voting for `jmhOptions.addProfiler(profilerName)`:\r\n- the list of profilers here is already incomplete;\r\n- we can't hardcode it as users are allowed to specify a custom JMH version and it may have different profilers bundled inside;\r\n- there's no way to specify a custom profiler bundled in a separate jar."", 'comment_created': datetime.datetime(2024, 3, 28, 11, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fzhinkin', 'type': 'User'}, {'comment_id': 1542956161, 'comment_body': 'The `libasyncProfiler` argument is passed when a benchmark task is run from the IntelliJ Gradle panel with an embedded profiler attached.\r\n\r\nIt makes sense to add a comment in the code explaining this.', 'comment_created': datetime.datetime(2024, 3, 28, 13, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}]","[{'commit_sha': 'bae25e0401f1663b5b7d0ebe0cf4aaca76ba5014', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454e2ad6ea167067068f9a40dfac09e7e87d8f2e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab8fe5b2d20e86069d9abac04354cd82508a4c89', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e1bb151a66aa44632d81dd04526bfca9a7e9b1', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db1cb33204aa077591c378f0550760d4710a084', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452c353fa30d886d5e65bbca170e7a568143a6ff', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e0b8a7c2bfd62a5d4ab93447d42e4f42ba7b5a', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc09ae1ecbfd9a5b500ed6a250ab7f15f06fe4c8', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0964a230f970def1011e4f2bb7272477ffc60eba', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1495219560,Annotation usage tests and error msg improvements,"Introduces annotation tests and improves error messages to ensure the library behaves as expected across different use cases.
- [x] Verify failure & error message when using `@Param` on `val` properties.
- [x] Verify success/failure & error clarity when using `@Param` on:
  - [x] `final` properties.
  - [x] `private` properties.
  - [x] `internal` properties.
- [x] Verify success/failure & error clarity when using `@Benchmark` on:
  - [x] `final` methods.
  - [x] `private` methods.
  - [x] `internal` methods.
- [x] Test behavior when a setup, teardown, or benchmark method takes:
  - [x] A `Blackhole`.
  - [ ] A `@State` object.
  - [x] An argument that is neither a `Blackhole` nor a `@State` object.
- [x] Test for successful/error behavior when:
  - [x] A method is marked with both `@Benchmark` and `@Setup/@TearDown`.
  - [x] A method is marked with both `@Setup` and `@TearDown`.
",False,149,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/149,https://github.com/Kotlin/kotlinx-benchmark/pull/149,closed,599,16,7,3,1,29,1,0,[{'name': 'tests'}],2023-08-30 09:51:19+00:00,2024-05-06 15:35:42+00:00,21620663.0,"250 days, 5:44:23","[{'comment_id': 1314928610, 'comment_body': 'We should use ""property"" term instead of ""field"". As described in official documents, in Kotlin it\'s not possible to declare a field directly: https://kotlinlang.org/docs/properties.html#backing-fields', 'comment_created': datetime.datetime(2023, 9, 4, 13, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315176565, 'comment_body': 'The generated descriptor should also contain `""parameters = listOf(\\""data\\"")""`', 'comment_created': datetime.datetime(2023, 9, 4, 19, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315187151, 'comment_body': 'This file now contains multiple instances of the same code.\r\n\r\nCould the duplications be extracted to functions?\r\n\r\nFor example, if we create the following functions inside `SuiteSourceGeneratorTest`:\r\n```\r\nprivate fun Runner.assertGeneratedDescriptorContains(substring: String) {\r\n    generatedDir(""native"", ""test/CommonBenchmark_Descriptor.kt"") { file ->\r\n        val text = file.readText()\r\n        assertTrue(text.contains(substring), ""Substring: <$substring> not found in <$text>"")\r\n    }\r\n}\r\n\r\nprivate fun Runner.assertGeneratedDescriptorContains(pattern: Regex) {\r\n    generatedDir(""native"", ""test/CommonBenchmark_Descriptor.kt"") { file ->\r\n        val text = file.readText()\r\n        assertTrue(text.contains(pattern), ""Pattern: <$pattern> not found in <$text>"")\r\n    }\r\n}\r\n\r\nprivate inline fun testSourceGenerator(setupBlock: Runner.() -> Unit, checkBlock: Runner.() -> Unit) {\r\n    project(""kotlin-multiplatform"", true).apply {\r\n        setupBlock()\r\n        run(""nativeBenchmarkGenerate"")\r\n        checkBlock()\r\n    }\r\n}\r\n```\r\nthen this test could be written this way:\r\n```\r\ntestSourceGenerator(\r\n    setupBlock = {\r\n        updateAnnotations(""src/commonMain/kotlin/CommonBenchmark.kt"") {\r\n            benchmarkMode(""Mode.AverageTime"")\r\n        }\r\n    },\r\n    checkBlock = {\r\n        val parameters = ""mode = Mode.AverageTime"".replace("" "", ""\\\\s+"").toRegex()\r\n        assertGeneratedDescriptorContains(parameters)\r\n    }\r\n)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 20, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315190902, 'comment_body': 'There are duplications in these tests? Could those duplications be extracted?', 'comment_created': datetime.datetime(2023, 9, 4, 20, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315191366, 'comment_body': 'The indentation should be preserved.', 'comment_created': datetime.datetime(2023, 9, 4, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315199879, 'comment_body': 'Could you please add `internal`, `protected`, `final` methods as well, and test that all platforms behave the same when the method is annotated with @Setup/@Teardown/@Benchmark?', 'comment_created': datetime.datetime(2023, 9, 4, 21, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315200045, 'comment_body': 'Tests for this property are missing.', 'comment_created': datetime.datetime(2023, 9, 4, 21, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315320695, 'comment_body': 'Noted and addressed in the latest commit.', 'comment_created': datetime.datetime(2023, 9, 5, 3, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1315320910, 'comment_body': 'Got it. I have pushed this in the latest commit.', 'comment_created': datetime.datetime(2023, 9, 5, 3, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1315321407, 'comment_body': 'Thank you for pointing this out. I have implemented the recommended changes and will look to write concise code in the future.  ', 'comment_created': datetime.datetime(2023, 9, 5, 3, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1315321535, 'comment_body': 'Addressed.', 'comment_created': datetime.datetime(2023, 9, 5, 3, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1315321790, 'comment_body': 'Yes. I will look too complete the rest of the usage tests then simplify the code appropriately.', 'comment_created': datetime.datetime(2023, 9, 5, 3, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1315322207, 'comment_body': 'Will do. How do you recommend I approach verifying similar behavior.', 'comment_created': datetime.datetime(2023, 9, 5, 3, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1320699141, 'comment_body': 'Resolved.', 'comment_created': datetime.datetime(2023, 9, 10, 5, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1526334561, 'comment_body': 'These modifiers do not seem to be used.', 'comment_created': datetime.datetime(2024, 3, 15, 14, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1526359363, 'comment_body': 'Could the validation code be extracted to separate functions?', 'comment_created': datetime.datetime(2024, 3, 15, 14, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529292146, 'comment_body': 'Does this class allow to specify both `setup` and `teardown` methods, or specify multiple setup methods? If not, I suggest enforcing this rule by first checking that `var methodName` has not already been assigned.', 'comment_created': datetime.datetime(2024, 3, 18, 21, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529318452, 'comment_body': 'Could you please also test the cases when neither the `teardown` nor the `setup` method is specified?', 'comment_created': datetime.datetime(2024, 3, 18, 21, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529324700, 'comment_body': 'Could you please also test the case when multiple functions are annotated with `@Setup`/`@TearDown`/`@Benchmark`?', 'comment_created': datetime.datetime(2024, 3, 18, 21, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529335654, 'comment_body': '`SuiteSourceGenerator` should handle multiple setup, teardown or benchmark methods.', 'comment_created': datetime.datetime(2024, 3, 18, 21, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529347035, 'comment_body': 'Could you please create a separate template project for new tests?\r\nThis template project is now used for too many test scenarios and seems overloaded.', 'comment_created': datetime.datetime(2024, 3, 18, 22, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529362958, 'comment_body': ""I am not sure if the name correctly reflects the content of the list. Maybe 'platformBenchmarkTasks' or 'benchmarkTasks' would be better?"", 'comment_created': datetime.datetime(2024, 3, 18, 22, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529416289, 'comment_body': 'I believe it would be more useful for users to know what is allowed, similar to the message about mutability: `""Ensure properties annotated with @Param are mutable (var).""`\r\n\r\nSince the generated descriptor calls `instance.${property.name} = params.getValue(...)`, the property must be public. Otherwise, the generated descriptor won\'t compile.\r\n\r\nTherefore, I suggest the following check:\r\n```\r\nproperty.visibility != DescriptorVisibilities.PUBLIC -> error(""Invalid usage of @Param: Property `${property.name}` is ${property.visibility}. Ensure properties annotated with @Param are public."")\r\n```', 'comment_created': datetime.datetime(2024, 3, 18, 22, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529424334, 'comment_body': 'This `when` statement is not exhaustive. What happens if the `annotation` does not match any of the options below?', 'comment_created': datetime.datetime(2024, 3, 18, 23, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529437222, 'comment_body': 'Does this test actually annotate the `plainMethod` with `@Param`?', 'comment_created': datetime.datetime(2024, 3, 18, 23, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529451146, 'comment_body': 'If it did, JVM compilation would fail. On other platforms, the annotation would be ignored. This highlights the necessity to set the [annotation target](https://kotlinlang.org/docs/annotations.html) for `Param` in other targets as well.', 'comment_created': datetime.datetime(2024, 3, 18, 23, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529468489, 'comment_body': ""Is there any particular reason why we shouldn't use `if (function.visibility != DescriptorVisibilities.PUBLIC)` ?"", 'comment_created': datetime.datetime(2024, 3, 18, 23, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529477103, 'comment_body': 'While JMH can inject `State` objects, kotlinx-benchmark cannot. Therefore, for platforms other than the JVM, only a single `Blackhole` is allowed. See:\r\n\r\nhttps://github.com/Kotlin/kotlinx-benchmark/blob/231ce03739278a5f0f9805dc2760d568dd7fe64e/plugin/main/src/kotlinx/benchmark/gradle/SuiteSourceGenerator.kt#L266', 'comment_created': datetime.datetime(2024, 3, 18, 23, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1529480637, 'comment_body': 'Are `setup` and `teardown` methods allowed to have parameters?', 'comment_created': datetime.datetime(2024, 3, 18, 23, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}]","[{'commit_sha': '733369af04c79aa67fa64742d1ee67e2b647096c', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ac4bd4998e7645840f395abd2d593eed81b8de', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c88b3ed5f7e13c4d5451acb7600d3584e489419', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1474190378,Introduce errors on incorrect target,"Fail if a legacy JS target/compilation is registered, Kotlin/JS doesn't target Node.js, or Kotlin/WASM does not target D8. Change JsBenchmarkTarget.compilation type to KotlinJsIrCompilation",False,142,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/142,https://github.com/Kotlin/kotlinx-benchmark/pull/142,closed,175,74,8,11,1,24,0,0,[],2023-08-14 10:36:35+00:00,2023-09-11 19:08:01+00:00,2449886.0,"28 days, 8:31:26","[{'comment_id': 1306743918, 'comment_body': 'Please revert this change', 'comment_created': datetime.datetime(2023, 8, 27, 23, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306744391, 'comment_body': 'Is it possible to change the `compilation` argument type to `KotlinJsIrCompilation`?', 'comment_created': datetime.datetime(2023, 8, 27, 23, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306746452, 'comment_body': 'WDYT about moving up the `kotlin {}` section? As we documented in the README, the step for adding Kotlin targets precedes the steps for configuring benchmarks.', 'comment_created': datetime.datetime(2023, 8, 27, 23, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306747040, 'comment_body': ""Minor: It's a nice practice to write opening and closing triple quotes with the same indentation."", 'comment_created': datetime.datetime(2023, 8, 27, 23, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306747771, 'comment_body': 'Could you please also test `js` with the legacy compiler?', 'comment_created': datetime.datetime(2023, 8, 27, 23, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306748914, 'comment_body': 'Could you please also test when the `browser()` environment is selected?', 'comment_created': datetime.datetime(2023, 8, 27, 23, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306750114, 'comment_body': 'Could you please also test when the `browser()` environment is selected?', 'comment_created': datetime.datetime(2023, 8, 27, 23, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306757022, 'comment_body': 'Recently, we decided to use ""wasmJs"" name for wasm target. See https://github.com/Kotlin/kotlinx-benchmark/pull/129', 'comment_created': datetime.datetime(2023, 8, 28, 0, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1306834191, 'comment_body': 'Thank you for catching this.', 'comment_created': datetime.datetime(2023, 8, 28, 2, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1306834853, 'comment_body': 'It is definitely more appropriate. Moved in the latest commit. I will look to consider order and other style details while implementing In the future.', 'comment_created': datetime.datetime(2023, 8, 28, 2, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1310026026, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1310029963, 'comment_body': 'Thank you for catching this. ', 'comment_created': datetime.datetime(2023, 8, 30, 10, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1312853042, 'comment_body': '`ir` seems to be always `true`. Can it be removed?', 'comment_created': datetime.datetime(2023, 9, 1, 10, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1312854742, 'comment_body': 'Is `loadJsDescriptors` used anywhere else? Could it be removed as well?', 'comment_created': datetime.datetime(2023, 9, 1, 10, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1316670524, 'comment_body': 'Resolved https://github.com/Kotlin/kotlinx-benchmark/pull/142/commits/b9ddc6632004a0902835fed2ca2663cc6f4998da', 'comment_created': datetime.datetime(2023, 9, 6, 3, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1316670643, 'comment_body': 'Resolved https://github.com/Kotlin/kotlinx-benchmark/pull/142/commits/b9ddc6632004a0902835fed2ca2663cc6f4998da', 'comment_created': datetime.datetime(2023, 9, 6, 3, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1316670903, 'comment_body': 'Resolved https://github.com/Kotlin/kotlinx-benchmark/pull/142/commits/d75202f29dce77121c4b1c6bcd829ff2e85da3af', 'comment_created': datetime.datetime(2023, 9, 6, 3, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1318121115, 'comment_body': 'Yes. Removed in https://github.com/Kotlin/kotlinx-benchmark/pull/142/commits/94594d2f36bfaf8cfd2d2d2e713a68e965e0a9ef Thank you for pointing this out.', 'comment_created': datetime.datetime(2023, 9, 7, 6, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1318123362, 'comment_body': 'It is not. Removed in https://github.com/Kotlin/kotlinx-benchmark/pull/142/commits/58334d1b73c9f6a2e04f9fde1a12ba114b593a87', 'comment_created': datetime.datetime(2023, 9, 7, 6, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1320702098, 'comment_body': 'The type was not modified in this case but when it is an IR compilation then the type is KotlinJsIrCompilation. ', 'comment_created': datetime.datetime(2023, 9, 10, 6, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1321955811, 'comment_body': 'Please try to avoid changes like this. It adds a meaningless entry to the file history.', 'comment_created': datetime.datetime(2023, 9, 11, 18, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1321957619, 'comment_body': 'Please try to avoid unnecessary changes like this.', 'comment_created': datetime.datetime(2023, 9, 11, 18, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1321975521, 'comment_body': 'Noted. I am curious as to what the root cause of this showing up in the file history is given their is no change. Will be wary moving forward.', 'comment_created': datetime.datetime(2023, 9, 11, 19, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1321975718, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2023, 9, 11, 19, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': '5c415964a11e62249d015e3608aca64c9fb808bb', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588057e045940413604d432426e0fe448d42d033', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8bfd48b725d986cc52f97c7d866b607815a028e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c00fbfbdce174fcee5fa314a6ffb9b9bdf71081e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76599ac782078514ccea524ccb323ce67e74a3f', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f31091217063dfd3acac11ba136202db49c1111e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eed424854f4169e9b7869d435009edf3718602a4', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75202f29dce77121c4b1c6bcd829ff2e85da3af', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9ddc6632004a0902835fed2ca2663cc6f4998da', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94594d2f36bfaf8cfd2d2d2e713a68e965e0a9ef', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58334d1b73c9f6a2e04f9fde1a12ba114b593a87', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1459118674,Use kts build script in example projects & update with latest dsl,All build scripts have been migrated to make use of the most recent DSL versions.,False,136,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/136,https://github.com/Kotlin/kotlinx-benchmark/pull/136,open,307,357,23,11,0,18,1,0,[{'name': 'enhancement'}],2023-08-02 04:53:00+00:00,,0.0,,"[{'comment_id': 1315218753, 'comment_body': 'The `:runtime` project is always expected to be found. Thus, it makes sense to use non-null `project("":runtime"")`', 'comment_created': datetime.datetime(2023, 9, 4, 22, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315223875, 'comment_body': ""Should be `kotlin_repo_url`. This project property is set from the command line by some TeamCity build configurations. The property name thus can't be changed separately."", 'comment_created': datetime.datetime(2023, 9, 4, 22, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315225695, 'comment_body': 'Alternatively\r\n```\r\nkotlin_repo_url?.takeIf { it.isNotEmpty() }?.let { repoUrl ->\r\n    maven { url = uri(repoUrl) }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 23, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315228575, 'comment_body': 'This property should be configured inside `sonatype {}` block below.', 'comment_created': datetime.datetime(2023, 9, 4, 23, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315233489, 'comment_body': 'name(""commonTest"") { ... }', 'comment_created': datetime.datetime(2023, 9, 4, 23, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315235807, 'comment_body': 'Seems to be redundant. The teamcity block can be removed altogether.', 'comment_created': datetime.datetime(2023, 9, 4, 23, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315236290, 'comment_body': 'This plugin is applied two times. This and the one below.', 'comment_created': datetime.datetime(2023, 9, 4, 23, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315243480, 'comment_body': 'Introducing this extra property doesn\'t seem to simplify accessing the project property. Should we use the `""kotlin_repo_url""` property directly?', 'comment_created': datetime.datetime(2023, 9, 5, 0, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315781802, 'comment_body': 'It seems we need to eagerly configure the source sets that declare `dependsOn`connection with another source set.', 'comment_created': datetime.datetime(2023, 9, 5, 11, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315849858, 'comment_body': 'Your PR removes this project.', 'comment_created': datetime.datetime(2023, 9, 5, 12, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1316576139, 'comment_body': 'Thank you for pointing this out.', 'comment_created': datetime.datetime(2023, 9, 6, 1, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1316576480, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2023, 9, 6, 1, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1316576594, 'comment_body': 'Got it. Addressed in the latest commit.', 'comment_created': datetime.datetime(2023, 9, 6, 1, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1320699262, 'comment_body': 'Implemented.', 'comment_created': datetime.datetime(2023, 9, 10, 6, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1320699305, 'comment_body': 'Got it. I have moved it in the latest commit.', 'comment_created': datetime.datetime(2023, 9, 10, 6, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1320699312, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2023, 9, 10, 6, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1320699340, 'comment_body': 'Addressed in the latest commit.', 'comment_created': datetime.datetime(2023, 9, 10, 6, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1320700765, 'comment_body': 'Yes, I have addressed this in the latest commit.', 'comment_created': datetime.datetime(2023, 9, 10, 6, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': '68f2ae46f79bfa649d94f3920152016e022b715b', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c62b090a4a512a6bb3274d94f011967f6ad3fa56', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7977d26a3d5ac7e0c3189807e122b27afb7e038', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d59dff00017e436d1d4f17c2766f0526491550', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a87ee332a9cb63bffb7e6dc1e8ec1b7ab0604974', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd73996dfb33ff3abc1e392fed9c40977997f8a', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2432a1c1c3e487336cf204029a9c1dc62036b5a', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3f4b6d182d70e8fd7b7681ccda01bb6f9c56acc', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdaa6bb863fb817eaec6bf766038aa1dbc9b479c', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe82cc42a47cee86e042ddcbce5b9b91e72e892a', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb41d14db89fa20cfc7ad30d46790802cbe0a034', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1418766471,validate config values in plugin ,"This PR aims to centralize the validation of all configuration values in the plugin and introducer a failure if iterationTime or iterationTimeUnit is provided without one another, as per issue #124, #125. 
",True,126,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/126,https://github.com/Kotlin/kotlinx-benchmark/pull/126,closed,348,3,3,11,0,0,0,0,[],2023-07-03 23:13:20+00:00,2023-08-10 08:59:37+00:00,3231977.0,"37 days, 9:46:17",[],"[{'commit_sha': '41f92b5186c2b43ac14258d45ebaa3eaa34f2b99', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03fa38f37883bbd39e6eba6060c4530e7e3ee6f', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '106ca0f1a90a726cd2efcafc80db270d2c022077', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cde3b46e58d052cb4fa329b1ae1935dc082f43e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '505d9696274b29af0abd81bfc5b071f9495c1b91', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70225f675c0c877b9ae959f1d077dae569fd3d4b', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'babe6b52fa39483a3a811443f86ed7613870cc65', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ea27b6d009a31283dc46f7c6785a85dec1e109', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27eb7a07d8ee871056a6d45ba852a75d12831b26', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13ac0c60e9d4629c7b6284a93d898e38eeb54483', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c92f35e608d8ec6b45d1dafe6aae1cd2694364', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1410786543,Align default benchmark configurations,"Addresses issue #75 by aligning the default warmup iteration time and count. The default number of warmup and measurement iterations is set to 5, and the default iteration time is set to 10 seconds, aligning with the JVM defaults.


",True,120,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/120,https://github.com/Kotlin/kotlinx-benchmark/pull/120,closed,7,5,1,1,0,3,0,0,[],2023-06-28 00:47:04+00:00,2023-07-01 20:29:35+00:00,330151.0,"3 days, 19:42:31","[{'comment_id': 1248323193, 'comment_body': 'Could you please move `SuiteDescriptor.outputTimeUnit` and `SuiteDescriptor.mode` default values to this object as well?\r\nAlso please make sure the specified defaults are the same in JVM.', 'comment_created': datetime.datetime(2023, 6, 30, 22, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1248688347, 'comment_body': 'Absolutely, pushing an update here shortly addressing your concerns.\r\n\r\nWe might want to consider decoupling the JVM default values from JMH as well, since the JMH defaults are subject to change (though unlikely). https://github.com/Kotlin/kotlinx-benchmark/blob/master/runtime/jvmMain/src/kotlinx/benchmark/jvm/JvmBenchmarkRunner.kt#L17', 'comment_created': datetime.datetime(2023, 7, 1, 8, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1248692667, 'comment_body': 'For the time being, I have aligned them with the JMH defaults https://github.com/openjdk/jmh/blob/master/jmh-core/src/main/java/org/openjdk/jmh/runner/Defaults.java.', 'comment_created': datetime.datetime(2023, 7, 1, 8, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': 'a403d326e672c2ae7c5dcb136324f47d0e032346', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1491480241,Improvements to writing doc,,True,148,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/148,https://github.com/Kotlin/kotlinx-benchmark/pull/148,closed,103,43,2,2,0,0,0,0,[],2023-08-28 06:43:50+00:00,2023-09-01 09:21:48+00:00,355078.0,"4 days, 2:37:58",[],"[{'commit_sha': 'e84bc02f9492d8478c0264e220f704930f673695', 'committer_username': 'qurbonzoda', 'committer_name': 'Abduqodiri Qurbonzoda', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 20, 18, 29, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bd42863778a5ebe3f920a694b39ef403527328', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1469701725,Improve configuration-options.md,,True,138,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/138,https://github.com/Kotlin/kotlinx-benchmark/pull/138,closed,70,25,2,23,0,8,0,0,[],2023-08-10 05:57:42+00:00,2023-08-13 12:29:40+00:00,282718.0,"3 days, 6:31:58","[{'comment_id': 1290330701, 'comment_body': 'Makes sense to mention somewhere in this document that the library has the `""main""` configuration profile created already. And one could configure it as well.', 'comment_created': datetime.datetime(2023, 8, 10, 15, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1290610132, 'comment_body': 'Thank you for pointing this out. I have updated the documentation to include this.', 'comment_created': datetime.datetime(2023, 8, 10, 19, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1291836156, 'comment_body': 'Should be `1`.', 'comment_created': datetime.datetime(2023, 8, 11, 22, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1291841490, 'comment_body': '""Throughput"" and ""AverageTime"" are also possible. They are synonyms for ""thrpt"" and ""avgt"" correspondingly. See\r\nhttps://github.com/Kotlin/kotlinx-benchmark/blob/b5e0a233769a626d2b8318f6389c922ef78df149/runtime/commonMain/src/kotlinx/benchmark/CommonBenchmarkAnnotations.kt#L43', 'comment_created': datetime.datetime(2023, 8, 11, 22, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1291970666, 'comment_body': 'Understood. ', 'comment_created': datetime.datetime(2023, 8, 12, 1, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1291970809, 'comment_body': 'Noted. I have added both to the table in the latest commit', 'comment_created': datetime.datetime(2023, 8, 12, 1, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1292765644, 'comment_body': 'As I have repeated many times: https://github.com/Kotlin/kotlinx-benchmark/pull/117#discussion_r1239269977', 'comment_created': datetime.datetime(2023, 8, 13, 11, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1292858873, 'comment_body': 'I will review that pr among others now and in the future before committing doc changes. Thank you for pointing this out.', 'comment_created': datetime.datetime(2023, 8, 13, 21, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': '2cb551408a0db6d875515de329745a55cf9c656b', 'committer_username': 'qurbonzoda', 'committer_name': 'Abduqodiri Qurbonzoda', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 20, 18, 29, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5622c2cfe53677e1711faa667865fc2d1d36f1c8', 'committer_username': 'qurbonzoda', 'committer_name': 'Abduqodiri Qurbonzoda', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 20, 18, 29, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5a5d21a3029dd62974450a09406dd7a63a8eed3', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6164465d8441e06bd22b296e08bb2782fd900a02', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b09602c8c220e4df36f6a2262234aee5d84f5fe', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021e1d1d80fab42ae942530abe8d81c47912ff09', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab63ad60c0edcf9716fbee4bb0015d9403f2e25c', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89a813bd96b4b2b59e0dd28cf320426e5c1f0d41', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9712e5b22c9dc0806aabe408d43f133f8843d89b', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af574a0dcf87a7a32353d3881b4c0bb39fbc3f11', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369a3845654f5ff1873dfda5cb0dd3efc3263aa0', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3a86095bae04aae4f540c63e54acb3d38f37e19', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc4b2cbaaeee17cfb3ee93f3b24277b7f585f2e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4a82bae6960df4ca235b1e1a061bd1e55ea575', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9967048ed96b146067fc055778098658baa70b4', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ff3a2feb0d8dcd08663d51c83cc7cff3137bb9', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ff2aa2079608e362c47e2b0886815c4913edcf', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e855aa61a5b39fc7ad9360cf28413bc358a6a1', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '159e8e72e998c105a4e9f7126f23cad7d0c2cfb0', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6a0786a80e30bd38ff07f73d9ec28a76259d030', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa88481802fe920995a3a6c7523eb1287b22e29', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3f1290b76c22f04c586bd10816ed02e8d98fa1e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17bfd44af74f41095f6a93c3aba2a8d5d6bacd1b', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1426763635,Introduce Contributing doc,Adds `CONTRIBUTING.md` guide to streamline new contributors.,True,128,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/128,https://github.com/Kotlin/kotlinx-benchmark/pull/128,closed,85,0,2,1,0,5,0,0,[],2023-07-10 04:36:56+00:00,2023-07-14 11:01:12+00:00,368656.0,"4 days, 6:24:16","[{'comment_id': 1258915910, 'comment_body': '```suggestion\r\n    * Write the test that reproduces the bug.\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 21, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1258916295, 'comment_body': 'Could you please change this url?', 'comment_created': datetime.datetime(2023, 7, 10, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1258917521, 'comment_body': 'The ""submitting issues"" part is missing in this document. Please add it as well.', 'comment_created': datetime.datetime(2023, 7, 10, 21, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1259139170, 'comment_body': 'Yes, thank you for pointing this out.', 'comment_created': datetime.datetime(2023, 7, 11, 3, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1259140211, 'comment_body': 'Noted. I have dropped the `submitting changes` section for a `submitting prs` and `submit issues` section in the latest commit. For context, I initially had it in a similar format as https://github.com/Kotlin/kotlinx-io/blob/master/CONTRIBUTING.md.', 'comment_created': datetime.datetime(2023, 7, 11, 3, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': '5db5d7ac16d1beadb379a8a1637db9722c8ed9ff', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1410730084,docs: add READMEs to examples,"Addresses #96 

This pull request introduces README files to each example subdirectory and the root examples directory. These README files serve as a guide to help both new and experienced users navigate and understand the structure and use of each example. The goal here is to improve the user experience by providing helpful and clear information about each example, making it easier for developers to get started with or dive deeper into the kotlinx-benchmark library.

Please review and let me know if there are any suggestions or improvements. Thanks!",True,119,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/119,https://github.com/Kotlin/kotlinx-benchmark/pull/119,closed,241,0,5,2,0,15,0,0,[],2023-06-27 23:25:26+00:00,2023-07-07 18:41:40+00:00,846974.0,"9 days, 19:16:14","[{'comment_id': 1248334019, 'comment_body': 'Using Wrapper is preferred. See for more information: https://docs.gradle.org/current/userguide/gradle_wrapper.html\r\nhttps://stackoverflow.com/questions/39627231/difference-between-using-gradlew-and-gradle\r\n\r\n`gradle` command uses locally installed gradle, which may vary user by user.\r\nFor instance, on my local machine `gradle build` in kotlin-kts directory fails.\r\n\r\nAll tasks in example projects should be run from the library root directory, where the wrapper is generated.\r\ne.g.,  `./gradlew :examples:kotlin-kts:build`', 'comment_created': datetime.datetime(2023, 6, 30, 23, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1248335654, 'comment_body': 'Is building the project required before running benchmarks?\r\nI can run `./gradlew :examples:kotlin-kts:benchmark` without building the kotlin-kts project.', 'comment_created': datetime.datetime(2023, 6, 30, 23, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1248337899, 'comment_body': 'The tasks should be run from the root of the library', 'comment_created': datetime.datetime(2023, 6, 30, 23, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1248338499, 'comment_body': '`gradle` command should be removed in the Task name column.\r\nWDYT?', 'comment_created': datetime.datetime(2023, 6, 30, 23, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1248344531, 'comment_body': 'Could you please specify what is the different between `singleParamBenchmark` and `benchmark` tasks?\r\nThey have exactly the same description. Their description should mention the configuration benchmarks are executed from. It can be done in `BenchmarksPlugin.apply`', 'comment_created': datetime.datetime(2023, 6, 30, 23, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1248345655, 'comment_body': ""Could you please specify what 'main' stands for in the task description. It can be done in `createJvmBenchmarkExecTask` function in JvmTasks.kt. Basically, 'main' is the name of the source set registered as a benchmark target."", 'comment_created': datetime.datetime(2023, 6, 30, 23, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1248346388, 'comment_body': ""Should be 'main' in this example project."", 'comment_created': datetime.datetime(2023, 6, 30, 23, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1255347397, 'comment_body': 'It is not. Understood and updated in the latest commit.', 'comment_created': datetime.datetime(2023, 7, 7, 7, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1255348208, 'comment_body': 'Noted. I have updated all the docs to utilize the wrapper `./gradlew`', 'comment_created': datetime.datetime(2023, 7, 7, 7, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1255348891, 'comment_body': 'Noted, I have rewritten this portion in the latest commit. ', 'comment_created': datetime.datetime(2023, 7, 7, 7, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1255350747, 'comment_body': 'I personally think it could be great to just copy and paste for folks using the terminal however I understand your point. ./gradlew does look a little bit messy however so I have omitted it as recommended.', 'comment_created': datetime.datetime(2023, 7, 7, 7, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1255351970, 'comment_body': 'Thank you for pointing this out. I have addressed this in the latest commit and added better descriptions to every task. ', 'comment_created': datetime.datetime(2023, 7, 7, 7, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1255352851, 'comment_body': 'Thank you for your pointing this out and for your feedback.', 'comment_created': datetime.datetime(2023, 7, 7, 7, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1256286346, 'comment_body': ""This comment doesn't seem to be resolved.\r\nShould be something like `Runs benchmarks for 'main' benchmark target`.\r\n"", 'comment_created': datetime.datetime(2023, 7, 7, 18, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1256405628, 'comment_body': 'My apologies, I believe I resolved it and lost my changes without saving. Will address', 'comment_created': datetime.datetime(2023, 7, 7, 20, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': '07df433eacdca9fc152f064d100bf17df2e65715', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9975b5de81b61134e9f7ea057f1bbd7be74b7cf2', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1478789948,Integration Tests for Benchmark Configuration Options,"Introduces a suite of integration tests to validate the behavior of various configuration options. Aims to ensure that the toolkit behaves as expected when the build script is modified.
",False,145,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/145,https://github.com/Kotlin/kotlinx-benchmark/pull/145,closed,193,2,3,4,1,4,1,0,[{'name': 'tests'}],2023-08-17 10:24:36+00:00,2024-05-04 21:01:54+00:00,22588638.0,"261 days, 10:37:18","[{'comment_id': 1315207851, 'comment_body': ""The error message is duplicated in case of failure: \r\n`java.lang.AssertionError: Expected X iterations but found Y expected:<X> but was:<Y>`\r\nThat's because JUnit appends its error message to the provided one. It makes sense to remove the custom message."", 'comment_created': datetime.datetime(2023, 9, 4, 21, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1315212415, 'comment_body': 'There is the same pattern in all tests. It means a function can be created to reduce code duplication. For example, if we create the following method inside `ConfigurationTest`:\r\n```\r\nprivate fun testConfiguration(setupBlock: BenchmarkConfiguration.() -> Unit, checkBlock: BuildResult.() -> Unit) {\r\n    project(""kotlin-multiplatform"") {\r\n        configuration(""config"") {\r\n            setupBlock()\r\n        }\r\n    }.run(""nativeConfigBenchmark"") {\r\n        checkBlock()\r\n    }\r\n}\r\n```\r\n\r\nthis test could be written as:\r\n```\r\nval expectedOutputTimeUnit = ""ns""\r\n\r\ntestConfiguration(\r\n    setupBlock = {\r\n        outputTimeUnit = expectedOutputTimeUnit\r\n    },\r\n    checkBlock = {\r\n        val actualOutputTimeUnit = output.lines().find { it.contains(""ops/$expectedOutputTimeUnit"") }\r\n        assertNotNull(actualOutputTimeUnit, ""Expected output to specify time unit as $expectedOutputTimeUnit but was not found."")\r\n    }\r\n)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 21, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1326757533, 'comment_body': 'refactored ✅', 'comment_created': datetime.datetime(2023, 9, 15, 3, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1326762605, 'comment_body': 'Addressed https://github.com/Kotlin/kotlinx-benchmark/pull/145/commits/c4938eb9b64dd874f4d6b53f2301aac5b326d7bf', 'comment_created': datetime.datetime(2023, 9, 15, 3, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': 'fda645616e62cf615d47e76c98a8f18b5e4fb7dd', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a8d446e5a085fdc9fd42843bb7ee0f47bd1ea4a', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cc50e1e39f1723f4f636b4bd8d60fb4eb1e8dab', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec4a51a1f9346c8ff7cf400f6e307ffefbecd5b2', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1474239320,Add Tests for Benchmark Annotations,Revamped the `AnnotationsSpecifier` class and added tests for multiplatform supported annotations.,False,144,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/144,https://github.com/Kotlin/kotlinx-benchmark/pull/144,closed,173,3,4,6,1,0,1,0,[{'name': 'tests'}],2023-08-14 11:10:45+00:00,2024-05-06 21:14:20+00:00,23018615.0,"266 days, 10:03:35",[],"[{'commit_sha': '852e4d63cb1fee5e16897e6389420ebed148e086', 'committer_username': 'qurbonzoda', 'committer_name': 'Abduqodiri Qurbonzoda', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 20, 18, 29, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b714231d27f7c8f17a93d34f17f8c7e3e3e109', 'committer_username': 'qurbonzoda', 'committer_name': 'Abduqodiri Qurbonzoda', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 20, 18, 29, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '357f69eb04fe6e44651b635ad715131b1a8c5840', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2c5f8c8a5b14aafcdc2ceb04dbdc2d386f262a4', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2229817b39e88f4900db8d645596842ee00526dd', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8df97b02bf9ea1e841cc30bafb60383a4cc3ad09', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1472583808,Introduce ValidOptions object to OptionsValidationTest,Introduce the `ValidOptions` object in `OptionsValidationTest` ensuring the integration tests align with the validations. Fixes failing Mode test.,False,140,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/140,https://github.com/Kotlin/kotlinx-benchmark/pull/140,closed,23,15,1,1,1,0,0,0,[],2023-08-12 02:36:13+00:00,2023-08-13 11:53:32+00:00,119839.0,"1 day, 9:17:19",[],"[{'commit_sha': 'bf36ceaf8220909e230f79db59d6ca3f44b5324a', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1473538320,Improve tasks doc,Refactor the structure for better readability and enhance the language clarity and grammar.,True,141,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/141,https://github.com/Kotlin/kotlinx-benchmark/pull/141,closed,52,33,1,4,0,6,0,0,[],2023-08-13 23:53:19+00:00,2023-08-15 05:01:02+00:00,104863.0,"1 day, 5:07:43","[{'comment_id': 1293290758, 'comment_body': 'Could you please also add that ""In our example, `benchmark` runs benchmarks within the ""main"" profile in both `jvm` and `js` targets.""', 'comment_created': datetime.datetime(2023, 8, 14, 10, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1293321877, 'comment_body': 'Added\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 14, 11, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1293334827, 'comment_body': 'It is worth mentioning that the JAR file can be used for running JMH profilers', 'comment_created': datetime.datetime(2023, 8, 14, 11, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1293335606, 'comment_body': '```suggestion\r\n    - Runs benchmarks within the ""main"" profile for all registered targets.\r\n    - In our example, `benchmark` runs benchmarks within the ""main"" profile in both `jvm` and `js` targets.\r\n```', 'comment_created': datetime.datetime(2023, 8, 14, 11, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1293773511, 'comment_body': 'Noted. I have added this in the latest commit with a new list item. ', 'comment_created': datetime.datetime(2023, 8, 14, 17, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1293773835, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 8, 14, 17, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': '2b47701df3c787860a453194e12d65593734419b', 'committer_username': 'qurbonzoda', 'committer_name': 'Abduqodiri Qurbonzoda', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 20, 18, 29, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bc85b5d7823f2755978cb708d1a9fb1877cb67f', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '273c906d757e7dd2e242598c0ebf1d2ceb8182ef', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbcea561ff63306954fc93385f240fa356c36b2', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1443760093,Improve readme,Introduce a writing-benchmarks.md and polish README.,False,131,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/131,https://github.com/Kotlin/kotlinx-benchmark/pull/131,closed,180,9,2,22,1,46,0,0,[],2023-07-21 00:15:59+00:00,2023-08-21 00:30:41+00:00,2679282.0,"31 days, 0:14:42","[{'comment_id': 1271324630, 'comment_body': 'Could you please write some demo/sample code inside those empty methods?\r\nI believe a realistic (and simple) bechmarking case will be much easier to grasp.', 'comment_created': datetime.datetime(2023, 7, 22, 17, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1282488831, 'comment_body': 'I believe we should emphasis on what options this library provides, not on JMH.\r\nThus I would suggest something like: In Kotlin/JVM target it is also possible to specify `Scope.Thread`, which means ..., and `Scope.Group`, where ... . However, only `Scope.Benchmark` is supported in other targets. In our snippet, ...', 'comment_created': datetime.datetime(2023, 8, 2, 22, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1282491892, 'comment_body': 'Are `@Setup` and `@State` annotations related in any way?', 'comment_created': datetime.datetime(2023, 8, 2, 23, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1282493875, 'comment_body': 'Maybe ""prepare a list **containing** integers from 0 to a specified parameter value"" ?', 'comment_created': datetime.datetime(2023, 8, 2, 23, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1282495359, 'comment_body': 'What levels can the `Setup` annotation have?', 'comment_created': datetime.datetime(2023, 8, 2, 23, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1282498555, 'comment_body': 'Are there any constrains related to the visibility modifier of the benchmark method?', 'comment_created': datetime.datetime(2023, 8, 2, 23, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1282501188, 'comment_body': 'WDYT about the following changes:\r\n* Change param values to ""4"" and ""10"".\r\n* Make `list` a mutable list.\r\n* Fill the `list` in `Setup` function\r\n* Clear the `list` in `Teardown` function\r\n\r\nI think the sample will look a bit more like real use case after these changes.', 'comment_created': datetime.datetime(2023, 8, 2, 23, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1282508866, 'comment_body': 'I have added these in the latest commit. I imagine there is a lot of ways we can make the example more robust and similar to common real use cases.', 'comment_created': datetime.datetime(2023, 8, 2, 23, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1282511085, 'comment_body': 'Got it!', 'comment_created': datetime.datetime(2023, 8, 2, 23, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1282511326, 'comment_body': 'Do you believe it is necessary to mention Java as well?', 'comment_created': datetime.datetime(2023, 8, 2, 23, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1282516007, 'comment_body': 'Agreed. I revamped this in the latest commit.', 'comment_created': datetime.datetime(2023, 8, 3, 0, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1282517647, 'comment_body': 'I prefer this as well.', 'comment_created': datetime.datetime(2023, 8, 3, 0, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1282522260, 'comment_body': 'Their is Level.Trial and Level.Iteration however I am assuming this is only for Kotlin/JVM and Java? \r\n\r\nI am getting this error when I try to use them in Kotlin/JS \r\n`Unresolved reference: Level`\r\n`Too many arguments for public constructor Setup() defined in kotlinx.benchmark.Setup`', 'comment_created': datetime.datetime(2023, 8, 3, 0, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1282526250, 'comment_body': 'In any distinct way compared to the @teardown annotation, not that I am aware of. Could you provide more context?', 'comment_created': datetime.datetime(2023, 8, 3, 0, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1285215335, 'comment_body': 'If you create a new list in `Setup`, it does not make any sense to clear it in `Teardown`.', 'comment_created': datetime.datetime(2023, 8, 6, 12, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285215785, 'comment_body': '> I imagine there is a lot of ways we can make the example more robust and similar to common real use cases.\r\n\r\nAny options to make the example more realistic are welcome.', 'comment_created': datetime.datetime(2023, 8, 6, 12, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285216724, 'comment_body': 'Maybe we should also describe in a couple of sentences what exactly this sample measures.', 'comment_created': datetime.datetime(2023, 8, 6, 13, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285218215, 'comment_body': 'Did you try to run this benchmark in, e.g., K/JS?\r\nThe `@Fork` annotation is available only in the K/JVM target.', 'comment_created': datetime.datetime(2023, 8, 6, 13, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285219368, 'comment_body': ""It's unlikely that someone would want to run a benchmark with a single measurement iteration. Could you please change both warmup and measurement iterations to 20?"", 'comment_created': datetime.datetime(2023, 8, 6, 13, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285219844, 'comment_body': ""No longer '1' and '2'."", 'comment_created': datetime.datetime(2023, 8, 6, 13, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285229077, 'comment_body': 'Makes sense to mention that all benchmark classes need to be annotated with this annotation. In JVM it is not required though.', 'comment_created': datetime.datetime(2023, 8, 6, 14, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285229911, 'comment_body': 'What about `Level.Invocation`?', 'comment_created': datetime.datetime(2023, 8, 6, 14, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285230335, 'comment_body': 'On what level does the `Setup` operate in other targets?', 'comment_created': datetime.datetime(2023, 8, 6, 15, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285231274, 'comment_body': 'As you have already described in `Setup`, creating temporary files and opening network connections should be conducted there, not in a benchmark method.', 'comment_created': datetime.datetime(2023, 8, 6, 15, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285233243, 'comment_body': 'Could you please clarify how you inferred the information about how the toolkit runs in different modes?', 'comment_created': datetime.datetime(2023, 8, 6, 15, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285235132, 'comment_body': 'According to the JMH documentation `@Setup` can be applied only in a `@State` class:\r\nhttps://github.com/openjdk/jmh/blob/09c78d5d0752ffc409e64ca4cabe9dc7b96704d7/jmh-core/src/main/java/org/openjdk/jmh/annotations/Setup.java#L35', 'comment_created': datetime.datetime(2023, 8, 6, 15, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285235640, 'comment_body': 'Yes, only for Kotlin/JVM.\r\nFor other targets `Setup` and `Teardown` work on Trial level. And there is no way to adjust it.', 'comment_created': datetime.datetime(2023, 8, 6, 15, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285235737, 'comment_body': ""No, I don't think so. Our focus is Kotlin."", 'comment_created': datetime.datetime(2023, 8, 6, 15, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1285517373, 'comment_body': 'Understood', 'comment_created': datetime.datetime(2023, 8, 7, 7, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1285518613, 'comment_body': 'Yes, the benchmark methods must always be public as you noted.\r\nhttps://github.com/openjdk/jmh/blob/09c78d5d0752ffc409e64ca4cabe9dc7b96704d7/jmh-core/src/main/java/org/openjdk/jmh/annotations/Benchmark.java#L53', 'comment_created': datetime.datetime(2023, 8, 7, 7, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287664753, 'comment_body': 'Noted ✅', 'comment_created': datetime.datetime(2023, 8, 8, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287668429, 'comment_body': '@qurbonzoda Thanks for clarifying. Curious as to where this ranks on our priority list in terms of adding support for adjustable levels in other targets? Other than that, the documentation has been updated to reflect the current state.', 'comment_created': datetime.datetime(2023, 8, 8, 20, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287681770, 'comment_body': 'Got it. I updated the @Teardown method to print to the console for now and will brainstorm ways to potentially revamp the example to reflect a more coherent use case that utilizes the libraries annotations effectively.', 'comment_created': datetime.datetime(2023, 8, 8, 20, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287694587, 'comment_body': 'Agreed. I have introduced one in the latest commit.', 'comment_created': datetime.datetime(2023, 8, 8, 21, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287697994, 'comment_body': 'Noted. I did not attempt to run it in Kotlin/JS. I decided to move forward by removing the @Fork annotation from the example and modifying the annotation description accordingly.', 'comment_created': datetime.datetime(2023, 8, 8, 21, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287700237, 'comment_body': 'Thank you for pointing this out. I have updated them accordingly.', 'comment_created': datetime.datetime(2023, 8, 8, 21, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287701971, 'comment_body': 'Thank you for pointing this out!', 'comment_created': datetime.datetime(2023, 8, 8, 21, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1287704384, 'comment_body': 'Setup defaults to @Level.Trial on all targets as you noted earlier. I will update the documentation to reflect this info. https://github.com/openjdk/jmh/blob/09c78d5d0752ffc409e64ca4cabe9dc7b96704d7/jmh-core/src/main/java/org/openjdk/jmh/annotations/Setup.java', 'comment_created': datetime.datetime(2023, 8, 8, 21, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1289609542, 'comment_body': 'Thank you for pointing this out. I have added it in the latest commit.', 'comment_created': datetime.datetime(2023, 8, 10, 6, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1289609752, 'comment_body': 'Noted!', 'comment_created': datetime.datetime(2023, 8, 10, 6, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1289615475, 'comment_body': 'In attempt to provide a quality annotation description, I left oversimplifications (not based on code) about how the toolkits operates. I have removed them in the latest commit.', 'comment_created': datetime.datetime(2023, 8, 10, 6, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1289616053, 'comment_body': 'Agreed. I have added this information and more in the latest commit.', 'comment_created': datetime.datetime(2023, 8, 10, 6, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1290423063, 'comment_body': '> If this annotation is not specified, JVMs are not forked and all benchmarks are run in the same JVM process.\r\n\r\nYour other PR provides conflicting information https://github.com/Kotlin/kotlinx-benchmark/pull/138\r\n> If not specified by `@Fork`, it defaults to [Defaults.MEASUREMENT_FORKS (`5`)](https://javadoc.io/static/org.openjdk.jmh/jmh-core/1.21/org/openjdk/jmh/runner/Defaults.html#MEASUREMENT_FORKS)\r\n\r\nCould you please find out what actually happens if `@Fork` is not specified?', 'comment_created': datetime.datetime(2023, 8, 10, 16, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1290607250, 'comment_body': ""Yes. I have fixed this inaccuracy in both PR's based on the JMH defaults https://github.com/openjdk/jmh/blob/master/jmh-core/src/main/java/org/openjdk/jmh/runner/Defaults.java#L88 . I will look to prevent oversights like this in the future."", 'comment_created': datetime.datetime(2023, 8, 10, 19, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1292772952, 'comment_body': ""I don't think we have enough time to implement this."", 'comment_created': datetime.datetime(2023, 8, 13, 12, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1292773015, 'comment_body': 'Definitely after documentation and integration tests', 'comment_created': datetime.datetime(2023, 8, 13, 12, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}]","[{'commit_sha': 'e5a5d21a3029dd62974450a09406dd7a63a8eed3', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6164465d8441e06bd22b296e08bb2782fd900a02', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b09602c8c220e4df36f6a2262234aee5d84f5fe', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021e1d1d80fab42ae942530abe8d81c47912ff09', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab63ad60c0edcf9716fbee4bb0015d9403f2e25c', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89a813bd96b4b2b59e0dd28cf320426e5c1f0d41', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9712e5b22c9dc0806aabe408d43f133f8843d89b', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af574a0dcf87a7a32353d3881b4c0bb39fbc3f11', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369a3845654f5ff1873dfda5cb0dd3efc3263aa0', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3a86095bae04aae4f540c63e54acb3d38f37e19', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc4b2cbaaeee17cfb3ee93f3b24277b7f585f2e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4a82bae6960df4ca235b1e1a061bd1e55ea575', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9967048ed96b146067fc055778098658baa70b4', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ff3a2feb0d8dcd08663d51c83cc7cff3137bb9', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ff2aa2079608e362c47e2b0886815c4913edcf', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e855aa61a5b39fc7ad9360cf28413bc358a6a1', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95cf0085c0dcf06648931e93a9b17e2f956135a0', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a59ca089c76d7732b50b8c7422cb61bf388bb76', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f49de43b55d44e41aa24818e9f47a465cc9a23', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da4aa8bc25b616b64a633d3928a9eb9cc48c91a5', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bca4950b5e4642d89bb775ba8bc710827922cf5a', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4d5f3b5262fb9441b7a5b8a558701767159047', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1474214799,enhance source sets section wording and style,,False,143,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/143,https://github.com/Kotlin/kotlinx-benchmark/pull/143,closed,0,0,0,0,0,0,0,0,[],2023-08-14 10:53:11+00:00,2023-09-18 07:33:47+00:00,3012036.0,"34 days, 20:40:36",[],[],Henok Woldesenbet,62161211,,User,,14,,4,16
1445277854,Correct task descriptions in readme,,True,133,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/133,https://github.com/Kotlin/kotlinx-benchmark/pull/133,closed,4,4,1,1,0,0,0,0,[],2023-07-22 10:28:26+00:00,2023-07-28 19:41:08+00:00,551562.0,"6 days, 9:12:42",[],"[{'commit_sha': '405c1221fdebc72a1389e019e34b767d1e12c4c2', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16
1379790255,docs: create new docs directory,"This pull request introduces enhancements to the kotlinx-benchmark documentation, aiming to provide a comprehensive resource for users at all levels of benchmarking expertise. The improvements focus on the introduction to benchmarking, its applications, and effective setup guides, along with insightful sections on interpreting results and compatibility.#98, #82",True,117,https://api.github.com/repos/Kotlin/kotlinx-benchmark/pulls/117,https://github.com/Kotlin/kotlinx-benchmark/pull/117,closed,1221,145,12,16,0,51,0,0,[],2023-06-05 21:25:34+00:00,2023-07-03 22:28:29+00:00,2422975.0,"28 days, 1:02:55","[{'comment_id': 1222311759, 'comment_body': 'Should be kotlinx-benchmark (with a hyphen) everywhere.\r\nPreviously, the library was called kotlinx.benchmark, but starting from 0.3.0 we have changed the library name and artifact id to comply with naming scheme used in other Kotlin extension libraries.\r\nSee: https://github.com/Kotlin/kotlinx-benchmark/blob/master/CHANGELOG.md#030', 'comment_created': datetime.datetime(2023, 6, 8, 0, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1222321169, 'comment_body': 'Could you please provide an example? I am not sure what _""standardized way to measure and compare performance across different systems""_ means.\r\nAs you have mentioned above, benchmark results may vary depending on environment and/or hardware.', 'comment_created': datetime.datetime(2023, 6, 8, 0, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1222328005, 'comment_body': 'This and the section above seem to be very similar. Can they be merged into one?', 'comment_created': datetime.datetime(2023, 6, 8, 0, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1222331069, 'comment_body': 'Could you please elaborate on this? An example could help.', 'comment_created': datetime.datetime(2023, 6, 8, 0, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1222340225, 'comment_body': 'It could also be mentioned that the code performance should be reproducible. And not depend on unpredictable behavoir, e.g., input/output.', 'comment_created': datetime.datetime(2023, 6, 8, 1, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1222347054, 'comment_body': ""It's worth mentioning that the steps work for JVM-only projects.\r\nThere is an active effort to support separate multiplatform source sets for benchmarks: https://github.com/Kotlin/kotlinx-benchmark/pull/112\r\nAnd steps for setting it up are a bit different."", 'comment_created': datetime.datetime(2023, 6, 8, 1, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236153398, 'comment_body': 'The latest version of the library requires Kotlin 1.8.20 and might require a newer Gradle as well', 'comment_created': datetime.datetime(2023, 6, 21, 1, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236159270, 'comment_body': 'It seems this plugin is redundant in the snippet. It is added in the next step.', 'comment_created': datetime.datetime(2023, 6, 21, 1, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236162371, 'comment_body': 'Descriptions of the 3rd and 4th steps do not correspond to their build script snippet. It seems the descriptions should be swapped.', 'comment_created': datetime.datetime(2023, 6, 21, 1, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236170135, 'comment_body': 'Is it worth mentioning that the plugin is needed only for Kotlin/JVM benchmark code?', 'comment_created': datetime.datetime(2023, 6, 21, 1, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236177474, 'comment_body': 'Also, it might make sense to add link to the library page: https://kotlinlang.org/docs/all-open-plugin.html\r\nWDYT?', 'comment_created': datetime.datetime(2023, 6, 21, 1, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236179186, 'comment_body': 'Support for the Lagecy JS backend was dropped in the latest release, see https://github.com/Kotlin/kotlinx-benchmark/releases/tag/v0.4.8 ', 'comment_created': datetime.datetime(2023, 6, 21, 1, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236214481, 'comment_body': 'For benchmarking Kotlin/JS code Node.js execution enviroment should be targeted. See https://kotlinlang.org/docs/js-project-setup.html#execution-environments\r\n\r\nThis is because kotlinx-benchmark-runtime uses Node.js environment to run benchmarks.\r\nBy default Benchmark.js library (https://benchmarkjs.com) is used under the hood, see `JsBenchmarkExecutor.kt` file', 'comment_created': datetime.datetime(2023, 6, 21, 2, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236221536, 'comment_body': 'It is possible to use kotlinx-benchmark in Java (`plugin { id \'java\' }`) or Kotlin/JVM (`plugin { id \'org.jetbrains.kotlin.jvm\' }`) projects. In this case you should register the source set containing your benchmarks as the target. It can be the ""main"" or ""test"", or a custom source set.\r\nSee `./example/java` and `./example/kotlin` example projects. See `JvmJavaTasks.kt` file to find out what our plugin does in such projects.\r\n\r\nThe library can also be used in kotlin multiplatform (`plugins { id \'org.jetbrains.kotlin.multiplatform\' }`) projects. In this case you should register all targets you want to run benchmarks from. Benchmarks in the main compilation of the registered targets will be run. Another option is to register the compilation you want to run benchmarks from. See `./example/kotlin-multiplatform` example project. See `BenchmarksExtension.kt` file to find the implementation of this logic.\r\n', 'comment_created': datetime.datetime(2023, 6, 21, 2, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1236229651, 'comment_body': 'It is worth mentioning that many of the options correspond to annotations in benchmark code, and values provided in the build script override those values.', 'comment_created': datetime.datetime(2023, 6, 21, 3, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1237418109, 'comment_body': ""Thank you for pointing this out. I'll make sure to adhere to the correct naming convention moving forward. The latest commits should provide the correct library name and artifact id."", 'comment_created': datetime.datetime(2023, 6, 21, 18, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1237418934, 'comment_body': 'Agreed, I have merged them in the latest commit.', 'comment_created': datetime.datetime(2023, 6, 21, 18, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1237420879, 'comment_body': 'Definitely yeah, though this section has been modified a bit, I will look to provide some examples that make things more clear and concrete. ', 'comment_created': datetime.datetime(2023, 6, 21, 18, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1237422341, 'comment_body': 'Agreed. This has been addressed in the latest commit. ', 'comment_created': datetime.datetime(2023, 6, 21, 18, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1237423210, 'comment_body': 'Noted, I have addressed this in the latest commit now that the pr has been merged.', 'comment_created': datetime.datetime(2023, 6, 21, 18, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1238862242, 'comment_body': 'Thank you for pointing this out. I have updated the README to reflect that the library now requires Kotlin 1.8.20 and Gradle 8.0 (based off the release notes). Will look to do some testing to confirm the minimum required Gradle version.', 'comment_created': datetime.datetime(2023, 6, 22, 17, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1238862825, 'comment_body': 'Noted, will look to remove the redundant plugin from this snippet. ', 'comment_created': datetime.datetime(2023, 6, 22, 17, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1238868092, 'comment_body': 'Thank you for spotting the discrepancy. I have decided to combine the steps and move them down to the ""Target-specific configurations"" section in order to promote clarity and reduce redundance. Thoughts?', 'comment_created': datetime.datetime(2023, 6, 22, 18, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1238869076, 'comment_body': 'Completely agree. I added a hyperlink to the library page and moved the plugin down to target specific configurations. ', 'comment_created': datetime.datetime(2023, 6, 22, 18, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1238869490, 'comment_body': 'You can find it under the Kotlin/JVM section.', 'comment_created': datetime.datetime(2023, 6, 22, 18, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1238870663, 'comment_body': 'Revised the documentation to reflect this in the latest commit. ', 'comment_created': datetime.datetime(2023, 6, 22, 18, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1238878111, 'comment_body': 'Thank you for pointing this out. I include a note clarifying this briefly @ step 3. Let me know if you think it is too subtle. ', 'comment_created': datetime.datetime(2023, 6, 22, 18, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1239022704, 'comment_body': 'This snippet should be shifted left. Otherwise, view of this file will include the code fences.', 'comment_created': datetime.datetime(2023, 6, 22, 20, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239023945, 'comment_body': 'Should this plugin be removed from here?', 'comment_created': datetime.datetime(2023, 6, 22, 20, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239024346, 'comment_body': 'Perhaps should be shifted left.', 'comment_created': datetime.datetime(2023, 6, 22, 20, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239080852, 'comment_body': ""Is this necessary? The `allopen` plugin can be applied to a mutiplatform project that has JVM as one of its targets.\r\nFor instance, a multiplatform project with `final` benchmark classes that targets Native and JVM still needs `allopen`. Because kotlinx-benchmark uses JMH for running benchmarks on JVM. While Native doesn't need `allopen`, it doesn't hurt either. It is currently not possible to apply the `allopen` plugin only to JVM target."", 'comment_created': datetime.datetime(2023, 6, 22, 22, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239085646, 'comment_body': 'This information seems to be accidentally removed. The explanation is necessary because it might not be easy for users to infer: https://github.com/Kotlin/kotlinx-benchmark/issues/17', 'comment_created': datetime.datetime(2023, 6, 22, 22, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239094434, 'comment_body': 'Is all this text necessary when only IR backend is supported?\r\nI would write something like ""For Kotlin/JS, only IR backend is supported."" and put link to the IR compiler: https://kotlinlang.org/docs/js-ir-compiler.html', 'comment_created': datetime.datetime(2023, 6, 22, 22, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239141343, 'comment_body': 'What do you think about adding another column to the table for ""Corresponding Annotation""?', 'comment_created': datetime.datetime(2023, 6, 23, 0, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239153786, 'comment_body': 'WDYT about referencing the `separate-source-sets.md` document here?', 'comment_created': datetime.datetime(2023, 6, 23, 0, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239169736, 'comment_body': 'Maybe we should mention that having a separate source set only makes sense when you are adding benchmarks to an existing project. WDYT?', 'comment_created': datetime.datetime(2023, 6, 23, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239171595, 'comment_body': 'A compilation should be registered by its source set name.', 'comment_created': datetime.datetime(2023, 6, 23, 1, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239187433, 'comment_body': 'I am not sure if I understood this particular Q/A correctly. Could you please clarify? An example is greatly appreciated.', 'comment_created': datetime.datetime(2023, 6, 23, 1, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239269977, 'comment_body': 'It would be better to not specify `iterationTimeUnit` and `mode` default values here, as it might be misleading.\r\nHere is why:\r\nAs mentioned above, the configuration options override annotation values. So, if `iterationTimeUnit` is not provided, its default value (second) should override the value provided by the corresponding annotation, which is not the case.\r\nIn fact, ""second"" and ""throughput"" are the default values in annotations.', 'comment_created': datetime.datetime(2023, 6, 23, 2, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1239275409, 'comment_body': 'Great. `allopen` requirement is target-specific indeed.', 'comment_created': datetime.datetime(2023, 6, 23, 3, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'qurbonzoda', 'type': 'User'}, {'comment_id': 1240623978, 'comment_body': 'I appreciate the resources and feedback. I have updated the kotlin/js section of the readme with this info [22e886a](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/22e886a9380be053721184ffd87d450175d6a51c)', 'comment_created': datetime.datetime(2023, 6, 24, 7, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240624405, 'comment_body': 'This definitely seems necessary. I have updated the table to include this [6d43df4](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/6d43df41dcdb8144dbe1412d1a7349a7473d507e)', 'comment_created': datetime.datetime(2023, 6, 24, 7, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240624815, 'comment_body': 'Thank you for pointing this out. I have addressed this in the latest commit [22e886a](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/22e886a9380be053721184ffd87d450175d6a51c)', 'comment_created': datetime.datetime(2023, 6, 24, 7, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240624938, 'comment_body': 'Agreed, my apologies. I have addressed this in the latest commit [22e886a](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/22e886a9380be053721184ffd87d450175d6a51c)', 'comment_created': datetime.datetime(2023, 6, 24, 7, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240625162, 'comment_body': 'Noted. I have addressed this and added an illustrative example in order to prevent confusion [22e886a](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/22e886a9380be053721184ffd87d450175d6a51c)', 'comment_created': datetime.datetime(2023, 6, 24, 7, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240625469, 'comment_body': 'Thank you for the link and advice. I have rewritten this portion here with the text scraped and link included. [22e886a](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/22e886a9380be053721184ffd87d450175d6a51c)', 'comment_created': datetime.datetime(2023, 6, 24, 7, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240625772, 'comment_body': 'I think that would definitely beneficial. I added a hyperlink here [6d43df4](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/6d43df41dcdb8144dbe1412d1a7349a7473d507e). I am trying to include more references in the docs across the board.', 'comment_created': datetime.datetime(2023, 6, 24, 7, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240627089, 'comment_body': 'I agree though I am not sure if this should be mentioned at the very top of the doc or briefly in the ""Why Have Seperate Source Sets"" section. I have pushed a commit that places it in the why section [b0a77f6](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/b0a77f69dbc84664a2984f7382bdc5d26f2cbacc). ', 'comment_created': datetime.datetime(2023, 6, 24, 7, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240627113, 'comment_body': 'Thank you for pointing this out. I have addressed this here [b0a77f6](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/b0a77f69dbc84664a2984f7382bdc5d26f2cbacc)', 'comment_created': datetime.datetime(2023, 6, 24, 7, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240627325, 'comment_body': 'I think the question wording was a little bit off/indirect with this one. I have revamped this question and the Q/A section in general to be more straightforward and descriptive [b0a77f6](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/b0a77f69dbc84664a2984f7382bdc5d26f2cbacc) ', 'comment_created': datetime.datetime(2023, 6, 24, 7, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}, {'comment_id': 1240627699, 'comment_body': ' I appreciate your comment and clarification. I have updated the table to reflect this [6d43df4](https://github.com/Kotlin/kotlinx-benchmark/pull/117/commits/6d43df41dcdb8144dbe1412d1a7349a7473d507e).', 'comment_created': datetime.datetime(2023, 6, 24, 7, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wldeh', 'type': 'User'}]","[{'commit_sha': '5cfb58a16511a3adeadb7b1fe2fcaf539932c633', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d1518da7481f8c4fba97d2ea46afd46c2b280a6', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eaa16c65f344b0e9e3e4a1099daad5f8d0afa6f', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d887acf95e54b538057b347f8a49aaa70ca224', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2721c560741318efea270336321271cd96fe96c8', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82a3a71ef9e33d7ec420baaa917d85cc9e3310bb', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afa70a63b4bbf173487f9f56a9c47b262ae6e4d8', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc2718acbeb76e235f525f7cf1b6db398493960', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6184109f8bfb4c41e8d2f166cb73908ee6bf297e', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d83aad6fe7bcdab6eb58531a64d6215b9833cfa', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e99cc05dab2b6dae14965b71a50b1b4def15ddd3', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2875e76b6fc017a3d657655e17cd769cb248a55f', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6bba25eb8a7941453695ee95d437c0206231a63', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d801bb6491b7e373702349e2bf9ead50e585226', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d98c49c462c5c6653fbe0184f321621c3cb1ea', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6033b045681e01566ee6845c9239b11ed102df2b', 'committer_username': 'wldeh', 'committer_name': 'Henok Woldesenbet', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 13, 23, 55, 29, tzinfo=datetime.timezone.utc)}]",Henok Woldesenbet,62161211,,User,,14,,4,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
162275279,kotlinx-benchmark,Kotlin/kotlinx-benchmark,Kotlin,40,499,31,39,421,59,79,8,"[{'id': 1635798499, 'number': 171, 'closed': datetime.datetime(2024, 1, 24, 10, 54, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 8, 8, 46, tzinfo=datetime.timezone.utc), 'time_taken': 4068508.0, 'time_delta': '47 days, 2:08:28', 'additions': 167, 'deletions': 79, 'state': 'closed'}, {'id': 1511041176, 'number': 151, 'closed': datetime.datetime(2024, 5, 23, 16, 43, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 11, 21, 31, 22, tzinfo=datetime.timezone.utc), 'time_taken': 22014756.0, 'time_delta': '254 days, 19:12:36', 'additions': 1982, 'deletions': 204, 'state': 'closed'}, {'id': 1495219560, 'number': 149, 'closed': datetime.datetime(2024, 5, 6, 15, 35, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 9, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 21620663.0, 'time_delta': '250 days, 5:44:23', 'additions': 599, 'deletions': 16, 'state': 'closed'}, {'id': 1491480241, 'number': 148, 'closed': datetime.datetime(2023, 9, 1, 9, 21, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 6, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 355078.0, 'time_delta': '4 days, 2:37:58', 'additions': 103, 'deletions': 43, 'state': 'closed'}, {'id': 1481400524, 'number': 146, 'closed': datetime.datetime(2024, 5, 23, 16, 43, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 9, 3, 29, tzinfo=datetime.timezone.utc), 'time_taken': 24046803.0, 'time_delta': '278 days, 7:40:03', 'additions': 107, 'deletions': 1, 'state': 'closed'}, {'id': 1478789948, 'number': 145, 'closed': datetime.datetime(2024, 5, 4, 21, 1, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 10, 24, 36, tzinfo=datetime.timezone.utc), 'time_taken': 22588638.0, 'time_delta': '261 days, 10:37:18', 'additions': 193, 'deletions': 2, 'state': 'closed'}, {'id': 1474239320, 'number': 144, 'closed': datetime.datetime(2024, 5, 6, 21, 14, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 14, 11, 10, 45, tzinfo=datetime.timezone.utc), 'time_taken': 23018615.0, 'time_delta': '266 days, 10:03:35', 'additions': 173, 'deletions': 3, 'state': 'closed'}, {'id': 1474214799, 'number': 143, 'closed': datetime.datetime(2023, 9, 18, 7, 33, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 14, 10, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3012036.0, 'time_delta': '34 days, 20:40:36', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1474190378, 'number': 142, 'closed': datetime.datetime(2023, 9, 11, 19, 8, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 14, 10, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 2449886.0, 'time_delta': '28 days, 8:31:26', 'additions': 175, 'deletions': 74, 'state': 'closed'}, {'id': 1473538320, 'number': 141, 'closed': datetime.datetime(2023, 8, 15, 5, 1, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 13, 23, 53, 19, tzinfo=datetime.timezone.utc), 'time_taken': 104863.0, 'time_delta': '1 day, 5:07:43', 'additions': 52, 'deletions': 33, 'state': 'closed'}, {'id': 1472583808, 'number': 140, 'closed': datetime.datetime(2023, 8, 13, 11, 53, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 12, 2, 36, 13, tzinfo=datetime.timezone.utc), 'time_taken': 119839.0, 'time_delta': '1 day, 9:17:19', 'additions': 23, 'deletions': 15, 'state': 'closed'}, {'id': 1469701725, 'number': 138, 'closed': datetime.datetime(2023, 8, 13, 12, 29, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 5, 57, 42, tzinfo=datetime.timezone.utc), 'time_taken': 282718.0, 'time_delta': '3 days, 6:31:58', 'additions': 70, 'deletions': 25, 'state': 'closed'}, {'id': 1459118674, 'number': 136, 'closed': None, 'created': datetime.datetime(2023, 8, 2, 4, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 307, 'deletions': 357, 'state': 'open'}, {'id': 1445277854, 'number': 133, 'closed': datetime.datetime(2023, 7, 28, 19, 41, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 22, 10, 28, 26, tzinfo=datetime.timezone.utc), 'time_taken': 551562.0, 'time_delta': '6 days, 9:12:42', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1443760093, 'number': 131, 'closed': datetime.datetime(2023, 8, 21, 0, 30, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 21, 0, 15, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2679282.0, 'time_delta': '31 days, 0:14:42', 'additions': 180, 'deletions': 9, 'state': 'closed'}, {'id': 1426763635, 'number': 128, 'closed': datetime.datetime(2023, 7, 14, 11, 1, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 4, 36, 56, tzinfo=datetime.timezone.utc), 'time_taken': 368656.0, 'time_delta': '4 days, 6:24:16', 'additions': 85, 'deletions': 0, 'state': 'closed'}, {'id': 1418766471, 'number': 126, 'closed': datetime.datetime(2023, 8, 10, 8, 59, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 23, 13, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3231977.0, 'time_delta': '37 days, 9:46:17', 'additions': 348, 'deletions': 3, 'state': 'closed'}, {'id': 1410786543, 'number': 120, 'closed': datetime.datetime(2023, 7, 1, 20, 29, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 0, 47, 4, tzinfo=datetime.timezone.utc), 'time_taken': 330151.0, 'time_delta': '3 days, 19:42:31', 'additions': 7, 'deletions': 5, 'state': 'closed'}, {'id': 1410730084, 'number': 119, 'closed': datetime.datetime(2023, 7, 7, 18, 41, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 27, 23, 25, 26, tzinfo=datetime.timezone.utc), 'time_taken': 846974.0, 'time_delta': '9 days, 19:16:14', 'additions': 241, 'deletions': 0, 'state': 'closed'}, {'id': 1379790255, 'number': 117, 'closed': datetime.datetime(2023, 7, 3, 22, 28, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 21, 25, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2422975.0, 'time_delta': '28 days, 1:02:55', 'additions': 1221, 'deletions': 145, 'state': 'closed'}]"
