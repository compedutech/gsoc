pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
714393957,New rename plugin implementation,"A new PR for my [GSoC](https://gist.github.com/OliverMadine/96927f88b6e5e7890e5179559089166c) rename plugin since I'm changing my approach to the solution. 

---

After spending some time implementing a solution with Retrie, I've realised it would be better just to modify the source directly (using SYB).

The advantages are:
- Compatibility with earlier ghc versions
- No issues with Retrie compatibility on windows
- We can rename non top-level names
- Easier solution to maintain

I am leaving the plugin disabled by default since we[ still need all relevant files to be indexed ](https://github.com/mpickering/hie-bios/issues/269)to ensure correctness. 
The work towards a full solution to this [has been started](https://github.com/mpickering/hie-bios/pull/301#issue-686541322), however, if we get #2009 merged, then I can look into making a temporary solution (by assuming the `hie.yaml` lists all components).

## Example
Renaming 221 occurrences of the `IdeState` data type in HLS.
HLS rebuilt successfully after this rename!

![rename-demo](https://user-images.githubusercontent.com/30090176/133072143-d7d03ec7-3db1-474e-ad5e-6f40d75ff7ab.gif)

Closes #282.
",True,2108,https://api.github.com/repos/haskell/haskell-language-server/pulls/2108,https://github.com/haskell/haskell-language-server/pull/2108,closed,768,39,64,18,10,4,0,0,[],2021-08-17 16:21:03+00:00,2021-08-21 18:06:53+00:00,351950.0,"4 days, 1:45:50","[{'comment_id': 690735159, 'comment_body': 'remove the retrie depends', 'comment_created': datetime.datetime(2021, 8, 17, 21, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 690736459, 'comment_body': 'avoid `nub`, use `HashSet.toList . HashSet.fromList` instead', 'comment_created': datetime.datetime(2021, 8, 17, 21, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 690743002, 'comment_body': 'We use retrie for Retrie.ExactPrint. Should I try to avoid this?', 'comment_created': datetime.datetime(2021, 8, 17, 21, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 690927244, 'comment_body': 'Are those mostly reexportarlo? If so yes, otherwise keep', 'comment_created': datetime.datetime(2021, 8, 18, 6, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}]","[{'commit_sha': 'eb93be94cbe06dcef990f4c56f3af0948d044979', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fd6b8aef3f86ece1fe3c76c6065a723bea2f08d', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb329be5b7013eb8629c6e91e559ab8b559d4db7', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e3735937a1a50429d770f8b58674fffad9c078', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78474c61c78d713192b981fa7256832ab66daed4', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09dfa3b74158d7bb412bf86c3a5c05eab5653ebc', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108d637c82d1fe08e482761c50020f6ea588529c', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cc18eee024c699251841d1665c765dab851b03a', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5ad66d409571727ad5a1cfc6cb04d4cc2876f9b', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcbde30255e3b92d5b21f608c9fa61f2057e6d39', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd279cab7a79e2232afbf5eca97a3577b2d55c2a1', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c994a0fb22858124a4a2ce15237e24378c5f769', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28795968847b10d9d5d6308885b2c13973063344', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ddd94695610aff8d5c79e66a9fd020f8a047f6', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7639eab569a3cfd00406887bc002c964a2afea3', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa599e274c6254cbf12da78986666ebb16daf694', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d287c00dbcb4aaa896855b4b095fee9891ab64', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40d973e09889b7805dc6916ff4a4d4c045d27f1a', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}]",Oliver Madine,30090176,,User,,14,,41,26
657797529,Rename implementation,"A plugin to implement workspace-wide renaming of symbols as my [GSoC 2021 project](https://summerofcode.withgoogle.com/projects/#5971774971314176)!

### Todo List
- [x] Initial package structure
- [x] Test cases 
- [x] Find basic reference locations
- [x] Find correct references of type constructors
- [x] Find correct references of data constructors 
- [x] Write any additional test cases (type families, record wildcards)
- [ ] Validate names?
- [ ] [Index all files (hie-bios)](https://github.com/mpickering/hie-bios/issues/269)
- [x] Use retrie to rewrites right-hand sides
- [x] Limit retrie rewrite locations to references locations
- [x] Parse AST to rename left-hand sides
- [x] Type rewrites
- [x] Declaration rewrite
- [x] Qualified name rewrites
- [x] Update import lists
- [x] Disable plugin for ghc < 8.8
---

Example:
![example](https://user-images.githubusercontent.com/30090176/129281468-489d1261-1e22-416d-ab8a-8f7031e0995d.gif)
",False,1878,https://api.github.com/repos/haskell/haskell-language-server/pulls/1878,https://github.com/haskell/haskell-language-server/pull/1878,closed,962,53,58,55,21,25,0,0,[],2021-05-30 20:23:04+00:00,2021-08-17 16:21:42+00:00,6811118.0,"78 days, 19:58:38","[{'comment_id': 642136454, 'comment_body': 'It will be great if there are tests for GADTs, Type families, etc.', 'comment_created': datetime.datetime(2021, 5, 30, 22, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Ailrun', 'type': 'User'}, {'comment_id': 642560538, 'comment_body': 'In a multi-project cradle, `references` only returns source locations for the projects that have been indexed. If not all the projects have been indexed, this will lead to incomplete renames. \r\n\r\nHow can we address this? \r\n\r\nOne way might be to grep the workspace for occurrences of the identifier and `uses GetHieAst` them or similar before calling `references` to ensure that they get indexed. ', 'comment_created': datetime.datetime(2021, 5, 31, 15, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 642583709, 'comment_body': ""References are reported for things like qualified names (the entire token `Data.Map.insert` is a reference to `insert`), are implicitly added on to record wildcards(the `{..}` in `Foo{..}` references all the fields of `Foo`) and perhaps more edge cases I'm missing. These will all need to be handled carefully."", 'comment_created': datetime.datetime(2021, 5, 31, 16, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wz1000', 'type': 'User'}, {'comment_id': 642672853, 'comment_body': ""My initial idea was to use the `RefMap` from the `HieAstResult` for the files of interest and reference from the DB otherwise. I've done this in my most recent push. Would this be sufficient?"", 'comment_created': datetime.datetime(2021, 5, 31, 20, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 642675228, 'comment_body': ""Currently, my solution to the qualified name problem is to use the length of the occurrence name to set the correct length of the `textEdit`https://github.com/haskell/haskell-language-server/blob/a80bf10ac07f2d804ce281831c9ebe3c163f9a58/plugins/hls-rename-plugin/src/Ide/Plugin/Rename.hs#L94-L98\r\nI hadn't thought about record wildcards yet though, so I'll make sure to add a test for that shortly.\r\nThanks 🙏 "", 'comment_created': datetime.datetime(2021, 5, 31, 21, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 642676288, 'comment_body': ""I suspect it won't, because it doesn't address my point - the DB gets populated when files are type checked, and in a multi-project cradle this only happens for the projects that are loaded.\r\n\r\nTake the `GhcSessionDeps` data constructor, defined in `Development.IDE.Core.RuleTypes` and used in a bunch of HLS plugins. Can you rename all the occurrences successfully? If yes, then close your editor, wipe `.cache/ghcide`, restart your editor and try the rename again - does it rename all the occurrences this time? "", 'comment_created': datetime.datetime(2021, 5, 31, 21, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 642677975, 'comment_body': ""I think this is a limitation we will just have to live with. I've been asking @fendor for a long time on a way to enumerate all the components in a cradle."", 'comment_created': datetime.datetime(2021, 5, 31, 21, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wz1000', 'type': 'User'}, {'comment_id': 642678502, 'comment_body': ""> One way might be to grep the workspace for occurrences of the identifier and uses GetHieAst them or similar before calling references to ensure that they get indexed.\r\n\r\nI think this is not a very nice solution at all. For example, naively implemented it will raise all sorts of when we try to `GetHieAST` on files which can't be loaded due to not having a proper crade.\r\n\r\nThe real solution would be to work on hie-bios and define an interface to enumerate all the components and subprojects in a particular cradle."", 'comment_created': datetime.datetime(2021, 5, 31, 21, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wz1000', 'type': 'User'}, {'comment_id': 642691831, 'comment_body': ""> I think this is a limitation we will just have to live with. I've been asking @fendor for a long time on a way to enumerate all the components in a cradle.\r\n\r\nA feature that only does X% of the job, X% of the time is bound to generate a lot of support traffic, and I wouldn't want to be on the maintainer side of it.\r\n\r\n> The real solution would be to work on hie-bios and define an interface to enumerate all the components and subprojects in a particular cradle.\r\n\r\nCan you and @fendor draft the work needed here? Maybe @OliverMadine could take a look at it as part of the GSoc project."", 'comment_created': datetime.datetime(2021, 5, 31, 22, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 643060133, 'comment_body': 'I’d be happy to do work on this. A draft of the work would be much appreciated.', 'comment_created': datetime.datetime(2021, 6, 1, 12, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 643761211, 'comment_body': ""Relevant issue: https://github.com/mpickering/hie-bios/issues/269\r\n\r\nI'll write up what I think is missing!"", 'comment_created': datetime.datetime(2021, 6, 2, 8, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 667065073, 'comment_body': 'This should return `match` if either `loc `elem` refs` **or** if the `loc` is inside the span of the declaration that we are trying to rename right? ', 'comment_created': datetime.datetime(2021, 7, 9, 16, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 672249070, 'comment_body': 'I don’t think this works since the declaration isn’t initially matched. For example, even if we return match in every situation, the declaration would still not be rewritten. I’m not sure if there is any way of renaming the declaration with retrie? ', 'comment_created': datetime.datetime(2021, 7, 19, 12, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 672494853, 'comment_body': ""If the declaration isn't initially matched, then this means that Retrie does not alter left-hand-sides, only rhs's. Then the only solution is to rewrite the AST manually using exactprint, but that should be relatively easy."", 'comment_created': datetime.datetime(2021, 7, 19, 17, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689044663, 'comment_body': ""What does this accomplish? Without the retrie dependency the package won't build anyway. "", 'comment_created': datetime.datetime(2021, 8, 15, 7, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689328431, 'comment_body': 'do you need an `impl(ghc > 8.8)` condition here ?', 'comment_created': datetime.datetime(2021, 8, 16, 8, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689334240, 'comment_body': '`head` will crash if there are no names at pos, please fix', 'comment_created': datetime.datetime(2021, 8, 16, 8, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689337913, 'comment_body': ""```suggestion\r\n-- | allows custom 'ContextUpdater' to be given to 'applyWithUpdates'\r\n```"", 'comment_created': datetime.datetime(2021, 8, 16, 8, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689339004, 'comment_body': ""Since we don't expect the plugin to build with 8.6.x, should it be removed from this stack.yaml file?"", 'comment_created': datetime.datetime(2021, 8, 16, 8, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689339112, 'comment_body': ""Since we don't expect the plugin to build with 8.6.x, should it be removed from this stack.yaml file?"", 'comment_created': datetime.datetime(2021, 8, 16, 8, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689339636, 'comment_body': ""is the rename plugin not compatible with 9.0? What's blocking it?"", 'comment_created': datetime.datetime(2021, 8, 16, 8, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689701021, 'comment_body': 'Did you consider SYB for doing this rewrite, just like wingman does? \n\nThat way, if newer GHC versions change the AST, this code will still work. ', 'comment_created': datetime.datetime(2021, 8, 16, 16, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 689810042, 'comment_body': 'There were just some small issues. It is now working', 'comment_created': datetime.datetime(2021, 8, 16, 19, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 690056946, 'comment_body': ""I think this would be a little difficult since there are a lot of names in the decls that we do not want to rename (either because retrie is already renaming the given reference or we don't support renaming for the given type of name). \r\n\r\nHowever, I could take this approach (i.e. modifying the entire source directly and not using retrie). See my comment below."", 'comment_created': datetime.datetime(2021, 8, 17, 5, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 690064286, 'comment_body': 'I forgot to remove this from an old commit, thanks.', 'comment_created': datetime.datetime(2021, 8, 17, 6, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}]","[{'commit_sha': 'e21bb6b43fceb435db5beaee4920872f34008169', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c57f8cdeca43ccc346bcc93066560259c61101e', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c71be14d8c4e0f0a411788b412caf4c44658ea1', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba0934f9c33f8d8d4019f51aa0ebf2530669ace6', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966ead0d9a488a6acd3b76f67336a5d013d130dc', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6634bc54865a45961fad4a0fc2261a24076c552d', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5b6bbff1cef65eca4ef7b2541b83ba9dfaaa048', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50588019681644eeb129829c3cdd51fa487f2f95', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a80bf10ac07f2d804ce281831c9ebe3c163f9a58', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc65cbfccc34d03e3e78f22c33d4d2f3cbeb2ebb', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ff9ba5db001e00ffb65308f59886b1f2e91a35', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a7bc52ce1f13d95b2797cf979091c42cdede74', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f8c08074a8cb9e89ac9c3d321bbd41b8a62f5d', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9d9cc7dd5a48b6c0067f4bc634b7e8f8e75d46', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff170559cc3c322cf4427559753b1e210fc7bef0', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '112dd6cd02cc1048846fd35535ad5d134922cb6d', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d854549f0090301938b9831675a3708ff6710a9', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f80d324e4a84c770535b0fe0da81a896f6d4ca', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99acac2e8f65aaf09f8121193d2a75911aa5acde', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017aac3225441e6e97c628c585c6585058d48724', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ba6e04568a238431a186e7ab50df7df549c119', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7c2b7d1b9ff3892d315e93c667a5925dfa84b6c', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fdb46561d8c84aee5996c2d99f05a74eb7023ff', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f0094490c780dd664794fe7fadf4feea59ae793', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d9dfc018ef2c42425835f497a50ed5e31f834a', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77d3f106ed08d6c4ad4fc4da9c4d316b47fdd765', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82405e5a43386d8bd5d887df0c38b7d955c954e9', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '295422563522510fbf1a41a1950f606395ed0b08', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e90f5357d325de8689d5f2db094c593fbc54f73', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54a952243bd95601859b48e43de0a9e5811c499', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75f411004274629b7f6c41b8bdf226d67effe50a', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392dc94f8df467a597fda7941299cb96da420ef5', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d41fe4100e2a2d964cb01d38f482d5e493e870', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '545e1aa4b1ffdeb2c62bf33bd33b436973d18714', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c247a55364c413f081641a137c60dae9e8aa534b', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e29200e4569c2075c45edf1cbaae766c85afaf', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68275445ed43046b37fd12bb65f4f37efccf2973', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f4b45df16d0a8420f42c1b612797006bee7ba4', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '373ac3de6c4587b980ca4ed4c62352faa27a3a1c', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe3e2d347f4349271d473e2fb314cd7c853ec47', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03693f2a1f5867f80603abcd8e2bd6b5cbafda13', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0206ae1911b981c5e9869df99139d0bf721d9f3', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f2454ac212cdef3cfd2ab5638e93c85177b7cb', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4197543eecf47827026f6730f2da74bd03d89f2d', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8dd9e2f2f5fec3c9a503d2d74ead2091844ef8a', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8692a0afe2d55c7cee12c66d484e8acaa0b485', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c7f46bf5b77f124751972d7da19b69c5269d509', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45b991fce8b6872625485a8b4801b9a2b28102d1', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21b8b25c029a346be3483e7eebec0e382f3f1fcf', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c842bd57df753860a67a25a9d3c3d98c9b2a534', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a247cb20e21c72aa571eaed805226746552f4db', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '203f78c9f6c9637da63c08d7cdcbef30693e7970', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9560320b4e47dd4c72d8b0a9a2fce4d3e4990f', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33756cce045122777a090e96d0ee4bf5e61232e8', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5952677a95bf416151c6fb50171b26e56178b448', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}]",Oliver Madine,30090176,,User,,14,,41,26
686714343,Draft: Add POC for HLS loading multiple components on startup,"Powered by hie-bios.

A prototype implementation for loading multiple components on startup using the WIP hie-bios interface: https://github.com/mpickering/hie-bios/pull/301

The main feature is the usage of `cabal show-build-info`, from here: https://github.com/haskell/cabal/pull/7478 
To test out this PR, you have to install the linked cabal executable from source.
NB: currently cabal only supports loading projects where the build-type is `Simple`.

For debugging, take a look at the result of `cabal build all` in your project, which  *currently must* succeed for `show-build-info` to succeed.",False,2009,https://api.github.com/repos/haskell/haskell-language-server/pulls/2009,https://github.com/haskell/haskell-language-server/pull/2009,closed,93,66,3,1,12,0,0,0,[],2021-07-09 11:26:10+00:00,2022-09-19 20:29:36+00:00,37789406.0,"437 days, 9:03:26",[],"[{'commit_sha': '77d1d3fe03faa2fa3283c79a71f90aca99085e04', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}]",,8463814,,User,,89,,30,62
697765113,Remove show-build-info command and generate build-info as a side-effect of 'build',"This is the first step for implementing Approach 3 of #7489.
Mainly extracted from #7478 

In particular, add a flag `--enable-build-info` to configure of `Setup.hs` and generate build-info.json right next to `setup-config`.

Readable by tooling.

* [x] Cabal Tests using `build-type: Simple`
* [x] Cabal Tests using `build-type: Custom`
* [x] Optional: Add `cabal configure --enable-dump-buildinfo` (e.g. enable/disable the generation)
* [x] Add `buildInfoJson` to `plan.json` output
* [x] Guard against older Cabal versions",True,7498,https://api.github.com/repos/haskell/cabal/pulls/7498,https://github.com/haskell/cabal/pull/7498,closed,1298,211,71,10,9,76,0,0,[],2021-07-27 11:13:28+00:00,2021-09-08 14:51:32+00:00,3728284.0,"43 days, 3:38:04","[{'comment_id': 679830561, 'comment_body': 'This is intentionally terrible so someone can tell me how to improve it and where it should be located', 'comment_created': datetime.datetime(2021, 7, 30, 10, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 679918313, 'comment_body': 'Possible inconsistency, file name is `build-info` but other flags are `buildinfo`. Any preferences?', 'comment_created': datetime.datetime(2021, 7, 30, 13, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 679932487, 'comment_body': ""As far as I'm concerned buildinfo is a word."", 'comment_created': datetime.datetime(2021, 7, 30, 13, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Mikolaj', 'type': 'User'}, {'comment_id': 679999086, 'comment_body': 'Why conditionally? Is there a reason not to write it always?', 'comment_created': datetime.datetime(2021, 7, 30, 15, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 680005627, 'comment_body': 'I did not want to change the default behaviour, but it would be indeed better if it was always generated. Subject to bikeshed.', 'comment_created': datetime.datetime(2021, 7, 30, 15, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680074545, 'comment_body': 'performance is not a problem I suppose', 'comment_created': datetime.datetime(2021, 7, 30, 16, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jneira', 'type': 'User'}, {'comment_id': 680224316, 'comment_body': ""I woudn't be so sure that performance couldn't be a problem, best to err on the side of caution when people with pitchforks are sure to follow if `build` speed regresses ;)\r\n\r\nIf it turns out to be unproblematic it's an easy default to change: just ignore the flag going forward, but the other way around isn't so easy since tooling would break if we introduce a flag.\r\n\r\nLastly my understanding is that hie-bios currently always does at least one (implicit) build call anyway though the repl command so we're just maintaining the status quo if it has to do one with a special flag to get the buildinfo.\r\n"", 'comment_created': datetime.datetime(2021, 7, 30, 21, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680225219, 'comment_body': 'Props for thinking about this corner case!', 'comment_created': datetime.datetime(2021, 7, 30, 21, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680226243, 'comment_body': ""> [..] Helpful for IDEs such as Haskell Language Server\r\n\r\nI think the sales pitch doesn't belong in the code docs but rather in the real docs :)"", 'comment_created': datetime.datetime(2021, 7, 30, 21, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680227415, 'comment_body': 'Nit: IMO these options sound better as `enable/disable-buildinfo` (modulo hyphenation). Think of it kind of like ""debug"" info that\'s also just called `--enable-debug-info` not `--enable-emit-debug-info`.', 'comment_created': datetime.datetime(2021, 7, 30, 21, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680228621, 'comment_body': 'While I also find ""buildinfo"" more natural I found some precedent on the cmdline: `--enable-debug-info` is a thing so maybe we should be consistent with that?', 'comment_created': datetime.datetime(2021, 7, 30, 21, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680229972, 'comment_body': 'Seeing that one would pass the (configure) enable flag to build like this makes me wonder if --dump-buildinfo should imply --enable-buildinfo on the `build` cmdline? `cabal build --enable-buildinfo --dump-buildinfo=PATH` seems quite redundant.', 'comment_created': datetime.datetime(2021, 7, 30, 21, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680230517, 'comment_body': 'I feel like this tuple construction is better written as:\r\n\r\n```\r\nmkBuildInfo wdir pkg_descr lbi _flags targetsToBuild = (,) warnings $\r\n    JsonObject $ [...]\r\n````', 'comment_created': datetime.datetime(2021, 7, 30, 21, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680234894, 'comment_body': 'Unnecessary parens.', 'comment_created': datetime.datetime(2021, 7, 30, 21, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680236190, 'comment_body': ""I feel like this `lookupProgram` mustn't fail as otherwise we wouldn't be able to build either, so it's probably more appropriate to throw an error here rather than the field being nullable. Perhaps you can look for precedent in the build codepath?"", 'comment_created': datetime.datetime(2021, 7, 30, 21, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680236911, 'comment_body': 'IIRC binders of `:: Compiler` are usually called, you know, `compiler`. No need for cryptic H4X0R abbreviations here AFAICT :)', 'comment_created': datetime.datetime(2021, 7, 30, 21, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680240405, 'comment_body': 'Maybe this field should also have a true/false case sensitivity warning like `overrideFieldDebugInfo` for example? ', 'comment_created': datetime.datetime(2021, 7, 30, 21, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680241048, 'comment_body': '*unintelligable mumbling about fmap and the bool function*\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 21, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680241634, 'comment_body': 'I think we ought to emit a warning about this somewhere.', 'comment_created': datetime.datetime(2021, 7, 30, 21, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680242356, 'comment_body': 'IIRC we decided (off-list) this should be nullable to represent build-type:Custom with lib:Cabal being too old. ', 'comment_created': datetime.datetime(2021, 7, 30, 22, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680251183, 'comment_body': ""[[GH doesn't let me review the commit message so this is here instead]]\r\n\r\nSeems this commit doesn't do much of anything anymore the commit message is out of sync here too."", 'comment_created': datetime.datetime(2021, 7, 30, 22, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680251616, 'comment_body': ""[[GH doesn't let me review the commit message so this is here instead]]\r\n\r\n> introduces the buildinfo-components-only flag\r\n\r\nI don't see this being introduced here, seems like the commit message has fallen out of sync with the diff?"", 'comment_created': datetime.datetime(2021, 7, 30, 22, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680253512, 'comment_body': 'Would have been nice to do the refactor and move of this module in separate commits to more easily see what changed.', 'comment_created': datetime.datetime(2021, 7, 30, 22, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 680326276, 'comment_body': ""Remnants of rebasing, removing changes, adding changes, etc... in the hopes to have some kind of commit history. However, it seems currently better to drop and squash commits that don't do anything anymore."", 'comment_created': datetime.datetime(2021, 7, 31, 7, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680330289, 'comment_body': 'The json changes have been extracted to https://github.com/haskell/cabal/pull/7477, this PR will be rebased on top of it once it has been merged.', 'comment_created': datetime.datetime(2021, 7, 31, 8, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680342136, 'comment_body': 'Indeed better, will update', 'comment_created': datetime.datetime(2021, 7, 31, 10, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680342240, 'comment_body': 'no flag `--dump-buildinfo` exists yet, I would leave that to a follow-up PR, unless someone objects', 'comment_created': datetime.datetime(2021, 7, 31, 10, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680342533, 'comment_body': ""> Lastly my understanding is that hie-bios currently always does at least one (implicit) build call anyway though the repl command so we're just maintaining the status quo if it has to do one with a special flag to get the buildinfo.\r\n\r\nyeah but it would be nice if we get to make no one if possible, though"", 'comment_created': datetime.datetime(2021, 7, 31, 10, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jneira', 'type': 'User'}, {'comment_id': 680352045, 'comment_body': 'changed', 'comment_created': datetime.datetime(2021, 7, 31, 12, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680352326, 'comment_body': 'Sure but where?', 'comment_created': datetime.datetime(2021, 7, 31, 12, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680352329, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 31, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680511143, 'comment_body': ""Afaict, the allowed compiler programs for buildings are here: https://github.com/haskell/cabal/blob/496d6fcc26779e754523a6cc7576aea49ef8056e/Cabal/src/Distribution/Simple/Build.hs#L622\r\nLooks like cabal would abort if it isn't one of these four compilers."", 'comment_created': datetime.datetime(2021, 8, 1, 13, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 680512676, 'comment_body': 'Right, but that doesn\'t imply that the `lookupProgram` call will succeed. I would expect the Simple.GHC module to have a bunch of similar ""fail if ghc isn\'t in the ProgramDB"" codepaths and indeed it does stuff like:\r\n\r\n```\r\n      let ghcProg = fromMaybe (error ""GHC.pkgRoot: no ghc program"") $ lookupProgram ghcProgram (withPrograms lbi)\r\n```\r\n\r\nHowever mostly it uses `requireProgram` instead which seems like what we want here too. It emits a nice error if the program can\'t be found. You have to call it in an IO context though.\r\n\r\nAs far as ""the compiler can be found in the ProgramDB"" being an invariant goes, at least the Simple.GHC module does a very early requireProgram call in `configure` so we can surmise that we wouldn\'t be able to get to the build stage if that doesn\'t hold.', 'comment_created': datetime.datetime(2021, 8, 1, 13, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 682513126, 'comment_body': 'Alternatively, we could also add the `programPath` to `Compiler`. Opening a different PR for that', 'comment_created': datetime.datetime(2021, 8, 4, 11, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 682521519, 'comment_body': 'So, we can either lift `mkBuildInfo` to `IO` or pass a `ConfiguredProgram` to `mkBuildInfo` or go with the ""let-it-error"" approach.\r\n\r\nI can find at least three calls to `fromMaybe ... lookupProgram ghcProgram` so it is likely to be safe here too.', 'comment_created': datetime.datetime(2021, 8, 4, 11, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 689293416, 'comment_body': 'Changes are merged independently!', 'comment_created': datetime.datetime(2021, 8, 16, 7, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 689294280, 'comment_body': 'I choose consistency with `debug-info`, everything will be renamed to `build-info`', 'comment_created': datetime.datetime(2021, 8, 16, 7, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 693870411, 'comment_body': '- s/contain/contains/\r\n- s/used to build/used during the build/', 'comment_created': datetime.datetime(2021, 8, 23, 10, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693871365, 'comment_body': 's/human readable/machine readable/ ?', 'comment_created': datetime.datetime(2021, 8, 23, 11, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693873408, 'comment_body': 'Having the schema sure is useful but I think it would still be good to have a (perhaps abbreviated) example json here.', 'comment_created': datetime.datetime(2021, 8, 23, 11, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693873996, 'comment_body': '```diff\r\n- Already generated build information will be removed.\r\n+ Already generated `build-info.json` files will be removed since they would be stale otherwise. \r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 11, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693875022, 'comment_body': 'Exactly where the path can be found in plan.json seems undocumented still?', 'comment_created': datetime.datetime(2021, 8, 23, 11, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693875921, 'comment_body': 'Why is this (unrelated?) file being changed by this PR?', 'comment_created': datetime.datetime(2021, 8, 23, 11, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693876680, 'comment_body': 's/buildinfo/build-info/', 'comment_created': datetime.datetime(2021, 8, 23, 11, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693876773, 'comment_body': 's/buildinfo/build-info/', 'comment_created': datetime.datetime(2021, 8, 23, 11, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693876829, 'comment_body': 's/buildinfo/build-info/', 'comment_created': datetime.datetime(2021, 8, 23, 11, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693881390, 'comment_body': ""Is this version bound still correct? Shouldn't this be < 3.6?"", 'comment_created': datetime.datetime(2021, 8, 23, 11, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 693954627, 'comment_body': '`plan.json` is undocumented in general, afaict. I did not really feel like documenting `plan.json`, too :) (But if that is what it takes to get this merged, so be it)', 'comment_created': datetime.datetime(2021, 8, 23, 13, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 693969925, 'comment_body': 'I have honestly no idea how this happened...\r\nWill undo', 'comment_created': datetime.datetime(2021, 8, 23, 13, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 693999038, 'comment_body': 'Added an example!', 'comment_created': datetime.datetime(2021, 8, 23, 14, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 694032472, 'comment_body': 'I\'d be happy with just an approximate description of where the build-info field is. Something like:\r\n\r\n> the exact location is available in the `""build-info""` field of each build component in the `""install-plan""` map in ``plan.json``.\r\n\r\n(didn\'t check if that\'s correct though)', 'comment_created': datetime.datetime(2021, 8, 23, 14, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 694055348, 'comment_body': ""I feel like it'd be better to have this be null instead of just missing unless you chose to do it this way for a particular reason?"", 'comment_created': datetime.datetime(2021, 8, 23, 15, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 694056497, 'comment_body': 'Also this should explicitly document that the field can be missing/null when the Cabal version too old.', 'comment_created': datetime.datetime(2021, 8, 23, 15, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 694063880, 'comment_body': 'Of course, mental typo!', 'comment_created': datetime.datetime(2021, 8, 23, 15, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 698414256, 'comment_body': '@DanielG, I moved this to before building happens, afaict this allows us to extract the information, even if there is a compilation error. You think this is fine, too?', 'comment_created': datetime.datetime(2021, 8, 30, 11, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 699736582, 'comment_body': ""These branches are mutually exclusive right? They shouldn't really exist in the same code block under a `when` imo - we should probably pull this out to an auxiliary function. It's important work!"", 'comment_created': datetime.datetime(2021, 8, 31, 23, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'emilypi', 'type': 'User'}, {'comment_id': 699738023, 'comment_body': ""The way we propagate errors in tuples here leaves alot to be desired from a code perspective imo. This makes me wonder whether we should introduce the idea of a warning-accumulating build state monad that can track these a little better. Not a blocker; just musing. I'd rather have this in than not!"", 'comment_created': datetime.datetime(2021, 8, 31, 23, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'emilypi', 'type': 'User'}, {'comment_id': 700052294, 'comment_body': 'Good suggestion, will extract it!', 'comment_created': datetime.datetime(2021, 9, 1, 9, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 700052913, 'comment_body': 'Yeah, the logic here is rather bad. But I would like to leave it for a future refactoring', 'comment_created': datetime.datetime(2021, 9, 1, 9, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 700109947, 'comment_body': '`cabal-install` version?', 'comment_created': datetime.datetime(2021, 9, 1, 11, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 700185121, 'comment_body': 'no, this is intended to be the `lib:Cabal` version.\r\n\r\nCurrently, we have no idea what `exe:cabal` version is used, since we are in Cabal during the generation', 'comment_created': datetime.datetime(2021, 9, 1, 12, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 702269394, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 9, 4, 10, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 702269704, 'comment_body': ""I decided to resolve this by moving a 'requireProgram' call to an outer function that has access to IO."", 'comment_created': datetime.datetime(2021, 9, 4, 10, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 702276344, 'comment_body': 'plan.json has `""cabal-lib-version""` for that so we should probably be consistent with that here.', 'comment_created': datetime.datetime(2021, 9, 4, 12, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702276623, 'comment_body': 'this should also be explicit about this being the lib:Cabal version', 'comment_created': datetime.datetime(2021, 9, 4, 12, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702276831, 'comment_body': ""This still doesn't seem to mention what the field name in plan.json is or where that field can be found like I suggested above."", 'comment_created': datetime.datetime(2021, 9, 4, 12, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702277204, 'comment_body': 'These docs need to be updated to reflect the fact that we null the field now instead of leaving it out.', 'comment_created': datetime.datetime(2021, 9, 4, 12, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702277426, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2021, 9, 4, 12, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 702277430, 'comment_body': ""Haha! The build doesn't need to be successful anymore, does it :)"", 'comment_created': datetime.datetime(2021, 9, 4, 12, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702279773, 'comment_body': 'As discussed on IRC this should link to the code and the code should link here to prevent changes breaking the docs.', 'comment_created': datetime.datetime(2021, 9, 4, 12, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702279833, 'comment_body': 'The schema should also link to the code and the other way round.', 'comment_created': datetime.datetime(2021, 9, 4, 12, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702280008, 'comment_body': ""The doc comment here should link to the docs and json schema to remind people to update those as well if changes are made here.\r\n\r\nSomething like:\r\n> If you change this dont' forget to update the docs <here> and json schema <there>."", 'comment_created': datetime.datetime(2021, 9, 4, 12, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DanielG', 'type': 'User'}, {'comment_id': 702293579, 'comment_body': 'or even the correlated lib representing the JSON parser', 'comment_created': datetime.datetime(2021, 9, 4, 14, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jneira', 'type': 'User'}, {'comment_id': 703659030, 'comment_body': 'Thanks, should be taken care of now!', 'comment_created': datetime.datetime(2021, 9, 7, 16, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 703659625, 'comment_body': 'Linked the other locations, but not the inofficial, unreleased encoder/decoder :P', 'comment_created': datetime.datetime(2021, 9, 7, 16, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 703670438, 'comment_body': 'Should be done', 'comment_created': datetime.datetime(2021, 9, 7, 16, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}]","[{'commit_sha': 'b1c02f1fd7a2939f9e5c1b0b2fe1df1207e096dc', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb53623fdb3fed6838cd819fbc7b25b8c7def78f', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6e227a84c8fbeb380569a1e4ab94a3f9b06f64a', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2413e5670c2d5ad06103df45fa3f03ca0e6aba0', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '705228e7300f959494ae6eb7d1e85b3c8812687d', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b954b0ca15eeaa0cc10f8debca1e29886280c0f', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c444ad8e4650ff148ba2df1db7b78a513db668e4', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b68243c986156ffcfc9d353f7c47574e0fe65e43', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66669b1131e3823f1cf89d975899ae6d9618bda7', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0702193d93bb08fbbf5f1980bb2e661ae5342a68', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}]",,8463814,,User,,89,,30,62
700959351,Add `status` command to cabal,"Lightweight command that can query for very basic information
in a cabal project.
In particular, information about the compiler for the project and the
unit-id a given target belongs to.
Other flags are bound to follow.

A document that lays out the plan in more detail: https://gist.github.com/fendor/796b373aba26e12dbdecf7e40af78b32

This is the second part to #7489. It allows IDEs and hie-bios to quickly query for certain project meta information, in this case compiler information and what unit a target string belongs to.

Example:
```sh
> cabal status --output-format=json --compiler | jq
{
  ""cabal-version"": ""3.7"",
  ""compiler"": {
    ""flavour"": ""ghc"",
    ""compiler-id"": ""ghc-8.10.7"",
    ""path"": ""/home/hugin/.ghcup/bin/ghc""
  }
}
```

```sh
> cabal status --output-format=json --compiler --target=""lib:cabal"" | jq
{
  ""cabal-version"": ""3.7"",
  ""compiler"": {
    ""flavour"": ""ghc"",
    ""compiler-id"": ""ghc-8.10.7"",
    ""path"": ""/home/hugin/.ghcup/bin/ghc""
  },
  ""targets"": [
    {
      ""target"": ""lib:cabal"",
      ""unit-id"": ""Cabal-3.7.0.0-inplace""
    }
  ]
}
```

Target strings that resolve to the same component are listed both times.

```sh
> cabal status --output-format=json --compiler --target=""lib:cabal"" --target=""./Cabal/src/Distribution/Make.hs"" | jq
{
  ""cabal-version"": ""3.7"",
  ""compiler"": {
    ""flavour"": ""ghc"",
    ""compiler-id"": ""ghc-8.10.7"",
    ""path"": ""/home/hugin/.ghcup/bin/ghc""
  },
  ""targets"": [
    {
      ""target"": ""lib:cabal"",
      ""unit-id"": ""Cabal-3.7.0.0-inplace""
    },
    {
      ""target"": ""./Cabal/src/Distribution/Make.hs"",
      ""unit-id"": ""Cabal-3.7.0.0-inplace""
    }
  ]
}
```

Main advantage: 
* Very quick (only perform work you actually need)
* Extensible
* Composable

Disadvantage:
* Maintain cabal command
* Do we really need it?
* Are we sure we are not just blindly adding commands without considering a bigger picture?

Alternatives:
* Use `cabal build --dry-run` to generate `plan.json` and then parse that one.
    * How to find the location of `plan.json` given a target string?
* Merge this with another command
    * E.g. Add option `cabal build --dry-run --targets` or something like that, but it feels like terrible UX.

Missing:
- [ ] Write tests in cabal-testsuite
  - [x] No build-plan 
  - [x] Some third-party dependency doesn't build
  - [x] Some local dependency doesn't build
  - [x] Ignores invalid target selectors
  - [x] Disabled units
  - [x] Unit fails to build
  - [ ] GHCJS, what's the output?
  - [x] Check plan.json is generated
  - [x] Bench unit
  - [x] Exe unit
  - [x] Flib unit 
  - [x] Lib unit
  - [x] Test unit
  - [ ] Custom Setup
- [ ] Documentation
  - [ ] Write Command docs
  - [ ] Define json schema
  - [ ] Explicitly mark as experimental
  - [ ] Show some use-cases
  - [ ] Future features
    -  [ ] Cabal-plan why-depends

<details>
<summary>
Old PR description, here for completeness
</summary>

Lightweight command that can query for very basic information
in a cabal project.
In particular, you can list all targets in your project or print
information about the compiler. Other flags are bound to follow.

This is the second part to #7489. It allows IDEs and hie-bios to quickly query for certain project meta information, in this case compiler information and available targets.

Example:
```sh
> cabal ide --project-compiler
Resolving dependencies...
Compiler: ghc
Version: 8.10.2
Path: /home/hugin/.ghcup/bin/ghc-8.10.2
```
```sh
> cabal ide --targets
lib:Cabal
lib:cabal-testsuite
exe:setup
exe:cabal-tests
lib:cabal-install
exe:cabal
test:long-tests
test:integration-tests2
test:memory-usage-tests
test:unit-tests
lib:cabal-install-solver
test:unit-tests
lib:solver-benchmarks
exe:hackage-benchmark
test:unit-tests
lib:Cabal-QuickCheck
lib:Cabal-tree-diff
lib:Cabal-described
test:no-thunks-test
test:rpmvercmp
test:hackage-tests
test:custom-setup-tests
test:check-tests
test:parser-tests
test:unit-tests
test:cabal-benchmarks
lib:cabal-doctest
```

Main advantage: 
* Very quick (only perform work you actually need)
* Extensible

Disadvantage:
* Maintain cabal command
* Do we really need it?
* Are we sure we are not just blindly adding commands without considering a bigger picture?

Alternatives:
* Use `cabal build --dry-run` to generate `plan.json` and then parse that one.
    * How to find the location of `plan.json`?
* Merge this with another command
    * E.g. Add option `cabal build --dry-run --targets` or something like that, but it feels like terrible UX.

Missing:
* ~~[ ] Documentation~~
* ~~[ ] Test-cases~~
</details>",False,7500,https://api.github.com/repos/haskell/cabal/pulls/7500,https://github.com/haskell/cabal/pull/7500,closed,855,0,33,5,57,40,3,1,"[{'name': 'type: enhancement'}, {'name': 'cabal-install: other'}, {'name': 'blocked: decision-needed'}]",2021-08-01 18:19:36+00:00,2023-12-22 17:19:22+00:00,75423586.0,"872 days, 22:59:46","[{'comment_id': 680553220, 'comment_body': 'This impl is wrong, but getting it right is actually non-trivial.', 'comment_created': datetime.datetime(2021, 8, 1, 19, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 762408728, 'comment_body': '```suggestion\r\nimport qualified Distribution.Client.CmdHaddock   as CmdHaddock\r\nimport qualified Distribution.Client.CmdIde       as CmdIde\r\n```', 'comment_created': datetime.datetime(2021, 12, 4, 9, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 762408834, 'comment_body': 'Extraneous empty line', 'comment_created': datetime.datetime(2021, 12, 4, 9, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 762408909, 'comment_body': 'Could you `deriving stock (Eq, Show)` if possible?', 'comment_created': datetime.datetime(2021, 12, 4, 9, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 762408955, 'comment_body': 'Extraneous empty lines', 'comment_created': datetime.datetime(2021, 12, 4, 9, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 762409027, 'comment_body': 'Any chance you can document the expected result so that it can be undertaken in another PR? :) ', 'comment_created': datetime.datetime(2021, 12, 4, 9, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 800205497, 'comment_body': 'This will be put on ""maybe later"" pile, so ignoring for now.', 'comment_created': datetime.datetime(2022, 2, 6, 16, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 801115758, 'comment_body': '`ide` or `status`?', 'comment_created': datetime.datetime(2022, 2, 7, 22, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 801545283, 'comment_body': 'Update the name of the module in the Haddocks', 'comment_created': datetime.datetime(2022, 2, 8, 11, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 801545512, 'comment_body': 'Unsure if this means in terms of OS or in terms of Compiler', 'comment_created': datetime.datetime(2022, 2, 8, 11, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 801545753, 'comment_body': 'Extraneous empty line :)', 'comment_created': datetime.datetime(2022, 2, 8, 11, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 801547295, 'comment_body': 'I think you meant ""status"" instead of \'ide\'? :) ', 'comment_created': datetime.datetime(2022, 2, 8, 11, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 801548655, 'comment_body': 'Same as above, I think you meant ""status"" here. :) ', 'comment_created': datetime.datetime(2022, 2, 8, 11, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 801553706, 'comment_body': ""Can't we default to JSON?"", 'comment_created': datetime.datetime(2022, 2, 8, 11, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 801565118, 'comment_body': ""Shouldn't we already structure this function in a way that the information is decoupled from the formatting?\r\n\r\nReturn a big product type and then allow to feed that into the formatter function."", 'comment_created': datetime.datetime(2022, 2, 8, 12, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 801567603, 'comment_body': 'It is copy-pasted, I have no idea what it means :D ', 'comment_created': datetime.datetime(2022, 2, 8, 12, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 801568441, 'comment_body': 'I suggest to use `MonadThrow` or `MonadFail` here, especially since the caller is in `IO`.\r\n\r\nAlternatively, this function could be made total by filtering the input list for Objects, then simply running `mconcat` on them and manually wrapping it into `Value`:\r\n\r\n```hs\r\nmergeJsonObjects = Object . mconcat . catMaybes . fmap (\\v -> case v of ; Object obj -> Just obj ; _ -> Nothing)\r\n```', 'comment_created': datetime.datetime(2022, 2, 8, 12, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 801573103, 'comment_body': 'Why did I even add it here...\r\n\r\nDoes this even do anything? Someone needs to clean up the cli. (Or document it)', 'comment_created': datetime.datetime(2022, 2, 8, 12, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 801573822, 'comment_body': 'Since  cabal is rather annoying wrt piping output to files (e.g. you have to be careful to suppress other stuff printing to stdout)... having a `--file` option or so may be worthwhile.', 'comment_created': datetime.datetime(2022, 2, 8, 12, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 801573845, 'comment_body': 'ah, I see, it does make sense and is required. Still :D', 'comment_created': datetime.datetime(2022, 2, 8, 12, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 801576588, 'comment_body': 'It is intentional to not make JSON the default, as we might want to change the default in the future. E.g. for normal users that just care about something human-readable.\r\n\r\nIn that sense, I consider this forward compatible, allowing us to change the default in the future without causing any troubles once we figure out, what other use-cases the status command might satisfy.', 'comment_created': datetime.datetime(2022, 2, 8, 12, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 801577521, 'comment_body': 'That is indeed a better idea than this.', 'comment_created': datetime.datetime(2022, 2, 8, 12, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 801581066, 'comment_body': ""That's basically what the marker is helpful for, as you can filter for the markers and get only the json output.\r\n\r\nI am open to adding a file output, but are other parts of the API using file output options as well?"", 'comment_created': datetime.datetime(2022, 2, 8, 12, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 801581405, 'comment_body': 'With your above suggestion, I believe this function will go away', 'comment_created': datetime.datetime(2022, 2, 8, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 802006958, 'comment_body': 'Good thinking, I agree', 'comment_created': datetime.datetime(2022, 2, 8, 19, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 810647852, 'comment_body': 'Changed, better now?', 'comment_created': datetime.datetime(2022, 2, 20, 16, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 810675329, 'comment_body': 'https://mail.haskell.org/pipermail/haskell/2004-March/013836.html\r\n\r\nit appears this is an undocumented/useless haddock feature', 'comment_created': datetime.datetime(2022, 2, 20, 19, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810675617, 'comment_body': 'can we (inline) document since when a particular format is supported?', 'comment_created': datetime.datetime(2022, 2, 20, 19, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810675865, 'comment_body': '```suggestion\r\n    die\' verbosity ""The status command doesn\'t take target arguments directly. Use appropriate flags to pass in target information.""\r\n```', 'comment_created': datetime.datetime(2022, 2, 20, 19, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810677191, 'comment_body': ""I'd suggest to return `Either String String` or use `MonadThrow`, then turn it into `die` at the call site. Serialization shouldn't require IO."", 'comment_created': datetime.datetime(2022, 2, 20, 20, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810677297, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 2, 20, 20, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810677484, 'comment_body': ""I've no idea what this does or if it's correct :D"", 'comment_created': datetime.datetime(2022, 2, 20, 20, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810677698, 'comment_body': 'This should use `fail`', 'comment_created': datetime.datetime(2022, 2, 20, 20, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810678611, 'comment_body': 'Do you expect the exception to be caught?\r\n', 'comment_created': datetime.datetime(2022, 2, 20, 20, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 810679323, 'comment_body': ""I don't know, but `error` doesn't have predictable semantics."", 'comment_created': datetime.datetime(2022, 2, 20, 20, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 810681090, 'comment_body': ""ah, indeed that's a good reason. Is this explained more in-depth somewhere?"", 'comment_created': datetime.datetime(2022, 2, 20, 20, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Kleidukos', 'type': 'User'}, {'comment_id': 810683504, 'comment_body': '> ah, indeed that\'s a good reason. Is this explained more in-depth somewhere?\r\n\r\nNot directly, but https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Exception.html#v:evaluate explains some of it. Basically, `error` can leak through exception handlers (or never trigger at all), depending on where it\'s called.\r\n\r\nE.g. try:\r\n\r\n```hs\r\ncase Right (error ""lol"") of\r\n    Right _ -> 1\r\n     _ -> 2\r\n```\r\n\r\nAnd this:\r\n\r\n```hs\r\n-- we force the exceptions\r\n(fmap join $ try @SomeException $ fmap (bimap (SomeException . userError) id)\r\n  $ evaluate $ force $ Right @String (error ""lol"")) >>= \\x -> case x of\r\n    Right r -> putStrLn (""not caught "" ++ r)\r\n    Left e  -> putStrLn ""caught""\r\n\r\n-- not forced\r\n(fmap join $ try @SomeException $ fmap (bimap (SomeException . userError) id)\r\n  $ pure $ Right @String (error ""lol"")) >>= \\x -> case x of\r\n    Right r -> putStrLn (""not caught "" ++ r)\r\n    Left e  -> putStrLn ""caught""', 'comment_created': datetime.datetime(2022, 2, 20, 20, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hasufell', 'type': 'User'}, {'comment_id': 820122863, 'comment_body': 'Resorted to `MonadError` which should have a similar effect. ', 'comment_created': datetime.datetime(2022, 3, 5, 16, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 820122951, 'comment_body': 'Good addition!', 'comment_created': datetime.datetime(2022, 3, 5, 16, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}, {'comment_id': 820224269, 'comment_body': 'Tried to improve this piece of code, but it needs some refactoring anyway, due to its usage of `Map.!` which yields sub-par error messages.', 'comment_created': datetime.datetime(2022, 3, 6, 12, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fendor', 'type': 'User'}]","[{'commit_sha': 'de17699d5538b071e7f7dfab31ee1b11c399b6d3', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8f77ef9b9d6b14bb859e5bc7e0fe9225e0d3549', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97af56bec9b6b85bff1258e094b15c44b2155ef8', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b89579e68418f84f691e65bdc3284c38abf37d0', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c780f34a91742b1efa419615edeadd016c490f02', 'committer_username': 'fendor', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 16, 8, 19, 22, tzinfo=datetime.timezone.utc)}]",,8463814,,User,,89,,30,62
893542402,Enable rename plugin,"The rename plugin is disabled due to limited multi-component support in the HLS / hie-bios. This limitation causes renaming across components to work partially (depending which files have been indexed).

---
### Within-module renaming
While the work on full [multi-component support](https://github.com/haskell/haskell-language-server/issues/2193) is continued, we can enable renaming of names within modules for use in both single- and multi-component projects.

I think that this is the better of the temporary solutions since it eliminates all partial behaviour, while still allowing the plugin to be of some use within multi-component projects.

The conditions required to perform a within-module rename are then:
- the source of the name is the current module (not an imported name)
- the current module must have an export list that does *not* contain the name

In the case that these are *not* met, we fail informatively.

---
### Cross-module plugin option
This also adds plugin option for renaming across modules. This can be used in single-component projects or when ensuring that all components that reference the name are indexed.

By default cross-module renaming is disabled. It can be enabled with the following configuration option:
```json 
""haskell.plugin.rename.config.crossModule"": true
```

---
Closes #2804 
Closes haskell/vscode-haskell#560
Relevant issues: #2598

<a href=""https://gitpod.io/#https://github.com/haskell/haskell-language-server/pull/2809""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,2809,https://api.github.com/repos/haskell/haskell-language-server/pulls/2809,https://github.com/haskell/haskell-language-server/pull/2809,closed,239,145,18,21,9,4,0,0,[],2022-03-29 21:22:14+00:00,2022-04-03 21:30:40+00:00,432506.0,"5 days, 0:08:26","[{'comment_id': 841236338, 'comment_body': 'Where are these orphaned instances used? If not used please delete them, and if used they need to go into one of the Orphan modules in ghcide.\r\n', 'comment_created': datetime.datetime(2022, 4, 3, 15, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 841253039, 'comment_body': 'They’re used since I changed the list of name references to a HashSet for better lookup, although it didn’t have much of an impact on performance.\r\n\r\n[I’ve moved them to Development/IDE/GHC/Orphans.hs](https://github.com/haskell/haskell-language-server/pull/2809/commits/bb91db031e7c1962084d9c69aa3761e2cd118b97)', 'comment_created': datetime.datetime(2022, 4, 3, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 841267166, 'comment_body': ""Hmm, `GHC.Orphans` is not a good place since none of these types is defined in the `ghc` package.\r\n\r\nActually, it's probably better to revert to the previous state with the instances  in the rename plugin, and send PRs to haskell/lsp and `umod` with the missing instances so that we can remove the orphan instances in the future.  \r\n\r\nThank you! "", 'comment_created': datetime.datetime(2022, 4, 3, 19, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 841268019, 'comment_body': ""No problem, I've reverted the commit."", 'comment_created': datetime.datetime(2022, 4, 3, 19, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}]","[{'commit_sha': '6f16defc31207a71e0047026ea0f1d3d3ad0c705', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0207037aa9258d7940af259956329c2b1f26135f', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '801271dc75f2f62d4a34cc7f9f5a5eb8102bd517', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c31abfacfbfc948a09a91e62afe04aae3944bc', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dafdd70a849ed819728151dd077ee59e133a294', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cda24452c489c666ac4acecc7140dac64a4326', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca5f91a334f960230da9e190efb15f0c15ee8b30', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6731ef0bbf3aaa0ad911f4b827ffbe87c27ad7c0', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ae8478e003eded638f1c101e82a9a4bff04a42', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '062fe8cf022ef32b3197e83ef9a251cb31d41309', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '866d6f5b973d3817330abb3b68d3ff051f999c20', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bace426f21d5cbd376190825ae86189ff5bb4e5c', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f35775e7d74a1d35e66e193af55bd07df696124b', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6065ca2002a75c30eca3dc269e1d46339a8d4ab', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61656f54ea9b315216dbd615ee62d717b8e1431c', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53b9cee5facfdf8d37bb7604b9751e5063e23b98', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd024a6bb2747e30a2429e428eb90489deebee675', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b469eefd9758e65c72dd432cd59355ab887b5f71', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb91db031e7c1962084d9c69aa3761e2cd118b97', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f4e188b0b3ca8f827780ca01cda67f11100b6f', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64f942fb94084a7b2c0ee4376ad78f7bab1ba144', 'committer_username': 'pepeiborra', 'committer_name': 'Pepe Iborra', 'committer_email': 'pepeiborra@gmail.com', 'commit_date': datetime.datetime(2008, 9, 28, 15, 50, 50, tzinfo=datetime.timezone.utc)}]",Oliver Madine,30090176,,User,,14,,41,26
985709592,Renaming of indirect references (RecordFieldPuns),"### Issue
Consider this code snippet. While explaining this issue, I will refer to the occurrences of `field` on lines 3, 6, and 7 as `A`, `B`, and `C` respectively.

```haskell
{-# LANGUAGE NamedFieldPuns #-}

newtype Foo = Foo { field :: Int }

unFoo :: Foo -> Int
unFoo Foo{field} 
    = field
```

References between these occurrences are **not** transitive since `B` consists of two names (as it is punned).
In this example, `A references B` and `B references C` but `A does not reference C`.

As a consequence, trying to rename A causes only A and B to be renamed, but we also want C to be renamed.

---

### Proposed Solution
Doing another pass of the references to find any punned names should be sufficient. 

I do **not** think that we can have doubly-indirect references, so we should only need to do one additional pass to find the transitive closure.

### Question
Are there any other cases of having multiple names at the same position that I might have not properly considered?

---

Closes #2970 

<a href=""https://gitpod.io/#https://github.com/haskell/haskell-language-server/pull/3013""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,3013,https://api.github.com/repos/haskell/haskell-language-server/pulls/3013,https://github.com/haskell/haskell-language-server/pull/3013,closed,92,35,7,15,2,7,1,0,[{'name': 'merge me'}],2022-07-03 12:12:27+00:00,2022-07-07 11:34:19+00:00,343312.0,"3 days, 23:21:52","[{'comment_id': 912765799, 'comment_body': ""You wrote a lovely explanation of this in the PR description that's going to probably get lost when you merge the PR, maybe move it into a longer comment in the code?"", 'comment_created': datetime.datetime(2022, 7, 4, 8, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 913026956, 'comment_body': ""Good idea, I've added a better explanation."", 'comment_created': datetime.datetime(2022, 7, 4, 13, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 914131856, 'comment_body': 'What is missing for GHC 9.x? ', 'comment_created': datetime.datetime(2022, 7, 5, 19, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 914134870, 'comment_body': 'Record constructors are being given as references to the fields in HieDB with ghc >= 9. (#2915)', 'comment_created': datetime.datetime(2022, 7, 5, 19, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}, {'comment_id': 914740132, 'comment_body': 'Write it down in the code so we remember! Even better, make a ticket and link to it.', 'comment_created': datetime.datetime(2022, 7, 6, 11, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 914740616, 'comment_body': '""See test X for an example""?', 'comment_created': datetime.datetime(2022, 7, 6, 11, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 914910307, 'comment_body': 'I made a [ticket](https://github.com/wz1000/HieDb/issues/45) and linked it in a comment.', 'comment_created': datetime.datetime(2022, 7, 6, 14, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'OliverMadine', 'type': 'User'}]","[{'commit_sha': 'd7162249a10a98051c958950497c40a8d1095bac', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6659bf3e4507817a978e9d162291a0c6706e83e9', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8a5b232a2d1b49f11aead238305238c745682d3', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80c329062e758856810625ae9dd660e8118a78e0', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd24d1e6fb6e72e6997ae217b3faa19b8876df4f8', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff2617e12ffb460e7f8f04ab9f11c4947ac058b', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7184baf5e219c5e21e026581713f6ecc75fb0ca4', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '517a648c5bf0ac31b799254d4638aff1f6770c4a', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f8525ef151b8b625a1b20dfd32aa88b5eac7c36', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '923587e419cf57f9c403919f22bd5ce751b13a2a', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4cef1ce3381ce5e1601d92fe491048b270dada3', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37f817670b2b22e5d44befa9a734200392fb9ab6', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '797cea05683262eeb2fad5de69f539f214858fd5', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4fddec4451271fe8d367a712a4f1cfa9fe6ebd', 'committer_username': 'OliverMadine', 'committer_name': 'Oliver Madine', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 11, 20, 16, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fd59d52c481031362bea0f842b198552666a5b6', 'committer_username': 'mergify[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 30, 10, 19, 51, tzinfo=datetime.timezone.utc)}]",Oliver Madine,30090176,,User,,14,,41,26

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
236179694,haskell-language-server,haskell/haskell-language-server,Haskell,354,2631,51,235,3656,500,594,58,"[{'id': 985709592, 'number': 3013, 'closed': datetime.datetime(2022, 7, 7, 11, 34, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 3, 12, 12, 27, tzinfo=datetime.timezone.utc), 'time_taken': 343312.0, 'time_delta': '3 days, 23:21:52', 'additions': 92, 'deletions': 35, 'state': 'closed'}, {'id': 893542402, 'number': 2809, 'closed': datetime.datetime(2022, 4, 3, 21, 30, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 29, 21, 22, 14, tzinfo=datetime.timezone.utc), 'time_taken': 432506.0, 'time_delta': '5 days, 0:08:26', 'additions': 239, 'deletions': 145, 'state': 'closed'}, {'id': 714393957, 'number': 2108, 'closed': datetime.datetime(2021, 8, 21, 18, 6, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 16, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 351950.0, 'time_delta': '4 days, 1:45:50', 'additions': 768, 'deletions': 39, 'state': 'closed'}, {'id': 657797529, 'number': 1878, 'closed': datetime.datetime(2021, 8, 17, 16, 21, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 20, 23, 4, tzinfo=datetime.timezone.utc), 'time_taken': 6811118.0, 'time_delta': '78 days, 19:58:38', 'additions': 962, 'deletions': 53, 'state': 'closed'}, {'id': 615848884, 'number': 1731, 'closed': datetime.datetime(2021, 4, 22, 15, 3, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 15, 8, 39, 12, tzinfo=datetime.timezone.utc), 'time_taken': 627860.0, 'time_delta': '7 days, 6:24:20', 'additions': 99, 'deletions': 20, 'state': 'closed'}, {'id': 613052537, 'number': 1709, 'closed': datetime.datetime(2021, 4, 13, 4, 7, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 11, 10, 57, 55, tzinfo=datetime.timezone.utc), 'time_taken': 148171.0, 'time_delta': '1 day, 17:09:31', 'additions': 16, 'deletions': 8, 'state': 'closed'}, {'id': 613045208, 'number': 1708, 'closed': datetime.datetime(2021, 4, 13, 9, 57, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 11, 10, 2, 41, tzinfo=datetime.timezone.utc), 'time_taken': 172514.0, 'time_delta': '1 day, 23:55:14', 'additions': 57, 'deletions': 7, 'state': 'closed'}, {'id': 611925762, 'number': 1696, 'closed': datetime.datetime(2021, 4, 11, 8, 50, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 20, 54, 25, tzinfo=datetime.timezone.utc), 'time_taken': 215737.0, 'time_delta': '2 days, 11:55:37', 'additions': 44, 'deletions': 7, 'state': 'closed'}]"
3728161,cabal,haskell/cabal,Haskell,689,1594,71,508,14388,1779,162,140,[]
