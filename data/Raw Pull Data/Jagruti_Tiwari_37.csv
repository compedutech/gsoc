pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1318678875,Unreleased Production changes probe,"<!-- Comment:
 Please start by adding a link to an issue if the pull request is trying to solve one.
 You can used keyword to do the linking automatically: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword.
-->

### Description

This PR does the following:

- Checks if a commit exists after release date. If yes, it fails and lists the files that were committed after the plugin release date.
- If no commit exists after the plugin release date, it returns a success.

**N.B:** In this probe we only care about production paths, namely - `pom.xml`, `src/main`

Closes #265

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Submitter checklist

- [x] If the issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [x] The changeset is on a specific branch
  - `feature/` for new feature, or improvements
  - `fix/` for bug fixes
  - `docs/` for any documentation changes
- [x] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition
    - If there is no test, include an explanation why in the description
- [x] Run `mvn verify` locally and all tests are passing successfully
  - It is OK to create a pull request which has failing tests if it is created as a draft, is to fix a bug and the first commit is the test to prove the existence of the bug.
- [x] There is no new warnings (checkstyle nor spotbugs) on the code
",True,298,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/298,https://github.com/jenkins-infra/plugin-health-scoring/pull/298,closed,809,0,2,77,6,118,1,0,[{'name': 'enhancement'}],2023-04-18 16:49:11+00:00,2023-05-31 10:44:44+00:00,3693333.0,"42 days, 17:55:33","[{'comment_id': 1170318291, 'comment_body': 'I have added these two lines to find the changes in this path. ', 'comment_created': datetime.datetime(2023, 4, 18, 16, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1170319092, 'comment_body': 'Here shall I try to find two dates of last commit? One for `pom.xml` and second for `src/**`?', 'comment_created': datetime.datetime(2023, 4, 18, 16, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1170796608, 'comment_body': 'You should set this probe to be ran after `LastCommitDateProbe`. That probe already does the clone of the repository into `ProbeContext#scmRepository`', 'comment_created': datetime.datetime(2023, 4, 19, 4, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1170796872, 'comment_body': 'üëç ', 'comment_created': datetime.datetime(2023, 4, 19, 4, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1170797276, 'comment_body': 'No need. We want the latest date for any of those paths.', 'comment_created': datetime.datetime(2023, 4, 19, 4, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1170797516, 'comment_body': 'That should be an error, no?', 'comment_created': datetime.datetime(2023, 4, 19, 4, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1171487477, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 4, 19, 15, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1171556832, 'comment_body': 'How do I test for the scenario where ""unreleased commits exits""', 'comment_created': datetime.datetime(2023, 4, 19, 16, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1171611468, 'comment_body': 'duplicated lines', 'comment_created': datetime.datetime(2023, 4, 19, 16, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1171612555, 'comment_body': ""I don't think the test is validating what you imply by that test name. Even more because of https://github.com/jenkins-infra/plugin-health-scoring/pull/298/files#diff-842497086fa9e29fe4c83b1e89d1b1d00475f4a1f0d90baa5fd8afab7727790aR49"", 'comment_created': datetime.datetime(2023, 4, 19, 16, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1171614114, 'comment_body': 'you are not testing either scenario for the moment. ', 'comment_created': datetime.datetime(2023, 4, 19, 16, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1174955972, 'comment_body': ""The idea is to create a fake git repository and use it as the `ProbeContext#scmRepository`. In that repository, you need to create commits which are about files we care (`pom.xml`) and other about files we don't (`README.md` for example or something in `src/test`). You need to make the commits date be before or after the `Plugin#releaseTimestamp` depending on what you want to validate. \r\n\r\nPlease remember that we want to validate the positive (unreleased changes) but also the negative with no new commits since the last release and also with commits since the last release but commits we don't care.\r\n\r\nSide note: there is one commit on the `pom.xml` just after the release that falls under the _we don't care_ category. Maven is, after setting the version in the pom and committing it, set the version to the next version with the suffix `-SNAPSHOT`. That commit we don't care. See https://maven.apache.org/maven-release/maven-release-plugin/usage/prepare-release.html"", 'comment_created': datetime.datetime(2023, 4, 24, 8, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1175551677, 'comment_body': 'Hey @alecharp \r\n\r\nThank you for explaining this in detail. I have implemented first few steps.', 'comment_created': datetime.datetime(2023, 4, 24, 16, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1175553507, 'comment_body': 'The test case fails at this line and throws the following error\r\n\r\n```\r\n[ERROR]   HasUnreleasedProductionChangesProbeTest.shouldCheckIfTheUnreleasedCommitsExist:73 ¬ª IO The system cannot find the path specified\r\n```\r\n', 'comment_created': datetime.datetime(2023, 4, 24, 16, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1175556593, 'comment_body': 'Once this error gets resolved, I have to assert them? \r\n\r\nDo I need to create more data?', 'comment_created': datetime.datetime(2023, 4, 24, 16, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1176476911, 'comment_body': 'Look at `Files` class to create new files and directory.', 'comment_created': datetime.datetime(2023, 4, 25, 12, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1176478252, 'comment_body': 'Please see my comment https://github.com/jenkins-infra/plugin-health-scoring/pull/298/files#r1170796608', 'comment_created': datetime.datetime(2023, 4, 25, 12, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1176498333, 'comment_body': 'technically, you are creating only one commit here, containing multiple files. This is again not really validating what you are trying to prove.\r\n\r\nThe probes needs to:\r\n\r\n - returns a failure when the last commit date of any file in `src/main` folder is more recent than the plugin release timestamp\r\n - returns a failure when the last commit date of `pom.xml` file is more recent than the plugin release timestamp\r\n - returns a success when the plugin release timestamp is more recent than the last commit date of `pom.xml` or any file in `src/main`', 'comment_created': datetime.datetime(2023, 4, 25, 13, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1178052649, 'comment_body': 'This line throws an error:\r\n```\r\norg.eclipse.jgit.api.errors.JGitInternalException: Entry not found by path: \\path\\to\\repository\\pom.xml\r\n```\r\n\r\nI used debugger and checked the path. The file exists. It is also being added in the `addFilePattern()` the path is same. \r\n\r\nI need help to resolve this. ', 'comment_created': datetime.datetime(2023, 4, 26, 15, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1178988125, 'comment_body': '```suggestion\r\n        try (Git git = Git.init().setDirectory(repository.toFile()).call()) {\r\n            final Path pom = Files.createFile(repository.resolve(""pom.xml""));\r\n            final Path readme = Files.createFile(repository.resolve(""README.md""));\r\n            final Path srcMainResources = Files.createDirectories(repository.resolve(""src"").resolve(""main"")\r\n                .resolve(""resources""));\r\n            final Path test = Files.createFile(srcMainResources.resolve(""test.txt""));\r\n\r\n            git.add().addFilepattern(""pom.xml"").call();\r\n            git.commit().setMessage(""Imports pom.xml file"").setSign(false).setCommitter(""No One"", """").call();\r\n\r\n            git.add().addFilepattern(""README.md"").call();\r\n            git.commit().setMessage(""Imports readme"").setSign(false).setCommitter(""No One"", """").call();\r\n\r\n            git.add().addFilepattern(""src/main"").call();\r\n            git.commit().setMessage(""Imports production files"").setSign(false).setCommitter(""No One"", """").call();\r\n        }\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179009387, 'comment_body': '```suggestion\r\n@Order(value = HasUnreleasedProductionChangesProbe.ORDER)\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179009658, 'comment_body': '```suggestion\r\n    public static final int ORDER = LastCommitDateProbe.ORDER + 100;\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179009909, 'comment_body': '```suggestion\r\n        return new String[]{SCMLinkValidationProbe.KEY, LastCommitDateProbe.KEY};\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179010376, 'comment_body': 'Please remove the Git clone.', 'comment_created': datetime.datetime(2023, 4, 27, 11, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179011015, 'comment_body': '```suggestion\r\n        final HasUnreleasedProductionChangesProbe probe = getSpy();\r\n        final ProbeResult result = probe.apply(plugin, ctx);\r\n\r\n        assertThat(result).usingRecursiveComparison()\r\n            .comparingOnlyFields(""id"", ""status"")\r\n            .isEqualTo(ProbeResult.failure(HasUnreleasedProductionChangesProbe.KEY, """"));\r\n    }\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179011499, 'comment_body': '```suggestion\r\n\r\n        when(plugin.getDetails()).thenReturn(Map.of(\r\n            SCMLinkValidationProbe.KEY, ProbeResult.success(SCMLinkValidationProbe.KEY, """")\r\n        ));\r\n        when(ctx.getScmRepository()).thenReturn(repository);\r\n\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179011732, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179011973, 'comment_body': '```suggestion\r\n       final Path repository = Files.createTempDirectory(""test-foo-bar"");\r\n\r\n       final Plugin plugin = mock(Plugin.class);\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 11, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1179281051, 'comment_body': '```suggestion\r\n    void shouldBeExecutedAfterLastCommitDateProbe() {\r\n```', 'comment_created': datetime.datetime(2023, 4, 27, 14, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1181256192, 'comment_body': 'There are the three steps metioned in [ one of the comments on this issue](https://github.com/jenkins-infra/plugin-health-scoring/pull/298#discussion_r1176498333).\r\n\r\nI am trying to implement the first step but my assert case has bugs.\r\n\r\n> returns a failure when the last commit date of any file in src/main folder is more recent than the plugin release timestamp\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 4, 30, 16, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1181266694, 'comment_body': ""What's the bug? What are the current results and expected results?"", 'comment_created': datetime.datetime(2023, 4, 30, 17, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1181380614, 'comment_body': 'I want to do the following:\r\n\r\n> returns a failure when the last commit date of any file in src/main folder is more recent than the plugin release timestamp\r\n\r\nI am trying to achieve the above using the following code:\r\n\r\n```\r\nassertThat(plugin).usingRecursiveComparison()\r\n                        .comparingOnlyFields(""releaseTimestamp"")\r\n                        .isEqualTo(ProbeResult.success(HasUnreleasedProductionChangesProbe.KEY, """"));\r\n```\r\nI do not know if I am achieving the desired results.\r\n\r\nIf I try `... isEqualTo(ProbeResult.error(HasUnreleasedProductionChangesProbe.KEY, """"));` the test case succeeds. \r\nIf I try `... isEqualTo(ProbeResult.success(HasUnreleasedProductionChangesProbe.KEY, """"));` the test case succeeds.\r\n\r\nShouldn\'t the test case fail for one of the tests?  ', 'comment_created': datetime.datetime(2023, 5, 1, 4, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1181505197, 'comment_body': 'what if the `commit` object is not null and has a date that is more recent than the plugin release timestamp?', 'comment_created': datetime.datetime(2023, 5, 1, 10, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1181507298, 'comment_body': '> what if the `commit` object is not null and has a date that is more recent than the plugin release timestamp?\r\n\r\nThen the test should fail. ', 'comment_created': datetime.datetime(2023, 5, 1, 10, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1181511274, 'comment_body': ""yes, but would the current code fail it by returning `ProbeResult.failure()`?\r\nI'm asking because I'm a little confused with the code present in the `HasUnreleasedProductionChangesProbe.java` file."", 'comment_created': datetime.datetime(2023, 5, 1, 10, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1186856038, 'comment_body': '> yes, but would the current code fail it by returning ProbeResult.failure()?\r\n\r\nThe correct code should fail it. If it does not then I need to modify the code. ', 'comment_created': datetime.datetime(2023, 5, 7, 13, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1186885159, 'comment_body': 'I need help asserting this. ', 'comment_created': datetime.datetime(2023, 5, 7, 17, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1187205412, 'comment_body': 'Then you need to modify the code.', 'comment_created': datetime.datetime(2023, 5, 8, 8, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187232880, 'comment_body': ""What exactly is the error you're seeing (is this assert statement passing when it shouldn't or vice versa) and what do you expect to see?"", 'comment_created': datetime.datetime(2023, 5, 8, 9, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187241941, 'comment_body': '> What exactly is the error you\'re seeing (is this assert statement passing when it shouldn\'t or vice versa) and what do you expect to see?\r\n\r\nThe issue I am not able to do what I want to do. \r\n\r\n``` \r\nassert !timestampInstant.isBefore(dateInstant):result.failure(""unreleased-production-changes"", ""unreleased-production-changes does not meet the criteria to be executed on null"");\r\n```\r\n\r\nI tried `assertThat` and `assertTrue` but it did not seem to work. \r\n\r\nIn the above assert statement where do I call the method to check whether it fails or not? ', 'comment_created': datetime.datetime(2023, 5, 8, 9, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1187298416, 'comment_body': ""> to check whether it fails or not?\r\n\r\nwhat's wrong with `assert !timestampInstant.isBefore(dateInstant)` or `assertThat(timestampInstant.isBefore(dateInstant)).isEqualTo(false);`?"", 'comment_created': datetime.datetime(2023, 5, 8, 10, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187330502, 'comment_body': 'Also, the `assertThat()` call (on line 167) isn\'t working as you\'d expect it to work, it is basically ignoring the results of the assertion. You can change it to:\r\n`assertThat(commit.getFullMessage()).isEqualTo(""Imports pom.xml file"");` or\r\n`assertThat(commit.getFullMessage().equals(""Imports pom.xml file"")).isTrue();`', 'comment_created': datetime.datetime(2023, 5, 8, 11, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187571131, 'comment_body': '>  to check whether it fails or not?\r\n> what\'s wrong with `assert !timestampInstant.isBefore(dateInstant)` or `assertThat(timestampInstant.isBefore(dateInstant)).isEqualTo(true);`?\r\n\r\nWould this syntax test the following-\r\n""a commit on pom.xml before the latest release is returning a SUCCESS""?\r\n', 'comment_created': datetime.datetime(2023, 5, 8, 15, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1187584833, 'comment_body': ""+1\r\nThere's no need to clone the repo again because we have done this in `LastCommitDateProbe`."", 'comment_created': datetime.datetime(2023, 5, 8, 15, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187593101, 'comment_body': 'No, there are some missing pieces.', 'comment_created': datetime.datetime(2023, 5, 8, 15, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187600026, 'comment_body': '2 observations:\r\n\r\n1. FYI: this is the syntax being used on this line: `assert condition : message;`\r\nwhere, ""condition"" is the expression that you want to check, and ""message"" is an optional message that will be displayed if the condition is false.\r\n\r\nSo in your case, the condition being checked is `!timestampInstant.isBefore(dateInstant)`. If this condition is false, a new ProbeResult object will be created (and returned) with the `id` as ""unreleased-production-changes"", `message` as ""unreleased-production-changes does not meet the criteria to be executed on null"", and `status` as ""ResultStatus.FAILURE"". And this is not what we want to do I think.\r\n\r\n2. How did this string `""unreleased-production-changes does not meet the criteria to be executed on null""` come into the picture? I think you added it here because this is what you\'re currently seeing when you run the test with a debugger, is that right?', 'comment_created': datetime.datetime(2023, 5, 8, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187602911, 'comment_body': ""Currently, the probe logic doesn't test what it should, that is, checking if there are any unreleased commits. If there are unreleased commits, then returning a failure, else a success."", 'comment_created': datetime.datetime(2023, 5, 8, 15, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187653391, 'comment_body': '> 1. where, ""condition"" is the expression that you want to check, and ""message"" is an optional message that will be displayed if the condition is false.\r\n\r\nYou are right about this. In the ""message"" section I was trying to check whether the method return failure or success.\r\n\r\n\r\n\r\n> 2\\. I think you added it here because this is what you\'re currently seeing when you run the test with a debugger, is that right?\r\n\r\nRight. That is why I added it. \r\n\r\nI made a mistake. I should check for `success` instead of `failure`.', 'comment_created': datetime.datetime(2023, 5, 8, 16, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1187688931, 'comment_body': ""The problem is, the status of the `result` variable is currently `ERROR` and it should be `SUCCESS`.\r\nAnd it is of type `ERROR` because we didn't fulfill all the probe result requirements (mentioned under `getProbeResultRequirement()` of this probe).\r\n\r\nOut of the 2 elements in the array:\r\n```\r\npublic String[] getProbeResultRequirement() {\r\n        return new String[]{SCMLinkValidationProbe.KEY, LastCommitDateProbe.KEY};\r\n    }\r\n```\r\nwe've only mocked 1st entry and that's why you're seeing that string."", 'comment_created': datetime.datetime(2023, 5, 8, 17, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1187689962, 'comment_body': 'I removed this in the latest commit.', 'comment_created': datetime.datetime(2023, 5, 8, 17, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1187692490, 'comment_body': 'You are right. My test cases are not testing what they are supposed to. I am trying.', 'comment_created': datetime.datetime(2023, 5, 8, 17, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1193544890, 'comment_body': 'needs to add the validation of the execution here', 'comment_created': datetime.datetime(2023, 5, 15, 9, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1193553090, 'comment_body': 'As said in gitter, the probe shouldn\'t be a mock. Other tests are using a `spy` because it was required to have ""common"" tests done by the `AbstractProbeTest`. \r\nHowever, `spy` are using the real class code. \r\n\r\nMore important is that you are saying ""when I call the probe `apply` method, with this plugin and context, I should get a success"". This is a problem because is this exactly what you want to validate and here you are not validating the probe code, you are bypassing it. ', 'comment_created': datetime.datetime(2023, 5, 15, 9, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1194166009, 'comment_body': 'No, that was ok. `spy` is fine, `mock` is not in this context.', 'comment_created': datetime.datetime(2023, 5, 15, 17, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1197424174, 'comment_body': '```suggestion\r\n        when(plugin.getDetails()).thenReturn(Map.of(\r\n            SCMLinkValidationProbe.KEY, ProbeResult.success(SCMLinkValidationProbe.KEY, """"),\r\n            LastCommitDateProbe.KEY, ProbeResult.success(LastCommitDateProbe.KEY, """")\r\n        ));\r\n```', 'comment_created': datetime.datetime(2023, 5, 18, 6, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1197425071, 'comment_body': ""Currently the test shows an error:\r\n```\r\njava.lang.AssertionError: \r\nExpecting actual:\r\n  ProbeResult[id=unreleased-production-changes, message=unreleased-production-changes does not meet the criteria to be executed on null, status=ERROR, timestamp=2023-05-18T11:26:33.365796514+05:30[Asia/Kolkata]]\r\nto be equal to:\r\n  ProbeResult[id=unreleased-production-changes, message=, status=SUCCESS, timestamp=2023-05-18T11:26:33.639163896+05:30[Asia/Kolkata]]\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'status' differ:\r\n- actual value  : ERROR\r\n- expected value: SUCCESS\r\n```\r\n\r\nand the reason we're seeing this error is explained here: https://github.com/jenkins-infra/plugin-health-scoring/pull/298#discussion_r1187688931"", 'comment_created': datetime.datetime(2023, 5, 18, 6, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1198030939, 'comment_body': 'This test case fails. It throws the following error:\r\n\r\n```\r\n  ProbeResult[id=unreleased-production-changes, message=Last commit cannot be extracted. Please validate sub-folder if any., status=FAILURE, timestamp=2023-05-18T21:55:28.761664600+05:30[Asia/Calcutta]]\r\n\r\n```\r\n\r\nIt is because I have not added code for paths other than `pom.xml` and `src/main/**`? \r\n\r\nI am not sure here. ', 'comment_created': datetime.datetime(2023, 5, 18, 16, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1198568296, 'comment_body': ""Do we need `.minusHours(38)`?\r\nEspecially when you're already performing a git commit on `plugin.getReleaseTimestamp().minusDays(1)` which will always be 1 day behind the release date. So maybe `.minusHours(38)` is redundant."", 'comment_created': datetime.datetime(2023, 5, 19, 5, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dheerajodha', 'type': 'User'}, {'comment_id': 1199636293, 'comment_body': 'This code is counterintuitive. \r\n\r\nIs there a better way to write this?', 'comment_created': datetime.datetime(2023, 5, 20, 17, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1199637121, 'comment_body': 'In the last meeting, Adrien suggested adding `.minusHours(...)` to deal with the time difference as far as I remember. That is why I have added them. \r\n\r\nI will remove it if you deem it redundant. ', 'comment_created': datetime.datetime(2023, 5, 20, 17, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1199794653, 'comment_body': 'Should be good to validate the message as it is shown on the web app', 'comment_created': datetime.datetime(2023, 5, 21, 16, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1199794791, 'comment_body': 'Can be out of the try-with-resources', 'comment_created': datetime.datetime(2023, 5, 21, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1199794872, 'comment_body': 'If there is a commit on pom file, this should be a failure', 'comment_created': datetime.datetime(2023, 5, 21, 16, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1199938450, 'comment_body': 'This commit is before the release date. Even then it should fail? ', 'comment_created': datetime.datetime(2023, 5, 22, 4, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1200114141, 'comment_body': 'should validate the message as well. ', 'comment_created': datetime.datetime(2023, 5, 22, 8, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200115385, 'comment_body': 'Commits will be after this date. The whole test depends on this.\r\n\r\n```suggestion\r\n        ZonedDateTime releaseTimestamp = ZonedDateTime.now().plusHours(38);\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 8, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200118249, 'comment_body': 'This is incorrect no? If the release happened 38hours ago, and you add commits on files now, your commits are _after_ the release date, correct? This is not what the test name implied. \r\n```suggestion\r\n        ZonedDateTime releaseTimestamp = ZonedDateTime.now().plusHours(38);\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 8, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200119129, 'comment_body': '`message` to be tested.', 'comment_created': datetime.datetime(2023, 5, 22, 8, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200119470, 'comment_body': '```suggestion\r\n        ZonedDateTime releaseTimestamp = ZonedDateTime.now().plusHours(38);\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 8, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200279581, 'comment_body': ""I understood what my mistake was.\r\n\r\nMy test case shouldn't have passed in the old case. "", 'comment_created': datetime.datetime(2023, 5, 22, 9, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1200422905, 'comment_body': 'what about `src/test/java` or `src/test/resources`? Do they count? Please add a test to validate this.', 'comment_created': datetime.datetime(2023, 5, 22, 12, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200432449, 'comment_body': ""This file shouldn't trigger a failure. This could be removed.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 5, 22, 12, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200432658, 'comment_body': '```suggestion\r\n            Files.createFile(srcMainResources.resolve(""test.txt""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 12, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200479807, 'comment_body': 'Because we are modifying the plugin release timestamp, it can be confusing to also change the commit date.', 'comment_created': datetime.datetime(2023, 5, 22, 12, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200530081, 'comment_body': ""This shouldn't matter here.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 5, 22, 13, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200531954, 'comment_body': 'Need to validate the message.\r\n```suggestion\r\n            .comparingOnlyFields(""id"", ""status"", ""message"")\r\n            .isEqualTo(ProbeResult.success(HasUnreleasedProductionChangesProbe.KEY, ""All production modifications were released.""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 13, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200533444, 'comment_body': '```suggestion\r\n            .isEqualTo(ProbeResult.failure(HasUnreleasedProductionChangesProbe.KEY, ""Unreleased production modifications might exist in the plugin source code.""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 13, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200533883, 'comment_body': '```suggestion\r\n                .comparingOnlyFields(""id"", ""status"", ""message"")\r\n                .isEqualTo(ProbeResult.success(HasUnreleasedProductionChangesProbe.KEY, ""All production modifications were released.""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 13, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200534417, 'comment_body': '```suggestion\r\n                .isEqualTo(ProbeResult.success(HasUnreleasedProductionChangesProbe.KEY, ""All production modifications were released.""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 13, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200535855, 'comment_body': '```suggestion\r\n                .isEqualTo(ProbeResult.failure(HasUnreleasedProductionChangesProbe.KEY, ""Unreleased production modifications might exist in the plugin source code.""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 13, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200536113, 'comment_body': '```suggestion\r\n                .isEqualTo(ProbeResult.failure(HasUnreleasedProductionChangesProbe.KEY, ""Unreleased production modifications might exist in the plugin source code.""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 13, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1200536640, 'comment_body': '```suggestion\r\n                .comparingOnlyFields(""id"", ""status"", ""message"")\r\n                .isEqualTo(ProbeResult.success(HasUnreleasedProductionChangesProbe.KEY, ""All production modifications were released.""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 13, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1202691385, 'comment_body': 'Added this so that commit message is helpful with the file names. Like you explained in the meeting @alecharp \r\n\r\nLet me know what do you think. ', 'comment_created': datetime.datetime(2023, 5, 23, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1203772224, 'comment_body': '```suggestion\r\n/*\r\n * MIT License\r\n *\r\n * Copyright (c) 2023 Jenkins Infra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the ""Software""), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\npackage io.jenkins.pluginhealth.scoring.probes;\r\n```', 'comment_created': datetime.datetime(2023, 5, 24, 9, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1203782698, 'comment_body': '```suggestion\r\n                while (walk.next()) {\r\n                    commitFileList.add(walk.getPathString());\r\n                }\r\n```', 'comment_created': datetime.datetime(2023, 5, 24, 9, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1203787670, 'comment_body': ""What would happen if there are 10 files with unreleased commits? Wouldn't it make the message too big? Java classes would also have a long path (`src/main/java/io/jenkins/plugins/mailer/subPackage/ClassName.java`). \r\n\r\nCould you add a test to see what happen when you have a file committed before the release and one after the release? "", 'comment_created': datetime.datetime(2023, 5, 24, 9, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1204331632, 'comment_body': 'I\'m not sure it\'s ""after commit date"" but ""before release""\r\n\r\n```suggestion\r\n           git.commit().setMessage(""Imports pom.xml file before commit date"").setSign(false).setCommitter(committer).call();\r\n```', 'comment_created': datetime.datetime(2023, 5, 24, 15, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1204364685, 'comment_body': '```suggestion\r\n    void shouldBeAbleToDifferenciateFilesWithCommitsBeforeAndAfterReleaseDate() throws IOException, GitAPIException {\r\n```', 'comment_created': datetime.datetime(2023, 5, 24, 15, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1204368563, 'comment_body': ""We want to see that the code can see the commit on the pom file was done before the release. Adding this new commit should show that file requires a commit. Removing this commit we help us see if the code of the probe is able to see that this file doesn't require a release.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 5, 24, 15, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1204371197, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 5, 24, 15, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1204371706, 'comment_body': 'To match the class renaming suggestion.\r\n\r\n```suggestion\r\n                .isEqualTo(ProbeResult.failure(HasUnreleasedProductionChangesProbe.KEY, ""Unreleased production modifications might exist in the plugin source code at src/main/java/Hello.java""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 24, 15, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1204372552, 'comment_body': 'Name is confusing because it\'s not a test class\r\n\r\n```suggestion\r\n            Files.createFile(srcTestJava.resolve(""Hello.java""));\r\n```', 'comment_created': datetime.datetime(2023, 5, 24, 15, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1207832847, 'comment_body': 'Hey @alecharp \r\n\r\nI have tried to reproduce most of the code from our last meeting. \r\n\r\nI read about using JGit `diff`. It requires two commits to compare.\r\n\r\nIn our case, we need to find the commit after the latest release. \r\n\r\nHow do I compare time here? \r\n', 'comment_created': datetime.datetime(2023, 5, 27, 9, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1207850849, 'comment_body': ""You don't. \r\nYou need to iterate over the commits of the repository and stop as soon as you find a commit which was made before the release. \r\n\r\nFor each commit, you need to see if it has a parent. If so, you can use that parent to do a diff. otherwise you can simply browse the repository content with a `TreeWalk`"", 'comment_created': datetime.datetime(2023, 5, 27, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1207853155, 'comment_body': ""You shouldn't store the commit but the files modified"", 'comment_created': datetime.datetime(2023, 5, 27, 10, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1207853522, 'comment_body': 'What if there is no folder?', 'comment_created': datetime.datetime(2023, 5, 27, 10, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1207853633, 'comment_body': 'Same', 'comment_created': datetime.datetime(2023, 5, 27, 10, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1207854097, 'comment_body': ""Don't we want all the commits?"", 'comment_created': datetime.datetime(2023, 5, 27, 10, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1207856209, 'comment_body': ""Don't change the test please they are fine. "", 'comment_created': datetime.datetime(2023, 5, 27, 10, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1208014184, 'comment_body': 'For the code that executes in `if` condition I get the following error:\r\n\r\n```\r\njava.lang.RuntimeException: org.eclipse.jgit.errors.IncorrectObjectTypeException: Object 6c53b498aa3e0785e46c11d0ee58bebfa1f4a4cf is not a tree.\r\n\r\n```', 'comment_created': datetime.datetime(2023, 5, 27, 14, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1208014513, 'comment_body': 'For the else case, I do not get all the desired files in the list. ', 'comment_created': datetime.datetime(2023, 5, 27, 14, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1208015616, 'comment_body': 'It says it is not a tree. \r\n\r\nThe exception is thrown at `oldTreeIter.reset(reader, oldCommit);`\r\n\r\nAccording to the method signature I do I am passing the correct objects. ', 'comment_created': datetime.datetime(2023, 5, 27, 14, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1208028506, 'comment_body': 'This is resolved.', 'comment_created': datetime.datetime(2023, 5, 27, 14, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1208035886, 'comment_body': 'Here my commit messages get updated on iteration.\r\n\r\nBut the file name remains the same.\r\n\r\nGood new is my fail test counts has reduced to 4 from 5. ', 'comment_created': datetime.datetime(2023, 5, 27, 15, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1208092815, 'comment_body': 'Not needed if there is a folder', 'comment_created': datetime.datetime(2023, 5, 27, 18, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1208092951, 'comment_body': 'Is it a method on commit to get the instant directly?', 'comment_created': datetime.datetime(2023, 5, 27, 18, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1208093132, 'comment_body': 'This if should be an exit condition on the loop of commits', 'comment_created': datetime.datetime(2023, 5, 27, 18, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1208286576, 'comment_body': '`commit.getCommitTime()` gives the epoch timestamp when the commit was made. ', 'comment_created': datetime.datetime(2023, 5, 28, 3, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1208371761, 'comment_body': 'For some reason, I cannot iterate through all the commits.\r\n\r\nEither I get the first file in the commit or the last file. \r\n\r\nI went through the documentation, and sample code on GitHub and StackOverflow. But did not find what I am missing here. ', 'comment_created': datetime.datetime(2023, 5, 28, 6, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1209085366, 'comment_body': '`commit.getCommitterIdent().getWhenAsInstant()`', 'comment_created': datetime.datetime(2023, 5, 29, 8, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1209087829, 'comment_body': 'no. This is not what we want.\r\nHere you are always comparing the newest commit of the repository to its parent. \r\nWe want compare each commit of the log command to its parent. ', 'comment_created': datetime.datetime(2023, 5, 29, 8, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1209091878, 'comment_body': 'https://github.com/jenkins-infra/plugin-health-scoring/pull/298/files#r1208371761 is because of this.', 'comment_created': datetime.datetime(2023, 5, 29, 8, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1209096792, 'comment_body': 'subtree is not the same as folders. https://github.com/git/git/blob/79bdd48716a4c455bdc8ffd91d57a18d5cd55baa/contrib/subtree/git-subtree.txt#L23-L25', 'comment_created': datetime.datetime(2023, 5, 29, 9, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1209099714, 'comment_body': 'It is also required when you have a folder as the parent pom can be managing dependencies which you need to track.', 'comment_created': datetime.datetime(2023, 5, 29, 9, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1390227097, 'comment_body': 'import java;', 'comment_created': datetime.datetime(2023, 11, 11, 13, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'studentapnacolleg', 'type': 'User'}, {'comment_id': 1392262154, 'comment_body': ""Please, don't do that. This only creates noise and would not help you in your future contributions."", 'comment_created': datetime.datetime(2023, 11, 14, 9, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}]","[{'commit_sha': '8adbb2413f0b5f63117ad2033ff297d3d6a38fb6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afda2f84f84e03bca2da92ede7fc520a65d8aa0e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd1ba1b50be720aec95bea971ac8e968c39b140c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b613338c0d11d262e7bac55817aec7653695651a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2bb37022d05f439b0a2af4309c5b8853d62d83', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f57407dc0324df988019161a5950ea185a4c813', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b796a811e5a5eb0682e439fb844df7c342fbd507', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20a9e47c4108dfaeff674ff8144a12a8e08f795b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c84f24601443a6b74686c143e71d8115722f1e2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c8a2f381e7352920c7e329314adf26b507b3873', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb148e6b69217f77cdc70aa14d99609a47aa5bd0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f204847160309d49806bab0c7903f817d5b362', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b3953db70507d5133b1b17a35e7a0a9b33ccd22', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f22ecba6908a6a6170cbdbe35f40828a8fa171', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '794fb9d71cb04cb1d2382567581ca893de638268', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62914fbac353893f5821187390a6eb04fd6b22f5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b324e9968c98a7323ca17827e2941e00c91bbbd9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1e999a7207aa0e11a62609fd63860f95221fc1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5b4c62912de5e2dd4d39ead84dcdfa8de0ff628', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8880d7cbbab368e51e9cfc42ca852e1a6c364ac', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e4370ea6c9ffc5fb89dd45b93813f1c84cf466c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840affaa29b9169f1c0b01d7656a2c5579133b92', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454b5d5a1f4d51cdf55331d43e6599d93fcdc446', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf69f17494f8d7896e8dd98027bd254f1ccfe5b3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd11720dce19558f45ab0820c2a49334e7b2ad93e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc2995ee6a3f1a6fb11422209c67dbd12e6b46f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7718eb701933364f6f6fb4604ebf09e6d84d13d7', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ea36e1d0aae968c11cc1a2d87d0bef6f5a81ad7', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d3ee58a4e4407153f89a6e73f1dbca17ef09f66', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bf2865ad13f78412fa0114b77b76f77610c1fa0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90015a254e8a1354a46ec50315745b3b08187e1f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11c83332b2dda5a89ebca3c42921feb340649b25', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91bf3b50ee8d715839667fb3073e6e6294f57eda', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e7ffb9e2d559e256623f71c0ac3b032fd4119db', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e9cc7890afe00a0aa57f21b73d4d5a5da0cda6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4346a18507df4721d81fff10c1957d86eed11cc3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e6c01bfc60a80c3ec07c2d3c7aa2baaff11323d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '395b16f1a5a70f141ed7a2774f23c4b7bd0c6500', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd544fdc7796388870b20e1cde6e010ae7449ff4', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba26ac6eb749f049d6a4d94706edf4315c71c780', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12899a3bc1c25e009521f2f32100c40930c6eccd', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e37ba74ed2cc5ad8e6bcb0a90ca331578933fca', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b621419751b82eb1d1fe6b7634456430c2001af0', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00057fe2ee64df011acd1274ee4ee7b32a148800', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9569b6eb471da0a177e4d2ba879ff04a152b51', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c91c06aeb3b45b7a2e9fb139a85921443129c80', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fea02b44e95bd0899764d2609cf31b7e3884c8d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7115e5fdfbfdb673e8668b47a5a66c9e1e6f5cf5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '357a7cc82c6233a8347cd5b4b8236e728c24544d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b60678c1160f289878e4466b6a5e572d807b26', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2d7a41b5534f3f98a1602dc605ad956f657cdad', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f025339e033823c15012256acf95f03d8334ac65', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ab956c09b5a1fd7e3d5bcd6ab6eb1caeb777b78', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a85e5da40614f3ab5f52fdd737a7a61b1f6b76f2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00b9ccea833f1dabcb759b12e6aa348826e35cc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '315b9bf9c1d7f208ea9168666ddb8176b28aab5e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c168909d05d7db5757e6e265ef5a557976ccc432', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fa4d5e218370c6b7c10f825f29196b3ad604550', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c209b5ff62dafa61a2e58db7f66164e5255f75b6', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1a548229fe9f80319935132bb25122dac5b3b9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b99c38b06ef10ea3f4418a5ae1d2601579434f2', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9102300f85e011ffa7f1c783682ef1e0299c3d85', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e3dfa9be22a8ec767e050e1e61ae4ffe8256e94', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b775d9a45179f0c8944af62b1ca92d5e44d6c6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '557a80fd56b5d0333efef8f0d32973d33412b231', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12f3a4518623cbf45777c2c92470308f87557ef', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6205f7b604e592340b7e741098ba1d8ea6f8329', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318bb6a1135a87220ecd0fbaa6fdf901756e715a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bec1335e84e36ebb40895cf7fac88b45b8992e5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8796086fef3e79ddf2d87d0497b30411bccc2bc2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a6c0d12f9ad10a7a92e89edbb90c9daef40c46a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd213a89faca8b62b9b5c4370e1cd4bf33ea9f7a5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff627685d24303864bd7040fa26246146fa5d8ed', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675be0f0e2e432efbaa3c7d6b4721d9207dafed9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04f4c899b9e801354a137b59f9e859ce85428bd', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936deac42982644172308154751d772a162aa6de', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee449b5391deac42c6266b729fd35816538e399b', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22
1397129884,Security scan workflow probe,"<!-- Comment:
 Please start by adding a link to an issue if the pull request is trying to solve one.
 You can used keyword to do the linking automatically: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword.
-->

### Description

This probe checks whether the workflow defined in `jenkins-infra/jenkins-security-scan/.github/workflows/jenkins-security-scan.yaml` is configured in the plugin repository.

Closes #257 

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Testing done

- Unit test cases in progress.

<!-- Comment:
  if there is no automatic test, please explain what you did to validate
  the bugfix or the improvement.
-->

### Submitter checklist

- [x] If an issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [x] The changeset is on a specific branch. Using `feature/` for new feature, or improvements ; Using `fix/` for bug fixes ; Using `docs/` for any documentation changes.
- [ ] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition or an explanation why there is no tests in the description.
",True,342,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/342,https://github.com/jenkins-infra/plugin-health-scoring/pull/342,closed,366,64,4,64,1,133,1,1,[{'name': 'enhancement'}],2023-06-18 12:47:36+00:00,2023-07-17 14:48:33+00:00,2512857.0,"29 days, 2:00:57","[{'comment_id': 1234035010, 'comment_body': 'non of the probe have a key with `-probe` suffix.\r\n\r\n```suggestion\r\n    public static final String KEY = ""security-scan"";\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 13, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1234035826, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 13, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1234046566, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 13, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1234046768, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 13, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1236646534, 'comment_body': ""I don't think this is enough based on https://github.com/jenkins-infra/plugin-health-scoring/pull/342/files#diff-f623053886a3b527e504f391ddc438541068ae28e1ad69db06f058a05f0ad33fR94"", 'comment_created': datetime.datetime(2023, 6, 21, 8, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1238546143, 'comment_body': 'Test classes should be package visible only.\r\n\r\n```suggestion\r\nclass SecurityScanGithubWorkflowProbeTest extends AbstractProbeTest<SecurityScanGithubWorkflowProbe> {\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 13, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1238797277, 'comment_body': 'Should this test succeed of fail? ', 'comment_created': datetime.datetime(2023, 6, 22, 16, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1239541091, 'comment_body': 'A test you commit should always succeed (except if you are committing a failing test on purpose to prove a bug, in which case you would deactivate the test so that it doesn\'t break the build, with something like `@Disabled(""Reproduces my bug"")`).\r\n\r\nWhat `fail` means in this test method is that the probe should fail, as evidenced by the assertions:\r\n\r\n```\r\nassertThat(result.status()).isEqualTo(ResultStatus.FAILURE);\r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 8, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'PierreBtz', 'type': 'User'}, {'comment_id': 1239734596, 'comment_body': 'Not a ""valid"" file. Extension of the file `.yaml@v2` is not something that exists. It has to be `.yaml` or `.yml`.\r\n\r\n```suggestion\r\n        final Path workflowFile = Files.createFile(workflowPath.resolve(""jenkins-security-scan.yaml""));\r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 12, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239735700, 'comment_body': ""This won't create a valid workflow definition file. You are creating an invalid workflow definition syntax.\r\n\r\nPlease see https://github.com/jenkins-infra/plugin-health-scoring/blob/d4b09077a456df2a1f2363fa21fccd722042ccc6/core/src/test/java/io/jenkins/pluginhealth/scoring/probes/ContinuousDeliveryProbeTest.java#L110-L115"", 'comment_created': datetime.datetime(2023, 6, 23, 12, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239736886, 'comment_body': 'In this test, you create a file in the `.github/workflows` and put in this files (incorrectly but still) the value you are looking for. \r\nI would expect that this test to be looking for a `ResultStatus.SUCCESS`.', 'comment_created': datetime.datetime(2023, 6, 23, 12, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239737759, 'comment_body': 'I wouldn\'t do that as you are creating a file with an incorrect syntax.\r\n\r\n```suggestion\r\n            ""    uses: not-the-workflow-definition-we-are-lookgin-for@v1""\r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 12, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239737964, 'comment_body': 'dito\r\n```suggestion\r\n        final Path workflowFile = Files.createFile(workflowPath.resolve(""jenkins-security-scan.yaml""));\r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 12, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239738497, 'comment_body': 'same\r\n\r\n```suggestion\r\n        final Path workflowFile = Files.createFile(workflowPath.resolve(""jenkins-security-scan.yaml""));\r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 12, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239739025, 'comment_body': 'This test should expect a `ResultStatus.SUCCESS`.\r\nYou are putting the valid workflow definition in the file. See https://github.com/jenkins-infra/plugin-health-scoring/pull/342/files#diff-ec875a98fd9e4055806edf694288fad916442221364b894d56c3c3917450bc0fR173.\r\n\r\nWe should see that the security scan workflow is configured.', 'comment_created': datetime.datetime(2023, 6, 23, 12, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239740540, 'comment_body': 'dito\r\n\r\n```suggestion\r\n        final Path workflowFile = Files.createFile(workflowPath.resolve(""jenkins-security-scan.yaml""));\r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 12, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239741613, 'comment_body': 'This is just a ""name"", it has not effect on the fact that the workflow declared in the next line is or is not the security scan workflow that we are looking for.\r\n\r\nThis is why the test should be expected in a `ResultStatus.SUCCESS`.', 'comment_created': datetime.datetime(2023, 6, 23, 12, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239742613, 'comment_body': 'This is not an incorrect filename.', 'comment_created': datetime.datetime(2023, 6, 23, 12, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239743133, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 23, 12, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1239749065, 'comment_body': 'Well, to show a bug, I would said that ""breaking the build"" is what we could expect from fixing a test or adding one. I, personally, have never been a great supporter of `@Disabled` because this could be forgotten.\r\n\r\nIn the current situation, you (@Jagrutiti) are simply creating an invalid workflow definition syntax so yes, the test should be looking for a `ResultStatus.FAILURE`. \r\nThe test shouldn\'t be named `shouldFail` but `shouldNotFindWhatWeAreLookingFor` (example, don\'t use that).', 'comment_created': datetime.datetime(2023, 6, 23, 12, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1241198042, 'comment_body': 'You mean `incorrect-file-name.yml` is a correct file name? ', 'comment_created': datetime.datetime(2023, 6, 25, 14, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1241204538, 'comment_body': 'Yes. The name of the file has nothing to do with its content. Of course, we tend to name them accordingly. But, you could name a file `security-scan.yml` and configure an hello world in it.', 'comment_created': datetime.datetime(2023, 6, 25, 14, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1241207130, 'comment_body': 'This should succeed because the `SecurityScanGithubWorkflowProbe.SEARCH_LINE` is present? ', 'comment_created': datetime.datetime(2023, 6, 25, 14, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1241796062, 'comment_body': 'Same as before. This is creating an invalid file syntax. This is not the way you should do it.\r\nTo be honest, when I read the test, I thought this test was vastly incorrect as you are creating a YAML file in the correct folder with the workflow we are looking for, so we should expect a `ResultStatus.SUCCESS`. \r\n\r\n```suggestion\r\n        Files.write(workflowFile, List.of(\r\n            ""name: Test Security Scan Job"",\r\n            ""jobs:"",\r\n            ""  security-scan-name:"",\r\n            ""    uses: this-is-not-the-workflow-we-are-looking-for""\r\n        ));\r\n```\r\n\r\nOr were you trying to validate the fact that an invalid workflow syntax would not be a problem for your probe? In that case, please rename the test and disregard the suggestion.', 'comment_created': datetime.datetime(2023, 6, 26, 8, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1241796987, 'comment_body': '```suggestion\r\n    void shouldNotFindSecurityScanConfiguredInGitHubWorkflow() throws IOException {\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 8, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1241797640, 'comment_body': ""Because it's the same as the previous one. Don't take this suggestion if the previous test was purposely testing an invalid syntax.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 26, 8, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1241798463, 'comment_body': 'Just to make sure that the version is not a problem for the code.\r\n\r\n```suggestion\r\n            ""    uses: jenkins-infra/jenkins-security-scan/.github/workflows/jenkins-security-scan.yaml@v42""\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 8, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1241799305, 'comment_body': '```suggestion\r\n    void shouldSucceedToFindWorkflowEvenWithVersion() throws IOException {\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 8, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1242351925, 'comment_body': '@alecharp I did not find any particular documentation detailing how the `ORDER` of Probes was supposed to be handled, or what particular impact it has. \r\n\r\nAny entry in the docs you can point me to?', 'comment_created': datetime.datetime(2023, 6, 26, 15, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242355546, 'comment_body': '`SEARCH_LINE` sounds a little bit too generic to me, what do you think?\r\n\r\nIf I had to name such variable myself, I would think of something like `SECURITY_SCAN_WORKFLOW_IDENTIFIER` for example, or something of that nature, in order to make it clear that this is what identifies the security scan that we try to detect.\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2023, 6, 26, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242359639, 'comment_body': 'Is there a particular reason to use `Paths.get` and having to use `repository.toString`? \r\n\r\nI would believe using `Path.resolve(String)` could make the code a bit easier to read?\r\n\r\nSee https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html#resolve-java.nio.file.Path-\r\n\r\nSo it would read something like `repository.resolve(WORKFLOWS_DIRECTORY);`', 'comment_created': datetime.datetime(2023, 6, 26, 15, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242404099, 'comment_body': 'AFAIU, this aims at parsing all the files located at the root of the workflows directory, later searching for the security scan definition in it.\r\n\r\nWhile this is not implemented yet, it could be worth noting here in a comment that there is an [ongoing discussion for supporting workflow definitions in subfolders](https://github.com/orgs/community/discussions/18055). If that feature is implemented at some point, this piece of code will have to be updated. A simple comment is enough IMHO to keep that in mind.\r\n\r\nHowever, I believe it is technically possible for users to use *composite actions* (see [this documentation](https://docs.github.com/en/actions/creating-actions/creating-a-composite-run-steps-action#creating-an-action-metadata-file)) meaning that they could have workflows defined in subdirectories (which would not be triggered by default) referenced and called from workflows located at the root of the repository.\r\n\r\nOne could for example have something like:\r\n\r\n```\r\nworkflows/main.yml\r\n    | security/\r\n        | jenkins-security-scan.yml\r\n        | something-else.yml\r\n    | linters/\r\n        | whatever.yml\r\n```\r\n\r\nIn that scenario, the `jenkins-security-scan.yml` could be called by `main.yml` using composite run steps actions, and that would not be detected by your current implementation.\r\n\r\nI believe this should either be dealt with (but it can be a bit costly to properly implement, that should be validated with @alecharp) or it should be made explicit both in a comment in the source code, and in the probe documentation details, to ensure that a project is not suffering from a lower score because they organized their code in a way that is not handled by the probes.', 'comment_created': datetime.datetime(2023, 6, 26, 15, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242643523, 'comment_body': ""The indentation makes that line a bit difficult to read. Also, while it is definitely true that naming variables properly is extremely important, there is an usual practice in functional programming where lambda parameters that are not used are replaced by a dummy character. \r\n\r\nIn Scala for example, you would use `_` instead of a name for the parameter that you are not using.\r\n\r\nWhile you cannot use `_` in Java, you could use a quite common character used for that: `$`. If that approach doesn't suit you, then I would suggest naming it `unused` to make it clear it's a parameter that you don't care about.\r\n\r\nWith proper indentation and that fix, your line would read like:\r\n\r\n`try (Stream<Path> files = Files.find(workflowPath, 1, (path, $) -> Files.isRegularFile(path))) {`\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2023, 6, 26, 19, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242647185, 'comment_body': 'For better readability, I would advise that you extract this piece of code in a separate function. \r\n\r\nThis way you write proper Javadoc for that function, possibly unit test it if needs be.\r\n\r\nThen your code also is easier to read cause you could have your first map reading like:\r\n\r\n`files.map(::parseYaml)` or `readYaml` for example.', 'comment_created': datetime.datetime(2023, 6, 26, 19, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242649533, 'comment_body': ""I didn't find any developer docs defining the logging strategy for this app, but usually `errors` are reserved for things making the application to not behave properly. Considering this code path does not seem to break anything, a `warning` might be more appropriate?"", 'comment_created': datetime.datetime(2023, 6, 26, 19, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242652657, 'comment_body': 'For better readability of your code, I Would advise to extract this line to a dedicated function so you can properly name what you intend on doing.\r\n\r\nAlso, `wf` does not read very naturally, as a good practice, I would suggest to avoid using short names like that and rather use explicit names like `workflow` for example.\r\n\r\nRemember that code is read much more than it is written, so we should optimize for reading rather than for writing.', 'comment_created': datetime.datetime(2023, 6, 26, 19, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242654319, 'comment_body': ""While it would seem excessive to extract this in a separate function (debatable, but it's just my feeling), a small one line comment simply describing what exactly is being retrieved here could be helpful."", 'comment_created': datetime.datetime(2023, 6, 26, 19, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242656356, 'comment_body': 'Is there a particular reason to use `startsWith` and not `equals` or `contains` for example? \r\n\r\nAlso again, what is `def`?', 'comment_created': datetime.datetime(2023, 6, 26, 19, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242658631, 'comment_body': 'The ternary operator does not bring a lot in that piece of code, and IMHO actually makes the source code less trivial to read. Each line before is an operation on a `Stream`, but the 2 last lines with similar indentation are actually the return result of the function.\r\n\r\nI would advise to store the result of the Stream operations in a properly named variable, and then use it in a return statement.\r\n\r\nIf you want to use a ternary operator, you could use it with `return workflowsContainSecurityScanner ? success : failure` for example.', 'comment_created': datetime.datetime(2023, 6, 26, 19, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242658851, 'comment_body': 'No log message for this one?', 'comment_created': datetime.datetime(2023, 6, 26, 19, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242660112, 'comment_body': 'This deserves Javadoc, to explain what that `record` is for, and ideally with a link to the syntax reference of GitHub workflows, so future developers understand where `uses` comes from.', 'comment_created': datetime.datetime(2023, 6, 26, 19, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242660327, 'comment_body': 'Similar comment for the Javadoc need.', 'comment_created': datetime.datetime(2023, 6, 26, 19, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242666312, 'comment_body': 'FTR, if you want to have human readable test names, you can use `@DisplayName(""Human Readable Name"")`.', 'comment_created': datetime.datetime(2023, 6, 26, 19, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1242669580, 'comment_body': 'FTR, you can now use the `""""""` operator in Java for multilines Strings, if you want something more readable where you don\'t have to repeat boilerplate characters.', 'comment_created': datetime.datetime(2023, 6, 26, 19, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1243319207, 'comment_body': 'This is coming from Spring Framework. See https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/annotation/Order.html', 'comment_created': datetime.datetime(2023, 6, 27, 8, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1243320745, 'comment_body': ""To be fair, I don't really like it to be public and I'd like to see this class be redesigned to have a generic one with the `ContinuousDeliveryProbe`."", 'comment_created': datetime.datetime(2023, 6, 27, 8, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1243321456, 'comment_body': 'Yes this would be better.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1243330332, 'comment_body': 'It\'s a ""convention"" I took from Javascript testing framework, to name test method `shouldXXX`. ', 'comment_created': datetime.datetime(2023, 6, 27, 8, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1243331390, 'comment_body': 'Yeah, for the annotation I got it, I was rather wondering about how we are defining the values in there? Is there some kind of meaning/strategy in the way you define the `ORDER` values in variables?', 'comment_created': datetime.datetime(2023, 6, 27, 8, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1243331545, 'comment_body': 'with `Files.writeString` method then. Otherwize, `write` takes an iterable.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1243362577, 'comment_body': 'Yep sure.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1243442424, 'comment_body': 'Not to worry about those right now as they should be de-duplicated first.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1243828732, 'comment_body': ""Special character as a variable name? I always had in mind that special character cannot be used as variable names. \r\n\r\n> If that approach doesn't suit you, then I would suggest naming it unused to make it clear it's a parameter that you don't care about.\r\n\r\nI will implement the way you showed me. It is interesting. "", 'comment_created': datetime.datetime(2023, 6, 27, 14, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1243828982, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2023, 6, 27, 14, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1246899628, 'comment_body': ""This is not quite what I had in mind. \r\nThe idea is to create a class, which would inherit from `Probe` and which would take most of the `doApply` method code from the `ContinousDeliveryProbe` and `SecurityScanGithubWorkflowProbe` classes. It would defined an abstract method (let's say `getWorkflowDefinition`) which returns a `String` and that method can be used in place the of the current `anyMatch` line of the stream code.\r\n\r\nIn the end, `ContinuousDeliveryProbe` and `SecurityScanGithubWorkflowProbe` would extend that class, and only have to implement `getWorkflowDefinition` method and probably 2 others (to get the message if the workflow is found or not)."", 'comment_created': datetime.datetime(2023, 6, 29, 16, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1246899806, 'comment_body': ""Don't forget to add the license header."", 'comment_created': datetime.datetime(2023, 6, 29, 16, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1248734667, 'comment_body': 'Do you want me to replace only the following line?\r\n\r\n` ...anyMatch(def -> def.startsWith(""jenkins-infra/github-reusable-workflows/.github/workflows/maven-cd.yml"")) ...`\r\n\r\nWith the abstract method? \r\n\r\nThe rest of the code in the `doApply()` of `ContinousDeliveryProbe` and `SecurityScanGithubWorkflowProbe ` remains the same? \r\n', 'comment_created': datetime.datetime(2023, 7, 1, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1248735302, 'comment_body': 'I find these two statements contradicting each other: \r\n\r\n> which would take most of the `doApply` method code from the `ContinousDeliveryProbe` and `SecurityScanGithubWorkflowProbe` classes.\r\n\r\n\r\nand\r\n\r\n\r\n> which returns a `String` and that method can be used in place the of the current `anyMatch` line of the stream code.\r\n\r\nThat is why I am confused here.\r\n', 'comment_created': datetime.datetime(2023, 7, 1, 9, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1248861189, 'comment_body': 'Hi\r\n\r\nI have added a new class to remove redundant code and implemented it in `ContinuousDeliveryProbe`.\r\n\r\nIf my approach is correct, I will extend it to `SecurityScanGithubWorkflowProbe`.\r\n\r\nLet me know your thoughts. ', 'comment_created': datetime.datetime(2023, 7, 1, 14, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1250482546, 'comment_body': 'ok so no it\'s not documented. \r\nThe idea was rather than having increment of 1, I choose to go with increment of 100 so that when listing the probes, the order is more obvious.\r\nThe increment of 10 are reserved to probes that have a strict link with its predecessor.\r\n\r\nThe idea is also to say ""probe B needs probe A, so increment probe A by 100 for probe B"". If probe C also needs probe A, do the same. If probe C also need probe B then let\'s use probe B as the base.\r\n\r\nThis may make only sense in my head..', 'comment_created': datetime.datetime(2023, 7, 3, 8, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1250685928, 'comment_body': ""This class shouldn't be in `utility` package but in `probes` package.\r\nYou should also rename it `AbstractGitHubWorkflowProbe` as this is not a reader."", 'comment_created': datetime.datetime(2023, 7, 3, 10, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1250690588, 'comment_body': ""This shouldn't take a parameter and have a javadoc.\r\n```suggestion\r\n    /**\r\n     * Returns the path to the GitHub Workflow definition which should be use in one of the actions of the plugin repository.\r\n     *\r\n     * @return the workflow definition used in one of the jobs of one of the actions of the plugin repository.\r\n     */\r\n    public abstract String getWorkflowDefinition();\r\n```"", 'comment_created': datetime.datetime(2023, 7, 3, 10, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1250691094, 'comment_body': '```suggestion\r\npublic abstract class AbstractGitHubWorkflowProbe extends Probe {\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 10, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1250698300, 'comment_body': '```suggestion\r\npublic class SecurityScanGithubWorkflowProbe extends AbstractGitHubWorkflowProbe {\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 10, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1250698571, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 10, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1250698768, 'comment_body': '```suggestion\r\npublic class ContinuousDeliveryProbe extends AbstractGitHubWorkflowProbe {\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 10, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251639760, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251640383, 'comment_body': '```suggestion\r\n        try (Stream<Path> files = Files.find(workflowPath, 1, (path, $) -> Files.isRegularFile(path))) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251640838, 'comment_body': 'This is unnecessary as this class will never be instantiated as is.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251642778, 'comment_body': '```suggestion\r\n    private static final String SECURITY_SCAN_WORKFLOW_IDENTIFIER = ""jenkins-infra/jenkins-security-scan/.github/workflows/jenkins-security-scan.yaml"";\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251643649, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251644045, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251644997, 'comment_body': 'This can be added to the new abstract class, as all probes looking at the GitHub Actions workflows will have the same setup.', 'comment_created': datetime.datetime(2023, 7, 4, 7, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251646288, 'comment_body': '```suggestion\r\n    private static final String CD_WORKFLOW_IDENTIFIER = ""jenkins-infra/github-reusable-workflows/.github/workflows/maven-cd.yml"";\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251646562, 'comment_body': '```suggestion\r\n        return CD_WORKFLOW_IDENTIFIER;\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251647543, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 7, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251648801, 'comment_body': '```suggestion\r\n    private record WorkflowDefinition(Map<String, WorkflowJobDefinition> jobs) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 8, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251648961, 'comment_body': '```suggestion\r\n    private record WorkflowJobDefinition(String uses) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 8, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251649653, 'comment_body': 'Would be great to add the javadoc on those methods to know what they are used for and what they should return.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251650303, 'comment_body': 'Would be great to have javadoc on this to understand what is the purpose of this class.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251686441, 'comment_body': 'FTR, since this Probe will never be instanciated directly, it is not for it to have a `KEY`, this should come only for actual probes.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251691706, 'comment_body': 'I would suggest to extract this code block to a dedicated function, so you can Javadoc that function and explain properly what this bit does, and you can then use it in a `map` as a one liner to ease the reading.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251693942, 'comment_body': ""Code is more often read than written, so it is worth the extra few characters to write proper entire names for things.\r\n\r\n`workflow` is easier to read than `wf`, and does not make the code line too long, so I would suggest to use that.\r\n\r\nAlso, while it may feel over the top to extract this bit in a dedicated function to clearly indicate what you're doing, a one-line comment could be worth it to explain why this filtering?"", 'comment_created': datetime.datetime(2023, 7, 4, 8, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251694294, 'comment_body': 'Similar comment for the naming here. `workflow` reads better than `wf`.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251696766, 'comment_body': 'Again for naming, I would suggest to rename `def` to something more accurate and self-descriptive. I believe here you are working only on all the information contained in the `uses` field of workflows, so perhaps something like `usedWorkflow` or something in that idea?', 'comment_created': datetime.datetime(2023, 7, 4, 8, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251698221, 'comment_body': 'Also a quick one line comment about the usage of `startsWith` instead of `contains` or `equals` might help future developers. IIUC, this is used because it is possible to add a specific version after a workflow definition, but I guess it is worth adding as a one line comment.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251701786, 'comment_body': 'I feel like the ternary operator is not helping with readability here, because it indents at the same level as all the operations you are doing on your stream.\r\n\r\nI believe that extracting the result of the Streams operations to a variable, something like `specificWorkflowUsageFound` for example, would help readability.\r\n\r\nYou can then write a log message with that information, and use a ternary operation just for returning your probe result, with something like:\r\n\r\n`return specificWorkflowUsageFound ? success : failure`\r\n\r\nAgain, for readability purposes.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251702068, 'comment_body': 'Log message before maybe?', 'comment_created': datetime.datetime(2023, 7, 4, 8, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251703798, 'comment_body': 'All of this is not needed as it does not make sense to have it in the abstract probe, only in its implementations.\r\n\r\nNote that it is not mandatory in an `abstract class` that extends from another `abstract class`, which is your case here, to implement everything coming from the top level class. You can just leave it for the children classes to implement.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251705143, 'comment_body': 'Deserves Javadoc.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251705555, 'comment_body': 'Deserves Javadoc as well.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251707716, 'comment_body': 'Indentation looks weird here, it felt better in the previous version.', 'comment_created': datetime.datetime(2023, 7, 4, 8, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251709771, 'comment_body': ""The other GitHub Workflow related probe does not contain `GithubWorkflow` in its name, so I guess we could have consistent naming with `SecurityScanProbe` here, or adding `GithubWorkflow` in the other one.\r\n\r\nMy preference would be to name this one just `SecurityScanProbe`, but I'll leave the choice up to you."", 'comment_created': datetime.datetime(2023, 7, 4, 8, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251712912, 'comment_body': 'Makes sense, but it would totally deserve a little bit of documentation =)\r\n\r\nIf it was me, I would be tempted to create a small utility class for ORDER, add all your explanation as Javadoc, and add some constants to use such as `REQUIRES_PREDECESSOR = 10` or `NEXT_PROBE = 100` for example, and use that here for better readability, like `ORDER = LastCommitDateProbe.ORDER + NEXT_PROBE;`.\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2023, 7, 4, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251714218, 'comment_body': 'Curiosity question: why are you storing some of the Strings in static variables, and for some others you are just returning them from getters? What difference is there?', 'comment_created': datetime.datetime(2023, 7, 4, 8, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1251973828, 'comment_body': ""to be fair, I used `startsWith` initially to make sure that the version at the end of the string is not a problem and because except the version, it as to be exact.\r\n\r\nWe could settle for a regexp validation to make sure it's `<workflow-definition>@<version>`. "", 'comment_created': datetime.datetime(2023, 7, 4, 12, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1251980236, 'comment_body': ""For Jagruti: you can extract with your IDE the content of the `map` method call into a method. This way you will be able to document it. Make sure to keep it `private` as we don't want it (at least for now) to be re-implemented."", 'comment_created': datetime.datetime(2023, 7, 4, 12, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1257259517, 'comment_body': '- I prefer hardcoded strings used in code to be declared final.\r\n- The message in the probes is returned when required in all the other probes. That is why  I followed the same norm. \r\n\r\nI did not notice this until you pointed out :)', 'comment_created': datetime.datetime(2023, 7, 8, 12, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1260165436, 'comment_body': ""There should not be a `@return` in the Javadoc for a class.\r\n\r\nAs per the general description, it felt a bit too detailed maybe?\r\n\r\nHow about something like:\r\n\r\n```\r\nAbstract Probe allowing to search for the usage of a particular workflow usage within a project's GitHub workflows directory.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 11, 19, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260168602, 'comment_body': ""`readWorkflowFile` kinda sounds like it's just reading the file, when it is also parsing the Yaml inside and returning it to you if it maps with the object definition you provided.\r\n\r\nI feel like the method could be named `parseWorkflowFile` instead, WDYT?"", 'comment_created': datetime.datetime(2023, 7, 11, 19, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260170673, 'comment_body': 'This method actually does the opposite of how it is named. It will return `true` if the workflow jobs are not null and not empty, which is the exact opposite of the name.\r\n\r\nI would suggest to rename that method `containsJobs` or `hasJobs` for example, to actually map what is in the implementation.', 'comment_created': datetime.datetime(2023, 7, 11, 19, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260172164, 'comment_body': '```suggestion\r\n     * Returns the path to the GitHub Workflow definition which should be used in one of the actions of the plugin repository.\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 19, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260173169, 'comment_body': ""Not exactly, this method returns the path of the workflow you are searching for in the actions defined in the plugin repository. Your sentence sounds like it is actually used, when you don't know yet."", 'comment_created': datetime.datetime(2023, 7, 11, 19, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260174213, 'comment_body': 'It does not read the files, it reads a file, and it parses its Yaml content, and maps it to an object.', 'comment_created': datetime.datetime(2023, 7, 11, 19, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260175214, 'comment_body': 'This is not correct.\r\n\r\nIt returns a partial object mapping of the Yaml content of the file provided as an argument.', 'comment_created': datetime.datetime(2023, 7, 11, 19, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260177520, 'comment_body': ""This Javadoc is written with the usage of the class in mind.\r\n\r\nThere shouldn't be a `@return` because it's a `record`.\r\n\r\nI would expect a phrasing like\r\n\r\n```\r\nPartial object mapping of a GitHub workflow YAML file, containing only the jobs that are defined in it.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 11, 19, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260178620, 'comment_body': 'ditto.\r\n\r\nExample of phrasing:\r\n\r\n```\r\nPartial Object mapping of a GitHub workflow job definition, containing only the uses section of its Yaml content.\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 19, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260180054, 'comment_body': 'Deserves Javadoc', 'comment_created': datetime.datetime(2023, 7, 11, 19, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260180889, 'comment_body': 'This could go in the abstract class.', 'comment_created': datetime.datetime(2023, 7, 11, 19, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260181219, 'comment_body': 'Deserves Javadoc.', 'comment_created': datetime.datetime(2023, 7, 11, 19, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260182869, 'comment_body': ""Same `ORDER` value than `ContinuousDeliveryProbe` then? Will that be a problem?\r\n\r\nI would suggest to put an `ORDER` value in the abstract class equals to `LastCommitDateProbe.ORDER + 100` and, as @alecharp mentioned in some other comment, use in children classes this value + 10 for subclasses (and +20 for the other one so they don't have the same ORDER)?"", 'comment_created': datetime.datetime(2023, 7, 11, 19, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260183273, 'comment_body': 'Can go in the abstract class.', 'comment_created': datetime.datetime(2023, 7, 11, 19, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260184672, 'comment_body': 'Seems redundant in all test cases, so it could be extracted in some method?', 'comment_created': datetime.datetime(2023, 7, 11, 19, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1260184883, 'comment_body': 'Maybe even end up in a `@Before`?', 'comment_created': datetime.datetime(2023, 7, 11, 19, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262677521, 'comment_body': ""```suggestion\r\n/**\r\n * Abstract Probe allowing to search for the usage of a particular workflow within a project's GitHub workflows directory.\r\n */\r\n```"", 'comment_created': datetime.datetime(2023, 7, 13, 14, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262686986, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 14, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262687328, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 14, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262687713, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 14, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262687893, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 14, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262688182, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 14, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262688384, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 14, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262689318, 'comment_body': '```suggestion\r\n */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 14, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262691921, 'comment_body': '```suggestion\r\n */\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 15, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262694109, 'comment_body': 'not sure if my suggestion will remove that empty line, but it should go', 'comment_created': datetime.datetime(2023, 7, 13, 15, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262697772, 'comment_body': 'Probably a mistake duplicating this line?', 'comment_created': datetime.datetime(2023, 7, 13, 15, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1264970367, 'comment_body': 'This seems to be resolved.', 'comment_created': datetime.datetime(2023, 7, 17, 7, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264970666, 'comment_body': 'Same.', 'comment_created': datetime.datetime(2023, 7, 17, 7, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264979505, 'comment_body': 'As the two probes are not dependent to each others, we can use the same order here.\r\n\r\n```suggestion\r\n    public static final int ORDER = AbstractGitHubWorkflowProbe.ORDER;\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264979711, 'comment_body': 'As the two probes are not dependent to each others, we can use the same order here.\r\n\r\n```suggestion\r\n    public static final int ORDER = AbstractGitHubWorkflowProbe.ORDER;\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264979933, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264982034, 'comment_body': '```suggestion\r\n    private Plugin plugin;\r\n    private ProbeContext ctx;\r\n    private SecurityScanProbe probe;\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264983511, 'comment_body': '```suggestion\r\n     * @return a partial object mapping of the Yaml content of the file provided in the argument.\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264983949, 'comment_body': '```suggestion\r\n     */\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}]","[{'commit_sha': 'ee8b1495b149593664df5dc51f593d45e5b3e590', 'committer_username': 'amanfangeria980', 'committer_name': 'Aman Fangeria', 'committer_email': None, 'commit_date': datetime.datetime(2021, 11, 20, 9, 50, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fbbc9de38f8af4ee36a479e68495e4370d26d0b', 'committer_username': 'amanfangeria980', 'committer_name': 'Aman Fangeria', 'committer_email': None, 'commit_date': datetime.datetime(2021, 11, 20, 9, 50, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dd0dbfeaa1e90024b82e736a1d2586916b054df', 'committer_username': 'amanfangeria980', 'committer_name': 'Aman Fangeria', 'committer_email': None, 'commit_date': datetime.datetime(2021, 11, 20, 9, 50, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e9679c8e0c10708e6059526747fa9f4ea98177a', 'committer_username': 'amanfangeria980', 'committer_name': 'Aman Fangeria', 'committer_email': None, 'commit_date': datetime.datetime(2021, 11, 20, 9, 50, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92c319b1a8832902eb68481ed538b0c58b4ccb84', 'committer_username': 'amanfangeria980', 'committer_name': 'Aman Fangeria', 'committer_email': None, 'commit_date': datetime.datetime(2021, 11, 20, 9, 50, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0197e0c2f6a9e67f21d03fb4e9bdf56ffada9bbd', 'committer_username': 'amanfangeria980', 'committer_name': 'Aman Fangeria', 'committer_email': None, 'commit_date': datetime.datetime(2021, 11, 20, 9, 50, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f0234cecf8996a4f2a74bd7350b0b5f17ac07f1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6397e3d519e52e09fdcea26fbb205f2e47becea', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b8f1f9f35924189e1c190656ddfd068a7d85ade', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4faa7dadea02a72ba1e2a17aa580f70020cf53dc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa75f415aa6a02012416e766f82d63397e03e29', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f19b31d805b47278f8a10f4cb7c462b4be1b22a6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae05040f513bc93df94878be04e66110ce912762', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db7b19b1077f6cdebeacdfdb8b4500cb7aa1b4a', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595ba19c1ec1fa84a5937f4beb79e43bb53771ef', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc955a756a6cc713aca2e1b0af3091e758a7a6ff', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4334c3da72b162d996802750370ae1899b186f8e', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '553c0c36aa95789d9f1746cb8b423d54c35b1758', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f1fbabe4cab855deefbfeec67e430df5fdf4c9', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec4c7159ca5e1232eddbec88107082ae3da1bb8', 'committer_username': 'dependabot[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 4, 16, 22, 34, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca7880f1668a93230c62849277575c71eadceaf5', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f04be4ada91f409d286aa78c02ca301058fee9', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d9b311f9b2408b23197f5a41df2145b91952a0c', 'committer_username': 'alecharp', 'committer_name': 'Adrien Lecharpentier', 'committer_email': 'adrien.lecharpentier@gmail.com', 'commit_date': datetime.datetime(2011, 8, 17, 11, 46, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3faa7b94c01015a542c680f41604ea6e543b5cee', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68688090ea1d9beed3ec23c422e4229f437a7451', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '406d65f38f39a5760dea0efc42e8e6713b4b09e1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38550d0a1061fe4984257c8def15d82ede6f5bef', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c526bc0ae902af1eacdf890474987c8307ade1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bbe8fb6f8c2fd89fe9701eca6633882b3ef714d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c735625a4ad2e33c19252dee86751a1655c1ce', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3837c9403c26dfe30a93f743e1d642039a0fa3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0ebb8970dfee96b3af1a413a3d04ae67daa1eae', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b3e0b62a0dc04d4a960dc043f353ffee15ab46', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54292b1f5d45bd586b003f4b325917ac82447b6a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f2157b8d642b98e00626d5261140205f5624c3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3bf29b07f5de676015eec24b46d3758cd087f5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44002203c81cd1c1ad78288cdcf6549387a9bbc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11569e013f60346ebc7b426cd6291062aab98c0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b6202b791a5397009d763f36e4c1257b0bf0db', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97e1fca4a3850c6faf68467ac200ae4a19befd4b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73686f639e3e03c342a2be1eec979a0f708750c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41c2f741a6132d49e59a14aedc64d0cd55e4940d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7a5778426fbd300c26d7efce8e31a842e14cd6f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5cb10f855b7a39803d033072dbf0e074a6071c2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '273f1e2b24af4be35ba4c1d125da00b21279e9d7', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '368429efbe900899b38a857384678ed63add8912', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '446671d80cb6411a8689d34f376fb113056cafc9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d4b6df5f3785e833afb8b66549ba837f7c10f2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8d45b1441e65d6121bec444851d7b9175ed5e16', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90eaa003e7a1d37aeb305aa8c746ee14964ea333', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81dba4786e0d821b9c9c989f461b9b6302c3dbe3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1835a719b6016c6051dc480ed547ee2180f233a8', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4854789f519ec233cc0810a7ddb8032e7a7a0cda', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2eae6c8a15e5e844934fa668b7f3fcfb1c325a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be0b1985a20ea986c941a538e4eec051d194581', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a45fc3bb43a79249817558bdd728710753c5e597', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '011484c05de937ec68b37058e2894b7728bb2514', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f7ce6319790ade0e3a3c001bdf76b10b09f637', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5368769021944b6952192c91bd7eb712dfe7afc6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b46cd31c4044ed0383614ab7c31fbea3e15cf42', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21a2393b80d18081e01153ce271ba93b74eb4ef7', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd2900c7508e6e699935d573594e5bcfb77cb85', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d84b4ca2a5ddbbc63293df5da259224eeefaed', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4f533d5694d9a277b25df8fce0fe4e77104438e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22
1427847445,Renovate probe,"<!-- Comment:
 Please start by adding a link to an issue if the pull request is trying to solve one.
 You can used keyword to do the linking automatically: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword.
-->

### Description
Adding a probe that detects whether renovate bot is configured in the plugin.

Closes #254 

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Testing done

<!-- Comment:
  if there is no automatic test, please explain what you did to validate
  the bugfix or the improvement.
-->
Added test cases.

```[tasklist]
### Submitter checklist
- [x] If an issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [x] The changeset is on a specific branch. Using `feature/` for new feature, or improvements ; Using `fix/` for bug fixes ; Using `docs/` for any documentation changes.
- [x] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition or an explanation why there is no tests in the description.
```
",True,350,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/350,https://github.com/jenkins-infra/plugin-health-scoring/pull/350,closed,276,44,5,21,0,50,1,1,[{'name': 'enhancement'}],2023-07-10 16:37:38+00:00,2023-07-19 10:15:03+00:00,754645.0,"8 days, 17:37:25","[{'comment_id': 1259945094, 'comment_body': ""There are two placeholders, but the second argument is the exception object.\r\nMy slf4j api is a bit rusty, but I don't think it would work."", 'comment_created': datetime.datetime(2023, 7, 11, 15, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'PierreBtz', 'type': 'User'}, {'comment_id': 1259974815, 'comment_body': 'In `ProbeResult` a key name is always passed. So I should override this.\r\n\r\nThe Logger message can be changed. I added it. It did not exists in the `Dependabot `probe initially.', 'comment_created': datetime.datetime(2023, 7, 11, 16, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1260031614, 'comment_body': 'Made the changes based on your suggestions @PierreBtz. It was a cool one though.', 'comment_created': datetime.datetime(2023, 7, 11, 17, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1262703948, 'comment_body': ""This class deserves Javadoc.\r\n\r\nAlso, I'm a little skeptical about the naming, especially the `Detect` part of it actually.\r\n\r\nMaybe a simple `AbstractBotConfigurationProbe`?"", 'comment_created': datetime.datetime(2023, 7, 13, 15, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262709706, 'comment_body': 'I would suggest that you apply the same approach for managing `ORDER` in here than the one you used for the GitHub Workflows probe, meaning one `ORDER + 100` in the abstract class, and a `+10` and `+20` in subclasses.\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2023, 7, 13, 15, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1262717645, 'comment_body': '```suggestion\r\n        try (Stream<Path> paths = Files.find(githubConfig, 1, (path, $) ->\r\n         Files.isRegularFile(path) && path.getFileName().toString().startsWith(botName))) {\r\n```\r\n\r\nSimilar to https://github.com/jenkins-infra/plugin-health-scoring/pull/342#discussion_r1242643523\r\n\r\nIndentation looked a bit messy.', 'comment_created': datetime.datetime(2023, 7, 13, 15, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1264990341, 'comment_body': 'This new class could probably be named `AbstractDependencyBotConfigurationProbe`. What do you think?\r\nAnyway, having a little javadoc would help as well.', 'comment_created': datetime.datetime(2023, 7, 17, 7, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264993983, 'comment_body': 'I don\'t think the problem pointed by Pierre is that. The second placeholder in the message shouldn\'t be the exception thrown.\r\n\r\n```suggestion\r\n            LOGGER.error(""Could not browse the plugin folder during probe {}"", key(), ex);\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264994215, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264995484, 'comment_body': 'No need to get a description on an abstract probe, as it will never be instantiated. Same as for the GitHub Actions based probes.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264996388, 'comment_body': 'Why do you need this? You should keep the initial statement.', 'comment_created': datetime.datetime(2023, 7, 17, 7, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264996698, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1264997159, 'comment_body': 'Same as the previous comment.\r\n\r\n```suggestion\r\n        return spy(RenovateProbe.class);\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 7, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1265283542, 'comment_body': 'Feels weird to have 2 different ways of sharing the information.\r\n\r\nOne is `X is configured` the other is `No configuration file for X`. How about just `X is not configured`?', 'comment_created': datetime.datetime(2023, 7, 17, 12, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265285251, 'comment_body': 'Same remark for the `ORDER`.', 'comment_created': datetime.datetime(2023, 7, 17, 12, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265285485, 'comment_body': 'Deserves Javadoc.', 'comment_created': datetime.datetime(2023, 7, 17, 12, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265285727, 'comment_body': 'Deserves Javadoc.', 'comment_created': datetime.datetime(2023, 7, 17, 12, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265286110, 'comment_body': 'Why not using `KEY` here?', 'comment_created': datetime.datetime(2023, 7, 17, 12, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265286347, 'comment_body': 'Why not using `KEY` here?', 'comment_created': datetime.datetime(2023, 7, 17, 12, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265287310, 'comment_body': 'The description format is not consistent with the other probe. See: `Checks if dependabot is configured on a plugin.`\r\n\r\nOne is `checks` instead of `check` and has a `.` in the end.', 'comment_created': datetime.datetime(2023, 7, 17, 12, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265288784, 'comment_body': 'Could be extracted in some helper function to make the test more readable?', 'comment_created': datetime.datetime(2023, 7, 17, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1265471742, 'comment_body': 'I agree, modulo the `+10` and `+20` ;)', 'comment_created': datetime.datetime(2023, 7, 17, 14, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1265473400, 'comment_body': ""It's true that it's the same value. But the `key` must stay the same internally, when the filename used by dependabot might change in the future (I don't know, but we don't control it)"", 'comment_created': datetime.datetime(2023, 7, 17, 14, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1265479944, 'comment_body': 'The Renovate and Dependabot probes are dependant only on `LastCommitProbe` which is already added in the `ORDER` of the abstract class.  That is why I did not add `+10` and `+20` where they are extended.\r\n\r\n\r\nAm I missing something here?', 'comment_created': datetime.datetime(2023, 7, 17, 14, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1265480814, 'comment_body': 'same as https://github.com/jenkins-infra/plugin-health-scoring/pull/350/files#r1265473400', 'comment_created': datetime.datetime(2023, 7, 17, 14, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1265483284, 'comment_body': 'I had this thought too. But either way, we will have to make some changes in the code.\r\n\r\nFor now, using  `KEY` seems okay until we encounter those changes.  WDYT?', 'comment_created': datetime.datetime(2023, 7, 17, 14, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1265518153, 'comment_body': 'Added parameterized tests for this one.', 'comment_created': datetime.datetime(2023, 7, 17, 15, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1265518971, 'comment_body': 'Sounds good to me.', 'comment_created': datetime.datetime(2023, 7, 17, 15, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1265520278, 'comment_body': '```suggestion\r\n    }\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 15, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1265522754, 'comment_body': 'Would be great to have a bit of documentation on this to understand what `botName` is and how it is used,', 'comment_created': datetime.datetime(2023, 7, 17, 15, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1265845600, 'comment_body': ""No that's me, I thought all probes needed to have a distinct ORDER value, but I learned from another comment from @alecharp that Probes could have the same ORDER value if they did not depend on each other."", 'comment_created': datetime.datetime(2023, 7, 17, 20, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266450082, 'comment_body': ""The order doesn't have to be strict because I fear that at some point we need a map of the probe and their order to be able to navigate the different values. So, when there is a strict requirement, we do the `+100`, when there is a strict requirement and a relation between the probe (like dependabot and dependabotpullrequest) we do the `+10`. This needs to be documented, that's on me."", 'comment_created': datetime.datetime(2023, 7, 18, 8, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1266746996, 'comment_body': 'Intentional to use regular comment and not Javadoc?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266748043, 'comment_body': 'I believe this might not be necessary in the Javadocs. (only line 40 I mean)', 'comment_created': datetime.datetime(2023, 7, 18, 13, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266748425, 'comment_body': 'Intentional to use regular comment instead of Javadoc?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266749540, 'comment_body': ""Do not write comments related to subclasses usage here, you do not know what subclasses will do :wink: \r\n\r\nHere you define an API, but you don't describe how it is used."", 'comment_created': datetime.datetime(2023, 7, 18, 13, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266750351, 'comment_body': 'You could add proper javadocs to this constructor for example, to get some help from the IDE while using it.', 'comment_created': datetime.datetime(2023, 7, 18, 13, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266751113, 'comment_body': 'Intentional to use regular comments instead of Javadocs?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266752261, 'comment_body': 'This line should not be part of the Javadocs.\r\n\r\nAt least not like this. You can use `@see` from Javadocs if you want to link references to other classes.', 'comment_created': datetime.datetime(2023, 7, 18, 13, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266754171, 'comment_body': ""Feels weird to have this fact and only this fact in here.\r\n\r\nIMHO, either you share details, ie. what is Dependabot (as you did) and why we have a probe for it, or you don't go in that direction.\r\n\r\nThis feels like kind of incomplete docs."", 'comment_created': datetime.datetime(2023, 7, 18, 13, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266754515, 'comment_body': 'Intentional to use regular comments instead of Javadocs?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266755004, 'comment_body': 'Same remarks as for the other probe.', 'comment_created': datetime.datetime(2023, 7, 18, 13, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266755605, 'comment_body': 'inline and use directly `AbstractDependencyBotConfigurationProbe.ORDER`?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1266755832, 'comment_body': 'inline and use directly `AbstractDependencyBotConfigurationProbe.ORDER`?', 'comment_created': datetime.datetime(2023, 7, 18, 13, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1267031333, 'comment_body': 'What do you mean by inline here? ', 'comment_created': datetime.datetime(2023, 7, 18, 16, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1267252195, 'comment_body': 'What I mean is that in your `@Order` annotation you use a variable that is just assigning another variable with no modification.\r\n\r\nYou could directly inline `AbstractDependencyBotConfigurationProbe.ORDER` in the annotation like `@Order(AbstractDependencyBotConfigurationProbe.ORDER)` instead of assigning it to a variable that brings no added value.', 'comment_created': datetime.datetime(2023, 7, 18, 20, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1267253928, 'comment_body': 'This line can now be removed', 'comment_created': datetime.datetime(2023, 7, 18, 20, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1267254157, 'comment_body': 'This line can now be removed.', 'comment_created': datetime.datetime(2023, 7, 18, 20, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1267787477, 'comment_body': 'I supposed you used a loop here in order to go through the different variations of the ProbeResult map entries? \r\nThis is not how this works: JUnit is going through the different variations of the map, as provided by the `probeResults` method, and provide them as a parameter of the test method. \r\n\r\nSo, you don\'t need t loop here.\r\n```suggestion\r\n        assertThat(probe.apply(plugin, ctx))\r\n            .usingRecursiveComparison()\r\n            .comparingOnlyFields(""id"", ""message"", ""status"")\r\n            .isEqualTo(ProbeResult.error(RenovateProbe.KEY, ""renovate does not meet the criteria to be executed on null""));\r\n\r\n        verify(probe, never()).doApply(plugin, ctx);\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 9, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1267793001, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 9, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}]","[{'commit_sha': 'e04a477f78e9c9851e00fd451f889db5bd4d8c6f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d306ec3cc88f40b7de061890f63bdc91d0a8b2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f44f0446d1972a8d6e78649b32bbb49fd54c61', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636bf05b82ce43195f2b8bfcc4a8f90f24a675e0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4dcd1b2a116bcf1980813beafa7d1b1dca58f56', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1479a0ea8d2ec70a3e3ff18cf077f718a1378f3d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a0bda91f2b0f38ca6d330bd0d2d4bec19f32bc2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4866ab8dc9f28231a851e9d334db4c30a1d9a800', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd407fc330d1bb2fd6e3d537453312bdd5385458', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a41492c670e6c68258f23336d6e373e7bd0bd6db', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48f3ad36f17dfcb06ee7de774f709e37fa3beb78', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a97f89c272e96a5c429d44d6c2eb4feb125db1f6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a81230cc58170e8f0c5df5379baf22f3b89d08db', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a73b9b84eef7f99f2a590e7f01fd91b81d9601', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f9c1bb0abf04dc6ea9bdc47d52a866b9d2cfd92', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab73f2d5b03d3052a2fac2ff91dd0ce1df34908', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7146061fd7f81274d828127711ff9c528f4222ce', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdf7694aab8541993cabc032959db238177ffa9c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac4f2f9da564653c239cd10a9e525a84167b000', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f374f7efc8458610cd67f1252efcd1a55b3c5ab3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec049c18970a23de724e0846955ac24f3ba288ba', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22
1490896712,JSR-305 probe. Checks for `@Nonnull` and `@CheckForNull` deprecated annotations.,"<!-- Comment:
 Please start by adding a link to an issue if the pull request is trying to solve one.
 You can used keyword to do the linking automatically: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword.
-->

This probe checks for deprecated imports of `@Nonnull` and `@CheckForNull` annotations. 


### Description

Closes #322 

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Testing done
Added required test cases to validate the new probe. 
<!-- Comment:
  if there is no automatic test, please explain what you did to validate
  the bugfix or the improvement.
-->

```[tasklist]
### Submitter checklist
- [x] If an issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [x] The changeset is on a specific branch. Using `feature/` for new feature, or improvements ; Using `fix/` for bug fixes ; Using `docs/` for any documentation changes.
- [x] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition or an explanation why there is no tests in the description.
```
",True,359,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/359,https://github.com/jenkins-infra/plugin-health-scoring/pull/359,closed,246,1,3,15,6,36,2,1,"[{'name': 'enhancement'}, {'name': 'probe'}]",2023-08-27 08:30:21+00:00,2023-09-08 17:53:02+00:00,1070561.0,"12 days, 9:22:41","[{'comment_id': 1306624750, 'comment_body': 'I was doubtful whether I should go for an abstract class. \r\n\r\nThough I do not know all the problems that come with plugin maintenance, it seems that in the future a situation may arise where we might need to search in `.java` files.', 'comment_created': datetime.datetime(2023, 8, 27, 8, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306624876, 'comment_body': 'I made this a list so that multiple lines that need to be searched for could be added. Instead of hard-coding this and restricting it to a couple of files. ', 'comment_created': datetime.datetime(2023, 8, 27, 8, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306625065, 'comment_body': ""I hope this isn't an incorrect decision. The goal is to make it future proof but if you think this situation may not arise, I am open to refactoring it. "", 'comment_created': datetime.datetime(2023, 8, 27, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306625489, 'comment_body': 'Here I was not able to think a good name for the probe. So I went ahead with this one. ', 'comment_created': datetime.datetime(2023, 8, 27, 8, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306665987, 'comment_body': ""Without entering the debate about whether we should keep it or not, I just wanted to share some interesting readings about some principles we (should?) tend to follow while writing code: https://blog.devgenius.io/key-principles-in-software-dry-kiss-yagni-solid-and-other-acronyms-98e5575a6942?gi=09e171025fdc\r\n\r\nThe key take aways in the current situation are *KISS* and *YAGNI*.\r\n\r\n*KISS* (Keep It Simple, Stupid) is all about trying to write code in the simplest way possible.\r\n\r\n*YAGNI* (You Ain't Gonne Need It) is slightly related and is all about wondering if you're really ever going to need what you implemented.\r\n\r\nAgain, I am not saying we should or should not go for that design you implemented, but rather sharing some general tips about coding: in general, we try to stick to the minimum change we can do in order to implement the feature that we need. Preparing stuff for a potential future is interesting only if we actually did study a bit what is about to come and we know for sure that we will need that preparation.\r\n\r\nOTOH though, I really do appreciate both the effort, and the comments explaining your rationale. \r\n\r\nThe decision itself is neither correct or incorrect, this is a Pull Request, so you are proposing something, with a rationale. Then we discuss it all together as a team working on the project, and we all agree on what seems to be the best decision based on everyone's arguments.\r\n\r\nGreat move on triggering that discussion Jagruti!"", 'comment_created': datetime.datetime(2023, 8, 27, 13, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306666214, 'comment_body': 'Is it supposed to run at the same time as `SCMLinkValidationProbe` or after it? I believe we need the source code to be available before checking it, so we might need to run after this probe?', 'comment_created': datetime.datetime(2023, 8, 27, 13, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306666311, 'comment_body': 'Awesome work writing comments like that! Very good practice!', 'comment_created': datetime.datetime(2023, 8, 27, 13, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306666519, 'comment_body': 'I believe you can use `endsWith` directly on a `Path` object without having to transform it in a `String`.', 'comment_created': datetime.datetime(2023, 8, 27, 13, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306666681, 'comment_body': 'Not really `deprecatedPaths` right? But rather something like `javaFilesWithDeprecatedImports`?', 'comment_created': datetime.datetime(2023, 8, 27, 13, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306667156, 'comment_body': 'Something interesting to think about in here: \r\n\r\nWe only care about the `import` statements for that probe. So you could `filter` the lines of the file to retrieve only the one starting with `import`. What do you think?', 'comment_created': datetime.datetime(2023, 8, 27, 13, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306667612, 'comment_body': 'While we are at abstracting code, you can see that your abstract probe is actually not just allowing implementations to search for deprecated imports, but for any imports... Which opens the way for more probes to be implemented on top of that.\r\n\r\nI believe if we keep this abstract probe, it should actually be called `AbstractJavaImportsCheckProbe` because that is what it is actually doing. It does not look just for annotation imports, or deprecated imports, but you can make it search for any imports.', 'comment_created': datetime.datetime(2023, 8, 27, 13, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306667704, 'comment_body': 'Or it is just not found right?', 'comment_created': datetime.datetime(2023, 8, 27, 13, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306667770, 'comment_body': 'lgtm', 'comment_created': datetime.datetime(2023, 8, 27, 13, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306668075, 'comment_body': ""If you're going for an implementation based on a `abstract` class that is supposed to deal with imports, you should not have to write the full `import` statement in here.\r\n\r\nJust writing the fully qualified name of the import you are interested in, like `javax.annotation.Nonnull` should be enough, and it is up to the abstract class to then create the proper line with `import xxx;`.\r\n\r\n(think that if you had to write another probe based on that, you would have to repeat writing `import xxx;` which is error prone and has no particular value)."", 'comment_created': datetime.datetime(2023, 8, 27, 13, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306684047, 'comment_body': 'I did not use the word ""not found"" here because it gives a negative connotation.\r\n\r\nLike, the deprecated annotations should be found but they are not. \r\n\r\nBut this probe is successful when they are not found.  ', 'comment_created': datetime.datetime(2023, 8, 27, 15, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306685312, 'comment_body': ""Thanks for your encouraging words. \r\n\r\nI read the article and according to the _YAGNI_ the abstract shouldn't be a part as of now. \r\n\r\n>  Then we discuss it all together as a team working on the project, and we all agree on what seems to be the best decision based on everyone's arguments.\r\n\r\nI agree with this. Whatever the decision is, it will be fine by me. "", 'comment_created': datetime.datetime(2023, 8, 27, 15, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306689237, 'comment_body': 'In the first line: ` context.getScmRepository();` I am fetching the repository link. I want the link to be validated before I fetch the repo. \r\n\r\nSo the `SCMLinkValidationProbe` should be executed first. I have also added it in the `getProbeResultRequirement`\r\n', 'comment_created': datetime.datetime(2023, 8, 27, 16, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306689638, 'comment_body': 'This honestly makes so much sense. Thanks for pointing out. ', 'comment_created': datetime.datetime(2023, 8, 27, 16, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306696740, 'comment_body': 'Sorry, what I meant is: is this OK to use the same value for `ORDER` or should we increment it?', 'comment_created': datetime.datetime(2023, 8, 27, 17, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306696950, 'comment_body': 'What I mean is perhaps JSR305 was never used in the plugin in the first place, so reading a message saying it was updated could be confusing.', 'comment_created': datetime.datetime(2023, 8, 27, 17, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306911578, 'comment_body': 'https://javatechonline.medium.com/order-annotation-in-spring-boot-499d76c5a29c\r\n\r\nIn this article, it says:\r\n\r\n> If Component does not have @Order annotation, it will execute in alphabetical order of bean name by default. Furthermore, if two components are having the same order value, the execution will happen in the alphabetical order of component name.\r\n\r\nYou are right. I added + 100 in that case. So that this probe runs after `SCMLinkValidationProbe`.', 'comment_created': datetime.datetime(2023, 8, 28, 5, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1307814752, 'comment_body': ""Here `paths` is `javaFiles` right? Or `javaFilesPath`?\r\n\r\nThe difference to me with something like `(path, $) ->` that you see at the end of the line is that at the end of the line `path` is indeed a path, and we don't know what it is exactly, we just know it's a path.\r\n\r\nBut the `Stream` that we create definitely contains all the Java files of the plugin, so we can have a more explicit name than just `paths`, because we know what kind of path that is."", 'comment_created': datetime.datetime(2023, 8, 28, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307815091, 'comment_body': '```suggestion\r\n            Files.isRegularFile(path) && path.getFileName().endsWith("".java""))) {\r\n```\r\n\r\nNo need for the `toString()` method IIRC.', 'comment_created': datetime.datetime(2023, 8, 28, 19, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307816410, 'comment_body': 'Now that you changed the abstraction of your class to ""detection of deprecated imports"" to actually ""detection of imports"", you can rename `javaFilesWithDeprecatedImports` to what it became, something like: `javaFilesWithDetectedImports` or something similar.', 'comment_created': datetime.datetime(2023, 8, 28, 19, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307825587, 'comment_body': 'From a design perspective, I think you can slightly change the methods you are using.\r\n\r\nHere, your `getFileNameWithImports` is transparently responsible of 2 different things:\r\n\r\n* Checking if a file contains some `import` statements,\r\n* Return the name of the file if it contains the `import` statements.\r\n\r\nIn order to implement those 2 behaviors in only 1 method, you opted for some sort of convention: if the method returns a `String`, it means the file contains the import, and you now have its file name. But if the file does not contain the import, you return `null` and that `null` value is to be interpreted in ""the import statement is not found in that file"".\r\n\r\nIf you remember the article I shared with you some time ago about accronyms, there is one related to implementing methods which are responsible for one and only one thing.\r\n\r\nHere, your method is doing 2 different things.\r\n\r\nOne way to handle this could be:\r\n\r\nChange `getFileNameWithImports` to a method like `boolean containsImports(Path javaFile, List<String> imports)`. The code you wrote is correct, you just have to change the return statement to a boolean instead of returning `String`s.\r\n\r\nThen, in your caller method, instead of implementing that ""convention"" of yours (filtering the `null` objects to remove the java classes which do not contain the imports (see how non intuitive that is?)), you can simply do the following:\r\n\r\n`javaFiles.filter(javaFile -> containsImports(javaFile, getListOfImports()))`\r\n\r\nThis first part will simply filter the list of all java files, keeping only the ones with the detected imports.\r\n\r\nThen, because you want to collect their file names, you just have to:\r\n\r\n`.map(javaFile -> javaFile.getFileName().toString())`.\r\n\r\nThis way you don\'t rely on kind of an internal transparent convention to write your code, and your code becomes very explicit.\r\n\r\nWDYT? Does it make sense?', 'comment_created': datetime.datetime(2023, 8, 28, 19, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307826908, 'comment_body': 'You can add a `trim()` to be sure that there are no particular spaces remaining around the statement that you want.', 'comment_created': datetime.datetime(2023, 8, 28, 19, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307827573, 'comment_body': 'Notice that now that you refactored your code, `fileContent` is not really the file content? It became the `importStatements` :wink: ', 'comment_created': datetime.datetime(2023, 8, 28, 19, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1308825228, 'comment_body': 'Actually, the updated annotations are: `edu.umd.cs.findbugs.annotations.CheckForNull` and `edu.umd.cs.findbugs.annotations.NonNull` if you want to actually check for ""updated annotations"".', 'comment_created': datetime.datetime(2023, 8, 29, 13, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1317078899, 'comment_body': '```suggestion\r\n    void shouldNotReturnPluginsWithNoDeprecatedImports() throws IOException {\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 10, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317080654, 'comment_body': 'I agree, this is not really what you are testing. You are ""just"" validating that the classes have no deprecated imports. \r\nIt would be great to catch updated imports as well, so we could score (later on) plugins with updated imports better than plugin with no imports which would be scored better than plugins with deprecated imports (updated > normal > deprecated).', 'comment_created': datetime.datetime(2023, 9, 6, 10, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317757340, 'comment_body': ""That's kinda tricky though cause we would need to define if it's legit not too use the annotations?"", 'comment_created': datetime.datetime(2023, 9, 6, 19, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1318524026, 'comment_body': 'true. Let\'s keep the ""if used, they need to be the new ones"" approach.\r\nBut having a test using the new imports could be good.', 'comment_created': datetime.datetime(2023, 9, 7, 12, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1318547812, 'comment_body': '> true. Let\'s keep the ""if used, they need to be the new ones"" approach.\r\n> But having a test using the new imports could be good.\r\n\r\nShall I test whether the imports are being used? \r\nFor this approach would need to read the new imports in the code. \r\n\r\nOr just test that when the new imports are used the probe does not fail?', 'comment_created': datetime.datetime(2023, 9, 7, 12, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1318801781, 'comment_body': 'The latter: \r\n\r\n> just test that when the new imports are used the probe does not fail?', 'comment_created': datetime.datetime(2023, 9, 7, 15, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1319503828, 'comment_body': '```suggestion\r\n            ""import edu.umd.cs.findbugs.annotations.NonNull;"",\r\n            ""import edu.umd.cs.findbugs.annotations.CheckForNull;"",\r\n            """",\r\n            ""import java.util.HashMap;"",\r\n            ""import java.util.Map;""\r\n```', 'comment_created': datetime.datetime(2023, 9, 8, 7, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1319505785, 'comment_body': '```suggestion\r\n            ""import javax.annotation.CheckForNull;"",\r\n            """",\r\n            ""import java.util.HashMap;"",\r\n            ""import java.util.Map;""\r\n```', 'comment_created': datetime.datetime(2023, 9, 8, 7, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}]","[{'commit_sha': 'c9585eadd4f81f3051e26855985382d55d97dba5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '819cf4ba5e1a8b631217dedcc980a4e195fad6df', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '410ec3af639a69871efda63c15b975d3822e33e7', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '164c7ede13585e17e6c56edf6411c2c0142e9817', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2534f03b1a309a6db88dcc4dd48f33a83f8df3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f562a5296002872449203fc3411cd9fd52172b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '026a71fdea03cd893f22992aa844dc22d882450e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985eeb6931236e542dbac17115e14d1bf29e7350', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8fb9bc38723942c7a652fa91fd0f182254cb18', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db02a24058aee175c29451577db442ee9daecc20', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e6ebad75697d882c1dd71f003b164b24286753', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c95b4af62dd37838592822354e0138b4d92120d3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cefeb6284442e3380b76ab69f338a0f24fc39748', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fb73bc5348e9c5525e8be2fd61fc8ebdea6ba1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2011c4f3ad1e7a0a42bfb100bd550c281da53b4', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22
1481818243,Incremental Build detection probe,"<!-- Comment:
 Please start by adding a link to an issue if the pull request is trying to solve one.
 You can used keyword to do the linking automatically: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword.
-->

### Description

This probe detects whether incremental build is configured in the plugin.

Closes #321 

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Testing done

<!-- Comment:
  if there is no automatic test, please explain what you did to validate
  the bugfix or the improvement.
-->

```[tasklist]
### Submitter checklist
- [x] If an issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [x] The changeset is on a specific branch. Using `feature/` for new feature, or improvements ; Using `fix/` for bug fixes ; Using `docs/` for any documentation changes.
- [ ] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition or an explanation why there is no tests in the description.
```
",True,358,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/358,https://github.com/jenkins-infra/plugin-health-scoring/pull/358,closed,316,0,11,10,1,33,2,1,"[{'name': 'enhancement'}, {'name': 'probe'}]",2023-08-20 15:16:20+00:00,2023-09-06 10:34:22+00:00,1451882.0,"16 days, 19:18:02","[{'comment_id': 1300348254, 'comment_body': 'This this the continuous delivery probe, why doing it again?', 'comment_created': datetime.datetime(2023, 8, 21, 16, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1301202681, 'comment_body': 'Oh that is correct! I was not sure if CD was considered as part of the incrementals setup or not, now I know :p \r\n\r\nSorry about that, I might have be misleading a bit on that one.', 'comment_created': datetime.datetime(2023, 8, 22, 8, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301788639, 'comment_body': 'Well, this probe was looking for the same workflow definition than cd so...', 'comment_created': datetime.datetime(2023, 8, 22, 15, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1301826876, 'comment_body': '(I forgot we had a CD probe :stuck_out_tongue:)', 'comment_created': datetime.datetime(2023, 8, 22, 15, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302184529, 'comment_body': 'This should not be an error.\r\n\r\nRemember, an error log should mean that there is something wrong going with the application and that it failed to recover from it.\r\n\r\nHere, it is not at all the case, you just searched for something which was not there, which will result in a failed probe result, but everything is going well in regards to the health score application.\r\n\r\nAn info message is more than enough, assuming you provide enough contextual information: something like: `Did not find a maven configuration folder in plugin %s while running the probe %s`.', 'comment_created': datetime.datetime(2023, 8, 22, 20, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302186749, 'comment_body': 'This will iterate twice in the files contained in the `mvnConfig` folder, which is not particularly something you want or need.\r\n\r\nA single call to `Files.find` should give you both the `extensions.xml` and `maven.config` file, there is no need for 2 find operations.\r\n\r\nWith a single call, you can retrieve a `Stream` that should contain exactly 2 files, and you can then simply analyze them separately.', 'comment_created': datetime.datetime(2023, 8, 22, 20, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302188302, 'comment_body': 'Careful, that is not what we want to do.\r\n\r\nHere, if you find the `extensions.xml` file, you will not check for the other file.\r\n\r\nWe want to check that both files are found and that both files are valid.\r\n\r\nA Success should be sent only if the 2 files are here and correct.', 'comment_created': datetime.datetime(2023, 8, 22, 20, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302189580, 'comment_body': 'Javadocs?', 'comment_created': datetime.datetime(2023, 8, 22, 20, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302190622, 'comment_body': 'Why not checking the `artifactId` as well?', 'comment_created': datetime.datetime(2023, 8, 22, 20, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302191314, 'comment_body': 'This is not doing what we want. We want to check that both profiles are present in the file, not only one of them.', 'comment_created': datetime.datetime(2023, 8, 22, 21, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302192854, 'comment_body': 'For better readability, please name your test resources in regards to the expected test result.\r\n\r\nSomething like `properlyConfiguredPlugin`, `pluginMissingExtensions`, `pluginMissingMavenConfig`, `pluginWithMalformedExtension`, etc.\r\n\r\nThis way it is much easier to read the test.', 'comment_created': datetime.datetime(2023, 8, 22, 21, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302193411, 'comment_body': 'Not the expected behavior. We need both files to be present, not just one of them.', 'comment_created': datetime.datetime(2023, 8, 22, 21, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1304642992, 'comment_body': '> Remember, an error log should mean that there is something wrong going with the application and that it failed to recover from it.\r\n\r\nI need to change my mindset here. I believe  that anything that prevents the the functionality from completing should be an error. I will be more careful about it. ', 'comment_created': datetime.datetime(2023, 8, 24, 17, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1305502732, 'comment_body': ""Here changing `||` to `&&` wasn't working. I had to change more of the syntax."", 'comment_created': datetime.datetime(2023, 8, 25, 10, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1305524548, 'comment_body': ""In this case, I was not able to decide on the correct approach. \r\n\r\nAnother alternative is using `forEach` or  `map` in that case I can't use `Collectors.toMap` and need an external map that will add the data with the desired key name. \r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 25, 11, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306661736, 'comment_body': ""https://dev.to/raysaltrelli/logging-best-practices-obo\r\n\r\nThis is an interesting first reading regarding log levels.\r\n\r\nThe important thing to keep in mind is that logs should relate to your application's execution, not your application's business implementation.\r\n\r\nIf a probe is detecting something wrong, it is not an error from a log level, because the probe did run perfectly fine, and accomplished its job of identifying a business error.\r\n\r\nIf a probe cannot detect something because it encountered an Exception though, and you cannot figure if the project you are analyzing is correct or not, that is an error to log, because your application cannot do what it is supposed to do."", 'comment_created': datetime.datetime(2023, 8, 27, 13, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306662541, 'comment_body': 'In such Javadocs, it is actually interesting to share a bit more information about the decisions that you took for writing that class, like for examples how you intend to detect that a plugin is using incrementals.\r\n\r\nNot really like writing specifications as Javadocs, but rather sharing a bit of the rationale for that class to exist.', 'comment_created': datetime.datetime(2023, 8, 27, 13, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306662678, 'comment_body': '`ARTIFACT_ID` is probably a too vague name. What is it the `ArtifactId` of?\r\n\r\nSomething like `INCREMENTAL_TOOL_ARTIFACT_ID` would be more accurate I believe.', 'comment_created': datetime.datetime(2023, 8, 27, 13, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306664533, 'comment_body': 'That looks like an overly complex way of doing what you want to do.\r\n\r\nBasically you want: \r\n\r\n* To search in `.mvn` for 2 files, `maven.config` and `extensions.xml`\r\n* If they exist run some checks on them\r\n\r\nSomething like:\r\n\r\n```java\r\ntry (Stream<Path> incrementalsConfigs = Files.find(mvnConfig, 1, (path, $) -> Files.isRegularFile(path) && (path.endsWith(""maven.config"") || path.endsWith(""extensions.xml"")))) {\r\n```\r\n\r\nShould directly give you a Stream that should contain 2 elements being the files you are searching for.\r\n\r\nYou can simply go for something like:\r\n\r\n```java\r\nOptional<Path> mavenExtensionsFile = incrementalsConfigs.filter(path -> path.endsWith(""extensions.xml"")).findFirst(); \r\n\r\nOptional<Path> mavenConfigFile = incrementalsConfigs.filter(path -> path.endsWith(""maven.config"")).findFirst(); \r\n```\r\n\r\nThen `map` those `Optional` with whatever validation method you implemented, and if both result are present and correct, you\'ve got a Probe Success =) ', 'comment_created': datetime.datetime(2023, 8, 27, 13, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1306676761, 'comment_body': ""> The important thing to keep in mind is that logs should relate to your application's execution, not your application's business implementation.\r\n\r\nThis helped and so did the article. Thanks. "", 'comment_created': datetime.datetime(2023, 8, 27, 14, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306681216, 'comment_body': '> ```java\r\n> Optional<Path> mavenExtensionsFile = incrementalsConfigs.filter(path -> path.endsWith(""extensions.xml"")).findFirst(); \r\n> \r\n> Optional<Path> mavenConfigFile = incrementalsConfigs.filter(path -> path.endsWith(""maven.config"")).findFirst(); \r\n> ```\r\n\r\nI tried something like this initially. It throws an error saying `java.lang.IllegalStateException: stream has already been operated upon or closed`.\r\n\r\nI read about it and learned that `Streams` are one-time use only. \r\n\r\nI implemented what you suggested and got the same error.  I can only execute the first statement. Not the second one :(', 'comment_created': datetime.datetime(2023, 8, 27, 15, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306681695, 'comment_body': 'One of the solutions is to use `Supplier<Stream<Path>>` but then I cannot use it in `try` because it requires auto-closeable types.', 'comment_created': datetime.datetime(2023, 8, 27, 15, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306683497, 'comment_body': 'I took a different approach and was able to handle `Supplier` this time. ', 'comment_created': datetime.datetime(2023, 8, 27, 15, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306697171, 'comment_body': 'Oh yeah indeed, sorry I misled with code examples. The usual ways to tackle this are either to store things in Collection forms and generate new streams whenever needed, or indeed go for suppliers.\r\n\r\nSuppliers seem like a good idea for your situation, and great job figuring out a solution!', 'comment_created': datetime.datetime(2023, 8, 27, 17, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307882113, 'comment_body': 'Your code works, but I just wanted to share something here to ensure you understand the whole thing.\r\n\r\nIn that particular case, it is not a problem, but basically, that piece of code will explore the `mvnConfig` directory each time you will call the supplier. Not a big deal in our case because we do not expect that directory to contain a lot of files, but in other similar situations, this could be an issue, because there is no particular need of actually processing *x* times the same folder.\r\n\r\nThe problem you are trying to solve here is that a `Stream` can only be consumed once, and the Supplier approach allows you to retrieve a new `Stream` everytime you call the supplier. But you can actually implement a `Supplier` that will create for you a new `Stream` out of data which you already collected.\r\n\r\nSee for example:\r\n\r\n```java\r\ntry (Stream<Path> incrementalConfigsStream = Files.find(mvnConfig, 1, (path, $) -> Files.isRegularFile(path) && (path.endsWith(""maven.config"") || path.endsWith(""extensions.xml"")))) {\r\n    List<Path> incrementalConfigsStore = incrementalConfigsStream.toList();\r\n    \r\n    // Here, we stored the data in a `List`, and we can create a supplier that will create a new `Stream` for us from this data\r\n    Supplier<Stream<String>> incrementalConfigs = () -> incrementalConfigsStore.stream();\r\n\r\n    // And now you can use your `Supplier` to retrieve whatever you want, and the `mvnConfig` directory will be read just once\r\n        Optional<Path> mavenExtensionsFile = incrementalConfigs.get().filter(path -> path.endsWith(""extensions.xml"")).findFirst();\r\n        Optional<Path> mavenConfigFile = incrementalConfigs.get().filter(path -> path.endsWith(""maven.config"")).findFirst();\r\n\r\n}\r\n```\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2023, 8, 28, 20, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307889154, 'comment_body': 'Remember that trick Adrien shared with you some time ago?\r\n\r\nIf `groupId` or `artifactId` are `null`, then calling the `equals` method on them will result in a `NullPointerException`, which you can avoid by simply writing your tests in the other way around, starting with what you know for sure is not `null`:\r\n\r\n`INCREMENTAL_TOOL.equals(groupId) && INCREMENTAL_TOOL_ARTIFACT_ID.equals(artifactId)`', 'comment_created': datetime.datetime(2023, 8, 28, 20, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1307891019, 'comment_body': 'I think instead of `lines().toList()` you can directly use `.readAllLines()` which returns a `List` and not a `Stream`.', 'comment_created': datetime.datetime(2023, 8, 28, 20, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1308837766, 'comment_body': ""Is it expected that we return `null`? Isn't it a probe failure? I don't remember what we usually do in that scenario TBH"", 'comment_created': datetime.datetime(2023, 8, 29, 13, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1308884483, 'comment_body': 'This is the part of the old syntax. When I was using the Supplier the other way. My bad.', 'comment_created': datetime.datetime(2023, 8, 29, 14, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1308885602, 'comment_body': 'I will remember more. ', 'comment_created': datetime.datetime(2023, 8, 29, 14, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1308909125, 'comment_body': 'This is a much better of doing things. \r\n\r\nI do not completely understand `Functional Interface` and  `Supplier` that well. They still scare me. ', 'comment_created': datetime.datetime(2023, 8, 29, 14, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1309259062, 'comment_body': ""These are common things coming from Functional Programming. The concepts apply to lots of languages, not Java only.\r\n\r\nYou can have a look at this 101 guide from Cassidy Williams for example: https://github.com/readme/guides/functional-programming-basics\r\n\r\nIf you're still unsure and would like to discuss it a bit so we can share some examples live, LMK, we can have a quick call for more explanation."", 'comment_created': datetime.datetime(2023, 8, 29, 19, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1309604088, 'comment_body': 'Thanks for the link and offering for a quick meeting. I will let you know if the need arises. ', 'comment_created': datetime.datetime(2023, 8, 30, 3, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}]","[{'commit_sha': '224746dffaeba7b62f09310f44c16055c08fb4f6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a554ebfd407e47b037ca4545b5feed5a1caa26fc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '494042ea0c540fceeb937255ec9c9ae63196b4c6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd951b27bc36ae11b6aeb0da28a8982153a1873', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f8c77909d3e3e6fe51646dd9f316ca2092361fa', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df409325b3973e00956eccec3ff24d9497ce5695', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3a7a1606cff314f25cffde3f57835de76b12b23', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a7a701d272769fecbe9429c444b99b5aca2426', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b27e14958b6fef603e025a10422c93718d8bdc9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c09128e36dc22d717fbd02b27845fde0250b10df', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22
1445659147,Number of open issue probe,"<!-- Comment:
 Please start by adding a link to an issue if the pull request is trying to solve one.
 You can used keyword to do the linking automatically: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword.
-->

### Description

This probe fetches the number of open issues in a plugin. 

Steps:

Create `IssueTrackerDetectionProbe`, this probe will check whether JIRA, GitHub is configured or both is configured. 
- Return a success as long as at least one issue tracker configured.
- If no issue tracker is configured that is an error
- more than one error is a success. Stores which ones are configured.

For  `GitHubOpenIssuesProbe` and `JiraOpenIssuesProbe`:

- Create an abstract class. That would be the parent for `GitHubOpenIssuesProbe` and `JiraOpenIssuesProbe`.
- Make sure that `IssueTrackerDetectionProbe`  is executed and success is returned.
-  Get the message of the probe and pass it. Try to see which system is used. 
- Return a `Map<key, url>`

Some code reusing details:
> Basically this from your PR:

 ```   private List<String> getIssueTrackerData(ProbeContext context, String filter) {
        return context.getUpdateCenter()
            .issueTrackers().stream()
            .flatMap(map -> map.entrySet().stream())
            .filter(map -> map.getKey().equals(filter))
            .map(map -> map.getValue())
            .collect(Collectors.toList());
    }
```
Is your entry point for the new probe
```
IssueTrackerDetectionProbe
| - GitHubOpenIssuesProbe
| - JiraOpemIssuesProbe
```


```ProbeContext.getIssuesTracker() ->
""github"" - ""https://github.com/
""jira"" - ""https://issues.jenkins.io
```


Closes #143 

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Testing done

<!-- Comment:
  if there is no automatic test, please explain what you did to validate
  the bugfix or the improvement.
-->

```[tasklist]
### Submitter checklist
- [x] If an issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [x] The changeset is on a specific branch. Using `feature/` for new feature, or improvements ; Using `fix/` for bug fixes ; Using `docs/` for any documentation changes.
- [ ] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition or an explanation why there is no tests in the description.
```
",False,353,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/353,https://github.com/jenkins-infra/plugin-health-scoring/pull/353,open,1074,26,17,50,6,140,0,1,[],2023-07-23 16:38:37+00:00,,0.0,,"[{'comment_id': 1271905675, 'comment_body': ""No. Don't change the model that is stored in Database with intermediate data. \r\nThe fact that you need to have the issue tracker data is only for the new probe."", 'comment_created': datetime.datetime(2023, 7, 24, 8, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1271964743, 'comment_body': 'I have removed it from the models and added it to the record `UpdateCenter`. \r\n\r\nTest cases that mock the `UpdateCenter` are failing because they do not have the new parameter.\r\n\r\nIs this the desired solution. Shall I update the other test cases? ', 'comment_created': datetime.datetime(2023, 7, 24, 9, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1272348216, 'comment_body': 'Jagruti, currently, the project is not compiling because of this, so yes it needs to be fixed.', 'comment_created': datetime.datetime(2023, 7, 24, 14, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278581527, 'comment_body': ""Since this is a live plugin. I wanted to mock the total number `67`.\r\n\r\nBut I wasn't able to to. From the debugger I could make a guess the API call in the code overrides the mock. But am not sure. "", 'comment_created': datetime.datetime(2023, 7, 30, 15, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1278581739, 'comment_body': 'I am not sure if mocking `getOpenIssueCount` is the right thing to do. \r\n\r\nBecause this actually being test. I took the inspiration from `CodeCoverageProbe` where most of the where functions used from the GitHub library were mocked. ', 'comment_created': datetime.datetime(2023, 7, 30, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1278881200, 'comment_body': ""Please, work on this, because I don't want that test to randomly fails because the number of issues on this plugin changed."", 'comment_created': datetime.datetime(2023, 7, 31, 7, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278891302, 'comment_body': 'This is more an error than a failure, as you cannot get the details you are looking for on this plugin.\r\n\r\n```suggestion\r\n        return ProbeResult.error(key(), String.format(""Cannot fetch information from JIRA API for plugin %s."", pluginName));\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 7, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278893984, 'comment_body': 'you already have the context value.\r\n\r\n```suggestion\r\n                + (repository.isPresent() ? repository.get().split(""/"")[1] : """")\r\n```\r\n\r\nhowever, what happens when there is no value? Are you sure this is how to use the link in the update center? From exploring the update-center.json file, the url there contains the component ID (which is a number) of the plugin. Why not using it?', 'comment_created': datetime.datetime(2023, 7, 31, 7, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278894126, 'comment_body': 'What if a plugin has Jira And GitHub issues?\r\nShould we consider consolidating total issues across all platform?', 'comment_created': datetime.datetime(2023, 7, 31, 7, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278900122, 'comment_body': 'Not sure this needs to be public. And why do you need the two values to be in different variables?', 'comment_created': datetime.datetime(2023, 7, 31, 7, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278901659, 'comment_body': 'This is bringing a lot of dependencies to the module. Can it be a bit more specific? ', 'comment_created': datetime.datetime(2023, 7, 31, 7, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278917218, 'comment_body': 'You could even just provide the issue trackers list as parameter.', 'comment_created': datetime.datetime(2023, 7, 31, 7, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278924504, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 8, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278925188, 'comment_body': 'What does `atMostOnce` method does?\r\n\r\n```suggestion\r\n        verify(probe).doApply(plugin, ctx);\r\n```', 'comment_created': datetime.datetime(2023, 7, 31, 8, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278929289, 'comment_body': 'What you mock is what you can control but is not in the project. Does `GhRepository` class fit the description? Are you testing its method `getOpenIssueCount` behavior?', 'comment_created': datetime.datetime(2023, 7, 31, 8, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278932119, 'comment_body': 'You are concatenating two `ProbeResult`. How does that work?', 'comment_created': datetime.datetime(2023, 7, 31, 8, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1280149573, 'comment_body': 'The API path might change in future or may have queryStrings.', 'comment_created': datetime.datetime(2023, 8, 1, 6, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1280153879, 'comment_body': 'When there are open issues in both `JIRA` and `GitHub` both,  both methods will return the count of open issues. \r\n\r\nTheir message is then combined and returned to the user. \r\n\r\nI tried using a switch case and also played around with lambda. But it did not work. ', 'comment_created': datetime.datetime(2023, 8, 1, 6, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1280257814, 'comment_body': ""you are combining the `toString()` of both `ProbeResult`. If that method is changed to not only returns the content of the `message` field, this won't work anymore. \r\n\r\nMoreover, what happens if `getJiraIssues` is returning an error? "", 'comment_created': datetime.datetime(2023, 8, 1, 8, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1280269860, 'comment_body': 'Yes. I was thinking the same. It will return a failure message. \r\n\r\nI want to use these two methods. And resolve the case when there are open issues in both the tracker type.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1280297457, 'comment_body': 'Did you consider having a parent class for the NumberOfOpenIssuesProbe and using children classes for Jira and GitHub to avoid mixing different systems in the same class?', 'comment_created': datetime.datetime(2023, 8, 1, 8, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1280302851, 'comment_body': 'About naming variables: a `List` variables should be named with a plural. Here `issueTrackers`.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1280304450, 'comment_body': 'Possible example for a good reason to have 2 children classes, one for Github, one for Jira.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1280306031, 'comment_body': ""Is it really considered a good practice if a plugin has 2 different issue trackers configured?\r\n\r\nIsn't it something that could be considered confusing for users and possible developers and that should reflect on the health score?"", 'comment_created': datetime.datetime(2023, 8, 1, 8, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1280309736, 'comment_body': ""That snippet is not very readable. I still consider jira and github should be handled in separate classes.\r\n\r\nIf really you wanted to keep it in a single class, you should have a generic method like `getIssues(String provider)` that will just call the right one depending on the issue tracker.\r\n\r\nThis way in this method you don't have to do something weird with the stream of issue trackers."", 'comment_created': datetime.datetime(2023, 8, 1, 8, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1280310421, 'comment_body': 'BTW, can you have multiple trackers of the same type? Like several Jira projects?\r\n\r\nAre there other issue trackers that are used by plugins?', 'comment_created': datetime.datetime(2023, 8, 1, 8, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1283269733, 'comment_body': 'This does not exists.\r\nPlease see https://updates.jenkins.io/current/update-center.actual.json.\r\n\r\nThe issue trackers are listed within each plugin.', 'comment_created': datetime.datetime(2023, 8, 3, 14, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1283271420, 'comment_body': 'See https://github.com/jenkins-infra/plugin-health-scoring/pull/353/files#r1283269733. \r\nBecause the issue trackers list is within each plugin, you need to check if the plugin is inside the update-center, then you can try to find its issue trackers list and register them.', 'comment_created': datetime.datetime(2023, 8, 3, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1283280342, 'comment_body': 'For this I need to call the `UpdateCenterPluginPublicationProbe`? \r\n\r\nif it succeeds go ahead? ', 'comment_created': datetime.datetime(2023, 8, 3, 14, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1283281167, 'comment_body': 'And remove this `List<Map<String, String>> issueTrackers`?', 'comment_created': datetime.datetime(2023, 8, 3, 14, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1283364184, 'comment_body': 'you need to get the plugin from the update-center list and from it get its issue trackers list.', 'comment_created': datetime.datetime(2023, 8, 3, 15, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1285164777, 'comment_body': '`spring-boot-starter-web` adds 4 different dependencies. While `spring-web` adds only web dependencies. \r\n\r\nSo added the latter. ', 'comment_created': datetime.datetime(2023, 8, 6, 7, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1286326384, 'comment_body': ""Hey @Jagrutiti,\r\n\r\nThere is something wrong with that class which comes from its design.\r\n\r\nOn purpose, I won't give you more indication for now, to let you figure it out by yourself.\r\n\r\nPlease have a look at other similar classes in the project, and please read more about the purpose of `abstract` classes, and the general purpose of abstraction in OOP. \r\n\r\nYou already implemented similar kind of classes in previous PRs, but perhaps the extra guidance we provided made that you did not get to understand the reason why we recommended this design, which is why this time I won't share much details (yet) and let you take some time to think about the design choices and understand the reason for them."", 'comment_created': datetime.datetime(2023, 8, 7, 19, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1286627024, 'comment_body': 'Hi @aneveux ,\r\n\r\nI did read about implementing an `abstract` class in OOPS. \r\n\r\nThe articles spoke of data abstraction and functional abstraction. In our case I believe, we are doing functional abstraction. \r\n\r\nHaving two different methods is important here because the implementation to count issues from both `JIRA` and `GitHub`  have nothing in common.\r\n\r\nI had done a similar implementation in `AbstractDependencyBotConfigurationProbe` but in that case `RenovateProbe` and `DependabotProbe` had the same job. Look for files only with different names.\r\n\r\nThe next point that I come across is why `abstract` classes are used. They are designed for:\r\n-  hide complex functionality\r\n- code reusability\r\n\r\nThe abstract classes that I implemented did provide code reusability and their functionalities were hidden from the child class. They only had to implement the abstract class.\r\n\r\nIn the `NumberofOpenIssuesProbe` code reusability is not possible because the libraries and API used in both cases are different. \r\n\r\nAbout the design issues, `JIRA_HOST` and `restTemplate` are used in only case of `JIRA` issues. \r\n\r\nMaybe I should change the `JIRA_HOST` to `HOST_URL` and that should be assigned by all the sub-classes. \r\n\r\nMaybe `JIRA_HOST` and `restTemplate`  should be assigned using a constructor in the subclasses? ', 'comment_created': datetime.datetime(2023, 8, 8, 5, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1286793827, 'comment_body': '> Having two different methods is important here because the implementation to count issues from both JIRA and GitHub have nothing in common.\r\n\r\nLet me just say, what if tomorrow there is a third issue tracker used in the Jenkins project, what would we have to add or changed in here to make it fit? \r\n\r\nIn OOP, it should require a minimal addition, very specific. \r\n\r\nIf you look at the DependencyBot abstract class, how are the different bot handled?', 'comment_created': datetime.datetime(2023, 8, 8, 8, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286794567, 'comment_body': 'What if the plugin is not in the update-center anymore?', 'comment_created': datetime.datetime(2023, 8, 8, 8, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286796032, 'comment_body': ""You can simply use `List.of()` when you don't care about the existence of the issue trackers."", 'comment_created': datetime.datetime(2023, 8, 8, 8, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286796983, 'comment_body': '```suggestion\r\nclass IssueTrackerDetectionProbeTest extends AbstractProbeTest<IssueTrackerDetectionProbe> {\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 8, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286797814, 'comment_body': ""Why aren't you assertj function here?"", 'comment_created': datetime.datetime(2023, 8, 8, 8, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1290610637, 'comment_body': ""Hey @Jagrutiti üëã \r\n\r\nSorry for the late reply, I'm out of the office right now and spend less time on the computer üòù \r\n\r\nAdrien actually gave a nice indication regarding the design: what happens if you had to add a third issue tracker?\r\n\r\nThe idea behind code abstraction is that the `abstract` class that you write should not know at all about its possible implementations. In your case, not only your `abstract` class knows about Jira and GitHub, but it even provides code for it.\r\n\r\nAn `abstract` class should contain all the code that is supposed to be common between all of its subclasses, and no more. If there is some code that is used by only one of the subclasses, it is rarely a good fit for the `abstract` class. \r\n\r\nThat being said though, maybe while implementing your code you will notice that there is nothing to share between the two classes that you write because they are too different from each other, and in that case, it would be better to challenge the need for abstraction, and simply write 2 classes that are doing their job. \r\n\r\nIntroducing abstraction just for the sake of it just makes the source code more complicated, hence less readable.\r\n\r\nIt is tempting to want to use good practices like abstraction while writing code when we manipulate things that seem similar, but it is important to check that they are indeed similar.\r\n\r\nHope that helps you understand my concern with the class design."", 'comment_created': datetime.datetime(2023, 8, 10, 19, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290708537, 'comment_body': 'Introducing a new dependency usually comes with a price: new updates to follow, possible security issues, etc.\r\n\r\nBecause of that, it is usually a good practice to document/explain why exactly you needed to introduce such a dependency, maybe to challenge if this very dependency is really needed or if something lighter could be used otherwise, or at least to inform why the dependency is needed. \r\n\r\nI personally usually write a simple comment just above the dependency to explain why it is needed, and that opens a conversation. ', 'comment_created': datetime.datetime(2023, 8, 10, 21, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290709189, 'comment_body': ""It deserves some Javadocs. Like, what's the difference between `viewUrl` and `reportUrl`?"", 'comment_created': datetime.datetime(2023, 8, 10, 21, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290715591, 'comment_body': 'What if the plugin is not using GitHub issues? \r\n\r\n`context.getIssueTrackerNameAndUrl().get(""github"")` will just return `null` right?\r\n\r\nHow about just testing that and writing a simple log message saying that the plugin is not using GitHub issues?', 'comment_created': datetime.datetime(2023, 8, 10, 21, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290716743, 'comment_body': ""`issueTrackerUrl.substring` can raise a NPE cause you didn't check if it could be `null`.\r\n\r\nAlso, what exactly are you extracting here? An example in the comments of what `issueTrackerUrl` usually contains and what you want to extract would be helpful."", 'comment_created': datetime.datetime(2023, 8, 10, 21, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290717832, 'comment_body': '`Cannot not`? üòÅ \r\n\r\nAlso why? You could log the exception as well.', 'comment_created': datetime.datetime(2023, 8, 10, 21, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290718105, 'comment_body': 'Javadocs is not complete as it does not include the parameters and return type.', 'comment_created': datetime.datetime(2023, 8, 10, 21, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290719912, 'comment_body': 'Careful about the formatting, like there is an extra space in: `Map<String, String> issueTrackerDetails`. Are you not using automated formatting from your IDE or something like this before committing?', 'comment_created': datetime.datetime(2023, 8, 10, 21, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290722133, 'comment_body': 'I am a little bit confused, a probe is supposed to run for 1 and only 1 plugin right? And it seems in that snippet: `getIssueTrackerData(context.getUpdateCenter().plugins())` that you are computing stuff about all the plugins, and not only the one we care about?\r\n\r\nAm I missing something?', 'comment_created': datetime.datetime(2023, 8, 10, 21, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290723733, 'comment_body': ""I'm not sure this probe does what you would like it to do.\r\n\r\nThis probe, for a plugin X, should check if there is an issue tracker that is configured for plugin X. It does not seem that it is doing that from the source code."", 'comment_created': datetime.datetime(2023, 8, 10, 22, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290724647, 'comment_body': 'Why is `plugin` a `Map<String, io.jenkins.pluginhealth.scoring.model.updatecenter.Plugin> plugin`? There is a type `Plugin` so a Map should probably be something else than a `plugin`?\r\n\r\nAlso, why are you using fully qualified names for the `Plugin` type?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290726145, 'comment_body': ""Also `getIssueTrackerData`, `data` is a bit too vague don't you think? What data exactly are you extracting?"", 'comment_created': datetime.datetime(2023, 8, 10, 22, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290728264, 'comment_body': '`RestTemplate` is quite a legacy HTTP client in Spring, nowadays `WebClient` is preferred. \r\n\r\nSince Java 11, there is also a http client that is included in the JDK: `HttpClient`.\r\n\r\nWhy did you choose `RestTemplate` in comparison with the other preferred alternatives?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290730771, 'comment_body': 'Why is that an error that a plugin is not using Jira?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290730875, 'comment_body': 'This could go outside of the `try` I guess?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290731800, 'comment_body': ""`JIRA_HOST.concat(url.getQuery())` this looked a bit weird to me, isn't the `url` object already containing everything? \r\n\r\nCould be interesting to add in a comment examples of the data you retrieve and why you arrange them this way."", 'comment_created': datetime.datetime(2023, 8, 10, 22, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290732122, 'comment_body': 'Also, is it OK to have spaces in ` AND status=open`? Are those spaces going to be properly escaped?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290733056, 'comment_body': 'This will create one `ObjectMapper` per probe, while you could use only one instance that you share, as written in the Javadocs: https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/2.9.8/com/fasterxml/jackson/databind/ObjectMapper.html\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 22, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290733882, 'comment_body': 'You forgot the `{}` at the end of the message?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290734347, 'comment_body': 'Not entirely convinced by the naming here. `issueTrackers` seemed OK to me.', 'comment_created': datetime.datetime(2023, 8, 10, 22, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290734804, 'comment_body': 'Actually with `getIssueTrackerNameAndUrl` as a method name I would expect either to receive a `String` or just a `Tuple` or a custom object, but not a Map, so I guess using `issueTrackers` as a name would make more sense?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290735366, 'comment_body': ""Looks like you had to modify a lot of similar data? Maybe it's worth extracting somewhere so you would only have 1 place to update?"", 'comment_created': datetime.datetime(2023, 8, 10, 22, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290736017, 'comment_body': 'How about providing a backward compatible API by keeping a constructor without the additional parameter that will simply initialize it with an empty list?\r\n\r\nThis way you do not have to update all of those tests?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290736870, 'comment_body': 'if you are mocking the results coming from the API, you could make this explicit by using something like `mockedForTests` as a plugin name, or something in that nature to make it explicit.', 'comment_created': datetime.datetime(2023, 8, 10, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290737258, 'comment_body': 'Why not importing the type and using a fully qualified name here?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1290737578, 'comment_body': 'Why are you concatenating again `""https://github.com/"" + repository + ""/issues""` when you already have the first part in `scmLink`?', 'comment_created': datetime.datetime(2023, 8, 10, 22, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292342981, 'comment_body': 'Thank you for explaining @aneveux.\r\n\r\nIn past cases when I used `abstract` classes. 99% of the code was common. \r\n\r\nIn this case, there was no common code. Maybe I should have asked this in the meeting itself but it did not occur to me then.\r\n\r\nI should have taken inspiration from `doApply` abstract method in `Probe` class. But I did not understand the ""why"" part until I made this blunder. \r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 12, 15, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292375680, 'comment_body': 'I usually use `CTRL + ALT + L` in IntelliJ.', 'comment_created': datetime.datetime(2023, 8, 12, 16, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292496729, 'comment_body': ""That's alright @Jagrutiti =) We learn by making mistakes, and if you never experienced such a case before, it would have been difficult to think about it and ask a question during the meeting.\r\n\r\nIf you understand it better now, then that's great =) "", 'comment_created': datetime.datetime(2023, 8, 12, 21, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292709852, 'comment_body': 'It could be an `warning`? ', 'comment_created': datetime.datetime(2023, 8, 13, 8, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292761193, 'comment_body': 'Yes, they are escaped in the browser. ', 'comment_created': datetime.datetime(2023, 8, 13, 11, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292768799, 'comment_body': ""I am curious, how do you expect to receive a particular datatype as a parameter based on getter and setter method name? You have said similar things in previous reviews as well. \r\n\r\nIn the meeting, Adrien said that the name wasn't descriptive enough. And when he asked me what the method returns, I forgot too. Until I re-read my test cases. That is why I renamed them this way to remember that it returns `type` and `viewUrl` from IssueTrackers. \r\n\r\nThe `ProbeContext` class has no JavaDocs for any of its members. Shall I add one in this case? Then I guess renaming won't be a problem. \r\n"", 'comment_created': datetime.datetime(2023, 8, 13, 11, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292803998, 'comment_body': 'I tried to understand constructors in Java records. When I came across this article: https://blogs.oracle.com/javamagazine/post/records-come-to-java#anchor_8\r\n\r\nIn this article, the author speaks of alternative constructors and says I can return default data something like this.\r\n\r\n```\r\n    public static Plugin of(String name, VersionNumber version, String scm,\r\n                            ZonedDateTime releaseTimestamp, List<String> labels,\r\n                            int popularity, String requiredCore, String defaultBranch) {\r\n        return new Plugin(name, version, scm, releaseTimestamp,\r\n            labels, popularity, requiredCore, defaultBranch, List.of());\r\n    }    \r\n```\r\n   \r\n    \r\n   And in the test case, I should call it this  way:\r\n   \r\n```\r\n when(ctx.getUpdateCenter()).thenReturn(new UpdateCenter(\r\n            Map.of(""foo"", Plugin.of(""foo"", new VersionNumber(""1.0""), ""scm"", ZonedDateTime.now().minusDays(1), Collections.emptyList(), 0, """", ""main"")),\r\n            Map.of(""bar"", new Deprecation(""find-the-reason-here"")),\r\n            Collections.emptyList()\r\n        ));\r\n```\r\n   \r\n  I will still need to remove the `new` keyword and add `.of` to `Plugin.`\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 13, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292806130, 'comment_body': 'For some reason, IntelliJ did not add a qualified import. Maybe because of the common `Plugin` class.\r\n\r\nIn the case of the common `Plugin` class name in UpdateCenter and Model, it did that. That is why I did not think much of it.', 'comment_created': datetime.datetime(2023, 8, 13, 14, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292824869, 'comment_body': 'I googled ""calling api in spring boot"" most of them example of `RestTemplate`. That is why I used this. ', 'comment_created': datetime.datetime(2023, 8, 13, 16, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292828008, 'comment_body': 'Is it okay if I replace this line `.concat(URLEncoder.encode("" AND "", StandardCharsets.UTF_8.toString()).replace(""+"", ""%20"")` with just `%20AND%20`?', 'comment_created': datetime.datetime(2023, 8, 13, 17, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292842965, 'comment_body': 'That is not very surprising cause `RestTemplate` is there for quite some time.\r\n\r\nI would advise to switch to a more up-to-date alternative though, in order to avoid introducing technical debt in new code additions.', 'comment_created': datetime.datetime(2023, 8, 13, 19, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292843104, 'comment_body': 'What I meant is that it should not be considered an issue at all right? Cause a plugin could be using GitHub issues instead of Jira, and that should neither be a warning nor an error?', 'comment_created': datetime.datetime(2023, 8, 13, 19, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292844437, 'comment_body': 'You are right, this sounds like preferences.\r\n\r\nThere are actually bunch of articles talking about good practices linked to naming in Java (or in languages in general). Considering code is much more read than written, it is important to optimize it for reading (code should be understandable easily and maintainable) rather than optimizing its writing.\r\n\r\nIn this particular context, what triggered me is the following: when I read `IssueTrackerNameAndUrl` I expect the method to return ONLY the issue tracker name and its url, but here the type that is returned is a `Map` which could contain more things, and which can actually contain several issue trackers. \r\n\r\nNaming is a very hard part of writing code, and it is quite a subjective thing, so it is normal to have discussions about that. IMHO, there are some global rules you can follow: plurals usually means you are talking about collections, etc.\r\n\r\nFor this particular variable, IMHO we could either go for something like `issueTrackers` but you are right that it might not be descriptive enough, so in that case I would usually go for something like `issueTrackerUrlsByNames` where I describe the content of the Map and how it is indexed.\r\n\r\nJavadocs are also a good way to describe what is in variables, and give extra details, but that does not replace good naming (we should aim for both :stuck_out_tongue:)', 'comment_created': datetime.datetime(2023, 8, 13, 19, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292845038, 'comment_body': 'Sure =)', 'comment_created': datetime.datetime(2023, 8, 13, 19, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1293527710, 'comment_body': 'I will make it an `info`?', 'comment_created': datetime.datetime(2023, 8, 14, 14, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1293636639, 'comment_body': 'I will read about naming conventions. And would be more careful about naming in the future.\r\n\r\nI now understand your point of view better :)\r\n', 'comment_created': datetime.datetime(2023, 8, 14, 15, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1298135194, 'comment_body': ""What's your rationale for using this Apache httpclient instead of the [Java HttpClient](https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html) for example?"", 'comment_created': datetime.datetime(2023, 8, 18, 7, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1298137625, 'comment_body': '```suggestion\r\n            LOGGER.info(""The plugin does not use GitHub issues to track issues."");\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 7, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1298143200, 'comment_body': 'For consistency, it would be better to use a similar message than the one used for the same situation with GitHub issues:\r\n\r\n`The plugin does not use GitHub issues to tracker issues.`\r\n\r\n(talking about Jira of course)', 'comment_created': datetime.datetime(2023, 8, 18, 8, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1298566080, 'comment_body': ""Isn't this too quick? What is the default value?\r\n\r\nIMHO, for any decision like this, it is interesting that you leave a simple comment in the source code explaining why you took that decision, so readers can understand if it is a deliberate choice, and what is the rationale for it.\r\n\r\nGeneral remark: remember you mostly write code for other humans, so you need to tell them your intention."", 'comment_created': datetime.datetime(2023, 8, 18, 15, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1298568113, 'comment_body': 'Looks like a lot of those `Plugin` objects are the same, with similar values. Maybe extract that in a variable that can be reused everywhere?', 'comment_created': datetime.datetime(2023, 8, 18, 15, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1299207499, 'comment_body': 'The [JavaDoc ](https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpRequest.Builder.html#timeout(java.time.Duration))says:\r\n\r\n>  The effect of not setting a timeout is the same as setting an infinite Duration, i.e. block forever.\r\n\r\nI was not really sure which value to pick. Honestly, the APIs I had tested took less than a second to respond. So I figured 5 seconds is apt.\r\n\r\nWhat should I actually write as the comment?', 'comment_created': datetime.datetime(2023, 8, 19, 14, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1299213472, 'comment_body': 'Here  parameters like `pluginName`, `scmLink`, `defaultBranch` are mocked before being passed. \r\n\r\nYou do not mean creating a constructor in Record like I already did it once? ', 'comment_created': datetime.datetime(2023, 8, 19, 15, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1299216908, 'comment_body': ""Apache HTTPClient is an additional dependency. While I can do the same thing using Java HTTPClient. So I shouldn't be using it. "", 'comment_created': datetime.datetime(2023, 8, 19, 16, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1300268424, 'comment_body': '> What should I actually write as the comment?\r\n\r\nThe general rule to follow while writing source code is that someone reading it should not have to guess why you did certain things, but should find the information written explicitely.\r\n\r\nIf you thought that 5 seconds was a good timeout value based on your testing, then write it in a simple comment, so it is now our shared understanding.\r\n\r\nBasically, imagine reading that piece of source code if you did not write it yourself, and try to see if you understand everything from what you read.', 'comment_created': datetime.datetime(2023, 8, 21, 15, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301605534, 'comment_body': '`context.getIssueTrackerUrlsByNames()` cannot be `null` right?\r\n\r\nIf you are not sure, you can add a first check to validate that the plugin has an issue tracker configured? (a simple `if` before trying to `.get(""github"");`)', 'comment_created': datetime.datetime(2023, 8, 22, 12, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301608767, 'comment_body': 'Keep in mind that log messages are meant to be read from the logs (not from the source code), so a good question to ask will be: does your log message provide enough context so it brings a value to whoever reads it?\r\n\r\nHere for example: `The plugin does not use GitHub issues to track issues.`... Well. Which plugin? :grin: \r\n\r\nSimply adding the plugin name in there will make the message more interesting.', 'comment_created': datetime.datetime(2023, 8, 22, 12, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301610331, 'comment_body': 'Same comment here: which plugin?', 'comment_created': datetime.datetime(2023, 8, 22, 12, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301613248, 'comment_body': 'I am not entirely convinced about the message here. IIRC, it is used in the GUI to display the status to users, and I feel it is a bit too technical (returned successfully).\r\n\r\nCould be something like `Found %d issue trackers configured for the plugin.` (cause I believe we usually not repeat the plugin name in the message?)', 'comment_created': datetime.datetime(2023, 8, 22, 13, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301614834, 'comment_body': ""Can this: `.getIssueTrackers()` be `null`?\r\n\r\nIf so, you'll have a NPE line 91."", 'comment_created': datetime.datetime(2023, 8, 22, 13, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301616403, 'comment_body': 'I feel those should go in the `getCountOfOpenIssues` method and not in the class itself. They are not meant to be reused by something else in the class right?', 'comment_created': datetime.datetime(2023, 8, 22, 13, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301616904, 'comment_body': '`context.getIssueTrackerUrlsByNames()` cannot be `null` right?', 'comment_created': datetime.datetime(2023, 8, 22, 13, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301617273, 'comment_body': 'Same remark: which plugin?', 'comment_created': datetime.datetime(2023, 8, 22, 13, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301620583, 'comment_body': 'Which plugin?', 'comment_created': datetime.datetime(2023, 8, 22, 13, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301620944, 'comment_body': 'Which plugin?', 'comment_created': datetime.datetime(2023, 8, 22, 13, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301622310, 'comment_body': ""That's OK like this"", 'comment_created': datetime.datetime(2023, 8, 22, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1301624284, 'comment_body': '```suggestion\r\n        when(ctx.getIssueTrackerUrlsByNames()).thenReturn(Map.of(""github"", scmLink + ""/issues""));\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 13, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1303100970, 'comment_body': 'Technically not a constructor but a builder function.', 'comment_created': datetime.datetime(2023, 8, 23, 14, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1303166425, 'comment_body': '`IssueTrackerDetectionProbe` is the requirement for `GitHubOpenIssuesProbe` and `UpdateCenterPluginPublicationProbe` is the requirement for `IssueTrackerDetectionProbe` that is why a part of my believes that this issue might not occur. \r\n\r\nIt is better to be safe than sorry.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1303279571, 'comment_body': ""Hi @aneveux \r\n\r\nAbout adding the names of the plugin, in the logger message, Adrien told me that I shouldn't be passing a parameter to the method just to add it in the logger message. (I had made the mistake in this probe itself and I am not proud of it)\r\n\r\n`ProbeContext` does not contain the plugin details like names. I would need to pass the `Plugin` parameter here which is required only in the logs. I do not think this is the best approach. \r\n\r\nAfter the logs are printed and when the `ProbeResult` is returned as the final result, I have added the plugin name in both the cases. Failure as well as the success message. \r\n\r\nSo when the user reads the logs and sees the final `ProbeResult` message I am sure it would make sense to them. \r\n\r\nI hope I understood your concern correctly. If I am on the wrong track here do let me know :)"", 'comment_created': datetime.datetime(2023, 8, 23, 16, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1303288243, 'comment_body': 'In this case `IssueTracker` becomes the name of the plugin and also ""issue tracker"" is what the whole exercise of fetching data from the `IssueTrackers`. That is why it sounds a little ambiguous. ', 'comment_created': datetime.datetime(2023, 8, 23, 16, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1304073016, 'comment_body': 'Is there a log message with the plugin name at the beginning of the process?\r\n\r\nSomething like ""Running probes for plugin XXX"" and then you have all the logs of the probes execution for that XXX plugin?\r\n\r\nI do understand the concern of having the Plugin as parameter just for logging, indeed not a good thing to do.\r\n\r\nAnyway, that\'s probably nitpicking then, so let\'s not focus too much on that.', 'comment_created': datetime.datetime(2023, 8, 24, 9, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1304075056, 'comment_body': 'What I meant was to check that:\r\n\r\n`if (context.getIssueTrackerUrlsByNames() == null)`', 'comment_created': datetime.datetime(2023, 8, 24, 9, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1304076007, 'comment_body': 'Same here, I meant `if (context.getIssueTrackerUrlsByNames() == null) {`', 'comment_created': datetime.datetime(2023, 8, 24, 9, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1304439324, 'comment_body': '> Is there a log message with the plugin name at the beginning of the process?\r\n\r\nNot really. In the project I have not seen info log at the beginning of the probe. I am not sure if I should add this.  \r\n', 'comment_created': datetime.datetime(2023, 8, 24, 14, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1306660087, 'comment_body': ""Let's not take care of that in that Pull Request then, could be something to have a look at later on while harmonizing the log messages."", 'comment_created': datetime.datetime(2023, 8, 27, 12, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1316991468, 'comment_body': 'You don\'t need this on records. ""Getters"" are created by default. The name of the method is `issueTrackers()` like the field specified in the record definition. See https://docs.oracle.com/en/java/javase/17/language/records.html\r\n\r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 9, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1316994775, 'comment_body': 'I like the ""better safe than sorry"" principal. üëç ', 'comment_created': datetime.datetime(2023, 9, 6, 9, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1316996480, 'comment_body': '```suggestion\r\n            ? filterIssueTrackersForTypeAndViewUrl(updateCenter.plugins().get(pluginName).issueTrackers())\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 9, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1316997859, 'comment_body': 'I agree here. those fields should be local variables.', 'comment_created': datetime.datetime(2023, 9, 6, 9, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1316998725, 'comment_body': 'Same as before, ""better safe than sorry"".', 'comment_created': datetime.datetime(2023, 9, 6, 9, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317000142, 'comment_body': ""I don't think this was addressed."", 'comment_created': datetime.datetime(2023, 9, 6, 9, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317002393, 'comment_body': ""Because `URL#equals` method is doing a DNS resolution, I'd prefer using `URI` class which provide the same features but with less problems."", 'comment_created': datetime.datetime(2023, 9, 6, 9, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317003658, 'comment_body': 'Why moving methods around? ', 'comment_created': datetime.datetime(2023, 9, 6, 9, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317004276, 'comment_body': 'Same.', 'comment_created': datetime.datetime(2023, 9, 6, 9, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317011431, 'comment_body': 'Same.', 'comment_created': datetime.datetime(2023, 9, 6, 9, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317015188, 'comment_body': ""Why? This is not supposed to work as you didn't add the annocation `@ExtendWith(MockitoExtension.class)` on the test class, so this seems to be something you added to try to make the test work, but I don't see it used anywhere.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 9, 6, 9, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317015341, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 9, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317016997, 'comment_body': 'Same as before.', 'comment_created': datetime.datetime(2023, 9, 6, 9, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317019104, 'comment_body': 'Again.', 'comment_created': datetime.datetime(2023, 9, 6, 9, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317019278, 'comment_body': 'Again.', 'comment_created': datetime.datetime(2023, 9, 6, 9, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317019482, 'comment_body': 'Again.', 'comment_created': datetime.datetime(2023, 9, 6, 9, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317121874, 'comment_body': 'I cannot mock the variables if they are not global in the test case.', 'comment_created': datetime.datetime(2023, 9, 6, 11, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1317127489, 'comment_body': 'I am using it for statements like this one `jiraOpenIssuesProbe.httpClient = mockedHttpClient;`  in `shouldBeAbleToFindNumberOfOpenIssuesInJira`.', 'comment_created': datetime.datetime(2023, 9, 6, 11, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1317129427, 'comment_body': ""You are right the `@InjectMocks` annotation's availability does not make a difference to the tests. "", 'comment_created': datetime.datetime(2023, 9, 6, 11, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1317130184, 'comment_body': 'It is all because of `Ctrl + Alt + L`. I did not do it manually. ', 'comment_created': datetime.datetime(2023, 9, 6, 11, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1317131110, 'comment_body': 'It is automated formatting. That is why I did not change it. ', 'comment_created': datetime.datetime(2023, 9, 6, 11, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1317132917, 'comment_body': 'This requires the `plugin` to be passed as a parameter to `getCountOfOpenIssues` to get `plugin.getName()` that is why \r\n did not  work on this one. ', 'comment_created': datetime.datetime(2023, 9, 6, 11, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1317137453, 'comment_body': 'The `if` condition checks whether the `null` values below this line.', 'comment_created': datetime.datetime(2023, 9, 6, 11, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1317170026, 'comment_body': 'or you could just provide the `name` of the plugin, rather than the entire `plugin`.', 'comment_created': datetime.datetime(2023, 9, 6, 11, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317183183, 'comment_body': ""ok. Let me look into this because this doesn't seem right to create class fields just because of the test."", 'comment_created': datetime.datetime(2023, 9, 6, 12, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1317436202, 'comment_body': ""> or you could just provide the `name` of the plugin, rather than the entire `plugin`.\r\n\r\nI did something similar last time. You said we shouldn't pass a parameter just to display in the logs, But if you are cool with it I  can do that, "", 'comment_created': datetime.datetime(2023, 9, 6, 15, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}]","[{'commit_sha': '2773dcf6c4df2cc8d701e229e26adc6114f88c6e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68aa5056dc68c33ff02204ecea7b498697f646fb', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54a82a31274347141ab12ecb74782ff58a6332b4', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb1001db0f144411e320a24f9747409fd710e55', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8ae5d98f2d4a4859900c297341d43c6dd785e6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4c1605bc05c2f31a38fabd0edc84bc89bffbebc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d9cf5e20eccf0d654cbffa9af04e8437b6f098', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719c57dd96fa718c57351a7b1463047aeb56dd2d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '925afa374b6f0ebea43f13566086283a4069e752', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58b135af0e40a3858bdd80e6a256175bd89660fa', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c71a32a7e099ff6b8ee10665a976c3a376c552ca', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fd8b2deab1b29377489ffb5fa8d0bef73dd430c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f9ede3b72739f1d8b24be793c2506272317d2f5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a549322885ef27700c6139c79111c3882c23dd4', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a144e549708704f7b07ef3cced3061efc69f99d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3fd18bb039d8801bd77389c4ed5b90cc4b46a4d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9604480987df2a356d2dfb15cf6be45412951e5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eda1b13203ee42304d324ede399c88c955092f23', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97aed2859ff749f41f0b064b251a53afa47fd5ff', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '528ab43b662e4600fc0b4f02d95e215424dd2b1a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f22f3839afd97a2daccdfcb2d2f64bfeabf8f99', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13f3a83381292d101d7100bd08bc09b665ab8ce', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bcb49ed85fb57bc9813692387c30b0c165e285a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4989e811f6c028845992115dd858ddb965c372e9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7db7e7a23932ecfef7d4c0ad2e856e0eb887c431', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45ce779999cb9307a435fcd83a418cfb0811935', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '510d340297408a590ace1a787cc8d15cccda86dc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cf74069984195bc5713056a16920f2948fabb90', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9cda9c0f04ed26cc33ca0cf975814a8ebbadeec', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37884d51c46d6cbd1d48ab68b1989f2231754d3c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '898c86cea5dcfdd673bf127d8f7527be0401b177', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdd1a4ee7ec4f79e504adaef8a1020ec4dcfb5f9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1940e676454da6b0e6d9f53a3c23fcf70bbaf06e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '151df0d645659472c0d9fcc9659dbfcd0cbfa0d6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ef4aaaa99ebc3beea3b11bf74530d7253e8898', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f6cb04e7487d63fc5686c66ea571dc7e460dfe9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7214aa0bd91298632cb241527f868424a191cc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e0f12a492c9e0d3e4a2f745a09f75ac4356d4de', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12db24bce5498baa4ee28a2ea1bfbfd25593f10e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '793114bb8d42d45ad432a53b6dac468faa7adbb2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13b17e6a8abbc7a6fca5d36b972817f4ea4b62e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4ef76e2263a9feae4aa6d6a95af552276ef2c0e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e194e9bec6cffbef432b9f39fbe3d0e3d3d608d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9fad0ca0970f5b5b2d53bb59d564be4d204bbca', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '663282c185b004cb83f7b00575c54ece0fa6ef38', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c099e409cd4b1283096dd36aec074c805c307292', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec28408b66d1e0f0ef999eda7ac26249fd55681d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a740d22cb344a93cf62f7b5f10b7d8e3fd9e468', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9244d60b6eb51dcd67d2922ee2cec66f22abf6c1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b722a875e474f652dc6d4cf9e140a777af5bdc80', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22
1374463153,üöß Third party repository detection probe,"### Description

This probe will check:

- Whether third party repositories is being used. If yes, it may list the repositories .
- If no third party repositories are used, it will succeed.

Closes #299 

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Submitter checklist

- [x] If the issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [ ] The changeset is on a specific branch
  - `feature/` for new feature, or improvements
  - `fix/` for bug fixes
  - `docs/` for any documentation changes
- [x] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition
    - If there is no test, include an explanation why in the description
- [ ] Run `mvn verify` locally and all tests are passing successfully
  - It is OK to create a pull request which has failing tests if it is created as a draft, is to fix a bug and the first commit is the test to prove the existence of the bug.
- [ ] There is no new warnings (checkstyle nor spotbugs) on the code
",False,323,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/323,https://github.com/jenkins-infra/plugin-health-scoring/pull/323,open,984,0,17,57,3,80,1,1,[{'name': 'enhancement'}],2023-06-01 16:58:40+00:00,,0.0,,"[{'comment_id': 1214272753, 'comment_body': 'We have no permissions nor authority to list this company here.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 2, 11, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1214273566, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 2, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1214274110, 'comment_body': ""We definitively must not list persons we don't know about.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 2, 11, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1214274908, 'comment_body': 'We can reduce the file size here.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 2, 11, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1214275638, 'comment_body': 'Same as before.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 2, 11, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1214276252, 'comment_body': ""We don't need that.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 2, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215592574, 'comment_body': ""you can remove the version here because you set a `<dependencyManagement/>` in the project parent. see https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\r\n\r\nHowever, I'm not sure this is entirely necessary for this dependency to have it be managed by the parent.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 3, 15, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215593334, 'comment_body': 'unrelated changes. Should be in a different PR or you can set that in your user home folder.', 'comment_created': datetime.datetime(2023, 6, 3, 15, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215593389, 'comment_body': ""if you want to use empty lines to separate constants, it's fine. But it would probably be nicer to split what is `public` and what is `private`. You can choose not to accept this suggestion.\r\n\r\n```suggestion\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(ThirdPartyRepositoryDetectionProbe.class);\r\n\r\n```"", 'comment_created': datetime.datetime(2023, 6, 3, 15, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215595767, 'comment_body': 'Could we have more URL than that @lemeurherve?', 'comment_created': datetime.datetime(2023, 6, 3, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215596990, 'comment_body': 'I am getting `NullPointerException` at line 41\r\n\r\n```\r\njava.lang.NullPointerException: Cannot invoke ""org.apache.maven.model.Model.getRepositories()"" because the return value of ""org.apache.maven.model.io.xpp3.MavenXpp3Reader.read(java.io.InputStream)"" is null\r\n```', 'comment_created': datetime.datetime(2023, 6, 3, 15, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1215599885, 'comment_body': 'This should be repeated for the other invalid `pom.xml` that you created. \r\nYou can see https://github.com/jenkins-infra/plugin-health-scoring/blob/main/core/src/test/java/io/jenkins/pluginhealth/scoring/scores/PluginMaintenanceScoringTest.java about using `@ParameterizedTest`. See https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests', 'comment_created': datetime.datetime(2023, 6, 3, 15, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215600221, 'comment_body': ""You don't want mock the `Model` class. You can to mock the `context.getRepository()` to be pointing at one of the folder that you created in `core/src/test/resources`."", 'comment_created': datetime.datetime(2023, 6, 3, 15, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215600241, 'comment_body': '> unrelated changes. Should be in a different PR or you can set that in your user home folder.\r\n\r\nWould it be fine if I make a new PR for this?', 'comment_created': datetime.datetime(2023, 6, 3, 15, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1215600316, 'comment_body': 'I will make new PR. ', 'comment_created': datetime.datetime(2023, 6, 3, 15, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1215602208, 'comment_body': ""No. You don't get the pom from the scm but from the repository."", 'comment_created': datetime.datetime(2023, 6, 3, 15, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215607603, 'comment_body': ' ```suggestion\r\n!.yarn/versions\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 3, 15, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215625427, 'comment_body': ""no, it's not resolved. Initially, the file had a new line at its end. "", 'comment_created': datetime.datetime(2023, 6, 3, 16, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1215666461, 'comment_body': 'I will update this. ', 'comment_created': datetime.datetime(2023, 6, 3, 17, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1215855113, 'comment_body': 'The probe should require at least a valid result of the `SCMLinkValidationProbe`, no?', 'comment_created': datetime.datetime(2023, 6, 3, 21, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216150650, 'comment_body': 'To check if `plugin.getScm()` is a valid link? If yes, then proceed. Otherwise, return failure?', 'comment_created': datetime.datetime(2023, 6, 4, 4, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1216161881, 'comment_body': 'I went through the code of `ContinuousDeliveryProbe` where `context.getScmRepository();` is invoked. \r\n\r\nThere we are not validating the result of the `SCMLinkValidationProbe`. \r\n\r\nWhy is it required at one place and not the other. ', 'comment_created': datetime.datetime(2023, 6, 4, 4, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1216191169, 'comment_body': 'Please see https://github.com/jenkins-infra/plugin-health-scoring/blob/84c4129b42860c906fa3b1d61990d695fecd915d/core/src/main/java/io/jenkins/pluginhealth/scoring/probes/Probe.java#L116.\r\n\r\nProbes are not validating the results of required probe on their own. ', 'comment_created': datetime.datetime(2023, 6, 4, 4, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216228602, 'comment_body': 'Okay. Got it. ', 'comment_created': datetime.datetime(2023, 6, 4, 5, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1216402631, 'comment_body': 'I have added this check. But failure test cases fail. ', 'comment_created': datetime.datetime(2023, 6, 4, 8, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1216406220, 'comment_body': 'This test case fails at https://github.com/Jagrutiti/plugin-health-scoring/blob/5dfd1ed993514027a7ee41904df2b3d27ef4a8a2/core/src/main/java/io/jenkins/pluginhealth/scoring/probes/Probe.java#L61\r\n\r\nI do not know which value is incorrect here. ', 'comment_created': datetime.datetime(2023, 6, 4, 8, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1216487060, 'comment_body': 'Please, debug the code. Put a breakpoint at the beginning of that linked method and see what is happening', 'comment_created': datetime.datetime(2023, 6, 4, 9, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216636545, 'comment_body': 'I tried to parameterize the success test case. But `shouldPassIfNoRepositoriesDetected` would fail. ', 'comment_created': datetime.datetime(2023, 6, 4, 12, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1216637682, 'comment_body': 'Though this change passed the test case. I am not sure if it is correct.\r\n\r\nBecause I believe `ProbeResult.failure(ThirdPartyRepositoryDetectionProbe.KEY, ""Third party repositories detected in the plugin"")` should stay.', 'comment_created': datetime.datetime(2023, 6, 4, 12, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1216654628, 'comment_body': ""The `Map` has nothing to do here.\r\nThe content of the map should be the same for all the tests so it doesn't need to be a parameter.\r\n\r\nParameters are used for things that should changed from one tests to another. \r\nYou could have a parameterized test method which would test all the `pom.xml` which should fail. In that case, you don't even need to have a parameter with the result you are expecting."", 'comment_created': datetime.datetime(2023, 6, 4, 12, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216665664, 'comment_body': 'this should fail.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 4, 12, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216665871, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 4, 12, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216665982, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 4, 12, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216666153, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 4, 12, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216666535, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 4, 12, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216667054, 'comment_body': ""It's not because I point to `ParameterizedTest` that you have to use it everywhere.\r\nIn the current test resources, there is only one which should pass. Because of that, there is no really a need to parameterized the test.\r\n\r\n```suggestion\r\n    @Test\r\n    void shouldPassIfNoThirdPartyRepositoriesDetected() {\r\n```"", 'comment_created': datetime.datetime(2023, 6, 4, 12, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216671194, 'comment_body': ""No. \r\nWe are testing the probe. Do no mock / change it's behavior. This is what we are validating.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 6, 4, 12, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216671424, 'comment_body': 'Same.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 4, 12, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216671549, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 4, 12, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1216705800, 'comment_body': ""> this should fail\r\n\r\nIf no `repository` tags are detected, those tests should fail? \r\n\r\nif not third-party repositories and no `https://repo.jenkins-ci.org` repositories are detected, shouldn't it pass? "", 'comment_created': datetime.datetime(2023, 6, 4, 13, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1217773504, 'comment_body': 'No, this is the only ~URL~ hostname.', 'comment_created': datetime.datetime(2023, 6, 5, 9, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lemeurherve', 'type': 'User'}, {'comment_id': 1217873325, 'comment_body': 'the repositories are indeed inherit from the parent pom. But in that case, we either need to make sure the parent pom used is the one from the Plugin POM repository (in a recent version), or we need to interpret the pom.xml so that it is resolved (kind of like doing `mvn help:effective-pom` on the cli).', 'comment_created': datetime.datetime(2023, 6, 5, 10, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218211126, 'comment_body': '> we either need to make sure the parent pom used is the one from the Plugin POM repository (in a recent version),\r\n\r\nHow do I determine this?\r\n\r\nDo I have to check the `<groupId>` in `<parent>` if it starts with `io.jenkins` or `org.jenkins`?\r\n\r\nI did execute this command `mvn help:effective-pom` to understand its functionality.  Not sure how it fetches the parent pom here.', 'comment_created': datetime.datetime(2023, 6, 5, 15, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1218289852, 'comment_body': ""I'm looking if the second option is doable programmatically."", 'comment_created': datetime.datetime(2023, 6, 5, 16, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218290774, 'comment_body': 'Please, avoid star imports. Normally we configured your IDE to not do that no?', 'comment_created': datetime.datetime(2023, 6, 5, 16, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218291258, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218291968, 'comment_body': 'no need to have extra lines in that file.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218292457, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218293251, 'comment_body': '```suggestion\r\n    private static Stream<Arguments> successes() {\r\n        return Stream.of(\r\n            arguments(\r\n                Paths.get(""src"", ""test"", ""resources"", ""pom-test-only-correct-path""),\r\n                ""https://github.com/jenkinsci/test-plugin""\r\n            ),\r\n            arguments(\r\n                Paths.get(""src"", ""test"", ""resources"", ""pom-test-no-repository-tag""),\r\n                ""https://github.com/jenkinsci/test-plugin""\r\n            )\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""successes"")\r\n    void shouldPassIfNoThirdPartyRepositoriesDetected(Path resourceDirectory, String scm) {\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218294188, 'comment_body': '```suggestion\r\n\r\n        when(ctx.getScmRepository()).thenReturn(resourceDirectory);\r\n        when(plugin.getDetails()).thenReturn(Map.of(\r\n            SCMLinkValidationProbe.KEY, ProbeResult.success(SCMLinkValidationProbe.KEY, """")\r\n        ));\r\n        when(plugin.getScm()).thenReturn(scm);\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218294532, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218296386, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218297472, 'comment_body': '```suggestion\r\n    private static Stream<Arguments> failures() {\r\n        return Stream.of(\r\n            arguments(\r\n                Paths.get(""src"", ""test"", ""resources"", ""pom-test-both-paths""),\r\n                ""https://github.com/jenkinsci/test-plugin""\r\n            ),\r\n            arguments(\r\n                Paths.get(""src"", ""test"", ""resources"", ""pom-test-only-incorrect-path""),\r\n                ""https://github.com/jenkinsci/test-plugin""\r\n            ),\r\n            arguments(\r\n                Paths.get(""src"", ""test"", ""resources"", ""pom-test-correct-repository-incorrect-pluginRepository""),\r\n                ""https://github.com/jenkinsci/test-plugin/plugin""\r\n            )\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""failures"")\r\n    void shouldFailIfThirdPartRepositoriesDetected(Path resourceDirectory, String scm) {\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218298333, 'comment_body': '```suggestion\r\n\r\n        when(ctx.getScmRepository()).thenReturn(resourceDirectory);\r\n        when(plugin.getDetails()).thenReturn(Map.of(\r\n            SCMLinkValidationProbe.KEY, ProbeResult.success(SCMLinkValidationProbe.KEY, """")\r\n        ));\r\n        when(plugin.getScm()).thenReturn(scm);\r\n\r\n        final ThirdPartyRepositoryDetectionProbe probe = getSpy();\r\n```', 'comment_created': datetime.datetime(2023, 6, 5, 16, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1218871938, 'comment_body': 'Yes. We did. \r\n\r\nI made this commit from another machine. I will configure it too. ', 'comment_created': datetime.datetime(2023, 6, 6, 4, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1219097649, 'comment_body': 'should the probe be executed only when there is a new release? Is the probe supposed to be executed when there are modifications on the source code of the plugin?', 'comment_created': datetime.datetime(2023, 6, 6, 7, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1219188408, 'comment_body': 'When is the community most interested in finding out if a third-party repository has been added? During the release right? \r\n\r\nSome modifications to the source code could be just for testing purposes and may not be released. \r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2023, 6, 6, 8, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1219201598, 'comment_body': ""if you use a third party source during development but not when you do a release, you expose yourself to a problem during the release: what happen if a library is not present in the package manager used during the release? \r\n\r\nI'd say it's important to detect this as soon as possible, so when there are code modifications."", 'comment_created': datetime.datetime(2023, 6, 6, 8, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1219206066, 'comment_body': 'Right.\r\n\r\nDo we need to make modifications in the code to detect this?', 'comment_created': datetime.datetime(2023, 6, 6, 8, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1219209660, 'comment_body': 'yes. Please see the documentation in `Probe` to see what you need to do.\r\nYou can also test those modifications.', 'comment_created': datetime.datetime(2023, 6, 6, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1219567600, 'comment_body': ""as we said in https://github.com/jenkins-infra/plugin-health-scoring/pull/323#discussion_r1217873325, this doesn't look like incorrect."", 'comment_created': datetime.datetime(2023, 6, 6, 12, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1219593397, 'comment_body': ""Tests classes don't need to be public anymore.\r\n\r\n```suggestion\r\nclass ThirdPartyRepositoryDetectionProbeTest extends AbstractProbeTest<ThirdPartyRepositoryDetectionProbe> {\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 12, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1219747816, 'comment_body': 'To do this:\r\n\r\n> we either need to make sure the parent pom used is the one from the Plugin POM repository (in a recent version),\r\n\r\nBy ""Plugin POM repository"" do you mean https://repo.jenkins-ci.org? What does ""in a recent version"" mean here? \r\n', 'comment_created': datetime.datetime(2023, 6, 6, 14, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1219964889, 'comment_body': '""No repositories detected"" message seems more apt than ""No third party repositories detected"" for the case when the pom file contains no `<repository>`.\r\n\r\nFor this I would need to write a new test because the parameterized test won\'t work here? Shall I write a new test case?\r\n\r\nWhat do you think? ', 'comment_created': datetime.datetime(2023, 6, 6, 16, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1219969427, 'comment_body': '> ""No repositories detected"" message seems more apt than ""No third party repositories detected"" for the case when the pom file contains no <repository>.\r\n\r\ngood idea.\r\n\r\n> For this I would need to write a new test because the parameterized test won\'t work here? Shall I write a new test case?\r\n\r\nwhat is the easier: new parameter in the test method or a new test? This is entirely up to you.', 'comment_created': datetime.datetime(2023, 6, 6, 16, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1225326979, 'comment_body': 'I wanted to use this in the beginning but now I am not. \r\n\r\nFor test cases, I do not need to. But I am not sure about real-world scenarios.\r\n\r\nI was unable to read the `pom` from the URL in `MavenXpp3Reader`', 'comment_created': datetime.datetime(2023, 6, 10, 12, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1229262014, 'comment_body': 'the `IOException` should be handled at the probe level. ', 'comment_created': datetime.datetime(2023, 6, 14, 8, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229265353, 'comment_body': 'Please, look at `try-with-resources`, what it is, why and how you can use it.\r\n\r\n```suggestion\r\n        try(InputStream inputStream = new FileInputStream(context.getScmRepository() + ""/pom.xml"");\r\n              Reader reader = new InputStreamReader(inputStream, ""UTF-8"")) {\r\n```', 'comment_created': datetime.datetime(2023, 6, 14, 9, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229265782, 'comment_body': 'Have to choose, space or no space before/after `{/}` but not both.\r\n\r\n```suggestion\r\n        return new String[] { SCMLinkValidationProbe.KEY };\r\n```', 'comment_created': datetime.datetime(2023, 6, 14, 9, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229269944, 'comment_body': ""I don't like this because what it happening if someone puts an url pointing to a fake `pom.xml` which run random code?"", 'comment_created': datetime.datetime(2023, 6, 14, 9, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229271333, 'comment_body': 'Your probe is not even throwing that exception. Why did you made that change?', 'comment_created': datetime.datetime(2023, 6, 14, 9, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229273263, 'comment_body': ""I don't think this is what we want here."", 'comment_created': datetime.datetime(2023, 6, 14, 9, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229274472, 'comment_body': 'is it using the `default` visibility on purpose?\r\n\r\n```suggestion\r\n    private static final String JENKINS_CI_REPO_URL = ""https://repo.jenkins-ci.org"";\r\n```', 'comment_created': datetime.datetime(2023, 6, 14, 9, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229296354, 'comment_body': ""I'm sure you can simplify that by filtering the model repositories before adding them to the set."", 'comment_created': datetime.datetime(2023, 6, 14, 9, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1229863091, 'comment_body': 'After the third try I was able to fix it without throwing the exception. I added this during the first and second try and forgot to remove later. ', 'comment_created': datetime.datetime(2023, 6, 14, 16, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1229872228, 'comment_body': 'You mean what if there is a fake parent path in the child `pom.xml` ? ', 'comment_created': datetime.datetime(2023, 6, 14, 16, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1229873765, 'comment_body': 'How do I validate the path?  What is the correct way to resolve this? I am clueless here. ', 'comment_created': datetime.datetime(2023, 6, 14, 16, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1229876939, 'comment_body': 'One thing we can do is check the extension of the file. Whether it ends with `.xml` or the file name is `pom.xml`. ', 'comment_created': datetime.datetime(2023, 6, 14, 16, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1229894239, 'comment_body': 'On what parameters you want me to filter them? ', 'comment_created': datetime.datetime(2023, 6, 14, 16, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1230909122, 'comment_body': ""I don't think we should rely on the `relativePath` tag of the `parent`. \r\nWe should look if the plugin has a folder configured (`module`) and if so, we should check that the parent pom of the repository has a parent to what we expect, that the module has a parent to the root pom file and that none of them have a third party repository."", 'comment_created': datetime.datetime(2023, 6, 15, 12, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}]","[{'commit_sha': '8d74f5cc2d723c0bcef7d1b47aaf05c0b842da9c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6207680170de289a8e738a91b62481e94e331c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4286ff4a00675ef4e0c473371be46ff8bdff50a3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4126574dade908eeec0cf12a0bb712f48091470', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537d68ac9735b197d318d67a3c0ed7a5fc6106f9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '491d16d497a8dcd91cb3dc2618e85eab05d1f93f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f593a439dc68b66e58cf1e5daa831f52dd2b4a7', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '365db47501db9964a6b4aaf225a78003e0fb8d4d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb27f54c6afcdfd49fe6d7da02d089f5ef1e6ce', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a137980f37fa56bcab03d3d69a12f74ae6e31e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e050c24e38060f1e5052b303dc30bd639da86b44', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd830b63e3f63334e8e9334efa253844d10d54a84', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda43ae1926037f6b868e41f2456c8905c608ad1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c3530ddf5aba91ecb2c94268e5824f6a9aea96', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dfd1ed993514027a7ee41904df2b3d27ef4a8a2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b246d4e3f9fe6582fa056980b3099e9b378821f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00340f82c014d525677c98c964e98ef4bd9c7013', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39e24eafb04c4d0883e0562532ff2ac1fac64b5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008065de25d53945f478e4abbc6dce7622d03c6f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c565cb4df076553152fbb72ed1090c28f4386be2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9b6278c8cf8d6a6c0a1dd595271898a69f160b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd30ec447fd789867eeb5b6297cfb6b7077d76376', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '643f5998232cd343987f1440db09f3501807b14e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cb30486aeb4ec81321b54b02f7513c1d8c98026', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b525747364e17b243d055e69f6dbcdbe7f274a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd812c81a3b743cff2391f2538ac15c724b3a250c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '355d923d691624e0630d3f19e6a800e43ff28405', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d7b31c2ab3d0671c9d17149c537f35877adea71', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3ad71ed7472c6cc36358994097ffe8fa0ec955', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbdfe6f083bab3f103cba7502307d5e53c6dce2f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fb1345484c3be23c4669a7ecc43071d3e5b974', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed123c5ea9f3559fda129ddbfd2cabd0c42c5d87', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e273093dba776719604a6414228738d310769e63', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f7ab30b6a52418e28a99f1d81e942e1ec7ac98d', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba72e742639432b67196f3f2927afddeff4000f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f40701c7af5503f67da2cb26327e9355512c9b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4833c9b6cf34f3b97efa462f2d73c799e346dc45', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c911bb56256e7ee0e51962a0b1d18da1ed040b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '039362ef4861f5c3df5a4c1b70edaac28e878aa8', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f1638e764887a6a17c8e93337b510a536d589d4', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '556035380a6b9f8bbbb001ce9f06f4e0d3d8356e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce97eb06a94157eec101e5ca5ee7d815cbd5c43c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148d4dda3c0fd707b0959aedc5fa658ea1b896d2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbe70d5a0888f0f63157c3a990a42b861c4b995b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '276968cf2bcc14ef4f4c1ec74f2bfcb48f4a09d6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be6114e48446c77dc754cf328b1f3d1e3ed13fe', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9343f56a9e763ae363ea496653ace725edaf07e0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d43283ea31baef6a61d97877d5fd2fd60be0bdf', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d425580aa6a67978bc0e0e34c387def561cff32', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36591373f0d8049299e7f7da795b8f1ef8a80368', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ba0b17072b78e27ed63e5ce2fac4e4c66323a5', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da55c4d9136448518a94843b733a2e089fc002c0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc8ec3be1eee4399969827ea82cf8003f73d446e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd77baf11a2c2437ccb5f3231af8426e17f7fb6e0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b23f07c799b5f0a2eb367d06989a0136350e9b0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c10f3eeb0c4800c04dbad4db86feba9245e2b0', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fa7c2be3cefac1ba9fbfb6934e4efd85c98c371', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22
1436186462,Removed folder path to fix SCMLinkValidationProbe ,"<!-- Comment:
 Please start by adding a link to an issue if the pull request is trying to solve one.
 You can used keyword to do the linking automatically: https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword.
-->

Steps to solve the issue:

1. Remove the `folder` part from Regex expression.
2. Look for `hpi` value in the `<packaging>` tag. 
    - If found, find the value in the `<artifactId>`.
3. If the `<artifactId>` value matches the plugin name
   - Find where the pom lives.
4.  If the pom lives inside the Git repository
    - Store the path to the folder which contains pom file. 
5. Make the folder path available to probe context (that use folders) so that other probes can use the folder and they do not fail.
 
There can be 3 scenarios in the SCM repository:

1. Lonely plugin
2. Plugin code inside module called plugin
3. Bunch of plugins inside modules of git repository


### Description

Closes #340

<!-- Comment:
 Provide a clear description of the content of the pull request.
 This includes documentation, link to issues, scenario of executions.
 For UI change, a screenshot of before and after the change is also welcome.
 Make sure you read the contributing guide.
 Please explain how this pull request content will benefit the project.
-->

### Testing done
Did not added new test cases. Modified the existing one.
<!-- Comment:
  if there is no automatic test, please explain what you did to validate
  the bugfix or the improvement.
-->


```[tasklist]
### Submitter checklist
- [x] If an issue exists, it is well described and linked in the description
- [x] The description of this pull request is detailed and explain why this pull request is needed
- [x] The changeset is on a specific branch. Using `feature/` for new feature, or improvements ; Using `fix/` for bug fixes ; Using `docs/` for any documentation changes.
- [x] If required, the documentation has been updated
- [x] There is automated tests to cover the code change / addition or an explanation why there is no tests in the description.
```
",True,351,https://api.github.com/repos/jenkins-infra/plugin-health-scoring/pulls/351,https://github.com/jenkins-infra/plugin-health-scoring/pull/351,closed,295,59,14,57,1,86,1,1,[{'name': 'bug'}],2023-07-16 07:35:18+00:00,2023-09-06 09:19:43+00:00,4499065.0,"52 days, 1:44:25","[{'comment_id': 1267941439, 'comment_body': ""Because you manage this dependency in the parent pom dependencyManagement section (https://github.com/jenkins-infra/plugin-health-scoring/pull/351/files#diff-9c5fb3d1b7e3b0f54bc5c4182965c4fe1f9023d449017cece3005d3f90e8e4d8R160) you don't need to specify the version here.\r\n\r\nMore over, you are specifying an older version than the parent pom recommendation which is not great.\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 7, 19, 11, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1270632880, 'comment_body': 'How about using https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#find-java.nio.file.Path-int-java.util.function.BiPredicate-java.nio.file.FileVisitOption...-?', 'comment_created': datetime.datetime(2023, 7, 21, 12, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1270634063, 'comment_body': 'This is not returning the folder path, but the `pom.xml` path, which is different from what you were retrieving with the previous version of the code.', 'comment_created': datetime.datetime(2023, 7, 21, 12, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1270646115, 'comment_body': ""I'm not sure we want this code to run on Windows based systems, but I'd recommend not hardcoding path separators and not using String for paths. Rather use the NIO all around and pass paths as `Path` objects, which have methods to resolve path in an OS independent way."", 'comment_created': datetime.datetime(2023, 7, 21, 12, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'PierreBtz', 'type': 'User'}, {'comment_id': 1270646760, 'comment_body': 'Having the pass in the exception message could help debugging an issue.', 'comment_created': datetime.datetime(2023, 7, 21, 12, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'PierreBtz', 'type': 'User'}, {'comment_id': 1270652218, 'comment_body': '`equals`?', 'comment_created': datetime.datetime(2023, 7, 21, 13, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'PierreBtz', 'type': 'User'}, {'comment_id': 1271294785, 'comment_body': 'The folder path is everything after the `repo` that leads to? Pom file?', 'comment_created': datetime.datetime(2023, 7, 22, 13, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1271300171, 'comment_body': 'The reason the `HasUnreleasedProductionChangesProbeTest#shouldFailIfThereIsNotReleasedCommitsInModule` is failing because I am not returning the correct folder path. ', 'comment_created': datetime.datetime(2023, 7, 22, 14, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1271307720, 'comment_body': 'Should I return `null` if the file path is not found? Or what should it be? ', 'comment_created': datetime.datetime(2023, 7, 22, 15, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1272655498, 'comment_body': 'This should be an error case right?\r\n\r\nYou are checking for files at the root of the SCM, and there are none, not even a `pom.xml` file? ', 'comment_created': datetime.datetime(2023, 7, 24, 19, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1272657417, 'comment_body': 'This is not the usage of `Files.find` I had in mind. This function can actually do the recursive discovery of folders, that is what the second argument is for:\r\n\r\n`maxDepth - the maximum number of directory levels to search`\r\n\r\nYou can directly start your function with something like:\r\n\r\n`Files.find(directory, SomeMaxValueYouDefine, (path...` and then act on it.', 'comment_created': datetime.datetime(2023, 7, 24, 19, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1272659517, 'comment_body': 'And you can also directly search for `pom.xml` files, not directories.\r\n\r\nThen you get as a result a list of all found `pom.xml` that you can check with your other function, and return the parent path of whatever matching pom you found.', 'comment_created': datetime.datetime(2023, 7, 24, 19, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1273080596, 'comment_body': 'Here I  first check if the file is a directory, and then pass it here. So if it a directory then it should list files that it contains.\r\n\r\nI only look for pom files in the directory and not exactly at the root of the SCM.', 'comment_created': datetime.datetime(2023, 7, 25, 6, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1273232219, 'comment_body': 'Updated the code', 'comment_created': datetime.datetime(2023, 7, 25, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1273455574, 'comment_body': 'In order to ease writing tests, you can extract this to a dedicated function called something like `boolean pomFileMatchesPlugin(Path pomFile, String pluginName)` that will do the `pom.xml` parsing logic and tell you if the `pom.xml` file you provided indeed matches the plugin you are searching for.\r\n\r\nThen you can simply use it with `paths.filter(pom -> pomFileMatchesPlugin(pom, pluginName))` which should contain a single entry.\r\n\r\nFrom there, you can retrieve the directory you are searching for.', 'comment_created': datetime.datetime(2023, 7, 25, 12, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1273456719, 'comment_body': 'With a `maxDepth` of `1`, you will just search the root directory, so this is not doing what you want it to do.\r\n\r\nDid you write proper tests to check what you wanted to do? Are they passing?', 'comment_created': datetime.datetime(2023, 7, 25, 12, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1273854494, 'comment_body': 'I have created the temp directory. But  `searchPomFiles` method  throws\r\n`java.nio.file.NoSuchFileException: jenkinsci\\test-repo` .\r\n\r\nI do not understand why. ', 'comment_created': datetime.datetime(2023, 7, 25, 17, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1274533789, 'comment_body': 'just for readability\r\n\r\n```suggestion\r\n        try (Stream<Path> paths = Files.find(directory, 2, (path, $) -> path.getFileName().toString().equals(""pom.xml""))) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 8, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1274536340, 'comment_body': 'when you do, `object.method()` you can get a `NullPointerException`, even more when you don\'t control de `object`. Even if in the current case it should be fine, you can protect yourself from this situation by writting \r\n\r\n```suggestion\r\n            if (""hpi"".equals(model.getPackaging()) && pluginName.equals(model.getArtifactId()) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 8, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1274540975, 'comment_body': 'this is incorrect. From what I see, the `scmFolderPath` should be `test-nested-dir-2`\r\n\r\n```suggestion\r\n        assertThat(ctx.getScmFolderPath()).isEqualTo(""test-nested-dir-2"");\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 8, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1274543482, 'comment_body': ""you are initializing an object with a call to a method that you mock just after the initializing. \r\nThis doesn't seem right. \r\n\r\nIf you need to get a `GHRepository` instance, then mock it. \r\n\r\n```suggestion\r\n        GHRepository repository = mock(GHRepository.class);\r\n        when(github.getRepository(repositoryName)).thenReturn(repository);\r\n```\r\n\r\nBut first, why do you need that instance?"", 'comment_created': datetime.datetime(2023, 7, 26, 8, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1274555034, 'comment_body': 'Answered on Gitter but here: `Path#resolve` method is not creating anything. If you need the file or folder to be created, you need to use `Files#createX`.', 'comment_created': datetime.datetime(2023, 7, 26, 8, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1274561609, 'comment_body': 'To mock `            context.getGitHub().getRepository(matcher.group(""repo""));` in `fromSCMLink` method\r\n', 'comment_created': datetime.datetime(2023, 7, 26, 8, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1274837105, 'comment_body': 'How do I collect the Paths? It is is of type `Path` and not String. So the `Collectors.toList` and `Collectors.joining` do not work.\r\n\r\nShould I make some function to collect and then convert to string? ', 'comment_created': datetime.datetime(2023, 7, 26, 11, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1274843698, 'comment_body': 'The `directory` in ` Files.find(directory...` never has a file name. I need to pass it to `pomFileMatchesPlugin` , I resolve it so that it finds the pom file.\r\n\r\nNext I want to return `directory.getFileName()` which will be the `folderPath` that I want to return. \r\n\r\nHow do I add it collect and return it?', 'comment_created': datetime.datetime(2023, 7, 26, 11, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1276008038, 'comment_body': 'Not the correct value. Because the repository is `src/test/resources/jenkinsci/test-repo/test-nested-dir-1`, the plugin folder path should be `test-nested-dir-2`. If the test fails because of this, it means you need to fix your code, not the other way around.\r\n\r\n```suggestion\r\n        assertThat(ctx.getScmFolderPath()).isEqualTo(""test-nested-dir-2"");\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 9, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1276009311, 'comment_body': 'You could use `findFirst` method on the Stream.', 'comment_created': datetime.datetime(2023, 7, 27, 9, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1276010399, 'comment_body': ""I don't think it should return the scm link here as it seems to be used when the plugin folder was not found. "", 'comment_created': datetime.datetime(2023, 7, 27, 9, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1278873506, 'comment_body': 'Why do you need this one?', 'comment_created': datetime.datetime(2023, 7, 31, 7, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1279174661, 'comment_body': 'Do you mean this line?\r\n\r\n>         ProbeContext ctx = new ProbeContext(plugin.getName(), new UpdateCenter(Map.of(), Map.of(), List.of()));\r\n\r\nI initliaized this to use `spy`.\r\n\r\nDo you suggest I do it the following way:\r\n\r\n`ProbeContext contextSpy = spy(new ProbeContext(plugin.getName(), new UpdateCenter(Map.of(), Map.of(), List.of())));`?\r\n', 'comment_created': datetime.datetime(2023, 7, 31, 11, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279220048, 'comment_body': ""The naming `searchPomFiles` sounds to me like you are searching all of the pom files in the repository, when you are actually specifically searching for the plugin's `pom.xml`.\r\n\r\nBtw, `searchPomFiles`, plural, returns an optional Path, singular. Meaning that the method is not named after what it is really doing.\r\n\r\nIMHO, it could be named something like `findPluginPom` or something in that nature."", 'comment_created': datetime.datetime(2023, 7, 31, 12, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279221915, 'comment_body': 'Also, `file` is not a very descriptive name for the variable. It is something like `pathInRepository` or `pluginPath` or `pluginPathInRepository` or something like this? WDYT?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279231174, 'comment_body': 'For better readability, you can actually use the methods offered by the `Optional` class instead of relying on a ternary operator.\r\n\r\nYou can probably write something like: `.map(path -> path.getParent().getFileName().toString()).orElse("""")`\r\n\r\n`map` applies a function to the value of the `Optional` if it exists. `orElse` provides a default value to use if the `Optional` is empty.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279231986, 'comment_body': 'It is actually searching for the pom file matching the plugin, not just all pom files.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279232427, 'comment_body': 'The description of the `directory` parameter is `in the scm`? What does it mean exactly?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279232915, 'comment_body': 'Return the SCM itself? Is this what the code is doing?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279233689, 'comment_body': 'Why do you need to initialize an `Optional` to empty?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279234844, 'comment_body': 'Why are you limiting yourself to a depth of `2`?\r\n\r\nWhat happens if the `pom.xml` for your plugin is located at the third level?\r\n\r\nLike `core/plugins/somecategory/my-plugin/pom.xml`?', 'comment_created': datetime.datetime(2023, 7, 31, 12, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279242195, 'comment_body': ""You can directly \r\n\r\n`return directories.filter(pom -> pomFileMatchesPlugin(pom, pluginName)).findFirst();`\r\n\r\ninstead of having that assigned to variables. If you read the docs of `findFirst`, it tells you that it'll return an empty `Optional` if nothing is found, there is no need to repeat that yourself."", 'comment_created': datetime.datetime(2023, 7, 31, 12, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279246905, 'comment_body': 'Am I properly understanding that in your code, it is valid for a repository to NOT contain a `pom.xml` for a plugin?\r\n\r\nAFAICT, you SHOULD always find a `pom.xml` matching your plugin in the repository. Either it is at the root of the repository or not, but it should exist.\r\n\r\nIf it is not found, it means that the plugin you are searching for does not exist in your repository, and I feel like this Probe is not dealing with that situation.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279249673, 'comment_body': 'you could simplify the reading here yes.', 'comment_created': datetime.datetime(2023, 7, 31, 12, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1279485564, 'comment_body': ""Thank you for pointing these things out. It was a local variable in a method so I didn't put much thought into naming it.\r\n"", 'comment_created': datetime.datetime(2023, 7, 31, 15, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279530949, 'comment_body': 'Fixed it to `directory path in the scm`.', 'comment_created': datetime.datetime(2023, 7, 31, 16, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279531775, 'comment_body': ""It was doing this previously. Didn't update the JavaDocs."", 'comment_created': datetime.datetime(2023, 7, 31, 16, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279543566, 'comment_body': 'Because I cannot return the variable after `try` statement if the variable is not initialized. \r\n\r\nThe other option is that I initialize it to `null`.', 'comment_created': datetime.datetime(2023, 7, 31, 16, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279547350, 'comment_body': 'You are right about this. \r\n\r\nI discussed with Adrien in our last weekly meeting. And he said `2` is the ideal depth. He also added that we can go till 5 but it would be a little crazy number.\r\n\r\nI was thinking maybe we should find the max depth of a directory and then set it accordingly. ', 'comment_created': datetime.datetime(2023, 7, 31, 16, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279573441, 'comment_body': 'I read the next comment. Which was related to this one and fixed it. \r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 31, 16, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279577541, 'comment_body': 'I had this doubt of what to return after `try` statement. \r\n\r\nFor now I am returning `null`. ', 'comment_created': datetime.datetime(2023, 7, 31, 16, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279611001, 'comment_body': ""Do not return `null`, return `Optional.empty()`. You just don't need variables being assigned here."", 'comment_created': datetime.datetime(2023, 7, 31, 16, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279615063, 'comment_body': ""I think whatever the value is, it should be clear why we chose that value.\r\n\r\nI'd go for either\r\n\r\n- Use Integer.MAX_VALUE so we scan everything\r\n- Use a fixed value that we consider the maximum supported/recommended value and we document it as such"", 'comment_created': datetime.datetime(2023, 7, 31, 16, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1279658654, 'comment_body': 'I went for Integer.MAX_VALUE', 'comment_created': datetime.datetime(2023, 7, 31, 17, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1279661737, 'comment_body': 'Now when you pointed that out it made perfect sense.\r\n\r\nI have addressed your concern in the code and fixed the test cases accordingly. \r\n\r\nLet me know if these are the changes you had in mind.', 'comment_created': datetime.datetime(2023, 7, 31, 17, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1280251792, 'comment_body': ""> AFAICT, you SHOULD always find a pom.xml matching your plugin in the repository. Either it is at the root of the repository or not, but it should exist.\r\n\r\nwe still have 80 plugins using Gradle as build tool.\r\n\r\nThe problem with gradle is that it's really complicated to parse the build description. "", 'comment_created': datetime.datetime(2023, 8, 1, 8, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1280254536, 'comment_body': ""With something more than 3-4, we will navigating all the `src/main/java/io/jenkins/plugins/artifactid/` folder when we won't see a lot of plugins that are located deeper than `<root>/plugins/<pom.xml>`. "", 'comment_created': datetime.datetime(2023, 8, 1, 8, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1280268052, 'comment_body': 'Oooooh that is right! I totally forgot about that, thanks for the reminder @alecharp!\r\n\r\nHow do you consider those plugins for the other probes requiring Maven stuff btw?', 'comment_created': datetime.datetime(2023, 8, 1, 8, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1280276047, 'comment_body': 'The rationale looks good to me, I just think it needs to be explicit and clear in the source code.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1285538357, 'comment_body': ""For the moment, with difficulties. It's a problem we know (we probably should advertise that a bit more)."", 'comment_created': datetime.datetime(2023, 8, 7, 8, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286766289, 'comment_body': ""This is just a log, it won't be displayed to users. That's why it's not a problem to not have a period at the end of the sentence. \r\nBut don't revert your change."", 'comment_created': datetime.datetime(2023, 8, 8, 8, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286769685, 'comment_body': '```suggestion\r\n        try (Stream<Path> paths = Files.find(directory, 3, (path, $) ->\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 8, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286771869, 'comment_body': 'Please use the `"""".equals(object.method())` format here.', 'comment_created': datetime.datetime(2023, 8, 8, 8, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286773586, 'comment_body': ""If we get an exception, it probably means that we couldn't validate the folder, which could lead to more issues later on. \r\nPlease return `Optional.empty()` here and make sure to handle that case in the method."", 'comment_created': datetime.datetime(2023, 8, 8, 8, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286774835, 'comment_body': ""The first parameter is a file or a directory? It seems to be a file, but it's name suggest the opposite. Please fix that."", 'comment_created': datetime.datetime(2023, 8, 8, 8, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1286787961, 'comment_body': ""Why do you need the third parameter? Just to return it if something wrong is happening? Please don't, handle this in the calling method."", 'comment_created': datetime.datetime(2023, 8, 8, 8, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alecharp', 'type': 'User'}, {'comment_id': 1292475904, 'comment_body': 'Instead of testing if the logger is enabled before logging your message, you can provide the logger with a lambda that will only be computed if the logger is enabled for that level, that allows reducing a bit the boilerplate from the source code.\r\n\r\nThat would look like something like:\r\n\r\n`LOGGER.debug(() -> String.format(""%s is not respecting the SCM URL Template."", scm));`', 'comment_created': datetime.datetime(2023, 8, 12, 20, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292481284, 'comment_body': 'This method might deserve a little bit of Javadocs.', 'comment_created': datetime.datetime(2023, 8, 12, 20, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292485314, 'comment_body': 'Indentation does not look correct here, are you not using an automated code formatter?', 'comment_created': datetime.datetime(2023, 8, 12, 20, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292486993, 'comment_body': 'Are you sure that the log deserves to be an error? \r\n\r\nUsually, we keep errors for things which are making the application unstable, but I believe this is not the case here, so a simple warning could be enough?\r\n\r\nAlso, the log message has some copy paste issue / typo.\r\n\r\nAnd also you can use the lambda way of writing log messages.', 'comment_created': datetime.datetime(2023, 8, 12, 20, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292487108, 'comment_body': 'For future developers, it would be nice to write a simple comment here to say why we chose `3` as the depth. A comment allows to explain that it is a deliberate choice and not some weird magic stuff.', 'comment_created': datetime.datetime(2023, 8, 12, 20, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292492326, 'comment_body': 'Note that there is a kinda weird behavior in that method: if the plugin `pom.xml` is found, your method will return the path to the `pom.xml` file, including that `/pom.xml`. But if the `pom.xml` is not found, the method will return the path of the parent directory of the provided one.\r\n\r\nThat is weird to have such a different case.\r\n\r\nConsidering the method is called `findPluginPom`, if the `pom.xml` is not found, your method should return `Optional.empty` because the plugin pom was not found, and not a default value that suits what you would like to use afterwards.\r\n\r\nFinding the path of the parent directory, either of the found `pom.xml` or the directory you were searching in, should be done elsewhere.', 'comment_created': datetime.datetime(2023, 8, 12, 20, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1292829423, 'comment_body': 'In the previous reviews, you said that a `pom` file should always exist in the Maven plugin. Which is true. \r\n\r\nI assumed a pom file exist in the default parent directory. \r\n\r\n> Finding the path of the parent directory, either of the found pom.xml or the directory you were searching in, should be done elsewhere.\r\n\r\nDo you mean when the `Optional.empty` is returned I should write the logic to look for its parent in another method? \r\n', 'comment_created': datetime.datetime(2023, 8, 13, 17, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1292842770, 'comment_body': ""What I mean is that a function should return a consistent result.\r\n\r\nHere, you either return a path that ends with `/pom.xml` if it is found, or you return a path that does not end by `/pom.xml` if the file is not found.\r\n\r\nWhat I am saying is that it should be clear and consistent:\r\n\r\n- Either you return the path ending with `/pom.xml` if you find it, and `empty` if you don't find the file (which you are right I said should be an error)\r\n- Or you return the path that is supposed to contain the `pom.xml` inferring what it should be as a default case if the file is not found.\r\n\r\nA mix of approaches does not make the code very clear.\r\n\r\nI would personally advise to return the `/pom.xml` path if the file is found, and throw an error if the file is not found. The only case in which this will happen (according to Adrien) is for Gradle plugins, but I assume it's OK that the probe is broken in that case."", 'comment_created': datetime.datetime(2023, 8, 13, 19, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1293755749, 'comment_body': 'I understand. You want me the method to do one thing at a time for better readability. \r\n\r\nI have followed your advise. Thanks.', 'comment_created': datetime.datetime(2023, 8, 14, 17, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1293780173, 'comment_body': 'I will work on this. I am getting the syntax incorrect for `debug`. Because it does not take these parameters. ', 'comment_created': datetime.datetime(2023, 8, 14, 17, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1294415458, 'comment_body': 'Hey @aneveux \r\n\r\nI could not find an example with Lambda in the documentation. I came across this link: https://www.slf4j.org/faq.html#logging_performance\r\n\r\nThis speaks of the benefits and overheads of the current and the previous syntax. \r\n\r\nIn the[ documentation](https://www.slf4j.org/apidocs/org/slf4j/Logger.html#debug(java.lang.String%2C%20java.lang.Object...)) where different signatures are explained, there is no method with for lambda syntax. That was the error I was getting yesterday.', 'comment_created': datetime.datetime(2023, 8, 15, 10, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1296984447, 'comment_body': ""Ooooh my bad... I'm too used of relying on Java logging, not SLF4J.\r\n\r\nIn SLF4J that approach exists, but it uses their fluent API, so using something like `LOGGER.atDebug` with proper arguments. In there, you can provide a Supplier, and the `atDebug` (or whatever `atSomething` method) will get called only if the LOGGER is enabled for that specific level."", 'comment_created': datetime.datetime(2023, 8, 17, 9, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1296998900, 'comment_body': ""I feel there is something you misunderstood about the file searching:\r\n\r\n`Files.find(directory, 3, (path, $)` means that it will recursively search for the `pom.xml` file recursively, from the root directory (`directory`) up to 3 nested levels.\r\n\r\nMeaning that if your plugin's `pom.xml` is located at the root of the repository, it will be found by `findPluginPom` directly.\r\n\r\nThere is no need for `findPluginPomInRootDirectory` as it won't catch anything else.\r\n\r\nYour new implementation of `findPluginPom` is looking good to me. It is searching for the pom path, and if it is not found, it will return an empty optional, which is what we want.\r\n\r\nNow for retrieving `folderPath`, what you want is:\r\n\r\n*  If a `pom.xml` was found, the directory is its parent (cause the path ends with `/pom.xml` so we want the folder containing it)\r\n* If no `pom.xml` was found, it is an error.\r\n\r\nSo, a simple:\r\n\r\n```\r\nOptional<Path> folderPath = pluginPathInRepository.map(path -> path.getParent());\r\n```\r\n\r\nIf `folderPath` is empty, it means no `pom.xml` was found, it is an error (it will fail for Gradle plugins, but that's OK).\r\n\r\nif `folderPath` is not empty, it will contain the path to the directory containing the `pom.xml`, which is what we want. We can use that in the `context` and return the proper result."", 'comment_created': datetime.datetime(2023, 8, 17, 10, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1299189395, 'comment_body': 'One of the test cases was incorrect. And to fix that I messed up with the code. ', 'comment_created': datetime.datetime(2023, 8, 19, 13, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1299190000, 'comment_body': 'I changed the return type to `Optional<Path>` I hope it is okay. Adrien said in the meeting he wants it to be `String`. Would this make a big difference? \r\n\r\nAlso, it aligns with the method name like `getScmFolderPath` returns a `Path` which is one of the things you always tell me to focus on: naming methods and conventions. ', 'comment_created': datetime.datetime(2023, 8, 19, 13, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1302158603, 'comment_body': 'I am not entirely convinced we can really store the folder path as a `Path`. Did you make sure that with this implementation the `Path` object does contain only the folder path and not some root element as well?', 'comment_created': datetime.datetime(2023, 8, 22, 20, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302161390, 'comment_body': ""Yeah at first (without playing with it a bit to check edge cases), I would be tempted to say it's better to keep the object as a `String`. \r\n\r\nWe really do just want to get the folders that are there, and a `Path` object can contain more.\r\n\r\nThe fact that the name of the field is `ScmFolderPath` is because we indeed return the folder path, it should not have something to do with the Java type `Path`. Introducing the object type in the variable name is not that great of a practice, even though it was done for years."", 'comment_created': datetime.datetime(2023, 8, 22, 20, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302164638, 'comment_body': ""That line is weird, cause a `get` method, often called a `getter`, is expected to return something, while here I guess it is just used in order to clone the repository right?\r\n\r\nI don't expect you to change the code of the context object from there, that would be another refactoring, but a one line comment saying that this line clones the repository allows to understand why it is there."", 'comment_created': datetime.datetime(2023, 8, 22, 20, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302168341, 'comment_body': ""Here I believe it would be better to have the ScmFolderPath being a `Optional<String>`.\r\n\r\nConsidering `folderPath` is already an `Optional`, you can simply go for something like:\r\n\r\n`context.setScmFolderPath(folderPath.map( whatever function gives you the value you expected in there ));`\r\n\r\nIf the `Optional` was empty, the map function won't be running, and you'll store an empty again. Otherwise, the Optional will contain a `String` with the value you wanted."", 'comment_created': datetime.datetime(2023, 8, 22, 20, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1302169187, 'comment_body': 'Could deserve some Javadocs.', 'comment_created': datetime.datetime(2023, 8, 22, 20, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1304587147, 'comment_body': 'I cannot use this syntax `context.setScmFolderPath(folderPath.map(Path::getFileName));` because it returns `Optional<Path>` \r\n\r\nTo fix this I use `context.setScmFolderPath(folderPath.map(path -> path.getFileName().toString()));` \r\n\r\nI tried to convert it but it would return only String and not `Optional<String>`. \r\n\r\nShould I convert it to plain `String`? \r\n\r\nAccording to JavaDocs:\r\n\r\n> Optional is primarily intended for use as a method return type where there is a clear need to represent ""no result,"" and where using null is likely to cause errors\r\n\r\nThis is a valid case to use `Optional` though. But I want to use the former syntax and not the latter :(\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 16, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}, {'comment_id': 1304625853, 'comment_body': 'Looks good the way you wrote it in [6f90c9b](https://github.com/jenkins-infra/plugin-health-scoring/pull/351/commits/6f90c9b255cf7f26faafec3dae12d253e17f4eed)', 'comment_created': datetime.datetime(2023, 8, 24, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aneveux', 'type': 'User'}, {'comment_id': 1304634687, 'comment_body': 'I take it that the current syntax is fine. ', 'comment_created': datetime.datetime(2023, 8, 24, 17, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Jagrutiti', 'type': 'User'}]","[{'commit_sha': 'acb012db4b2fd9c06fae37dd2e2441b526618a08', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64fc6227794152ca9a91b7dfda6a20b8f4288f6c', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb9584e7693162519505a1d0ee657d63f97b007', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '627e0be001b65a8cff9838f1e6f23614a3a209f4', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8595c19a1d1d81b9cd54ab69d8274b9140c94837', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeed3bc1a5140a4fd4c0a8d72ccd1253072e7cb6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e0a20081fd4a5801b0f6de0871a50f974422fc', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a007b4cbfd02f1ca10ab88948bb9bc34fd553ca', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f0401c255f5042eb6f3a13e4355847512167634', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fadb8b05babbe238d47ba685de3c4b2ff6290f21', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab200938506d0a67c8db1294418c4eff22962938', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2404710fe90bc73ab6c7d6622f92967a31629b25', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d5d73f5776a6a33b3d7b62072b98784073da0f1', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7d3f0563d5b58f20f682ed7d3ca4dae6fa1c4a2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfec0c9b8483039ec3bf7ada21d3dfa086ed3342', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0605d85175a7b2cabf31edb3c28fae2e24b84924', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e07e99fa1f9dbb0dd66d7a0ba4ae658689e4d16a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228a54b52d04cefde753e6a6255a01e8f29ef015', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c540b654dde0bb6822370eceb7edfa51b260a22b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d4ad353849d487e942217d79e0b90b63a01dea', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a8877080f08547b9ae336bb62f24d938539c288', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '429cf5f3318acfdd4380016b02bbddd446afc2c2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2e31d530e7af5288469aa77f9a6d27d62c76a9', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6469a65f7b1201eb4a28438471b1a3dcf6d3474a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab4cc0458cf76f86195c6879d09c67ed01effb91', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bbd2c63c43b33a010f7f5d3d44920af6e016216', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3692fbf0c007745c3a1fa2f4e90032bbdedced70', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22b5ef73f1ef0787857cddae716c9786db1e538e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f7fdeeb234bc8e962b013d3fc9b981407272e15', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56697fed598d54d1384db61dfb256c5bcb64edae', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0a77a5d5c80a07d391837633c1bed72ed676bf', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df6ec6b03b12d01a2dc55b0d87e8a580610f86b3', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c119a0006f7564cdbeed7ab6510931f80747952', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e0c974cdd181b2310678bef3413b71767aa75b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad92b4a929b07b916965a64f04b35fce1c471e6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52be4f53e979bfa82f6f3741700552a321b4f720', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a36784877612b86593fdab9c7775daee11651b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5cf8c8620078dd6a44000ad5d34c7dc8de26895', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5285f5b6bf75bb1f29d670da1e7dafe0be3c90', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78ba9ee8224d60cdece683e850a6d190896329c2', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b646044f73665d46f3537371afaef24fd7d9c32e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7fd1d3a9435fc9ab51bcdb5d69812abebd4ad9f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '375d1c73d253176ae009e3266a6986dfb38c1209', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '715c0bc6058e41b3312a20b11153b320b701033f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33f9048973fad81f1936146ff03f3725a7d5f29b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa62a674ee03c97114c421e475aeb4ae5888a607', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f520bbfe6223320bd075169cfb6f72e8b57b305', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd444fa58b36271b20ea094fa31c9dad74533e635', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '025f82df30068c2959d982e901f4e27c75eb2e77', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02442780c84df88b5e5913fb2997bb09db7d0fe8', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ec518d37188ab0bb205ba9f81cf6489b54a84e', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2c8cdfb4be2179953d2bfd525d4d0c373aa3d6', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde09d455f21df2bfa6108da36555110d5e97e3a', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3020bb22b6429228f360bca29b7365c45f6cbfcb', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a71bdfa7b636a2a31e8f39bc3ec088576ef158b', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f90c9b255cf7f26faafec3dae12d253e17f4eed', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94377e3505f11daac96655927fff211af412c00f', 'committer_username': 'Jagrutiti', 'committer_name': 'Jagruti Tiwari', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 19, 14, 39, 38, tzinfo=datetime.timezone.utc)}]",Jagruti Tiwari,28809492,,User,,59,,0,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
501264128,plugin-health-scoring,jenkins-infra/plugin-health-scoring,Java,48,23,6,14,477,33,6,11,"[{'id': 1490896712, 'number': 359, 'closed': datetime.datetime(2023, 9, 8, 17, 53, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 27, 8, 30, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1070561.0, 'time_delta': '12 days, 9:22:41', 'additions': 246, 'deletions': 1, 'state': 'closed'}, {'id': 1481818243, 'number': 358, 'closed': datetime.datetime(2023, 9, 6, 10, 34, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 20, 15, 16, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1451882.0, 'time_delta': '16 days, 19:18:02', 'additions': 316, 'deletions': 0, 'state': 'closed'}, {'id': 1445659147, 'number': 353, 'closed': None, 'created': datetime.datetime(2023, 7, 23, 16, 38, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1074, 'deletions': 26, 'state': 'open'}, {'id': 1436186462, 'number': 351, 'closed': datetime.datetime(2023, 9, 6, 9, 19, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 16, 7, 35, 18, tzinfo=datetime.timezone.utc), 'time_taken': 4499065.0, 'time_delta': '52 days, 1:44:25', 'additions': 295, 'deletions': 59, 'state': 'closed'}, {'id': 1427847445, 'number': 350, 'closed': datetime.datetime(2023, 7, 19, 10, 15, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 16, 37, 38, tzinfo=datetime.timezone.utc), 'time_taken': 754645.0, 'time_delta': '8 days, 17:37:25', 'additions': 276, 'deletions': 44, 'state': 'closed'}, {'id': 1397129884, 'number': 342, 'closed': datetime.datetime(2023, 7, 17, 14, 48, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 12, 47, 36, tzinfo=datetime.timezone.utc), 'time_taken': 2512857.0, 'time_delta': '29 days, 2:00:57', 'additions': 366, 'deletions': 64, 'state': 'closed'}, {'id': 1377101031, 'number': 325, 'closed': datetime.datetime(2023, 6, 5, 8, 14, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 16, 25, 13, tzinfo=datetime.timezone.utc), 'time_taken': 143351.0, 'time_delta': '1 day, 15:49:11', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1377068051, 'number': 324, 'closed': datetime.datetime(2023, 6, 3, 15, 41, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 15, 28, 37, tzinfo=datetime.timezone.utc), 'time_taken': 748.0, 'time_delta': '0:12:28', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1374463153, 'number': 323, 'closed': None, 'created': datetime.datetime(2023, 6, 1, 16, 58, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 984, 'deletions': 0, 'state': 'open'}, {'id': 1318678875, 'number': 298, 'closed': datetime.datetime(2023, 5, 31, 10, 44, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 18, 16, 49, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3693333.0, 'time_delta': '42 days, 17:55:33', 'additions': 809, 'deletions': 0, 'state': 'closed'}, {'id': 1308387824, 'number': 284, 'closed': datetime.datetime(2023, 4, 17, 9, 52, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 11, 4, 48, 13, tzinfo=datetime.timezone.utc), 'time_taken': 536639.0, 'time_delta': '6 days, 5:03:59', 'additions': 170, 'deletions': 0, 'state': 'closed'}, {'id': 1241951928, 'number': 215, 'closed': datetime.datetime(2023, 2, 15, 16, 9, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 15, 11, 39, 57, tzinfo=datetime.timezone.utc), 'time_taken': 16197.0, 'time_delta': '4:29:57', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1232174137, 'number': 205, 'closed': datetime.datetime(2023, 2, 14, 5, 49, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 7, 15, 33, 6, tzinfo=datetime.timezone.utc), 'time_taken': 569758.0, 'time_delta': '6 days, 14:15:58', 'additions': 319, 'deletions': 0, 'state': 'closed'}, {'id': 1220608191, 'number': 200, 'closed': datetime.datetime(2023, 1, 30, 13, 19, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 29, 12, 22, 10, tzinfo=datetime.timezone.utc), 'time_taken': 89821.0, 'time_delta': '1 day, 0:57:01', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 1220536487, 'number': 199, 'closed': datetime.datetime(2023, 2, 3, 10, 11, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 29, 8, 8, 55, tzinfo=datetime.timezone.utc), 'time_taken': 439346.0, 'time_delta': '5 days, 2:02:26', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
