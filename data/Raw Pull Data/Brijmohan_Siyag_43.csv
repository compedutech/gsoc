pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1390460309,Chunk upload support using TusD service.,"This PR will add chunk file upload support in Zulip server and webapp.

Related Discussions -
- https://chat.zulip.org/#narrow/stream/6-frontend/topic/File.20upload.20in.20Chunks
- https://chat.zulip.org/#narrow/stream/3-backend/topic/Chunk.20file.20upload

## First Commit - 

### dependency: Add tusd as dependency for supporting chunk file upload.

The official v1.11.0 release of tusd dosn't support Ubuntu20.04 and Debian11, because the binaries are compiled using Ubuntu22.0. That's why we did our own fork release which compiles binaries using Ubuntu20.04 and works on all supported operating systems by Zulip.

## Second Commit - 

### run-dev: Start tusd server in developemnt environment.

S3_REGION is required if S3 is used for file upload because it is required in tusd.

Left out work - Make S3_REGION required in setting. 

## Third Commit - 

### models: Add tus_file_id field to the Attachment model.

We are going to use tusd to support the chunk upload. As of now, the latest stable version of tusd v1.11.0 doesn't support sending custom responses but it do send tus_file_id, so we will use that tus_file_id to get the upload path of the file, implementing a new endpoint.

## Fourth Commit - 

### upload: Add an endpoint to get the file path using tus_file_id.

This commit implements an endpoint that will be used to retrieve the path using the 'tus_file_id' of files uploaded through the 'tusd' service.

## Fifth Commit - 

### tusd: Add tusd hook handler endpoint.

Currently, it handles two hook types: 'pre-create' (to verify that the user is authenticated and the file size is within the limit) and 'pre-finish' (which moves the file to the proper location and creates an attachment row). For moving the file in S3, we are making a copy of the file with a new key and then deleting the old key, but after migrating to tusd v2, we will pass the 'path_id' in thepre-create hook, eliminating the need to move the file.""

## Sixth Commit - 

### upload: Use @uppy/tus at client side to upload a file.

This commit replaces the previoud XHRUpload plugin with Tus to utilize new chunk upload feature. Currently chunk size is 25MB, but later we can take this from server.

Tusd server at backend doesn't support sending custom path in the response so we are utilizing an endpoint which accepts tus_file_id in url param and returns the path of file. Later we can send the path in response itself and remove the extra endpoint.",False,26004,https://api.github.com/repos/zulip/zulip/pulls/26004,https://github.com/zulip/zulip/pull/26004,open,842,66,25,6,8,78,4,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2023-06-13 11:58:30+00:00,,0.0,,"[{'comment_id': 1228015699, 'comment_body': ""Currently TusD doesn't support sending custom data in blocking hooks, So we will be having only file_id from TusD here. The URL calculation syncs with server. I have [talked](https://github.com/tus/tusd/issues/388#issuecomment-1588994095) with TusD maintainers, and they are hoping that TusD v2 (which will support sending custom data) will roll out roughly in 2 months. So after that we can do this in clean way, sending URL in the header from pre-finish hook. "", 'comment_created': datetime.datetime(2023, 6, 13, 12, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1228628793, 'comment_body': ""Can you write some tests for this code path? I think it'd be pretty helpful for verifying the logic/behavior. \r\n\r\nI guess I'm not entirely sure how to do that -- do we eventually need to change all the existing file upload tests to use this code path? For this stage of prototyping, probably just changing a basic test class in each one might be good enough."", 'comment_created': datetime.datetime(2023, 6, 13, 19, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1245774068, 'comment_body': 'Maybe we can move this to `scripts.lib.zulip_tools`.', 'comment_created': datetime.datetime(2023, 6, 28, 21, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1245776694, 'comment_body': ""`X-Csrftoken` , `User-Agent` are of no use, yet to discuss which headers to pass. TusD don't allow to pass `HOST` and passes own one. \r\n\r\n`Authorization` is for API auth."", 'comment_created': datetime.datetime(2023, 6, 28, 21, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1245779660, 'comment_body': 'Using `run` here but we may want to direct logs to some tusd logs file. Should we write all tusd logs to a specific file?', 'comment_created': datetime.datetime(2023, 6, 28, 21, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1245783556, 'comment_body': ""We are creating attachment in pre-finish hook, let's assume user is uploading 1GB file and failed to upload at last patch request. The storage isn't in DB so that isn't counting here.\r\n\r\nHere is the another edge case for here, assume remaining upload quota is 1GB, and 2 users start 1GB file upload at same time, than it will allow both of them. \r\nMaybe we can call this function in `pre-finish` hook also."", 'comment_created': datetime.datetime(2023, 6, 28, 21, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1245787130, 'comment_body': 'Using 25MB chunk size, later we can get this from realm setting.', 'comment_created': datetime.datetime(2023, 6, 28, 21, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1245788210, 'comment_body': 'RetryDelays indicates time after which Tus will retry to upload if any request fails in between.', 'comment_created': datetime.datetime(2023, 6, 28, 21, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1246721145, 'comment_body': ""I think we want to exec, here.  We're not expecting to ever return from this call, and there's no utility to leaving this (relatively heavy-weight, because we loaded all of Django) process around.\r\n\r\nIn production, supervisor will handle writing out logfiles to disk, and rotating them."", 'comment_created': datetime.datetime(2023, 6, 29, 14, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246726375, 'comment_body': 'Is it used by anything else?', 'comment_created': datetime.datetime(2023, 6, 29, 14, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246731832, 'comment_body': ""This assumes the `create_attachment` change which you only include in subsequent commits, so this test can't possibly pass in this commit."", 'comment_created': datetime.datetime(2023, 6, 29, 14, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246746170, 'comment_body': 'This makes me uncomfortable because it\'s an abstraction violation -- our function is named something that works on any file inside the bucket, but internally we assume that it\'s only being called with an old name which is `tusd/file_id` and produce errors that act on that assumption.\r\n\r\nWe should _either_ make this error generic (`f""Path {old_key} not found""`), or rename the function and arguments to things referencing `tusd_path_id`.  But as discussed below, ""move this file"" seems like a very reasonable abstract method to have on `ZulipUploadBackend` which subclasses have to implement.\r\n\r\nI\'m also not sure if the old file not existing is the only reason we could get a ClientError -- that exception seems very generic?  See below for more commentary about the API of this method.', 'comment_created': datetime.datetime(2023, 6, 29, 15, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246746532, 'comment_body': 'Your copy/paste is showing. :)', 'comment_created': datetime.datetime(2023, 6, 29, 15, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246749059, 'comment_body': 'The local file backend uses `format(random.randint(0, 255), ""x""),` because directories with very large numbers of files in them can lead to performance problems, but there\'s no reason to use that if it\'s an S3 backend.  Why are we not just using `from zerver.lib.upload import upload_backend; import_backend.generate_message_upload_path(...)`?  Is there a reason we want to keep `tusd`s `file_id` in the path?', 'comment_created': datetime.datetime(2023, 6, 29, 15, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246753285, 'comment_body': ""Should these be methods on the `zerver.lib.upload` classes?  Making a new `S3UploadBackend()` when we have `zerver.lib.upload.upload_backend`.  And if we're running different code based on that class that object is ... it should be a method on the class. :)"", 'comment_created': datetime.datetime(2023, 6, 29, 15, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246757880, 'comment_body': '0-byte files can exist.  Does tusd not support them?  What are we guarding against with this assert?', 'comment_created': datetime.datetime(2023, 6, 29, 15, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246764021, 'comment_body': ""For the former, there needs to be some cleanup process to remove those files -- does tusd handle that, or is that our responsibility?  If the latter, we do already have something which does this already -- `manage.py delete_old_onclaimed_attachments --clean-up-storage`.  Though it doesn't currently run via cron, and I bet we will also need to adjust it to have a larger window of files to preserve, so we don't accidentally prune tusd chunks while an upload is still happening.\r\n\r\nYou can already hit the latter race with normal files (though I agree it's more likely with the larger filesizes supported by chunked uploads) and I think that's within the realm of acceptable."", 'comment_created': datetime.datetime(2023, 6, 29, 15, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246766151, 'comment_body': 'We should verify and assert (ideally in the pre-create hook, so we catch it early) that this type is the type that we have configured.  We should also assert it in here for safety -- since the Django server could have restarted into a new configuration while the chunked upload was running.', 'comment_created': datetime.datetime(2023, 6, 29, 15, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246786948, 'comment_body': ""I don't think this API, or returning a bool, makes sense -- failing to move the file should not be something that is easy to ignore (i.e. by ignoring the return value of the function).  It's an exceptional case, which the caller should be forced to handle.  We're also _losing information_ about how the failure happened, by reducing it to a bool.\r\n\r\nWe should remove the try/catch inside `move_s3_file`, and make this into a try/catch which re-raises as JsonableError.  Note the comment above about file-not-found not being the only possible client error, however.  I also think in this case we should also be logging something in the error log, since this means that tusd said they put a file in the storage, but we didn't find it?"", 'comment_created': datetime.datetime(2023, 6, 29, 15, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246817318, 'comment_body': ""This pattern is one trhat we commonly use for development-only tools.  But we also need to install tusd on production systems -- you'll need to add a commit which does that.  You'll need to change `puppet/zulip/manifests/app_frontend_base.pp` (though I'd encourage adding a `puppet/zulip/manifests/tusd.pp` and just including that) which uses `sha256_tarball_to` and installs a supervisor config file to start up the service.  You'll also need to set up nginx to proxy the relevant request paths to tusd -- see [their docs on that](https://github.com/tus/tusd/blob/main/docs/faq.md#can-i-run-tusd-behind-a-reverse-proxy)."", 'comment_created': datetime.datetime(2023, 6, 29, 15, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246819022, 'comment_body': ""This field will only be non-null for TUS uploads (which we're not removing support for!).  To prevent confusion with `path_id`, it should be named `tus_file_id` or somesuch."", 'comment_created': datetime.datetime(2023, 6, 29, 15, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246823962, 'comment_body': ""All of this needs to be updated to call it `tus_file_id` (or whatever you decided in the previous commit).  But it also needs to clarify that this is _only_ used if someone is using the TUS upload codepath, and the _only_ time that the client will see a `tus_file_id` is when they finish the TUS protocol upload.\r\n\r\nWhich really reveals this as the wart that it is, and that being able to return our own data there by using v2 is going to be very helpful.\r\n\r\nSince it's not used until the last commit in this series, I'd also move this commit to right before that."", 'comment_created': datetime.datetime(2023, 6, 29, 15, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246826961, 'comment_body': 'As noted above, not ""mainly"" -- ""only"".\r\n\r\nAs a general note, parenthesized comment (like this one) do not start with a capital, and do no end with a period.', 'comment_created': datetime.datetime(2023, 6, 29, 15, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246829004, 'comment_body': ""This function is very generically named -- it should be named something to do with `tus`, since that's the only thing it's relevant for."", 'comment_created': datetime.datetime(2023, 6, 29, 15, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246835611, 'comment_body': 'We should be using `127.0.0.1` and not `localhost` -- the latter can have weird IPv6 issues.  This probably means adjusting the config a couple commits back to have `http://127.0.0.1:{port}` and not `http://localhost:{port}`.\r\n\r\nWe can also check if `user_matches_subdomain` on the contents of the `Host` header which TUS forwards in the body.', 'comment_created': datetime.datetime(2023, 6, 29, 15, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246837161, 'comment_body': 'Except you have tests, below, which POST to that endpoint.  Why does that not cause the endpoint to get marked as tested?', 'comment_created': datetime.datetime(2023, 6, 29, 15, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246847599, 'comment_body': 'What happens in our impolementation if the client does [defer the size](https://tus.io/protocols/resumable-upload#upload-defer-length)?  How can we make clients which do that not fail their uploads?', 'comment_created': datetime.datetime(2023, 6, 29, 16, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246858754, 'comment_body': ""This isn't great, for two reasons -- first, POST requests which have a body as well as query parameters are mildly unusual.  Luckily, our `REQ` accessor handles it, by letting POST values override any query parameters.\r\n\r\nBut more importantly, query parameters are logged in request logs and the like, and are accessible to any intermediate proxies between the client and server.  This is _mostly_ OK in this context, because this request only over is over http to localhost, and so should only ever be able to end up in localhost's logs, which if you have access to you probably have access to the secrets on the server ... but it's still not good practice.\r\n\r\nDoes TUS provide any other ways to sign its hook requests?"", 'comment_created': datetime.datetime(2023, 6, 29, 16, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246871339, 'comment_body': 'In your commit message you say ""there is no optimal method"" but this is pretty much the canonical form.  Internally, they have implemented their ""copy"" as something which is effectively O(1) time, regardless of filesize, so both of these operations should be fast.', 'comment_created': datetime.datetime(2023, 6, 29, 16, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246872848, 'comment_body': 'It seems redundant to make the upload larger than the limit, and then test with the limit set to 0 -- you only need to do one of those things.  The former makes more sense to me as a test.', 'comment_created': datetime.datetime(2023, 6, 29, 16, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246873482, 'comment_body': ""I'm not sure it's helpful to lie here, when we know the size is 100 bytes."", 'comment_created': datetime.datetime(2023, 6, 29, 16, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1246879312, 'comment_body': 'You should also test what happens if the copy fails.', 'comment_created': datetime.datetime(2023, 6, 29, 16, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1247509054, 'comment_body': 'No', 'comment_created': datetime.datetime(2023, 6, 30, 7, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247516742, 'comment_body': ""https://github.com/tus/tusd/issues/435 is where they are discussing about expiration extension. It might not roll out in v2 so we have to do our own implementation. We can run a cron job which will remove the files created let's say 1 day. There will be very low chances that someone will try to upload the file which failed a day before."", 'comment_created': datetime.datetime(2023, 6, 30, 7, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247518546, 'comment_body': 'Yes, okay I will add a extra commit for tests after the `file_id` add commit. ', 'comment_created': datetime.datetime(2023, 6, 30, 7, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247522975, 'comment_body': ""Later if we remove `file_id` field from Attachment, than we will have only file's parent folder with that ID so we can identify using `file_id`. If we don't need this than I will use already present `generate_message_upload_path` method."", 'comment_created': datetime.datetime(2023, 6, 30, 7, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247524503, 'comment_body': 'Ooh yes, right.', 'comment_created': datetime.datetime(2023, 6, 30, 7, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247527437, 'comment_body': ""tusd allows creating 0-byte files. I didn't know that can exist, will remove this. "", 'comment_created': datetime.datetime(2023, 6, 30, 7, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247553269, 'comment_body': ""I tried passing `--hooks-http=http://127.0.0.1:{django_port}/tusd/hooks`, but tusd passes localhost in SERVER_NAME always. I will look into other settings to see if it's possible. "", 'comment_created': datetime.datetime(2023, 6, 30, 7, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247608331, 'comment_body': ""Yes, I tried to send secret in POST body, but they don't provide any way to do so. I will open a issue regarding this in tusd."", 'comment_created': datetime.datetime(2023, 6, 30, 8, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247610353, 'comment_body': ""My bad, Ig by optimal I meant direct method to do so, and I didn't know that copy takes O(1) time. I will update the commit message."", 'comment_created': datetime.datetime(2023, 6, 30, 8, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247959872, 'comment_body': ""Hm -- I though I recalled copies were O(1) within a bucket, but I actually can't find a citation for that.  But it doesn't do any data transfer through the client, at least, so it should be many GB/sec regardless of the network connection between the Zulip server and S3 -- it's all within S3's network."", 'comment_created': datetime.datetime(2023, 6, 30, 14, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1247963064, 'comment_body': ""That canonical way to do this is via HMAC, which means the secret doesn't actually go into the request at all.  See [Stripe](https://stripe.com/docs/webhooks/signatures) and [GitHub](https://docs.github.com/en/webhooks-and-events/webhooks/securing-your-webhooks) for prior art, though those are both looking at it from the point of view of the _consumer_ of the webhook (i.e. Zulip in this case) not the _caller_ (i.e. `tusd`)"", 'comment_created': datetime.datetime(2023, 6, 30, 14, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1247965683, 'comment_body': ""If we remove `file_id` from Attachment, it will be because we are using tusd v2 -- in which case we can control where the file is placed as well as the return code to the client, so tusd's internal `file_id`  will be completely irrelevant to us.  The filepaths we write to live forever, even after we upgrade, so why bund ourselves to putting `file_id` in them?"", 'comment_created': datetime.datetime(2023, 6, 30, 14, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1250575296, 'comment_body': 'There is no handler for this, I will take care of this and give a update here. I will assert that file size is not deferred.', 'comment_created': datetime.datetime(2023, 7, 3, 9, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1250579172, 'comment_body': 'Thanks for suggestion. This is the best we can do for now, I will implement a new decorator or update existing one.', 'comment_created': datetime.datetime(2023, 7, 3, 9, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275363678, 'comment_body': 'Moved this line from here to view itself, logging the error and sending the `Upload failed.` response. ', 'comment_created': datetime.datetime(2023, 7, 26, 18, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275365818, 'comment_body': 'Now we are using the `generate_message_upload_path` method to generate the path.', 'comment_created': datetime.datetime(2023, 7, 26, 18, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275366526, 'comment_body': 'Added `move_file` method to `ZulipUploadBackend`.', 'comment_created': datetime.datetime(2023, 7, 26, 18, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275371277, 'comment_body': ""tusd doesn't pass the `Storage` value in pre-create hook. Also why we will need this in pre-create hook, pre-create is for fresh starts so there will be no running uploads calling this. I have asserted this in the pre-finish hook but this also doesn't do what we want. "", 'comment_created': datetime.datetime(2023, 7, 26, 18, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275371795, 'comment_body': 'updated.', 'comment_created': datetime.datetime(2023, 7, 26, 18, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275374018, 'comment_body': 'I have updated the language of the docs, but moved this commit earlier, to get tests passed. If you want to move it before the last commit than we have to add one more commit after this for tests of hooks. Let me know. ', 'comment_created': datetime.datetime(2023, 7, 26, 19, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275374107, 'comment_body': 'updated.', 'comment_created': datetime.datetime(2023, 7, 26, 19, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275374239, 'comment_body': 'updated.', 'comment_created': datetime.datetime(2023, 7, 26, 19, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275374873, 'comment_body': 'I will open an issue for this in tusd.', 'comment_created': datetime.datetime(2023, 7, 26, 19, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275375822, 'comment_body': 'I was confused, my bad. Removed this. Thanks.', 'comment_created': datetime.datetime(2023, 7, 26, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275376701, 'comment_body': 'Asserted `SizeIsDeferred` to be false in pre-create hook.', 'comment_created': datetime.datetime(2023, 7, 26, 19, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275377920, 'comment_body': ""There is no message to encrypt so I encrypted the SECRET using SECRET as key. This shouldn't be a problem, what are your thoughts ?"", 'comment_created': datetime.datetime(2023, 7, 26, 19, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275378414, 'comment_body': 'Updated the commit message. ', 'comment_created': datetime.datetime(2023, 7, 26, 19, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275378630, 'comment_body': 'updated. ', 'comment_created': datetime.datetime(2023, 7, 26, 19, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275378810, 'comment_body': 'updated. ', 'comment_created': datetime.datetime(2023, 7, 26, 19, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1275380307, 'comment_body': 'Added two tests for local and s3, the error message in test is when there is no file or key present, but there might be other errors. ', 'comment_created': datetime.datetime(2023, 7, 26, 19, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1289342431, 'comment_body': ""This will also need to move to `scripts/setup`; `tools/` isn't included in production environments. "", 'comment_created': datetime.datetime(2023, 8, 9, 23, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289343462, 'comment_body': 'Please add a block comment here documenting concisely but with key details included the semantics of this field.\r\n\r\n(How was the `max_length` picked, BTW?)', 'comment_created': datetime.datetime(2023, 8, 9, 23, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289344247, 'comment_body': ""Can you explain why this API endpoint is required? I had imagined that clients wouldn't need to know about TUSD in order to download files, only to upload them in chunks, so it's not obvious to me what this is for.\r\n\r\nOh, is the idea that a client uploads a file using TUSD but that process doesn't return the `path_id` that it needs to insert a reference to the uploaded file into the compose box?\r\n\r\nProbably we should document the answer in a docstring for this function, and also in the API documentation for the endpoint's description (just a brief explanation for how a correct client should use that endpoint).\r\n\r\nEDIT: I see this now. I think probably this feedback can be resolved by adding a comment/docstring for this function linking to that `tusd` upstream issue and providing the necessary context."", 'comment_created': datetime.datetime(2023, 8, 9, 23, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289362144, 'comment_body': ""Can you explain the design around adding this `hmac` mechanism here, rather than using the `SHARED_SECRET` mechanism again? \r\n\r\nIf the `tusd` server only supports that as a mechanism, I think it might makes sense to generate a new secret to be shared between `tusd` and `django`, rather than reusing the Tornado one -- and having each secret only work for the endpoint(s) where it's needed.\r\n\r\nThat sort of isolation of secrets would be a lot safer for thinking about the risks of one process or the other being compromised.\r\n\r\nEDIT: I see this is https://github.com/zulip/zulip/pull/26004#discussion_r1246858754, posted feedback there."", 'comment_created': datetime.datetime(2023, 8, 9, 23, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289364512, 'comment_body': ""What's the reasoning for why we're using `override_api_url_scheme` for these endpoints?"", 'comment_created': datetime.datetime(2023, 8, 9, 23, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289365764, 'comment_body': ""Yeah I think we don't need a new cron job -- likely just a new function called from `delete_old_unclaimed_attachments`, with tests, for doing garbage-collection of those older than some setting, say `settings.TUSD_MAX_UPLOAD_TIME`, which we can default to 1 day (but should surely be a setting defined in `default_settings.py`)"", 'comment_created': datetime.datetime(2023, 8, 9, 23, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289366000, 'comment_body': 'Can you expand this comment to clarify in what circumstances it will be which?', 'comment_created': datetime.datetime(2023, 8, 9, 23, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289366889, 'comment_body': ""So I guess this is the point where we could return the `path_id` to the client, if the client-side code had the plumbing available to do something reasonable with the information. (I've not gotten to reading the client code and how easy it might be to process properties of the `pre_finish` hook HTTP response).\r\n\r\n(I think this comment doesn't require a reply, since I see the issue is `tusd` upstream not supporting a token back to the client for us)."", 'comment_created': datetime.datetime(2023, 8, 9, 23, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289378066, 'comment_body': 'Can you add a comment linking to the documentation for `retryDelays` and any notes on how you picked those values?', 'comment_created': datetime.datetime(2023, 8, 10, 0, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289379921, 'comment_body': 'Hmm, removing this CSRF block makes me wonder how we plan for the `tusd` server to authenticate the user.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289381413, 'comment_body': 'This handler should probably treat things as though the request failed, right?', 'comment_created': datetime.datetime(2023, 8, 10, 0, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289387553, 'comment_body': ""Cool, I posted on that issue asking if they have an update, since it'd be pretty exciting to be able to do this the clean way instead of having this API quirk and database migration."", 'comment_created': datetime.datetime(2023, 8, 10, 0, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289387790, 'comment_body': 'I think given that, this is probably a fine home for it, or maybe `zerver/lib/tusd` if we want the function to be more readily unit tested.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289390190, 'comment_body': ""I think it might make sense to try extracting an `hmac` based auth mechanism for inter-process communication as a new prep PR -- it's the kind of thing that's security-sensitive and would be nice to have in its own relatively simple PR. (The auth mechanism can be only called by unit tests in that PR).\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 10, 0, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1289392658, 'comment_body': ""I think the answer here is that this is a file ID that is only used for allowing Zulip to look up the `path_id` for an attachment that was uploaded using `TUS` to return to the client. I don't love this being here, but I suppose it's not hard to delete a nullable field with a default of null from a table once it's not required, so I can live with this if we can't wait for tusv2."", 'comment_created': datetime.datetime(2023, 8, 10, 0, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1290924212, 'comment_body': 'Okay, Makes sense. @timabbott do you agree with the approach, using SHARED_SECRET as message and key both?', 'comment_created': datetime.datetime(2023, 8, 11, 5, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}]","[{'commit_sha': 'f83792748f3d60131a41a92817a553c007530337', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f52c74a7d47059b2957b5cb5cf07cb609b784f', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb8304426380e49c526e0b6675b7a873c7a598d', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed43a99de4b1b102c8c0582f05eec87faeba9228', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbab7aaf35f2d81e32efde6c64c812f432735f2', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b753f06cdc7bb56635b6fb7d011fb55ee9540bd9', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}]",Brijmohan Siyag,71015892,brijsiyag@gmail.com,User,,41,,64,52
1364649402,Uploads: Show modal to delete detached attachments after message edit.,"Fixes: #25525


[CZO Discussion](https://chat.zulip.org/#narrow/stream/9-issues/topic/delete.20attachments.20from.20mesage.20history)

<!-- Describe your pull request here.-->

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
<img width=""548"" alt=""Screenshot 2023-05-25 at 4 52 11 PM"" src=""https://github.com/zulip/zulip/assets/71015892/1b52a888-6be0-4d5a-9201-003fc88c6fce"">
<img width=""551"" alt=""Screenshot 2023-05-25 at 4 51 40 PM"" src=""https://github.com/zulip/zulip/assets/71015892/954465d4-cf8a-4a8b-baf8-578fe00b25db"">

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [ ] Each commit is a coherent idea.
- [ ] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,25764,https://api.github.com/repos/zulip/zulip/pulls/25764,https://github.com/zulip/zulip/pull/25764,closed,191,28,13,2,10,13,7,0,"[{'name': 'area: uploads'}, {'name': 'area: message-editing'}, {'name': 'priority: high'}, {'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'buddy review'}, {'name': 'completion candidate'}]",2023-05-25 12:20:12+00:00,2024-07-10 23:07:18+00:00,35635626.0,"412 days, 10:47:06","[{'comment_id': 1205439640, 'comment_body': 'Not rejecting because Promise.all will stop executing other requests if a request fails in between.', 'comment_created': datetime.datetime(2023, 5, 25, 12, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1295266633, 'comment_body': ""Let's call this function `suggest_delete_detached_attachments`?\r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 16, 0, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304899136, 'comment_body': 'This needs `rel=""noopener noreferrer""` -- using `target=_blank` without that is a security bug.\r\n\r\nAlso, why are using `{{{` in the template here? Using it is often an XSS bug.', 'comment_created': datetime.datetime(2023, 8, 24, 21, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304899304, 'comment_body': ""I don't think this line needs to be intended inside the loop."", 'comment_created': datetime.datetime(2023, 8, 24, 21, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304901074, 'comment_body': 'Can you talk about why you need this `async_request` mechanism -- is the idea to avoid closing the modal until these have all completed? I guess that makes sense given this UI, probably?\r\n\r\nI kinda wonder whether it\'d be better UI to have each have its own ""Delete"" button, so you can delete some but not all if you so choose, and a ""delete all"" option.\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 21, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304902817, 'comment_body': 'This text feels wrong -- ""Returns details on all uploaded files whose only references were removed when editing this message. Users should be presented with this list of messages and asked if they want to delete the uploaded files, which would otherwise remain visible only in message edit history.""', 'comment_created': datetime.datetime(2023, 8, 24, 21, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304903278, 'comment_body': '@alya this copy may need an if/else clause for whether message edit history is enabled in the organization, or a help link or something.', 'comment_created': datetime.datetime(2023, 8, 24, 21, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304955853, 'comment_body': ""OK I confirmed with @alya that this UI is fine so let's stick with it."", 'comment_created': datetime.datetime(2023, 8, 24, 23, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304957649, 'comment_body': ""`The following uploaded files are now only accessible via this message's <a>edit history</a>. Would you like to delete them?`, with the link being a link to the /help/ article for message edit history."", 'comment_created': datetime.datetime(2023, 8, 24, 23, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1304959001, 'comment_body': 'So I have a concern about this approach -- I believe that in some cases the current user will not be the owner of the upload, and not have permission to remove it.\r\n\r\nI think this logic will need to extend the filter in this query. Please also write backend tests that verify the basic logic for this feature as well as this specific corner case (where another user uploads a file, sends a message linking to it, this user sends a second message linking to it, then the first user deletes their message and the second edits theirs to no longer link to it -- this popup should not occur in that case).', 'comment_created': datetime.datetime(2023, 8, 24, 23, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1305064739, 'comment_body': 'And what about `Manage uploaded files` link? Should we show that only on error?', 'comment_created': datetime.datetime(2023, 8, 25, 2, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1329275825, 'comment_body': ""> `The following uploaded files are now only accessible via this message's <a>edit history</a>. Would you like to delete them?`, with the link being a link to the /help/ article for message edit history.\r\n\r\nMm, yeah, I like that direction. Maybe something like this?\r\n\r\n- If edit history enabled: `The following uploaded files are now only accessible via this message's <a>edit history</a>. Would you like to delete them?`\r\n- If edit history disabled: `The following uploaded files are now only accessible via this message's <a>edit history</a>, which is currently disabled in this organization. Would you like to delete them?`\r\n\r\nI'm hoping to hint that the files would become accessible if edit history were to be enabled in the future."", 'comment_created': datetime.datetime(2023, 9, 18, 21, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alya', 'type': 'User'}, {'comment_id': 1329276363, 'comment_body': ""> And what about Manage uploaded files link? Should we show that only on error?\r\n\r\nI think it's fine to always show this."", 'comment_created': datetime.datetime(2023, 9, 18, 21, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alya', 'type': 'User'}]","[{'commit_sha': 'a0264073280f98af2c9c48a860559e3b79f5ab21', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34be8d2c758fa1a82509bd41a89b8b2988fadf62', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}]",Brijmohan Siyag,71015892,brijsiyag@gmail.com,User,,41,,64,52
1395508474,upload: Support drag and dropping files anywhere on message viewport.,"Rebases #15735 

Fixes: #14579.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26041,https://api.github.com/repos/zulip/zulip/pulls/26041,https://github.com/zulip/zulip/pull/26041,closed,251,2,5,1,5,6,6,0,"[{'name': 'area: compose (misc)'}, {'name': 'priority: high'}, {'name': 'size: XL'}, {'name': 'UX'}, {'name': 'integration review'}, {'name': 'buddy review'}]",2023-06-16 11:09:13+00:00,2023-08-17 00:06:46+00:00,5317053.0,"61 days, 12:57:33","[{'comment_id': 1274347264, 'comment_body': ""I think this logic is in the wrong place -- this function gets called more than once, one for each edit input. I think you need to add an `upload.initialize` method called from `ui_init.js` that can do this part of the setup, which is global logic we want to do exactly once. \r\n\r\nI think the same is true for the new block below; I think it isn't a function of the specific `$drag_drop_container`."", 'comment_created': datetime.datetime(2023, 7, 26, 3, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1274347893, 'comment_body': 'I theorize that this block isn\'t necessary, and should instead by implemented via the `drag_drop_container.on(""drop"", (event) => {` block just below having an `e.stopPropagation` -- that should ensure that dragging into compose/edit windows don\'t call this function without any special logic here.', 'comment_created': datetime.datetime(2023, 7, 26, 3, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1274349223, 'comment_body': 'I don\'t think this outer if/else is coherent; see the above about how we don\'t want to do this initialization more than once. I think it should be a simple if/else if/else block with 3 possibilities: (1) `compose_state.composing()` => compose, (2) `$last_drag_drop_edit_container.length > 0` => that edit element, (3) else open compose with a reply state... maybe with a 4th if/else for what happens if you try to drag something onto say ""Recent conversations"" view or other state with no message selected.', 'comment_created': datetime.datetime(2023, 7, 26, 4, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1279490247, 'comment_body': 'Should we listen for drag-drops on the `.app .column-middle` as it will cover `.recent_topics_view` also? What should be the behaviour if file is dropped on sidebars? It is opening file in new tab currently for sidebars, maybe we can prevent it opening in new tab and do nothing.', 'comment_created': datetime.datetime(2023, 7, 31, 15, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1289395846, 'comment_body': 'Yeah, I think `.app .column-middle` is probably fine as a place to start -- we can get feedback from there.', 'comment_created': datetime.datetime(2023, 8, 10, 0, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1296516827, 'comment_body': 'After playing with this, I moved it to just `.app-main`; seems nicer to upload on drags to sidebars than any other option for what happens if you do that.', 'comment_created': datetime.datetime(2023, 8, 16, 23, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'e83203794cd2045189001750711d91821f7f94da', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}]",Brijmohan Siyag,71015892,brijsiyag@gmail.com,User,,41,,64,52
1377375083,send_later: Wildcard mention throwing error on send later.,"It was throwing error while schudiling a message having wildcard mention, because the function `open_send_later_menu` uses instance to track down interval, but the parametere instance was not passed from when it was called from warning banner action. This commit sets a default instance to an empty object.

<!-- Describe your pull request here.-->

Fixes: https://chat.zulip.org/#narrow/stream/9-issues

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25882,https://api.github.com/repos/zulip/zulip/pulls/25882,https://github.com/zulip/zulip/pull/25882,closed,5,4,1,1,6,0,4,0,"[{'name': 'area: compose (misc)'}, {'name': 'priority: high'}, {'name': 'size: S'}, {'name': 'integration review'}]",2023-06-03 22:13:28+00:00,2023-06-05 18:59:17+00:00,161149.0,"1 day, 20:45:49",[],"[{'commit_sha': '978a59a76d3a489dadc0ca439d038cf949187158', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}]",Brijmohan Siyag,71015892,brijsiyag@gmail.com,User,,41,,64,52
1351147482,stream: change ID in selector to match updated one.,"Updates the left-over ID in a5580264eb00cc47bbec680f0a50bf974e7cabcb.

<!-- Describe your pull request here.-->


<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25601,https://api.github.com/repos/zulip/zulip/pulls/25601,https://github.com/zulip/zulip/pull/25601,closed,1,1,1,1,2,0,3,0,"[{'name': 'size: XS'}, {'name': 'release goal'}, {'name': 'integration review'}]",2023-05-15 17:05:00+00:00,2023-05-15 21:55:22+00:00,17422.0,4:50:22,[],"[{'commit_sha': '00d578b63874750e2eda69b19efb94ecc9efc5cd', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}]",Brijmohan Siyag,71015892,brijsiyag@gmail.com,User,,41,,64,52
1349062072,compose: Check posting policy for direct messages.,"Prior this commit, changing the message type from a stream (where posting was not allowed) to a direct message using the compose box dropdown, did not changed the state of the submit button from disabled to enabled even though direct messages were allowed in the organization. Now, it checks if direct messages are allowed or not, and depending on that, it updates the send button's state, tooltip and displays a relevant banner.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<img width=""1093"" alt=""Screenshot 2023-05-16 at 5 58 23 AM"" src=""https://github.com/zulip/zulip/assets/71015892/271c3275-e890-4abc-9d39-7181a6197be3"">
<img width=""1093"" alt=""Screenshot 2023-05-16 at 5 58 07 AM"" src=""https://github.com/zulip/zulip/assets/71015892/a5786051-e8b6-4cd6-bda6-fbc1a0b38aa1"">

<img width=""1081"" alt=""Screenshot 2023-05-13 at 3 06 03 AM"" src=""https://github.com/zulip/zulip/assets/71015892/81b51614-ee0c-4949-b090-387da0661da8"">


<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25572,https://api.github.com/repos/zulip/zulip/pulls/25572,https://github.com/zulip/zulip/pull/25572,closed,46,25,5,2,15,8,3,0,"[{'name': 'size: L'}, {'name': 'release goal'}, {'name': 'integration review'}]",2023-05-12 18:43:56+00:00,2023-05-16 18:24:36+00:00,344440.0,"3 days, 23:40:40","[{'comment_id': 1192763620, 'comment_body': ""Let's call this variable `banner_text`; `msg` can easily be confused with a Zulip message object.\r\n\r\nI think it would also be better to instead have the blocks that set `can_post_messages` set these strings as well if appropriate.\r\n\r\nFinally, it might make sense to add a bonus commit to reorder this function to use the early return pattern -- i.e. make this conditional be `if (can_post_messages) { // clear banners and return }`.\r\n\r\nThen we don't have most of the code in the function indented more than it needs to be."", 'comment_created': datetime.datetime(2023, 5, 12, 20, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1192765075, 'comment_body': 'It would be nice to avoid the code duplication that we have for these strings. One idea would be to extract a `compose_recipient.get_posting_policy_error_message` function that returns `""""` or the error string depending on whether you\'re allowed to send messages, and use that both here and in  `check_posting_policy_for_compose_box`.', 'comment_created': datetime.datetime(2023, 5, 12, 20, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1192944195, 'comment_body': 'Okay what I commented earlier was pending for 10 hours and now got deleted. \r\n\r\nI was saying that one thing to notice is I have created a new function in `stream_data` which is `get_sub_by_id`, to avoid 3 calls to get `can_post_messages_in_stream` as ""get stream name"", ""get stream"" and ""get can_post_messages_in_stream"", Now it is using 2 calls. \r\n\r\nShould I do this in a separate commit? ', 'comment_created': datetime.datetime(2023, 5, 13, 7, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1194415042, 'comment_body': ""I would prefer to structure this function with a clear outer if/else for direct messages vs. stream messages; that'll prove a lot nicer as we add more private message policies."", 'comment_created': datetime.datetime(2023, 5, 15, 22, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194481166, 'comment_body': ""I'm not getting you clearly @timabbott , Are you suggesting to pass `msg_type` as arg or restructure if/else inside function?"", 'comment_created': datetime.datetime(2023, 5, 16, 0, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1194487482, 'comment_body': ""Just the if/else structure to start with just checking if it's the special direct message value, and then have other if/else checks inside."", 'comment_created': datetime.datetime(2023, 5, 16, 0, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1194490502, 'comment_body': 'Ooh okay got it !', 'comment_created': datetime.datetime(2023, 5, 16, 0, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1194498130, 'comment_body': 'Now updated the class_name for banner also which was causing duplicate banner on sending direct messages, earlier we missed it. ', 'comment_created': datetime.datetime(2023, 5, 16, 1, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}]","[{'commit_sha': 'a87b36cdbbb6b50b664c955443eeb1d1330e6baf', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5179cd056dbfce0d3d440fc2a8358c3e0355c0a3', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}]",Brijmohan Siyag,71015892,brijsiyag@gmail.com,User,,41,,64,52
985693858,Feat: Show titles of GitHub issues on hover fixes: #19710.,"<!-- Describe your pull request here.-->
Fixes: #19710

### Adds API and UI for the previewable urls.

**Self-review checklist**

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/version-control.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
",False,22368,https://api.github.com/repos/zulip/zulip/pulls/22368,https://github.com/zulip/zulip/pull/22368,open,702,39,28,2,31,56,6,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'rust community request'}, {'name': 'area: message feed (display)'}, {'name': 'chat.zulip.org review'}, {'name': 'completion candidate'}]",2022-07-03 10:41:59+00:00,,0.0,,"[{'comment_id': 921496068, 'comment_body': 'The results of backend Markdown processing are saved to the database and fixed for all time, so this will prevent us from adding or removing `previewable` in historical messages. This should be done on the frontend, not the backend.', 'comment_created': datetime.datetime(2022, 7, 14, 19, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1047594091, 'comment_body': ""Let's replace this regular expression with actually parsing the URL using the URL library. See https://developer.mozilla.org/en-US/docs/Web/API/URL."", 'comment_created': datetime.datetime(2022, 12, 13, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047597577, 'comment_body': 'I think the right selector should be something like `$(""body"").on(""mouseenter"", "".rendered_markdown a"",` -- this will make this work naturally in stream descriptions, for example. \r\n\r\n(Actually probably we need a tighter class).', 'comment_created': datetime.datetime(2022, 12, 13, 18, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047598445, 'comment_body': 'Could you do a `return` here rather than intending all the code below via putting it in a giant `else` clause?', 'comment_created': datetime.datetime(2022, 12, 13, 18, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047599826, 'comment_body': ""Let's put these styles as a section inside `rendered_markdown.css`; we don't do inline styles inside template files as a coding pattern in this project."", 'comment_created': datetime.datetime(2022, 12, 13, 18, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047602520, 'comment_body': ""These strings need to be tagged for translation.\r\n\r\nSee https://zulip.readthedocs.io/en/latest/translating/internationalization.html to learn how to do this correctly... though I think probably we just want to construct the strings inside JavaScript using `$t`, since that'll provide a more flexible interface if we want to support things that are not GitHub/GitLab in the future. So I'd just make the parameters be `hover_preview_icon_path`, `hover_preview_title`, `hover_preview_details`."", 'comment_created': datetime.datetime(2022, 12, 13, 18, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047604378, 'comment_body': 'Please add some tests that cover this code path. You can do it nicely using the `responses` module to configure what HTTP responses GitHub is expected to return from a given API endpoint; this is important for the tests to work offline and without a real API key.\r\n\r\n(Often we setup a fixture)', 'comment_created': datetime.datetime(2022, 12, 13, 18, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047605063, 'comment_body': ""Oh, it looks like you do have some tests using that pattern; is there an explanation for why this function doesn't get called in those tests?"", 'comment_created': datetime.datetime(2022, 12, 13, 18, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047612790, 'comment_body': ""I think `json_data` is a misleading name for this variable -- it's just a dictionary at this point, not a JSON string, having been decoded from the original JSON. "", 'comment_created': datetime.datetime(2022, 12, 13, 19, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1047613660, 'comment_body': 'Same comment on parsing here; we should let `urrlib` parse the library and then just compare the hostname to github.com, for example. This is much safer/more secure and easier to read too :)', 'comment_created': datetime.datetime(2022, 12, 13, 19, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1051611037, 'comment_body': '@timabbott, but how we will be knowing if it is a user/org URL or an Issue/PR URL?\r\nSame doubt in the above comment for `util.js`.', 'comment_created': datetime.datetime(2022, 12, 18, 14, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1065083419, 'comment_body': 'We\'ll still need to look at the URL\'s `path` component, probably with a regex -- i.e. the part that isn\'t the domain. What I\'m trying to do is have the `https` and `github.com` parts use a standard URL library and then just check ""is it an https URL {""github.com"", ""www.github.com""} with clean JS given that\'s what we mean. The last bit of just parsing the path will still need to involve a regex, of course, but it\'ll just be on the URL\'s path -- the `?` parameters, `#` fragments, and other complexity will be handled for us.', 'comment_created': datetime.datetime(2023, 1, 9, 20, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1095242219, 'comment_body': ""## Incomplete regular expression for hostnames\n\nThis regular expression has an unescaped '.' before 'github.com', so it might match more hosts than expected.\n\n[Show more details](https://github.com/zulip/zulip/security/code-scanning/289)"", 'comment_created': datetime.datetime(2023, 2, 3, 0, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1095242220, 'comment_body': ""## Incomplete regular expression for hostnames\n\nThis regular expression has an unescaped '.' before 'github.com', so it might match more hosts than expected.\n\n[Show more details](https://github.com/zulip/zulip/security/code-scanning/290)"", 'comment_created': datetime.datetime(2023, 2, 3, 0, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 1149281494, 'comment_body': 'I have changed it to `additional_data`.', 'comment_created': datetime.datetime(2023, 3, 27, 13, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1149674378, 'comment_body': ""We should use a [setting in `settings.py`](https://zulip.readthedocs.io/en/latest/subsystems/settings.html) for this, not an environment variable.  That also gives a place to document the great new feature, so folks can discover it!\r\n\r\nThat will also make the below block testable, in that we can use `@override_settings` to verify we set the header when we have the value.\r\n\r\nWe could imagine, in the future, this being a per-realm setting and not a server-wide setting, which would let it work for private repos.\r\n\r\n-----\r\n\r\nI think it's fine here, but this will start making auth'd requests to github for the things we were previously talking to github for unauth'd.  Which I think is fine -- I don't believe that it does anything except higher rate limits.  There isn't a security concern here since anyone on the server can already use it to request any issue/PR that the token can access."", 'comment_created': datetime.datetime(2023, 3, 27, 18, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149677065, 'comment_body': ""There's some tradeoff to this cache duration which is worth teasing out:\r\n - The longer it is, the fewer requests we'll make to GitHub -- which makes it less likely we'll hit any rate-limits\r\n - ...but also we're likely to return stale data to the end-user\r\n - ...and the cache will be bigger, though realistically I don't think we're worried about the scale of this cache getting out of control\r\n\r\nTo the first point, the rate-limit is likely [5,000 requests per hour](https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limits-for-requests-from-personal-accounts), which feels like it's a lot if we have a 60-minute cache window.  I feel like we may want a shorter cache window -- maybe 10 minutes?"", 'comment_created': datetime.datetime(2023, 3, 27, 18, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149688369, 'comment_body': ""Shouldn't the cache mean that we _don't_ need this response?"", 'comment_created': datetime.datetime(2023, 3, 27, 19, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149689316, 'comment_body': 'We may want to use a more real fixture for this.', 'comment_created': datetime.datetime(2023, 3, 27, 19, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149697090, 'comment_body': ""I think we should be a little more careful with the log level here, based on the status code:\r\n - 5xx error codes: there's nothing the server administrator can do, so filling out the Zulip server error logs isn't going to help -- we should use INFO at most.\r\n - 404 seem like a user error, so I don't think we need to log it at any level.\r\n - 403s are possibly a server error (if they're expecting it to be able to access a private repo but have the token misconfigured) but in larger deploys it's not something worth logging over, since users can enter arbitrary information.\r\n - 401s are probably a WARNING or ERROR, since that's something wrong with the token itself\r\n - 429s are a WARNING, since fundamentally it can be caused by users taking bad actions -- but something that affects the whole server so the admin should be more aware.\r\n\r\nIn none of these should we use `exception` since I don't think the stacktrace is useful."", 'comment_created': datetime.datetime(2023, 3, 27, 19, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149697757, 'comment_body': '`urlparse` can fail (e.g. with `https://boom[here`), which we should catch gracefully rather than 500.', 'comment_created': datetime.datetime(2023, 3, 27, 19, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149702598, 'comment_body': ""This accepts to preview `ftp://www.github.com/` and `http://www.github.com:9000/`, which it shouldn't."", 'comment_created': datetime.datetime(2023, 3, 27, 19, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149705969, 'comment_body': 'If this gets handed `https://github.com` then `parsed_url` is `""""`, so `path_split` is `[""""]`, which throws a 500 when accessing `path_split[3]`.\r\n\r\nDitto, later, if one were to pass `https://github.com/foo/bar/issues`.', 'comment_created': datetime.datetime(2023, 3, 27, 19, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149710997, 'comment_body': ""This cache key should include a hash of the github token, since the contents of the response from Github also vary by that.  This means that if you change the key, you immediately start seeing responses which are limited to what that new key can access.\r\n\r\nWe need to use a hash of the github token, since the cache keys shouldn't themselves have the secret embedded in them."", 'comment_created': datetime.datetime(2023, 3, 27, 19, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149714825, 'comment_body': ""This isn't translatable, since it can be an arbitrary string.  The f-string isn't helping improve the readability, either. :)\r\n\r\nI'm guessing that you want to cache the failure, which is why `get_issue_or_pr_data` isn't raising the JsonableError directly.  Which is reasonable for 404s -- those are unlikely to want to try to fetch fresh each time. If you're going to do this, I think you need to return some opaque constant from get_issue_or_pr_data, and check those values here and raise JsonableError with the user-facing string explicitly."", 'comment_created': datetime.datetime(2023, 3, 27, 19, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1149716880, 'comment_body': ""We're going to want to document this in the OpenAPI spec eventually, since we'd like any client to be able to use it."", 'comment_created': datetime.datetime(2023, 3, 27, 19, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1155086291, 'comment_body': 'I went through codebase, we are not returning 422(Unprocessable Content) status code anywhere. Should we consider this for these type of errors?', 'comment_created': datetime.datetime(2023, 4, 1, 9, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1155089913, 'comment_body': 'I was testing this by changing the data in response and than checking if data is changing or coming from cache.\r\nIf we want to remove that line of code, than we also have to remove the mock URL from responses also.', 'comment_created': datetime.datetime(2023, 4, 1, 10, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1155090569, 'comment_body': 'Okay I will do it for 10 minutes, we can consider increasing the value as per traffic later.', 'comment_created': datetime.datetime(2023, 4, 1, 10, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1157784008, 'comment_body': 'I have checked on rate limit status code is `403 rate limit exceeded` for Github api, this is the one we should sure show?', 'comment_created': datetime.datetime(2023, 4, 4, 21, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1157794454, 'comment_body': 'Added it here because checks were failing, I will add an issue or put a PR after this PR closes.', 'comment_created': datetime.datetime(2023, 4, 4, 21, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1158815053, 'comment_body': ""That's a really weird and unfortunate status code for rate limiting.  I guess we should show those as WARNING, then?"", 'comment_created': datetime.datetime(2023, 4, 5, 17, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1158815957, 'comment_body': 'We should just use status code 400, which is straightforward by raising a JsonableError.', 'comment_created': datetime.datetime(2023, 4, 5, 17, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1158817957, 'comment_body': ""If the cache is working, then it *shouldn't* see the new data in the response, because it should return the cached data from the first response, and not make a second request."", 'comment_created': datetime.datetime(2023, 4, 5, 17, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1158830153, 'comment_body': 'Okay, I will update this to like we will first add a mock response than request for data than remove the mock response and than again fetch the data and assert.', 'comment_created': datetime.datetime(2023, 4, 5, 17, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1159017683, 'comment_body': 'Yes, I have showed warning on 401, 403 and 429.', 'comment_created': datetime.datetime(2023, 4, 5, 20, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1160391226, 'comment_body': ""I don't think inlining the hash computation into the f-string here is readable.  And it's also worth a comment explaining why we're doing it."", 'comment_created': datetime.datetime(2023, 4, 7, 2, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160394352, 'comment_body': ""We absolutely shouldn't be `noqa`ing this.  Bare `except:` catches _syntax errors_, even -- it's actively bad.  The lint rule catches real errors.  If you really want to catch everything, you want `except Exception`.\r\n\r\nBut I think `except ValueError` is what we want."", 'comment_created': datetime.datetime(2023, 4, 7, 2, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160394693, 'comment_body': 'We now have fixed strings, so we _can_ translate them, so we should. :)', 'comment_created': datetime.datetime(2023, 4, 7, 2, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160395388, 'comment_body': 'The outer set of parens in the regex isn\'t doing anything here, and `re.match` always anchors at the start of the string, making the leading `^` also unnecessary.\r\n\r\nBut a regex is overkill here -- listing exactly what we want is both more concise and more readable:\r\n```suggestion\r\n        and parsed_url.hostname in [""www.github.com"", ""github.com""]', 'comment_created': datetime.datetime(2023, 4, 7, 2, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160399497, 'comment_body': 'Personally, I prefer to ""early abort"" by putting the exception conditions as the ones inside the `if`, so that the happy path is the one that goes to the end of the function.  Otherwise, this one-line branch is separated from the things that can cause it by 20-ish lines of code, which makes it easier to get lost or confused what it\'s for.\r\n\r\nThat is, invert the if statement:\r\n```python3\r\n    if (\r\n        parsed_url.scheme not in [""http"", ""https""]\r\n        or parsed_url.hostname not in [""www.github.com"", ""github.com""]\r\n        or parsed_url.port is not None\r\n        or len(path_split) <= 4\r\n        or path_split[3] not in [""issues"", ""pull""]\r\n    ):\r\n        raise JsonableError(_(""URL is not previewable.""))\r\n\r\n    data = get_issue_or_pr_data(\r\n        owner=path_split[1],\r\n        repo=path_split[2],\r\n        issue_number=path_split[4],\r\n    )\r\n\r\n    if data[""result""] != ""success"":\r\n        if data[""status_code""] == 404:\r\n            raise JsonableError(_(""Invalid or expired URL.""))\r\n        else:\r\n            raise JsonableError(_(""Unable to fetch data from Github.""))\r\n\r\n    return json_success(request, data)\r\n```\r\n\r\nWe may well want to change this if we add more previews (to do some sort of dispatch based on what does match from a set of tests) but for now, I\'d prefer readability.', 'comment_created': datetime.datetime(2023, 4, 7, 2, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160402847, 'comment_body': 'You have this code twice, slightly differently -- and in neither case do you actually _need_ the `request_callback`, since in each case you only exercise one side of the `if` statement.\r\n\r\nYou should pull this helper outside of your two test methods, so it gets exercised.', 'comment_created': datetime.datetime(2023, 4, 7, 3, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160403488, 'comment_body': '`Unable to fetch data from GitHub 403 Client Error: Forbidden for url: https://...` isn\'t terribly readable -- we want some separator before the `err`, if only a `:`:\r\n```suggestion\r\n            logger.warning(""Unable to fetch data from GitHub: %s"", str(err))\r\n```\r\n\r\nI also wonder if we should avoid caching this set of results, by raising an exception.  Thoughts, @timabbott?', 'comment_created': datetime.datetime(2023, 4, 7, 3, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160404776, 'comment_body': ""I don't believe this needs to be a tuple."", 'comment_created': datetime.datetime(2023, 4, 7, 3, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160405310, 'comment_body': 'I think we should use `self.assert_json_error` here, so we also check the status code.', 'comment_created': datetime.datetime(2023, 4, 7, 3, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160408728, 'comment_body': 'Rather than remove it, you can use `responses.assert_call_count(...)`', 'comment_created': datetime.datetime(2023, 4, 7, 3, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160409135, 'comment_body': 'These don\'t add much to the test, since we test that above.  What seems more interesting is that the first and second responses were both successful, and have the same body, and that the second one didn\'t cause an HTTP request:\r\n```python3\r\n        first_response = self.client_post(""/json/previewable"", {""url"": url})\r\n        self.assert_json_success(first_response)\r\n        responses.assert_call_count(api_url, 1)\r\n\r\n        second_response = self.client_post(""/json/previewable"", {""url"": url})\r\n        self.assert_json_success(second_response)\r\n        responses.assert_call_count(api_url, 1)\r\n\r\n        self.assertEqual(first_response.json(), second_response.json())', 'comment_created': datetime.datetime(2023, 4, 7, 3, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1160411343, 'comment_body': 'You should add a commented section to `zproject/prod_settings_template.py` (search for ""Previews"") which doesn\'t have any settings, but does describe that this is a secret that can be set, and how to generate the token (e.g. can one use [fine-grained access tokens](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#fine-grained-personal-access-tokens), and is so what rights are needed?).\r\n\r\nAs written, it\'s not *required* to get previews, but setting it will allow users to make better use of them -- e.g. describing that it can give access to private repos seems like a good thing to note and will make folks potentially more interested in the feature.  Mentioning what the quotas are with and without a token would also be good.', 'comment_created': datetime.datetime(2023, 4, 7, 3, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1161135428, 'comment_body': '`lint --fix` did this change based on `,` I think, updated it.', 'comment_created': datetime.datetime(2023, 4, 8, 17, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1163964121, 'comment_body': 'Currently, the code caches this information, will update it once we make a decision.', 'comment_created': datetime.datetime(2023, 4, 12, 10, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1178482046, 'comment_body': 'I think it\'d be nicer to construct a `{issue}` variable for the first part, and have this be spelled for translations `""{issue} opened by {user}""`. (We usually don\'t put extra space around variable names).', 'comment_created': datetime.datetime(2023, 4, 26, 23, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1178483326, 'comment_body': ""Can you comment on the security implications of moving this out of `clean_user_content_links`? Is the idea that we're no longer using `title` attributes or something?"", 'comment_created': datetime.datetime(2023, 4, 26, 23, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1178484744, 'comment_body': ""Let's also add a comment documenting the trade-off with the 5000 requests/hour rate-limit vs. having current data."", 'comment_created': datetime.datetime(2023, 4, 26, 23, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1178509830, 'comment_body': ""More generally, we almost never as a project want to be suppressing linter errors without actually addressing the feedback from them; we try pretty hard to tune our linters down to fairly precise rules.\r\n\r\nIf you run into something like this in the future, it's best to post about it in development help and we can help you figure out the right way to resolve it."", 'comment_created': datetime.datetime(2023, 4, 27, 0, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1184817337, 'comment_body': ""I can't think of any security concerns here as we are just moving the setting title part out of the `clean_user_content_links`, as we have to decide whether to show a title or not based on whether URL is previewable or not."", 'comment_created': datetime.datetime(2023, 5, 4, 10, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}]","[{'commit_sha': 'f01788eac9a7a4770d0f4b92df7e3e25344da776', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c9295c57b6e8ffa4f01a4ff9a3a96dcedbc8e9', 'committer_username': 'brijsiyag', 'committer_name': 'Brijmohan Siyag', 'committer_email': 'brijsiyag@gmail.com', 'commit_date': datetime.datetime(2020, 9, 9, 11, 53, 2, tzinfo=datetime.timezone.utc)}]",Brijmohan Siyag,71015892,brijsiyag@gmail.com,User,,41,,64,52
855113358,compose: Disable send button while uploads are in progress.,"In `upload.js` there is already code for disabling send button while uploading(works for saving when we edit, but not for send),
when I inspect in chrome, `disabled` attr comes and goes for saving button but not in the case for send button and the reason behind it is, The function `check_overflow_text()` from `compose_validate.js` removes `disabled` attr when message text not
overflowing after overflowing error, I just added if condition to remove `disabled` attr only if the text was overflowing before.

Added some CSS on the button to look disabled.

Fixes: #21135

<!-- What's this PR for?  (Just a link to an issue is fine.) -->

**Testing plan:** Manually tested for both themes.

<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
**Gifs And Screenshots:** I had to upload lots of files because files were uploading too fast and 25MB is the file size limit.
<details>
<summary>LIght Mode</summary>

![light_mode](https://user-images.githubusercontent.com/41695888/155326213-3089da49-390a-4825-a688-0b23349babcf.gif)
![light_mode_screenshot](https://user-images.githubusercontent.com/41695888/155330712-53c8234c-0006-4ef9-a5bf-22a4df8f7734.png)


</details>
<details>
<summary>Dark Mode</summary>

![dark_mode](https://user-images.githubusercontent.com/41695888/155326259-42a1db14-313a-473d-8a96-74c44d1000b2.gif)
![dark_mode_screenshot](https://user-images.githubusercontent.com/41695888/155330795-8122c92d-c6b7-4c82-874b-305c9900bd4c.png)


</details>",False,21166,https://api.github.com/repos/zulip/zulip/pulls/21166,https://github.com/zulip/zulip/pull/21166,closed,9,1,3,1,4,0,4,0,"[{'name': 'size: S'}, {'name': 'has conflicts'}, {'name': 'post release'}, {'name': 'area: compose (uploads)'}]",2022-02-17 06:12:36+00:00,2023-10-02 05:12:22+00:00,51145186.0,"591 days, 22:59:46",[],"[{'commit_sha': 'db3fcd5989a2e95ccbaf485961f702de9f5d3897', 'committer_username': 'yogesh-sirsat', 'committer_name': 'Yogesh Sirsat', 'committer_email': None, 'commit_date': datetime.datetime(2018, 7, 25, 15, 31, 8, tzinfo=datetime.timezone.utc)}]",Yogesh Sirsat,41695888,,User,,52,,29,6
1377487566,message_feed: Improve edited/moved tooltip.,"- [x] Change the text to:
- First line: Last {moved/edited} [date/time]. [note: no parens around date, don't capitalize date unless required by rules of English, i.e., ""today"", not ""Today""]
- Second line, shown only if edit history is enabled in the organization: Click to view edit history.

---

Fixes: #23075
----------------------

**Screenshots and screen captures:**

<details>
<summary>Before:</summary>
<br>


![Screenshot from 2023-06-04 07-59-56](https://github.com/zulip/zulip/assets/66828942/2c178eba-1851-40fe-8aa1-ee266e11e983)

<br>

![Screenshot from 2023-06-04 08-00-05](https://github.com/zulip/zulip/assets/66828942/ea0ba0f8-77a1-443e-b334-76b358b09b3d)

</details>

<details>
<summary>After:</summary>
<br>

![Screenshot from 2023-06-04 07-58-02](https://github.com/zulip/zulip/assets/66828942/fe89f587-ceb6-411b-9606-f69a21722a84)

<br>

![Screenshot from 2023-06-04 07-58-15](https://github.com/zulip/zulip/assets/66828942/ad7feb4e-4172-4dc8-afd1-2e46f1e0c932)

</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x]  Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25883,https://api.github.com/repos/zulip/zulip/pulls/25883,https://github.com/zulip/zulip/pull/25883,closed,49,4,4,1,15,16,4,0,"[{'name': 'priority: high'}, {'name': 'size: L'}, {'name': 'area: message feed (UI)'}, {'name': 'integration review'}]",2023-06-04 02:32:34+00:00,2023-07-12 00:33:06+00:00,3276032.0,"37 days, 22:00:32","[{'comment_id': 1216557622, 'comment_body': ""The tippy tooltip is here already, than we take it in tippy's onShow function and pass it again to tippy, Can we just remove it from here and calculate only in tippy ?\r\nI am not aware of how much work it will take. If there is not a cleaner approach to do this, I'm also okay with this approach."", 'comment_created': datetime.datetime(2023, 6, 4, 11, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1216560889, 'comment_body': 'We can pass `realm_allow_edit_history` directly here in `edited_notice.hbs`, than there will be no need of `message_edit_notice.hbs` file and changes in the `tippy.js`.', 'comment_created': datetime.datetime(2023, 6, 4, 11, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1222425322, 'comment_body': 'Hey @brijsiyag , I have made the necessary changes. Could you please review it again? Thanks!', 'comment_created': datetime.datetime(2023, 6, 8, 4, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1223001155, 'comment_body': ""Ooh, I just dug deep, and it appears that we are not importing edited_notice in any js/ts files, thus what I proposed would use variable drilling from the 4-5 upper level. and I think we don't want that.\r\nThanks @palashb01"", 'comment_created': datetime.datetime(2023, 6, 8, 12, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1223002529, 'comment_body': ""Let's wait for mentor/maintainer to look into this."", 'comment_created': datetime.datetime(2023, 6, 8, 12, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1248111760, 'comment_body': ""Even I'm not sure about it."", 'comment_created': datetime.datetime(2023, 6, 30, 17, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1248112261, 'comment_body': 'For now all other looks good to me.', 'comment_created': datetime.datetime(2023, 6, 30, 17, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1251231957, 'comment_body': ""Rather than `second_line`, maybe go with `hint_line_str` to parallel `edited_notice_str`, or something--it's just a good habit not to enumerate things in variables, so that future changes don't run into `third_line` or `fortieth_line` or something like that :)"", 'comment_created': datetime.datetime(2023, 7, 3, 19, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'karlstolley', 'type': 'User'}, {'comment_id': 1251247348, 'comment_body': 'Is the `[""Today"", ""Yesterday""]` array going to work with internationalization and other language strings? A quick check against German in development suggests it\'s not: ""Last edited Heute um 2:47PM Uhr"" (and while German does capitalize nouns, _heute_ is an adverb, and therefore would not be capitalized).\r\n\r\nPerhaps what you need to do is try and match the string against the presence of a digit? Something like `if (!date.match(/\\d/)) {`, where [`.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) will return `null` if there\'s no digit. In that case, it might possibly be safe to assume is an adverb like ""today"", ""heute"", ""hoy"" (Spanish), etc.', 'comment_created': datetime.datetime(2023, 7, 3, 20, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'karlstolley', 'type': 'User'}, {'comment_id': 1254702729, 'comment_body': 'changed it', 'comment_created': datetime.datetime(2023, 7, 6, 17, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1254704573, 'comment_body': 'Thanks a lot for catching this bug. I didn\'t realize that the date I was obtaining was already internationalized in a different language, so ""today"" and ""tomorrow"" wouldn\'t work. thanks a lot for your solution. I have updated the code with the regex, and now it is working as expected regardless of the language.', 'comment_created': datetime.datetime(2023, 7, 6, 17, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1255970922, 'comment_body': ""Cool. Let's have you add a comment here explaining what that if condition is checking for, and why. It would also be good for someone, maybe @amanagr, to check this logic and make sure there aren't any edge cases being overlooked here."", 'comment_created': datetime.datetime(2023, 7, 7, 15, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'karlstolley', 'type': 'User'}, {'comment_id': 1257135651, 'comment_body': 'Added the comment ', 'comment_created': datetime.datetime(2023, 7, 8, 7, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1257432228, 'comment_body': 'LGTM', 'comment_created': datetime.datetime(2023, 7, 9, 7, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1257432304, 'comment_body': 'Is it possible to use a template for this?', 'comment_created': datetime.datetime(2023, 7, 9, 7, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1258512809, 'comment_body': '@amanagr I have updated the PR, could you please review the PR, thanks :)', 'comment_created': datetime.datetime(2023, 7, 10, 16, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}]","[{'commit_sha': '1b21ea1fd77f30e015273d4aefe5770458ddf4a6', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}]",PALASH BADERIA,66828942,palash.baderia@outlook.com,User,,54,,55,45
1396654673,stream_settings: Add not-subscribed tab to stream settings.,"- [x] Add a `Not Subscribed` tab to the stream settings that will contain all the streams the user is not subscribed to.
- [x] Display the text `No streams to show. View all streams` when no stream is available to show.
- [x] Changes the redirect links for `Browse streams` and `Browse 1 more stream` to the not-subscribed tab.
- [x] Hide the `Not subscribed` tab if the user is a guest user.

------------------

Fixes: #21869
Rebases and made some major changes to fix bugs: #21904

---------------

**Screenshots and screen captures:**

<details>
<summary>stream settings screenshots:</summary>

<br>

- When the user is not a guest.

![08117B5D-E8EB-4FC9-B1D9-0914CA3B5CE0](https://github.com/zulip/zulip/assets/66828942/981a140e-c5c4-44d9-b5d9-aabe119829df)

<br>

- When the user is a guest.

![F5D33907-2FDF-43A3-A0EB-259B77326713_4_5005_c](https://github.com/zulip/zulip/assets/66828942/6f9a25f9-c6d1-4e86-8298-4e1053b6133d)

<br>

- When no streams to show

<img width=""607"" alt=""Screenshot 2023-06-17 at 12 39 02 PM"" src=""https://github.com/zulip/zulip/assets/66828942/eee0c524-316d-4ff0-839d-019d343fc597"">


</details>

<details>
<summary>Demo:</summary>
<br>

![not-subscribed tab](https://github.com/zulip/zulip/assets/66828942/e83f5631-b87f-47b3-936a-aa055dae19b2)


</details>


-------------------

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,26049,https://api.github.com/repos/zulip/zulip/pulls/26049,https://github.com/zulip/zulip/pull/26049,closed,206,66,7,5,15,18,7,0,"[{'name': 'feedback wanted'}, {'name': 'area: channel settings'}, {'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'new feature'}, {'name': 'integration review'}, {'name': 'chat.zulip.org review'}]",2023-06-17 07:10:30+00:00,2024-06-04 16:48:05+00:00,30533855.0,"353 days, 9:37:35","[{'comment_id': 1246331890, 'comment_body': 'Maybe `notsubscribed_streams_tab_empty_text` is more appropriate.', 'comment_created': datetime.datetime(2023, 6, 29, 8, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1246337033, 'comment_body': ""We don't get private streams at client side from server right(If not subscribed)? But comment is saying we hide them at client side."", 'comment_created': datetime.datetime(2023, 6, 29, 8, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1246361917, 'comment_body': '```js\r\n$("".no-streams-to-show"").children().hide();\r\nif (is_subscribed_stream_tab_active()) {\r\n    $("".subscribed_streams_tab_empty_text"").show();\r\n} else if (is_unsubscribed_stream_tab_active()) {\r\n    $("".unsubscribed_streams_tab_empty_text"").show();\r\n} else {\r\n    $("".all_streams_tab_empty_text"").show();\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 9, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1247493451, 'comment_body': 'Thanks a lot for the suggestion :)', 'comment_created': datetime.datetime(2023, 6, 30, 6, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1247493928, 'comment_body': 'Oops, my mistake thanks a lot for finding this error in comment I have mentioned the private streams part.', 'comment_created': datetime.datetime(2023, 6, 30, 6, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1247494053, 'comment_body': 'Yup, changed it', 'comment_created': datetime.datetime(2023, 6, 30, 6, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1255779917, 'comment_body': 'You are converting if-else block to switch case in between other changes, I think it should be done in a different commit. ', 'comment_created': datetime.datetime(2023, 7, 7, 12, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1255781389, 'comment_body': 'Same here, like I mentioned before.', 'comment_created': datetime.datetime(2023, 7, 7, 12, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1255785765, 'comment_body': 'Why renamed `$sub_row` to `$row`?', 'comment_created': datetime.datetime(2023, 7, 7, 12, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1255796409, 'comment_body': 'Why removed `.hide()` lines here?', 'comment_created': datetime.datetime(2023, 7, 7, 13, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1257266841, 'comment_body': ""I didn't make the intentional change, I added an else if case however on running the lint to fix the issues, it converted this to a switch case."", 'comment_created': datetime.datetime(2023, 7, 8, 13, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1257266873, 'comment_body': ""I didn't make the intentional change, I added an else if case however on running the lint to fix the issues, it converted this to a switch case."", 'comment_created': datetime.datetime(2023, 7, 8, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1257267532, 'comment_body': 'Since earlier, we used to have a separate tab only for subscribed streams, so having a ""sub_row"" (subscribed_row) seems correct. However, now we also have a tab for unsubscribed streams, so I made the row general for both instead of aligning it towards one side.\r\n', 'comment_created': datetime.datetime(2023, 7, 8, 13, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1257284847, 'comment_body': '""No-streams-to-show"" is the parent of all the ""empty-text"" elements. Therefore, instead of individually hiding each element in every if-else case, it is much better to hide all the elements beforehand and then only show the required element. This approach reduces code duplication as well.', 'comment_created': datetime.datetime(2023, 7, 8, 14, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1259315288, 'comment_body': 'Yeah, I know that can happen, I have experienced that before, what you can do is add this change in a separate commit manually.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1259317002, 'comment_body': 'okay.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1259319289, 'comment_body': 'Okay, looks good.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1261415538, 'comment_body': '@yogesh-sirsat , I have made the suggested changes, could you please review the PR, thanks :)', 'comment_created': datetime.datetime(2023, 7, 12, 16, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}]","[{'commit_sha': '12212cf20f95c364ba7149e0dfcd0b45e4a7d308', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982e96bbc3afc46be2af4be7097aec2983014514', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a24ef5afce8974016f9b3edeea4a3eef08b2db46', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aabe45aab31c91d928f8c48811d9d4bdbe091fd7', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0a7d0c02ed8831effb7daf51607f6e5cd25229b', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}]",PALASH BADERIA,66828942,palash.baderia@outlook.com,User,,54,,55,45
1371426392,upload_banner: Add a cancel button.,"-  Add a cancel button to the upload banner, replacing the previous close icon. Now, the cancel button is used to cancel the upload process, while the close icon is used to remove the upload banner without interrupting the upload

- To maintain consistency with other banners, the cancel button's dimensions and color have been adjusted to match the style of other buttons present in different banners.

--------------------------------

Fixes: #21156
CZO: [Thread](https://chat.zulip.org/#narrow/stream/137-feedback/topic/disable.20send.20while.20uploading)

---------------------------------

**Screenshots and screen captures:**

<details>
<summary>Demo:</summary>
<br>

![demo](https://github.com/zulip/zulip/assets/66828942/a2b16174-baf8-441a-8555-9dccf7d0d9cd)


</details>

<details>
<summary>New Banner:</summary>
<br>

![Screenshot from 2023-05-31 08-08-12](https://github.com/zulip/zulip/assets/66828942/a7c5415b-9b7c-4acc-a420-7cf622210f26)

</details>

<details>
<summary>Cancel Button:</summary>
<br>

![Screenshot from 2023-05-31 08-08-18](https://github.com/zulip/zulip/assets/66828942/1c331bf5-cdbf-4274-9a03-718c893ecc4c)


</details>

<details>
<summary>View Port changes:</summary>

- Full Screen:
<br>

![Screenshot from 2023-05-31 08-22-06](https://github.com/zulip/zulip/assets/66828942/cc1b3358-0f8a-4d39-8646-999c80b29ea2)

- Small screen:
<br>

![Screenshot from 2023-05-31 08-21-38](https://github.com/zulip/zulip/assets/66828942/17af7c09-4c60-4b66-9ea5-956c46295e77)

- Demo:
<br>


![view port ](https://github.com/zulip/zulip/assets/66828942/e35c6599-6c65-4dc8-8972-951f6be05521)


</details>

----------------------------------

<details>
<summary>Self-review checklist</summary>

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25848,https://api.github.com/repos/zulip/zulip/pulls/25848,https://github.com/zulip/zulip/pull/25848,closed,59,11,5,2,13,15,3,0,"[{'name': 'area: compose (misc)'}, {'name': 'size: L'}, {'name': 'integration review'}]",2023-05-31 04:02:02+00:00,2023-07-06 23:11:09+00:00,3179347.0,"36 days, 19:09:07","[{'comment_id': 1211076350, 'comment_body': ""Looking at these CSS changes, I don't believe these are at all necessary. If you look at a couple lines above, you'll find that the compose banners are styled based on the type of banner they are. (Alert, info, warning). One thing you'll notice is that the compose_banner_action_button for .info is missing, hence the missing style and color."", 'comment_created': datetime.datetime(2023, 5, 31, 4, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Joelute', 'type': 'User'}, {'comment_id': 1211077745, 'comment_body': 'This looks wrong, please take a look at other compose banners.', 'comment_created': datetime.datetime(2023, 5, 31, 4, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Joelute', 'type': 'User'}, {'comment_id': 1212566789, 'comment_body': 'Ah, I just noticed the class. Thanks for the heads-up. I have made the changes.', 'comment_created': datetime.datetime(2023, 6, 1, 4, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1212566904, 'comment_body': 'Fixed this.', 'comment_created': datetime.datetime(2023, 6, 1, 4, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1212757341, 'comment_body': 'I think here also `upload_banner_cancel_button` name would be less confusing.', 'comment_created': datetime.datetime(2023, 6, 1, 8, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'brijsiyag', 'type': 'User'}, {'comment_id': 1213778502, 'comment_body': 'Changed it, @brijsiyag could you please review again, thanks :)', 'comment_created': datetime.datetime(2023, 6, 1, 23, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1225864734, 'comment_body': 'What are we doing about tests for `compose_banner_close_button` here, I can see only tests for `upload_banner_cancel_button`?', 'comment_created': datetime.datetime(2023, 6, 11, 16, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1230521004, 'comment_body': 'Added the tests for `upload_banner_close_button` also @yogesh-sirsat could you please review the PR, thanks :)', 'comment_created': datetime.datetime(2023, 6, 15, 6, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1234329207, 'comment_body': ""I still don't see the tests for `upload_banner_close_button`, can see only for `upload_banner_cancel_button`\r\n\r\nI have reviewed the PR and looks fine except for this above tests"", 'comment_created': datetime.datetime(2023, 6, 19, 18, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1235729202, 'comment_body': ""@yogesh-sirsat  , I have replaced the name 'upload_banner_close_button' with 'upload_banner_hide_button' as it seems closer to the actual functionality of the icon, and these are the tests for it. Furthermore, I have updated the commit description accordingly. Could you please review the PR? Thanks :)"", 'comment_created': datetime.datetime(2023, 6, 20, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1239031736, 'comment_body': ""It's confusing when we rename things with other changes, that's why we mostly do rename things work in separate commits, I'll suggest the same here too."", 'comment_created': datetime.datetime(2023, 6, 22, 21, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'yogesh-sirsat', 'type': 'User'}, {'comment_id': 1239117235, 'comment_body': '@yogesh-sirsat created a separate commit for the rename, could you please review the PR, thanks :)', 'comment_created': datetime.datetime(2023, 6, 22, 23, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1252492857, 'comment_body': 'Can we use a variable  that checks if this is a banner which tracks uploading a file? I can imagine `is_banner_info` being used for a different banner in the future.', 'comment_created': datetime.datetime(2023, 7, 5, 3, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1254750050, 'comment_body': ""@amanagr , I have updated the code, but I feel like I didn't get your point clearly, could you please verify once if this is what you wanted or something else?"", 'comment_created': datetime.datetime(2023, 7, 6, 17, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'palashb01', 'type': 'User'}, {'comment_id': 1254890669, 'comment_body': 'Made a slight variable name change and how it should be procssed.', 'comment_created': datetime.datetime(2023, 7, 6, 20, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}]","[{'commit_sha': 'f09c4143c50a2c3f24a2f139105f331e28519b82', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9db2100bcb1805af71a02b7726e7247451de6ae', 'committer_username': 'palashb01', 'committer_name': 'PALASH BADERIA', 'committer_email': 'palash.baderia@outlook.com', 'commit_date': datetime.datetime(2020, 6, 12, 11, 15, 3, tzinfo=datetime.timezone.utc)}]",PALASH BADERIA,66828942,palash.baderia@outlook.com,User,,54,,55,45

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7619,21032,375,1134,60352,2462,28,797,"[{'id': 1395508474, 'number': 26041, 'closed': datetime.datetime(2023, 8, 17, 0, 6, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 11, 9, 13, tzinfo=datetime.timezone.utc), 'time_taken': 5317053.0, 'time_delta': '61 days, 12:57:33', 'additions': 251, 'deletions': 2, 'state': 'closed'}, {'id': 1390460309, 'number': 26004, 'closed': None, 'created': datetime.datetime(2023, 6, 13, 11, 58, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 842, 'deletions': 66, 'state': 'open'}, {'id': 1385935287, 'number': 25953, 'closed': datetime.datetime(2023, 7, 7, 0, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 10, 20, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2384614.0, 'time_delta': '27 days, 14:23:34', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1377375083, 'number': 25882, 'closed': datetime.datetime(2023, 6, 5, 18, 59, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 22, 13, 28, tzinfo=datetime.timezone.utc), 'time_taken': 161149.0, 'time_delta': '1 day, 20:45:49', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1364649402, 'number': 25764, 'closed': datetime.datetime(2024, 7, 10, 23, 7, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 25, 12, 20, 12, tzinfo=datetime.timezone.utc), 'time_taken': 35635626.0, 'time_delta': '412 days, 10:47:06', 'additions': 191, 'deletions': 28, 'state': 'closed'}, {'id': 1351147482, 'number': 25601, 'closed': datetime.datetime(2023, 5, 15, 21, 55, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 17, 5, tzinfo=datetime.timezone.utc), 'time_taken': 17422.0, 'time_delta': '4:50:22', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1349062072, 'number': 25572, 'closed': datetime.datetime(2023, 5, 16, 18, 24, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 12, 18, 43, 56, tzinfo=datetime.timezone.utc), 'time_taken': 344440.0, 'time_delta': '3 days, 23:40:40', 'additions': 46, 'deletions': 25, 'state': 'closed'}, {'id': 1315141058, 'number': 25138, 'closed': datetime.datetime(2023, 4, 19, 0, 2, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 15, 14, 45, 4, tzinfo=datetime.timezone.utc), 'time_taken': 292618.0, 'time_delta': '3 days, 9:16:58', 'additions': 14, 'deletions': 5, 'state': 'closed'}, {'id': 1290292898, 'number': 24873, 'closed': datetime.datetime(2023, 4, 7, 17, 9, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 9, 57, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1062713.0, 'time_delta': '12 days, 7:11:53', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 1272134747, 'number': 24651, 'closed': datetime.datetime(2023, 4, 18, 23, 37, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 11, 19, 21, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3298584.0, 'time_delta': '38 days, 4:16:24', 'additions': 21, 'deletions': 14, 'state': 'closed'}, {'id': 1227864363, 'number': 24282, 'closed': datetime.datetime(2023, 2, 3, 18, 48, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 3, 9, 37, 56, tzinfo=datetime.timezone.utc), 'time_taken': 33005.0, 'time_delta': '9:10:05', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1154979813, 'number': 23803, 'closed': datetime.datetime(2023, 1, 23, 23, 10, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 8, 23, 31, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3973124.0, 'time_delta': '45 days, 23:38:44', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 985693858, 'number': 22368, 'closed': None, 'created': datetime.datetime(2022, 7, 3, 10, 41, 59, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 702, 'deletions': 39, 'state': 'open'}, {'id': 978979261, 'number': 22311, 'closed': datetime.datetime(2023, 1, 24, 19, 6, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 25, 9, 17, 37, tzinfo=datetime.timezone.utc), 'time_taken': 18438517.0, 'time_delta': '213 days, 9:48:37', 'additions': 32, 'deletions': 8, 'state': 'closed'}, {'id': 946726127, 'number': 22118, 'closed': datetime.datetime(2023, 4, 7, 2, 33, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 25, 9, 2, 22, tzinfo=datetime.timezone.utc), 'time_taken': 27365452.0, 'time_delta': '316 days, 17:30:52', 'additions': 72, 'deletions': 12, 'state': 'closed'}, {'id': 762905092, 'number': 20033, 'closed': datetime.datetime(2022, 1, 31, 11, 6, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 21, 4, 58, 6, tzinfo=datetime.timezone.utc), 'time_taken': 8834892.0, 'time_delta': '102 days, 6:08:12', 'additions': 31, 'deletions': 0, 'state': 'closed'}]"
