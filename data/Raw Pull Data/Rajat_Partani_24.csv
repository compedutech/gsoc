pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1363756147,[ENH] Added read/write method for network object,"GSoC 2023 Project - Develop IO routines for HNN-core outputs

The idea of the project is to add read/write capabilities for all HNN objects such as Network, Cell, Section, Dipole etc. in the HDF5 format. During the summer, I wrote IO functions for all HNN objects, the associated tests as well as refactored some existing code along the journey.

The following PR contains read/write functions and the associated tests for the Network object. The network class encapsulates objects such as Cell, Section, Cell response and Extracellular arrays. These objects are stored along the network itself. Each and every aspect of the functions is tested and documented. The IO functions are capable of handling all network models in HNN core as well any modified network instances. Capability to saving and loading up simulated networks is also present. 

Some other PRs related to the project are -
- #661 - This PR contains python version of NEURON functions such as `define_shape()` and `distance()`. This is done to reduce the dependency on NEURON for saving a Network. NEURON objects are only needed while simulating a Network now.
- #648 - This PR contains read/write functions and associated tests for the Dipole object.
- #644 - This PR contains read/write functions and associated tests for the Cell response object.
- #654  - This PR reverted the IO functionalities for the Cell response object as they are included in the IO functions for the Network object in #651.

Plans for the project after GSoC - Add load/save buttons in HNN GUI for the Network and Dipole object.",True,651,https://api.github.com/repos/jonescompneurolab/hnn-core/pulls/651,https://github.com/jonescompneurolab/hnn-core/pull/651,closed,1054,3,13,30,14,92,0,0,[],2023-05-24 20:41:06+00:00,2024-01-12 21:24:36+00:00,20133810.0,"233 days, 0:43:30","[{'comment_id': 1204823055, 'comment_body': 'For test-driven development, you can use `pytest` with `--pdb` to directly drop into the interpreter when a test fails. Then you can use `pdb` commands like `p net_jones.cell_types` etc. Just letting you know the different options on debugging efficiently', 'comment_created': datetime.datetime(2023, 5, 24, 22, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1204823877, 'comment_body': 'I think the right way to implement this is to first implement `__eq__` for `Section` and `Cell` object and call them from here. Python builtins already have it implemented so presumably `net.external_drives` etc should be straightforward to check for equality', 'comment_created': datetime.datetime(2023, 5, 24, 22, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1215083123, 'comment_body': 'could this be inferred from `net.gid_ranges` instead of hard coding?', 'comment_created': datetime.datetime(2023, 6, 3, 1, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1215083699, 'comment_body': 'I would make this a method of `Cell` called `as_dict` ... similar to pandas API', 'comment_created': datetime.datetime(2023, 6, 3, 1, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1215083837, 'comment_body': 'same, make it a method', 'comment_created': datetime.datetime(2023, 6, 3, 1, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1215084169, 'comment_body': 'you should add a test in `test_cell.py` for this ... simple way to test is:\r\n\r\n```py\r\ncell2 = cell.copy()\r\nassert cell2 == cell\r\n```', 'comment_created': datetime.datetime(2023, 6, 3, 1, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1215084252, 'comment_body': 'add a test for this method', 'comment_created': datetime.datetime(2023, 6, 3, 1, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1217678023, 'comment_body': 'In `net.copy()` method, the simulation data related to `external drives` and `rec_arrays` eg- `events` is deleted.\r\nIs a similar behavior intended for read\\write functionality?', 'comment_created': datetime.datetime(2023, 6, 5, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1223335882, 'comment_body': 'docstring missing, also add `overwrite` parameter', 'comment_created': datetime.datetime(2023, 6, 8, 17, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1237151002, 'comment_body': ""This is a fair amount of code, I propose moving this to a new file ... `io.py` maybe? You'd basically house all the `write_xxx` functions and `read_xxx` functions there. Then here you'd just call the `write_network` function"", 'comment_created': datetime.datetime(2023, 6, 21, 14, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1237151964, 'comment_body': 'suggest moving this to the PR description ... github has a nice checkbox feature you can use', 'comment_created': datetime.datetime(2023, 6, 21, 14, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1237152919, 'comment_body': 'There would then be a new test file `test_io.py`', 'comment_created': datetime.datetime(2023, 6, 21, 14, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1237160495, 'comment_body': 'does it need to be in the other place now that you have the function call here?', 'comment_created': datetime.datetime(2023, 6, 21, 15, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1237642153, 'comment_body': 'Sure will do this\r\n', 'comment_created': datetime.datetime(2023, 6, 21, 20, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1237643217, 'comment_body': 'Ooh its a pretty cool feature. I just saw it.', 'comment_created': datetime.datetime(2023, 6, 21, 20, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1237643840, 'comment_body': ""I'll try removing it from the other place"", 'comment_created': datetime.datetime(2023, 6, 21, 20, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1237960865, 'comment_body': ""I'm assuming the purpose of this is to overwrite the callable stored in `p_mech`? If so, this will require calling `cell.build()` any time you need to write write cells attached to a `Network` instance, which will in turn imply that we're going to instantiate NEURON objects from within `Network`. I'm just thinking out loud here, but will that cause any unintended issues with the NEURON network? In the past, we've maintained the convention that NEURON objects are only instantiated from `NetworkBuilder` in order to silo how, when, and where such objects are created."", 'comment_created': datetime.datetime(2023, 6, 22, 3, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1238415980, 'comment_body': 'Yes, calling `cell.build()` outside the `NetworkBuilder` does throw an error later when Network is simulated. For resolving it, I first made a copy of the cell and called `build()` on the copy instead of the original. ', 'comment_created': datetime.datetime(2023, 6, 22, 11, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1238511144, 'comment_body': 'get rid of params', 'comment_created': datetime.datetime(2023, 6, 22, 13, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238512322, 'comment_body': '~~~~~', 'comment_created': datetime.datetime(2023, 6, 22, 13, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238519394, 'comment_body': 'import order is incorrect\r\n\r\ngeneral -> least general', 'comment_created': datetime.datetime(2023, 6, 22, 13, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238519833, 'comment_body': 'add test to check each attribute is documented\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 22, 13, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238522369, 'comment_body': '```suggestion\r\nnet = network_model(add_drives_from_params=True)\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 13, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238529174, 'comment_body': ""```suggestion\r\n       for attr in ['cell_response', 'external_drives']:\r\n            if getattr(self, attr) != getattr(other, attr):\r\n                return False\r\n```"", 'comment_created': datetime.datetime(2023, 6, 22, 13, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238529831, 'comment_body': 'include these as well', 'comment_created': datetime.datetime(2023, 6, 22, 13, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238533261, 'comment_body': ""```suggestion\r\n        # order of connections doesn't matter\r\n        for conn in self.connectivity:\r\n```"", 'comment_created': datetime.datetime(2023, 6, 22, 13, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238539953, 'comment_body': 'docstring ...', 'comment_created': datetime.datetime(2023, 6, 22, 13, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238546372, 'comment_body': 'use copy_doc and/or fill_doc. See MNE', 'comment_created': datetime.datetime(2023, 6, 22, 13, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238546631, 'comment_body': 'Author name missing', 'comment_created': datetime.datetime(2023, 6, 22, 13, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1238548267, 'comment_body': '```suggestion\r\n                         [law_2021, calcium, jones_2009])\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 13, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1241001703, 'comment_body': ""Do we know if the NEURON objects are getting properly destroyed and de-referenced after the cell copy is destroyed by the garbage collector? The only reason I'm bringing this up is because great care needs to be taken when handling NEURON network objects which are generally global and have in the past caused caused segmentation faults that are hard to diagnose and/or make tests for.\r\n\r\nIs there a way around this that allows us to maintain our convention of only building NEURON objects from within `NetworkBuilder`? CC'ing @jasmainak and @ntolley for their input."", 'comment_created': datetime.datetime(2023, 6, 25, 2, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1241147311, 'comment_body': ""yeah I agree we need to be careful here. See: https://github.com/jonescompneurolab/hnn-core/blob/c81e5b87fbcc13bd4c6e5a403e838ca63ea16760/hnn_core/network_builder.py#L658 \r\n\r\nThe trade-off is between doing our computation ... which can be error-prone if we don't get the positions of the segments exactly right. Neuron does some mumbo-jumbo here:\r\n\r\nhttps://github.com/jonescompneurolab/hnn-core/blob/c81e5b87fbcc13bd4c6e5a403e838ca63ea16760/hnn_core/cell.py#L431-L434\r\n\r\nvs\r\n\r\npotentially slowing up or causing segmentation faults in all our simulations that have run the `save` method"", 'comment_created': datetime.datetime(2023, 6, 25, 11, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1241477994, 'comment_body': ""The fact that the segment coordinates prior to NEURON instantiation aren't their final values (and thus need to be re-set using length modifiers) is annoying. Maybe we should rip the bandaid off and fix this, which I think would also nullify the need to build the NEURON cells in order to write the network."", 'comment_created': datetime.datetime(2023, 6, 26, 3, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1242167082, 'comment_body': ""I'm all for it. Do we need the length for any purpose? I seem to remember that either you or @ntolley were experimenting with changing the length of the neurons ... or do you propose changing the coordinates of the neuron to match the length, that may lead to some tiny numerical inaccuracies"", 'comment_created': datetime.datetime(2023, 6, 26, 13, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1242400936, 'comment_body': ""I'm proposing the latter, which I think would allow us to get rid of the length parameter. While this may introduce small numerical differences compared to what we currently have, it's a much more sustainable solution."", 'comment_created': datetime.datetime(2023, 6, 26, 15, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1242991154, 'comment_body': 'what would be concrete steps for @raj1701 ?\r\n\r\n1. Raise warning if length is defined in `param` file? It should say that it has no effect. Same with network attribute : they should not be modifiable\r\n2. Update the coordinates here to match the default length parameters: https://github.com/jonescompneurolab/hnn-core/blob/c81e5b87fbcc13bd4c6e5a403e838ca63ea16760/hnn_core/cells_default.py#L69-L77\r\n3. Remove `h.define_shape` line\r\n\r\nAnything else I missed? Does this sound doable @raj1701 ? Any inputs @ntolley ?', 'comment_created': datetime.datetime(2023, 6, 27, 0, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1244100964, 'comment_body': 'I think there are a quite a few params in the param files that are silently ignored already, right? Since most of this stuff is already specified in [`params_default.py`](https://github.com/jonescompneurolab/hnn-core/blob/c81e5b87fbcc13bd4c6e5a403e838ca63ea16760/hnn_core/params_default.py#L286), is the param file warning necessary?\r\n\r\nWe should also remove the lines where the NEURON length and radius attributes are set (see [here](https://github.com/jonescompneurolab/hnn-core/blob/c81e5b87fbcc13bd4c6e5a403e838ca63ea16760/hnn_core/cell.py#L409C1-L412C43)).', 'comment_created': datetime.datetime(2023, 6, 27, 17, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1307550939, 'comment_body': 'is this still needed?', 'comment_created': datetime.datetime(2023, 8, 28, 15, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1308165221, 'comment_body': 'No its not.\r\nI will rebase it and bring it to a working condition today. Will need to remove some things.', 'comment_created': datetime.datetime(2023, 8, 29, 3, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1310748579, 'comment_body': '```suggestion\r\nimport os.path as op\r\n\r\nfrom numpy.testing import assert_allclose\r\n```\r\n\r\nseparate system builtin imports from other libraries', 'comment_created': datetime.datetime(2023, 8, 30, 19, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310754762, 'comment_body': 'put the import at the top of the function', 'comment_created': datetime.datetime(2023, 8, 30, 19, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310756549, 'comment_body': 'I would actually do the nested import in the `write` method', 'comment_created': datetime.datetime(2023, 8, 30, 19, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310757471, 'comment_body': 'is this still true?', 'comment_created': datetime.datetime(2023, 8, 30, 20, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1310851664, 'comment_body': ""Is this tested anywhere? Couldn't find any down below"", 'comment_created': datetime.datetime(2023, 8, 30, 21, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310854412, 'comment_body': 'Nevermind! I see where it shows up in the net __eq__ comparison', 'comment_created': datetime.datetime(2023, 8, 30, 21, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310857633, 'comment_body': 'Are there two `__eq__` functions for this class? I think one is being overridden ', 'comment_created': datetime.datetime(2023, 8, 30, 21, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310858058, 'comment_body': ""I don't believe this is tested explicitly"", 'comment_created': datetime.datetime(2023, 8, 30, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310859248, 'comment_body': 'This could be tested very quickly', 'comment_created': datetime.datetime(2023, 8, 30, 21, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310860013, 'comment_body': 'needs a test', 'comment_created': datetime.datetime(2023, 8, 30, 21, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310862795, 'comment_body': '```suggestion\r\n                if not np.testing.assert_almost_equal(self_end_pt,\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 8, 30, 21, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310864313, 'comment_body': 'I think you are actually returning `False` when they are equal here.\r\n\r\nAlso no need to have `self_end_pt != other_end_pt` above. I would just default to the `np.testing.assert_almost_equal` every time you check equality.', 'comment_created': datetime.datetime(2023, 8, 30, 21, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310870126, 'comment_body': ""I'm not sure I remember, what is the bug?"", 'comment_created': datetime.datetime(2023, 8, 30, 21, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1310873285, 'comment_body': 'Comment for everyone, @jasmainak @rythorpe @raj1701 \r\n\r\nAny way we can add a safe guard to make sure the equality operation checks any new attributes added to the network? Ideally something that breaks the code when you add a public attribute not reflected in this list.', 'comment_created': datetime.datetime(2023, 8, 30, 21, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1313217341, 'comment_body': 'We could potentially use `self.__dict__` which should return a dict of all attribute names and their respective values for the given object instance.', 'comment_created': datetime.datetime(2023, 9, 1, 16, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1313219515, 'comment_body': 'Or the [`dir()`](https://docs.python.org/3/library/functions.html#dir) built-in....', 'comment_created': datetime.datetime(2023, 9, 1, 16, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rythorpe', 'type': 'User'}, {'comment_id': 1315174999, 'comment_body': 'No, its not. Will make this change\r\n', 'comment_created': datetime.datetime(2023, 9, 4, 19, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1317743100, 'comment_body': ""I don't see any of this getting rendered here: https://output.circle-artifacts.com/output/job/0f0c9fc8-ab90-49f1-90eb-558f1ecf063b/artifacts/0/html/generated/hnn_core.Network.html#hnn_core.Network.write"", 'comment_created': datetime.datetime(2023, 9, 6, 19, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1317768769, 'comment_body': 'you might want to try having a separate element for each argument ... it will also maximize reusability', 'comment_created': datetime.datetime(2023, 9, 6, 20, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1322395085, 'comment_body': 'I made this change. But no matter how much I try it is not rendering headings correctly. For example - I want `cell type description` as a heading same as `Parameters` but it is not rendering. I read some numpy docs that only special keywords such as `Parameters`, `Returns`, `Yields` etc are rendered as headings - https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard. ', 'comment_created': datetime.datetime(2023, 9, 12, 5, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1322395303, 'comment_body': 'Sure will make this change.', 'comment_created': datetime.datetime(2023, 9, 12, 5, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1322398268, 'comment_body': 'Its not a bug exactly. From what I remember `vsec` and `isec` were not getting compared in the `__eq__` method and putting this logic there was breaking some flow. I will look into it again and figure out a way to place in the `__eq__` method as that is the correct place for such comparison.', 'comment_created': datetime.datetime(2023, 9, 12, 5, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1326011541, 'comment_body': 'Moved this to __eq__ in cell response', 'comment_created': datetime.datetime(2023, 9, 14, 14, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1326034085, 'comment_body': 'So I found out `np.testing.assert_almost_equal` returns `None` when the condition is true. `None` is treated as `false` in `if` condition', 'comment_created': datetime.datetime(2023, 9, 14, 14, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1326036045, 'comment_body': 'There is one each for Section and Cell classes', 'comment_created': datetime.datetime(2023, 9, 14, 14, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1326049013, 'comment_body': 'We are using `copy doc` decorator for `write` method, hence importing `write_network` inside `net.write` is not working. Doing it inside the class leads to circular import.', 'comment_created': datetime.datetime(2023, 9, 14, 14, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1326140398, 'comment_body': 'public method without docstring', 'comment_created': datetime.datetime(2023, 9, 14, 15, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1329134101, 'comment_body': ""reminder to change `save_unsimulated` to `write_cell_response=True` and `write_extracellular_array=True`. Analogously in the read function. I think it's the least ambiguous way to do this. "", 'comment_created': datetime.datetime(2023, 9, 18, 18, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1329305386, 'comment_body': 'also I think `overwrite` should be `False` by default', 'comment_created': datetime.datetime(2023, 9, 18, 21, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332345556, 'comment_body': 'public method is missing docstring', 'comment_created': datetime.datetime(2023, 9, 21, 1, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332346377, 'comment_body': ""you have an extra tab level which is making the rendering appear as if it's quoted:\r\n\r\nhttps://output.circle-artifacts.com/output/job/2e226fdd-4b37-4b45-84b2-23faa4488796/artifacts/0/html/network_file_desc.html"", 'comment_created': datetime.datetime(2023, 9, 21, 1, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332346875, 'comment_body': 'can you add some more information what the file structure is like? what is the file format etc? we need to provide some more information for users if they open the file using other tools and also for documentation', 'comment_created': datetime.datetime(2023, 9, 21, 1, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332348170, 'comment_body': ""don't add it here. You can add a line in the Readme linking to this file. It should say something to the effect that hnn-core uses hdf5 for IO and that the description of the file structure can be found here and the API of the functions for the IO can be found here"", 'comment_created': datetime.datetime(2023, 9, 21, 1, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332349504, 'comment_body': ""is this actually used somewhere? If not let's remove. We should keep the minimum required. The more code we have, the more we have to maintain"", 'comment_created': datetime.datetime(2023, 9, 21, 1, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332350187, 'comment_body': 'you need to change `save_unsimulated`', 'comment_created': datetime.datetime(2023, 9, 21, 1, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332350238, 'comment_body': 'private function?', 'comment_created': datetime.datetime(2023, 9, 21, 1, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332350603, 'comment_body': 'missing docstring', 'comment_created': datetime.datetime(2023, 9, 21, 1, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1332351001, 'comment_body': ""let's remove entries which are not used anywhere and keep the bare minimum. This PR has become too big and I worry about maintaining the code."", 'comment_created': datetime.datetime(2023, 9, 21, 1, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1335227921, 'comment_body': 'What was the name we decided? `save_output`?', 'comment_created': datetime.datetime(2023, 9, 24, 18, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1335227981, 'comment_body': 'Then accordingly `read_raw` will become `read_output`?', 'comment_created': datetime.datetime(2023, 9, 24, 18, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1335228441, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2023, 9, 24, 18, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1335229622, 'comment_body': 'Should we give parameters `write_cell_response` and `write_extracellular_array` separately. `write_output` might be better because some simulation outputs are linked to `external_drives` also.', 'comment_created': datetime.datetime(2023, 9, 24, 18, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1337651897, 'comment_body': 'yep, exactly! `save_output` and `read_output`', 'comment_created': datetime.datetime(2023, 9, 26, 18, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1337657086, 'comment_body': '`external_drives` are definitely not ""outputs"" ... I see now why it was called ""unsimulated"". But we should do the following:\r\n\r\nwhen writing: `save_output=False` will save network and external drives but not extracellular array and cell response.\r\n\r\nwhen reading, two different parameters: `read_drives=True` will also read the external drives and `read_output=True` will also read the extracellular array and cell response', 'comment_created': datetime.datetime(2023, 9, 26, 18, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jasmainak', 'type': 'User'}, {'comment_id': 1338866398, 'comment_body': ""If `read_drives=False` we won't be attaching drives at all?"", 'comment_created': datetime.datetime(2023, 9, 27, 16, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1338916915, 'comment_body': '`assert (net == ""net"") == False.`\r\nIs this test fine?\r\n', 'comment_created': datetime.datetime(2023, 9, 27, 16, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'raj1701', 'type': 'User'}, {'comment_id': 1340290480, 'comment_body': '```suggestion\r\nhdf5 is the file format used for storing the Network object. The network is stored in a multi-level format. The first level consists of the network attributes.\r\n```\r\n\r\nUsing ""layer"" as the terminology might get confusing, as there is the biologically ""layers"" of the model', 'comment_created': datetime.datetime(2023, 9, 28, 14, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1340291516, 'comment_body': '```suggestion\r\nattribute therefore in the first level. The description of each cell type is in level 2. Each cell has various sections. The description of a section is in level 3.\r\n```', 'comment_created': datetime.datetime(2023, 9, 28, 14, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1340293709, 'comment_body': '```suggestion\r\nN_pyr_x : int\r\n    Number of cells (x).\r\nN_pyr_y : int\r\n    Number of cells (y).\r\n```', 'comment_created': datetime.datetime(2023, 9, 28, 14, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1340326676, 'comment_body': '```suggestion\r\n    with pytest.raises(NotImplemented):\r\n        net == ""net""\r\n```\r\nThis is a more robust test for this error', 'comment_created': datetime.datetime(2023, 9, 28, 15, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1340327866, 'comment_body': '```suggestion\r\n    with pytest.raises(NotImplemented):\r\n        net.rec_arrays[\'arr1\'] == ""extArr""\r\n```', 'comment_created': datetime.datetime(2023, 9, 28, 15, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1340330389, 'comment_body': '\r\n\r\n```suggestion\r\n    with pytest.raises(NotImplemented):\r\n        cell1 == ""cell""\r\n\r\n    # Test other not NotImplemented for Section Class\r\n    with pytest.raises(NotImplemented):\r\n        cell1.sections[\'soma\'] == ""section""\r\n```', 'comment_created': datetime.datetime(2023, 9, 28, 15, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}, {'comment_id': 1340372354, 'comment_body': ""Oh I think this is why the pytest.raises test didn't work. You're returning `NotImplemented`, but you actually need to do `raise NotImplemented` (check out how the other errors get raised)"", 'comment_created': datetime.datetime(2023, 9, 28, 15, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ntolley', 'type': 'User'}]","[{'commit_sha': '5d787332c09909db4a6826be2453fda9dd866b92', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6116c4ee7aa58701071f012a66bb27acdf77972d', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc10f439f4bedbe10aebfea1aede453128c80f75', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b510585a2b2c850d377b59487652393bef97d60', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eae7982aa521c52f3107b9442f87420fe081e660', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44f8809645cd4fc1d3b8ac1f25031b2459122363', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee149ef1ea200e56c875183bb9002d7e1a093e7', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2053b913ea406fa83d502fe38210de673d7a15', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c666eb85b4fa7fd75382b105ef22eed14e17c11a', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f35e6fdf64a1647d190d27719a2e93539d70550', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b14f2fb6651fa5bf5ef0ba20f10651f476f5b4', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '622bd3e00db53decc71122020a70c1a89990adac', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6434328386761deedde401aeb8e13451c536d4f4', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c4f73a82b8485b17bd9f4b967322a88d21ca7cb', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2461b71ad8ee1b6690146b72500b75b58a41f4a8', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36f058006ccb7953f428340b44c6b63f4fcfc42a', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '535b6cff775f570fbf8645edf15a416a621c3abc', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af1bcc4e1da87240e516aecb9c823c9c1858a252', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33826c755e5be9821f5c1b824ca57d1db6ec3e0b', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f029f11d272a094edc446740b746a22e297e62ae', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91b663a3c4435e97620ed282143971a68e58dc8b', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35330e8be54f631dfb5b713e6546fd8d13456cd6', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5deb3c21993221c1c1b4b51ecf323384c2420cc8', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '501b81f01f1c6fcd3a2929e8718b36d4148b2f56', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '523fb8c41a08f3d48d81a894a86a62331e1d97f8', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f90f7f2a5f728cc0e80467c0a8ef60488666c1e', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96965c6ac7a02443287f8c6a1bb52437991a274c', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ab97142840ff650ebe54ab5a3e564d297034c5', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda152ebbabe3daacc4c6cd0f8cca1cd9d7262f0', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4097cff50140196ffa1716de2b742a08fc8b0d', 'committer_username': 'raj1701', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 9, 18, 35, 32, tzinfo=datetime.timezone.utc)}]",,63421712,,User,,18,,6,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
168215891,hnn-core,jonescompneurolab/hnn-core,Python,51,53,9,26,2761,81,10,25,"[{'id': 1417171536, 'number': 661, 'closed': datetime.datetime(2023, 8, 25, 14, 38, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 1, 40, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4625875.0, 'time_delta': '53 days, 12:57:55', 'additions': 337, 'deletions': 88, 'state': 'closed'}, {'id': 1391471147, 'number': 654, 'closed': datetime.datetime(2023, 6, 20, 23, 8, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 14, 0, 33, 5, tzinfo=datetime.timezone.utc), 'time_taken': 599737.0, 'time_delta': '6 days, 22:35:37', 'additions': 35, 'deletions': 144, 'state': 'closed'}, {'id': 1363756147, 'number': 651, 'closed': datetime.datetime(2024, 1, 12, 21, 24, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 24, 20, 41, 6, tzinfo=datetime.timezone.utc), 'time_taken': 20133810.0, 'time_delta': '233 days, 0:43:30', 'additions': 1054, 'deletions': 3, 'state': 'closed'}, {'id': 1363717514, 'number': 650, 'closed': datetime.datetime(2023, 5, 24, 20, 6, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 24, 20, 4, 55, tzinfo=datetime.timezone.utc), 'time_taken': 97.0, 'time_delta': '0:01:37', 'additions': 281, 'deletions': 7, 'state': 'closed'}, {'id': 1357622223, 'number': 648, 'closed': datetime.datetime(2023, 6, 20, 23, 5, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 19, 20, 17, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2774862.0, 'time_delta': '32 days, 2:47:42', 'additions': 197, 'deletions': 13, 'state': 'closed'}, {'id': 1349602245, 'number': 644, 'closed': datetime.datetime(2023, 5, 21, 22, 7, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 13, 17, 22, 9, tzinfo=datetime.timezone.utc), 'time_taken': 708295.0, 'time_delta': '8 days, 4:44:55', 'additions': 168, 'deletions': 7, 'state': 'closed'}, {'id': 1268220072, 'number': 613, 'closed': None, 'created': datetime.datetime(2023, 3, 8, 17, 42, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 134, 'deletions': 19, 'state': 'open'}, {'id': 1265869565, 'number': 612, 'closed': datetime.datetime(2023, 3, 8, 19, 27, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 7, 8, 58, 21, tzinfo=datetime.timezone.utc), 'time_taken': 124165.0, 'time_delta': '1 day, 10:29:25', 'additions': 32, 'deletions': 15, 'state': 'closed'}, {'id': 1264639925, 'number': 606, 'closed': datetime.datetime(2023, 3, 16, 22, 15, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 14, 56, 31, tzinfo=datetime.timezone.utc), 'time_taken': 890367.0, 'time_delta': '10 days, 7:19:27', 'additions': 16, 'deletions': 2, 'state': 'closed'}]"
