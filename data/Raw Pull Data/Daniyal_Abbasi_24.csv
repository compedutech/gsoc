pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
650881522,Fixed #33012 -- Added Redis cache backend.,"ticket-33012

This PR is in accordance with this [GSoC project](https://summerofcode.withgoogle.com/projects/#6292871491092480)
The detailed proposal can be found [here](https://docs.google.com/document/d/1_gIa_17uCNlwJTmqiMLkiVtRgTOD2MvHpy4NNFvKBWc/edit?usp=sharing)

This PR aims at adding support for Redis to be used as a caching backend with Django. As redis is the most popular caching backend, adding it to django.core.cache module would be a great addition for developers who previously had to rely on the use of third party packages.

Major Tasks : 
- [x] Create RedisCache as a subclass of the BaseCache class and implement methods
- [x] Create PickleSerializer to serialize data before storing it into redis
- [x] Extend existing tests for new class
- [x] Add Documentation and Release Notes
- [x] Add additional tests for RedisCache and RedisCacheClient
- [x] Moving `PickleSerializer` from `django.contrib.sessions.serializers` to `django.core.serializers.base`. See [comment](https://github.com/django/django/pull/14437/#discussion_r699197718) #14827

Remaining Tasks :
- [x] Waiting for #14802
- [ ] Documenting extra arguments. See [comment](https://github.com/django/django/pull/14437/#discussion_r699194492)

Future Tasks : 
- [ ] Add support for providing `username` and `password` in `OPTIONS`. This will be possible in the upcoming version of redis-py
- [ ] Milli second support (To be discussed)
",True,14437,https://api.github.com/repos/django/django/pulls/14437,https://github.com/django/django/pull/14437,closed,398,10,8,1,45,195,0,1,[],2021-05-24 00:10:33+00:00,2021-09-14 14:18:08+00:00,9814055.0,"113 days, 14:07:35","[{'comment_id': 656069720, 'comment_body': ""I'd push the `default` handling down to the underlying client implementation. This keeps things consistent with how it is implemented in the memcached backend. See [`BaseMemcachedCache.get()`](https://github.com/django/django/blob/4f0a034b9e42048b782f5265344e026902bd3e95/django/core/cache/backends/memcached.py#L77).\r\n\r\n```suggestion\r\n        return self._caches.get(key, default)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 22, 10, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656071747, 'comment_body': 'I guess we can avoid keyword args here for consistency.\r\n\r\n```suggestion\r\n        self._caches.set(key, value, self.get_backend_timeout(timeout))\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 10, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656074415, 'comment_body': 'I think this is a typo:\r\n\r\n```suggestion\r\n    def _cache(self):\r\n```\r\n\r\nThere is only one cache client class instance returned, cf. `BaseMemcachedCache._cache`', 'comment_created': datetime.datetime(2021, 6, 22, 10, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656075986, 'comment_body': 'We should try to keep similar naming, like `BaseMemcachedCache._class`:\r\n```suggestion\r\n        self._class = self._options.get(""CLIENT"", RedisCacheClient)\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 10, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656077860, 'comment_body': 'Do we need to allow customisation of the client class via a setting? That seems like bikeshedding.\r\n\r\nIf someone wanted to write and provide a custom client they can subclass `RedisCache` themselves.', 'comment_created': datetime.datetime(2021, 6, 22, 10, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656105087, 'comment_body': ""It should be possible to support `default` with `.get()` by changing `RedisCacheClient.get()`:\r\n\r\n```python\r\n    def get(self, key, default=None):\r\n        client = self.get_client(key)\r\n        value = client.get(key)\r\n        if value is None:\r\n            return default\r\n        return self._serializer.loads(value)\r\n```\r\n\r\nThis works because `.get()` provided by the `redis-py` client returns `bytes` if the value is found and `None` if it is not found.\r\n\r\nOn top of that, if we were to store a literal `None`, we would be pickling that value so it would be returned as `b'\\x80\\x05N.` - so we can distinguish between `None` stored in Redis vs. `None` being returned because the key was missing. See documentation for [`Redis.get()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.get).\r\n\r\nSo, with the above tweak, we can remove this:\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 22, 10, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656105810, 'comment_body': 'When fixing the implementation of `RedisCacheClient.get()` to support `default`, this should work fine.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 10, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656107360, 'comment_body': 'As this is a docstring, prefer triple double quotes.\r\n```suggestion\r\n""""""Redis cache backend""""""\r\n```\r\n_(We don\'t change existing cases to avoid churn, but it\'ll all eventually be solved when `black` is out of beta.)_', 'comment_created': datetime.datetime(2021, 6, 22, 10, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 656108433, 'comment_body': ""The current coding style prefers single quotes. Please fix throughout, but new code only.\r\n\r\n```suggestion\r\n        if 'PICKLE_VERSION' in options:\r\n```\r\n\r\n_(Eventually it will be double quotes when we can use `black`.)_"", 'comment_created': datetime.datetime(2021, 6, 22, 10, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 657770201, 'comment_body': 'Alright!', 'comment_created': datetime.datetime(2021, 6, 24, 9, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 657783600, 'comment_body': 'Yes I was thinking of a similar solution. On it!\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 9, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 657784347, 'comment_body': 'I would follow PEP 257 with triple double quotes as suggested by @pope1ni and the ending period.\r\n```suggestion\r\n""""""Redis cache backend.""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 9, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pauloxnet', 'type': 'User'}, {'comment_id': 657789858, 'comment_body': 'Alright!', 'comment_created': datetime.datetime(2021, 6, 24, 9, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 657796675, 'comment_body': 'I kept this as in my GSoC proposal, I wanted to implement two client classes. For multiple cache server, one would follow a replication based approach and the other would be sharding based. However, this can be added later on when (if) the other client might be implemented. So, should I remove this for now?', 'comment_created': datetime.datetime(2021, 6, 24, 9, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 657927858, 'comment_body': ""I understand. Although I'm wondering if this is something that can just be configured by passing something in `OPTIONS` that is passed to the client class such that you don't need two separate client classes?\r\n\r\n(Failing that, a separate backend, e.g. `RedisShardedCache`, might make more sense? I know we are implementing the client class here, but for all other backends we are using an existing client class from a third-party package - we are never exposing knowledge of the client class to the end user.)\r\n\r\nEither way, if that sharded implementation is coming later (whether in another commit or PR), let's not add this client class loading stuff now. It doesn't add any benefit to this initial implementation other than making it more complex to review."", 'comment_created': datetime.datetime(2021, 6, 24, 13, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 657964200, 'comment_body': 'This comment is no longer correct and can be removed.', 'comment_created': datetime.datetime(2021, 6, 24, 13, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 657965058, 'comment_body': 'We could flatten this?\r\n\r\n```suggestion\r\n        return default if value is None else self._serializer.loads(value)\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 13, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658106647, 'comment_body': ""Shouldn't this be writable?\r\n\r\n```suggestion\r\n        client = self.get_client(None, write=True)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 24, 16, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658107809, 'comment_body': 'Can we make `key` set to `None` by default to avoid needing to pass `None` explicitly below?\r\n\r\n```suggestion\r\n    def get_client(self, key=None, write=False):\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 16, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658109729, 'comment_body': ""We don't need the extra variable here.\r\n\r\n```suggestion\r\n        client.mset({k: self._serializer.dumps(v) for k, v in data.items()})\r\n```"", 'comment_created': datetime.datetime(2021, 6, 24, 16, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658110972, 'comment_body': '~~Do we want to use [`.setex()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.setex)?~~\r\n```suggestion\r\n        client.setex(key, timeout, self._serializer.dumps(value))\r\n```\r\n~~This is just an observation that can be ignored. Maybe it is better to keep `.set()` as for `.add()` above where there is no combination of `.setex()` and `.setnx()`, requiring the use of `.set()` instead.~~\r\n\r\n**Edit:** Definitely ignore this as I read the following [here](https://redis.io/commands/set):\r\n> Note: Since the SET command options can replace SETNX, SETEX, PSETEX, GETSET, it is possible that in future versions of Redis these commands will be deprecated and finally removed.', 'comment_created': datetime.datetime(2021, 6, 24, 16, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658117875, 'comment_body': ""Don't use `.items()` if you don't need the values.\r\n```suggestion\r\n        # Set timeout for each key individually as .mset() doesn't support\r\n        # setting the timeout for all keys at the same time.\r\n        for key in data:\r\n            if timeout is None:\r\n                client.persist(key)\r\n            else:\r\n                client.expire(key, timeout)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 24, 16, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658186788, 'comment_body': ""Please move `add()` above `get()` to keep the order consistent with the definition in `BaseCache` and other backends. (It's probably worth ordering the methods in `RedisCacheClient` in the same way.)"", 'comment_created': datetime.datetime(2021, 6, 24, 18, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658190292, 'comment_body': ""Please move `clear()` below `set_many()` to keep the order consistent with the definition in BaseCache and other backends. (It's probably worth ordering the methods in `RedisCacheClient` in the same way.)"", 'comment_created': datetime.datetime(2021, 6, 24, 18, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658202837, 'comment_body': 'Please re-wrap this comment at 79 chars.', 'comment_created': datetime.datetime(2021, 6, 24, 18, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658203249, 'comment_body': ""I don't think this comment adds much value.\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 24, 18, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658203303, 'comment_body': ""I don't think this comment adds much value.\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 24, 18, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658205147, 'comment_body': 'Trailing comma...\r\n```suggestion\r\n    exclude=redis_excluded_caches,\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 18, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658211650, 'comment_body': ""As discussed earlier, I think that we should strip out the `CLIENT` bit for now to keep things simple. It is currently untested anyway and should be added if we decide to take this approach over providing a subclass of `RedisCache` with `self._class` overridden to a different client class. I suspect, however, that we should be able to do most things by passing options instead.\r\n```suggestion\r\n        self._class = RedisCacheClient\r\n        self._options = params.get('OPTIONS') or {}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 24, 19, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658226217, 'comment_body': ""If `timeout` is `DEFAULT_TIMEOUT` then `self.default_timeout` is what was passed in to the cache as `TIMEOUT`. This could conceivably be `None` so we cannot just use `return int(timeout)`. We should allow returning `None` from here which would allow all keys to be persistent.\r\n\r\nDjango cache documentation ([1](https://docs.djangoproject.com/en/3.2/topics/cache/#cache-arguments), [2](https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-CACHES-TIMEOUT)) specifically mentions that the default timeout is 300 seconds. If the value is `None`, then the key will never expire. If the value is `0` then the key will expire immediately.\r\n\r\nLooking at the [`EXPIRE`](https://redis.io/commands/expire) documentation for Redis it states:\r\n\r\n> Note that calling EXPIRE/PEXPIRE with a non-positive timeout or EXPIREAT/PEXPIREAT with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired).\r\n\r\nSo it sounds like the default behaviour of Redis is what we would expect, no? And thus we can just do the following:\r\n\r\n```suggestion\r\n        if timeout == DEFAULT_TIMEOUT:\r\n            timeout = self.default_timeout\r\n\r\n        # The key will be made persistent if None used as a timeout.\r\n        # Non-positive values will cause the key to be deleted.\r\n        return None if timeout is None else int(timeout)\r\n```\r\n\r\nI'm aware that Redis supports using `PX` instead of `EX` for millisecond-precision timeouts instead of second-precision. Likewise there is `PEXPIRE` over plain `EXPIRE`. Perhaps for the Redis backend we should allow float values to be provided and always multiply up to milliseconds. This gives more flexibility. I haven't implemented that here, but it is something that could be investigated."", 'comment_created': datetime.datetime(2021, 6, 24, 19, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658228474, 'comment_body': 'I think that we should unpack `self._options` here and make them arguments of `RedisCacheClient.__init__()`.\r\n\r\n```suggestion\r\n        return self._class(self._servers, **self._options)\r\n```\r\n\r\nThis is how we approach this for all of the memcached backends using client classes implemented in third-party packages.', 'comment_created': datetime.datetime(2021, 6, 24, 19, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658230123, 'comment_body': ""I don't think there is any point in creating `BaseCacheSerializer` and we can rename `PickleCacheSerializer`:\r\n```suggestion\r\nclass PickleSerializer:\r\n```"", 'comment_created': datetime.datetime(2021, 6, 24, 19, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658231598, 'comment_body': 'Rather than passing all of `OPTIONS` here we should only pass the protocol:\r\n```suggestion\r\n    def __init__(self, protocol=None):\r\n        self._protocol = pickle.HIGHEST_PROTOCOL if protocol is None else protocol\r\n\r\n    def dumps(self, value):\r\n        return pickle.dumps(value, self._protocol)\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 19, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658233649, 'comment_body': 'Based on the change above to use `**self._options` in `RedisCache._cache()`, we should replace `options` with keys that are expected.\r\n\r\nAs it stands at the moment a key could be misspelled in `OPTIONS` and passed here but not used.\r\n\r\nBased on the changes requested above, we should at least have `pickle_protocol=None` here.', 'comment_created': datetime.datetime(2021, 6, 24, 19, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658234304, 'comment_body': 'And this would be...\r\n```suggestion\r\n        self._serializer = PickleSerializer(pickle_protocol)\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 19, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658538299, 'comment_body': 'Ah yes. Missed this.', 'comment_created': datetime.datetime(2021, 6, 25, 7, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658541079, 'comment_body': 'Yes and furthermore, `.setex()` does not take `None` as timeout. Thus we can not set persistant keys using `.setex()`.', 'comment_created': datetime.datetime(2021, 6, 25, 7, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658541944, 'comment_body': 'Fair enough.', 'comment_created': datetime.datetime(2021, 6, 25, 7, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658542881, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 6, 25, 7, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658544846, 'comment_body': 'So basically instead of having separate client class, we make the clients configurable using the `OPTIONS`, right? ', 'comment_created': datetime.datetime(2021, 6, 25, 7, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658551615, 'comment_body': 'Alright. So the changes would be something like\r\n```\r\nclass RedisCacheClient:\r\n    def __init__(self, servers, USERNAME=None, PASSWORD=None, ...):\r\n        ...\r\n        username = USERNAME\r\n        ...\r\n```\r\nSomething like this? \r\nOr we could work on a different way to manage the connection pool / authentication etc maybe?', 'comment_created': datetime.datetime(2021, 6, 25, 7, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658554465, 'comment_body': 'I did this so that people can extent the `BaseCacheSerializer` to implement custom serializers. For example, using a msgpack serializer or a yaml serializer as most third party plugin provide this customization. \r\nShould I remove the `BaseCacheSerializer` and leave serializer customizations for the third-party plugins?', 'comment_created': datetime.datetime(2021, 6, 25, 8, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658559770, 'comment_body': 'Sure, this is much more clean.', 'comment_created': datetime.datetime(2021, 6, 25, 8, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658581358, 'comment_body': '`EXPIRE` supports zero and negative timeout but `SET` does not. `SET` only accepts positive non-zero values for expiry time. A work around could be using omitting the use of `ex` and manually using expire to set the timeout.\r\n```\r\ndef set(self, key, value, timeout):\r\n        client = self.get_client(key, write=True)\r\n        client.set(key, self._serializer.dumps(value))\r\n\r\n        if timeout is None:\r\n            client.persist(key)\r\n        else:\r\n            client.expire(key, timeout)\r\n```\r\nHowever, this might not be the cleanest approach in my opinion.', 'comment_created': datetime.datetime(2021, 6, 25, 8, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658586258, 'comment_body': 'For the milli-second precision, there was some discussion [here](https://github.com/jazzband/django-redis/pull/508). We can implement both `expire` as well as `pexpire` here too. However, I still feel milli-second precision might not be that useful for the users. Let me know how I shall proceed.', 'comment_created': datetime.datetime(2021, 6, 25, 8, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658603457, 'comment_body': 'Ah, yes. Good observation. 🙂 ', 'comment_created': datetime.datetime(2021, 6, 25, 8, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658608312, 'comment_body': ""Yes. ISTM that it is worth trying to do it via options first and then we can always look to use a different client class if it becomes absolutely necessary. Let's start out with something simple.\r\n\r\nThe other benefit is that we (well, you!) are writing the client class and not linking to a third-party package. As such we can adjust it to fit our needs exactly. (When I wrote the `PyMemcacheCache` backend I even contributed changes to `pymemcache` to address some issues with compatibility as that was preferable to creating another custom client.)"", 'comment_created': datetime.datetime(2021, 6, 25, 8, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658621668, 'comment_body': ""> `EXPIRE` supports zero and negative timeout but `SET` does not. `SET` only accepts positive non-zero values for expiry time. A work around could be using omitting the use of `ex` and manually using expire to set the timeout.\r\n\r\nI haven't actually tried to see if it works, but the documentation doesn't seem to imply that it does and is as you say. Boo!\r\n\r\nPerhaps the way to handle it is to use the atomic operation if we are able, and fall back to separate operations if we cannot:\r\n\r\n```python\r\n    def set(self, key, value, timeout):\r\n        client = self.get_client(key, write=True)\r\n        value = self._serializer.dumps(value)\r\n        if timeout is None or timeout > 0:\r\n            client.set(key, value, ex=timeout)\r\n        else:\r\n            # Non-positive timeouts are not supported by SET with EX.\r\n            client.set(key, value)\r\n            client.expire(key, timeout)\r\n```\r\n\r\nNote that if `timeout` is `None` we don't need to worry about using `.persist()`. This is because [`SET`](https://redis.io/commands/set) with `ex=None` will discard any existing TTL:\r\n\r\n> Any previous time to live associated with the key is discarded on successful SET operation.\r\n\r\nThis is also mentioned in the documentation for [`EXPIRE`](https://redis.io/commands/expire):\r\n\r\n> The timeout will only be cleared by commands that delete or overwrite the contents of the key, including DEL, SET, GETSET and all the *STORE commands.\r\n\r\nAs long as the value is _replaced_, not merely _altered_ the TTL is removed.\r\n\r\n> For the milli-second precision, there was some discussion [here](https://github.com/jazzband/django-redis/pull/508). We can implement both `expire` as well as `pexpire` here too. However, I still feel milli-second precision might not be that useful for the users. Let me know how I shall proceed.\r\n\r\nWe can leave the millisecond precision stuff for now unless @carltongibson thinks it's worth doing. It'll be an easy follow up as we just need to change `.get_backend_timeout()` to multiply by `1000` and switch over to using `PEXPIRE`, `SET` with `PX`, etc. In other words, we would take `timeout` in fractional seconds and convert to milliseconds for use in the backend internally. (I think it could be useful for users and it has come up in the past - notably memcache doesn't allow for millisecond precision which has been annoying for reducing the duration of certain tests.)"", 'comment_created': datetime.datetime(2021, 6, 25, 9, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658635433, 'comment_body': ""Yup, something like that. I'd go for lowercase options values though.\r\n\r\n`OPTIONS`, as [documented](https://docs.djangoproject.com/en/3.2/topics/cache/#cache-arguments), can take some uppercase keys that are targeted at the non-memcache backends - mainly to deal with culling. But then it says:\r\n\r\n> Memcached backends pass the contents of OPTIONS as keyword arguments to the client constructors, allowing for more advanced control of client behavior. For example usage, see below.\r\n\r\nSo `OPTIONS` is essentially passed to the client constructor, in our case - `RedisCacheClient`. If we look at the examples of options passed to `pylibmc` or `pymemcache` below that, they are all lowercase.\r\n\r\n(You can update this to `Memcache and Redis backends...` with your documentation changes, by the way.)\r\n\r\nWith the options you've added so far, we're probably looking at:\r\n\r\n```python\r\nclass RedisCacheClient:\r\n    def __init__(\r\n        self,\r\n        servers,\r\n        username=None,\r\n        password=None,\r\n        pool_class=None,\r\n        parser_class=None,\r\n        pickle_protocol=None,\r\n    ):\r\n        self._servers = servers\r\n        self._pools = [None] * len(servers)\r\n\r\n        self._pool_class = pool_class or redis.ConnectionPool\r\n        self._client = redis.Redis\r\n        self._serializer = PickleSerializer(pickle_protocol)\r\n\r\n        if parser_class is None:\r\n            parser_class = redis.connection.PythonParser\r\n        elif isinstance(parser_class, str):\r\n            parser_class = import_string(parser_class)\r\n\r\n        self._client_kwargs = {'parser_class': parser_class}\r\n        if username is not None:\r\n            self._client_kwargs['username'] = username\r\n        if password is not None:\r\n            self._client_kwargs['password'] = password\r\n\r\n        ...\r\n```\r\n\r\nI still need to look more into how Redis connections work and review that though, so I'll likely request other changes in this area. But hopefully the above gives an idea of what I was aiming at."", 'comment_created': datetime.datetime(2021, 6, 25, 9, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658638416, 'comment_body': ""I think this can be removed for now. Ultimately we should allow passing the serializer to the client class and just document that it requires `.dumps()` and `.loads()` methods.\r\n\r\nAgain, it just feels a little bit too much at this stage, and it's not hard to add that interface back in if we need to later. I'm just aiming for simplicity to help us with determining what options will be exposed by the client constructor."", 'comment_created': datetime.datetime(2021, 6, 25, 9, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658641917, 'comment_body': ""Based on my analysis in https://github.com/django/django/pull/14437#discussion_r658621668 I'm not sure we need to worry about `.persist()` here either. If [`MSET`](https://redis.io/commands/mset) replaces values like [`SET`](https://redis.io/commands/set) does, they'll be persistent by default. In that case we can simplify this to:\r\n\r\n```python\r\n        # Set timeout for each key individually as .mset() doesn't support\r\n        # setting the timeout for all keys at the same time.\r\n        if timeout is not None:\r\n            for key in data:\r\n                client.expire(key, timeout)\r\n```\r\n\r\nObviously `.touch()` will still need to use `PERSIST` if `timeout` is `None`."", 'comment_created': datetime.datetime(2021, 6, 25, 9, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658698521, 'comment_body': 'Yes this seems to be a better approach. However, for Non-positive timeouts, using `client.set` and then invalidating the key using `client.expire` seems redundant. \r\nWe can keep the function set as\r\n```\r\ndef set(self, key, value, timeout):\r\n        client = self.get_client(key, write=True)\r\n        value = self._serializer.dumps(value)\r\n        if timeout is None or timeout > 0:\r\n            client.set(key, value, ex=timeout)\r\n```\r\nThis would still produce the same results and reduce the call to the redis-server. Only the case where the given key already exists in the cache, we can just remove the call to `set` and keep the call to `expire` to incorporate this case. Something like this I guess,\r\n```\r\n def set(self, key, value, timeout):\r\n        client = self.get_client(key, write=True)\r\n        value = self._serializer.dumps(value)\r\n        if timeout is None or timeout > 0:\r\n            client.set(key, value, ex=timeout)\r\n        else:\r\n            # Non-positive timeouts are not supported by SET with EX.\r\n            client.expire(key, timeout)\r\n```\r\nLet me know what do you feel about this?', 'comment_created': datetime.datetime(2021, 6, 25, 11, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658700322, 'comment_body': 'Yes, by default it sets the key as persistant. Changing this ', 'comment_created': datetime.datetime(2021, 6, 25, 11, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658709477, 'comment_body': 'Another modification we would need to do is in the `add` method.\r\n```\r\n    def add(self, key, value, timeout):\r\n        client = self.get_client(key, write=True)\r\n        value = self._serializer.dumps(value)\r\n\r\n        if timeout is None or timeout > 0:\r\n            return bool(client.set(key, value, ex=timeout, nx=True))\r\n        else:\r\n            result = bool(client.set(key, value, nx=True))\r\n            if result:\r\n                client.expire(key, timeout)\r\n        return result\r\n```\r\nI think this should do it. as this test fails as if expects True to be returned for a 0 timeout. https://github.com/django/django/blob/8a7ac78b706797a03d26b88eddb9d1067ed35b66/tests/cache/tests.py#L617 \r\n', 'comment_created': datetime.datetime(2021, 6, 25, 12, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 658762117, 'comment_body': '> Let me know what do you feel about this?\r\n\r\nYes, the `.set()` for non-positive timeouts is pointless. But we still need to expire the key in case it exists. Instead of using `.expire()`, however, we should just go for `.delete()` instead:\r\n\r\n```python\r\n    def set(self, key, value, timeout):\r\n        client = self.get_client(key, write=True)\r\n        value = self._serializer.dumps(value)\r\n        if timeout is None or timeout > 0:\r\n            client.set(key, value, ex=timeout)\r\n        else:\r\n            client.delete(key)\r\n```\r\n\r\nUsing `.expire(key, 0)` would just cause Redis to perform a delete behind the scenes anyway:\r\n\r\n> Note that calling EXPIRE/PEXPIRE with a non-positive timeout or EXPIREAT/PEXPIREAT with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired).', 'comment_created': datetime.datetime(2021, 6, 25, 13, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658790663, 'comment_body': ""> Another modification we would need to do is in the `add` method.\r\n\r\nHmm. Yeah, that is not pretty, but I can see the problem. This is also more challenging because it should only set the key if it doesn't exist and we don't want to change the TTL of an existing key. Ideally `ex=0` would be possible to avoid this mess, but I think what you've come up with is the best possible. We can condense it slightly though by using `:=` and use `.delete()` instead of `.expire()`:\r\n\r\n```python\r\n    def add(self, key, value, timeout):\r\n        client = self.get_client(key, write=True)\r\n        value = self._serializer.dumps(value)\r\n        if timeout is None or timeout > 0:\r\n            return bool(client.set(key, value, ex=timeout, nx=True))\r\n        else:\r\n            if ret := bool(client.set(key, value, nx=True))\r\n                client.delete(key)\r\n            return ret\r\n```\r\n\r\nInstead of a persistent `.set()` followed by a `.delete()`, we could just alter the timeout to use `px=1` so it expires after 1ms? That means the `else` block could be:\r\n\r\n```python\r\n            if ret := bool(client.set(key, value, px=1, nx=True))\r\n                client.delete(key)\r\n            return ret\r\n```\r\n\r\nOr we could even do away with the `.delete()` as the key will likely have expired before we can execute it:\r\n\r\n```python\r\n            return bool(client.set(key, value, px=1, nx=True))\r\n```\r\n\r\nFurther, if we were to change to using milliseconds, then we can force `0` to be `1` millisecond instead and simplify all of this?"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658794835, 'comment_body': 'As discussed, move into the top of `RedisCacheClient.__init__()`.', 'comment_created': datetime.datetime(2021, 6, 25, 14, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658797710, 'comment_body': ""I don't think we need to worry about converting this from a string. The `protocol` argument is [documented as an integer](https://docs.python.org/3/library/pickle.html#pickle.Pickler).\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658806487, 'comment_body': ""Based on some of the recent review, I think we should consider this some more.\r\n\r\nWe should eliminate negative values. They don't make sense and mean the same as zero - expire (a.k.a delete) the key immediately.\r\n\r\n```python\r\n    def get_backend_timeout(self, timeout=DEFAULT_TIMEOUT):\r\n        if timeout == DEFAULT_TIMEOUT:\r\n            timeout = self.default_timeout\r\n        # The key will be made persistent if None is used as a timeout.\r\n        # A zero timeout will cause the key to be deleted immediately.\r\n        return None if timeout is None else min(0, int(timeout))\r\n```\r\n\r\nFurther to that, *if we move to using millisecond timeouts*, and treating `0` as `1ms` instead, we can simplify much of the rest of the code. In that case we could change the last line to the following:\r\n\r\n```python\r\n        return None if timeout is None else min(0, int(timeout * 1000))\r\n```\r\n\r\nAnd pass `px=1 if timeout == 0 else timeout` where required. Or we could even change the `min(0, ...)` to `min(1, ...)` with some comment... We can sit on this second thought for a little."", 'comment_created': datetime.datetime(2021, 6, 25, 14, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658809396, 'comment_body': ""Although you changed this, I think you missed the the bit in https://github.com/django/django/pull/14437#discussion_r658641917 that the `if` can now go outside of the `for` to avoid a pointless iteration when `timeout` is `None`.\r\n\r\n```suggestion\r\n        # Set timeout for each key individually as .mset() doesn't support\r\n        # setting the timeout for all keys at the same time.\r\n        if timeout is not None:\r\n            for key in data:\r\n                client.expire(key, timeout)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658834011, 'comment_body': 'As discussed, we can simply `.delete()` here when `timeout == 0`. We can do this if we fix `get_backend_timeout()` to prevent negative numbers as mentioned above.\r\n\r\n```suggestion\r\n        if timeout == 0:\r\n            client.delete(key)\r\n        else:\r\n            client.set(key, value, ex=timeout)\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 15, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658837129, 'comment_body': 'As discussed, we can simplify this a bit, also benefiting from the `min(0, ...)` in `get_backend_timeout()`:\r\n\r\n```suggestion\r\n        if timeout == 0:\r\n            if ret := bool(client.set(key, value, nx=True))\r\n                client.delete(key)\r\n            return ret\r\n        else:\r\n            return bool(client.set(key, value, ex=timeout, nx=True))\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 15, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658839037, 'comment_body': 'Ensure we return booleans here for consistency?\r\n\r\n```suggestion\r\n        if timeout is None:\r\n            return bool(client.persist(key))\r\n        else:\r\n            return bool(client.expire(key, timeout))\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 15, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658856381, 'comment_body': 'So [`.flushall()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.flushall) will clear everything in all databases. (Apparently Redis has 16 logical databases that can be switched between.) We should change this to use [`.flushdb()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.flushdb) instead and only clear the current database. For consistency we can also ensure this returns a boolean.\r\n\r\n```suggestion\r\n        return bool(client.flushdb())\r\n```\r\n\r\n(We should probably also expose a `db` parameter via `RedisCacheClient.__init__()` which can be passed through via `_client_kwargs`. It should have a default value of `0`.)', 'comment_created': datetime.datetime(2021, 6, 25, 15, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658856849, 'comment_body': ""Let's make `write` a keyword-only argument.\r\n\r\n```suggestion\r\n    def get_client(self, key=None, *, write=False):\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 15, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658859645, 'comment_body': '```suggestion\r\nRedis\r\n-----\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 15, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658860268, 'comment_body': ""We don't need to mention the developer survey reasoning in the documentation. It's a bit irrelevant.\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 15, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 658861893, 'comment_body': 'I was thinking about this some more and thought that we could wrap this with [`.pipeline()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.pipeline)?', 'comment_created': datetime.datetime(2021, 6, 25, 15, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 659018972, 'comment_body': '```\r\n    return bool(client.set(key, value, px=1, nx=True))\r\n```\r\nOnly setting px=1 does not work as this test fails.\r\nhttps://github.com/django/django/blob/8a7ac78b706797a03d26b88eddb9d1067ed35b66/tests/cache/tests.py#L618\r\n```\r\n if ret := bool(client.set(key, value, px=1, nx=True))\r\n        client.delete(key)\r\n    return ret\r\n```\r\nThe above solution works but setting `px=1` seems redundant and can be removed as we are using `.delete()`', 'comment_created': datetime.datetime(2021, 6, 25, 20, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 659024187, 'comment_body': 'Alright!', 'comment_created': datetime.datetime(2021, 6, 25, 20, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 659027250, 'comment_body': ""Yes we can eliminate the negative values. However, I think we'll have to use `max`. Holding on to the `px` part for now, making the other changes."", 'comment_created': datetime.datetime(2021, 6, 25, 20, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 659030116, 'comment_body': 'Ahh yes I missed this.\r\n\r\nYes can came execute them in a pipeline. Something like this I guess,\r\n```\r\ndef set_many(self, data, timeout):\r\n        client = self.get_client(None, write=True)\r\n        pipeline = client.pipeline()\r\n        pipeline.mset({k: self._serializer.dumps(v) for k, v in data.items()})\r\n\r\n        if timeout is not None:\r\n            # Setting timeout for each key as redis-py does not support timeout\r\n            # with mset\r\n            for key in data:    \r\n                pipeline.expire(key, timeout)\r\n        pipeline.execute()\r\n```\r\n\r\nWe can also do this to remove an unnecessary variable \r\n```\r\n        pipeline = self.get_client(None, write=True).pipeline()\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 20, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 659030934, 'comment_body': ""Yes this look more clean and we're handling the timeout related logic in the `get_backend_timeout` method. "", 'comment_created': datetime.datetime(2021, 6, 25, 20, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 659034261, 'comment_body': ""Yes I haven't really thought this through. Just wanted to add a placeholder for now.\r\nAlthough, what all shall be mention here? I see in the Memcached section, there are few pro and performance benifits of Memcached mentioned, followed by the installation examples. Do we want something similar for Redis or we can skip that?\r\n"", 'comment_created': datetime.datetime(2021, 6, 25, 21, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 659045681, 'comment_body': 'Yes, sorry, I meant `max()`.', 'comment_created': datetime.datetime(2021, 6, 25, 21, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 659046035, 'comment_body': 'Should be take the db parameter via the server url or should it be a separate key in OPTIONS?', 'comment_created': datetime.datetime(2021, 6, 25, 21, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 669389195, 'comment_body': '```suggestion\r\n# The redis backend does not support cull-related options like `MAX_ENTRIES`.\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 8, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 686588252, 'comment_body': ""This needs to go with an edit to the paragraph that begins... `If you want to test the memcached cache backend...`\r\n\r\nSomething like: \r\n\r\n```\r\nIf you want to test the memcached or Redis cache backends, you'll also need to\r\ndefine a :setting:`CACHES` setting that points at your memcached or Redis\r\ninstance.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 11, 7, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 686590190, 'comment_body': 'This seems a bit disjointed here. I\'ll think about a possible re-ordering... 🤔\r\n\r\nIn the meantime, can you move this section inside the `.. redis:` block. \r\n\r\nYou can say something like: \r\n\r\n```\r\nAs well as the standard :ref:`cache_arguments`, ... \r\n```\r\n\r\n----\r\n\r\nI wonder if we need full examples for each option. 🤔\r\n\r\nAn alternative would be a more compressed list, and then pointing to the redis-py docs, for e.g. `pool_class` and `parser_class`. \r\n\r\n----\r\n\r\nThroughout this section, please wrap to 79 chars, and try to avoid ""we"". Have a look at https://docs.djangoproject.com/en/3.2/internals/contributing/writing-documentation/#guidelines-for-restructuredtext-files —\xa0I\'m happy to go over this again. ', 'comment_created': datetime.datetime(2021, 8, 11, 7, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 686602844, 'comment_body': '`option 3`? 🤔', 'comment_created': datetime.datetime(2021, 8, 11, 8, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 686603550, 'comment_body': 'I feel like this needs a link to the redis-py docs… (or similar)', 'comment_created': datetime.datetime(2021, 8, 11, 8, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 686605825, 'comment_body': ""Do we want to add this API (at all/as part of this PR)? We don't have similar options elsewhere... // @ngnpope?"", 'comment_created': datetime.datetime(2021, 8, 11, 8, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 686608454, 'comment_body': ""```suggestion\r\nRedis cache backend\r\n```\r\n\r\nPlease add the blank line above. \r\n\r\n(I'll review this section again.)"", 'comment_created': datetime.datetime(2021, 8, 11, 8, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 686724752, 'comment_body': 'In that case, we can remove the `PickleSerializer` for good and simply use the `pickle.dumps` and `pickle.loads` with `protocol=HIGHEST_PROTOCOL` just like in few of the other cache backends. \r\n', 'comment_created': datetime.datetime(2021, 8, 11, 11, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 686725026, 'comment_body': 'Missed this, my bad\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 11, 11, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 686740322, 'comment_body': ""Yes I'll fix the wrapping issues. \r\n\r\nI was thinking of linking it to the redis-py documentation. However, there isn't must documentation [here](https://redis-py.readthedocs.io/en/stable/)\r\n\r\nWe can use their README.md for the descriptions. \r\n[Connection Pools](https://github.com/andymccurdy/redis-py#connection-pools)\r\n[Parsers](https://github.com/andymccurdy/redis-py#parsers)\r\n\r\nWe can condense the examples into a single one with all the arguements. Working on it"", 'comment_created': datetime.datetime(2021, 8, 11, 11, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 686741918, 'comment_body': 'option 3 would be useful if we have multiple servers, then the user need not set the db in each URL rather, just specify it in the options.', 'comment_created': datetime.datetime(2021, 8, 11, 11, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 686768222, 'comment_body': 'So `OPTIONS` is passed as the arguments to the client, e.g. to `pymemache.HashClient()` for `PyMemcacheCache`:\r\n\r\nhttps://github.com/django/django/blob/54a30a7a00fea6c5e3702282ade6e0238e06de3b/django/core/cache/backends/memcached.py#L40\r\n\r\nWe generally don\'t need to document all of those options that can be passed to the underlying client.\r\n\r\nHowever... Things are a little bit different here. We are not using a third-party library to provide the client class which is what we are doing for the memcached backends, but writing our own. As such, none of the options for our client class are documented anywhere. Having said that, I\'m not sure we need to document it at this stage. We may decide to do so later if we expose additional functionality.\r\n\r\nI think that it still makes sense to keep `PickleSerializer` and not pass in `pickle_protocol` to `OPTIONS`. We should then do the same as for `PyMemcacheCache` and pass some default options:\r\n\r\nhttps://github.com/django/django/blob/54a30a7a00fea6c5e3702282ade6e0238e06de3b/django/core/cache/backends/memcached.py#L237-L242\r\n\r\n(Note that `serde` is the ""serializer/deserializer"" instance.)\r\n\r\n So perhaps we should pass the serializer in a similar way and change `RedisCache.__init__()` to have:\r\n \r\n```python\r\n        self._options = {\'serializer\': PickleSerializer(), **params.get(\'OPTIONS\', {})}\r\n```\r\n\r\nThis would then allow the following configuration:\r\n\r\n```python\r\n                \'OPTIONS\': {\r\n                    \'serializer\': PickleSerializer(pickle.DEFAULT_PROCOL),  # Use default protocol instead of highest.\r\n                }\r\n```\r\n\r\nOr equally a custom serializer, e.g. using `msgpack`, could be provided.\r\n\r\nIn summary, let\'s keep it flexible but avoid documenting everything for now. Once documented as public API we can\'t refine it as easily. Get the basic thing working and merged first and then extend as required.', 'comment_created': datetime.datetime(2021, 8, 11, 12, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 686811427, 'comment_body': 'Yes this sounds like a better approach. Making the changes now and leaving the documentation for this for now', 'comment_created': datetime.datetime(2021, 8, 11, 13, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 686949348, 'comment_body': 'Fix length to match heading', 'comment_created': datetime.datetime(2021, 8, 11, 15, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 686966606, 'comment_body': 'Could be nice to reference the survey.', 'comment_created': datetime.datetime(2021, 8, 11, 15, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 686967326, 'comment_body': 'python -> Python', 'comment_created': datetime.datetime(2021, 8, 11, 15, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 686968425, 'comment_body': ""Add an 'if' before redis?"", 'comment_created': datetime.datetime(2021, 8, 11, 15, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 689817976, 'comment_body': ""Maybe 'A Redis server' or 'Redis servers'"", 'comment_created': datetime.datetime(2021, 8, 16, 19, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 689818404, 'comment_body': 'Python (capitalise)', 'comment_created': datetime.datetime(2021, 8, 16, 19, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 689819776, 'comment_body': 'I think we should be capitalising Redis. ', 'comment_created': datetime.datetime(2021, 8, 16, 20, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 689823015, 'comment_body': ""There's topic documentation here, that's great. Should there be reference docs as well? "", 'comment_created': datetime.datetime(2021, 8, 16, 20, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 689824278, 'comment_body': 'https://docs.djangoproject.com/en/3.2/ref/settings/#caches also needs updating', 'comment_created': datetime.datetime(2021, 8, 16, 20, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 689832278, 'comment_body': ""As a headline feature it feels we can (should?) say more here? 🤔 (Although I'm not quite sure what that would be)."", 'comment_created': datetime.datetime(2021, 8, 16, 20, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 689861407, 'comment_body': ""This looks too much like a full example. However, I think you're saying use on of these three options. I wonder if there's a better way of presenting this. "", 'comment_created': datetime.datetime(2021, 8, 16, 21, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 690688960, 'comment_body': 'I thought about this but I took inference from the memcached documentation and there memcached is not capitalized. Hence I stuck with the lowercase. Let me know if I should capitalize it! \r\nCC: @carltongibson \r\n', 'comment_created': datetime.datetime(2021, 8, 17, 20, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 690689740, 'comment_body': 'Missed that, thank you!', 'comment_created': datetime.datetime(2021, 8, 17, 20, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 690692005, 'comment_body': 'So initially I had three separate examples for the three separate example but the seemed to be too lengthy. Hence I reverted to condensing them into one. Since all three options are not specified in the same manner, I went with the elaborate example. Let me know what you feel!', 'comment_created': datetime.datetime(2021, 8, 17, 20, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 690694081, 'comment_body': 'Initially I added the survey but @ngnpope suggested otherwise.\r\nhttps://github.com/django/django/pull/14437#discussion_r658860268\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 20, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 690695524, 'comment_body': ""Let's ask @abrookins. Andrew, should we be capitalising Redis? "", 'comment_created': datetime.datetime(2021, 8, 17, 20, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691027130, 'comment_body': 'Understood. I think I got sucked in by the ""most popular"" comment. Maybe we don\'t need that either? Could just say...\r\n\r\n""Redis is an in-memory database...""', 'comment_created': datetime.datetime(2021, 8, 18, 8, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691196287, 'comment_body': '```suggestion\r\nusername and password, add them in the ``LOCATION`` along with the URL::\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 691196694, 'comment_body': '```suggestion\r\nIf you have multiple redis servers set up in replication mode, you can specify\r\n```\r\n\r\nSee c23aa736264d47c51b2f2ff2e3139187204fc9b8', 'comment_created': datetime.datetime(2021, 8, 18, 12, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 691198762, 'comment_body': ""```suggestion\r\nperformed on the lead server. Read operations are performed on one of the\r\n```\r\n\r\n🤔\r\n\r\n(Please check the wrapping afterward)\r\n\r\n\r\nOn `lead` vs `leader` —\xa0you've used the same below. Is this official™ terminology (otherwise I think `the lead server` or `the leader` (maybe if context allows), but not `the leader server`. 🤔"", 'comment_created': datetime.datetime(2021, 8, 18, 12, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 691200555, 'comment_body': 'e.g. `leader` here seems fine.', 'comment_created': datetime.datetime(2021, 8, 18, 12, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 691204381, 'comment_body': 'Yes, I think we need to adjust. People cut and paste from the examples…\xa0\r\n\r\nThought: Can we give **one** example (maybe the `OPTIONS` case?) and then point to the redis-py docs [here maybe](https://redis-py.readthedocs.io/en/stable/#redis.ConnectionPool.from_url) for more details? (""The LOCATION URL accepts various options ... see.) \r\n\r\n🤔 ', 'comment_created': datetime.datetime(2021, 8, 18, 12, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 691206660, 'comment_body': ""Yes... looking at the options that follow, providing a basic gloss, showing an `OPTIONS` example and pointing to redis-py for details seems better than trying to cover it all. \r\n\r\nFor example, I do want to know how to select the `db`, but I'm not sure I need to be told (here) what happens if I specify multiple dbs... 🤔 (I do want to know where to go to find out all the details.) \r\n\r\nDoes that make sense? "", 'comment_created': datetime.datetime(2021, 8, 18, 12, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 691442026, 'comment_body': '```suggestion\r\n* ``pool_class``: Connection pools create a set of connections which are\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 17, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691454878, 'comment_body': ""I suspect wrapping here isn't quite right. \r\n\r\n```suggestion\r\n* ``parser_class``: Parser classes control how responses from the Redis\r\n  server are parsed. By default ``hiredis`` will be used if installed otherwise \r\n  the ``PythonParser`` will be used. ``Hiredis`` is written in C and therefore can give\r\n  up to 10x gains over PythonParser.\r\n Read more about `parsers`_.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 18, 17, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691457992, 'comment_body': 'Maybe options rather than arguments? ', 'comment_created': datetime.datetime(2021, 8, 18, 17, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691459541, 'comment_body': ""I'm not sure, but if above we say this batch here are all options, and given an example of what a `db` option looks like. Do we need this example as well? 🤷 \r\n\r\n```suggestion\r\n  In the following example, we set the ``parser_class`` to\r\n```"", 'comment_created': datetime.datetime(2021, 8, 18, 17, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691461517, 'comment_body': '```suggestion\r\n        self.assertIsNone(none_backend_timeout)\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 17, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691462753, 'comment_body': ""Do we need this, maybe we should use `hiredis` instead? (ummm... that's surround it in double backticks in the docs)"", 'comment_created': datetime.datetime(2021, 8, 18, 17, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691463462, 'comment_body': 'Maybe?\r\n```suggestion\r\n  default choice is ``redis.connection.HiredisParser``, if ``hiredis`` is installed\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 17, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 691544487, 'comment_body': 'This functionality looks to have been inherited or intentionally taken from `BaseMemcachedCache`, and the **memcached** cache docs say: `To take advantage of this feature, include all server addresses in LOCATION, either as a semicolon or comma delimited string, or as a list.` (they then fail to give an example of the multi-server string form, but never mind). As far as I can see from the docs and examples in this PR, that line, or one like it, is missing. Presuming this is intentionally riffing on the memcached implementation, I think a docs note is in order (or just remove the functionality entirely? :))\r\n\r\nApologies if this has already been brought up somewhere upthread. To say there has been conversation on this PR would be an understatement :)', 'comment_created': datetime.datetime(2021, 8, 18, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kezabelle', 'type': 'User'}, {'comment_id': 691553272, 'comment_body': ""Transposition from the memcached implementation, which returns failures (by the look of it), but `original_keys` isn't used here, probably because the client mset return value isn't usefully related?"", 'comment_created': datetime.datetime(2021, 8, 18, 19, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kezabelle', 'type': 'User'}, {'comment_id': 692734661, 'comment_body': 'Oh yes, this makes more sense.', 'comment_created': datetime.datetime(2021, 8, 20, 7, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 692750187, 'comment_body': 'Hey @kezabelle!\r\nNo this has not been discuss. I mimiced the `BaseMemcachedCache` behavior inorder to have a common interface for both the caching backends. However, I think a comment in the docs should be added about this.', 'comment_created': datetime.datetime(2021, 8, 20, 8, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 692752703, 'comment_body': 'Ahh yes this was based on a previous implementation. Forgot to remove this. Thanks for the spot! 😄 ', 'comment_created': datetime.datetime(2021, 8, 20, 8, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 694703912, 'comment_body': ""The nested import doesn't look needed. 🤔"", 'comment_created': datetime.datetime(2021, 8, 24, 9, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 694705660, 'comment_body': ""Do we need the version specification? \r\n\r\n**Update**: Why 3.0.0? Latest is 3.5.3... 🤔 —\xa03.0.0 was a while ago now.) I see this was @ngnpope's comment from above: https://github.com/django/django/pull/14437#pullrequestreview-692861563 —\xa0tests do pass with that. (I'll resolve this.) "", 'comment_created': datetime.datetime(2021, 8, 24, 10, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695745385, 'comment_body': 'OK, so I think actually less here... \r\n\r\n```suggestion\r\nThe new ``django.core.cache.backends.redis.RedisCache`` cache backend provides\r\ninbuilt support for caching with Redis. For more details, see the\r\n:ref:`documentation on caching with redis in Django <redis>`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 25, 13, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695748329, 'comment_body': ""Currently they're wrapped up together. Improvements can come separately. "", 'comment_created': datetime.datetime(2021, 8, 25, 13, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695750753, 'comment_body': ""```suggestion\r\nRedis__ is an in-memory database that can be used for caching. To begin you'll\r\nneed a redis server running either locally or on a remote machine.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 25, 13, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695766910, 'comment_body': ""OK, this isn't right. If you follow this instructions you get an error: \r\n\r\n```\r\nValueError: Redis URL must specify one of the following schemes (redis://, rediss://, unix://) \r\n```\r\n\r\nI think we should adjust and point to the redis-py docs: \r\n\r\n```suggestion\r\n* Set :setting:`LOCATION <CACHES-LOCATION>` to the URL pointing to your Redis \r\n  instance, using the appropriate scheme. See the example below, and the \r\n  ``redis-py`` docs for `details on the available schemes \r\n  <https://redis-py.readthedocs.io/en/stable/#redis.ConnectionPool.from_url>`_. \r\n```\r\n\r\nThe examples that follow then are OK I think. (They show how it works.) "", 'comment_created': datetime.datetime(2021, 8, 25, 13, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695772647, 'comment_body': ""Assuming we link here above, for `LOCATION`, I think this can be dropped now. It doesn't really say any more than we know already. "", 'comment_created': datetime.datetime(2021, 8, 25, 13, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695775467, 'comment_body': '```suggestion\r\n  Where you have multiple Redis instances the same database must be selected \r\n  for each one. The ``OPTIONS`` ``db`` argument can be used in such cases for \r\n  clarity.\r\n```', 'comment_created': datetime.datetime(2021, 8, 25, 13, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695780643, 'comment_body': '```suggestion\r\n* ``pool_class``: Connection pools are a set of connections which are used as \r\n  required. ``pool_class`` allows you to set a custom connection pool class.\r\n  Defaults to ``redis.ConnectionPool``. See the ``redis-py`` `connection pool\r\n  docs`_ for more details .\r\n  \r\n  .. _`connection pool docs`: https://github.com/andymccurdy/redis-py#connection-pools\r\n```', 'comment_created': datetime.datetime(2021, 8, 25, 13, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695783331, 'comment_body': '```suggestion\r\n* ``parser_class``: Parser classes control on how the responses from the\r\n  Redis server are parsed. By default ``hiredis`` will be used if installed\r\n  otherwise the ``PythonParser`` will be used. ``Hiredis`` is written in C and\r\n  therefore can give up to 10x gains over the ``PythonParser``.\r\n  See the ``redis-py`` docs for more about `parsers`_.\r\n\r\n  .. _`parsers`: https://github.com/andymccurdy/redis-py#parsers\r\n```', 'comment_created': datetime.datetime(2021, 8, 25, 14, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695785889, 'comment_body': ""Not sure about this example... \r\n\r\n* It could be outdented, since it's not part of the bullet-list. \r\n* If you add `db` then it's showing all the options listed. \r\n* Could mention that it's using the `unix://` Unix Domain Socket scheme. (Please check the URL. I think you need three `/` at the beginning, two for the scheme and one for the `/` root path. 🤔)"", 'comment_created': datetime.datetime(2021, 8, 25, 14, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695786090, 'comment_body': 'We only need one blank line here. ', 'comment_created': datetime.datetime(2021, 8, 25, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695908808, 'comment_body': 'Pedant warning (sorry). Did we conclude if Redis is capitalised? Have both forms here? ', 'comment_created': datetime.datetime(2021, 8, 25, 16, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'smithdc1', 'type': 'User'}, {'comment_id': 695940588, 'comment_body': ""Good spot! Let's go with Redis for the DB itself but `redis-py` for the Python client library. "", 'comment_created': datetime.datetime(2021, 8, 25, 16, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 695953767, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 8, 25, 17, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 695957640, 'comment_body': 'Yes I adding the db would make this a complete example. \r\n', 'comment_created': datetime.datetime(2021, 8, 25, 17, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 696293337, 'comment_body': 'Chop blank line.', 'comment_created': datetime.datetime(2021, 8, 26, 5, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696322767, 'comment_body': ""Maybe: \r\n```suggestion\r\n        self._pool_options = {'parser_class': parser_class, 'db': db}\r\n```"", 'comment_created': datetime.datetime(2021, 8, 26, 6, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696323025, 'comment_body': 'Chop blank line.', 'comment_created': datetime.datetime(2021, 8, 26, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696323356, 'comment_body': '```suggestion\r\n                self._servers[index], **self._client_kwargs,\r\n```', 'comment_created': datetime.datetime(2021, 8, 26, 6, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696323484, 'comment_body': 'Chop blank lines.', 'comment_created': datetime.datetime(2021, 8, 26, 6, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696326800, 'comment_body': '```suggestion\r\n        # Write to the first server. Read from other servers if there are more,\r\n        # otherwise read from the first server.\r\n```', 'comment_created': datetime.datetime(2021, 8, 26, 6, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696327584, 'comment_body': '```suggestion\r\n        # the server, e.g. sharding.\r\n```', 'comment_created': datetime.datetime(2021, 8, 26, 6, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696338001, 'comment_body': 'I would use a dict instead.\r\n```suggestion\r\n        self._pools = {}\r\n```\r\nand in `_get_connection_pool()`:\r\n```python\r\n    def _get_connection_pool(self, write):\r\n        index = self._get_connection_pool_index(write)\r\n        if index not in self._pools:\r\n            self._pools[index] = self._pool_class.from_url(\r\n                self._servers[index], **self._client_kwargs,\r\n            )\r\n        return self._pools[index]\r\n```', 'comment_created': datetime.datetime(2021, 8, 26, 6, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696339475, 'comment_body': ""Do we need to call `bool()` again? it's already called in `RedisCacheClient.add()`."", 'comment_created': datetime.datetime(2021, 8, 26, 6, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696339766, 'comment_body': ""Do we need to call `bool()` again? it's already called in `RedisCacheClient.touch()`."", 'comment_created': datetime.datetime(2021, 8, 26, 6, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696340015, 'comment_body': ""Do we need to call `bool()` again? it's already called in `RedisCacheClient.delete()`."", 'comment_created': datetime.datetime(2021, 8, 26, 6, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696340250, 'comment_body': ""Do we need to call `bool()` again? it's already called in `RedisCacheClient.clear()`."", 'comment_created': datetime.datetime(2021, 8, 26, 6, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696341133, 'comment_body': '```suggestion\r\n            # with mset().\r\n```', 'comment_created': datetime.datetime(2021, 8, 26, 6, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696341709, 'comment_body': 'Chop blank line.', 'comment_created': datetime.datetime(2021, 8, 26, 6, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696343672, 'comment_body': 'We define the same class in the `django.contrib.sessions.serializers`. Maybe we could move it (in a separate PR/commit) to the `django/core/serializers/base.py` and re-use in both places :thinking: ', 'comment_created': datetime.datetime(2021, 8, 26, 6, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696346507, 'comment_body': 'Single quotes.', 'comment_created': datetime.datetime(2021, 8, 26, 7, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696346661, 'comment_body': ""```suggestion\r\n                'db': 12,\r\n```"", 'comment_created': datetime.datetime(2021, 8, 26, 7, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 696351175, 'comment_body': 'I see these two lines together quite frequently (8 or 9 times). Would it make sense to have a private method that does these two things?', 'comment_created': datetime.datetime(2021, 8, 26, 7, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 696366141, 'comment_body': ""This pattern is common to all backends. Maybe it makes sense to merge them together? If there is reason to call `make_key()` without validation it could learn `validate=False()`.\r\n\r\nEither way, it's a separate PR."", 'comment_created': datetime.datetime(2021, 8, 26, 7, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 696394453, 'comment_body': ""I wouldn't say it's a separate PR since this is new code being added for the first time, and one can evaluate what is being added on its own merits. The method I'm proposing would be specific to this class, so it wouldn't affect other backends. "", 'comment_created': datetime.datetime(2021, 8, 26, 8, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 696400833, 'comment_body': ""That's a matter of perspective. I find consistency across the codebase is also something to consider, particularly where the implementation is following the exact same pattern.\r\n\r\nOtherwise, you create islands of custom behaviour that may diverge enough to become a problem later."", 'comment_created': datetime.datetime(2021, 8, 26, 8, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 696429233, 'comment_body': ""> This pattern is common to all backends.\r\n\r\nNote that the `filebased` backend doesn't follow this pattern. It puts the `make_key()` / `validate_key()` lines in a single place: https://github.com/django/django/blob/3445c50a3affc5ae7b1c2712a139d4a5105aeaf5/django/core/cache/backends/filebased.py#L130-L131\r\n"", 'comment_created': datetime.datetime(2021, 8, 26, 8, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cjerdonek', 'type': 'User'}, {'comment_id': 696482252, 'comment_body': ""The battle is on! ⚔️😄 Yes, you've found one, but also hid the fact that it was doing more than just that:\r\nhttps://github.com/django/django/blob/3445c50a3affc5ae7b1c2712a139d4a5105aeaf5/django/core/cache/backends/filebased.py#L125-L133\r\n\r\nI agree it could be cleaner, yes, but think that we can follow up on that after."", 'comment_created': datetime.datetime(2021, 8, 26, 10, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 696526054, 'comment_body': 'I just noticed that there are 33 instance (that I could find), where `key = self.make_key(key, version=version)` and\r\n`self.validate_key(key)` are called one after the other. They are present in all the backends (`filebased` only has one as mentioned). I think we should have a method in the `BaseCache` class that takes care of this and this should be a separate `cleanup` ticket.\r\nImplementing this now in `RedisCache` and then adding support for other backends in a separate PR seems a little messy? 🤔 ', 'comment_created': datetime.datetime(2021, 8, 26, 11, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 696615940, 'comment_body': 'See #14802 and ticket-33060.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 696645781, 'comment_body': ""FWIW +1 to doing it as a separate clean up. IMO it'll be much clearer what change was where looking back that way. "", 'comment_created': datetime.datetime(2021, 8, 26, 13, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 696971517, 'comment_body': ""If #14802 is merged before this PR, I'll make the changes to the redis backend too!"", 'comment_created': datetime.datetime(2021, 8, 26, 20, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 697373996, 'comment_body': 'Add also `versionchanged` annotation:\r\n```diff\r\ndiff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\r\nindex e9875acc67..90b4568731 100644\r\n--- a/docs/ref/settings.txt\r\n+++ b/docs/ref/settings.txt\r\n@@ -163,6 +163,10 @@ backend class (i.e. ``mypackage.backends.whatever.WhateverCache``).\r\n \r\n     The ``PyMemcacheCache`` backend was added.\r\n \r\n+.. versionchanged:: 4.0\r\n+\r\n+    The ``RedisCache`` backend was added.\r\n+\r\n .. setting:: CACHES-KEY_FUNCTION\r\n \r\n ``KEY_FUNCTION``\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 11, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 697379027, 'comment_body': 'Maybe:\r\n```suggestion\r\nThe new ``django.core.cache.backends.redis.RedisCache`` cache backend provides\r\nbuilt-in support for caching with Redis. `redis-py`_ 3.0.0 or higher is\r\nrequired. For more details, see the :ref:`documentation on caching with Redis\r\nin Django <redis>`.\r\n\r\n.. _`redis-py`: https://pypi.org/project/redis/\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 11, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 697380611, 'comment_body': ""Do we have too many slashes?\r\n```suggestion\r\n            'LOCATION': 'unix:/var/run/redis/redis.sock',\r\n```"", 'comment_created': datetime.datetime(2021, 8, 27, 11, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 697393273, 'comment_body': 'The scheme has two `unix://`\n\nThen the path is absolute so begins with a slash `/`\n\nSo three. \n\nC.f an absolute file url: \n\n`file:///var/etc/bin/usr/...`\n\nSame thing. ', 'comment_created': datetime.datetime(2021, 8, 27, 12, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 697395662, 'comment_body': '[This](https://www.ietf.org/rfc/rfc8089.txt) rfc has updated the specification for url formats. According  to Appendix A, both the formats are valid. The triple slash was the original way, but single slash has been adopted too!\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 27, 12, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 697408599, 'comment_body': 'I may officially be too old then. 😂', 'comment_created': datetime.datetime(2021, 8, 27, 12, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'carltongibson', 'type': 'User'}, {'comment_id': 699168865, 'comment_body': 'Using a single slash would also be consistent with Memcached examples.', 'comment_created': datetime.datetime(2021, 8, 31, 9, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699171808, 'comment_body': ""`Redis` like `Memcached` is a memory-base cache, so we should remove the note that `Memcached` is the fastest option:\r\n```diff\r\ndiff --git a/docs/topics/cache.txt b/docs/topics/cache.txt\r\nindex 07c92d523e..152799a986 100644\r\n--- a/docs/topics/cache.txt\r\n+++ b/docs/topics/cache.txt\r\n@@ -62,7 +62,6 @@ settings file. Here's an explanation of all available values for\r\n Memcached\r\n ---------\r\n \r\n-The fastest, most efficient type of cache supported natively by Django,\r\n Memcached__ is an entirely memory-based cache server, originally developed\r\n to handle high loads at LiveJournal.com and subsequently open-sourced by\r\n Danga Interactive. It is used by sites such as Facebook and Wikipedia to\r\n```"", 'comment_created': datetime.datetime(2021, 8, 31, 9, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699176776, 'comment_body': '```suggestion\r\n* Set :setting:`BACKEND <CACHES-BACKEND>` to\r\n  ``django.core.cache.backends.redis.RedisCache``.\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 10, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699178425, 'comment_body': 'Remove trailing spaces:\r\n```suggestion\r\n* Set :setting:`LOCATION <CACHES-LOCATION>` to the URL pointing to your Redis\r\n  instance, using the appropriate scheme. See the example below, and the\r\n  ``redis-py`` docs for `details on the available schemes\r\n  <https://redis-py.readthedocs.io/en/stable/#redis.ConnectionPool.from_url>`_.\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 10, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699179456, 'comment_body': ""```suggestion\r\n            'LOCATION': 'redis://username:password@127.0.0.1:6379',\r\n```\r\n....ssss :snake: "", 'comment_created': datetime.datetime(2021, 8, 31, 10, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699185886, 'comment_body': '`the` is missing :thinking:. Also, this is too long and a bit confusing, maybe:\r\n```suggestion\r\nIf you have multiple Redis servers set up in the replication mode, you can\r\nspecify the servers either as a semicolon or comma delimited string, or as a\r\nlist. While using multiple servers, write operations are performed on the first\r\nserver (leader). Read operations are performed on the other servers (replicas)\r\nchosen at random::\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 10, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699194492, 'comment_body': 'Extra options for other backends are described shortly in the [_""Cache arguments""_](https://docs.djangoproject.com/en/dev/topics/cache/#cache-arguments) section. IMO we don\'t need a detailed description and many examples. Maybe:\r\n```\r\nHere\'s an example configuration for a ``redis`` based backend that chooses the\r\n10th database (by default Redis ships with 16 logical databases), sets a custom\r\n`connection pool class`_ (``redis.ConnectionPool`` is used by default), and ...\r\n\r\n    CACHES = {\r\n        \'default\': {\r\n            \'BACKEND\': \'django.core.cache.backends.redis.RedisCache\',\r\n            \'LOCATION\': \'redis://127.0.0.1:6379\',\r\n            \'OPTIONS\': {\r\n                \'pool_class\': \'redis.BlockingConnectionPool\',\r\n                \'parser_class\': \'redis.connection.HiredisParser\',\r\n                \'db\': \'10\',\r\n            }\r\n        }   \r\n    }   \r\n    \r\n.. _`connection pool docs`: https://github.com/andymccurdy/redis-py#connection-pools\r\n.. _`parsers`: https://github.com/andymccurdy/redis-py#parsers\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 10, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699195681, 'comment_body': '```suggestion\r\n    def test_get_connection_pool_index(self):\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 10, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699195845, 'comment_body': 'Chop blank lines:\r\n```suggestion\r\n        pool_index = cache._cache._get_connection_pool_index(write=False)\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 10, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 699197718, 'comment_body': 'We could move these tests to a separate PR, together with `PickleSerializer`, see https://github.com/django/django/pull/14437#discussion_r696343672.', 'comment_created': datetime.datetime(2021, 8, 31, 10, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 700467143, 'comment_body': ""Actually, this isn't incorrect. `rediss://` is for Redis-over-TLS. See the following:\r\n\r\n- https://github.com/jazzband/django-redis#configure-as-cache-backend\r\n- https://www.iana.org/assignments/uri-schemes/prov/rediss\r\n\r\nBut it does look like a typo..."", 'comment_created': datetime.datetime(2021, 9, 1, 18, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 700537974, 'comment_body': 'Sure. I should probably first work on the other PR as this PR is dependant on it. However, I feel that it could take sometime as I feel there are a few things that we can do.\r\n- Have a BaseSerializer class\r\n- Add `PickleSerializer` and `JSONSerializer` (in `django.core.signing`) extend the `BaseSerializer`. This can help in simplifying the capability of providing a serializer to the RedisCache and even customize it.\r\n\r\nHow about we keep things as they are in this PR and have a separate PR for this optimization/clean-up? 🤔 ', 'comment_created': datetime.datetime(2021, 9, 1, 20, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 700549581, 'comment_body': 'No I actually did this on purpose 😛 \r\nSince we had examples of `redis://` and `unix://` for the `LOCATION`, I though of using `rediss://` for this one!', 'comment_created': datetime.datetime(2021, 9, 1, 20, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 700561790, 'comment_body': ""I think a little context with some examples will make things easier for the user. Moreover in the future, we'll be added more options for `username` and `password` too. Also, since there are warnings (in a multi-server setup) and various ways of setting `db` etc, having a separate section would give better organization and clear understanding of the arguments in my opinion."", 'comment_created': datetime.datetime(2021, 9, 1, 20, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 700574074, 'comment_body': ""> No I actually did this on purpose \r\n\r\nI get that. I meant that the choice of `rediss` as the scheme name, while it follows `http` → `https`, just makes it look like a typo when it isn't."", 'comment_created': datetime.datetime(2021, 9, 1, 21, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ngnpope', 'type': 'User'}, {'comment_id': 700574973, 'comment_body': 'However in the long run, if we write reference documentation, these can move away from here and we can keep a single example here. Read [here](https://github.com/django/django/pull/14437#discussion_r689823015)\r\nThoughts on this?', 'comment_created': datetime.datetime(2021, 9, 1, 21, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 700738114, 'comment_body': ""I don't think that we need examples for all available options. Switching between `redis` and `rediss` without any comment, only to put all available schemas in the docs is confusing. I'd use `redis` instead."", 'comment_created': datetime.datetime(2021, 9, 2, 4, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 700740185, 'comment_body': ""I don't think that `BaseSerializer` is necessary. I only want to avoid defining the same class in different places so moving `PickleSerializer` (as described in https://github.com/django/django/pull/14437#discussion_r696343672) is enough."", 'comment_created': datetime.datetime(2021, 9, 2, 4, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 700839685, 'comment_body': 'Alright! Updating it', 'comment_created': datetime.datetime(2021, 9, 2, 7, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'abbasidaniyal', 'type': 'User'}, {'comment_id': 707501526, 'comment_body': 'I think you can instead add Redis with a capital R only, to only permit it to be written with a capital letter. This is how https://redis.io/ writes it.', 'comment_created': datetime.datetime(2021, 9, 13, 16, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}, {'comment_id': 707592342, 'comment_body': ""I checked and it doesn't matter. `redis` is still valid, even with `Redis` in `spelling_wordlist`, but we can change it."", 'comment_created': datetime.datetime(2021, 9, 13, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 707638161, 'comment_body': 'No worries then.', 'comment_created': datetime.datetime(2021, 9, 13, 19, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'adamchainz', 'type': 'User'}]","[{'commit_sha': 'ec212c66167759a2a40b13d5efc47d883816d4da', 'committer_username': 'abbasidaniyal', 'committer_name': 'Daniyal Abbasi', 'committer_email': 'abbasi.daniyal98@gmail.com', 'commit_date': datetime.datetime(2018, 1, 31, 17, 57, 7, tzinfo=datetime.timezone.utc)}]",Daniyal Abbasi,36009198,abbasi.daniyal98@gmail.com,User,,88,,45,56

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4164482,django,django/django,Python,31392,78578,2302,3156,32847,240,28,240,"[{'id': 720012295, 'number': 14800, 'closed': datetime.datetime(2021, 11, 9, 17, 40, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 21, 17, 22, tzinfo=datetime.timezone.utc), 'time_taken': 6553414.0, 'time_delta': '75 days, 20:23:34', 'additions': 67, 'deletions': 2, 'state': 'closed'}, {'id': 650881522, 'number': 14437, 'closed': datetime.datetime(2021, 9, 14, 14, 18, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 0, 10, 33, tzinfo=datetime.timezone.utc), 'time_taken': 9814055.0, 'time_delta': '113 days, 14:07:35', 'additions': 398, 'deletions': 10, 'state': 'closed'}, {'id': 599406623, 'number': 14173, 'closed': datetime.datetime(2021, 7, 15, 10, 37, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 5, 51, 57, tzinfo=datetime.timezone.utc), 'time_taken': 9780352.0, 'time_delta': '113 days, 4:45:52', 'additions': 168, 'deletions': 79, 'state': 'closed'}, {'id': 596357966, 'number': 14150, 'closed': datetime.datetime(2021, 6, 1, 13, 8, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 19, 9, 23, 58, tzinfo=datetime.timezone.utc), 'time_taken': 6407076.0, 'time_delta': '74 days, 3:44:36', 'additions': 82, 'deletions': 11, 'state': 'closed'}, {'id': 594020570, 'number': 14135, 'closed': datetime.datetime(2021, 3, 19, 9, 55, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 15, 46, 20, tzinfo=datetime.timezone.utc), 'time_taken': 238150.0, 'time_delta': '2 days, 18:09:10', 'additions': 76, 'deletions': 11, 'state': 'closed'}, {'id': 593639265, 'number': 14132, 'closed': datetime.datetime(2021, 3, 16, 8, 39, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 7, 12, 13, tzinfo=datetime.timezone.utc), 'time_taken': 5250.0, 'time_delta': '1:27:30', 'additions': 9, 'deletions': 5, 'state': 'closed'}, {'id': 592558345, 'number': 14124, 'closed': datetime.datetime(2021, 3, 30, 6, 29, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 14, 14, 57, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1351920.0, 'time_delta': '15 days, 15:32:00', 'additions': 89, 'deletions': 20, 'state': 'closed'}, {'id': 537317171, 'number': 13766, 'closed': datetime.datetime(2021, 1, 27, 11, 28, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 11, 19, 37, 38, tzinfo=datetime.timezone.utc), 'time_taken': 4031480.0, 'time_delta': '46 days, 15:51:20', 'additions': 63, 'deletions': 8, 'state': 'closed'}]"
