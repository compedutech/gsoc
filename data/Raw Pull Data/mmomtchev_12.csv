pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1081924417,upgrade to Node.js 18.10.0,,True,2,https://api.github.com/repos/mmomtchev/libnode/pulls/2,https://github.com/mmomtchev/libnode/pull/2,closed,327,1859,15,2,0,0,0,0,[],2022-10-10 11:46:44+00:00,2022-10-10 11:47:18+00:00,34.0,0:00:34,[],"[{'commit_sha': '552f70a26c9dc5bce77ceb0188bdd7846352c7b6', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff10c48afac8c4ee677972f97215a72344021d2e', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}]",Momtchil Momtchev,31410344,momtchil@momtchev.com,User,,144,,9,108
976021696,Extend Node-API to `libnode`,"<!--
Before submitting a pull request, please read
https://github.com/nodejs/node/blob/HEAD/CONTRIBUTING.md.

Commit message formatting guidelines:
https://github.com/nodejs/node/blob/HEAD/doc/contributing/pull-requests.md#commit-message-guidelines

For code changes:
1. Include tests for any bug fixes or new features.
2. Update documentation if relevant.
3. Ensure that `make -j4 test` (UNIX), or `vcbuild test` (Windows) passes.

Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
-->

This PR adds support for instantiation and further interaction with an embedded version of Node.js (libnode) entirely through Node-API.

Refs: #43516",False,43542,https://api.github.com/repos/nodejs/node/pulls/43542,https://github.com/nodejs/node/pull/43542,open,1148,32,20,16,27,39,4,0,"[{'name': 'lib / src'}, {'name': 'node-api'}, {'name': 'embedding'}, {'name': 'needs-ci'}]",2022-06-22 22:54:08+00:00,,0.0,,"[{'comment_id': 904814518, 'comment_body': 'What would this mean?', 'comment_created': datetime.datetime(2022, 6, 23, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904814607, 'comment_body': 'This has nothing to do with shared library mode.', 'comment_created': datetime.datetime(2022, 6, 23, 9, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904817050, 'comment_body': 'If we do this, we should probably start adding converters between some Node-API values and V8/Node.js C++ API values (`napi_value` ↔ `Local<Value>`, `napi_env` ↔ `Environment*`/`Isolate*`).\r\n\r\nThe reason nobody has implemented a Node-API embedder API yet is that as an embedder, you often need fine-grained control over a lot of V8 options, and it’s not very practical to mirror the entire V8/Node.js embedder API to C (and that the Node.js C++ embedder API itself still has some rough edges that should probably be ironed out first).', 'comment_created': datetime.datetime(2022, 6, 23, 9, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904832695, 'comment_body': 'That API call is not to be used when using `libnode`', 'comment_created': datetime.datetime(2022, 6, 23, 9, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904833420, 'comment_body': 'This API allows using `libnode` through Node-API and it has no other uses.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904836875, 'comment_body': ""If you need to use raw V8 primitives then you can't use Node-API - this applies to both Node.js -> C++ (binary node addons) and to C++ -> Node.js (libnode). Still this API covers lots of use cases - mostly C++ software that needs to accept JS plugins. It does not cover Electron which has very particular needs.\r\nAllowing for more fine-grained control over the initialisation is of course something that should be considered. "", 'comment_created': datetime.datetime(2022, 6, 23, 10, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904838382, 'comment_body': 'That’s … wrong? Embedding and usage as a shared library are conceptually related but technically orthogonal.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904838401, 'comment_body': 'Why not?', 'comment_created': datetime.datetime(2022, 6, 23, 10, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904839598, 'comment_body': ""> If you need to use raw V8 primitives then you can't use Node-API\r\n\r\nRight, that’s why I’m bringing this up."", 'comment_created': datetime.datetime(2022, 6, 23, 10, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904840538, 'comment_body': ""Because you don't need it - in this case it is the C++ software that will create environments, so it doesn't need the ability to carry its own context in this structure - and because the `instance_data` pointer is used to carry the `libnode` context."", 'comment_created': datetime.datetime(2022, 6, 23, 10, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904841892, 'comment_body': 'Yes, but that doesn’t mean that this call is not compatible with libnode or with embedded mode.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904846213, 'comment_body': ""Ok, let's call it `Using an embedded version of Node.js`"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904846276, 'comment_body': 'It does because, before these new methods, there was no way to use Node-API with libnode at all.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 905899353, 'comment_body': 'It’s going to be heavily counterintuitive that this is part of a destruction operation.', 'comment_created': datetime.datetime(2022, 6, 24, 9, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 905912104, 'comment_body': 'Once you have drained the event loop, you have no other course of action then to destroy the environment - this is the reason I did it this way. There is no point in having a separate API call, if you will always have to call both of them one after the other. The real question is can we (and should we) keep an environment when its event loops is empty? This would allow to call async functions in a persistent environment but it will introduce a significant difference between the stand-alone Node.js and a embedded Node.js.', 'comment_created': datetime.datetime(2022, 6, 24, 9, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 905940391, 'comment_body': 'You could want to take an action in response to the event loop being drained, though? \r\n\r\n> The real question is can we (and should we) keep an environment when its event loops is empty? \r\n\r\nI think the answer to both questions here is yes.', 'comment_created': datetime.datetime(2022, 6, 24, 10, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 905947041, 'comment_body': ""Ok, but this would require splitting `node::SpinEventLoop` into iteration and cleanup and it is something that is not possible with the current embedders' API."", 'comment_created': datetime.datetime(2022, 6, 24, 10, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 905955257, 'comment_body': '… but it is? The docs for `SpinEventLoop` say which steps it takes, and all of those are public API. `SpinEventLoop()` is a helper, not a building block, and exists only for convenience and stronger API stability for those for whom it is sufficient.', 'comment_created': datetime.datetime(2022, 6, 24, 10, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 906723618, 'comment_body': 'Ok, I added `napi_run_environment` that spins up the event loop without destroying the environment when it is emptied and a unit test with an async callback.', 'comment_created': datetime.datetime(2022, 6, 25, 20, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 906724191, 'comment_body': 'Should you be able to mix V8 primitives and Node-API is another topic. If you take the ABI compatibility out of Node-API, there remains little use for it. However `node-addon-api` is a truly higher level API and it is much more practical to use from C++ then raw V8. Maybe there is a use case for software which has 95% `node-addon-api` and 5% custom V8 code. But this is something that goes beyond this PR - and it probably can be used both by embedders and addon authors.', 'comment_created': datetime.datetime(2022, 6, 25, 21, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 978709205, 'comment_body': 'I believe Cloudflare ([service](https://github.com/cloudflare/worker-emscripten-template)) Workers will need [converters](https://markethistory.quora.com/What-is-the-relationship-between-node-js-and-C-1). Is this a Private API thing?', 'comment_created': datetime.datetime(2022, 9, 23, 14, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NickCarducci', 'type': 'User'}, {'comment_id': 992648872, 'comment_body': 'Currently the Node-API is split up between two files: `js_native_api.h` and `node_api.h`.\r\nThe difference is that the `js_native_api.h` contains only cross-engine JS-specific APIs and `node_api.h` has Node.JS-specific APIs. \r\nWe use `js_native_api.h` in different scenarios where we want to interact with different JS engine using ABI-safe Node-API functions. For example, see the [Babylon Native](https://github.com/BabylonJS/BabylonNative/tree/master/Dependencies/napi), [Hermes Node-API](https://github.com/microsoft/hermes-windows/blob/main/API/hermes/hermes_napi.cpp) or [V8-JSI](https://github.com/microsoft/v8-jsi/tree/master/src/napi). In all these scenarios we implement `js_native_api.h` APIs, and we do not use Node.JS or Node-specific `node_api.h`. Even the `js_native_api_v8.h` and `js_native_api_v8.cc` must be free from any Node.JS specific code. Any interaction with the Node-JS specific code must be done either through the functions declared in the `js_native_api_v8_internals.h` or overriding virtual `napi_env__` in the derived `node_napi_env__` class in the `node_api_internals.h`.\r\nThe `node_api.h` has the Node.js specific functions and mostly contains code concerning Node-JS modules and asynchronous code.\r\nFrom this perspective, the Node.JS embedding API must not be part of the `js_native_api.h` header file. It could be in the `node_api.h`, but since this file is to be used by modules, the best option is to put these new APIs in their own `node_hosting_api.h` or `node_embedding_api.h` file. Other applications, such as [Deno](https://deno.land/), could implement the full support for `node_api.h` and `js_native_api.h` to reuse the Node-API modules, but they would never implement the same Node.JS embedding APIs.\r\nThese embedding APIs are Node.JS specific and cannot be re-used for other engines or applications. E.g. other engines do not create a thread pool on their own, or cannot handle Node.JS CLI arguments,\r\nIt could be either pa', 'comment_created': datetime.datetime(2022, 10, 11, 18, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 992655238, 'comment_body': 'Please note that the term `Environment` is somehow overused in Node.JS. \r\nThe `napi_env` is different from the Node.JS `Environment`. \r\nWe create one instance of `napi_env` per each native module. It allows using the `napi_env` instance settings and other flags per module. Each Node.JS environment may have zero or more `napi_env` instances depending on how many Node-API modules it loads.\r\nIt is important to clarify what type of environment the `napi_create_environment` function creates. I bet it is not the `napi_env`, but rather a moniker to the Node.JS `Envrironment`, which I guess must have a different type such as `napi_node_instance`, `napi_node_env`, or something else along those lines.', 'comment_created': datetime.datetime(2022, 10, 11, 18, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 992659001, 'comment_body': ""Can it be an inline function instead? In modern C++ we must avoid macros unless we have a good reason for them. In this case the macro doesn't do anything that cannot be done in a function. "", 'comment_created': datetime.datetime(2022, 10, 11, 18, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 992680634, 'comment_body': 'With the ABI-safe APIs we cannot allocate memory in one module and free it in another. E.g. in our Microsoft Office apps we use custom memory allocations with additional safety checks. The memory allocated in embedded Node.JS cannot be deallocated in Office code that may embed it. To be ABI-safe all memory must be allocated and freed in the same module.\r\nFor example, in the Node-API we often use the Finalizer callback that supports such single memory ownership pattern. In COM we use AddRef/Release to enforce this pattern too. \r\nIn this case we must at least return a pointer to the finalizer function that must be called by `napi_create_platform` user after they finish processing errors, or have a special `napi_free_string_array`.\r\nMy personal preference is to have a special `write_error` callback that we call to write the errors to the hosting app. In that case we would not need to allocate memory and just give them `data()` and `length()` from our stored `std::string`. It will be up to the hosting app how to handle it - it can either print or store them. The `write_error` callback could be called multiple times - once per each error string. There is no need to ""terminate"" the list - the end of the `napi_create_platform` is a natural `termination`. The `write_error` callback must accept the `void* hostingData` which must be passed to the `napi_create_platform` to let the hosting application to encapsulate its context for the `write_error` callback.', 'comment_created': datetime.datetime(2022, 10, 11, 18, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 993254403, 'comment_body': ""`napi_create_environment` creates a `napi_env` instance linked to a Node `Environment` containing an additional context pointer (`set_embedded`/`get_embedded`). In theory (one must take care to register the cleanup only once) there can also be multiple `napi_env` instances for a single embedded `Environment` - but I don't see any reason why.\r\n\r\nThe whole point of the NAPI embedding is that it allows reusing of the NAPI functions for the embedded environment. So whatever type I return, that type must remain compatible with all the NAPI functions. In the C++ API, I return a different type (inherited from the basic `Node::Env`), but I don't see any practical way to do this in C. If I return a different type, you will have to cast it every time you invoke a NAPI function.\r\n\r\nI don't understand the problem with the current situation - every `napi_env` is linked to a single `Environment`. When embedding, it is the `Environment` that is slightly different, not the `napi_env`."", 'comment_created': datetime.datetime(2022, 10, 12, 9, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 993261436, 'comment_body': 'If I name this function `napi_create_instance` but still return a `napi_env`, does this address your concern?', 'comment_created': datetime.datetime(2022, 10, 12, 10, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 993271757, 'comment_body': 'Or there is the quite cumbersome option:\r\n```c\r\nnapi_embedded_instance inst;\r\nnapi_create_instance(platform, NULL, NULL, &inst);\r\nnapi_value global;\r\nnapi_get_global(napi_instance_env(inst), &global);\r\n```\r\n\r\nIt is ugly in C, but it will be covered up in C++', 'comment_created': datetime.datetime(2022, 10, 12, 10, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 994629585, 'comment_body': '@vmoroz I moved everything to a new header file, however I would just like to point out that if all those other engines do use N-API, then they would eventually support embedding, and this could become an universal API.\r\nCurrently options are passed as a C array of strings, which is an universal method - even if the options will probably be different - and the only one which is Node.js-centric is the thread_pool_size which probably should get transformed to something else before the API is set in stone.', 'comment_created': datetime.datetime(2022, 10, 13, 13, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 994631135, 'comment_body': 'Done, even if `errors` is mostly wishful thinking at the moment - in reality Node will simply abort on failure - there is no unit testing for this reason', 'comment_created': datetime.datetime(2022, 10, 13, 13, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 1158072610, 'comment_body': '`napi_destroy_environment` has an `exit_code` parameter; `napi_destroy_platform` does not.', 'comment_created': datetime.datetime(2023, 4, 5, 6, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}, {'comment_id': 1162414180, 'comment_body': ""`SpinEventLoopWithoutCleanup` can return for either of two reasons:\r\n  1. The condition lambda returns false (because the promise is resolved)\r\n  2. There are no pending callbacks.\r\n\r\nIn the second case, the call to `promise_object->Result()` here may terminate the process with `SIGABRT` and the following error message:\r\n```\r\nFATAL ERROR: v8_Promise_Result Promise is still pending\r\n```\r\n\r\nI encountered that error from passing in a promise with an empty resolve callback -- my intention was to just have it run indefinitely for now, and I'd consider graceful cleanup later.\r\n\r\nShould this code check the promise state again, and return a different error code (instead of aborting the process) if the promise is not resolved?"", 'comment_created': datetime.datetime(2023, 4, 11, 7, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}, {'comment_id': 1162417589, 'comment_body': ""Don't forget to fix the doc for `napi_destroy_environment` also."", 'comment_created': datetime.datetime(2023, 4, 11, 7, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}, {'comment_id': 1163244223, 'comment_body': ""Node.js in general has an absolutely horrible behavior when it comes to `Promise`s that cannot be resolved because they have no handlers - it always simply quits - without an error code. This has already been discussed and it seems that it will stay like this. Anyway, the other possible valid behavior is to simply hang forever. So, in this case, besides suppressing the error message and the error code, there isn't much that can be done."", 'comment_created': datetime.datetime(2023, 4, 11, 19, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 1291505203, 'comment_body': 'nit: Could we please change `napi_*` to `node_api_*` for all newly introduced elements across the entire PR?', 'comment_created': datetime.datetime(2023, 8, 11, 15, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gabrielschulhof', 'type': 'User'}, {'comment_id': 1291517855, 'comment_body': '@vmoroz Your proposed [`node_api_post_finalizer`](https://github.com/nodejs/node/pull/42651/files#diff-26709ee1f9f0cb60d2d67f45106b31de8ed5eb28ad66c91903fd935a6d607d4dR5428) may complement this API well, because this API must be called directly from the event loop, which is how the `napi_finalizer` passed to `node_api_post_finalizer` will be called.', 'comment_created': datetime.datetime(2023, 8, 11, 15, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gabrielschulhof', 'type': 'User'}, {'comment_id': 1291518518, 'comment_body': '```suggestion\r\n// through Node-API\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 15, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gabrielschulhof', 'type': 'User'}, {'comment_id': 1314695060, 'comment_body': '@gabrielschulhof this is the name of the unit test, most unit tests / benchmarks that test Node-API use the `napi` abbreviation ', 'comment_created': datetime.datetime(2023, 9, 4, 9, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 1518249039, 'comment_body': 'This call to `ShutdownProcess()` prevents another environment instance from being created in the same process. Specifically, a second call to `napi_create_environment()` crashes the process:\r\n```\r\n# Check failed: (g_page_allocator) != nullptr.\r\n``` \r\nI found this because the [node-api-dotnet project](https://github.com/microsoft/node-api-dotnet/pull/219) runs multiple embedding test cases in a process, and each test case uses a separate environment instance. With this line removed, the latest PR revision works well.\r\n\r\nWas there a reason to add this call to `ShutdownProcess()`?', 'comment_created': datetime.datetime(2024, 3, 8, 20, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}]","[{'commit_sha': 'c55bf5082ca57f4f6785dfa9f95fe407316b1ed2', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '414c501e9c35e92b91fdbc8beb360d88811f1e73', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb6c8e7e21b10d0f272ff0155a4d9fec08e9948', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd223ae9dec2441af25bb897f82ff1872a69f807', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '890bfcbb14d696da849bf2b225716f77556c7a3c', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ddf964775073d8723bcf60e67a092743915c34', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '213aea4b761afc79bbd7fbb328fa01d02d753c97', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc342034330452b863076036b3460cc22b2980bd', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b2b90c137b4ddb69302bd97c3c514c57dba436', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5220a89eba4a63165e4dac173e0e5ed701db162a', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b3b25ea9a51c61856327150954b29f0081e24a', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd228be0be2d22bbc5910161943b0b89c52f87c', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a566b7c210406a9f032e35f9a48b61a52ec3559', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7adf10a4a990f2375672f7d0c883f483c6efd93', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebe1c55b4906a028b6ae7fce12748671f8946bf1', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3f0adb4d66d5ca5b30b465e2a76ff63feb4cda', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}]",Momtchil Momtchev,31410344,momtchil@momtchev.com,User,,144,,9,108
976021696,Extend Node-API to `libnode`,"<!--
Before submitting a pull request, please read
https://github.com/nodejs/node/blob/HEAD/CONTRIBUTING.md.

Commit message formatting guidelines:
https://github.com/nodejs/node/blob/HEAD/doc/contributing/pull-requests.md#commit-message-guidelines

For code changes:
1. Include tests for any bug fixes or new features.
2. Update documentation if relevant.
3. Ensure that `make -j4 test` (UNIX), or `vcbuild test` (Windows) passes.

Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
-->

This PR adds support for instantiation and further interaction with an embedded version of Node.js (libnode) entirely through Node-API.

Refs: #43516",False,43542,https://api.github.com/repos/nodejs/node/pulls/43542,https://github.com/nodejs/node/pull/43542,open,1148,32,20,16,27,39,4,0,"[{'name': 'lib / src'}, {'name': 'node-api'}, {'name': 'embedding'}, {'name': 'needs-ci'}]",2022-06-22 22:54:08+00:00,,0.0,,"[{'comment_id': 904814518, 'comment_body': 'What would this mean?', 'comment_created': datetime.datetime(2022, 6, 23, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904814607, 'comment_body': 'This has nothing to do with shared library mode.', 'comment_created': datetime.datetime(2022, 6, 23, 9, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904817050, 'comment_body': 'If we do this, we should probably start adding converters between some Node-API values and V8/Node.js C++ API values (`napi_value` ↔ `Local<Value>`, `napi_env` ↔ `Environment*`/`Isolate*`).\r\n\r\nThe reason nobody has implemented a Node-API embedder API yet is that as an embedder, you often need fine-grained control over a lot of V8 options, and it’s not very practical to mirror the entire V8/Node.js embedder API to C (and that the Node.js C++ embedder API itself still has some rough edges that should probably be ironed out first).', 'comment_created': datetime.datetime(2022, 6, 23, 9, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904832695, 'comment_body': 'That API call is not to be used when using `libnode`', 'comment_created': datetime.datetime(2022, 6, 23, 9, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904833420, 'comment_body': 'This API allows using `libnode` through Node-API and it has no other uses.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904836875, 'comment_body': ""If you need to use raw V8 primitives then you can't use Node-API - this applies to both Node.js -> C++ (binary node addons) and to C++ -> Node.js (libnode). Still this API covers lots of use cases - mostly C++ software that needs to accept JS plugins. It does not cover Electron which has very particular needs.\r\nAllowing for more fine-grained control over the initialisation is of course something that should be considered. "", 'comment_created': datetime.datetime(2022, 6, 23, 10, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904838382, 'comment_body': 'That’s … wrong? Embedding and usage as a shared library are conceptually related but technically orthogonal.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904838401, 'comment_body': 'Why not?', 'comment_created': datetime.datetime(2022, 6, 23, 10, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904839598, 'comment_body': ""> If you need to use raw V8 primitives then you can't use Node-API\r\n\r\nRight, that’s why I’m bringing this up."", 'comment_created': datetime.datetime(2022, 6, 23, 10, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904840538, 'comment_body': ""Because you don't need it - in this case it is the C++ software that will create environments, so it doesn't need the ability to carry its own context in this structure - and because the `instance_data` pointer is used to carry the `libnode` context."", 'comment_created': datetime.datetime(2022, 6, 23, 10, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904841892, 'comment_body': 'Yes, but that doesn’t mean that this call is not compatible with libnode or with embedded mode.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 904846213, 'comment_body': ""Ok, let's call it `Using an embedded version of Node.js`"", 'comment_created': datetime.datetime(2022, 6, 23, 10, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 904846276, 'comment_body': 'It does because, before these new methods, there was no way to use Node-API with libnode at all.', 'comment_created': datetime.datetime(2022, 6, 23, 10, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 905899353, 'comment_body': 'It’s going to be heavily counterintuitive that this is part of a destruction operation.', 'comment_created': datetime.datetime(2022, 6, 24, 9, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 905912104, 'comment_body': 'Once you have drained the event loop, you have no other course of action then to destroy the environment - this is the reason I did it this way. There is no point in having a separate API call, if you will always have to call both of them one after the other. The real question is can we (and should we) keep an environment when its event loops is empty? This would allow to call async functions in a persistent environment but it will introduce a significant difference between the stand-alone Node.js and a embedded Node.js.', 'comment_created': datetime.datetime(2022, 6, 24, 9, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 905940391, 'comment_body': 'You could want to take an action in response to the event loop being drained, though? \r\n\r\n> The real question is can we (and should we) keep an environment when its event loops is empty? \r\n\r\nI think the answer to both questions here is yes.', 'comment_created': datetime.datetime(2022, 6, 24, 10, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 905947041, 'comment_body': ""Ok, but this would require splitting `node::SpinEventLoop` into iteration and cleanup and it is something that is not possible with the current embedders' API."", 'comment_created': datetime.datetime(2022, 6, 24, 10, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 905955257, 'comment_body': '… but it is? The docs for `SpinEventLoop` say which steps it takes, and all of those are public API. `SpinEventLoop()` is a helper, not a building block, and exists only for convenience and stronger API stability for those for whom it is sufficient.', 'comment_created': datetime.datetime(2022, 6, 24, 10, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'addaleax', 'type': 'User'}, {'comment_id': 906723618, 'comment_body': 'Ok, I added `napi_run_environment` that spins up the event loop without destroying the environment when it is emptied and a unit test with an async callback.', 'comment_created': datetime.datetime(2022, 6, 25, 20, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 906724191, 'comment_body': 'Should you be able to mix V8 primitives and Node-API is another topic. If you take the ABI compatibility out of Node-API, there remains little use for it. However `node-addon-api` is a truly higher level API and it is much more practical to use from C++ then raw V8. Maybe there is a use case for software which has 95% `node-addon-api` and 5% custom V8 code. But this is something that goes beyond this PR - and it probably can be used both by embedders and addon authors.', 'comment_created': datetime.datetime(2022, 6, 25, 21, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 978709205, 'comment_body': 'I believe Cloudflare ([service](https://github.com/cloudflare/worker-emscripten-template)) Workers will need [converters](https://markethistory.quora.com/What-is-the-relationship-between-node-js-and-C-1). Is this a Private API thing?', 'comment_created': datetime.datetime(2022, 9, 23, 14, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NickCarducci', 'type': 'User'}, {'comment_id': 992648872, 'comment_body': 'Currently the Node-API is split up between two files: `js_native_api.h` and `node_api.h`.\r\nThe difference is that the `js_native_api.h` contains only cross-engine JS-specific APIs and `node_api.h` has Node.JS-specific APIs. \r\nWe use `js_native_api.h` in different scenarios where we want to interact with different JS engine using ABI-safe Node-API functions. For example, see the [Babylon Native](https://github.com/BabylonJS/BabylonNative/tree/master/Dependencies/napi), [Hermes Node-API](https://github.com/microsoft/hermes-windows/blob/main/API/hermes/hermes_napi.cpp) or [V8-JSI](https://github.com/microsoft/v8-jsi/tree/master/src/napi). In all these scenarios we implement `js_native_api.h` APIs, and we do not use Node.JS or Node-specific `node_api.h`. Even the `js_native_api_v8.h` and `js_native_api_v8.cc` must be free from any Node.JS specific code. Any interaction with the Node-JS specific code must be done either through the functions declared in the `js_native_api_v8_internals.h` or overriding virtual `napi_env__` in the derived `node_napi_env__` class in the `node_api_internals.h`.\r\nThe `node_api.h` has the Node.js specific functions and mostly contains code concerning Node-JS modules and asynchronous code.\r\nFrom this perspective, the Node.JS embedding API must not be part of the `js_native_api.h` header file. It could be in the `node_api.h`, but since this file is to be used by modules, the best option is to put these new APIs in their own `node_hosting_api.h` or `node_embedding_api.h` file. Other applications, such as [Deno](https://deno.land/), could implement the full support for `node_api.h` and `js_native_api.h` to reuse the Node-API modules, but they would never implement the same Node.JS embedding APIs.\r\nThese embedding APIs are Node.JS specific and cannot be re-used for other engines or applications. E.g. other engines do not create a thread pool on their own, or cannot handle Node.JS CLI arguments,\r\nIt could be either pa', 'comment_created': datetime.datetime(2022, 10, 11, 18, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 992655238, 'comment_body': 'Please note that the term `Environment` is somehow overused in Node.JS. \r\nThe `napi_env` is different from the Node.JS `Environment`. \r\nWe create one instance of `napi_env` per each native module. It allows using the `napi_env` instance settings and other flags per module. Each Node.JS environment may have zero or more `napi_env` instances depending on how many Node-API modules it loads.\r\nIt is important to clarify what type of environment the `napi_create_environment` function creates. I bet it is not the `napi_env`, but rather a moniker to the Node.JS `Envrironment`, which I guess must have a different type such as `napi_node_instance`, `napi_node_env`, or something else along those lines.', 'comment_created': datetime.datetime(2022, 10, 11, 18, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 992659001, 'comment_body': ""Can it be an inline function instead? In modern C++ we must avoid macros unless we have a good reason for them. In this case the macro doesn't do anything that cannot be done in a function. "", 'comment_created': datetime.datetime(2022, 10, 11, 18, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 992680634, 'comment_body': 'With the ABI-safe APIs we cannot allocate memory in one module and free it in another. E.g. in our Microsoft Office apps we use custom memory allocations with additional safety checks. The memory allocated in embedded Node.JS cannot be deallocated in Office code that may embed it. To be ABI-safe all memory must be allocated and freed in the same module.\r\nFor example, in the Node-API we often use the Finalizer callback that supports such single memory ownership pattern. In COM we use AddRef/Release to enforce this pattern too. \r\nIn this case we must at least return a pointer to the finalizer function that must be called by `napi_create_platform` user after they finish processing errors, or have a special `napi_free_string_array`.\r\nMy personal preference is to have a special `write_error` callback that we call to write the errors to the hosting app. In that case we would not need to allocate memory and just give them `data()` and `length()` from our stored `std::string`. It will be up to the hosting app how to handle it - it can either print or store them. The `write_error` callback could be called multiple times - once per each error string. There is no need to ""terminate"" the list - the end of the `napi_create_platform` is a natural `termination`. The `write_error` callback must accept the `void* hostingData` which must be passed to the `napi_create_platform` to let the hosting application to encapsulate its context for the `write_error` callback.', 'comment_created': datetime.datetime(2022, 10, 11, 18, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vmoroz', 'type': 'User'}, {'comment_id': 993254403, 'comment_body': ""`napi_create_environment` creates a `napi_env` instance linked to a Node `Environment` containing an additional context pointer (`set_embedded`/`get_embedded`). In theory (one must take care to register the cleanup only once) there can also be multiple `napi_env` instances for a single embedded `Environment` - but I don't see any reason why.\r\n\r\nThe whole point of the NAPI embedding is that it allows reusing of the NAPI functions for the embedded environment. So whatever type I return, that type must remain compatible with all the NAPI functions. In the C++ API, I return a different type (inherited from the basic `Node::Env`), but I don't see any practical way to do this in C. If I return a different type, you will have to cast it every time you invoke a NAPI function.\r\n\r\nI don't understand the problem with the current situation - every `napi_env` is linked to a single `Environment`. When embedding, it is the `Environment` that is slightly different, not the `napi_env`."", 'comment_created': datetime.datetime(2022, 10, 12, 9, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 993261436, 'comment_body': 'If I name this function `napi_create_instance` but still return a `napi_env`, does this address your concern?', 'comment_created': datetime.datetime(2022, 10, 12, 10, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 993271757, 'comment_body': 'Or there is the quite cumbersome option:\r\n```c\r\nnapi_embedded_instance inst;\r\nnapi_create_instance(platform, NULL, NULL, &inst);\r\nnapi_value global;\r\nnapi_get_global(napi_instance_env(inst), &global);\r\n```\r\n\r\nIt is ugly in C, but it will be covered up in C++', 'comment_created': datetime.datetime(2022, 10, 12, 10, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 994629585, 'comment_body': '@vmoroz I moved everything to a new header file, however I would just like to point out that if all those other engines do use N-API, then they would eventually support embedding, and this could become an universal API.\r\nCurrently options are passed as a C array of strings, which is an universal method - even if the options will probably be different - and the only one which is Node.js-centric is the thread_pool_size which probably should get transformed to something else before the API is set in stone.', 'comment_created': datetime.datetime(2022, 10, 13, 13, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 994631135, 'comment_body': 'Done, even if `errors` is mostly wishful thinking at the moment - in reality Node will simply abort on failure - there is no unit testing for this reason', 'comment_created': datetime.datetime(2022, 10, 13, 13, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 1158072610, 'comment_body': '`napi_destroy_environment` has an `exit_code` parameter; `napi_destroy_platform` does not.', 'comment_created': datetime.datetime(2023, 4, 5, 6, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}, {'comment_id': 1162414180, 'comment_body': ""`SpinEventLoopWithoutCleanup` can return for either of two reasons:\r\n  1. The condition lambda returns false (because the promise is resolved)\r\n  2. There are no pending callbacks.\r\n\r\nIn the second case, the call to `promise_object->Result()` here may terminate the process with `SIGABRT` and the following error message:\r\n```\r\nFATAL ERROR: v8_Promise_Result Promise is still pending\r\n```\r\n\r\nI encountered that error from passing in a promise with an empty resolve callback -- my intention was to just have it run indefinitely for now, and I'd consider graceful cleanup later.\r\n\r\nShould this code check the promise state again, and return a different error code (instead of aborting the process) if the promise is not resolved?"", 'comment_created': datetime.datetime(2023, 4, 11, 7, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}, {'comment_id': 1162417589, 'comment_body': ""Don't forget to fix the doc for `napi_destroy_environment` also."", 'comment_created': datetime.datetime(2023, 4, 11, 7, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}, {'comment_id': 1163244223, 'comment_body': ""Node.js in general has an absolutely horrible behavior when it comes to `Promise`s that cannot be resolved because they have no handlers - it always simply quits - without an error code. This has already been discussed and it seems that it will stay like this. Anyway, the other possible valid behavior is to simply hang forever. So, in this case, besides suppressing the error message and the error code, there isn't much that can be done."", 'comment_created': datetime.datetime(2023, 4, 11, 19, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 1291505203, 'comment_body': 'nit: Could we please change `napi_*` to `node_api_*` for all newly introduced elements across the entire PR?', 'comment_created': datetime.datetime(2023, 8, 11, 15, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gabrielschulhof', 'type': 'User'}, {'comment_id': 1291517855, 'comment_body': '@vmoroz Your proposed [`node_api_post_finalizer`](https://github.com/nodejs/node/pull/42651/files#diff-26709ee1f9f0cb60d2d67f45106b31de8ed5eb28ad66c91903fd935a6d607d4dR5428) may complement this API well, because this API must be called directly from the event loop, which is how the `napi_finalizer` passed to `node_api_post_finalizer` will be called.', 'comment_created': datetime.datetime(2023, 8, 11, 15, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gabrielschulhof', 'type': 'User'}, {'comment_id': 1291518518, 'comment_body': '```suggestion\r\n// through Node-API\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 15, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gabrielschulhof', 'type': 'User'}, {'comment_id': 1314695060, 'comment_body': '@gabrielschulhof this is the name of the unit test, most unit tests / benchmarks that test Node-API use the `napi` abbreviation ', 'comment_created': datetime.datetime(2023, 9, 4, 9, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mmomtchev', 'type': 'User'}, {'comment_id': 1518249039, 'comment_body': 'This call to `ShutdownProcess()` prevents another environment instance from being created in the same process. Specifically, a second call to `napi_create_environment()` crashes the process:\r\n```\r\n# Check failed: (g_page_allocator) != nullptr.\r\n``` \r\nI found this because the [node-api-dotnet project](https://github.com/microsoft/node-api-dotnet/pull/219) runs multiple embedding test cases in a process, and each test case uses a separate environment instance. With this line removed, the latest PR revision works well.\r\n\r\nWas there a reason to add this call to `ShutdownProcess()`?', 'comment_created': datetime.datetime(2024, 3, 8, 20, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jasongin', 'type': 'User'}]","[{'commit_sha': 'c55bf5082ca57f4f6785dfa9f95fe407316b1ed2', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '414c501e9c35e92b91fdbc8beb360d88811f1e73', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb6c8e7e21b10d0f272ff0155a4d9fec08e9948', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd223ae9dec2441af25bb897f82ff1872a69f807', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '890bfcbb14d696da849bf2b225716f77556c7a3c', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ddf964775073d8723bcf60e67a092743915c34', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '213aea4b761afc79bbd7fbb328fa01d02d753c97', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc342034330452b863076036b3460cc22b2980bd', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b2b90c137b4ddb69302bd97c3c514c57dba436', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5220a89eba4a63165e4dac173e0e5ed701db162a', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b3b25ea9a51c61856327150954b29f0081e24a', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd228be0be2d22bbc5910161943b0b89c52f87c', 'committer_username': 'mmomtchev', 'committer_name': 'Momtchil Momtchev', 'committer_email': 'momtchil@momtchev.com', 'commit_date': datetime.datetime(2017, 8, 28, 13, 46, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a566b7c210406a9f032e35f9a48b61a52ec3559', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7adf10a4a990f2375672f7d0c883f483c6efd93', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebe1c55b4906a028b6ae7fce12748671f8946bf1', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3f0adb4d66d5ca5b30b465e2a76ff63feb4cda', 'committer_username': 'vmoroz', 'committer_name': 'Vladimir Morozov', 'committer_email': 'vmorozov@microsoft.com', 'commit_date': datetime.datetime(2011, 8, 11, 1, 32, 22, tzinfo=datetime.timezone.utc)}]",Momtchil Momtchev,31410344,momtchil@momtchev.com,User,,144,,9,108

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
508027424,libnode,mmomtchev/libnode,Shell,1,9,1,1,148,2,4,0,"[{'id': 1082986891, 'number': 3, 'closed': datetime.datetime(2022, 10, 11, 10, 0, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 11, 8, 51, 57, tzinfo=datetime.timezone.utc), 'time_taken': 4089.0, 'time_delta': '1:08:09', 'additions': 91, 'deletions': 89, 'state': 'closed'}, {'id': 1081924417, 'number': 2, 'closed': datetime.datetime(2022, 10, 10, 11, 47, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 10, 11, 46, 44, tzinfo=datetime.timezone.utc), 'time_taken': 34.0, 'time_delta': '0:00:34', 'additions': 327, 'deletions': 1859, 'state': 'closed'}]"
27193779,node,nodejs/node,JavaScript,28890,106169,2921,3988,42108,2131,54,543,"[{'id': 1503039401, 'number': 49502, 'closed': datetime.datetime(2023, 9, 6, 6, 32, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 5, 15, 44, 55, tzinfo=datetime.timezone.utc), 'time_taken': 53250.0, 'time_delta': '14:47:30', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1083205169, 'number': 44965, 'closed': datetime.datetime(2023, 5, 13, 7, 49, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 11, 11, 54, 39, tzinfo=datetime.timezone.utc), 'time_taken': 18474914.0, 'time_delta': '213 days, 19:55:14', 'additions': 3, 'deletions': 14, 'state': 'closed'}, {'id': 1045222298, 'number': 44498, 'closed': datetime.datetime(2022, 9, 27, 18, 20, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 19, 35, tzinfo=datetime.timezone.utc), 'time_taken': 2155540.0, 'time_delta': '24 days, 22:45:40', 'additions': 962, 'deletions': 721, 'state': 'closed'}, {'id': 1011901048, 'number': 44039, 'closed': datetime.datetime(2022, 7, 30, 14, 27, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 11, 57, 11, tzinfo=datetime.timezone.utc), 'time_taken': 95430.0, 'time_delta': '1 day, 2:30:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 976021696, 'number': 43542, 'closed': None, 'created': datetime.datetime(2022, 6, 22, 22, 54, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1148, 'deletions': 32, 'state': 'open'}, {'id': 961822517, 'number': 43349, 'closed': datetime.datetime(2023, 5, 13, 7, 48, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 15, 24, 2, tzinfo=datetime.timezone.utc), 'time_taken': 29262246.0, 'time_delta': '338 days, 16:24:06', 'additions': 77, 'deletions': 23, 'state': 'closed'}, {'id': 904946483, 'number': 42671, 'closed': datetime.datetime(2022, 4, 13, 15, 18, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 9, 14, 38, 24, tzinfo=datetime.timezone.utc), 'time_taken': 348032.0, 'time_delta': '4 days, 0:40:32', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 816651647, 'number': 41436, 'closed': None, 'created': datetime.datetime(2022, 1, 7, 20, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 3, 'state': 'open'}, {'id': 674002766, 'number': 39097, 'closed': None, 'created': datetime.datetime(2021, 6, 20, 9, 23, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 15, 'deletions': 2, 'state': 'open'}, {'id': 673891306, 'number': 39091, 'closed': datetime.datetime(2021, 6, 26, 14, 28, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 14, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 603292.0, 'time_delta': '6 days, 23:34:52', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 535143847, 'number': 36452, 'closed': datetime.datetime(2020, 12, 18, 19, 49, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 9, 12, 26, 37, tzinfo=datetime.timezone.utc), 'time_taken': 804202.0, 'time_delta': '9 days, 7:23:22', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 528030273, 'number': 36277, 'closed': datetime.datetime(2021, 1, 13, 11, 59, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 26, 11, 59, 40, tzinfo=datetime.timezone.utc), 'time_taken': 4147168.0, 'time_delta': '47 days, 23:59:28', 'additions': 69, 'deletions': 2, 'state': 'closed'}, {'id': 525330748, 'number': 36229, 'closed': datetime.datetime(2020, 12, 9, 0, 17, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 22, 18, 4, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1404794.0, 'time_delta': '16 days, 6:13:14', 'additions': 38, 'deletions': 6, 'state': 'closed'}, {'id': 524970314, 'number': 36205, 'closed': None, 'created': datetime.datetime(2020, 11, 20, 21, 49, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 50, 'deletions': 1, 'state': 'open'}, {'id': 516056094, 'number': 35977, 'closed': datetime.datetime(2020, 11, 14, 23, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 5, 13, 21, tzinfo=datetime.timezone.utc), 'time_taken': 814320.0, 'time_delta': '9 days, 10:12:00', 'additions': 84, 'deletions': 33, 'state': 'closed'}, {'id': 514832991, 'number': 35946, 'closed': datetime.datetime(2020, 11, 24, 16, 37, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 15, 59, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1816678.0, 'time_delta': '21 days, 0:37:58', 'additions': 56, 'deletions': 20, 'state': 'closed'}, {'id': 514614975, 'number': 35941, 'closed': datetime.datetime(2020, 11, 4, 13, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 9, 53, 25, tzinfo=datetime.timezone.utc), 'time_taken': 98417.0, 'time_delta': '1 day, 3:20:17', 'additions': 38, 'deletions': 6, 'state': 'closed'}, {'id': 514025841, 'number': 35922, 'closed': datetime.datetime(2020, 12, 4, 23, 51, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 2, 12, 29, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2805729.0, 'time_delta': '32 days, 11:22:09', 'additions': 285, 'deletions': 41, 'state': 'closed'}, {'id': 510839236, 'number': 35829, 'closed': datetime.datetime(2020, 10, 27, 19, 41, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 27, 15, 24, 46, tzinfo=datetime.timezone.utc), 'time_taken': 15401.0, 'time_delta': '4:16:41', 'additions': 11, 'deletions': 5, 'state': 'closed'}, {'id': 510212532, 'number': 35820, 'closed': datetime.datetime(2021, 2, 1, 20, 50, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 26, 18, 4, 59, tzinfo=datetime.timezone.utc), 'time_taken': 8477150.0, 'time_delta': '98 days, 2:45:50', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 509604469, 'number': 35798, 'closed': datetime.datetime(2020, 10, 26, 18, 6, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 25, 14, 47, 33, tzinfo=datetime.timezone.utc), 'time_taken': 98308.0, 'time_delta': '1 day, 3:18:28', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 508897197, 'number': 35772, 'closed': datetime.datetime(2020, 11, 8, 14, 29, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 23, 11, 17, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1393920.0, 'time_delta': '16 days, 3:12:00', 'additions': 57, 'deletions': 6, 'state': 'closed'}, {'id': 505320215, 'number': 35694, 'closed': datetime.datetime(2020, 10, 24, 14, 26, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 17, 17, 39, 55, tzinfo=datetime.timezone.utc), 'time_taken': 593220.0, 'time_delta': '6 days, 20:47:00', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 504783862, 'number': 35678, 'closed': datetime.datetime(2020, 10, 25, 10, 29, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 16, 11, 44, 25, tzinfo=datetime.timezone.utc), 'time_taken': 773126.0, 'time_delta': '8 days, 22:45:26', 'additions': 106, 'deletions': 2, 'state': 'closed'}, {'id': 503468731, 'number': 35644, 'closed': datetime.datetime(2020, 12, 22, 10, 10, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 14, 15, 44, 13, tzinfo=datetime.timezone.utc), 'time_taken': 5941569.0, 'time_delta': '68 days, 18:26:09', 'additions': 205, 'deletions': 150, 'state': 'closed'}]"
