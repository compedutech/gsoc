pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
418579927,All: gsoc project - Add search filters,"I ported all the existing filters into the new implementation.
I also added a new filter on tags.
 `tag: docs tag:gsoc`

<!--

Please prefix the title with the platform you are targetting:

Here are some examples of good titles:

- Desktop: Resolves #123: Added new setting to change font
- Mobile, Desktop: Fixes #456: Fixed config screen error
- All: Resolves #777: Made synchronisation faster

And here's an explanation of the title format:

- ""Desktop"" for the Windows/macOS/Linux app (Electron app)
- ""Mobile"" for the mobile app (or ""Android"" / ""iOS"" if the pull request only applies to one of the mobile platforms)
- ""CLI"" for the CLI app

If it's two platforms, separate them with commas - ""Desktop, Mobile"" or if it's for all platforms, prefix with ""All"".

If it's not related to any platform (such as a translation, change to the documentation, etc.), simply don't add a platform.

Then please append the issue that you've addressed or fixed. Use ""Resolves #123"" for new features or improvements and ""Fixes #123"" for bug fixes.

AND PLEASE READ THE GUIDE: https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md

-->
",True,3213,https://api.github.com/repos/laurent22/joplin/pulls/3213,https://github.com/laurent22/joplin/pull/3213,closed,1716,89,27,51,9,53,0,0,[],2020-05-15 13:02:30+00:00,2020-08-07 23:13:22+00:00,7294252.0,"84 days, 10:10:52","[{'comment_id': 426170917, 'comment_body': ""I don't think sleeping between note creation is necessary? If it is, please could you find out why? I would prefer whatever is being done in this 0.1s we do it explicitly in the test."", 'comment_created': datetime.datetime(2020, 5, 16, 16, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 426171079, 'comment_body': ""I would prefer if you remove this, or perhaps only disable the line that's causing problem, explaining why it needs to be disabled."", 'comment_created': datetime.datetime(2020, 5, 16, 17, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 426171158, 'comment_body': ""I'm afraid this kind of regex breaks easily and, additionally, is very hard to make sense of. Wouldn't it be possible to build an actual query parser like it's done in SearchEngine::parseQuery?"", 'comment_created': datetime.datetime(2020, 5, 16, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 426171207, 'comment_body': 'Should `export default function(.....`', 'comment_created': datetime.datetime(2020, 5, 16, 17, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 426171292, 'comment_body': ""Also please define the structure that's being returned as TypeScript interface. In general, we should avoid `any` types."", 'comment_created': datetime.datetime(2020, 5, 16, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 426171352, 'comment_body': 'The input of this function I think should be the output of filterParser()', 'comment_created': datetime.datetime(2020, 5, 16, 17, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 426171810, 'comment_body': ""Please be careful here as you've replaced the MATCH query with a regular query, which is going to be significantly slower. In fact, I think there's no point using FTS if we aren't going to use MATCH queries. See the example in the doc: https://sqlite.org/fts3.html A regular query takes 22.5 seconds and a match one takes 0.03 second. So please check if you can write the query using MATCH."", 'comment_created': datetime.datetime(2020, 5, 16, 17, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 426171902, 'comment_body': 'This file and filterParser should be moved in their own directory. Perhaps there should be a lib/services/searchengine where the SearchEngine class along with your files would go.', 'comment_created': datetime.datetime(2020, 5, 16, 17, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428534431, 'comment_body': ""I think it's not necessary to test the SQL strings as it's a bit too low-level, and might be difficult to maintain. Instead we should test the rows returned from these queries, which I believe you are already doing. So please could you take out this file off the PR for now?"", 'comment_created': datetime.datetime(2020, 5, 21, 9, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428537200, 'comment_body': 'Is it not possible at this point to get the filters working while preserving the existing sorting algorithm? That would be ideal, as that way we can more easily separate and review the filter feature and the sorting feature.', 'comment_created': datetime.datetime(2020, 5, 21, 9, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428537697, 'comment_body': ""Should be `export default function`. In general one file should contain one main function or class that should be exported as default. I'll add an eslint rule to make this clearer."", 'comment_created': datetime.datetime(2020, 5, 21, 9, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428538861, 'comment_body': 'I think there should be tests to handle invalid filters too, such as `body:""""foo""`, `titletitle:123`, `invalid:abc`, `:abc`, etc.', 'comment_created': datetime.datetime(2020, 5, 21, 9, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428539499, 'comment_body': ""That should be done in the parser I think. Basically we should expect that what we get from the parser is valid and can be used right away (or if it's invalid the parser should throw an error)."", 'comment_created': datetime.datetime(2020, 5, 21, 9, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428539730, 'comment_body': ""Please create a constant `const defaultRelation = 'AND'`"", 'comment_created': datetime.datetime(2020, 5, 21, 9, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428543780, 'comment_body': 'I think the parsed query format should be changed to an AST to better show the relation between terms, and for more flexibility. At the moment the relation is associated with one term, but it should be between two or more terms. For example for `title:abc title:efg` it could be something like this:\r\n\r\n```\r\n{\r\n\trelation: ""AND"",\r\n\tterms: [\r\n\t\t{\r\n\t\t\t""title"": ""abcd"",\r\n\t\t},\r\n\t\t{\r\n\t\t\t""title"": ""efg"",\r\n\t\t},\r\n\t],\r\n}\r\n```\r\n\r\nDoesn\'t have to be exactly like this but you see the idea. Perhaps have a look at existing AST and how various structures (such as SQL) are represented.', 'comment_created': datetime.datetime(2020, 5, 21, 9, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428545078, 'comment_body': 'To define array please use the syntax `const result: Filter[] = []` (In general we should avoid using the Array class directly)', 'comment_created': datetime.datetime(2020, 5, 21, 9, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428545913, 'comment_body': ""It's good you use `toContain` as indeed the order may change depending on various factors which are not relevant to this test. üëç "", 'comment_created': datetime.datetime(2020, 5, 21, 9, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428547556, 'comment_body': 'These lines seem to be doing something very similar. Could you perhaps refactor it into a function that takes title, body or text as input?', 'comment_created': datetime.datetime(2020, 5, 21, 9, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428549418, 'comment_body': ""I don't quite understand how it works here as you push values to `params` but there's no corresponding placeholder `?` defined in this conditional block."", 'comment_created': datetime.datetime(2020, 5, 21, 9, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 428787758, 'comment_body': 'The placeholders go into `withs`, which is used to make the final query.', 'comment_created': datetime.datetime(2020, 5, 21, 17, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 429510666, 'comment_body': 'In `targetVersion` 18 we are not using `notes` table for the fts table content. Instead we are using another table called `notes_normalized`. Why do we need this table?', 'comment_created': datetime.datetime(2020, 5, 23, 3, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 432227018, 'comment_body': 'https://discourse.joplinapp.org/t/do-we-need-an-ast/8985', 'comment_created': datetime.datetime(2020, 5, 29, 2, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 433743406, 'comment_body': 'This table is populated in SearchEngine::syncTable. It converts the note title and body to lowercase and removes diacritics.', 'comment_created': datetime.datetime(2020, 6, 2, 9, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443213985, 'comment_body': ""Why would they exist since you are creating them in this migration?\r\n\r\nWe should assume that the database is in a consistent state when running migrations. Trying to handle every possible cases make things more complex and can cause subtle bugs. I'd rather the migration fails if one of the table already exists than deleting data without really knowing what's going on."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443214143, 'comment_body': 'Why would they not exist?', 'comment_created': datetime.datetime(2020, 6, 21, 12, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443214391, 'comment_body': 'Why are these fields not indexed? I guess we could have queries like `type:todo`, in which case an indexed `is_todo` would be useful, or do you handle this differently?', 'comment_created': datetime.datetime(2020, 6, 21, 12, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443214843, 'comment_body': ""Could you put the long queries in this file over multiple lines, so that it's easier to read? eg\r\n\r\n```sql\r\nSELECT note_tags.note_id\r\nFROM note_tags\r\nWHERE note_tags.tag_id IN (\r\n    SELECT tags.id from tags\r\n    WHERE tags.title\r\n    LIKE ?\r\n)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 21, 12, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443215744, 'comment_body': ""Maybe it's just me but I'm having a hard time making sense of what's in this file and I feel it will be hard to maintain this over the long term. First step would be to put the SQL into multiple lines.\r\n\r\nAnother thing you could try is to not use any `let` variables, only `const` and give meaningful names to each part of the query. Then you return a concatenation of all these `const` variables. Doing so means you'll need to restructure the code in a way that makes it easier to understand each part."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443215964, 'comment_body': ""Another thing is why are there optional parameters on all these functions? I didn't check all of them but for example `noteBookFilter` is called only once with only the `names` argument. So the `negated` argument is always false. Any unnecessary argument like this should be removed, which will also help make the code easier to understand."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443216077, 'comment_body': ""There's a lot of date formatting in here. Would it not be possible to use the `moment` package (which we already import) for this?"", 'comment_created': datetime.datetime(2020, 6, 21, 12, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443216355, 'comment_body': 'Whether the Term is a negation or not should be part of the structure. The interface should be:\r\n\r\n```\r\ninterface Term {\r\n    negation: boolean\r\n    name: string\r\n    value: string\r\n}\r\n```\r\n\r\nThen `folder:test` would translate to `{ name: ""folder"", value: ""test"", negation: false }` and `-folder:test` would translate `{ name: ""folder"", value: ""test"", negation: true }`.\r\n\r\nParsing the structure at this stage will mean less duplicated code later on.', 'comment_created': datetime.datetime(2020, 6, 21, 12, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443216912, 'comment_body': ""Likewise, the SQL should be over multiple lines. Also please either split the function into multiple sub-functions or avoid having duplicate code. Things like this for example:\r\n\r\n```\r\nif (value === '1') {\r\n\tqueryParts.push(`${relation} ROWID IN (SELECT ROWID from notes_normalized where notes_normalized.is_todo = 1 AND notes_normalized.todo_completed != 0)`);\r\n} else if (value === '0') {\r\n\tqueryParts.push(`${relation} ROWID IN (SELECT ROWID from notes_normalized where notes_normalized.is_todo = 1 AND notes_normalized.todo_completed = 0)`);\r\n```\r\n\r\nThere's only one character difference between the lines so surely that can be simplified, and there are several examples like this.\r\n\r\nThis pull request unfortunately is quite hard to review and that's partly because it's a tricky feature to implement, but you can also make it easier to understand (and maintain) by putting the SQL over several lines and by avoiding duplicate or unnecessary code."", 'comment_created': datetime.datetime(2020, 6, 21, 12, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 443227805, 'comment_body': ""These triggers are created in `targetVersion == 15`. But I'll remove the `IF EXISTS`."", 'comment_created': datetime.datetime(2020, 6, 21, 14, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 445108261, 'comment_body': 'Yes, I guess we could match ""1"" and ""0"" for `type:todo` and `type:note`, but it wouldn\'t work for most of the other fields because of \'<\' and \'>=\' comparisons.\r\n\r\nEdit: Looking into it further, I think this may not work great. It would complicate the ranking function, because now we would need to distinguish between which text phrases matter to relevance and which are just filters.\r\n\r\nBut queries like `type:todo`, `type:note latitude:58` etc which don\'t need the text search could be made faster by bypassing the FTS virtual table entirely and querying the notes_normalized table directly.\r\n\r\nWe\'ll do this later if we really need the extra speed. It wouldn\'t cause any further database changes.', 'comment_created': datetime.datetime(2020, 6, 24, 19, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 446670942, 'comment_body': ""Shouldn't we be using the local date/time here instead of UTC?\r\n\r\n`created:day-1` should return notes created from yesterday onwards in local time, right?"", 'comment_created': datetime.datetime(2020, 6, 28, 16, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 448122271, 'comment_body': 'What do we do about this?\r\n\r\nAdding `AND notes_fts.user_updated_time IS NOT NULL` to every FTS query will slow it down by about 10 times.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 449758338, 'comment_body': 'Yes indeed all user-facing date/time should be in local time.', 'comment_created': datetime.datetime(2020, 7, 4, 9, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 449758553, 'comment_body': ""In your queries, what will happen if the search index references a note that doesn't exist? Normally we should fix the underlying cause but since we don't know what it is, we should make sure the app doesn't break in the meantime.\r\n\r\nFor sure don't add this condition everywhere, it should just be in one place. If it slow down the queries a lot, then is there any other fast way to check? What if, before returning the rows, you quickly look through the rows and check for empty ones (and remove them)?"", 'comment_created': datetime.datetime(2020, 7, 4, 9, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 450750452, 'comment_body': ""If targetVersion 15 and 18 fail, we're not throwing an error. Instead, we're warning the user that we won't be using FTS. \r\n\r\n```js\r\n try {\r\n     await this.transactionExecBatch(queries);\r\n } catch (error) {\r\n     if (targetVersion === 15 || targetVersion === 18) {\r\n     this.logger().warn('Could not upgrade to database v15 or v18 - FTS feature will not be used', error);\r\n } else {\r\n     throw error;\r\n }\r\n```\r\n\r\nBut if these versions fail, we won't have the triggers created by them for keeping the FTS table in sync.\r\n\r\nSo the line\r\n```js\r\nqueries.push('DROP TRIGGER notes_fts_before_update');\r\n```\r\n in targetVersion 31 will throw an error because that trigger won't exist. Would it be better to warn the user instead of throwing an error for v31 and v32, like we're doing for v15 and v18?\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 10, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 455070663, 'comment_body': 'Yes I guess the logic should be the same.', 'comment_created': datetime.datetime(2020, 7, 15, 13, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 455073067, 'comment_body': 'I see these fields ""id, title, body, user_created_time, user_updated_time...."" being repeated four times in this class. Is there something you can do to make it easier to maintain?', 'comment_created': datetime.datetime(2020, 7, 15, 13, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 455074649, 'comment_body': 'This was meant to address this issue: https://github.com/laurent22/joplin/issues/1075#issuecomment-459258856 How does your current code handle this? And if it does already handle it well I think you can simply delete this code and associated comment.', 'comment_created': datetime.datetime(2020, 7, 15, 14, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 455078169, 'comment_body': 'Your `makeTerm()` function above strips off the ""-"", which I think is the right thing to do. But doesn\'t it mean that all those `-filter` names in your set will never occur?', 'comment_created': datetime.datetime(2020, 7, 15, 14, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 455080838, 'comment_body': 'In the error message, please provide the set of possible values `The value of filter ""type"" must be ""note"" or ""todo""`', 'comment_created': datetime.datetime(2020, 7, 15, 14, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 455082848, 'comment_body': 'I would suggest making the relation an enum as that way you won\'t need to repeat AND | OR a bit everywhere. And the code is not consistent because here it\'s ""AND | OR"" but other places it\'s just ""string"". If you define an enum, it makes it much clearer what are the possible values, and it can prevent errors.', 'comment_created': datetime.datetime(2020, 7, 15, 14, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 455090270, 'comment_body': ""Thanks for cleaning up the code Naveen, this is much more readable now. However, I still see a lot of almost duplicated code. For example the content of dateFilter and typeFilter, completedFilter and locationFilter is almost identical. The resourceFilter and tagFilter also repeats several time the same blocks of code, with small differences between both.\r\n\r\nI feel the code needs to be abstracted more, to make it easier to see what's common between the filters, and what are the differences. Like it took me a while to see why there was different conditional blocks in tagFilter or resourceFilter because the code is so similar. All this makes it difficult to know what the code does, and will make it difficult to maintain it.\r\n\r\nDo you have any suggestions on how you could simplify the code further?"", 'comment_created': datetime.datetime(2020, 7, 15, 14, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 456223237, 'comment_body': 'If the word is quoted, then FTS replaces the line separators by itself. So `""does-not_work""` will actually search for `""does not work""`. So I\'m quoting all words if not already quoted. \r\n\r\nThis won\'t matter to the search semantics. \r\nEg. Searching for `""does""` and `does` are the same.', 'comment_created': datetime.datetime(2020, 7, 17, 5, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 462207816, 'comment_body': 'Please move this kind of computation outside the template string.', 'comment_created': datetime.datetime(2020, 7, 29, 10, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 462208373, 'comment_body': ""Please also move this kind of computation outside the template to improve readability. Also please don't use the `new Array` constructor. In fact, I've disallowed it in eslint.rc (no-array-constructor rule) but somehow it's not picking up the error."", 'comment_created': datetime.datetime(2020, 7, 29, 10, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 462212033, 'comment_body': 'As a first argument to these function, please pass the date that should go forward/backward. Also please clarify what is ""n"" (possible values, unit) and what is timeDuration (possible values, unit, as from your code it seems to be ""day"", ""hours"", etc. but from your example it seems to be milliseconds).', 'comment_created': datetime.datetime(2020, 7, 29, 10, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 462212395, 'comment_body': ""I didn't find tests for these two functions. Please add some if you haven't already done so."", 'comment_created': datetime.datetime(2020, 7, 29, 10, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 462476960, 'comment_body': ""OK. I modified the function and added some clarification.\r\n\r\nWhere should I place the tests? I can't find any existing tests for timeUtils functions.\r\nAlso, do we need a unit test here as we're just calling moment.js functions as per its doc? I haven't written any additional logic."", 'comment_created': datetime.datetime(2020, 7, 29, 17, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 463976462, 'comment_body': ""In that case please create a new file for it. For example duplicate tests/ArrayUtils.js and rename to tests/timeUtils.js. Even though it's relatively straightforward implementation of the moment.js api, it's still good to have a test units to specify what cases exactly we support. It would also be useful if for whatever reason we change from moment.js to another time library."", 'comment_created': datetime.datetime(2020, 8, 1, 16, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': '77d21d0b021d563eea911bba05326b53b8f3a459', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd8e45da283cce594696831ec072cf62485ff515', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f77856fa1c1ca9f33bac928b22594f319f14fed', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271366ce5e3b9d09622d15add82f8140c3cc81a6', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba67455e4e65d34da6c0b399cb32e7f03c249e7d', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e805ae5ca5fd5b80d35a8ba6ddace299d6c734f7', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2f03fc56f7f8b6af56bb344de690b97576ee21', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ddc89057b7d8e8386cbd5978866282d0e174bb3', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6ca58336e7393ed97c274123047966c1dbdd9d', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09ea6ccc8b239ab7e24494b8a835edb337d9faaa', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb2f0c5c8d01c394219da83d2e9090a753da22c8', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efecc706fc16c19d9c917d3270906c0331e99aeb', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3560f4ba2ec0082ac4b0844d8009b012dc284c5b', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a892efb8b359a2d392c2e31810f4ddcfc07d2fa', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ac3f29c020884bdb391a532f4b2c438541033d', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a8f9373d5e509f58b3b91b1ad5ce6a69059241', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636489adf4120e26f027d3faa3e3ed71a939e93f', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acde458a623bf0ab5ef112b08348c6d01a9fe07f', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2729df41c8bb3bff6bb0b8d0b0ef87754735197f', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59db8dcc4396d4020733727eed1ec8d6b92a6f3', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45314997d02797fc013bd4f0b8db71cce9a5977', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '234aabe12d44876cc48ab9dbe0fceffc1fbab89c', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f84dc1baa7fb97c1055437f72c594b64a9ef6a16', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c4fe6f3583f5933ca5b361e4b438ced4f5f3a8', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eaeafb8da3b232817d8afe663c4cc4a54d832bc', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c94e9d864fafd968f43f852f3982eb4245fc677', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1894878b0b3a93c940bd290e31f07cc55b840f7', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b74aa1237e77db8cbe480feeb87fc62d91599f46', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70943f809638aad3254a04b18ead7d0311997c6', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc1b436cc90898736f607647d6f4d7a68d1a56b5', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eecad62e485e3a496c695f29f0b8f636de4d0eba', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36211a5616a9a482424b400a0dc67502ca2b2b1', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b2b618d8090a21797a11aa447078192a2880581', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cfc33ae3c23b715fe8f87f0e62f4f92b1a8edd9', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e5f211a1f75460a5cdf42e6d695099a1e496fdf', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ff5f6f1ca06168d7b0a63f5cfd2b5c63ea40c13', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e57710c4a8b0c9348cd2c9bf741f440853980bf4', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1663cea58c60bd13d15749637dee21a39262c910', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd23fbeea0ccec665474c6e1a865cd8c4e358cd64', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '908b53242aec08066d622df93a4886b4ffdae875', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84669fceb7b9b2bc332787c62b93c2bd7c5620eb', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2792f72d1640d3399c501c1949ec993fe980fc40', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaca2b68afeb963e8252d1fc9032d760b4f70ea0', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab2fc4f29487afa4f2123904140f00eb11d178f3', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc202404a451bb9b384fcb2f69a4492d9a9cc243', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c492dcb8f914582c2711a3970e4c7460bcec60', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25bd0779afb7ef36252844c8798c9cbabb1160cb', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcf0a1ede482b3d9fb1813a6badf336858efae4f', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8348279fb37d8eec77463786d0f6e08c822f5469', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f099ca027f5392a06d13da2b09d9c10ad42eac54', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13c0408108818e002f95784371ed0c26c4cefca5', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}]",Naveen,30305957,,User,,35,,17,13
444244862,All: Weigh notes using Okapi BM25 score,"<!--

Please prefix the title with the platform you are targetting:

Here are some examples of good titles:

- Desktop: Resolves #123: Added new setting to change font
- Mobile, Desktop: Fixes #456: Fixed config screen error
- All: Resolves #777: Made synchronisation faster

And here's an explanation of the title format:

- ""Desktop"" for the Windows/macOS/Linux app (Electron app)
- ""Mobile"" for the mobile app (or ""Android"" / ""iOS"" if the pull request only applies to one of the mobile platforms)
- ""CLI"" for the CLI app

If it's two platforms, separate them with commas - ""Desktop, Mobile"" or if it's for all platforms, prefix with ""All"".

If it's not related to any platform (such as a translation, change to the documentation, etc.), simply don't add a platform.

Then please append the issue that you've addressed or fixed. Use ""Resolves #123"" for new features or improvements and ""Fixes #123"" for bug fixes.

AND PLEASE READ THE GUIDE: https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md

-->

https://en.wikipedia.org/wiki/Okapi_BM25
We use FTS4 matchinfo function to get the required parameters for calculating BM25 score.
https://www.sqlite.org/fts3.html#matchinfo
",True,3454,https://api.github.com/repos/laurent22/joplin/pulls/3454,https://github.com/laurent22/joplin/pull/3454,closed,196,26,4,4,2,0,0,0,[],2020-07-04 06:07:54+00:00,2020-08-18 22:53:28+00:00,3948334.0,"45 days, 16:45:34",[],"[{'commit_sha': '011ed8cb29a79a16c241f4cbbbde2f75822cd44d', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5f95fec822748a60d6d1dabb926523dde2ab6e1', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e90a98a6cf8d5660178ba96fbb1f06f9c960a756', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6633d20855ade52c09f117e93d84348203d5de', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}]",Naveen,30305957,,User,,35,,17,13
468258366,Desktop: Fuzzy search,"<!--

Please prefix the title with the platform you are targetting:

Here are some examples of good titles:

- Desktop: Resolves #123: Added new setting to change font
- Mobile, Desktop: Fixes #456: Fixed config screen error
- All: Resolves #777: Made synchronisation faster

And here's an explanation of the title format:

- ""Desktop"" for the Windows/macOS/Linux app (Electron app)
- ""Mobile"" for the mobile app (or ""Android"" / ""iOS"" if the pull request only applies to one of the mobile platforms)
- ""CLI"" for the CLI app

If it's two platforms, separate them with commas - ""Desktop, Mobile"" or if it's for all platforms, prefix with ""All"".

If it's not related to any platform (such as a translation, change to the documentation, etc.), simply don't add a platform.

Then please append the issue that you've addressed or fixed. Use ""Resolves #123"" for new features or improvements and ""Fixes #123"" for bug fixes.

AND PLEASE READ THE GUIDE: https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md

-->
",True,3632,https://api.github.com/repos/laurent22/joplin/pulls/3632,https://github.com/laurent22/joplin/pull/3632,closed,602,209,31,22,14,33,0,0,[],2020-08-15 04:24:26+00:00,2020-09-06 12:07:01+00:00,1928555.0,"22 days, 7:42:35","[{'comment_id': 471058340, 'comment_body': 'This relative path only works for ElectronClient.\r\n\r\nWhen running CliClient the current working directory would be `CliClient/` while the lib folder is inside `CliClient/build`\r\nIs there a better way to do this?', 'comment_created': datetime.datetime(2020, 8, 16, 3, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 471111727, 'comment_body': ""Is it not possible to install it via npm? Because we also need to make sure it's compatible with whatever version of the Sqlite lib is installed via npm."", 'comment_created': datetime.datetime(2020, 8, 16, 13, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 471116598, 'comment_body': ""No. Spellfix is a loadable extension. Its source code can be found here:\r\nhttps://www.sqlite.org/src/dir?ci=tip&name=ext/misc\r\n\r\nFrom the documentation, we need to compile the C source code to different platforms (unix, windows) like this: https://www.sqlite.org/loadext.html#compiling_a_loadable_extension\r\n\r\nSince it is an official extension wouldn't compatibility be guaranteed by sqlite (whatever the version)?\r\n"", 'comment_created': datetime.datetime(2020, 8, 16, 14, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 473888388, 'comment_body': ""Could you clarify why the key is set like this? Is it to force an update of the component? If that's needed it means there's some issue with the way state is handled. In fact I've just noticed that you don't even need to set a key here normally."", 'comment_created': datetime.datetime(2020, 8, 20, 11, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473888694, 'comment_body': 'Should be wrapped in _()', 'comment_created': datetime.datetime(2020, 8, 20, 11, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473889072, 'comment_body': 'Why do we need an ID here?', 'comment_created': datetime.datetime(2020, 8, 20, 11, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473889630, 'comment_body': 'Please refactor so that you don\'t need to handle the even twice. I think if you wrap the input inside the label, or set the ""for"" attribute on the label you won\'t need this duplicate even handling.', 'comment_created': datetime.datetime(2020, 8, 20, 11, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473890295, 'comment_body': ""Please take these changes out, we'll deal with them in the separate pull request."", 'comment_created': datetime.datetime(2020, 8, 20, 11, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473890682, 'comment_body': 'Please remove commented out code from the pull request, it makes it more difficult to follow.', 'comment_created': datetime.datetime(2020, 8, 20, 11, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473890769, 'comment_body': 'Why the white space changes?', 'comment_created': datetime.datetime(2020, 8, 20, 11, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473890915, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 8, 20, 11, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473891009, 'comment_body': 'remove', 'comment_created': datetime.datetime(2020, 8, 20, 11, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473891078, 'comment_body': 'remove', 'comment_created': datetime.datetime(2020, 8, 20, 11, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473891439, 'comment_body': 'Does this feature still work?', 'comment_created': datetime.datetime(2020, 8, 20, 11, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473891692, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 8, 20, 11, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473891859, 'comment_body': 'remove', 'comment_created': datetime.datetime(2020, 8, 20, 11, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473892195, 'comment_body': 'Please use async/await and try/catch', 'comment_created': datetime.datetime(2020, 8, 20, 11, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473892347, 'comment_body': 'no need to wrap in new Promise - you can simply throw the exception', 'comment_created': datetime.datetime(2020, 8, 20, 11, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473892923, 'comment_body': '`await this.driver().loadExtension(path);` should work', 'comment_created': datetime.datetime(2020, 8, 20, 11, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473894306, 'comment_body': ""The database should not have platform checks, instead please use dependency injection and pass to the database the relevant spellfix extension path. The mobile app won't set any path so here you should just check if a path is set - if it is, load the extension, otherwise do nothing."", 'comment_created': datetime.datetime(2020, 8, 20, 11, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473894911, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 8, 20, 11, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473896160, 'comment_body': 'This will be called before the compileSpellFix code has finished running. Instead please use async/await and try/catch.\r\n\r\n```js\r\ntry {\r\n\tconst dest = await fs.mkdirp(dest); // For consistency please use mkdirp\r\n\tawait compileSpellfix(dest);\r\n} catch (error) {\r\n\tconsole.warn(error);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 11, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473898497, 'comment_body': ""Thanks for creating the compile script but how do you plan to handle Windows (which is 60% of our users)? The script will run from within PowerShell which won't have these tools.\r\n\r\nI'm not sure the script will run successfully on CI i some dependency is missing, but I can check that when it's deployed.\r\n\r\nThe most important I guess is to make it work on Windows. If it's too complicated to build from source then we could fall back on a pre-compiled binary in this case. What do you think?"", 'comment_created': datetime.datetime(2020, 8, 20, 11, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 473899324, 'comment_body': ""Any reason why the exceptions are silenced? If it fails to download, the script should end there since it won't be able to compile. So in fact I think you don't need a try/catch block here."", 'comment_created': datetime.datetime(2020, 8, 20, 11, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 475165147, 'comment_body': ""It is to force an update. I found this hack in ConfigScreen.jsx\r\n\r\n```\r\n\r\n\t\t\t// Hack: The {key+value.toString()} is needed as otherwise the checkbox doesn't update when the state changes.\r\n\t\t\t// There's probably a better way to do this but can't figure it out.\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div key={key + value.toString()} style={rowStyle}>\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 8, 23, 3, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 475165313, 'comment_body': ""I don't understand. Please explain."", 'comment_created': datetime.datetime(2020, 8, 23, 3, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 475165820, 'comment_body': ""I'd still need to use `props.highlightedWords` instead of `props.searchMarkers.keywords` for highlighting the search results."", 'comment_created': datetime.datetime(2020, 8, 23, 3, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 475166335, 'comment_body': '`output.keywords` is now only being used for highlighting words in local note find.\r\n\r\nThe words to highlight in a search query is saved in the state and can be found from the state variable `highlightedWords`.\r\n\r\nThis is necessary because `parseQuery()`is now asynchronous and makes database calls. ', 'comment_created': datetime.datetime(2020, 8, 23, 3, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 475172392, 'comment_body': 'Yes. Using a pre-compiled binary (at least for Windows) would be best. Compiling it from source requires additional build tools. ', 'comment_created': datetime.datetime(2020, 8, 23, 5, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'naviji', 'type': 'User'}, {'comment_id': 475640898, 'comment_body': ""Could you fix your code so that this hack is not needed please? (in general, new code shouldn't be based on old hacks)"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 475641218, 'comment_body': ""I mean it should be `{_('Fuzzy')}` so that the string gets translated."", 'comment_created': datetime.datetime(2020, 8, 24, 14, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 475651330, 'comment_body': ""Any reason why there has to be two properties for the searchMarkers / highlightedWords for highlighting? Couldn't you update useSearchMarkers so that it gives the data you need?"", 'comment_created': datetime.datetime(2020, 8, 24, 14, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}, {'comment_id': 483157046, 'comment_body': 'Could you add a comment to explain what this line does please? Otherwise the other changes look good.', 'comment_created': datetime.datetime(2020, 9, 3, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'laurent22', 'type': 'User'}]","[{'commit_sha': '68178474c3dce07bb0bae77fc6daee2e38abb747', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '451e67682f2a786ed850bcb11af321bc6748bbaf', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dba4e14453519ebd8dd6eb506941e8434a039d42', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52edd2ce139802a4bb4857c3cd3da8718a2a0cdc', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5185e2927dc519ee155bfb7f3b1bbe5dde62b303', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf83bafa69e63011c4cc56f1097a5492b073d10e', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8654dcfac46b6ed4234b2cd8fad36f180519e0a2', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3781d220b68ef2885bd92ca6c5c1dc30a69e7865', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e7645a4a6a4d7685a6baf2008b6336d6f9cb179', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74cadefdc46958b3c35f241f8770cc22173b6931', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '422f30c0861a4bc0b3ecc14fc7deb6dfad049d65', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36d411dae01ce6b9c4da2d910ba84abf4d771c59', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9692d96cadd3b716854fc210abd6c1a91b686d05', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3795c7bea3be8f9c45f81bf9d5612a3996d06161', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f5c6c0fa83c5efd4d5c42fbd7179a2ee684f1d5', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1880e006461fe8b12dca29c404a1cee5a0fe220e', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65da6fa0741785af366691a9e7df1fd3d84010eb', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18bcca132b9380890b7ecf60caa71229449767b2', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64825b3b7dbcd612e69ca1eedfac0bd9ee14de41', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d0596d6fa03a9ce086de12db5b1d7fad2bb36ad', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f6fabd38b20eca06777b5b92038664f0d16b95', 'committer_username': 'naviji', 'committer_name': 'Naveen', 'committer_email': None, 'commit_date': datetime.datetime(2017, 7, 20, 2, 25, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e87d56c62000ec5b271316ec34ac1f7384b10c', 'committer_username': 'laurent22', 'committer_name': 'Laurent Cozic', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 26, 4, 20, 45, tzinfo=datetime.timezone.utc)}]",Naveen,30305957,,User,,35,,17,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
79162682,joplin,laurent22/joplin,TypeScript,4862,44782,483,642,11771,402,244,8,"[{'id': 590196119, 'number': 4653, 'closed': datetime.datetime(2021, 11, 11, 17, 23, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 10, 21, 52, 55, tzinfo=datetime.timezone.utc), 'time_taken': 21238246.0, 'time_delta': '245 days, 19:30:46', 'additions': 172, 'deletions': 11, 'state': 'closed'}, {'id': 589966232, 'number': 4651, 'closed': datetime.datetime(2021, 3, 11, 14, 42, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 10, 17, 58, 26, tzinfo=datetime.timezone.utc), 'time_taken': 74653.0, 'time_delta': '20:44:13', 'additions': 72, 'deletions': 12, 'state': 'closed'}, {'id': 579594902, 'number': 4593, 'closed': datetime.datetime(2021, 3, 10, 22, 27, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 24, 20, 37, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1216227.0, 'time_delta': '14 days, 1:50:27', 'additions': 24, 'deletions': 195, 'state': 'closed'}, {'id': 514863790, 'number': 4034, 'closed': datetime.datetime(2020, 11, 26, 12, 35, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 16, 46, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1972101.0, 'time_delta': '22 days, 19:48:21', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 505424075, 'number': 3947, 'closed': datetime.datetime(2020, 10, 22, 11, 16, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 18, 6, 51, 17, tzinfo=datetime.timezone.utc), 'time_taken': 361530.0, 'time_delta': '4 days, 4:25:30', 'additions': 26, 'deletions': 3, 'state': 'closed'}, {'id': 505386217, 'number': 3946, 'closed': datetime.datetime(2020, 10, 20, 10, 54, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 18, 4, 7, 7, tzinfo=datetime.timezone.utc), 'time_taken': 197260.0, 'time_delta': '2 days, 6:47:40', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 491730379, 'number': 3812, 'closed': datetime.datetime(2020, 9, 28, 17, 58, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 23, 12, 10, 41, tzinfo=datetime.timezone.utc), 'time_taken': 452859.0, 'time_delta': '5 days, 5:47:39', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 488378706, 'number': 3759, 'closed': datetime.datetime(2020, 9, 17, 8, 32, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 17, 3, 29, 51, tzinfo=datetime.timezone.utc), 'time_taken': 18182.0, 'time_delta': '5:03:02', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 486022893, 'number': 3741, 'closed': datetime.datetime(2020, 9, 14, 3, 17, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 12, 20, 59, 38, tzinfo=datetime.timezone.utc), 'time_taken': 109096.0, 'time_delta': '1 day, 6:18:16', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 482978564, 'number': 3735, 'closed': datetime.datetime(2020, 9, 11, 10, 30, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 9, 16, 41, 35, tzinfo=datetime.timezone.utc), 'time_taken': 150563.0, 'time_delta': '1 day, 17:49:23', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 480803173, 'number': 3713, 'closed': datetime.datetime(2020, 9, 11, 21, 52, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 6, 15, 35, 42, tzinfo=datetime.timezone.utc), 'time_taken': 454611.0, 'time_delta': '5 days, 6:16:51', 'additions': 73, 'deletions': 21, 'state': 'closed'}, {'id': 468258366, 'number': 3632, 'closed': datetime.datetime(2020, 9, 6, 12, 7, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 4, 24, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1928555.0, 'time_delta': '22 days, 7:42:35', 'additions': 602, 'deletions': 209, 'state': 'closed'}, {'id': 466493494, 'number': 3622, 'closed': datetime.datetime(2020, 9, 6, 23, 8, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 4, 4, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2228606.0, 'time_delta': '25 days, 19:03:26', 'additions': 4, 'deletions': 6, 'state': 'closed'}, {'id': 465027913, 'number': 3614, 'closed': datetime.datetime(2020, 8, 17, 23, 15, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 12, 46, 49, tzinfo=datetime.timezone.utc), 'time_taken': 815292.0, 'time_delta': '9 days, 10:28:12', 'additions': 19, 'deletions': 2, 'state': 'closed'}, {'id': 444244862, 'number': 3454, 'closed': datetime.datetime(2020, 8, 18, 22, 53, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 6, 7, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3948334.0, 'time_delta': '45 days, 16:45:34', 'additions': 196, 'deletions': 26, 'state': 'closed'}, {'id': 428185568, 'number': 3328, 'closed': datetime.datetime(2020, 6, 5, 15, 5, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 2, 33, 1, tzinfo=datetime.timezone.utc), 'time_taken': 45167.0, 'time_delta': '12:32:47', 'additions': 6, 'deletions': 42, 'state': 'closed'}, {'id': 418938301, 'number': 3216, 'closed': datetime.datetime(2020, 5, 16, 12, 42, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 16, 8, 59, 21, tzinfo=datetime.timezone.utc), 'time_taken': 13386.0, 'time_delta': '3:43:06', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 418579927, 'number': 3213, 'closed': datetime.datetime(2020, 8, 7, 23, 13, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 13, 2, 30, tzinfo=datetime.timezone.utc), 'time_taken': 7294252.0, 'time_delta': '84 days, 10:10:52', 'additions': 1716, 'deletions': 89, 'state': 'closed'}, {'id': 391580758, 'number': 2819, 'closed': datetime.datetime(2020, 5, 15, 11, 13, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 20, 15, 3, 42, tzinfo=datetime.timezone.utc), 'time_taken': 4824601.0, 'time_delta': '55 days, 20:10:01', 'additions': 907, 'deletions': 60, 'state': 'closed'}, {'id': 391010905, 'number': 2809, 'closed': datetime.datetime(2020, 3, 21, 11, 29, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 13, 42, 11, tzinfo=datetime.timezone.utc), 'time_taken': 164832.0, 'time_delta': '1 day, 21:47:12', 'additions': 30, 'deletions': 2, 'state': 'closed'}, {'id': 378735808, 'number': 2563, 'closed': datetime.datetime(2020, 3, 15, 9, 38, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 23, 18, 28, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1782584.0, 'time_delta': '20 days, 15:09:44', 'additions': 381, 'deletions': 46, 'state': 'closed'}]"
