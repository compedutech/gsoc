pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1332856601,Language Identification module,,True,695,https://api.github.com/repos/mandiant/flare-floss/pulls/695,https://github.com/mandiant/flare-floss/pull/695,closed,141,1,7,34,7,43,0,0,[],2023-04-29 20:36:41+00:00,2023-05-31 05:43:32+00:00,2711211.0,"31 days, 9:06:51","[{'comment_id': 1182397715, 'comment_body': '```suggestion\r\nignore_missing_imports = True\r\n\r\n```', 'comment_created': datetime.datetime(2023, 5, 2, 10, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1182397839, 'comment_body': '```suggestion\r\n.vscode\r\n\r\n```', 'comment_created': datetime.datetime(2023, 5, 2, 10, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1182398225, 'comment_body': '```suggestion\r\n    reference:\r\n```', 'comment_created': datetime.datetime(2023, 5, 2, 10, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1182398776, 'comment_body': 'this and related code could ideally go into a separate file', 'comment_created': datetime.datetime(2023, 5, 2, 11, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1189485684, 'comment_body': 'i think this needs to be added to setup.py', 'comment_created': datetime.datetime(2023, 5, 10, 7, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1189486176, 'comment_body': '```suggestion\r\n    Check if the binary given is compiled with Go compiler or not\r\n```', 'comment_created': datetime.datetime(2023, 5, 10, 7, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1189488772, 'comment_body': 'please wrap this in a try/except because this decoding might easily fail on corrupt PE files\r\n```suggestion\r\n        try:\r\n            section_name = section.Name.partition(b""\\x00"")[0].decode(""utf-8"")\r\n        except UnicodeDecodeError:\r\n            continue\r\n        if "".rdata"" in section_name:\r\n```', 'comment_created': datetime.datetime(2023, 5, 10, 7, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1189491244, 'comment_body': 'it might be expensive to fetch the section data (in practice maybe not that bad, but still), so lets pull the computation out of the inner loop\r\n\r\n```suggestion\r\n            section_data = section.get_data(section_va, section_size)\r\n            for magic in go_magic:\r\n                if magic in section_data:\r\n                    pclntab_va = section_data.index(magic) + section_va\r\n                    if verify_pclntab(section, pclntab_va):\r\n                        return True\r\n```', 'comment_created': datetime.datetime(2023, 5, 10, 7, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1189492631, 'comment_body': '```suggestion\r\n            section_data = section.get_data(section_va, section_size)\r\n            if magic in section_data:\r\n                pclntab_va = section_data.index(magic) + section_va\r\n                if verify_pclntab(section, pclntab_va):\r\n                    # just for testing\r\n                    return True\r\n```', 'comment_created': datetime.datetime(2023, 5, 10, 7, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1189495931, 'comment_body': '```suggestion\r\n    pc_quanum = section.get_data(pclntab_va + 6, 1)[0]\r\n    pointer_size = section.get_data(pclntab_va + 7, 1)[0]\r\n    return pc_quanum in {1, 2, 4} and pointer_size in {4, 8}:\r\n        return False\r\n```', 'comment_created': datetime.datetime(2023, 5, 10, 7, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1189497667, 'comment_body': '```suggestion\r\n        logger.warning(""Go Binary Detected, Go binaries are not supported yet. Results may be inaccurate."")\r\n        logger.warning(""Go: Proceeding with analysis may take a long time."")\r\n```\r\n\r\nThe language name is ""Go"", which can be difficult to Google for, since its such as short name, hence the convention that people sometimes use ""golang"". but we should use ""Go"" here because its the correct name.', 'comment_created': datetime.datetime(2023, 5, 10, 7, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1189944796, 'comment_body': 'There\'s another validation that can be used. It can speed the process but will not work for all samples. I will add it as most of the samples i saw have it. \r\nI\'m talking about the string ""Go Build"" in the header of PE so instead of going to read the whole section, the first bytes of the binary could be checked for this string. This might not work for all the samples but can be useful as many samples have this string (unstripped binaries i guess).', 'comment_created': datetime.datetime(2023, 5, 10, 13, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1189955966, 'comment_body': ""it's already in the requirements in setup.py"", 'comment_created': datetime.datetime(2023, 5, 10, 13, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1198786521, 'comment_body': 'should this be an expected fail for now, but actually `True`?', 'comment_created': datetime.datetime(2023, 5, 19, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1198788575, 'comment_body': 'perfect, thanks!', 'comment_created': datetime.datetime(2023, 5, 19, 10, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1198791801, 'comment_body': 'see the tests issue, we should at least catch FileNotFound here specifically and maybe also pefile errors.', 'comment_created': datetime.datetime(2023, 5, 19, 10, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1198791866, 'comment_body': ""shouldn't this be also in the same directory as the other binaries? do we need to assert, paths exist?"", 'comment_created': datetime.datetime(2023, 5, 19, 10, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1198929686, 'comment_body': 'I added the file check. in test script and in try/except', 'comment_created': datetime.datetime(2023, 5, 19, 12, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1198931403, 'comment_body': 'right, i edited it. but it will fail for now as elf not handled yet. ', 'comment_created': datetime.datetime(2023, 5, 19, 12, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1198932379, 'comment_body': 'this still hides potential errors, please explicitly handle the expected exceptions', 'comment_created': datetime.datetime(2023, 5, 19, 13, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1198942447, 'comment_body': ""let's comment it out with a note on that for now"", 'comment_created': datetime.datetime(2023, 5, 19, 13, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1198942593, 'comment_body': ""let's comment it out with a note on that for now"", 'comment_created': datetime.datetime(2023, 5, 19, 13, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mr-tz', 'type': 'User'}, {'comment_id': 1199004333, 'comment_body': ""After some googling, i tried to handle it. If you see a specific case, tell me. \r\nThe `Exception` case is raised as it is a generic exception, idk if this is the right thing but that's what i think of it."", 'comment_created': datetime.datetime(2023, 5, 19, 14, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1200526001, 'comment_body': '@mr-tz can you take a look', 'comment_created': datetime.datetime(2023, 5, 22, 13, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1205406073, 'comment_body': 'is this unused?', 'comment_created': datetime.datetime(2023, 5, 25, 11, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205406523, 'comment_body': '```suggestion\r\nlogger = floss.logging_.getLogger(__name__)\r\n```\r\n\r\nwe prefer to name the loggers after the module name so its easy to see where the output is coming from', 'comment_created': datetime.datetime(2023, 5, 25, 11, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205408789, 'comment_body': 'why is this ""in"" versus ""==""?\r\n\r\nif the goal is to support multiple `.rdata` sections then the `return False` below should be unindented one level so that each of the candidates is handled.', 'comment_created': datetime.datetime(2023, 5, 25, 11, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205409022, 'comment_body': 'see above discussion and consider if this indentation is correct.', 'comment_created': datetime.datetime(2023, 5, 25, 11, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205410529, 'comment_body': ""and/or if this should be here. im possibly wrong about my interpretation, so don't hesitate to explain and keep it around."", 'comment_created': datetime.datetime(2023, 5, 25, 11, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205411469, 'comment_body': 'wrap this in a try/except to handle malformed pe files where this data is not accessible. in that case, return False', 'comment_created': datetime.datetime(2023, 5, 25, 12, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205413569, 'comment_body': 'not strictly required, but seems like a good idea', 'comment_created': datetime.datetime(2023, 5, 25, 12, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205826696, 'comment_body': 'I think you are right. I will test it. \r\n\r\nwhy `in` instead of `==`, I read a blog for a long time ago and he mentioned that the section name could be not strictly equal what we expect, it might have a garbage byte that will make the equality not true. It is better to use it anyway as the comparison will be small so will not affect the performance. ', 'comment_created': datetime.datetime(2023, 5, 25, 17, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1205828071, 'comment_body': 'I will do it. thank you.\r\nSeems like I should think more about exceptions lol. ', 'comment_created': datetime.datetime(2023, 5, 25, 17, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1205831725, 'comment_body': 'But what about the loop? I guess it will return after only one iteration if it unindented one level. ', 'comment_created': datetime.datetime(2023, 5, 25, 17, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1205858166, 'comment_body': '>  it might have a garbage byte that will make the equality not true.\r\n\r\nah, ok, yeah this is the probably the case *if* you don\'t truncate at the first NULL byte. but, since you have the partition above, i think we can use `== "".rdata""`.', 'comment_created': datetime.datetime(2023, 5, 25, 18, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205859653, 'comment_body': 'in which case, we only expect there to be a single section named .rdata, so we only expect the loop to even run once, so we can have the return in the inner branch, and in the outer scope just let things fall through. so maybe just remove the second return?', 'comment_created': datetime.datetime(2023, 5, 25, 18, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205860129, 'comment_body': '```suggestion\r\n        if "".rdata"" == section_name:\r\n```', 'comment_created': datetime.datetime(2023, 5, 25, 18, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205860320, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 5, 25, 18, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1205866856, 'comment_body': ""ok, it's better to remove it. reason why I used it to just return if the target data not in the expected section. But it could be intentionally! \r\nty"", 'comment_created': datetime.datetime(2023, 5, 25, 18, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}, {'comment_id': 1206324915, 'comment_body': '```suggestion\r\ndef get_go_version(magic):\r\n    """"""get the version of the go compiler used to compile the binary""""""\r\n        \r\n    MAGIC_112 = b""\\xfb\\xff\\xff\\xff\\x00\\x00""  # Magic Number from version 1.12\r\n    MAGIC_116 = b""\\xfa\\xff\\xff\\xff\\x00\\x00""  # Magic Number from version 1.16\r\n    MAGIC_118 = b""\\xf0\\xff\\xff\\xff\\x00\\x00""  # Magic Number from version 1.18\r\n    MAGIC_120 = b""\\xf1\\xff\\xff\\xff\\x00\\x00""  # Magic Number from version 1.20\r\n\r\n    if magic == MAGIC_112:\r\n        return ""1.12""\r\n    elif magic == MAGIC_116:\r\n        return ""1.16""\r\n    elif magic == MAGIC_118:\r\n        return ""1.18""\r\n    elif magic == MAGIC_120:\r\n        return ""1.20""\r\n    else:\r\n        return ""unknown""\r\n\r\n```\r\nHi,\r\n\r\nI reviewed your pull request for detecting Go binaries, and I think it\'s a great addition to our project! I have one suggestion that could further enhance the functionality.\r\n\r\nSince we\'re already checking for Go binaries, it would be helpful to also print the Go version number when a Go binary is detected. This would provide us with valuable information about the specific version being used.\r\n\r\nWhat do you think of this idea?\r\n If you have any questions or suggestions, feel free to share them. 😃\r\nThanks', 'comment_created': datetime.datetime(2023, 5, 26, 7, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Arker123', 'type': 'User'}, {'comment_id': 1206326168, 'comment_body': '```suggestion\r\n                        logger.warning(""Go binary found with version %s"", get_go_version(magic))\r\n                        return True\r\n```', 'comment_created': datetime.datetime(2023, 5, 26, 7, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Arker123', 'type': 'User'}, {'comment_id': 1206326744, 'comment_body': '```suggestion\r\n                    # just for testing\r\n                    logger.warning(""Go binary found with version %s"", get_go_version(magic))\r\n```', 'comment_created': datetime.datetime(2023, 5, 26, 7, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Arker123', 'type': 'User'}, {'comment_id': 1206651014, 'comment_body': ""It's a good feature. I thought about it when I saw it used in DiE signatures. But I didn't believe that it would make any difference, the core thing is extracting the strings which did not change over the versions. \r\nBut as you have implemented it, it will be a nice addition. "", 'comment_created': datetime.datetime(2023, 5, 26, 11, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'd01a', 'type': 'User'}]","[{'commit_sha': '1084f9cee141c265761afd7fe7503d688b36aebd', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed81f13b594fab74f5dead2f8272553424bbf32', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d7a1c3a49a16c6e4b9ff2fed3f02ce9d896903', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc88d4cf102cd3b65ec56c6fcac81732f5d9311c', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d5608581d30e9529c928d9a032398da9e0a6973', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9235f328b69ebee2c997870ac7374b6443644a8d', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f271b0dd9fe662d102a4b7df751c28d183919fa3', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '813874835d88d30c6a58ef9c06c7cd3414557aff', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed71c84f9ed3a67907109e622eed2a1fcbfcd41f', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb91ca6fcfce62b8aa9dfdf7f56cfbd17ef71', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c553e8fa53c73732658cd396241624f30a3b507b', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df596caef9a31669023df71d84224741994de1f', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a34edb15e004626ca7e3d0f2452f34f5e22c6f', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9216457a09a1b5ec080296709aeab9659d62eae0', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465a1106cfa902e4e3b9edfab5b8f8408bd42a95', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '833e1945d3fd7fe257f94f729d3837846e7ffd25', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6601c6df76fb6d6900edc2bd255911a344ef9aea', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef6e1e0554d1065bd0b74203987f536b1a71d80', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e326607f14d1ff124a4a42773e3f6e685032a33a', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3938a97b71447791f60eb70149ee9e8c1723ed8', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b285f9c6b573ab128d13c1f2c62e86e13a0716', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da402d720628c43ed6ff54b7310e5ab208b753f4', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94bdc78e8e02408941eaa49c9d56c26de83e2e3', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a6874dcd1da02de9cb641b559f4f865e68a782', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6172cbeb88c7280c3e0fdd2acff4597271ba41d7', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f631fe5b6c9bfad43503a2d47e266f1e77c338e', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '068e429abbc2bcd1980310571a3c618fdf0a93d3', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695fba2429b21956349839b43be2d20b8bbd6b5d', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e45ec6072727217823cd9655f2f0367063a8b45', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d57ebf40f600a8efe329db37d32e262ea2d4ba9', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e50b91dca0bfb745490998294d846436394219d', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a73941ce8d40e9079adebb01636b05ecda3c95c', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9351a13f8c8fc68b8e2ffe6db1a0a995fa6dc6', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25351c3002151ad71122d2daee2dfd88cbbedc84', 'committer_username': 'd01a', 'committer_name': 'Mohamed Adel', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 27, 2, 33, 20, tzinfo=datetime.timezone.utc)}]",Mohamed Adel,65991757,,User,,13,,107,56
