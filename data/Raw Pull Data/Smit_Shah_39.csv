pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1263516572,Implemented GetDimensions module,"- This pull request will resolve issue #19 
-  I have implemented GetDimensions module and tested it successfully
-  Kindly review and let me know whether any further changes are required or not",True,29,https://api.github.com/repos/compiler-research/CppInterOp/pulls/29,https://github.com/compiler-research/CppInterOp/pull/29,closed,31,8,3,1,7,7,0,0,[],2023-03-05 19:33:26+00:00,2023-03-06 19:43:18+00:00,86992.0,"1 day, 0:09:52","[{'comment_id': 1126098350, 'comment_body': '```suggestion\r\n\r\n  std::vector<TCppIndex_t> GetDimensions(TCppType_t OpaqueQualType);\r\n```', 'comment_created': datetime.datetime(2023, 3, 6, 8, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1126099917, 'comment_body': '```suggestion\r\n  std::vector<TCppIndex_t> GetDimensions(TCppType_t OpaqueQualType)\r\n```\r\nPlease keep the types uniform. The declaration returns `std::vector<TCppIndex_t>`.', 'comment_created': datetime.datetime(2023, 3, 6, 8, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1126103024, 'comment_body': '```suggestion\r\n    std::vector<TCppIndex_t> dims = InterOp::GetDimensions(InterOp::GetVariableType(D));\r\n```\r\n\r\nCan you change the type of `truth_dims` to match.', 'comment_created': datetime.datetime(2023, 3, 6, 8, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1126113830, 'comment_body': ""```suggestion\r\n  std::vector<TCppIndex_t> GetDimensions(TCppType_t type);\r\n```\r\n\r\nNaming it `OpaqueQualType` exposes the underlying API being used. I think we should stick to generic names. @vgvassilev what's your thought on this?"", 'comment_created': datetime.datetime(2023, 3, 6, 9, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1126115494, 'comment_body': 'I would agree also for consistency reasons. ', 'comment_created': datetime.datetime(2023, 3, 6, 9, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1126187111, 'comment_body': '```suggestion\r\n  std::vector<TCppIndex_t> GetDimensions(TCppType_t type);\r\n```', 'comment_created': datetime.datetime(2023, 3, 6, 10, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1126187392, 'comment_body': '```suggestion\r\n  std::vector<TCppIndex_t> GetDimensions(TCppType_t type)\r\n  {\r\n    QualType Qual = QualType::getFromOpaquePtr(type);\r\n```', 'comment_created': datetime.datetime(2023, 3, 6, 10, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}]","[{'commit_sha': '3158ffdc5841bba9cb669bb6aa8b2bf352409518', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1265087960,Implemented GetFunctionArgDefault Module ,"- This pull request will resolve issue #15 
- I have implemented GetFunctionArgDefault module and implemented successfully
- Kindly review and let me know any further changes are required or not
- @vgvassilev and @sudo-panda ",True,31,https://api.github.com/repos/compiler-research/CppInterOp/pulls/31,https://github.com/compiler-research/CppInterOp/pull/31,closed,42,5,3,1,6,19,0,0,[],2023-03-06 19:54:23+00:00,2023-03-13 11:31:56+00:00,574653.0,"6 days, 15:37:33","[{'comment_id': 1127841767, 'comment_body': 'Can you explain this branch with a comment?', 'comment_created': datetime.datetime(2023, 3, 7, 13, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1127843080, 'comment_body': 'If you can think of any edge cases for this test you can add them as well.', 'comment_created': datetime.datetime(2023, 3, 7, 13, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1127902318, 'comment_body': '- Actually the main reason to add this branch was that my modified code was giving output for float type default argument as **4.** (rather than **4.0**) , so in order to get proper output I added this branch to check that if default argument is float type and if it stores value like ""3.,4.,5."" then the code makes sure to add ""0"" at end of returned string \r\n- I hope I have justified the question asked by you correctly\r\n- If there are still any questions I am happy to explain you further about it', 'comment_created': datetime.datetime(2023, 3, 7, 13, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1127917310, 'comment_body': 'We need to use a proper pretty printing. This fixes the test case and not the underlying issue. ', 'comment_created': datetime.datetime(2023, 3, 7, 14, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1127923311, 'comment_body': ""@vgvassilev I think we can just remove the `0` from the test because I don't see any reason that we would need it in the output. Do you have a case where it could be problematic?"", 'comment_created': datetime.datetime(2023, 3, 7, 14, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1127959213, 'comment_body': ""> @vgvassilev I think we can just remove the `0` from the test because I don't see any reason that we would need it in the output. Do you have a case where it could be problematic?\r\n\r\nI'd be fine with that if we add a test case with a default argument `3.123` and it passes."", 'comment_created': datetime.datetime(2023, 3, 7, 14, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1129069419, 'comment_body': ""What's in `OS` after this line? Why we need extra work for the floating point case?"", 'comment_created': datetime.datetime(2023, 3, 8, 7, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1129166892, 'comment_body': '- Here OS will store default value of arguments \r\n- Only reason to add extr work for floating point case is same as I mentioned above that when default value was given **3.123** above function returned value with very high precision and not exact default value (like **3.123000001**)\r\n- Hence to remove this error I added extra work case for floating point case to return same default value as it is provided without giving large precision or wrong answer\r\n- I hope I have answered the question you have asked\r\n- If you do feel some improvement required pls let me know so I could try for better solution\r\n- @vgvassilev ', 'comment_created': datetime.datetime(2023, 3, 8, 9, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1129188051, 'comment_body': 'Clang’s pretty printer does not print that, so it must be an api that already exists. Maybe that’s controlled by the printing policy. ', 'comment_created': datetime.datetime(2023, 3, 8, 9, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1129252783, 'comment_body': 'Yes I also think that printing policy is the one that is causing this inappropriate behaviour and searching for a solution to it', 'comment_created': datetime.datetime(2023, 3, 8, 10, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1129720602, 'comment_body': ""- @vgvassilev \r\n- After searching a lot, I feel that even if I change printing policy I will need to check that if argument is float type or not and if so then its precision must be preserved (using modified policy)\r\n- Hence I feel at the end we might need to check for floating type anyways (as we are doing in current code)\r\n- I am just little confused to what are your expectation from code (as current code also works correctly)\r\n- According to me I don't think that we can remove condition of checking float type variable\r\n- So, could you pls explain me your requirements so I could work on it more properly"", 'comment_created': datetime.datetime(2023, 3, 8, 16, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1130569773, 'comment_body': ""I think I understand now what you are saying. Here is an example which forces clang to print its default arguments: https://godbolt.org/z/vzWxKdsnh \r\n\r\nThis seems a deficiency in clang. Perhaps it's worth discussing that at the mailing lists. Clang should print the default argument as written and not as represented.\r\n\r\nFor the sake of this PR, I think it should be fine to use some rounding mode and add a fixme explaining this implementation detail of clang."", 'comment_created': datetime.datetime(2023, 3, 9, 7, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1131304467, 'comment_body': ""- Sir regarding rounding mode I feel that current code gives default value same as written, so won't it be better than using round mode as it will narrow down precision level of arguments to a fixed number\r\n- And even for round mode I will have to change printing police to setPrecision() (for which floating point variable identification will be necessary)\r\n- So should I add round mode or continue with current code + FIXME \r\n- @vgvassilev "", 'comment_created': datetime.datetime(2023, 3, 9, 16, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1133089482, 'comment_body': '```suggestion\r\n      // FIXME: Floats printed in clang with the precision of their underlying representation\r\n      // and not as written. This is a deficiency in the printing mechanism of clang which we\r\n      // extra work to mitigate. For example float PI = 3.14 is printed as 3.1400000000000001.\r\n      if (PI->getType()->isFloatingType())\r\n```\r\n\r\nCan you delete the fixme above and use this one instead?', 'comment_created': datetime.datetime(2023, 3, 11, 14, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1133135369, 'comment_body': 'I have made changes in FIXME @vgvassilev as mentioned by you.\r\nAre there any further changes/improvements required pls let me know so that I could start working on it', 'comment_created': datetime.datetime(2023, 3, 11, 19, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1133135547, 'comment_body': 'Again, single commit message which reads well.', 'comment_created': datetime.datetime(2023, 3, 11, 19, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1133136609, 'comment_body': '- I hope its according to your requirements', 'comment_created': datetime.datetime(2023, 3, 11, 19, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1133136962, 'comment_body': '```suggestion\r\n  /// Returns the default argument value as string.\r\n  std::string GetFunctionDefaultArgValueAsString(TCppFunction_t func, TCppIndex_t param_index);\r\n```', 'comment_created': datetime.datetime(2023, 3, 11, 19, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1133138207, 'comment_body': 'I have made this changes as mentioned by you sir\r\nI hope this is correct now', 'comment_created': datetime.datetime(2023, 3, 11, 19, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}]","[{'commit_sha': '3f91f798393bb5d1c9e91e84bd5a259e2dd3a019', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1266003969,Implemented IsSubType Module Successfully,"- This pull request will resolve issue #18 
- I have implemented IsSubType Module and ran it succesfully
- Kindly review it and please let me know whether any improvement or changes are required or not
- @vgvassilev and @sudo-panda ",True,32,https://api.github.com/repos/compiler-research/CppInterOp/pulls/32,https://github.com/compiler-research/CppInterOp/pull/32,closed,35,8,3,1,9,21,0,0,[],2023-03-07 10:33:36+00:00,2023-03-11 19:33:17+00:00,377981.0,"4 days, 8:59:41","[{'comment_id': 1127676016, 'comment_body': '```suggestion\r\n    if (derivedType.isNull() || baseType.isNull())\r\n      return false;\r\n```', 'comment_created': datetime.datetime(2023, 3, 7, 10, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1127676294, 'comment_body': '```suggestion\r\n    if (!derivedDecl || !baseDecl)\r\n      return false;\r\n```', 'comment_created': datetime.datetime(2023, 3, 7, 10, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1127676559, 'comment_body': '```suggestion\r\n    if (derivedDecl == baseDecl)\r\n      return true;\r\n```', 'comment_created': datetime.datetime(2023, 3, 7, 10, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1127676883, 'comment_body': '```suggestion\r\n      if (baseRecordType && baseRecordType->getDecl() == baseDecl)\r\n        return true;\r\n```', 'comment_created': datetime.datetime(2023, 3, 7, 10, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1127849879, 'comment_body': '```suggestion\r\n  bool IsSubType(TCppType_t derived, TCppType_t base);\r\n```\r\n\r\nFor consistency.', 'comment_created': datetime.datetime(2023, 3, 7, 13, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1127850271, 'comment_body': '```suggestion\r\n  bool IsSubType(TCppType_t derived, TCppType_t base)\r\n```', 'comment_created': datetime.datetime(2023, 3, 7, 13, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1127850738, 'comment_body': '```suggestion\r\n    auto derivedType = clang::QualType::getFromOpaquePtr(derived);\r\n    auto baseType = clang::QualType::getFromOpaquePtr(base);\r\n```', 'comment_created': datetime.datetime(2023, 3, 7, 13, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1127851815, 'comment_body': 'Can you add more test cases?', 'comment_created': datetime.datetime(2023, 3, 7, 13, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1130571580, 'comment_body': 'I think we could implement that using `Sema::isDerivedFrom`: https://clang.llvm.org/doxygen/classclang_1_1Sema.html#ae9fa2ea2b4ce733c9f50241d25c45132', 'comment_created': datetime.datetime(2023, 3, 9, 7, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1130643375, 'comment_body': '@sudo-panda, what should that function return if we ask a nested type if it is a subtype?', 'comment_created': datetime.datetime(2023, 3, 9, 8, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1130684761, 'comment_body': 'The input can be assumed to be a `RecordType`', 'comment_created': datetime.datetime(2023, 3, 9, 9, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1130709402, 'comment_body': 'Consider:\r\n```cpp\r\n  class A {\r\n    class B{};\r\n  };\r\n```\r\n\r\n  Is `B` a ""subtype"" of `A`? I think we should consider only the class hierarchy and for that case, if required, we should have a separate interface. If you agree, I\'d propose renaming `IsSubType` to become `IsDerivedFrom`.', 'comment_created': datetime.datetime(2023, 3, 9, 9, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1130729688, 'comment_body': 'Yeah I agree we are looking for something like ""IsTypeDerivedFrom"". \n\nI didn\'t know that inner classes are also referred to as subtypes.', 'comment_created': datetime.datetime(2023, 3, 9, 9, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 1131250636, 'comment_body': '- @vgvassilev and @sudo-panda excluding change in Module name, do I have to make any further changes or anything else is expected from me??\r\n- Pls let me know so I could work on it', 'comment_created': datetime.datetime(2023, 3, 9, 16, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1131470405, 'comment_body': 'See my initial comment, this is what we need to do, and change the interface name as @sudo-panda suggested.', 'comment_created': datetime.datetime(2023, 3, 9, 19, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1132307861, 'comment_body': '@Smit1603 this is not yet done ', 'comment_created': datetime.datetime(2023, 3, 10, 12, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1132419044, 'comment_body': '- @vgvassilev I think I might have misinterpreted you\r\n- My current code works similar to IsSubclass module present in ScopeReflection Test.cpp\r\n- So I feel it does the work that was supposed to do (as interpreted by me)\r\n- But i still feel that I am misinterpreting what you are asking for so could you pls explain to me once again about the changes that you are recommending and what I have done wrong\r\n- Sorry to keep disturbing you', 'comment_created': datetime.datetime(2023, 3, 10, 14, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1133083960, 'comment_body': '```suggestion\r\n  bool IsTypeDerivedFrom(SemaType *S, TCppType_t derived, TCppType_t base)\r\n  {\r\n    auto derivedType = clang::QualType::getFromOpaquePtr(derived);\r\n    auto baseType = clang::QualType::getFromOpaquePtr(base);\r\n    return S->isDerivedFrom(derivedType, baseType);\r\n  }\r\n```\r\n\r\nI was suggesting something like that.', 'comment_created': datetime.datetime(2023, 3, 11, 13, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1133136131, 'comment_body': '```suggestion\r\n  /// Check if a C++ type derives from another.\r\n  bool IsTypeDerivedFrom(TCppSema_t sema, TCppType_t derived, TCppType_t base);\r\n```', 'comment_created': datetime.datetime(2023, 3, 11, 19, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1133136140, 'comment_body': '```suggestion\r\n  bool IsTypeDerivedFrom(TCppSema_t sema, TCppType_t derived, TCppType_t base)\r\n```', 'comment_created': datetime.datetime(2023, 3, 11, 19, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1133137643, 'comment_body': 'Have performed this minor changes ', 'comment_created': datetime.datetime(2023, 3, 11, 19, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}]","[{'commit_sha': 'aa22c2796e512d6e26d809b30635b300df48f787', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1274622841,Implemented IsConstant Module,"- Fixes compiler-research/InterOp#13
- I have implemented and successfully tested IsConstant Module
- However there has been an unexpected hardware issue on my device so it has to be sent for servicing purpose, so it will be difficult for me to take up and resolve your issues/suggestions immediately
- Kindly review and pls let me know suggestions/improvements
- I would try to resolve and look over your suggestion as soon as possible 
- I am currently finding a way to continue being active and contribute",True,42,https://api.github.com/repos/compiler-research/CppInterOp/pulls/42,https://github.com/compiler-research/CppInterOp/pull/42,closed,19,3,3,1,4,3,0,0,[],2023-03-14 08:49:33+00:00,2023-03-31 05:46:13+00:00,1457800.0,"16 days, 20:56:40","[{'comment_id': 1135313848, 'comment_body': '```suggestion\r\n    if (!method)\r\n      return false;\r\n    auto *D = (clang::Decl *)method;\r\n\r\n    if (auto *func = dyn_cast<CXXMethodDecl>(D))\r\n       return func->getMethodQualifiers().hasConst());\r\n```', 'comment_created': datetime.datetime(2023, 3, 14, 10, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1145455221, 'comment_body': 'Please delete the unused code. Also make all of this in one commit with a good commit message.', 'comment_created': datetime.datetime(2023, 3, 22, 22, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1146314312, 'comment_body': '```suggestion\r\n      return false;\r\n\r\n    auto *D = (clang::Decl *)method;\r\n```', 'comment_created': datetime.datetime(2023, 3, 23, 14, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}]","[{'commit_sha': '3e709e2a55076a08217d3a2836623b32a6316d4a', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1299442615,Implemented GetFunctionArgName Module,"- Fixes #14 
- @vgvassilev and @sudo-panda 
- I have implemented and successfully tested GetFunctionArgName Module
- Kindly review and pls let me know any suggestions/improvements
- I would try to resolve/make changes as soon as possible",True,49,https://api.github.com/repos/compiler-research/CppInterOp/pulls/49,https://github.com/compiler-research/CppInterOp/pull/49,closed,22,10,3,1,9,1,0,0,[],2023-04-03 05:25:32+00:00,2023-04-04 06:59:06+00:00,92014.0,"1 day, 1:33:34","[{'comment_id': 1156794156, 'comment_body': '```suggestion\r\n    auto *FD = llvm::cast<clang::FunctionDecl>(D);\r\n```', 'comment_created': datetime.datetime(2023, 4, 4, 6, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '1a0cf5429c14bc81ef7620c73fc6a2fd9a3bf532', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1417950587,Codecov setup,"-Tried Adding Codecov setup, setup is being established however coverage report is not being generated hence issued a draft PR for your review @vgvassilev and @sudo-panda 
",True,104,https://api.github.com/repos/compiler-research/CppInterOp/pulls/104,https://github.com/compiler-research/CppInterOp/pull/104,closed,63,13,2,1,6,5,0,0,[],2023-07-03 11:36:31+00:00,2023-07-25 17:48:59+00:00,1923148.0,"22 days, 6:12:28","[{'comment_id': 1266580340, 'comment_body': '```suggestion\r\n        lcov --remove coverage.info \'/usr/*\' ""${HOME}""\'/.cache/*\' ${{ github.workspace }}\'/llvm-project/*\' --output-file coverage.info\r\n```\r\n\r\nWe probably need something like that...', 'comment_created': datetime.datetime(2023, 7, 18, 10, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1271434314, 'comment_body': 'Why we have clang-format related changes in this PR?', 'comment_created': datetime.datetime(2023, 7, 23, 11, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1271441468, 'comment_body': ""- Actually I had a merge commit in my branch owing to which when I rebased the branch, this file are also shown as changing, however I also don't know why has this occured.\r\n- I think I might had been an error on my side while working, but actually I am searching how to resolve it.\r\n- Should I remove that locally and then commit so that unnecessary files aren't changed??"", 'comment_created': datetime.datetime(2023, 7, 23, 12, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1271441613, 'comment_body': 'I can take care of this.', 'comment_created': datetime.datetime(2023, 7, 23, 12, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1271444389, 'comment_body': 'Ohk , sry but I will take care of this next time!!', 'comment_created': datetime.datetime(2023, 7, 23, 12, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}]","[{'commit_sha': '001c258c00e7aac489beb608228be7f55958e964', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1427434040,Running clang-format on PR,"- This PR will add clang-format to the CI and fix #82 
- @vgvassilev and @sudo-panda pls review",True,108,https://api.github.com/repos/compiler-research/CppInterOp/pulls/108,https://github.com/compiler-research/CppInterOp/pull/108,closed,54,7,3,1,3,1,0,0,[],2023-07-10 12:29:07+00:00,2023-07-10 19:05:50+00:00,23803.0,6:36:43,"[{'comment_id': 1258484673, 'comment_body': 'I just noticed that this can cause issues once the ubuntu-latest changes because we are specifically downloading llvm for `jammy`, which is ubuntu-22.04. I would suggest that we fix this to `ubuntu-22.04`. I will make sure to fix this in clad too. ', 'comment_created': datetime.datetime(2023, 7, 10, 16, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}]","[{'commit_sha': 'ab9eaef9ae3d0bc6f79c284e57b2de846d8faafe', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1470794144,Run clang-tidy on PR,"@vgvassilev could you suggest a way to resolve the CMake error, already tried sudo command to install all required libraries yet facing the same issue",True,130,https://api.github.com/repos/compiler-research/CppInterOp/pulls/130,https://github.com/compiler-research/CppInterOp/pull/130,closed,135,0,4,1,2,2,0,0,[],2023-08-10 18:26:58+00:00,2023-08-21 16:26:00+00:00,943142.0,"10 days, 21:59:02","[{'comment_id': 1295341786, 'comment_body': ""Hi @Smit1603, this action runs the `cmake` command in a docker container, so any dependencies that you install in the host machine won't be available to the container while building. \r\nSo, to fix this, you should install these dependencies inside the clang-tidy step itself, you can use the `apt_packages` option to install these dependencies ([reference](https://github.com/ZedThree/clang-tidy-review))."", 'comment_created': datetime.datetime(2023, 8, 16, 3, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1295666453, 'comment_body': 'Ohhh yeah, I understood, actually I was plaining to create a seperate docker container to resolve but this might be best I feel. Will try this ', 'comment_created': datetime.datetime(2023, 8, 16, 9, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}]","[{'commit_sha': 'dcc24e8730063edde07f51e81813ddd81d68900f', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1491015398,Add and update tests,,True,139,https://api.github.com/repos/compiler-research/CppInterOp/pulls/139,https://github.com/compiler-research/CppInterOp/pull/139,closed,68,11,5,1,2,7,0,0,[],2023-08-27 16:45:43+00:00,2023-08-28 17:27:59+00:00,88936.0,"1 day, 0:42:16","[{'comment_id': 1306694640, 'comment_body': ""warning: variable 'enumNames1' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<std::string> enumNames1 = 0 = Cpp::GetEnums(globalscope);\n```\n"", 'comment_created': datetime.datetime(2023, 8, 27, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1306694641, 'comment_body': ""warning: variable 'enumNames2' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<std::string> enumNames2 = 0 = Cpp::GetEnums(Animals_scope);\n```\n"", 'comment_created': datetime.datetime(2023, 8, 27, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1306721196, 'comment_body': 'I am wondering where is the implementation of `GetEnums`?', 'comment_created': datetime.datetime(2023, 8, 27, 20, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1306910707, 'comment_body': 'Its already implemented in CppInterOp.cpp', 'comment_created': datetime.datetime(2023, 8, 28, 5, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1307605851, 'comment_body': '```suggestion\r\n  void GetEnums(TCppScope_t scope, std::vector<std::string>& Result);\r\n```\r\n\r\nWe should change the signature in this way.', 'comment_created': datetime.datetime(2023, 8, 28, 15, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1307677965, 'comment_body': 'We should update the comment as the function does not return a vector anymore.', 'comment_created': datetime.datetime(2023, 8, 28, 16, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1307685905, 'comment_body': ""warning: variable 'enumNames1' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<std::string> enumNames1 = 0, enumNames2;\n```\n"", 'comment_created': datetime.datetime(2023, 8, 28, 17, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}]","[{'commit_sha': 'a18eaf7b4c6a5025e35bbf3698e4f30904a1ff71', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1509125127,Updating CI with macOS build,"- Added steps to build LLVM/clang on macOS and works perfectly
- Errors are being faced while building and testing CppInterop hence needs to be fixed yet",True,149,https://api.github.com/repos/compiler-research/CppInterOp/pulls/149,https://github.com/compiler-research/CppInterOp/pull/149,closed,144,48,5,3,7,18,0,0,[],2023-09-10 11:55:21+00:00,2023-10-02 11:29:33+00:00,1899252.0,"21 days, 23:34:12","[{'comment_id': 1320793687, 'comment_body': 'Please keep only the relevant changes for this pull request.', 'comment_created': datetime.datetime(2023, 9, 10, 15, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1320793910, 'comment_body': 'That seems irrelevant comment.', 'comment_created': datetime.datetime(2023, 9, 10, 16, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1320793953, 'comment_body': 'Can we get away from conda, and use only brew?', 'comment_created': datetime.datetime(2023, 9, 10, 16, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1320794071, 'comment_body': 'This step is not really different from the step on unix. Can we merge them?', 'comment_created': datetime.datetime(2023, 9, 10, 16, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1320794108, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2023, 9, 10, 16, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1321326542, 'comment_body': ""Actually made this changes as while running on macOS , I was facing bad substitution error and found that earlier command to make string uppercase wasn't available for macOS. Hence used this new command which is valid and running for both Linux and macOS"", 'comment_created': datetime.datetime(2023, 9, 11, 10, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1321326828, 'comment_body': 'Taken care of it', 'comment_created': datetime.datetime(2023, 9, 11, 10, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1321328438, 'comment_body': 'Since its python libraries, so used pip command rather than brew.', 'comment_created': datetime.datetime(2023, 9, 11, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1321330882, 'comment_body': 'Yaa so I tried combining them and faced an unforeseen error where building of llvm got terminated unexpectedly. Hence looking for it.', 'comment_created': datetime.datetime(2023, 9, 11, 10, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1321332876, 'comment_body': 'Yeah merged them, just a thing to be mentioned is lld linker is not supported on clang compiler. Hence i removed that flag and now default ld64 linker is being used in every environment. Is this change ok for our project??', 'comment_created': datetime.datetime(2023, 9, 11, 10, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1321431527, 'comment_body': 'This can be solved by adding a matrix switch to handle the platform-specific cmake options: https://github.com/vgvassilev/clad/blob/59fd672f54d171577857fe75ed9223b91d7902d1/.github/workflows/ci.yml#L93', 'comment_created': datetime.datetime(2023, 9, 11, 11, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1321439370, 'comment_body': 'Ohh understood....will add it after current run passes\r\n', 'comment_created': datetime.datetime(2023, 9, 11, 12, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1327995462, 'comment_body': '```suggestion\r\n#ifdef __APPLE__\r\nTEST(FunctionReflectionTest, DISABLED_JitCallAdvanced) {\r\n#else\r\nTEST(FunctionReflectionTest, JitCallAdvanced) {\r\n#endif\r\n```\r\n\r\nWe should use this pattern everywhere.', 'comment_created': datetime.datetime(2023, 9, 16, 18, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1328077404, 'comment_body': 'Yes made changes according to this pattern everywhere', 'comment_created': datetime.datetime(2023, 9, 17, 10, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1338140614, 'comment_body': 'Can you make this somewhere in the settings of the build and then just use ncpus instead of if-stmts everywhere?\r\n\r\n```\r\nif [[ ""${os}"" == ""macos*"" ]]; then\r\n   ncpus=$(sysctl -n hw.physicalcpu)\r\nelse\r\n   ncpus=$(nproc --all)\r\nfi\r\n```', 'comment_created': datetime.datetime(2023, 9, 27, 7, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1338360885, 'comment_body': 'Maybe we should use hw.ncpu instead hw.physicalcpu', 'comment_created': datetime.datetime(2023, 9, 27, 9, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexander-penev', 'type': 'User'}, {'comment_id': 1341961534, 'comment_body': 'Why did you comment this section?', 'comment_created': datetime.datetime(2023, 9, 30, 13, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1342267635, 'comment_body': '- Made an environment variable to store number of cpu cores and replaced hw.physicalcpu to hw.ncpu', 'comment_created': datetime.datetime(2023, 10, 2, 4, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}]","[{'commit_sha': '554696c80edbfe95ec7d067ccdae4d6405ff0462', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69085467dc7b500f321eb5e7be1cb06e509c0b40', 'committer_username': 'vgvassilev', 'committer_name': 'Vassil Vassilev', 'committer_email': None, 'commit_date': datetime.datetime(2014, 1, 27, 16, 43, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b28872f85de7e3f012a7c9e34442533d11682896', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1544927500,Building and testing cling tests on osx,,True,152,https://api.github.com/repos/compiler-research/CppInterOp/pulls/152,https://github.com/compiler-research/CppInterOp/pull/152,closed,12,1,2,1,2,0,0,0,[],2023-10-06 08:35:15+00:00,2023-10-19 15:37:45+00:00,1148550.0,"13 days, 7:02:30",[],"[{'commit_sha': '0d0f431786c57dae26f698532c3a6b0f49277334', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1564452256,Adding Tests for edge cases,,True,154,https://api.github.com/repos/compiler-research/CppInterOp/pulls/154,https://github.com/compiler-research/CppInterOp/pull/154,closed,118,13,5,25,1,10,0,0,[],2023-10-19 09:52:40+00:00,2023-10-19 15:26:11+00:00,20011.0,5:33:31,"[{'comment_id': 1365257054, 'comment_body': 'warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(Cpp::GetTypeAsString(Cpp::GetIntegerTypeFromEnumScope(Decls[5])),""NULL TYPE"");\n                                                                        ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257060, 'comment_body': 'warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(get_int_type_from_enum_var(Decls[5]), ""NULL TYPE""); // When a nullptr is returned by GetVariableType()\n                                             ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257063, 'comment_body': 'warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(get_int_type_from_enum_var(Decls[6]), ""bool"");\n                                             ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257065, 'comment_body': 'warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(get_int_type_from_enum_var(Decls[7]), ""char"");\n                                             ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257067, 'comment_body': 'warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(get_int_type_from_enum_var(Decls[8]), ""int"");\n                                             ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257072, 'comment_body': 'warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(get_int_type_from_enum_var(Decls[9]), ""long long"");\n                                             ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257076, 'comment_body': 'warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(get_int_type_from_enum_var(Decls[10]), ""unsigned int"");\n                                             ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257080, 'comment_body': 'warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(get_int_type_from_enum_var(Decls[11]), ""NULL TYPE""); // When a non Enum Type variable is used \n                                             ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257083, 'comment_body': 'warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  EXPECT_EQ(Cpp::GetEnumConstants(Decls[5]).size(), 0);\n                                        ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1365257086, 'comment_body': ""warning: variable 'enumNames1' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<std::string> enumNames1 = 0, enumNames2, enumNames3, enumNames4;\n```\n"", 'comment_created': datetime.datetime(2023, 10, 19, 10, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}]","[{'commit_sha': '85db95f1aba3c4d02dffb99375605bca988f6745', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f215836a895fd7ff3ac460f1e0fe84fdd264ef', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb878a5df62e6bc5aaf406511d7c89d37455156f', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb50efd847d822670b47ba9d1f844f362dec1fc', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0187bcaa5c43c9831769ef5d7d816b3a6fe53b9', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1460bb3e4682ebbe637b87773bc94948316ca73d', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da51d1a25f3b7b3d728a4b490f4ea503984df237', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '181b15f20cef64c9636d76ada6945c7a175080c2', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81aad5cbb5472cb2f8915c9982db14e29a77beb2', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '885636068f07201ea7a0e4365d80fc40aa7c8d53', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b257d8727b59b96c4775ce956d87070835358912', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e4f4ed7f309cb03d692bcda05621f8e51ec02e', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0dba02ead2a7a0d0a8bd4dd46fc844f308a257', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5086ea8c871f84e1af68640173ca430d0c65d7d8', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47399fdf8e2ba5a8e8ee93132d35dc914b1f38b0', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae86d87aeb9ec781722ab62c9fdb04be2d18a596', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b33a95d8cc735e305c4fd341f1631e101bd2b5f1', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f795dfdf073a038131c78e64d27aa27e24dbbc', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743dbf6be6850b86bb06d38e122bd4773b470f80', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6372389ec032fae5cb9c9354b352f8cbbce67a3', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c85e875f7daeffa98341a57cd1f37b5581a7fa7a', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '901477fb2e301483d8b90d9c8845173f2a3a8ea8', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272aedeeae087ab75bb5478f00d511b1a15930fa', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde2f2495cbdf34bc0f60e9a6dca9311fc60e228', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b45f15113f47c43faf8d89572d6113ed747036', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1576248068,Adding edge tests for API's,,True,157,https://api.github.com/repos/compiler-research/CppInterOp/pulls/157,https://github.com/compiler-research/CppInterOp/pull/157,closed,72,7,7,1,1,19,0,0,[],2023-10-27 09:28:04+00:00,2023-10-27 19:10:59+00:00,34975.0,9:42:55,"[{'comment_id': 1374348733, 'comment_body': ""warning: 'auto *D' can be declared as 'const auto *D' [readability-qualified-auto]\n\n```suggestion\n    const auto* D = (const Decl*)method;\n```\n"", 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348736, 'comment_body': 'warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]\n```cpp\n    auto* D = (const Decl*)method;\n              ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348738, 'comment_body': ""warning: variable 'Decls1' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<Decl*> Decls1 = 0;\n```\n"", 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348741, 'comment_body': ""warning: variable 'argument' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<Cpp::TemplateArgInfo> argument = 0 = {C.IntTy.getAsOpaquePtr()};\n```\n"", 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348745, 'comment_body': 'warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]\n\n```suggestion\n  int a = 5;\n  int b = 10;\n  int result;\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348747, 'comment_body': 'warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  int a = 5, b = 10, result;\n          ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348752, 'comment_body': 'warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  int a = 5, b = 10, result;\n                 ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348755, 'comment_body': ""warning: variable 'result' is not initialized [cppcoreguidelines-init-variables]\n```cpp\n  int a = 5, b = 10, result;\n                     ^\n```\nthis fix will not be applied because it overlaps with another fix"", 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348756, 'comment_body': 'warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]\n```cpp\n  void* args[2] = {(void*)&a, (void*)&b};\n  ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374348757, 'comment_body': 'warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]\n```cpp\n  FCI_Add.Invoke(&result, {args, /*args_size=*/2});\n                           ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 10, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374370142, 'comment_body': 'Why we had to move this?', 'comment_created': datetime.datetime(2023, 10, 27, 10, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1374541658, 'comment_body': 'Actually thats an error from my hand reverting it back to original state\r\n', 'comment_created': datetime.datetime(2023, 10, 27, 12, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}, {'comment_id': 1374546373, 'comment_body': 'Ok, then please undo that change.', 'comment_created': datetime.datetime(2023, 10, 27, 13, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1374556202, 'comment_body': 'We should undo that, too.', 'comment_created': datetime.datetime(2023, 10, 27, 13, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1374572766, 'comment_body': 'warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]\n```cpp\n    const auto* D = (const Decl*)method;\n                    ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 13, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374572771, 'comment_body': ""warning: variable 'Decls' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<Decl *> Decls = 0, Decls1;\n```\n"", 'comment_created': datetime.datetime(2023, 10, 27, 13, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374572778, 'comment_body': ""warning: variable 'usingNamespaces1' is not initialized [cppcoreguidelines-init-variables]\n\n```suggestion\n  std::vector<void*> usingNamespaces1 = 0;\n```\n"", 'comment_created': datetime.datetime(2023, 10, 27, 13, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374572779, 'comment_body': 'warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]\n```cpp\n  QualType QT6 = llvm::dyn_cast<FunctionDecl>(Decls[6])->getReturnType();\n                                                    ^\n```\n', 'comment_created': datetime.datetime(2023, 10, 27, 13, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1374584314, 'comment_body': 'Done it , Sry for this auto editting in my VS-Code', 'comment_created': datetime.datetime(2023, 10, 27, 13, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}]","[{'commit_sha': 'd2dfa3502ea8818cb9515211513fed30d9e29745', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17
1581584014,Updating GetBaseClass,,True,161,https://api.github.com/repos/compiler-research/CppInterOp/pulls/161,https://github.com/compiler-research/CppInterOp/pull/161,closed,2,7,1,1,5,3,0,0,[],2023-10-31 19:19:06+00:00,2023-11-01 11:24:25+00:00,57919.0,16:05:19,"[{'comment_id': 1378104764, 'comment_body': '```suggestion\r\n    if (auto RT = type->getAs<RecordType>())\r\n```', 'comment_created': datetime.datetime(2023, 10, 31, 19, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1378104879, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 10, 31, 19, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1378536145, 'comment_body': 'Made all suggested changes\r\n', 'comment_created': datetime.datetime(2023, 11, 1, 8, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Smit1603', 'type': 'User'}]","[{'commit_sha': '433b0b5e8231135f4a0c8d8171b6863ba086d97a', 'committer_username': 'Smit1603', 'committer_name': 'Smit Shah', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 24, 13, 36, 13, tzinfo=datetime.timezone.utc)}]",Smit Shah,96623696,,User,,15,,8,17

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
592883459,CppInterOp,compiler-research/CppInterOp,C++,21,36,8,13,414,38,10,15,"[{'id': 1587519960, 'number': 162, 'closed': None, 'created': datetime.datetime(2023, 11, 5, 18, 44, 36, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 20, 'deletions': 3, 'state': 'open'}, {'id': 1581584014, 'number': 161, 'closed': datetime.datetime(2023, 11, 1, 11, 24, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 31, 19, 19, 6, tzinfo=datetime.timezone.utc), 'time_taken': 57919.0, 'time_delta': '16:05:19', 'additions': 2, 'deletions': 7, 'state': 'closed'}, {'id': 1576248068, 'number': 157, 'closed': datetime.datetime(2023, 10, 27, 19, 10, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 27, 9, 28, 4, tzinfo=datetime.timezone.utc), 'time_taken': 34975.0, 'time_delta': '9:42:55', 'additions': 72, 'deletions': 7, 'state': 'closed'}, {'id': 1574065665, 'number': 156, 'closed': datetime.datetime(2023, 10, 26, 8, 21, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 26, 4, 31, 57, tzinfo=datetime.timezone.utc), 'time_taken': 13770.0, 'time_delta': '3:49:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1564452256, 'number': 154, 'closed': datetime.datetime(2023, 10, 19, 15, 26, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 19, 9, 52, 40, tzinfo=datetime.timezone.utc), 'time_taken': 20011.0, 'time_delta': '5:33:31', 'additions': 118, 'deletions': 13, 'state': 'closed'}, {'id': 1544927500, 'number': 152, 'closed': datetime.datetime(2023, 10, 19, 15, 37, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 6, 8, 35, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1148550.0, 'time_delta': '13 days, 7:02:30', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 1509125127, 'number': 149, 'closed': datetime.datetime(2023, 10, 2, 11, 29, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 10, 11, 55, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1899252.0, 'time_delta': '21 days, 23:34:12', 'additions': 144, 'deletions': 48, 'state': 'closed'}, {'id': 1491015398, 'number': 139, 'closed': datetime.datetime(2023, 8, 28, 17, 27, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 27, 16, 45, 43, tzinfo=datetime.timezone.utc), 'time_taken': 88936.0, 'time_delta': '1 day, 0:42:16', 'additions': 68, 'deletions': 11, 'state': 'closed'}, {'id': 1470794144, 'number': 130, 'closed': datetime.datetime(2023, 8, 21, 16, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 18, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 943142.0, 'time_delta': '10 days, 21:59:02', 'additions': 135, 'deletions': 0, 'state': 'closed'}, {'id': 1456826344, 'number': 116, 'closed': datetime.datetime(2023, 8, 1, 13, 4, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 18, 48, 29, tzinfo=datetime.timezone.utc), 'time_taken': 65782.0, 'time_delta': '18:16:22', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1455204589, 'number': 113, 'closed': datetime.datetime(2023, 8, 6, 7, 45, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 30, 17, 42, 49, tzinfo=datetime.timezone.utc), 'time_taken': 568942.0, 'time_delta': '6 days, 14:02:22', 'additions': 50, 'deletions': 4, 'state': 'closed'}, {'id': 1427990881, 'number': 109, 'closed': datetime.datetime(2023, 7, 30, 17, 0, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 18, 32, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1722464.0, 'time_delta': '19 days, 22:27:44', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1427434040, 'number': 108, 'closed': datetime.datetime(2023, 7, 10, 19, 5, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 12, 29, 7, tzinfo=datetime.timezone.utc), 'time_taken': 23803.0, 'time_delta': '6:36:43', 'additions': 54, 'deletions': 7, 'state': 'closed'}, {'id': 1417950587, 'number': 104, 'closed': datetime.datetime(2023, 7, 25, 17, 48, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 11, 36, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1923148.0, 'time_delta': '22 days, 6:12:28', 'additions': 63, 'deletions': 13, 'state': 'closed'}, {'id': 1299442615, 'number': 49, 'closed': datetime.datetime(2023, 4, 4, 6, 59, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 3, 5, 25, 32, tzinfo=datetime.timezone.utc), 'time_taken': 92014.0, 'time_delta': '1 day, 1:33:34', 'additions': 22, 'deletions': 10, 'state': 'closed'}, {'id': 1274622841, 'number': 42, 'closed': datetime.datetime(2023, 3, 31, 5, 46, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 14, 8, 49, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1457800.0, 'time_delta': '16 days, 20:56:40', 'additions': 19, 'deletions': 3, 'state': 'closed'}, {'id': 1266003969, 'number': 32, 'closed': datetime.datetime(2023, 3, 11, 19, 33, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 7, 10, 33, 36, tzinfo=datetime.timezone.utc), 'time_taken': 377981.0, 'time_delta': '4 days, 8:59:41', 'additions': 35, 'deletions': 8, 'state': 'closed'}, {'id': 1265087960, 'number': 31, 'closed': datetime.datetime(2023, 3, 13, 11, 31, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 19, 54, 23, tzinfo=datetime.timezone.utc), 'time_taken': 574653.0, 'time_delta': '6 days, 15:37:33', 'additions': 42, 'deletions': 5, 'state': 'closed'}, {'id': 1263516572, 'number': 29, 'closed': datetime.datetime(2023, 3, 6, 19, 43, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 5, 19, 33, 26, tzinfo=datetime.timezone.utc), 'time_taken': 86992.0, 'time_delta': '1 day, 0:09:52', 'additions': 31, 'deletions': 8, 'state': 'closed'}]"
