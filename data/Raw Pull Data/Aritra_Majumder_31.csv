pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1370367961,Add `Sum` aggregation function ,"<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #2892 

<!-- Concisely describe what the pull request does. -->
**This pull request adds support for `Sum` aggregation as a transformation step in the data explorer.** 

User will be able to:
- Get summation of integer columns based on `Group By` clause.
- Get summation of decimal columns based on `Group By` clause.
---
**Technical details**

I have made the following changes:
- Add `Sum(DBFunction)` class to support sum aggregation
- Add `sum` suffix to the output alias of the aggregated column.
- Add `Sum` to the list of transformation steps in the data explorer.

---
**Screencast**

https://github.com/centerofci/mathesar/assets/64671908/62e6e419-6731-457f-974e-df6b33ced3eb




## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `develop` branch of the repository
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,2893,https://api.github.com/repos/mathesar-foundation/mathesar/pulls/2893,https://github.com/mathesar-foundation/mathesar/pull/2893,closed,364,124,11,15,6,1,1,2,[{'name': 'pr-status: review'}],2023-05-30 12:26:49+00:00,2023-06-08 22:19:50+00:00,813181.0,"9 days, 9:53:01","[{'comment_id': 1214086260, 'comment_body': ""This is not accurate w.r.t. the return type, but it doesn't seem to affect the front end.\r\n\r\nI suppose we can leave it this way since these return type declarations are going to be removed as we remove SQL Alchemy."", 'comment_created': datetime.datetime(2023, 6, 2, 8, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}]","[{'commit_sha': '16b422c684c9d4d5e7f25c716fa6f365a842c115', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ee9dffeeb947f5397ce6ff8d4811ed7627f62f2', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47a8a04bda917a2c62565f9eecc5d9c8ef5bc6f9', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89717dbd78e5db8060dd52c25f167338117457a0', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02c0f1b4b5fb6bfab6634578ec73ac66ae9845c1', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89471935ebd992ba00f2b884d8080eca17d6a7d0', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a5d8e8be01c9a3becfac8ebc1a12d236f61d247', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c6836dfa8e36dc651728ae7ebe8c35653b8a4c', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22cae93a71d644201992ac8c3b5890f9311d11c', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '244422605e1d983ef3c50c250c6f93fff607fad9', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42cf09542024cd6817661c7ecfcc5675274d1251', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2467ef3d4cbe7d20f086da53304a120832c8049e', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c2660ed63238f8e3eb3e4e7719eee35ef761c5', 'committer_username': 'seancolsen', 'committer_name': 'Sean Colsen', 'committer_email': None, 'commit_date': datetime.datetime(2008, 12, 24, 2, 52, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f228605c1b423a4ffc0c90304030afb80e5305a', 'committer_username': 'pavish', 'committer_name': 'Pavish Kumar Ramani Gopal', 'committer_email': 'pavishkumar.r@gmail.com', 'commit_date': datetime.datetime(2015, 4, 8, 9, 5, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '364c3c0c5cc4441f66fd875e385ec03fbd3ac94c', 'committer_username': 'pavish', 'committer_name': 'Pavish Kumar Ramani Gopal', 'committer_email': 'pavishkumar.r@gmail.com', 'commit_date': datetime.datetime(2015, 4, 8, 9, 5, 6, tzinfo=datetime.timezone.utc)}]",Aritra,64671908,aritramajumder8438@gmail.com,User,,24,,18,33
1385750885,Add `median` aggregation function,"<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #2931 

<!-- Concisely describe what the pull request does. -->
**This pull request adds support for `Median` aggregation as a transformation step in the data explorer.** 

User will be able to:
- Get `median` of any column based on `Group By` clause.
---
**Technical details**

I have made the following changes:
- Add `Median(DBFunction)` class to support median aggregation
- Add `median` suffix to the output alias of the aggregated column.
- Add `Median` to the list of transformation steps in the data explorer.



## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `develop` branch of the repository
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,2932,https://api.github.com/repos/mathesar-foundation/mathesar/pulls/2932,https://github.com/mathesar-foundation/mathesar/pull/2932,closed,88,2,5,7,2,9,1,1,[{'name': 'pr-status: review'}],2023-06-09 08:26:10+00:00,2023-06-14 06:00:12+00:00,423242.0,"4 days, 21:34:02","[{'comment_id': 1226906751, 'comment_body': '@Aritra8438 I would expect `median` to look the same as `sum`. Why is it different?', 'comment_created': datetime.datetime(2023, 6, 12, 16, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seancolsen', 'type': 'User'}, {'comment_id': 1226915212, 'comment_body': '@seancolsen, median aggregation will be available for all column types.\r\n\r\nIf we have an array of `Text` i.e. ```[""John"",""Alice"",""Paul""]```, \r\n```""John""``` will be the median.', 'comment_created': datetime.datetime(2023, 6, 12, 16, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1226923411, 'comment_body': ""Ok, interesting. So any type that can be sorted can have a median? I didn't know that. Sounds reasonable though. In that case we can keep this structure. Can you change the name of that function from `mapInpuTypesToCorrespondingOutputTypes` to `mapInputTypesToTheSameOutputType`?"", 'comment_created': datetime.datetime(2023, 6, 12, 16, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seancolsen', 'type': 'User'}, {'comment_id': 1226942920, 'comment_body': ""Sure @seancolsen.\r\n\r\nI would like to explain a bit if this helps you.\r\n\r\nThere are two related PostgreSQL functions, `PERCENTILE_DISC` and `PERCENTILE_CONT`, and this [SO blog](https://stackoverflow.com/questions/23585667/percentile-disc-vs-percentile-cont) explains how they are different.\r\n\r\nIf we assume two numeric arrays,\r\n\r\n| array  | `PERCENTILE_DISC` | `PERCENTILE_CONT`|\r\n| ------------- | ------------- | --------------|\r\n| `[1,2,3,4]`  | 2  | 2.5 |\r\n| `[1,2,3]`  | 2  | 2 |\r\n\r\n`PERCENTILE_CONT` interpolates when there are multiple central elements, whereas `PERCENTILE_DISC` returns the first one.\r\n\r\nWe have used `PERCENTILE_DISC` and so will be able to calculate the median for all column types (as there won't be any scenario that interpolates two texts)\r\n \r\n"", 'comment_created': datetime.datetime(2023, 6, 12, 16, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1226950900, 'comment_body': ""I see. Hmmm. Did @mathemancer weigh in on this choice? You highlight an interesting problem. `PERCENTILE_DISC` and `PERCENTILE_CONT` can give different results. This might confuse some users. Personally, I don't see the utility of computing the median of a non-numeric type. Why would someone want this? If we don't actually need that, then I'd lean towards `PERCENTILE_CONT` because I think it will align better with expectations. What do you think @mathemancer? Of course we could have two separate median functions, but that may be overkill."", 'comment_created': datetime.datetime(2023, 6, 12, 16, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seancolsen', 'type': 'User'}, {'comment_id': 1226972448, 'comment_body': 'Yes, @seancolsen. @mathemancer suggested that we should go for `discrete` one because,\r\n- `Median` then will be available for all column types.\r\n- It will be more interpretable initially.\r\n\r\n> because I think it will align better with expectations.\r\n\r\nWe may selectively use `PERCENTILE_CONT` for numeric columns in the backend. @mathemancer, should we do this?', 'comment_created': datetime.datetime(2023, 6, 12, 17, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1226973708, 'comment_body': '> selectively use PERCENTILE_CONT for numeric columns in the backend\r\n\r\nOh, good idea!', 'comment_created': datetime.datetime(2023, 6, 12, 17, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seancolsen', 'type': 'User'}, {'comment_id': 1228181078, 'comment_body': '> I see. Hmmm. Did @mathemancer weigh in on this choice? You highlight an interesting problem. `PERCENTILE_DISC` and `PERCENTILE_CONT` can give different results. This might confuse some users. Personally, I don\'t see the utility of computing the median of a non-numeric type. Why would someone want this? If we don\'t actually need that, then I\'d lean towards `PERCENTILE_CONT` because I think it will align better with expectations. What do you think @mathemancer? Of course we could have two separate median functions, but that may be overkill.\r\n\r\nI think we should use the discrete definition. \r\n\r\nThere are multiple acceptable definitions of a median, and the most useful ones in the field (i.e., when dealing with real data from a sample) generally return a value from the set from which the sample is pulled. For example, for a median of integers, you want an integer. For a median of a set of monetary values, you don\'t want half cents. If you\'re pulling from a sample of birthdates reported as timestamps, you want a timestamp. `PERCENTILE_DISC` enables all of these, but `PERCENTILE_CONT` doesn\'t. In fact, the latter can only return intervals or double precision floats.\r\n\r\nTo be fair, there are also some use cases where the interpolation is useful, but I think those are rarer outside of middle school textbooks, where I acknowledge \'median\' is usually defined using the interpolated version. Mainly, if you have a double precision sample, and so you lose nothing by using `PERCENTILE_CONT`.\r\n\r\nI suppose the eventual solution could be to build a custom aggregation function that interpolates, but still keeps the result in the sample set.\r\n\r\nRegarding non-numeric types, I agree that strings are less useful (though you can still use this to divide your data into halves, e.g., to assign lists of names to two sales people). However, there are some types that _are_ useful:\r\n- time/date types (this is a big one). It\'s not uncommon at all to want an ""average"" birthdate or the like. Median and mode are the only ones that suffice for that, and the median (in the postgres implementation) has to be discrete.\r\n- arrays of numeric types. Less common, but certainly has use cases.\r\n\r\nIf all of this is unconvincing, we could discuss more tomorrow during our call.', 'comment_created': datetime.datetime(2023, 6, 13, 13, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1228305353, 'comment_body': ""I'm convinced. Thanks @mathemancer "", 'comment_created': datetime.datetime(2023, 6, 13, 15, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seancolsen', 'type': 'User'}]","[{'commit_sha': 'ca9028e0693be159b07c1f46703c9bf4a72fe4bd', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfaa357145dee454b7c6ec89796b8319ad39464d', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86e55a8fa5bc787d20a8d9ad3db8a2c0718afcc2', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a76d9916ac0b30b608e9bad6abd60aedf09a4f3', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f6fd9043c57378324d20ebaeba70e4c9c4bd992', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e93bc2cb939f932f386050ea81d71572b11e5ca3', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2bfd91027fa7676c4a770b0c0e39bcbc3830cfa', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}]",Aritra,64671908,aritramajumder8438@gmail.com,User,,24,,18,33
1413844412,Add `Peak Time` aggregation function.,"Fixes #2980 

This PR adds `Peak time` aggregation function to the Mathesar UI.

The mathematics behind this PR is explained in [this](https://aritra8438.github.io/gsoc-third-blog/) blog.

**Technical details**

I have done the following things:
- Add custom PostgreSQL function for `Peak time` aggregation.
- Add `Peak Time` to the Mathesar UI.
- Add tests for the same.

**Screenshots**
<img width=""958"" alt=""image"" src=""https://github.com/centerofci/mathesar/assets/64671908/193b11e9-a4b0-445d-8cb0-c746630d5041"">

## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `develop` branch of the repository
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,2981,https://api.github.com/repos/mathesar-foundation/mathesar/pulls/2981,https://github.com/mathesar-foundation/mathesar/pull/2981,closed,335,3,7,34,3,30,1,1,[{'name': 'pr-status: review'}],2023-06-29 19:44:40+00:00,2023-07-11 14:17:38+00:00,1017178.0,"11 days, 18:32:58","[{'comment_id': 1253331760, 'comment_body': 'This can be replaced with `EXTRACT(EPOCH FROM _time);', 'comment_created': datetime.datetime(2023, 7, 5, 16, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1253334467, 'comment_body': ""It's better to make this an `SQL` function for efficiency. It will be run a _lot_ when it's being used. Body would be something like:\r\n\r\n```sql\r\nSELECT EXTRACT(EPOCH FROM _time)*360 / 86400\r\n```"", 'comment_created': datetime.datetime(2023, 7, 5, 16, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1253452346, 'comment_body': ""```suggestion\r\nSELECT make_interval(secs => degrees * 86400 / 360)::time;\r\n$$ LANGUAGE SQL;\r\n```\r\n\r\nThis should give the same result, and will run much faster. Please double-check, since I'm typing this in with the GH comment interface and there may be mistakes."", 'comment_created': datetime.datetime(2023, 7, 5, 17, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1253454401, 'comment_body': 'Please also try to rework this as an SQL (rather than plpgsql) function.', 'comment_created': datetime.datetime(2023, 7, 5, 18, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1253455775, 'comment_body': ""It's okay to keep this one as plpgsql, since it's only run once per aggregation call."", 'comment_created': datetime.datetime(2023, 7, 5, 18, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1254166424, 'comment_body': 'Used `EPOCH`.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1254166770, 'comment_body': 'Used this.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1254167740, 'comment_body': 'Converted to an SQL function.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1254170757, 'comment_body': ""Hi, Brent. I have converted this to an SQL function as well .\r\n(as we haven't used any plpgsql specific feature)"", 'comment_created': datetime.datetime(2023, 7, 6, 9, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1255277086, 'comment_body': ""This name is confusing. This function actually accumulates a sum of vectors, correct? I.e., we're summing the vectors pointing to each 'time' on a 24-hour clock."", 'comment_created': datetime.datetime(2023, 7, 7, 5, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1255278542, 'comment_body': ""This function really needs a docstring-like initial comment to let the next person understand what it's doing, and how."", 'comment_created': datetime.datetime(2023, 7, 7, 5, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1255280215, 'comment_body': ""Please add a comment explaining this line. (I.e., it's needed to avoid floating point errors causing garbage output)."", 'comment_created': datetime.datetime(2023, 7, 7, 5, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1255320338, 'comment_body': '```suggestion\r\nclass PeakTime(DBFunction):\r\n```\r\n\r\nPlease use `CamelCase` for class names', 'comment_created': datetime.datetime(2023, 7, 7, 6, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1255323197, 'comment_body': 'Okayy, sorry I missed that.\r\nYou can review cascaded PRs later as they have same problem.\r\nI will address them ASAP.', 'comment_created': datetime.datetime(2023, 7, 7, 6, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1257414915, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 7, 9, 5, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1257414949, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 7, 9, 5, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}, {'comment_id': 1257691439, 'comment_body': ""```suggestion\r\n/*\r\nThis script defines all the necessary functions to be used for custom aggregates.\r\n\r\nCurrently, we have the following custom aggregate(s):\r\n  - msar.peak_time(time): Calculate the 'average time' (interpreted as peak time) for a column.\r\n\r\nRefer to the official documentation for PostgreSQL custom aggregates function to dive deeper.\r\nlink: https://www.postgresql.org/docs/current/xaggr.html\r\n\r\nWe'll use snake_case for legibility and to avoid collisions with internal PostgreSQL naming\r\nconventions.\r\n*/\r\n```\r\n\r\nI don't think you need to document the way aggregations work in general; the link is plenty."", 'comment_created': datetime.datetime(2023, 7, 10, 4, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1257694161, 'comment_body': '```suggestion\r\nConvert the given time to degrees (on a 24 hour clock, indexed from midnight).\r\n\r\nExamples:\r\n  00:00:00 =>   0\r\n  06:00:00 =>  90\r\n  12:00:00 => 180\r\n  18:00:00 => 270\r\n*/\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 4, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1257696609, 'comment_body': '```suggestion\r\nmsar.degrees_to_time(degrees DOUBLE PRECISION) RETURNS TIME AS $$/*\r\nConvert given degrees to time (on a 24 hour clock, indexed from midnight).\r\n\r\nExamples:\r\n    0 => 00:00:00\r\n   90 => 06:00:00\r\n  180 => 12:00:00\r\n  270 => 18:00:00\r\n\r\nInverse of msar.time_to_degrees.\r\n*/\r\n```\r\n', 'comment_created': datetime.datetime(2023, 7, 10, 4, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259268741, 'comment_body': '```suggestion\r\n- First, the degrees value is confined to range [0,360°)\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 6, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259269423, 'comment_body': '```suggestion\r\n- Then the resulting value is converted to time indexed from midnight.\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 6, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259279484, 'comment_body': '```suggestion\r\nSELECT MAKE_INTERVAL(secs => ((degrees::numeric % 360 + 360) % 360)::double precision * 240)::time;\r\n```\r\n\r\nGo ahead and preload the division. If you want to explain where 240 came from, do that in the docstring. (or a line comment)', 'comment_created': datetime.datetime(2023, 7, 11, 7, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259290084, 'comment_body': ""```suggestion\r\nWITH t(degrees) AS (SELECT msar.time_to_degrees(time_))\r\nSELECT sum_so_far + point(sind(degrees), cosd(degrees)) FROM t;\r\n```\r\n\r\nI just noticed there's a cleaner way; it's also more performant (by a tiny bit; but it might matter since this gets run for every row)"", 'comment_created': datetime.datetime(2023, 7, 11, 7, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259294870, 'comment_body': '```suggestion\r\nSELECT EXTRACT(EPOCH FROM time_) / 240;\r\n```\r\nPreload the division for performance here, please; explain it in a code comment or the docstring.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259298167, 'comment_body': ""The sum doesn't make sense in this context; You're just calculating the inverse tangent of the point."", 'comment_created': datetime.datetime(2023, 7, 11, 7, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259299231, 'comment_body': '```suggestion\r\n- If the point is on or very near the origin, we return null.\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 7, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259299666, 'comment_body': ""This is inaccurate. The arg is `point_` . Also, this function doesn't know (or need to know) about the sum aspect. Any explanation involving the bigger picture of the algorithm belongs in a more 'global' spot."", 'comment_created': datetime.datetime(2023, 7, 11, 7, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259305819, 'comment_body': 'Same. This comment is out of the scope of the function.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259306278, 'comment_body': 'This bit is also out-of-scope.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 1259326695, 'comment_body': 'Yes, I though the same.\r\nSorry for this mistake.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aritra8438', 'type': 'User'}]","[{'commit_sha': '31c1f4e470bca42ea96bd545fa302e096640c833', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b557e435202c29d0d28920ff45d241398af0f2', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a06c4804041886604d037d6379ecaa64b0f90fb6', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '493cfd5781ec21881becc8e9c3807c4250e33c2e', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8b5d20b572d4915b422399528f4a461249db17', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9597f2ae20e7ce2dd2eaf44c0fb6f5268339cd6a', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b29dcbf054a2d3b96cc70dd3ce8c73b1a0ff041', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2185e7e4413d2f2f87c5befbd811ed88c26e4ec7', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be2ba598f70ae7d25f4d7b1ca683469395413942', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5703ee4a8de7ab3ee85e88d6f5e809bbb640bccb', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '160fcb58bb76ef4c119a6f1a20d229ff214d3832', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d0aaf354c3529cb337461f7d8c9c166f5eac5b', 'committer_username': 'rajatvijay', 'committer_name': 'RAJAT VIJAY', 'committer_email': 'rajatvijay5@gmail.com', 'commit_date': datetime.datetime(2015, 2, 16, 17, 16, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f728c170d4ce40952d732558adc919200df1d8', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93bea34a857c1f6a7c004fd6619320b21e2191f5', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98a222fdec8386c5cf44b436e43822094df1f29', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba7d33cb39af40a919e2627221cb2985afad09f', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0a2ef1ac463a425bc3a05fef20b60c710b538a5', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75ba23fd2367ecb3101434b3814ff02fd0cd55e', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab48aedda28cb7b1d20c058cee380e40302a621c', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a1b6849e35e54aca8bd16fbcadfe44f61c7175', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f60e45c29d5ef0b6caded2d8b8c5c7b205e0511', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0465a016eb4a1a77031f6164e991564a2b11fff4', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '782b08d949a6e748271ca7f8fec24084a7d935a7', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a431be8ea7c785f184d8a4c5e4cf03108ae7ce4', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8eb2db86da3e252812b8e1fb7125d2602f9c584', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5932b08d8d6d7ac59857b3eb2f1c71db8408966b', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60bf4babccb5fd9d4af2a809eb17239822e56fab', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a2bbf7488557f259b9693db9e3e4d0b7b7daa8d', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381a41eb23719daeeccd4519d529ea4be799138a', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897f0bd7521b5c6ce36765957b3c572d01c321a1', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '064be3964806d86e50c5cf5021adcdc911d018a5', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4ed3cb8afddc30791d0bbe24e275d43ee0180c', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65b72cb2a1c8b0793522061fffad94dc96783fc9', 'committer_username': 'Aritra8438', 'committer_name': 'Aritra', 'committer_email': 'aritramajumder8438@gmail.com', 'commit_date': datetime.datetime(2020, 5, 2, 1, 49, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '732015bd9b134fb21181d09f7f013c395fd509f2', 'committer_username': 'mathemancer', 'committer_name': 'Brent Moran', 'committer_email': 'brentmoran@gmail.com', 'commit_date': datetime.datetime(2014, 3, 2, 7, 55, 26, tzinfo=datetime.timezone.utc)}]",Aritra,64671908,aritramajumder8438@gmail.com,User,,24,,18,33

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
348788771,mathesar,mathesar-foundation/mathesar,Python,317,2313,28,110,13681,263,25,9,"[{'id': 1469888978, 'number': 3138, 'closed': datetime.datetime(2023, 10, 25, 21, 20, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 8, 26, 18, tzinfo=datetime.timezone.utc), 'time_taken': 6612880.0, 'time_delta': '76 days, 12:54:40', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 1469138853, 'number': 3136, 'closed': datetime.datetime(2023, 8, 15, 7, 12, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 18, 55, 47, tzinfo=datetime.timezone.utc), 'time_taken': 476204.0, 'time_delta': '5 days, 12:16:44', 'additions': 160, 'deletions': 1, 'state': 'closed'}, {'id': 1452691517, 'number': 3106, 'closed': datetime.datetime(2023, 7, 31, 15, 44, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 20, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 329356.0, 'time_delta': '3 days, 19:29:16', 'additions': 522, 'deletions': 1, 'state': 'closed'}, {'id': 1443903839, 'number': 3082, 'closed': datetime.datetime(2023, 7, 24, 5, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 21, 4, 38, 14, tzinfo=datetime.timezone.utc), 'time_taken': 261946.0, 'time_delta': '3 days, 0:45:46', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 1422863297, 'number': 3006, 'closed': datetime.datetime(2023, 7, 24, 5, 52, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 13, 4, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1529301.0, 'time_delta': '17 days, 16:48:21', 'additions': 313, 'deletions': 3, 'state': 'closed'}, {'id': 1422698482, 'number': 3004, 'closed': datetime.datetime(2023, 7, 24, 5, 52, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 11, 11, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1536036.0, 'time_delta': '17 days, 18:40:36', 'additions': 334, 'deletions': 2, 'state': 'closed'}, {'id': 1413844412, 'number': 2981, 'closed': datetime.datetime(2023, 7, 11, 14, 17, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 19, 44, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1017178.0, 'time_delta': '11 days, 18:32:58', 'additions': 335, 'deletions': 3, 'state': 'closed'}, {'id': 1400513739, 'number': 2956, 'closed': datetime.datetime(2023, 6, 27, 14, 16, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 21, 3, 13, tzinfo=datetime.timezone.utc), 'time_taken': 580400.0, 'time_delta': '6 days, 17:13:20', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 1390099046, 'number': 2945, 'closed': datetime.datetime(2023, 6, 14, 7, 7, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 13, 8, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 81970.0, 'time_delta': '22:46:10', 'additions': 248, 'deletions': 2, 'state': 'closed'}, {'id': 1388340341, 'number': 2940, 'closed': datetime.datetime(2023, 6, 14, 6, 26, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 9, 49, 55, tzinfo=datetime.timezone.utc), 'time_taken': 160595.0, 'time_delta': '1 day, 20:36:35', 'additions': 82, 'deletions': 2, 'state': 'closed'}, {'id': 1385750885, 'number': 2932, 'closed': datetime.datetime(2023, 6, 14, 6, 0, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 8, 26, 10, tzinfo=datetime.timezone.utc), 'time_taken': 423242.0, 'time_delta': '4 days, 21:34:02', 'additions': 88, 'deletions': 2, 'state': 'closed'}, {'id': 1378442897, 'number': 2916, 'closed': datetime.datetime(2023, 6, 16, 3, 15, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 7, 32, 13, tzinfo=datetime.timezone.utc), 'time_taken': 934971.0, 'time_delta': '10 days, 19:42:51', 'additions': 85, 'deletions': 1, 'state': 'closed'}, {'id': 1377576817, 'number': 2914, 'closed': datetime.datetime(2023, 6, 15, 15, 39, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 6, 23, 16, tzinfo=datetime.timezone.utc), 'time_taken': 983794.0, 'time_delta': '11 days, 9:16:34', 'additions': 83, 'deletions': 3, 'state': 'closed'}, {'id': 1377305958, 'number': 2912, 'closed': datetime.datetime(2023, 6, 15, 14, 20, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 20, 26, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1014857.0, 'time_delta': '11 days, 17:54:17', 'additions': 82, 'deletions': 2, 'state': 'closed'}, {'id': 1377181418, 'number': 2911, 'closed': datetime.datetime(2023, 6, 6, 4, 25, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 18, 16, 26, tzinfo=datetime.timezone.utc), 'time_taken': 209326.0, 'time_delta': '2 days, 10:08:46', 'additions': 773, 'deletions': 1, 'state': 'closed'}, {'id': 1370367961, 'number': 2893, 'closed': datetime.datetime(2023, 6, 8, 22, 19, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 12, 26, 49, tzinfo=datetime.timezone.utc), 'time_taken': 813181.0, 'time_delta': '9 days, 9:53:01', 'additions': 364, 'deletions': 124, 'state': 'closed'}, {'id': 1349381573, 'number': 2874, 'closed': datetime.datetime(2023, 5, 26, 5, 16, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 13, 3, 35, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1129281.0, 'time_delta': '13 days, 1:41:21', 'additions': 34, 'deletions': 12, 'state': 'closed'}, {'id': 1326467201, 'number': 2841, 'closed': datetime.datetime(2023, 6, 8, 15, 3, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 25, 4, 30, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3839587.0, 'time_delta': '44 days, 10:33:07', 'additions': 85, 'deletions': 2, 'state': 'closed'}, {'id': 1320464411, 'number': 2829, 'closed': datetime.datetime(2023, 12, 8, 13, 13, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 19, 19, 57, 3, tzinfo=datetime.timezone.utc), 'time_taken': 20106968.0, 'time_delta': '232 days, 17:16:08', 'additions': 105, 'deletions': 1, 'state': 'closed'}, {'id': 1313424476, 'number': 2815, 'closed': datetime.datetime(2023, 4, 14, 12, 36, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 14, 3, 40, 43, tzinfo=datetime.timezone.utc), 'time_taken': 32154.0, 'time_delta': '8:55:54', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 1302630295, 'number': 2780, 'closed': datetime.datetime(2023, 5, 24, 8, 56, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 5, 5, 45, 19, tzinfo=datetime.timezone.utc), 'time_taken': 4245054.0, 'time_delta': '49 days, 3:10:54', 'additions': 63, 'deletions': 4, 'state': 'closed'}, {'id': 1295198356, 'number': 2770, 'closed': datetime.datetime(2023, 7, 4, 14, 42, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 29, 19, 57, 58, tzinfo=datetime.timezone.utc), 'time_taken': 8361890.0, 'time_delta': '96 days, 18:44:50', 'additions': 67, 'deletions': 23, 'state': 'closed'}, {'id': 1292533783, 'number': 2759, 'closed': datetime.datetime(2023, 3, 31, 16, 23, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 28, 8, 6, 11, tzinfo=datetime.timezone.utc), 'time_taken': 289023.0, 'time_delta': '3 days, 8:17:03', 'additions': 1396, 'deletions': 1396, 'state': 'closed'}, {'id': 1290121986, 'number': 2745, 'closed': datetime.datetime(2023, 6, 8, 19, 0, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 19, 17, 36, tzinfo=datetime.timezone.utc), 'time_taken': 6478991.0, 'time_delta': '74 days, 23:43:11', 'additions': 116, 'deletions': 50, 'state': 'closed'}]"
