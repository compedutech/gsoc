pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
659944662,Implement PinJoint and Joint class,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#21519 

#### Brief description of what is fixed or changed
Added Joints class which will serve as base abstract class for custom joints along with PinJoint class.


#### Other comments
Ping @moorepants @Sc0rpi0n101 

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
    * Joint class is implemented which could be inherited to create custom joints.
    * PinJoint has been implemented which can form KDEs, orient frames, set linear and angular velocities all by itself.
<!-- END RELEASE NOTES -->
",True,21564,https://api.github.com/repos/sympy/sympy/pulls/21564,https://github.com/sympy/sympy/pull/21564,closed,888,0,6,84,50,209,2,0,"[{'name': 'physics.mechanics'}, {'name': 'GSoC'}]",2021-06-02 10:38:43+00:00,2021-07-05 08:31:20+00:00,2843557.0,"32 days, 21:52:37","[{'comment_id': 644682645, 'comment_body': 'All positions should be set when the joints are formed. For example Ao and Bo wrt to No would happen when you form a PinJoint(A, N) and PinJoint(B, A). The joints method should relieve the user from having to figure out global positions.', 'comment_created': datetime.datetime(2021, 6, 3, 10, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 644683336, 'comment_body': ""I'd to see a test for a a PinJoint where the rotation vector is an arbitrary angle relative to each body's coordinate system, respectively. This should show that any angle can work."", 'comment_created': datetime.datetime(2021, 6, 3, 10, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 644683367, 'comment_body': 'These are bodies mass centers and mass centers are needed to be provided to bodies if one wants to form Rigid Body', 'comment_created': datetime.datetime(2021, 6, 3, 10, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 644687169, 'comment_body': ""I didn't get it completely, can you please give an example of what you mean, it would ne really helpful."", 'comment_created': datetime.datetime(2021, 6, 3, 10, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 644687772, 'comment_body': 'Center of masses are need to be defined when the `Body` is being instantiated.', 'comment_created': datetime.datetime(2021, 6, 3, 10, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 644688629, 'comment_body': 'We should be able to specify a Body with a Point that has no position relative to No. The idea is that each body has a local coordinate system with its origin at its mass center (as well as the ""ground""). The Joint should establish relative positions and orientations to the two bodies and populate that info to the underlying RigidBody.', 'comment_created': datetime.datetime(2021, 6, 3, 10, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 644689848, 'comment_body': ""The pin joint axes should be able to be an axis that is oriented by two angles relative to the body's coordinate system, i.e. the rotation axis is not xhat, yhat, zhat of the body, nor does it lie in the xy, yz, xz planes. The pin joint axes should be arbitrarily oriented relative to body bodies it connects."", 'comment_created': datetime.datetime(2021, 6, 3, 10, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 644691800, 'comment_body': ""But for that  wouldn't we need to take distance from user? \n\nSomething like:\n\n```\nPinJoint('P', Par, Child, dist_btw_centerofmass=6*N.x)\n```"", 'comment_created': datetime.datetime(2021, 6, 3, 10, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 644692157, 'comment_body': ""Okay I'll add that test."", 'comment_created': datetime.datetime(2021, 6, 3, 10, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 644798837, 'comment_body': ""```suggestion\n    >>> P = PinJoint('P', parent, child, child.frame.x)\n```\n\n"", 'comment_created': datetime.datetime(2021, 6, 3, 13, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 644900697, 'comment_body': 'A backslash does nothing inside square brackets.', 'comment_created': datetime.datetime(2021, 6, 3, 15, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644911214, 'comment_body': 'Imports are generally sorted alphabetically. [PEP8](https://pep8.org/) is useful.', 'comment_created': datetime.datetime(2021, 6, 3, 15, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644913852, 'comment_body': 'Leave another blank line here ... as done in other files. Two blank lines between tests.', 'comment_created': datetime.datetime(2021, 6, 3, 15, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644922567, 'comment_body': 'Test it with `Pj.name`.', 'comment_created': datetime.datetime(2021, 6, 3, 16, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644926019, 'comment_body': 'I think it needs a `@property` decorator.', 'comment_created': datetime.datetime(2021, 6, 3, 16, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644927589, 'comment_body': '```suggestion\r\n        child_joint_pos=None, parent_axis=None):\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 16, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644933751, 'comment_body': '```suggestion\r\n    assert Pj.parent == P\r\n    assert Pj.child == C\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 16, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644941723, 'comment_body': ""This can just be:\r\n```suggestion\r\n        return [dynamicsymbols(self.name + '_theta') if coordinate is None else coordinate]\r\n```"", 'comment_created': datetime.datetime(2021, 6, 3, 16, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644947444, 'comment_body': ""```suggestion\r\n            raise TypeError('Child must be an instance of Body.')\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 6, 3, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644948921, 'comment_body': '```suggestion\r\n        """""" List of coordinates of Joint.""""""\r\n```\r\nI also noticed some other typos.', 'comment_created': datetime.datetime(2021, 6, 3, 16, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644951723, 'comment_body': 'Another blank line needed between classes.', 'comment_created': datetime.datetime(2021, 6, 3, 16, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644954483, 'comment_body': '`l` is already present above. You can move all symbol declarations in one line.', 'comment_created': datetime.datetime(2021, 6, 3, 16, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 644958188, 'comment_body': 'IMO, you should not have a separate line like this. Stick to one style.', 'comment_created': datetime.datetime(2021, 6, 3, 16, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 645497928, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 4, 11, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 647163953, 'comment_body': 'A joint subtracts degrees of freedom from a body.', 'comment_created': datetime.datetime(2021, 6, 8, 6, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 647173972, 'comment_body': ""Let's make this private for now with a leading underscore."", 'comment_created': datetime.datetime(2021, 6, 8, 7, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 647993128, 'comment_body': '@moorepants Please check if this implementation is correct, I have also added a very simple test case(test_pinjoint_arbitrary_axis) to check if axis are being aligned,.', 'comment_created': datetime.datetime(2021, 6, 9, 6, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 648004220, 'comment_body': ""You should check if it is correct. You'll need to work out the kinematics manually and make sure they match."", 'comment_created': datetime.datetime(2021, 6, 9, 6, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 648932084, 'comment_body': '@moorepants I think these tests are sufficient.', 'comment_created': datetime.datetime(2021, 6, 10, 7, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 648942911, 'comment_body': ""These tests check if _align_axis runs normalize, normalize, acos(dot). It doesn't check whether the correct direction cosine matrices are formed. A better test would be to work out what the direction cosine matrices should be (by hand) and make sure the proper matrices are created when the temporary frame is oriented relative to the parent (or child)."", 'comment_created': datetime.datetime(2021, 6, 10, 7, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649204027, 'comment_body': ""This is an example of a double pendulum in which the second joint's axis is perpendicular to the first joint's axis."", 'comment_created': datetime.datetime(2021, 6, 10, 13, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649204648, 'comment_body': 'masses should be needed for a kinematic example', 'comment_created': datetime.datetime(2021, 6, 10, 13, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649205933, 'comment_body': ""These aren't the kinematics to check. You need to check if the velocities of the mass centers and the angular velocities of the bodies are correct."", 'comment_created': datetime.datetime(2021, 6, 10, 13, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649207305, 'comment_body': 'Also check the direction cosine matrices.', 'comment_created': datetime.datetime(2021, 6, 10, 13, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649705928, 'comment_body': 'Added those tests to docstring example.', 'comment_created': datetime.datetime(2021, 6, 11, 5, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 649706139, 'comment_body': '`Body` will auto generate mass.', 'comment_created': datetime.datetime(2021, 6, 11, 5, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 649706189, 'comment_body': 'Updated the docstring', 'comment_created': datetime.datetime(2021, 6, 11, 5, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 649718210, 'comment_body': ""That looks correct. As long as you've verified that it is the same results as the example in the pydy repository."", 'comment_created': datetime.datetime(2021, 6, 11, 6, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649718535, 'comment_body': ""I see you've added extras in the docstrings, but the velocity, dcm, and ang velocity checks are needed for this more general example."", 'comment_created': datetime.datetime(2021, 6, 11, 6, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 652315885, 'comment_body': ""@moorepants I think the velocity for this case that we calculated in meeting yesterday wasn't correct as the distance between the `P.masscenter` and `C.masscenter` is defined a unit vector in each frame, so I think the velocity wouldn't be defined in just 1 frame. "", 'comment_created': datetime.datetime(2021, 6, 16, 3, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 652317234, 'comment_body': ""If we remove either one of the joint position the result's same as it is in the case when axis are aligned, which kind of makes me feel this result is correct. Can you please crosscheck while I'm trying to learn how to calculate it manually."", 'comment_created': datetime.datetime(2021, 6, 16, 3, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 652319806, 'comment_body': 'The dcms seems correct to me.', 'comment_created': datetime.datetime(2021, 6, 16, 3, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 655930057, 'comment_body': 'It would be helpful to see `A.ang_vel_in(N).express(A) == omega*A.y` to confirm it works too.', 'comment_created': datetime.datetime(2021, 6, 22, 6, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 655931009, 'comment_body': ""If you make the child_joint_pos something other than a unit vector, we'd see that this is fully computed correctly. Make it `r*A.x` for example."", 'comment_created': datetime.datetime(2021, 6, 22, 7, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 655945939, 'comment_body': '`C.masscenter.vel(N).express(N)` should also be checked.', 'comment_created': datetime.datetime(2021, 6, 22, 7, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 655946605, 'comment_body': '`C.masscneter.pos_From(P.masscenter).express(N)` would also be nice to check.', 'comment_created': datetime.datetime(2021, 6, 22, 7, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 655959943, 'comment_body': '`C.masscenter.vel(N).angle_between(A.x) == pi/2`', 'comment_created': datetime.datetime(2021, 6, 22, 7, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 655961979, 'comment_body': '`A.ang_vel_in(N).angle_between(A.x + A.y) == 0`', 'comment_created': datetime.datetime(2021, 6, 22, 7, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 655962655, 'comment_body': '`A.ang_vel_in(N).magnitude() == omega`', 'comment_created': datetime.datetime(2021, 6, 22, 7, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656007917, 'comment_body': ""> A.ang_vel_in(N).angle_between(A.x + A.y)\r\n\r\nIsn't this test same as `assert N.x.angle_between(A.x + A.y).simplify() == 0 #Axis are aligned` this one"", 'comment_created': datetime.datetime(2021, 6, 22, 8, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656040337, 'comment_body': ""No, it isn't."", 'comment_created': datetime.datetime(2021, 6, 22, 9, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656042014, 'comment_body': ""@moorepants How can I simplify `sqrt(omega**2)` where `omega` is a dynamicsymbol to `omega`? `.simplify()` isn't working."", 'comment_created': datetime.datetime(2021, 6, 22, 9, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656042778, 'comment_body': 'The key things to check for the velocities are:\r\n\r\n1. The angular velocity should be aligned with the pin joint axis expressed in either frame. There is the matter of positive or negative depending on the sense of N_omega_A = - A_omega_N.\r\n2. The linear velocity of the mass centers should be normal to the position vector connecting the pin joint point and the mass center.\r\n\r\nBoth of those should hold in the arbitrary case. They both ensure the direction of the velocity vectors are correct (at least partly, there is still magnitude and sense to check).', 'comment_created': datetime.datetime(2021, 6, 22, 9, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656044339, 'comment_body': ""> @moorepants How can I simplify sqrt(omega**2) where omega is a dynamicsymbol to omega? .simplify() isn't working.\r\n\r\n\r\nThis is because omega is by default a complex number."", 'comment_created': datetime.datetime(2021, 6, 22, 9, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656045329, 'comment_body': '> This is because omega is by default a complex number.\r\n\r\nOkay, got it.', 'comment_created': datetime.datetime(2021, 6, 22, 9, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656776192, 'comment_body': ""The magnitude of the linear velocity should be n*omega, but n isn't present here."", 'comment_created': datetime.datetime(2021, 6, 23, 5, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656776375, 'comment_body': 'These should nave m and n too.', 'comment_created': datetime.datetime(2021, 6, 23, 5, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656776756, 'comment_body': ""Actually these tests were taking forever to run on my system , so I'm trying to use github actions, these tests are work in progress"", 'comment_created': datetime.datetime(2021, 6, 23, 5, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656776935, 'comment_body': 'This result should have the angle of rotation present. I guess the angle is theta and the angular velocity is omega (automatically generated).', 'comment_created': datetime.datetime(2021, 6, 23, 5, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656798862, 'comment_body': ""Ok. depending on the complexity of expressions, simplify() may not be appropriate for the unit tests.\r\n\r\nI don't think these tests should reach that complexity though. It usually takes several pin joints in succession to make the equations complex enough that simplify() takes too long."", 'comment_created': datetime.datetime(2021, 6, 23, 6, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656799042, 'comment_body': 'Also, you should run the tests locally vs setting up github actions.', 'comment_created': datetime.datetime(2021, 6, 23, 6, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656799487, 'comment_body': 'They are running locally for past 3hours and still running.', 'comment_created': datetime.datetime(2021, 6, 23, 6, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656929144, 'comment_body': 'Then there is a problem with the algorithm we are using. Can you profile the code and find out what is hanging?', 'comment_created': datetime.datetime(2021, 6, 23, 9, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656929606, 'comment_body': 'This tool is good for things that hang: https://github.com/joerick/pyinstrument', 'comment_created': datetime.datetime(2021, 6, 23, 9, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656939370, 'comment_body': ""> Then there is a problem with the algorithm we are using. \n\nI think it's something related to use of `symbols` and `simplify` in axes as it is making problem really very complicated and lengthy.  Same problem with similar axes just without axes without symbols(unit in every direction) works fine , so the algo is fine I believe."", 'comment_created': datetime.datetime(2021, 6, 23, 9, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656942416, 'comment_body': 'A rule of thumb for you is that you should rarely, if ever, be using simplify in the library code and examples. It should only be used in examples or unit tests to simplify the low complexity expressions. Best to write all of your tests and examples without simplify.', 'comment_created': datetime.datetime(2021, 6, 23, 9, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656945527, 'comment_body': '>  It should only be used in examples or unit tests to simplify the low complexity expressions.\n\nYes in current tests, simplify is just solving the angle and simplify the velocity, because these expression were simple but just unsolved, so solving them.', 'comment_created': datetime.datetime(2021, 6, 23, 9, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656957525, 'comment_body': ""Simplify just calls many other simplification functions. It's much better to choose a specific simplification function that actually does what you want like `together`, `cancel`, `expand`, `ratsimp` etc. When you call `simplify` it basically just tries all of these functions."", 'comment_created': datetime.datetime(2021, 6, 23, 10, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 656959471, 'comment_body': 'Yes, generally trigsimp is most helpful in the mechanics package.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 656967195, 'comment_body': 'But I think for this case we are just solving the result returned, so `simplify` seems fine to me.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 656993928, 'comment_body': ""I don't understand what you mean. Solving and simplifying are not the same thing.\r\n\r\nWhat is the expression before calling simplify?"", 'comment_created': datetime.datetime(2021, 6, 23, 11, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657004970, 'comment_body': '> What is the expression before calling simplify?\r\n\r\n```\r\n>>> N.x.angle_between(A.x + A.y)\r\nacos(sqrt(2)*(sqrt(2)*(1/2 - cos(J_theta(t))/2)/2 + sqrt(2)*(cos(J_theta(t))/2 + 1/2)/2))\r\n\r\n>>> N.x.angle_between(A.x + A.y).simplify()\r\n0\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 11, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 657010931, 'comment_body': ""```python\r\nIn [9]: e = acos(sqrt(2)*(sqrt(2)*(S(1)/2 - cos(J_theta(t))/2)/2 + sqrt(2)*(cos(J_theta(t))/2 + S(1)/2)/2))                                                   \r\n\r\nIn [10]: e                                                                                                                                                    \r\nOut[10]: \r\n    ⎛   ⎛   ⎛1   cos(Jₜₕₑₜₐ(t))⎞      ⎛cos(Jₜₕₑₜₐ(t))   1⎞⎞⎞\r\n    ⎜   ⎜√2⋅⎜─ - ──────────────⎟   √2⋅⎜────────────── + ─⎟⎟⎟\r\n    ⎜   ⎜   ⎝2         2       ⎠      ⎝      2          2⎠⎟⎟\r\nacos⎜√2⋅⎜─────────────────────── + ───────────────────────⎟⎟\r\n    ⎝   ⎝           2                         2           ⎠⎠\r\n\r\nIn [11]: expand_mul(e)                                                                                                                                        \r\nOut[11]: 0\r\n```\r\nCompare timings:\r\n```python\r\nIn [1]: J_theta = Function('J_theta')                                                                                                                         \r\n\r\nIn [2]: e = acos(sqrt(2)*(sqrt(2)*(S(1)/2 - cos(J_theta(t))/2)/2 + sqrt(2)*(cos(J_theta(t))/2 + S(1)/2)/2))                                                   \r\n\r\nIn [3]: %time expand_mul(e)                                                                                                                                   \r\nCPU times: user 2.26 ms, sys: 22 µs, total: 2.29 ms\r\nWall time: 2.33 ms\r\nOut[3]: 0\r\n\r\nIn [4]: %time simplify(e)                                                                                                                                     \r\nCPU times: user 301 ms, sys: 7.13 ms, total: 309 ms\r\nWall time: 308 ms\r\nOut[4]: 0\r\n```\r\nCalling simplify here wastes 1/3 of a second. In the context of unit tests where we know exactly what expression we are dealing with there is very rarely a good reason to use `simplify`. We need to keep the test suite as fast as possible (it is already way too slow)."", 'comment_created': datetime.datetime(2021, 6, 23, 11, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657640368, 'comment_body': ""@moorepants @oscarbenjamin `expand_mul` isn't working for this case\r\n\r\n```\r\n>>> expand_mul((A.x-A.y+A.z).express(N))\r\nAttribute Error\r\n\r\n>>> (A.x-A.y+A.z).express(N)\r\n(-4*cos(J_theta(t))/3 - 1/3)*N.x + (-2*sqrt(3)*sin(J_theta(t))/3 - 2*cos(J_theta(t))/3 + 1/3)*N.y + (-2*sqrt(3)*sin(J_theta(t))/3 + 2*cos(J_theta(t))/3 - 1/3)*N.z\r\n\r\n>>> (A.x-A.y+A.z).express(N).simplify()\r\n(-4*cos(theta)/3 - 1/3)*N.x + (1/3 - 4*sin(theta + pi/6)/3)*N.y + (4*cos(theta + pi/3)/3 - 1/3)*N.z\r\n```\r\n\r\nWhat will be the alternative in this case?"", 'comment_created': datetime.datetime(2021, 6, 24, 5, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 657645718, 'comment_body': ""I think for vectors we would need to use `simplify` because it would call simplify on it's args which can't be done directly."", 'comment_created': datetime.datetime(2021, 6, 24, 5, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 657646649, 'comment_body': 'You can always do `vector.to_matrix(N)` to give you a base sympy type that all functions should work with.', 'comment_created': datetime.datetime(2021, 6, 24, 5, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 657649957, 'comment_body': ""> You can always do `vector.to_matrix(N)` to give you a base sympy type that all functions should work with.\r\n\r\nIt isn't simplifying in desired form, matrix is also making result complicated."", 'comment_created': datetime.datetime(2021, 6, 24, 6, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 657837461, 'comment_body': 'What is the full code (with imports) needed to make that expression?\r\n\r\nHow does `simplify` turn `J_theta(t)` into `theta`? The first expression depends on `t` but after simplifying it does not.', 'comment_created': datetime.datetime(2021, 6, 24, 10, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657839151, 'comment_body': ""theta = dynamicsymbols('J_theta')\r\n\r\nTook the 1st one from output but other one from assertion, but they are same."", 'comment_created': datetime.datetime(2021, 6, 24, 10, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 657847302, 'comment_body': 'What is the full code (with imports) needed to make that expression?', 'comment_created': datetime.datetime(2021, 6, 24, 11, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658517923, 'comment_body': '> What is the full code (with imports) needed to make that expression?\r\n\r\nUsing the `Joints` class which is being implemented in this PR or without it?', 'comment_created': datetime.datetime(2021, 6, 25, 6, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 658521504, 'comment_body': 'The magnitude of the angular velocity of a pin join should always simply be omega, no?', 'comment_created': datetime.datetime(2021, 6, 25, 7, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658521760, 'comment_body': 'Or -omega (only different when viewing from the two frames).', 'comment_created': datetime.datetime(2021, 6, 25, 7, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658524823, 'comment_body': ""In this case there's omega in every axis(x, y, and z) , which would give `sqrt(3) * omega`, since magnitude is root of,  sum of squares of each axis' value."", 'comment_created': datetime.datetime(2021, 6, 25, 7, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 658526491, 'comment_body': 'That is not correct. The angular velocity of one body wrt the other when pin jointed together is a simple angular velocity about the pin joint axis. It is always simply omega.', 'comment_created': datetime.datetime(2021, 6, 25, 7, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658529762, 'comment_body': ""> simple angular velocity about the pin joint axis. \r\n\r\nBut parent axis is a unit in vector in every axis of parent reference frame. \r\n\r\n```\r\nomega*parent axis\r\n=> omega*(N.x - N.y + N.z) = omega*N.x - omega*N.y + omega*N.z\r\n```\r\n\r\nIsn't it what's supposed to be happen?\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 25, 7, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 658532519, 'comment_body': ""No, that isn't what is supposed to happen. In my lectures I discuss simple rotations. The `orient_axis()` function implements a simple rotation. This rotation defines the angular velocity as omega*rotation_axis_vector. When viewing the rotation axis vector from both reference frames, it should not move. It is fixed in both frames."", 'comment_created': datetime.datetime(2021, 6, 25, 7, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658533253, 'comment_body': '```\r\nA.orient_axis(N, angle, N.x + N.y + N.z)\r\nA.ang_vel(N).magnitude() == angle.diff(t)\r\nN.ang_vel(A).magnitude() == -angle.diff(t)\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 7, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658538347, 'comment_body': 'So that means if `parent_axis=N.x - N.y + N.z` then angular velocity about parent axis should be `(omega*N.x - omega*N.y + omega*N.z)/sqrt(3)` if I am not wrong.\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 7, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 658540793, 'comment_body': ""Here is a working example:\r\n\r\n```\r\nIn [1]: import sympy as sm\r\n\r\nIn [2]: import sympy.physics.mechanics as me\r\n\r\nIn [3]: theta = me.dynamicsymbols('theta')\r\n\r\nIn [5]: N = me.ReferenceFrame('N')\r\n\r\nIn [6]: A = me.ReferenceFrame('A')\r\n\r\nIn [8]: A.orient_axis(N, N.x + N.y + N.z, theta)\r\n\r\nIn [11]: sm.init_printing()\r\n\r\nIn [12]: A.ang_vel_in(N)\r\nOut[12]: \r\n   d                 d                 d\r\n√3⋅──(θ(t))       √3⋅──(θ(t))       √3⋅──(θ(t))\r\n   dt                dt                dt\r\n─────────── n_x + ─────────── n_y + ─────────── n_z\r\n     3                 3                 3\r\n\r\nIn [13]: A.ang_vel_in(N).magnitude()\r\nOut[13]: \r\n     _____________\r\n    ╱           2 \r\n   ╱  ⎛d       ⎞  \r\n  ╱   ⎜──(θ(t))⎟  \r\n╲╱    ⎝dt      ⎠  \r\n\r\nIn [14]: N.ang_vel_in(A)\r\nOut[14]: \r\n    d                   d                   d\r\n-√3⋅──(θ(t))        -√3⋅──(θ(t))        -√3⋅──(θ(t))\r\n    dt                  dt                  dt\r\n───────────── n_x + ───────────── n_y + ───────────── n_z\r\n      3                   3                   3\r\n\r\nIn [15]: N.ang_vel_in(A).magnitude()\r\nOut[15]: \r\n     _____________\r\n    ╱           2 \r\n   ╱  ⎛d       ⎞  \r\n  ╱   ⎜──(θ(t))⎟  \r\n╲╱    ⎝dt      ⎠  \r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 7, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658541386, 'comment_body': 'Got it!', 'comment_created': datetime.datetime(2021, 6, 25, 7, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 658541632, 'comment_body': 'This also brings up the issue of making assumptions for symbols and dynamicsymbols such that they are real.', 'comment_created': datetime.datetime(2021, 6, 25, 7, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658541978, 'comment_body': ""No effect:\r\n\r\n```\r\nIn [16]: theta = me.dynamicsymbols('theta', real=True)\r\n\r\nIn [17]: A.orient_axis(N, N.x + N.y + N.z, theta)\r\n\r\nIn [18]: A.ang_vel_in(N).magnitude()\r\nOut[18]: \r\n     _____________\r\n    ╱           2 \r\n   ╱  ⎛d       ⎞  \r\n  ╱   ⎜──(θ(t))⎟  \r\n╲╱    ⎝dt      ⎠  \r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 7, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658542606, 'comment_body': ""Yes in Joints classes I'll have taken care of assumptions, as it's new so we can correct these things here."", 'comment_created': datetime.datetime(2021, 6, 25, 7, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 658543028, 'comment_body': 'But what if a person supplies there own coordinates? They may not have set the assumptions.', 'comment_created': datetime.datetime(2021, 6, 25, 7, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 658544615, 'comment_body': ""I'll add that in `Notes` section to use correct assumptions."", 'comment_created': datetime.datetime(2021, 6, 25, 7, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 658666704, 'comment_body': 'With the PR', 'comment_created': datetime.datetime(2021, 6, 25, 10, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659821645, 'comment_body': 'No assumptions should be set here, especially not positive. The coordinate can be any real valued number, positive or negative!', 'comment_created': datetime.datetime(2021, 6, 28, 14, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 659821888, 'comment_body': 'Same here. omega is not a positive quantity.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 659825953, 'comment_body': 'Should work without positive assumption.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 659914543, 'comment_body': 'So shall I set it to `real=True`?', 'comment_created': datetime.datetime(2021, 6, 28, 15, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660056334, 'comment_body': 'These four vectors should all be constant with respect to time. A check is needed to ensure that for each vector.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660265681, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 29, 4, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660265880, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 29, 4, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660329376, 'comment_body': ""I'm not getting the same direction cosine matrix. Here is my solution to this problem:\r\n\r\n```\r\nIn [70]: N = me.ReferenceFrame('N')\r\n\r\nIn [71]: A = me.ReferenceFrame('A')\r\n\r\nIn [72]: As = me.ReferenceFrame('As')\r\n\r\nIn [73]: As.orient_axis(N, N.z, sm.pi/2)\r\n\r\nIn [74]: A.orient_axis(As, N.x, theta)\r\n\r\nIn [75]: A.dcm(N)\r\nOut[75]: \r\nMatrix([\r\n[ 0,  cos(theta(t)), sin(theta(t))],\r\n[-1,              0,             0],\r\n[ 0, -sin(theta(t)), cos(theta(t))]])\r\n\r\nIn [76]: N.x.express(A)\r\nOut[76]: - A.y\r\n\r\nIn [79]: A.ang_vel_in(N).express(N)\r\nOut[79]: Derivative(theta(t), t)*N.x\r\n\r\nIn [81]: A.ang_vel_in(N).express(A)\r\nOut[81]: - Derivative(theta(t), t)*A.y\r\n\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 29, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660330420, 'comment_body': 'Here is my sketch:\r\n![image](https://user-images.githubusercontent.com/276007/123751123-a8f25280-d8b7-11eb-9946-b509e37daba8.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 6, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660333557, 'comment_body': ""> I'm not getting the same direction cosine matrix. Here is my solution to this problem:\r\n ```\r\n> In [70]: N = me.ReferenceFrame('N')\r\n> \r\n> In [71]: A = me.ReferenceFrame('A')\r\n> \r\n> In [72]: As = me.ReferenceFrame('As')\r\n> \r\n> In [73]: As.orient_axis(N, N.z, sm.pi/2)\r\n> \r\n> In [74]: A.orient_axis(As, N.x, theta)\r\n> In [76]: N.x.express(A)\r\n> Out[76]: - A.y\r\n\r\n ```\r\n\r\n`A.x` should be aligned to `N.x` . You are getting `N.x`  aligned to `A.y`\r\n"", 'comment_created': datetime.datetime(2021, 6, 29, 7, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660341816, 'comment_body': ""Here is the corrected code for the figure:\r\n\r\n```\r\nIn [89]: N = me.ReferenceFrame('N')\r\n\r\nIn [90]: A = me.ReferenceFrame('A')\r\n\r\nIn [91]: As = me.ReferenceFrame('As')\r\n\r\nIn [92]: As.orient_axis(N, N.z, sm.pi)\r\n\r\nIn [93]: A.orient_axis(As, N.x, theta)\r\n\r\nIn [94]: A.dcm(N)\r\nOut[94]: \r\nMatrix([\r\n[-1,              0,              0],\r\n[ 0, -cos(theta(t)), -sin(theta(t))],\r\n[ 0, -sin(theta(t)),  cos(theta(t))]])\r\n\r\nIn [95]: N.x.express(A)\r\nOut[95]: - A.x\r\n\r\n```"", 'comment_created': datetime.datetime(2021, 6, 29, 7, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660342818, 'comment_body': ""Same result:\r\n\r\n```\r\nIn [96]: N = me.ReferenceFrame('N')\r\n\r\nIn [97]: A = me.ReferenceFrame('A')\r\n\r\nIn [98]: As = me.ReferenceFrame('As')\r\n\r\nIn [99]: As.orient_axis(N, -N.z, sm.pi)\r\n\r\nIn [100]: A.orient_axis(As, N.x, theta)\r\n\r\nIn [101]: A.dcm(N)\r\nOut[101]: \r\nMatrix([\r\n[-1,              0,              0],\r\n[ 0, -cos(theta(t)), -sin(theta(t))],\r\n[ 0, -sin(theta(t)),  cos(theta(t))]])\r\n\r\nIn [103]: A.ang_vel_in(N).express(A)\r\nOut[103]: - Derivative(theta(t), t)*A.x\r\n\r\nIn [104]: A.ang_vel_in(N).express(N)\r\nOut[104]: Derivative(theta(t), t)*N.x\r\n\r\nIn [105]: N.x.express(A)\r\nOut[105]: - A.x\r\n\r\n\r\n```"", 'comment_created': datetime.datetime(2021, 6, 29, 7, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660394707, 'comment_body': ""Looking only at the orientation for this example with the child rotation axis as `rC = A.x + A.y` I have this figure:\r\n![image](https://user-images.githubusercontent.com/276007/123761961-99c4d200-d8c2-11eb-891a-b77459fd6833.png)\r\n\r\n`uC = cross(As.x, N.x).normalize()`\r\n\r\nMy code to generation the orientation and angular velocity expressions is:\r\n\r\n```\r\nIn [1]: import sympy as sm\r\n\r\nIn [2]: import sympy.physics.mechanics as me\r\n\r\nIn [3]: N = me.ReferenceFrame('N')\r\n\r\nIn [4]: A = me.ReferenceFrame('A')\r\n\r\nIn [5]: As = me.ReferenceFrame('As')\r\n\r\nIn [6]: rC = A.x + A.y\r\n\r\nIn [7]: As.orient_axis(N, -N.z, sm.pi/4)  # note the negative N.z here\r\n\r\nIn [8]: theta = me.dynamicsymbols('theta')\r\n\r\nIn [9]: A.orient_axis(As, N.x, theta)\r\n\r\nIn [11]: sm.simplify(A.dcm(N))\r\nOut[11]: \r\nMatrix([\r\n[sqrt(2)/2, -sqrt(2)*cos(theta(t))/2, -sqrt(2)*sin(theta(t))/2],\r\n[sqrt(2)/2,  sqrt(2)*cos(theta(t))/2,  sqrt(2)*sin(theta(t))/2],\r\n[        0,           -sin(theta(t)),            cos(theta(t))]])\r\n\r\nIn [13]: A.ang_vel_in(N).express(N)\r\nOut[13]: Derivative(theta(t), t)*N.x\r\n\r\nIn [14]: A.ang_vel_in(N).express(A).simplify()\r\nOut[14]: sqrt(2)*Derivative(theta(t), t)/2*A.x + sqrt(2)*Derivative(theta(t), t)/2*A.y\r\n\r\nIn [16]: A.x.express(N).simplify()\r\nOut[16]: sqrt(2)/2*N.x - sqrt(2)*cos(theta(t))/2*N.y - sqrt(2)*sin(theta(t))/2*N.z\r\n\r\nIn [16]: A.x.express(N).simplify()\r\nOut[16]: sqrt(2)/2*N.x - sqrt(2)*cos(theta(t))/2*N.y - sqrt(2)*sin(theta(t))/2*N.z\r\n\r\nIn [17]: A.z.express(N).simplify()\r\nOut[17]: - sin(theta(t))*N.y + cos(theta(t))*N.z\r\n\r\nIn [18]: A.y.express(N).simplify()\r\nOut[18]: sqrt(2)/2*N.x + sqrt(2)*cos(theta(t))/2*N.y + sqrt(2)*sin(theta(t))/2*N.\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 6, 29, 8, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660395250, 'comment_body': 'I get `(omega*A.x + omega*A.y)*sqrt(2)/2` in my example above.\r\n\r\n```\r\nIn [14]: A.ang_vel_in(N).express(A).simplify()\r\nOut[14]: sqrt(2)*Derivative(theta(t), t)/2*A.x + sqrt(2)*Derivative(theta(t), t)/2*A.y\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 8, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660409057, 'comment_body': ""That's same as mine."", 'comment_created': datetime.datetime(2021, 6, 29, 8, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660410168, 'comment_body': '`sqrt(2)/2 = 1/sqrt(2)`', 'comment_created': datetime.datetime(2021, 6, 29, 8, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660411256, 'comment_body': 'yes', 'comment_created': datetime.datetime(2021, 6, 29, 8, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660411356, 'comment_body': 'So that matches.', 'comment_created': datetime.datetime(2021, 6, 29, 8, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660412478, 'comment_body': 'This should not have or need `Abs()`.', 'comment_created': datetime.datetime(2021, 6, 29, 8, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660413094, 'comment_body': 'With `real=True`, it would give `Abs(omega)`', 'comment_created': datetime.datetime(2021, 6, 29, 8, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660426653, 'comment_body': 'Here is my figure for this orientation:\r\n![image](https://user-images.githubusercontent.com/276007/123770033-32128500-d8ca-11eb-8f78-fa22713f82f3.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 9, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660446705, 'comment_body': 'You should set the velocities in PinJoint to the right value. Why are you setting it to Abs(omega)?', 'comment_created': datetime.datetime(2021, 6, 29, 9, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660449269, 'comment_body': ""Here's my code for this one:\r\n```\r\nIn [1]: import sympy as sm\r\n\r\nIn [2]: import sympy.physics.mechanics as me\r\n\r\nIn [3]: N = me.ReferenceFrame('N')\r\n\r\nIn [4]: A = me.ReferenceFrame('A')\r\n\r\nIn [5]: As = me.ReferenceFrame('As')\r\n\r\nIn [6]: a1, a2, a3 = sm.symbols('a1, a2, a3')\r\n\r\nIn [14]: rC = a1*N.x + a2*N.y + a3*N.z\r\n\r\nIn [15]: uC = me.cross(N.x, rC).normalize()\r\n\r\nIn [16]: thetaC = sm.acos(me.dot(N.x, rC.normalize()))\r\n\r\nIn [17]: As.orient_axis(N, -uC, thetaC)\r\n\r\nIn [19]: sm.trigsimp(As.dcm(N)).xreplace({a1: 1, a2: 1, a3: -1})\r\nOut[19]:\r\nMatrix([\r\n[ sqrt(3)/3,      -sqrt(3)/3,       sqrt(3)/3],\r\n[ sqrt(3)/3, sqrt(3)/6 + 1/2, 1/2 - sqrt(3)/6],\r\n[-sqrt(3)/3, 1/2 - sqrt(3)/6, sqrt(3)/6 + 1/2]])\r\n\r\nIn [21]: theta = me.dynamicsymbols('theta')\r\n\r\nIn [22]: A.orient_axis(As, N.x, theta)\r\n\r\nIn [24]: sm.trigsimp(A.dcm(N).xreplace({a1: 1, a2: 1, a3: -1}))\r\nOut[24]:\r\nMatrix([\r\n[ sqrt(3)/3,   -sqrt(6)*sin(theta(t) + pi/4)/3,    sqrt(6)*cos(theta(t) + pi/4)/3],\r\n[ sqrt(3)/3,   sqrt(6)*cos(theta(t) + pi/12)/3,   sqrt(6)*sin(theta(t) + pi/12)/3],\r\n[-sqrt(3)/3, sqrt(6)*cos(theta(t) + 5*pi/12)/3, sqrt(6)*sin(theta(t) + 5*pi/12)/3]])\r\n\r\nIn [26]: A.ang_vel_in(N).express(N).simplify()\r\nOut[26]: Derivative(theta(t), t)*N.x\r\n\r\nIn [28]: A.ang_vel_in(N).express(A).simplify().xreplace({a1: 1, a2: 1, a3: -1})\r\nOut[28]: sqrt(3)*Derivative(theta(t), t)/3*A.x + sqrt(3)*Derivative(theta(t), t)/3*A.y - sqrt(3)*Derivative(theta(t), t)/3*A.z\r\n```"", 'comment_created': datetime.datetime(2021, 6, 29, 9, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660449701, 'comment_body': 'This matches your results.', 'comment_created': datetime.datetime(2021, 6, 29, 9, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660478748, 'comment_body': 'There is no check for the correct direction cosine matrix for this example.', 'comment_created': datetime.datetime(2021, 6, 29, 10, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660485690, 'comment_body': 'Sorry , missed that.', 'comment_created': datetime.datetime(2021, 6, 29, 10, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660485787, 'comment_body': 'I have added it now.', 'comment_created': datetime.datetime(2021, 6, 29, 10, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660527077, 'comment_body': 'This should be zero. The angular velocity vector is aligned with the pin joint axis.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660527438, 'comment_body': 'Child axis is: `child_axis=A.x+A.y-A.z`', 'comment_created': datetime.datetime(2021, 6, 29, 11, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660528205, 'comment_body': ""yes it is zero, this the case I talked about in meeting, `omega/Abs(omega)` doesn't evaluate to 1."", 'comment_created': datetime.datetime(2021, 6, 29, 11, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660528878, 'comment_body': ""Figure for the orientation for this one:\r\n![image](https://user-images.githubusercontent.com/276007/123790353-81fb4700-d8de-11eb-91f1-ffe01f9c3bb3.png)\r\n\r\nCode:\r\n\r\n```python\r\nimport sympy as sm\r\nimport sympy.physics.mechanics as me\r\n\r\nN = me.ReferenceFrame('N')\r\nA = me.ReferenceFrame('A')\r\nAs = me.ReferenceFrame('As')\r\nNs = me.ReferenceFrame('Ns')\r\n\r\na1, a2, a3 = sm.symbols('a1, a2, a3')\r\nn1, n2, n3 = sm.symbols('n1, n2, n3')\r\n\r\ntheta = me.dynamicsymbols('theta')\r\nrepl = {a1: 1, a2: 1, a3: -1, n1: 1, n2: -1, n3: 1}\r\n\r\nrP = n1*N.x + n2*N.y + n3*N.z\r\nuP = me.cross(N.x, rP).normalize()\r\nthetaP = sm.acos(me.dot(N.x, rP.normalize()))\r\n\r\nrC = a1*A.x + a2*A.y + a3*A.z\r\nuC = me.cross(A.x, rC).normalize()\r\nthetaC = sm.acos(me.dot(A.x, rC.normalize()))\r\n\r\nu = uC.dot(A.x)*As.x + uC.dot(A.y)*As.y + uC.dot(A.z)*As.z\r\n\r\nNs.orient_axis(N, uP, thetaP)\r\nAs.orient_axis(Ns, Ns.x, theta)\r\nA.orient_axis(As, -u, thetaC)\r\n\r\nprint(sm.trigsimp(A.dcm(N).xreplace(repl)))\r\nprint('\\n')\r\nprint(A.ang_vel_in(N).express(N).xreplace(repl).simplify())\r\nprint('\\n')\r\nprint(A.ang_vel_in(N).express(A).xreplace(repl).simplify())\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nMatrix([[1/3 - 2*cos(theta(t))/3, -2*sin(theta(t) + pi/6)/3 - 1/3, 2*cos(theta(t) + pi/3)/3 + 1/3], [2*cos(theta(t) + pi/3)/3 + 1/3, 2*cos(theta(t))/3 - 1/3, 2*sin(theta(t) + pi/6)/3 + 1/3], [-2*sin(theta(t) + pi/6)/3 - 1/3, 2*cos(theta(t) + pi/3)/3 + 1/3, 2*cos(theta(t))/3 - 1/3]])\r\n\r\n\r\nsqrt(3)*Derivative(theta(t), t)/3*N.x - sqrt(3)*Derivative(theta(t), t)/3*N.y + sqrt(3)*Derivative(theta(t), t)/3*N.z\r\n\r\n\r\nsqrt(3)*Derivative(theta(t), t)/3*A.x + sqrt(3)*Derivative(theta(t), t)/3*A.y - sqrt(3)*Derivative(theta(t), t)/3*A.z\r\n```"", 'comment_created': datetime.datetime(2021, 6, 29, 11, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660529543, 'comment_body': 'These match your results for the orientation and angular velocity.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660531029, 'comment_body': '> These match your results for the orientation and angular velocity.\r\n\r\nAnd DCM too\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 11, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660531121, 'comment_body': 'If you are setting the angular velocity to `omega*pin_axis_vec` then why would this have an `Abs()`?', 'comment_created': datetime.datetime(2021, 6, 29, 11, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660532650, 'comment_body': 'It would be helpful to describe which methods need to be defined here.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660534703, 'comment_body': 'This would be nice if it printed ""Pin Joint connecting the parent body A to child body B"" or something of that nature. Or ""Pin Joint, parent: A, child: B""', 'comment_created': datetime.datetime(2021, 6, 29, 11, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660535298, 'comment_body': 'The `repr` should ideally print a str that can be copy and pasted to create an identical instance.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660536043, 'comment_body': '```suggestion\r\n        """"""Kinematical differential equations of the joint.""""""\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 11, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660536510, 'comment_body': 'These should not have a space after the `""""""`. Correct all.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660537190, 'comment_body': 'This should be an abstract method.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660537965, 'comment_body': 'The axis cannot be time varying when viewed from the associated body.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660539404, 'comment_body': ""This should be an abstract method and empty, right? Also, as written here, it doesn't align anything, it simply computes an angle and an axis."", 'comment_created': datetime.datetime(2021, 6, 29, 11, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660546252, 'comment_body': 'The pin joint axis is ""body fixed"" in both child and parent.', 'comment_created': datetime.datetime(2021, 6, 29, 11, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660547010, 'comment_body': 'The point of the joint -> The location of the joint is defined relative to the mass center of each body.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660547414, 'comment_body': 'This last sentence does not well describe things. You can define axes in both the child and parent.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660547537, 'comment_body': ""```suggestion\r\n        The joint's name which makes it unique.\r\n```"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660548323, 'comment_body': 'There is only a single generalized coordinate for a pin joint. This is not descriptive enough for the user to know what they should supply.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660548450, 'comment_body': 'There is also only one generalized speed.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660549180, 'comment_body': ""```suggestion\r\n        Defines the joint's location where the parent will be connected to child.\r\n```\r\n\r\nThis is not a good description. This locates the joint relative to the parent's mass center in the parent body."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660549803, 'comment_body': 'All of these descriptions can be improved by making them more precisely descriptive. The descriptions should match with a very nice generalized figure of the joint.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660549975, 'comment_body': '```suggestion\r\n    connected via ``PinJoint`` at their masscenters.\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 12, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660551119, 'comment_body': 'This example should have:\r\n\r\nchild.dcm(parent)\r\n\r\nchild.ang_vel_in(parent)\r\n\r\nto show the joint has been defined correctly.\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 12, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660551638, 'comment_body': '```suggestion\r\n    This is an example of simple double pendulum where we will do all kinematics\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 12, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660553022, 'comment_body': 'The example that follows this does not seem to be a simple double pendulum. If you write ""double pendulum"" everyone is going to think of this: https://en.wikipedia.org/wiki/Double_pendulum and if you write ""simple double pendulum"" that means it only deals with point masses in the double pendulum.\r\n\r\nI think showing a simple double pendulum is the best first example to show here.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660555380, 'comment_body': ""I don't think it needs to be an abstract method."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660555761, 'comment_body': ""No, it doesn't need to be an abstract method. "", 'comment_created': datetime.datetime(2021, 6, 29, 12, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660556049, 'comment_body': 'You can have this rod + plate, 90 degree axis pendulum too, but it needs a different name. It may also best belong in joint_example.rst page you plan to make.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660557178, 'comment_body': 'We should be able to handle this without the user having to worry about this. We know this is a pin joint and we know what the resulting kinematics should be, so internally we should handle this and just give the correct answers without requiring this assumption to be set on variables.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660557338, 'comment_body': ""> You can have this rod + plate, 90 degree axis pendulum too, but it needs a different name. It may also best belong in joint_example.rst page you plan to make.\r\n\r\nOkay, I'll change that."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660557996, 'comment_body': 'Why would this raise a type error?', 'comment_created': datetime.datetime(2021, 6, 29, 12, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660558167, 'comment_body': ""I still think we should set this assumptions, and make users habitual of using certain assumptions with mechanics. It's a new class so we can start it from here."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660558474, 'comment_body': ""Why isn't `Pj.name` used? This should be a public attribute."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660558579, 'comment_body': 'Making an instance of abstract class gives TypeError by python itself', 'comment_created': datetime.datetime(2021, 6, 29, 12, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660560021, 'comment_body': 'Should name be public? If a user changes name of joint after instantiating an object of that class then it may cause some problem with self generated dynamicsymbols as they are dependent on name.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660560609, 'comment_body': ""Why aren't all these public? Can't they be publicly accessible but no modifiable?"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660561504, 'comment_body': '- PinJoint.parent_joint_point\r\n- PinJoint.child_joint_point\r\n\r\nSeems useful to be able to access these points easily.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660561809, 'comment_body': ""I personally think they are good being private, user can check kdes, speeds, coordinates and other things but shouldn't be aware of all this "", 'comment_created': datetime.datetime(2021, 6, 29, 12, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660564363, 'comment_body': ""> If you are setting the angular velocity to `omega*pin_axis_vec` then why would this have an `Abs()`?\r\n\r\nBecause magnitude takes square root of it's square, value being real is returned with `Abs`"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660570459, 'comment_body': 'Please remove all the backslash `\\` line continuations in the code. These are rarely needed. Parentheses handle line breaks just fine in Python for almost all cases.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660574020, 'comment_body': ""I'd like to see this double pendulum example simplified and shown as the main example in the docstring.\r\n\r\nIt should go something like this:\r\n\r\n```python\r\nceiling = Body('C')\r\nupper_bob = Body('U')\r\nlower_bob = Body('L')\r\nceiling_joint = PinJoint(ceiling, upper_bob)\r\npendulum_joint = PinJoint(upper_bob, lower_bob)\r\nupper_bob.vel(ceiling)  # show linear velocity is correct\r\nlower_bob.vel(ceiling)  # show linear velocity is correct\r\n```"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660574571, 'comment_body': ""You don't have a test to show that the lower pendulum's velocity in the N frame is correct."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660576978, 'comment_body': ""For more complicated joints, it isn't always the case that you have to use `q' = u`."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660577336, 'comment_body': 'Why?', 'comment_created': datetime.datetime(2021, 6, 29, 12, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660579212, 'comment_body': ""I'd agree if we weren't dealing with these joints where we know what the answer should be already. It's useful for the developer of the joints to know this and use it to get the correct answer, but for users of Joint classes, we can simply give them the correct answer for the joint."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660579339, 'comment_body': 'ok', 'comment_created': datetime.datetime(2021, 6, 29, 12, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660579615, 'comment_body': 'Make it public but immutable.', 'comment_created': datetime.datetime(2021, 6, 29, 12, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660580719, 'comment_body': ""If the user wants to connect things to these points and they haven't generated the points themselves, there there is no way to access them. What if I want to apply a force to this point, but it is hidden in the class?"", 'comment_created': datetime.datetime(2021, 6, 29, 12, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660585356, 'comment_body': ""Yes, I was incorrectly thinking that `.magnitude()` should be providing the magnitude and direction (in terms of the sign). This begs the question as to why we don't have a method to give the signed vector magnitude. This is fine to leave. Thanks."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660589337, 'comment_body': ""I'm not familiar with the `abstractmethod` decorator. I see here https://docs.python.org/3/library/abc.html#abc.abstractmethod that you use if if you want to prevent instantiation of the object if those methods aren't overwritten in the sub class, so this doesn't need to be decorated in that case, because it is optionally overridden, as are any methods."", 'comment_created': datetime.datetime(2021, 6, 29, 12, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660611099, 'comment_body': ""Writing out the steps so I understand what you are doing.\r\n\r\nFor the case where axis == 0, the child and parent joint axes are rotated integer multiples of pi wrt to each other. So you:\r\n\r\n1. Align the child frame to the parent frame.\r\n2. Calculate the angle between the two joint rotation axes and the axis of rotation (when the two frames are aligned)\r\n3. Orient the child frame relative to the parent frame about the parent joint axis through the joint angle.\r\n\r\nStep 3 overwrites step 1 and does not seem to take into account if the child joint axis and the parent joint axis have opposite directions.\r\n\r\nFor the case when axis != 0 you do:\r\n\r\n1. Align the child frame to the parent frame.\r\n2. Calculate the angle between the two joint rotation axes and the axis of rotation (when the two frames are aligned).\r\n3. Create a new intermediate reference frame and align it with the child reference frame. (now child, parent, and intermediate are all aligned the same).\r\n4. Orient the intermediate frame relative to the parent through the alignment angle about the alignment axis.\r\n5. Orient the child frame relative to the intermediate frame about the parent joint axis through the joint angle. \r\n\r\nStep 4 creates a kinematic orientation loop that is invalid because you already have the child/parent orientation in step 1 set. I hope everything is being properly overwritten so the incorrect orientations do not remain. This is more elegant than what I was doing today, as it only requires 1 intermediate frame. I can only hope that's what Sahil and I did years back! :)\r\n\r\nSide note: why are you using `._child` and `.parent` here? If these are public attributes (should be), then you should be using `.child` and `.parent` here."", 'comment_created': datetime.datetime(2021, 6, 29, 13, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660612451, 'comment_body': 'Does this also set the opposite velocity, parent mass center relative to the child mass center?', 'comment_created': datetime.datetime(2021, 6, 29, 13, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660613078, 'comment_body': 'There is a `@property` decorator for that.', 'comment_created': datetime.datetime(2021, 6, 29, 13, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660692794, 'comment_body': 'List generalized speeds of the joint.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660692969, 'comment_body': 'List generalized coordinates of the joint.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661121228, 'comment_body': ""Because it doesn't needs to be defined in every sub class"", 'comment_created': datetime.datetime(2021, 6, 30, 4, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 661126024, 'comment_body': 'So what do you suggest? How can we deal with this.', 'comment_created': datetime.datetime(2021, 6, 30, 4, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 661130256, 'comment_body': 'Any suggestion for description of these terms?', 'comment_created': datetime.datetime(2021, 6, 30, 4, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 661133580, 'comment_body': '@moorepants  What all things shall I make public and immutable?', 'comment_created': datetime.datetime(2021, 6, 30, 5, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662161639, 'comment_body': ""You don't define setters if you want the attribute to be immutable. I don't think you want setters, otherwise you have to recreate the joint with the methods in `__init__()`."", 'comment_created': datetime.datetime(2021, 7, 1, 10, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662173923, 'comment_body': 'It gives error without setters.', 'comment_created': datetime.datetime(2021, 7, 1, 10, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662206093, 'comment_body': 'Then look up how to do immutable attributes.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662208801, 'comment_body': '```suggestion\r\n    ... child_joint_pos=-l1*upper_bob.frame.x,\r\n```\r\nSetting the vector from the joint to the mass center as a positive quantity is clearer and more standard.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662208950, 'comment_body': '```suggestion\r\n    ... child_joint_pos=-l2*lower_bob.frame.x,\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 11, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662209667, 'comment_body': 'Missing a unit test for this.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662269740, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 1, 13, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662281311, 'comment_body': '```suggestion\r\n    parent_point : Point\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 13, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662281454, 'comment_body': '```suggestion\r\n    child_point : Point\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 13, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662282756, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 1, 13, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662283787, 'comment_body': ""Doesn't `parent_joint` seems better?"", 'comment_created': datetime.datetime(2021, 7, 1, 13, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662286661, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 13, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662286775, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 1, 13, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662298005, 'comment_body': 'It returns a point, not a joint, so the name ""point"" seems to say what it is.', 'comment_created': datetime.datetime(2021, 7, 1, 13, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662301164, 'comment_body': ""But it represents the joint with parent body, that's why I'm inclined towards `parent_joint` , it's description also supports it."", 'comment_created': datetime.datetime(2021, 7, 1, 13, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662326088, 'comment_body': 'It is a good rule of thumb to name things what they are. Our definition of a ""joint"" is much than a ""point"". In the case of the pin joint a joint = a name, two points, and two axes! If a user types `my_joint.parent_joint` interactively they\'d expect to get a joint object because of its name. There are only two points associated with a Joint object, one for the child and one for the parent. That\'s unambiguous. ', 'comment_created': datetime.datetime(2021, 7, 1, 14, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662335037, 'comment_body': ""Okay, I'll update that."", 'comment_created': datetime.datetime(2021, 7, 1, 14, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662738046, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 5, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662738074, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 2, 5, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662766288, 'comment_body': ""For the case when axis == 0, the angle is an integer multiple of pi. For the cases pi, 3pi, 5pi, etc how does this ensure that the rotation of child wrt to parent is about an axis pointing opposite in each frame? I'm not seeing that. This seems to do the same thing for the 0 degree and 180 degree cases."", 'comment_created': datetime.datetime(2021, 7, 2, 6, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662787387, 'comment_body': 'If the two axes are N.x and -A.x, then this should be pi.', 'comment_created': datetime.datetime(2021, 7, 2, 7, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662787547, 'comment_body': '`-A.x.express(N) == N.x`', 'comment_created': datetime.datetime(2021, 7, 2, 7, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662787787, 'comment_body': '```suggestion\r\n    assert A.ang_vel_in(N) == -omega*N.x\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 7, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662788096, 'comment_body': 'This example is not correct, as far as I can see.', 'comment_created': datetime.datetime(2021, 7, 2, 7, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '526e4827287daaee86c864bc85afbd9dafaf4069', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86571f9be6154c367ce0e2dac86b85997e5e4763', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f74a19576ddf6a7ccbf0af307b7b59c2293024', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '496d408a1bd3ffaf165c51a83850cd241ba1183a', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9094ee620062dda3adba35ac1d7128e43a442072', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52480bca22d658ab969e61f1f2c4ee81271e10ae', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4aedb636161d97df963ad95f48521a1f0aaf533', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c88a8800d9d44ffadd0a9f79c738360f93e8a9', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b593e286c2c64badb2509bb7e3475ba2b072a9fd', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d23682796186aeb95ec8159c2a3bca4da707c40', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5aec3f21ee9d8d226fc27a22e14fdf82fe455a0', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04bb91dd9c13167a65928f19e5b05b8bf8a50a70', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf220906c1e218392f82e5260b807250f8d9a70c', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9946177faa1c072d27494a06797684ed904f5885', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77e7c2270b7e4a3368ddf22408d2919232e2e9d5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb646e3af1d25c18fd618399f3f41ddd26dca1cb', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03dc04926aa34fa71abde9bdfbce32d156677c3d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1189c2b03285b713bbb396cc66bd855298e653e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48d0558416f04ca6e1aea7b286e08c6f7d3c5c94', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665079d54edac1589fdd792505133c94cf942985', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef0a90fd7933d0245891cc444925b182e504d12', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b6b20d9a0acb49233baaf61f08b32a4b3c40d52', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '934e5385f01796b10c284f549212e6721bc8cfea', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f21fef3cf226d380ef6e6d1e947bf2de2c5a010', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f182b6310ab51c973e5f64e04874bb825d26249d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '835477d5ba229f88a23e758eceb99a0e91c1080e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9c2bacb3a8d29f3f2c02d23dd4ec31de0b6cd08', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baa31093b0f4782db0144cf169f8373360d36c71', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b19f1433be8d97d6117e9feb9bbf1d532a1f021', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c40e82f3fec0e19b6b87ac3999c5ea99c4ac0b8', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca06e84e58ffaa86ff6add7b3fe54055faeb00f1', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b438971878b1a9d6c6c6a4d5c298d630f098a1a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '338d9bfb56b2bc7ce9074fa1b77016e1cb9336d8', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '016d4b2f9b94d05b18bf5fcf39b4f2fcead9eaf1', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '870182ee923553581f879c829c7a13a7288c2c01', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '251918fba597817772525da2c4e9e3b3eeb7d95e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a27a39ad31db05fff8a4a7c07815162cfe26f9a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56cd88dbc61aeb614e4eb698e12c53bef52db326', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9944b14bf266b0c8b461d7d27906eb290239479a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '326fca248e8049b2dedc546ef6c887d993dfdf54', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8892cd605cd789557a0b7aa1da5e657f20b2a78', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ba7c43cf3c8962c4c51963bdca0bb7d0345a33', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdc509760ecd01af181f0f520b5004cfe8f5619f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e7b0bcd2a0f3c5af5cdb41d5745bf10f8164ef3', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07effc48158de65503b4df453f4cdc174428da80', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d008a97c5e102a31b26f553e61d07f433ec295d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55856ffaff102d0b103c9ec7cee16cadd5b2fa8a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbc2b8ebf5c92b31e454a56ba6fea6ee74e7cfba', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3b46378a69f6b5f735693f4a2698b0da5dced9', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e770c68d0e1c751da3c405eff8edf79474ac37', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '392a9c01acd1b24c1a89edfd9de3c80130193740', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3dae779caf38716f2ea37cf76544493bafb13c1', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '016757fd3cea2ac0a736b1d87dc7b72567dc8d1a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eab58d5fcc87097bafbc654faf2f878036d41c9', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d04fd74ba8d5669725a8615b7e50a4cf1b7932d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae74b8219f1d14ae7d803ae345025e1e06dcd4eb', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbd668a90387298528a59f7deb4de20a35826363', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c462146893302f20388c67b36a92824013774bd4', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa73f04b9f9ca049c2204b622eda814ec1c853fb', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad4dfa7df913e64124c8962d6f8ac066d7dd3d79', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48a7dce0ccb9f24acf13bf545d354c8cea86b7a8', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bccb0ec99e2c27f4299f0cc3434aa97ea0a0c63', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c637d4cc01704a59ae4ca9b31b906b603feb73ca', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3815b8470b25b9287455762bda126eb49aefd93a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a678dede30821acfa6339224cfbbf493a9f83e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac21bab3d4ec31624089c21c8ab2322b8ceb8268', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c0b2b1cb8ad3eb5dc6816e1eacf6fa47a3cf762', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17545fe2d770936a427dcc3ace3a6f376878527b', 'committer_username': 'moorepants', 'committer_name': 'Jason K. Moore', 'committer_email': 'moorepants@gmail.com', 'commit_date': datetime.datetime(2010, 5, 13, 22, 43, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648ba876016ce0ddf70b6481890d1780396f417c', 'committer_username': 'moorepants', 'committer_name': 'Jason K. Moore', 'committer_email': 'moorepants@gmail.com', 'commit_date': datetime.datetime(2010, 5, 13, 22, 43, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa6461e57f479c19fda93b6707cd0aa336660ba9', 'committer_username': 'moorepants', 'committer_name': 'Jason K. Moore', 'committer_email': 'moorepants@gmail.com', 'commit_date': datetime.datetime(2010, 5, 13, 22, 43, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa4ea78e05945c97f7883a9efd3bc3b2a60ae50', 'committer_username': 'moorepants', 'committer_name': 'Jason K. Moore', 'committer_email': 'moorepants@gmail.com', 'commit_date': datetime.datetime(2010, 5, 13, 22, 43, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9aeed9e5b91f352620c8f58875fe2afd727140e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb7a0b055873c3d13e326155d892009fa131dc75', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b8193fb2ddeb228c746afadd1d26af5628c0884', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8f5689f4ffe42707915a092b8bda7c0b0a528a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca8869a22312db9bc414b2f8bf2ca69b2bb9e58', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62e2a9df99884f5373319db4a9b30d6f8962c323', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fca0db403e53e48037a2abbcddb357e143dda867', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb15622f68323f13c94c0b13cb9f5f877a7a09ef', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe861c451d65ca52683ae90eaa1a35b9b7126840', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '554df5cd2c4b65f0ee341d6a87de42de81b6056f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '032303ef5cacdffbd27c7526e1cdb6344eaa1ff2', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89122c7effa39d66e765c419a8146a01a03e9021', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb3ffa862201bae2c9eece4c1b4d920584b39b1', 'committer_username': 'moorepants', 'committer_name': 'Jason K. Moore', 'committer_email': 'moorepants@gmail.com', 'commit_date': datetime.datetime(2010, 5, 13, 22, 43, 8, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
678726755,Implement SlidingJoint,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#21519

#### Brief description of what is fixed or changed
Added SlidingJoint Class

#### Other comments
ping @moorepants @Sc0rpi0n101 

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
    * Implemented a PrismaticJoint class that generate the kinematics of a prismatic joint.
<!-- END RELEASE NOTES -->
",True,21674,https://api.github.com/repos/sympy/sympy/pulls/21674,https://github.com/sympy/sympy/pull/21674,closed,443,88,4,47,8,79,2,0,"[{'name': 'physics.mechanics'}, {'name': 'GSoC'}]",2021-06-28 05:49:53+00:00,2021-07-20 08:36:15+00:00,1910782.0,"22 days, 2:46:22","[{'comment_id': 660359593, 'comment_body': 'x_P(t)', 'comment_created': datetime.datetime(2021, 6, 29, 7, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660389868, 'comment_body': ""Looking only at the orientation for this example with the child rotation axis as `rC = A.x + A.y` I have this figure:\r\n![image](https://user-images.githubusercontent.com/276007/123761961-99c4d200-d8c2-11eb-891a-b77459fd6833.png)\r\n\r\n`uC = cross(As.x, N.x).normalize()`\r\n\r\nMy code to generation the orientation and angular velocity expressions is:\r\n\r\n```\r\nIn [1]: import sympy as sm\r\n\r\nIn [2]: import sympy.physics.mechanics as me\r\n\r\nIn [3]: N = me.ReferenceFrame('N')\r\n\r\nIn [4]: A = me.ReferenceFrame('A')\r\n\r\nIn [5]: As = me.ReferenceFrame('As')\r\n\r\nIn [6]: rC = A.x + A.y\r\n\r\nIn [7]: As.orient_axis(N, -N.z, sm.pi/4)  # note the negative N.z here\r\n\r\nIn [8]: theta = me.dynamicsymbols('theta')\r\n\r\nIn [9]: A.orient_axis(As, N.x, theta)\r\n\r\nIn [11]: sm.simplify(A.dcm(N))\r\nOut[11]: \r\nMatrix([\r\n[sqrt(2)/2, -sqrt(2)*cos(theta(t))/2, -sqrt(2)*sin(theta(t))/2],\r\n[sqrt(2)/2,  sqrt(2)*cos(theta(t))/2,  sqrt(2)*sin(theta(t))/2],\r\n[        0,           -sin(theta(t)),            cos(theta(t))]])\r\n\r\nIn [13]: A.ang_vel_in(N).express(N)\r\nOut[13]: Derivative(theta(t), t)*N.x\r\n\r\nIn [14]: A.ang_vel_in(N).express(A).simplify()\r\nOut[14]: sqrt(2)*Derivative(theta(t), t)/2*A.x + sqrt(2)*Derivative(theta(t), t)/2*A.y\r\n\r\nIn [16]: A.x.express(N).simplify()\r\nOut[16]: sqrt(2)/2*N.x - sqrt(2)*cos(theta(t))/2*N.y - sqrt(2)*sin(theta(t))/2*N.z\r\n\r\nIn [16]: A.x.express(N).simplify()\r\nOut[16]: sqrt(2)/2*N.x - sqrt(2)*cos(theta(t))/2*N.y - sqrt(2)*sin(theta(t))/2*N.z\r\n\r\nIn [17]: A.z.express(N).simplify()\r\nOut[17]: - sin(theta(t))*N.y + cos(theta(t))*N.z\r\n\r\nIn [18]: A.y.express(N).simplify()\r\nOut[18]: sqrt(2)/2*N.x + sqrt(2)*cos(theta(t))/2*N.y + sqrt(2)*sin(theta(t))/2*N.\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 6, 29, 8, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660391647, 'comment_body': 'I get `(omega*A.x + omega*A.y)*sqrt(2)/2` in my example above.', 'comment_created': datetime.datetime(2021, 6, 29, 8, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660391880, 'comment_body': '```\r\nIn [14]: A.ang_vel_in(N).express(A).simplify()\r\nOut[14]: sqrt(2)*Derivative(theta(t), t)/2*A.x + sqrt(2)*Derivative(theta(t), t)/2*A.y\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 8, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660392739, 'comment_body': 'This direction cosine matrix matches mine above.', 'comment_created': datetime.datetime(2021, 6, 29, 8, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660393934, 'comment_body': 'Sorry, put this in the wrong PR.', 'comment_created': datetime.datetime(2021, 6, 29, 8, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 660396180, 'comment_body': ""Yes it's same as mine, I just simplified the output, they are same. This way it was easier to write"", 'comment_created': datetime.datetime(2021, 6, 29, 8, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660396478, 'comment_body': 'Yes all other cases would match , I guess', 'comment_created': datetime.datetime(2021, 6, 29, 8, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 660396814, 'comment_body': ""@moorepants Btw it's sliding joint PR"", 'comment_created': datetime.datetime(2021, 6, 29, 8, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663743085, 'comment_body': 'Maybe we should simplify call this `PrismaticJoint`, as the word ""sliding"" is pretty ambiguous. The planar joint is also ""sliding"".', 'comment_created': datetime.datetime(2021, 7, 5, 8, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663744133, 'comment_body': 'The PinJoint is also probably better named ""RevoluteJoint"".\r\n\r\nhttps://en.wikipedia.org/wiki/Prismatic_joint\r\n\r\nhttps://en.wikipedia.org/wiki/Revolute_joint', 'comment_created': datetime.datetime(2021, 7, 5, 8, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663749114, 'comment_body': ""Okay, I'll change the name."", 'comment_created': datetime.datetime(2021, 7, 5, 8, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663753911, 'comment_body': '@moorepants `PinJoint` seems nice, shall I change it too?', 'comment_created': datetime.datetime(2021, 7, 5, 8, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663759804, 'comment_body': 'Either way is fine for pin joint. Pin is shorter.\r\n\r\nPrismatic could be ""SliderJoint"" to maybe match the accepted terminology better. I\'m also fine with either too. It\'s not too big a deal.', 'comment_created': datetime.datetime(2021, 7, 5, 8, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663761391, 'comment_body': 'Similar to pin joint you could also add a basic chained slider example. There is this one in PyDy: https://github.com/pydy/pydy/blob/master/pydy/models.py#L16, just multiple masses attached together by springs.', 'comment_created': datetime.datetime(2021, 7, 5, 9, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663761873, 'comment_body': 'I updated the wording for all these parameters and attributes in the pin joint pr. Make them consistent here.', 'comment_created': datetime.datetime(2021, 7, 5, 9, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663762614, 'comment_body': ""I think this will need to be the same as PinJoint's implementation, no? Maybe this method belongs in `Joint`."", 'comment_created': datetime.datetime(2021, 7, 5, 9, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663762804, 'comment_body': 'This should set the angular velocity between the frames to 0.', 'comment_created': datetime.datetime(2021, 7, 5, 9, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663776255, 'comment_body': ""I already have `linear mass spring damper` example in docstrings, isn't one enough in docstring? Others can go into examples module?"", 'comment_created': datetime.datetime(2021, 7, 5, 9, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663782572, 'comment_body': ""I don't see it here. Where is it?\r\n\r\nIn PinJoint we have two examples in the docstring: 1) shows the simplest pin joint and it's class features, 2) super simple multibody system kinematics (simple double pendulum). If we follow that pattern it makes sense to have a 3 body slider here."", 'comment_created': datetime.datetime(2021, 7, 5, 9, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663782833, 'comment_body': '`PinJoint` seems fine to me, I have changed `SlidingJoint` to `PrismaticJoint`', 'comment_created': datetime.datetime(2021, 7, 5, 9, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663791466, 'comment_body': ""```suggestion\r\n    assert S.name == 'S'\r\n```"", 'comment_created': datetime.datetime(2021, 7, 5, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663792989, 'comment_body': 'Check if expressed in C.frame is correct.', 'comment_created': datetime.datetime(2021, 7, 5, 9, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663793104, 'comment_body': 'Make sure this is zero in both frames.', 'comment_created': datetime.datetime(2021, 7, 5, 9, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663794121, 'comment_body': 'Should this have `l` and `m` in it?', 'comment_created': datetime.datetime(2021, 7, 5, 9, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663796454, 'comment_body': 'This should be `m*C.y - x*P.z + l*P.x`. Right?', 'comment_created': datetime.datetime(2021, 7, 5, 9, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663798377, 'comment_body': 'For all angular velocity and velocity assertions check in both frames to see if they are correct.', 'comment_created': datetime.datetime(2021, 7, 5, 9, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663809841, 'comment_body': ""For future joint implementations you need to post a figure for these examples. Right now, I'm having to draw a figure and determine the solutions myself to check these results. If you post a figure I can look at it and the results and check what you've done without having to work out the whole problem myself."", 'comment_created': datetime.datetime(2021, 7, 5, 10, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663822714, 'comment_body': 'All the cases here are same as of `PinJoint`.', 'comment_created': datetime.datetime(2021, 7, 5, 10, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663823985, 'comment_body': ""Why isn't m and l in the position vector from mass center to mass center?"", 'comment_created': datetime.datetime(2021, 7, 5, 10, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663861434, 'comment_body': ""> Why isn't m and l in the position vector from mass center to mass center?\r\n\r\nBecause `parent_joint_pos` is defined in `P.frame.x` and `child_joint_pos` is defined in `C.frame.y` but the `parent_axis` is `P.frame.z`. The algined axes are `P.z` and `C.x` , that's why `m` and 'l' are not in `pos_vector`.\r\n\r\nIf I do something like-\r\n```\r\n>>> S = PrismaticJoint('S', P, C, parent_joint_pos= l * P.frame.z, child_joint_pos= m * C.frame.x, parent_axis = P.frame.z)\r\n>>> P.masscenter.pos_from(C.masscenter)\r\n(-l - x_S(t))*P_frame.z + m*C_frame.x\r\n```\r\n\r\nThis way we have `l` and `m` in `pos_vector` because in `PrismaticJoint` the `velocity` and `pos_vector` are always about `parent_axis`.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 5, 11, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663863916, 'comment_body': 'I have added it to tests.', 'comment_created': datetime.datetime(2021, 7, 5, 11, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663883722, 'comment_body': 'Please check the examples now.', 'comment_created': datetime.datetime(2021, 7, 5, 12, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 663917110, 'comment_body': ""I took these lines:\r\n\r\n```python\r\nl, m = symbols('l m')\r\nS = PrismaticJoint('S', P, C, parent_joint_pos= l * P.frame.x, child_joint_pos= m * C.frame.y, parent_axis = P.frame.z)\r\n```\r\n\r\nand I drew this figure:\r\n\r\n![image](https://user-images.githubusercontent.com/276007/124475704-4ced6980-dda2-11eb-8cae-cc807adc54b1.png)\r\n\r\nThe position vector (red r) from the mass center of the child to the parent is:\r\n\r\n`m*C.y -x*C.x - l*P.x`\r\n\r\nfrom what I can tell.\r\n\r\nPlease show me your figure and your vector calculation."", 'comment_created': datetime.datetime(2021, 7, 5, 13, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663918070, 'comment_body': ""C.y doesn't have to be -P.x (because this choice is arbitrary), but regardless of the direction m, l, and x should all be present."", 'comment_created': datetime.datetime(2021, 7, 5, 13, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 664029917, 'comment_body': ""Yes, you are right, I got the problem , it is not in implementation but in writing tests , I'll fix it first thing tomorrow morning."", 'comment_created': datetime.datetime(2021, 7, 5, 16, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 664242449, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2021, 7, 6, 5, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 664297355, 'comment_body': '```suggestion\r\n==============\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 7, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 666720110, 'comment_body': '@moorepants My figure for this case\r\n\r\n![vector](https://user-images.githubusercontent.com/45732670/125037336-a232bf00-e0b1-11eb-84e8-58201a56bc30.jpg)\r\n\r\nThe angle between the axes is theta(constant angle), so the child frame is rotated at an angle theta, wrt parent_frame where rotation_axis=cross(parent_axis, parent_frame.x)', 'comment_created': datetime.datetime(2021, 7, 9, 7, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 666960152, 'comment_body': 'Future joints will require a list. I think we should return lists of the symbols for consistency with the future joints.', 'comment_created': datetime.datetime(2021, 7, 9, 13, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 666960733, 'comment_body': '```suggestion\r\n    body along the body fixed parent axis. The location of the joint is defined\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 13, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 666961098, 'comment_body': '```suggestion\r\n    by two points in each body which coincides when the generalized coordinate is zero. The direction cosine matrix between\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 13, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 666962362, 'comment_body': '```suggestion\r\n    coordinates: list of dynamicsymbol, optional\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 13, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 666962472, 'comment_body': '```suggestion\r\n    speeds : list of dynamicsymbol, optional\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 13, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 666964058, 'comment_body': 'There is no spring and damper in this example because there are no forces. This is the kinematics of two masses that can slide on the x axis.', 'comment_created': datetime.datetime(2021, 7, 9, 13, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 666964857, 'comment_body': 'Create three bodies that are chained, just like the pin joint double pendulum example. Two bodies is no different than the prior example.', 'comment_created': datetime.datetime(2021, 7, 9, 13, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667042455, 'comment_body': 'Why would this return -pi? The function should return an angle that satisfies: 0 <= angle <= pi', 'comment_created': datetime.datetime(2021, 7, 9, 15, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667092075, 'comment_body': ""The parent axis is `N.x` (default) and the child axis is `A.x + A.y - A.z`. Shouldn't `A.x + A.y - A.z == N.x`?"", 'comment_created': datetime.datetime(2021, 7, 9, 17, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667094053, 'comment_body': 'Actually, this is correct.', 'comment_created': datetime.datetime(2021, 7, 9, 17, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667094459, 'comment_body': 'The figure I was asking for is one that shows the position vectors (as I did in the figure I shared above).', 'comment_created': datetime.datetime(2021, 7, 9, 17, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667292030, 'comment_body': 'Because it was considering the above case to  `-(A.x.angle_between(N.x))`', 'comment_created': datetime.datetime(2021, 7, 10, 5, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667292139, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2021, 7, 10, 5, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667292363, 'comment_body': '`PinJoint` and `PrismaticJoint` takes `speeds` and `coordinates` as dynamicsymbols because only one argument is required, but returns them as list.', 'comment_created': datetime.datetime(2021, 7, 10, 5, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667294253, 'comment_body': 'I have updated the docstring example.', 'comment_created': datetime.datetime(2021, 7, 10, 5, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667294271, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 10, 5, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667299559, 'comment_body': ""This is a fix for this test, but isn't a fix for the method. `angle_between()` doesn't behave as expected. In general with sympy objects you'd expect `-x.something()` to operate on `-x` not `x`. Is this an issue because `.x` is an attribute of `A`?\r\n\r\nAn issue should be opened about `angle_between()` not respecting the leading negative sign. And, for now, `angle_between()` needs an example like this in its doc string, otherwise users will be caught by this unexpected issue."", 'comment_created': datetime.datetime(2021, 7, 10, 6, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667299609, 'comment_body': 'Please see me comment in the new code.', 'comment_created': datetime.datetime(2021, 7, 10, 6, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667300054, 'comment_body': 'Understood. This is the input parameter list. I thought it was the attribute list.', 'comment_created': datetime.datetime(2021, 7, 10, 6, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667300785, 'comment_body': ""You can't create a pendulum with a sliding joint. You can create this https://github.com/pydy/pydy/blob/master/pydy/models.py#L16 (but with out springs and dampers in between the masses). This example should be two masses sliding, one moving relative to a fixed body and the other relative to the moving body."", 'comment_created': datetime.datetime(2021, 7, 10, 6, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667300988, 'comment_body': 'This is supposed to be:\r\n\r\n```\r\nv_J1(t)*C_frame.x + v_J2(t)*P1_frame.x\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 10, 6, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667301073, 'comment_body': ""I'll change that."", 'comment_created': datetime.datetime(2021, 7, 10, 6, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667301197, 'comment_body': 'Bur derivative (x) = v', 'comment_created': datetime.datetime(2021, 7, 10, 6, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667301394, 'comment_body': ""Yes, but the joint's should ensure that the generalized speeds are used. We shouldn't see `Derivatie(coordinate, t)` in any of the kinematics."", 'comment_created': datetime.datetime(2021, 7, 10, 6, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667301452, 'comment_body': 'Also, it says `Derivative(x_J1(t), t)` J1 is not correct either.', 'comment_created': datetime.datetime(2021, 7, 10, 6, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667304984, 'comment_body': 'I think this problem is not limited to `angle_between()`, all member functions of class `Vector` are ignoring the leading negative signs. ', 'comment_created': datetime.datetime(2021, 7, 10, 7, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667308731, 'comment_body': ""> Also, it says `Derivative(x_J1(t), t)` J1 is not correct either.\r\n\r\nYes , I named joint 2 'J1' by mistake."", 'comment_created': datetime.datetime(2021, 7, 10, 8, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667308962, 'comment_body': ""> Yes, but the joint's should ensure that the generalized speeds are used. We shouldn't see `Derivatie(coordinate, t)` in any of the kinematics.\r\n\r\nI agree, but how can we do that, part2 velocity is defined in part1's frame, we want it's velocity in C's frame.\r\nThe current velocity function returns the `velovity of part1 in C + derivative(pos_vector between part1 and part2)`. So how can we change this behaviour?"", 'comment_created': datetime.datetime(2021, 7, 10, 8, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667317672, 'comment_body': 'PR #21730 might solve this issue.', 'comment_created': datetime.datetime(2021, 7, 10, 9, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667323602, 'comment_body': ""Maybe this only incidentally works:\r\n\r\n```\r\nIn [1]: import sympy.physics.mechanics as me\r\n\r\nIn [3]: A = me.ReferenceFrame('A')\r\n\r\nIn [4]: -A.x.cross(A.y)\r\nOut[4]: - A.z\r\n\r\nIn [5]: A.x.cross(A.y)\r\nOut[5]: A.z\r\n```"", 'comment_created': datetime.datetime(2021, 7, 10, 10, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667323804, 'comment_body': 'If there is no way to make this work correctly without the parentheses, then we need to make a clear ""gotcha"" statement in the documentation of `angle_between()`, because it will give the incorrect values. We also need to make sure the use of `angle_between()` in `Joint` can\'t be caught by this issue in an edge case.', 'comment_created': datetime.datetime(2021, 7, 10, 10, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667324114, 'comment_body': 'All joints should be setting the correctly velocities, not computing them.', 'comment_created': datetime.datetime(2021, 7, 10, 10, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667324247, 'comment_body': ""For example, if you are doing a `pos_vec.diff(t)` in your joint code, that's not the way to do it. The joint is defined and we know what the velocity is, so just use `.set_vel()` to set the correct velocities."", 'comment_created': datetime.datetime(2021, 7, 10, 10, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667325593, 'comment_body': ""We set velocity for parent frame, but we can't for parent body' parent body.  So we have to compute it for that."", 'comment_created': datetime.datetime(2021, 7, 10, 11, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667325793, 'comment_body': 'Yes I made sure, `angle_between` in `Joint` would always be correct.', 'comment_created': datetime.datetime(2021, 7, 10, 11, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 670137207, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2021, 7, 15, 5, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 671642338, 'comment_body': '![slider](https://user-images.githubusercontent.com/45732670/126030872-6a744e35-b0b2-4713-946e-59b5032cf2e9.jpg)\r\n\r\n@moorepants I hope I got it right this time.', 'comment_created': datetime.datetime(2021, 7, 17, 8, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 672865133, 'comment_body': 'The magnitudes of these two vectors should be `v`.', 'comment_created': datetime.datetime(2021, 7, 20, 7, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672867649, 'comment_body': '```suggestion\r\n    assert (A.x+A.y-A.z).express(N) == - 5/3*N.x - 1/3*N.y + 1/3*N.z\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 7, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672869767, 'comment_body': 'Does this example imply that:\r\n\r\n```\r\nN.x = A.y\r\nN.y = A.z\r\nN.z = A.x\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 7, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '85c14df5b3a064b439baef87b4b3e26f185b0756', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0421fcfda3ac5912eb7d6c671db482ede0320832', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '722f7036daa39982b481c32e0c986f14a19e9596', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148f8a7ab51b2d562cfecff80d5795a4b563b622', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '279324284b7a0a2bb2b166b3081096546ea182f3', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee5cf6ba53c020b6a2dd90e287447701d776af4d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3fb6ab248032301603176a5f8868805dce833e1', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd0d67a6707344ea8164c46e7b5631c9f120e003', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369617c7058a7a5ae8156c61c3d69c5693a8f3a2', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47140398de3fc303dd2ab33d758c89c90bcfc6d9', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56a8ee34e1943720b8944af1d1d512f672fb26b5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324c063a1891df69ad8fcf7ac7c834c6674b92d0', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '113805fe4767634595eb065b46e80ca7183c3d32', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc7b5c00484d6d0c0ef67b1a1f711ab35473bcc', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2324401beab8de4eedb1e94f001ac19370b3e9b2', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c453c84c3aa891bc1780c9ac78726afef6bb04', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19537f69df9c05939f56d397b60592e309cffa47', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '721bd9957a40ca42dc300a6f7fd0afbdb86635a5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf26d879af8299cc09c35cec4c4a2b044de82079', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5230453f7c6815ed31b67dfb344a4f7698e48280', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325c6a80e371a250d07c15b4db6ce5302648f82a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f5df49d9e5e4eace8cecb0849288afb93169942', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '467d9c6ad252dba1dfdb738065a16b3a2a707045', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c04475dfadbbb48178394c178aac06a0d1cc1d0', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d13dda832668b99be24cddf11cb6139342fa0cf', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93b0ccb249f59c80bf8d2e78a5bd4ae815cc6fe5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d96ad7cddba5ed7cb52e4665cfe112590ddb065', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb2a7326ab7261375863eb761e01888e4483b508', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd083605ee9e47b6e01d643a14c51b3a4a9ac5cab', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27b37e5bbf0f2cb7829dc5e579fb139d82f05801', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa765c6af462aa3d11f64c11886d09b4a77d4f7b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ef051be82c9650975f001072c2eeb3c86bafa7a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cb074b3155769f041080e401d72ff9e82a88f0a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '891025b828a9a22347ab12b0f4a2b50f5536362f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f67d1393521bbc1e2fb9382bce93821add67432', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f3f61227a3a0bd5dcd14239d6761174564dc72', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7f616f06a12f34754e96647d39795d8c6f37f9c', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e272899ea70f28b0858bed271dc500ad620aad', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0592110b63cf673fcd517c0cf1e99270daddd32', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a523f7bd224b0bd88fdf687eaba6e7490a7ec37', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0793e81492a80ee6a284a65f004104c01a262145', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e1904127a78d355f89e77d96e6dd4b140b2531', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3598a9584e7f13c90dfe991477f7bb2f1a4b05af', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc011d84af9949004eafc8e250715158193ed16', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3daf851c4461f254a9fa54805b16ca90c238e91d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd827bfa41c13a7518554a589d4f4147ed9319895', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2e64441688331cd3d8d5b70d686dbd220517842', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
680563643,Add new features to class `Body`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
    * Add `masscenter_vel()` to class `Body` to calculate velocity of one body's masscenter wrt other body's frame. 
    * Add `ang_vel_in()` to class `Body` to calculate angular velocity of one body's frame wrt other body's frame. 
    * Add `dcm()` to class Body to calculate dcm of one body's frame wrt other body's frame.
<!-- END RELEASE NOTES -->
",True,21689,https://api.github.com/repos/sympy/sympy/pulls/21689,https://github.com/sympy/sympy/pull/21689,closed,125,1,2,7,3,25,1,0,[{'name': 'physics.mechanics'}],2021-06-30 06:14:06+00:00,2021-07-01 11:52:28+00:00,106702.0,"1 day, 5:38:22","[{'comment_id': 661173650, 'comment_body': ""The mass center does not move wrt to its body's frame, so you always need another body or frame here. I think you should accept a Body or a ReferenceFrame. Also a body can have an infinite number of points, so there are an infinite number of velocities. This should probably be named `masscenter_vel()` to be explicit about that."", 'comment_created': datetime.datetime(2021, 6, 30, 6, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661173851, 'comment_body': 'This should also take a body or frame.', 'comment_created': datetime.datetime(2021, 6, 30, 6, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661174272, 'comment_body': 'Also a body or a frame.', 'comment_created': datetime.datetime(2021, 6, 30, 6, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661175318, 'comment_body': ""I'm trying to think whether we will every store other points on in a Body object other than the mass center. If we wouldn't then sticking with `vel()` as the name is ok. I'll think a bit about it."", 'comment_created': datetime.datetime(2021, 6, 30, 6, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661177659, 'comment_body': 'I think it should be body only, because in `Joints` we would always be having 2 bodies.', 'comment_created': datetime.datetime(2021, 6, 30, 6, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 661199964, 'comment_body': 'I think users (including me) will be more fluid about the use of frames and bodies. Both will be present in different scripts and there is not reason not to accept frames in all these methods. If it accepts both, then it simplifies setting up problems. A frame and a body are quite synonymous. In fact, in my course I teach that. Please make these methods accept frames or bodies.', 'comment_created': datetime.datetime(2021, 6, 30, 7, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661255737, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 30, 8, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 661256882, 'comment_body': ""> I'm trying to think whether we will every store other points on in a Body object other than the mass center. If we wouldn't then sticking with `vel()` as the name is ok. I'll think a bit about it.\r\n\r\nCurrent implementation stores masscenter only."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 661277730, 'comment_body': ""I know that. But I'm trying to imagine the future. A body has an infinite number of points and some of those are important for any giving multi-body model. The first that comes to mind is locations that forces are applied on the body. But that only makes sense if we store forces in bodies."", 'comment_created': datetime.datetime(2021, 6, 30, 9, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661280101, 'comment_body': '`Body.loads` does store point, force tuple.', 'comment_created': datetime.datetime(2021, 6, 30, 9, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 661292561, 'comment_body': ""Ah, so there is already a `.loads` attribute. That's interesting. More thought needs to go into this, especially since forces/torques have to ensure equal and opposite behavior."", 'comment_created': datetime.datetime(2021, 6, 30, 9, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661450224, 'comment_body': 'Returns the velocity of the mass center with respect to the provided rigid body or reference frame.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661451206, 'comment_body': 'The rigid body or reference frame to calculate the velocity in.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661451870, 'comment_body': '```suggestion\r\n        body: Body or ReferenceFrame\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661452012, 'comment_body': 'See https://numpydoc.readthedocs.io/en/latest/format.html#parameters', 'comment_created': datetime.datetime(2021, 6, 30, 13, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661452213, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661453536, 'comment_body': ""Returns this body's angular velocity with respect to the provided rigid body or reference frame.\r\n"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661453651, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661454160, 'comment_body': '```suggestion\r\n            The rigid body or reference frame to calculate the angular velocity in.\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661454279, 'comment_body': '```suggestion\r\n        body: Body or ReferenceFrame\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661454939, 'comment_body': 'Returns the direction cosine matrix of this body relative to the provided rigid body or reference frame.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661455129, 'comment_body': 'Adjust same as above.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661958731, 'comment_body': '@moorepants Yes, I think it would make applying forces and torques a bit easier.\r\n\r\n```\r\nclass Forces:\r\n    pass\r\n\r\nF = Force(Body1, Body2)\r\n```\r\n\r\nForces acting on Body1 can be +ve, and equal and opposite on Body 2, and can append the `.loads` and `.torque` of respective bodies. There is just one things that is tough is , to apply force on point other than masscenter, as we may need to take multiple parameters in `Force` for each body something like-\r\n`F = Forces(Body1, Body1_point=None, Body2, Body2_point=None)` \r\nwhere `Body_point` is the point on each body on which force is applied, which is masscenter by default.\r\n\r\nNow problem 2 is gravity, as it should be wrt Newtonian frame, so shal we do something like-\r\n`F = Forces(body1, body1_point=None, body2, body2_point=None, gravity=Frame/Body/None)`\r\nIf gravity is None then gravity is not applied, else a frame/Body should be supplied in which gravity is applied. ', 'comment_created': datetime.datetime(2021, 7, 1, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 662220524, 'comment_body': ""I don't think we need to special case a constant gravitational field. You'd simple do `Force(Body1, Body1, g*Body1.x)` where Body1 is the newtonian frame. You have to do it for all bodies, but we can think of ways to ease things if you have lots of bodies to apply it to.\r\n\r\nWe should open a new issue or discussion for this topic, to try to work out the design."", 'comment_created': datetime.datetime(2021, 7, 1, 11, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 662220787, 'comment_body': 'Once again, have some example problems that show how the api will be used on a real problem is essential.', 'comment_created': datetime.datetime(2021, 7, 1, 11, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '7a09f8250d1dde1f9078251468da21115761b623', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '562d30b43f98bf27941ce791dd9e9c8d24e510c7', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ef530bf5cbbb3e00bf4e2c5a9588a25933b8af', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b33e82d2b6429f601e5cd56cea40577567704fc', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e54c582cf0e893bc312b75dae69b875424918a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd175683f6b743d311915d263f690cd4f71840f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '900b11840760da6ddb7aaeab77683cd8a3ec311e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
682970154,Add basis vector to body,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
    * Add basis vectors to `Body`.
<!-- END RELEASE NOTES -->
",True,21700,https://api.github.com/repos/sympy/sympy/pulls/21700,https://github.com/sympy/sympy/pull/21700,closed,22,0,2,2,2,3,1,0,[{'name': 'physics.mechanics'}],2021-07-03 05:24:30+00:00,2021-07-05 07:24:40+00:00,180010.0,"2 days, 2:00:10","[{'comment_id': 663329135, 'comment_body': '```suggestion\r\n        return self.frame.x\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 7, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663329269, 'comment_body': 'No reason not to do this, and it would ensure it always returns the correct value.', 'comment_created': datetime.datetime(2021, 7, 3, 7, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 663329317, 'comment_body': 'I have declared `self._x` to `self.frame.x` in line 139', 'comment_created': datetime.datetime(2021, 7, 3, 7, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}]","[{'commit_sha': '55ff0c2f1fa701f262350b10b98eea8bc60a48ca', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ab893c9dab18f2a3faf4ea64460d62127c04cd', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
684226944,Implement Forces and Torques,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Automate applying forces and torques

#### Other comments

Ping @moorepants @Sc0rpi0n101 
#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
    * Update `apply_force` function of class `Body` to apply force on one body, or equal and opposite forces on two bodies.
    * Update `apply_torque` function of class `Body` to apply torque on one body, or equal and opposite torques on two bodies.
    * `Body.loads` is now an immutable attribute.
    * Add `clear_loads` function to class `Body` to clear Body's load list.
    * Add `remove_load` function to `Body` to remove a load from Body's load list.
<!-- END RELEASE NOTES -->
",True,21712,https://api.github.com/repos/sympy/sympy/pulls/21712,https://github.com/sympy/sympy/pull/21712,closed,342,50,2,28,13,37,1,0,[{'name': 'physics.mechanics'}],2021-07-06 09:53:11+00:00,2021-07-20 09:16:53+00:00,1207422.0,"13 days, 23:23:42","[{'comment_id': 664459450, 'comment_body': 'Functions names should follow PEP8 recommendations for capitalization and ideally be a verb not a noun.', 'comment_created': datetime.datetime(2021, 7, 6, 11, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 664484263, 'comment_body': 'Corrected!', 'comment_created': datetime.datetime(2021, 7, 6, 11, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667303829, 'comment_body': 'I think that having `loads` as a mutable list is a good thing in this case. Users may want to remove loads from the list and manipulating the list is the easiest way to do so.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667303868, 'comment_body': ""In other words, a user should be able to add and remove loads manually and not need the new functions you've made. Those functions are really just convenience functions."", 'comment_created': datetime.datetime(2021, 7, 10, 7, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667304046, 'comment_body': ""This isn't how we handle forces/torques in KanesMethod or LagrangesMethod. I think we shouldn't combine forces automatically. The user can do that if needed themselves."", 'comment_created': datetime.datetime(2021, 7, 10, 7, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667304380, 'comment_body': ""If `.load` is mutable, this method is not necessary. A rule of thumb to remember, if the implementation of the method is only 1 line, you likely don't need the method. (that often goes for 2 or even 3 lines too)"", 'comment_created': datetime.datetime(2021, 7, 10, 7, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667304504, 'comment_body': 'This seems potentially useful. If you have many loads acting on the same point you can just say ""remove all forces from this point"". Maybe this shoudl be `remove_loads_from(point|frame)`.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667304902, 'comment_body': '```suggestion\r\ndef test_apply_loads_on_multi_degree_freedom_holonomic_system():\r\n    """"""Example based on: https://pydy.readthedocs.io/en/latest/examples/multidof-holonomic.html""""""\r\n```', 'comment_created': datetime.datetime(2021, 7, 10, 7, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667305106, 'comment_body': ""What is the purpose of having and `apply_force()` method on `Body` and a function called `apply_force`? Why can't, for example, the method do everything the function can?"", 'comment_created': datetime.datetime(2021, 7, 10, 7, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667305221, 'comment_body': 'Missing loads on the wall.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667305600, 'comment_body': 'This should be equal and opposite between B and P.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667305887, 'comment_body': 'I think we should keep it immutable else user may be able to append that list. But if it is immutable only way to append is by using functions, which would ensure that force is vector, point is a Point and all.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667306030, 'comment_body': ""I think we should add forces/torques because, like in `test_apply_loads_on_multi_degree_freedom_holonomic_system()` example, the force on 1 Body, is sum of dampner, spring and gravity on all same point. If we don't add them then `loads` would store tuples of same point with different forces."", 'comment_created': datetime.datetime(2021, 7, 10, 7, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667306039, 'comment_body': 'I think it should be immutable.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667306095, 'comment_body': 'This function would only be useful if `.loads` is immutable.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667306216, 'comment_body': 'I was thinking `apply_force()` could be used to apply equal and opposite forces with added functionality of single forces, whereas `Body.apply_force` could be used to add single forces. Combining them might make it a bit complicated as it was in orient().', 'comment_created': datetime.datetime(2021, 7, 10, 7, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667306264, 'comment_body': 'I think `kT*q3*W.z` is equal and opposite. `T*W.z` is only on P.', 'comment_created': datetime.datetime(2021, 7, 10, 7, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667322498, 'comment_body': 'It is between B and P. With no assumption of a newtonian frame, all forces/torques should be account for. Also this is a unit test, it is helpful to show that the general cases work, not just special cases.', 'comment_created': datetime.datetime(2021, 7, 10, 10, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667323245, 'comment_body': ""The function `apply_force()` already has a certain level of complexity and you have an identical method on Body that doesn't do the same thing. I'm not seeing why we need the function if we have the method? Here are scenarios:\r\n\r\n1. User has to manually handle equal and opposite forces and `.apply_force()` only accepts a single force.\r\n\r\n```python\r\nA = Body('A')\r\nB = Body('B')\r\nA.apply_force(F*A.x)\r\nB.apply_force(-F*A.x)\r\n```\r\n\r\n2. Equal and opposite can be handled automatically by `.apply_force()` by `.apply_force()` accepting a body.\r\n\r\n```python\r\nA = Body('A')\r\nB = Body('B')\r\nA.apply_force(F*A.x, reaction_body=B)\r\n```\r\n\r\n3. Equal and opposite can be handled automatically by `apply_force()` (function).\r\n\r\n```python\r\nA = Body('A')\r\nB = Body('B')\r\napply_force(F*A.x, body1=A, body2=B)\r\n```\r\n\r\n2. seems the most straight forward with no redundancy to me and less typing, at least from this minimal example. 3. has redundant methods and functions. It isn't clear why having two ways to add the equal & opposite force gives benefit.\r\n\r\nIf there are example problems that show why the function is better, show a demonstration."", 'comment_created': datetime.datetime(2021, 7, 10, 10, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667324701, 'comment_body': ""Why is it bad for someone to append to that list? It isn't like something has to be calculated in Body when that list is modified. It is just a simple storage container."", 'comment_created': datetime.datetime(2021, 7, 10, 10, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667325047, 'comment_body': ""In joint, you'd have to recompute the joint's position and velocities if coordinate or speed was changed, thus we make it immutable to force the user to choose the coordinate and speed only on initialization. But the user may not know what all the loads are on initialization, then add them slowly in the problem construction. So `.load` has to be mutable. There is no reason to make the mutable `.load` a property unless you do something in it's setter method. That is, mutable attributes only need to be properties if there is a setter method. Body does nothing with `.load` so it should be a simply mutable attribute."", 'comment_created': datetime.datetime(2021, 7, 10, 11, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667325350, 'comment_body': ""If you sum the forces, then it makes it harder to separate the forces if you need to work with the force list later. There is no reason to sum the forces here. It adds no advantage, only a disadvantage.\r\n\r\n> If we don't add them then loads would store tuples of same point with different forces.\r\n\r\nYes, that's what we've done for 10+ years and exactly what KanesMethod and LagrangesMethod expect."", 'comment_created': datetime.datetime(2021, 7, 10, 11, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667325401, 'comment_body': 'I explained above. ', 'comment_created': datetime.datetime(2021, 7, 10, 11, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667325495, 'comment_body': ""That's not true. This function can only work if `.load` is assumed mutable. You can't remove something from something that is immutable."", 'comment_created': datetime.datetime(2021, 7, 10, 11, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667325909, 'comment_body': 'And, to be honest, point 1. is pretty clean and simple. It just requires the user to do the correct thing (garbage in, gargage out philosophy).', 'comment_created': datetime.datetime(2021, 7, 10, 11, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667326604, 'comment_body': ""Yes, I told you about way 2 in meeting, but you asked me to proceed with 3.\n\nI will change it to 2 , I also prefer 2.\n\nBut there is one other way also, i.e , we can use Body's attribute for single forces and `apply_force` function for equal and opposite forces.\n\nSo way 2 or this way that I explained?"", 'comment_created': datetime.datetime(2021, 7, 10, 11, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667326770, 'comment_body': ""If we define `self._loads = [ ]` , and make `loads` a property as I have done in this PR, user can't alter loads of bodies directly but we can. "", 'comment_created': datetime.datetime(2021, 7, 10, 11, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667326877, 'comment_body': ""But if we have `JointsMethod`, and then load changes on Body then it may affect result because loads are Body's attributes."", 'comment_created': datetime.datetime(2021, 7, 10, 11, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667327030, 'comment_body': ""In holonomic problem I did, multiple forces are applied and summed together before passing, that's why I added and by this way we can have all forces applied on one point together and by remove_load we can remove the entire load from one point."", 'comment_created': datetime.datetime(2021, 7, 10, 11, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 667337771, 'comment_body': ""I recall you suggesting a function not a method in the meeting, but maybe I misunderstood. It seemed reasonable then, but we hadn't seen the examples of its use. Regardless, I don't know what the best option is until we've explored the possibilities. This is the purpose of trying to come up with examples for use and writing them down. We can then examine the proposed API design in the context of the examples.\r\n\r\nThe process is to:\r\n\r\n1. Think of all possible examples (including edge cases) that we want the API to be used for. These examples should be derived from existing problems we've created over the years as well as looking at other similar tools and how they approach the problems.\r\n2. Propose an API design.\r\n3. Show the API design used in the examples in a PR.\r\n4. Discuss and debate whether the API design is good or needs improvement.\r\n5. Modify the API to make it better.\r\n6. Repeat starting at 1. if you think of new examples that you didn't originally think of.\r\n\r\nSteps 1 to 6 are repeated until everyone involved in the design is happy with the result.\r\n\r\nYour job is to do this process and I will help with point 1. by pointing you to examples and providing my past experience and in 4. by discussing your proposal.\r\n\r\nFor this particular API idea, I'm not yet sure point 1. is fully fleshed out and if it is, then the API is too complex, thus my suggestions."", 'comment_created': datetime.datetime(2021, 7, 10, 13, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 667342635, 'comment_body': 'We will discuss it further in upcoming meet.', 'comment_created': datetime.datetime(2021, 7, 10, 13, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 672891952, 'comment_body': '```suggestion\r\n    def apply_force(self, force, point=None, reaction_body=None, reaction_point=None):\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 7, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672896529, 'comment_body': 'Add spring force acting on two different points other than mass center.', 'comment_created': datetime.datetime(2021, 7, 20, 8, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672897199, 'comment_body': '```suggestion\r\n    def apply_torque(self, torque, reaction_body=None):\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 8, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672897934, 'comment_body': '```suggestion\r\n        >>> B1.apply_torque(T, reaction_body=B2)\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 8, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672898674, 'comment_body': '```suggestion\r\n        We can check the loads (torques) applied to bodies now.\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 8, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672899165, 'comment_body': '```suggestion\r\n        about : Point or ReferenceFrame, optional\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '84268f9277517a9257147b87b43fe700a3a67adb', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f2b3c108d16719628c259575db8014f0e9615ea', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2099057494c1fb3254fd19ce19a0f5b5cb35c6', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e27237f9ac1ac1b8253b4ec90bb5328387a6c1e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d6402a0594e91e6d9c907eac42fc00275292d7b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '906d4390a9a9240d13beb02983c1d2f237081a88', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1b33c14778f7bc668e0decd56fbdba25dcb238', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ad1161f9038eb1036e568ee7e8a288c1141464', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9915bd9b6377c75dee14fb2000535d4d293398a8', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073f22b20eef47be33cfbd4b595c75344a0a9569', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6810618581afb17d5eda527a40bb406681caa9ca', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1169cc40b331175654dbdaa5a742f63f0434da1f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7ae57233fb862380fee3026b63c7f6c178afd2f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d83a7a0841acc677bbd44b01ad6a7de6e5bd57', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '901d177b14102a3c67379da205a30153df14e72a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655225f4a0862c92d9f97a56c39a78e20ddeb8e0', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b81a082f2fc1db3d5103268adc5b49113b506b23', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0035e386ef66ec97018c3d9e59a8469638300ad0', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dff13fb7228c3dac8f447f44efa34d31213d0f18', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b953d3714df8512e0db02c9eecdcda5c130be5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a18006875f475329d98ffceb1f169686c991549', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76da5171d17db19fc2f88c6dc894905236ff653b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10bdbec17f33770acc3f9c83a0853a896138a0d9', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '606d0c6858c9003c2b241d6cf4f300e1899cdd3b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '339fc191197329d251b5a0fba9a69e79f58e193a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9abec07c4a49759d379ac6953963c3f87102f2a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '772ca81d082a1fe5a6168fe8b8fd0fb05629e6c4', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766a2d6483543451827c796f9061d17c109114fb', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
687157195,Check if velocity is defined in frame before taking derivative of pos,"
<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Earlier when velocity was not defined in a frame but pos vector was given, the velocity was calculated(#20049) . But now if we have a point defined with velocity in that frame, then we first check if current point's velocity is available in given frame or not.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.vector
    * `Point.vel()` checks velocity in intermediate frames before taking derivative of position vector. 
<!-- END RELEASE NOTES -->
",True,21730,https://api.github.com/repos/sympy/sympy/pulls/21730,https://github.com/sympy/sympy/pull/21730,closed,20,1,2,1,5,1,1,0,[{'name': 'physics.mechanics'}],2021-07-10 09:40:44+00:00,2021-07-13 07:12:58+00:00,250334.0,"2 days, 21:32:14","[{'comment_id': 849789574, 'comment_body': 'As @TJStienstra points out, this test is incorrect. `A_v_P1` is set to `10*A.x` but A = N, so `N_v_P1` also should be `10*A.x`. For some reason the code adds the velocity from `N_v_P`, which makes no sense.', 'comment_created': datetime.datetime(2022, 4, 13, 18, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '4c969e4ded0ab76a1a22fa3c93bc8f22af854e22', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
696462167,Add new abstract base class for methods,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Partially deals with #21772 

#### Brief description of what is fixed or changed
Added a new class `_Methods` which would serve as an abstract base class for all method(KanesMethod, JointsMethod etc)

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
    * `KanesMethod`  can now take body list and force list in object instantiation.
    * `KanesMethod.kanes_equations` both parameters are optional and can be taken automaticaly if they are passed at object instantiation. 
    * `.bodies` attribute is added to `KanesMethod` which is advised to use instead of `.bodylist` attribute.
<!-- END RELEASE NOTES -->
",True,21778,https://api.github.com/repos/sympy/sympy/pulls/21778,https://github.com/sympy/sympy/pull/21778,closed,78,7,5,12,9,11,1,0,[{'name': 'physics.mechanics'}],2021-07-25 08:15:33+00:00,2021-07-28 06:53:29+00:00,254276.0,"2 days, 22:37:56","[{'comment_id': 677339431, 'comment_body': 'Docstring about these new `__init__` kwargs is needed.', 'comment_created': datetime.datetime(2021, 7, 27, 10, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677340179, 'comment_body': 'This needs a unit test for these cases.', 'comment_created': datetime.datetime(2021, 7, 27, 10, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677340359, 'comment_body': 'Unit test for this is needed.', 'comment_created': datetime.datetime(2021, 7, 27, 10, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677341093, 'comment_body': ""Both cases should still work, so don't remove the test, only add a new one."", 'comment_created': datetime.datetime(2021, 7, 27, 10, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677341327, 'comment_body': 'Not sure what the purpose of this is.', 'comment_created': datetime.datetime(2021, 7, 27, 10, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677955484, 'comment_body': 'To make sure `_Method` class is working as desired.', 'comment_created': datetime.datetime(2021, 7, 28, 4, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677955522, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 7, 28, 4, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677961719, 'comment_body': ""@moorepants  I don't think all other `__init__`  kwargs are documented."", 'comment_created': datetime.datetime(2021, 7, 28, 4, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678012897, 'comment_body': ""That's unfortunate!"", 'comment_created': datetime.datetime(2021, 7, 28, 6, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678015051, 'comment_body': 'So ""as desired"" means that if someone tries to use the class by itself a type error should be raised?', 'comment_created': datetime.datetime(2021, 7, 28, 6, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678015568, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2021, 7, 28, 6, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}]","[{'commit_sha': '5320aac78fd188241a30948d281ee7817cfd65ac', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9225b28acf761c6967ff50e9c3ea343b33dc101', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5190055d7b979b6f931a465c5c3a934d9630ebc3', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '349746fbe722c604e13da545f1d443a059379383', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f616af540eb34a377f6b166ecfdc78ca5e44da', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '104783f08fc13c9bc4ae2bf7077405e3b045d5de', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50e8c97b1cb6273df1a049f5f429ccdc4e8227a9', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9271f7c3d14b3bcb0c09d1b03e12c7e5fc22cd7b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89cfdbd3a98ba468a36fc99bf81b21071607a26b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129394b892b16638c43baf61d806fd8b43981538', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2c78720627359edd5913747da869e67d2e78a9', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92af164829e9195ae1e2902b1ae3e04b4e7fcdb8', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
692366252,[GSoC]JointsMethod,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Fixes #9835 

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.mechanics
    * `JointsMethod` is implemented to formulate equations of motion using Body and Joint objects. 
    * Add `.loads` and `bodies` property to `KanesMethod` and `LagrangesMethod`.
    * `is_rigidbody` property is added to class `Body`.
<!-- END RELEASE NOTES -->
",True,21759,https://api.github.com/repos/sympy/sympy/pulls/21759,https://github.com/sympy/sympy/pull/21759,closed,589,8,12,91,25,140,1,0,[{'name': 'physics.mechanics'}],2021-07-19 07:58:16+00:00,2021-08-11 17:23:15+00:00,2021099.0,"23 days, 9:24:59","[{'comment_id': 672904939, 'comment_body': '```suggestion\r\n    """"""Method for formulating the equations of motion using a set of interconnected bodies with joints.\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 8, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672907150, 'comment_body': '```suggestion\r\n    *joints : Joint\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 8, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672911008, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 7, 20, 8, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672917018, 'comment_body': '```suggestion\r\n    def form_equations(self):\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 8, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672971481, 'comment_body': 'A note should be added to explain that `JointsMethod` currently only works with systems that do not have any configuration or motion constraints.', 'comment_created': datetime.datetime(2021, 7, 20, 9, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672972233, 'comment_body': '```suggestion\r\n    >>> rhs = MM.LUSolve(forcing)\r\n```\r\n\r\nUsing a linear system solver is what we should be teaching in the docs.', 'comment_created': datetime.datetime(2021, 7, 20, 9, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672973388, 'comment_body': ""This should not return (fr, fstar) as that is specific to Kane's method. You could return `Fr + Frstar` as that is generic."", 'comment_created': datetime.datetime(2021, 7, 20, 9, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672973816, 'comment_body': 'If you use the `full` versions here the user can see that the dynamic and kinematic equations are correct.', 'comment_created': datetime.datetime(2021, 7, 20, 9, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672974269, 'comment_body': ""But if a user select's method to be `kane` wouldn't he expect the ouput to be of same form as of KanesMethod."", 'comment_created': datetime.datetime(2021, 7, 20, 9, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 672974856, 'comment_body': ""It gives error.\r\n```\r\nAttributeError: 'MutableDenseMatrix' object has no attribute 'LUSolve'\r\n```"", 'comment_created': datetime.datetime(2021, 7, 20, 9, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 672975059, 'comment_body': 'You mean show all kinematics also?', 'comment_created': datetime.datetime(2021, 7, 20, 9, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 672975153, 'comment_body': ""Why not pass in `KanesMethod` instead of a string? Then you don't have to add new strings for new methods. Eventually we can get the `*Methods` consistent so things work with duck typing."", 'comment_created': datetime.datetime(2021, 7, 20, 9, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672976223, 'comment_body': 'Since implementation of methods is different , strings seem better to me.', 'comment_created': datetime.datetime(2021, 7, 20, 9, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 672986131, 'comment_body': 'Use `mass_matrix_full` and `forcing_full` here.', 'comment_created': datetime.datetime(2021, 7, 20, 10, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 672987176, 'comment_body': 'The ideal future is that the `*Methods` implementations have a common set of attributes and methods. For the two existing methods, there is only a little bit of work to make those adjustments now (at least for unconstrained systems).', 'comment_created': datetime.datetime(2021, 7, 20, 10, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 673020574, 'comment_body': 'Write examples and tests first before implementation code!', 'comment_created': datetime.datetime(2021, 7, 20, 10, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 673685836, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2021, 7, 21, 6, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 673857052, 'comment_body': '```suggestion\r\nThe system will be modeled using ``JointsMethod``. First we need to create the ``dynamicsymbols``\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 10, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 673857443, 'comment_body': 'This math needs to be created using proper latex.', 'comment_created': datetime.datetime(2021, 7, 21, 10, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 673857959, 'comment_body': ""You should show the `mass_matrix` and `forcing` matrices (simplified if it doesn't take too much compute time."", 'comment_created': datetime.datetime(2021, 7, 21, 10, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 673858256, 'comment_body': 'fr and frstar are not relevant to JointMethod.', 'comment_created': datetime.datetime(2021, 7, 21, 10, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 673858399, 'comment_body': 'This example needs a figure.', 'comment_created': datetime.datetime(2021, 7, 21, 10, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 673859464, 'comment_body': 'This would need unit tests for the new attributes, as well as documentation and examples.\r\n\r\nWhy is this needed?', 'comment_created': datetime.datetime(2021, 7, 21, 10, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 674501808, 'comment_body': ""Because `Body` inherits both `RigidBody` and `Particle` so Kane's method couldn't differentiate if `Body` is `RigidBody` and `Particle`. "", 'comment_created': datetime.datetime(2021, 7, 22, 5, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 674504574, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 22, 5, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 674507742, 'comment_body': 'I have added tests.', 'comment_created': datetime.datetime(2021, 7, 22, 5, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 674508260, 'comment_body': 'The same figure used in actual example in pydy?', 'comment_created': datetime.datetime(2021, 7, 22, 5, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 674522493, 'comment_body': 'Check the documentation for matrices then.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 674522731, 'comment_body': 'It could be, but a nice SVG figure for SymPy is the ideal solution.', 'comment_created': datetime.datetime(2021, 7, 22, 6, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 674524029, 'comment_body': ""KanesMethod is not designed to work with Body. Either you pass the correct objects to KanesMethod or you modify KanesMethod to work with new objects. This seems like a hack not an actual fix. Duck typing with a try/except is all you'd need or even an isinstance check. Adding these attributes is superfluous."", 'comment_created': datetime.datetime(2021, 7, 22, 6, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 675361694, 'comment_body': 'Added the same image as in  pydy', 'comment_created': datetime.datetime(2021, 7, 23, 7, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 675378869, 'comment_body': 'Always use lusolve.', 'comment_created': datetime.datetime(2021, 7, 23, 8, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 675462461, 'comment_body': 'Okay!', 'comment_created': datetime.datetime(2021, 7, 23, 10, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677192216, 'comment_body': 'Make full doc string, also should take ReferenceFrame or Body.', 'comment_created': datetime.datetime(2021, 7, 27, 7, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677196748, 'comment_body': 'This does nothing in this problem.', 'comment_created': datetime.datetime(2021, 7, 27, 7, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677197125, 'comment_body': '```suggestion\r\n    assert method.bodies == [C, P]\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 7, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677198802, 'comment_body': 'Check mm and fo directly, no need to do the solve or simplify, as that just slows the tests down.', 'comment_created': datetime.datetime(2021, 7, 27, 7, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677201660, 'comment_body': ""Also don't need to solve for rhs()."", 'comment_created': datetime.datetime(2021, 7, 27, 7, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677204116, 'comment_body': '```suggestion\r\n            self.method = method(L, self.q, self.forcelist, self.bodylist, self.frame)\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 7, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677211427, 'comment_body': '```python\r\nif issubclass(method, LagrangesMethod):\r\n    # do special thing for lagrange\r\nelse:\r\n    method(...)\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 7, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677216801, 'comment_body': 'Add Lagrange example too.', 'comment_created': datetime.datetime(2021, 7, 27, 8, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 677232488, 'comment_body': ""It's accessible property, it is to be used this way."", 'comment_created': datetime.datetime(2021, 7, 27, 8, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677250631, 'comment_body': ""But it's a nice check that all bodies are being considered in forcelist"", 'comment_created': datetime.datetime(2021, 7, 27, 8, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677254328, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 27, 8, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677272645, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 27, 9, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677287207, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2021, 7, 27, 9, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 677293057, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 27, 9, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678212930, 'comment_body': 'These variables should be proper latex, e.g. ```:math:`q_2` ```.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678220703, 'comment_body': 'Done!\r\n\r\n![Screenshot (52)](https://user-images.githubusercontent.com/45732670/127316397-35d77c77-eef5-4069-be3f-dd6b4abcabb9.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 11, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678226027, 'comment_body': 'Always do explicit imports in documentation. `from x import y, z, w`', 'comment_created': datetime.datetime(2021, 7, 28, 11, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678226702, 'comment_body': ""All the examples were made like this only. I'll correct it anyway."", 'comment_created': datetime.datetime(2021, 7, 28, 11, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678227062, 'comment_body': ""I don't think this should return fr and frstar. If it returns anything it should return `fr + frstar`."", 'comment_created': datetime.datetime(2021, 7, 28, 11, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678227492, 'comment_body': 'why the space?', 'comment_created': datetime.datetime(2021, 7, 28, 11, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678228616, 'comment_body': ""Can't a simple method (or even property) be:\r\n\r\n```\r\ndef is_rigidbody(self):\r\n    if self.inertia is not None:\r\n        return True\r\n    else:\r\n        return False\r\n```\r\n\r\n?"", 'comment_created': datetime.datetime(2021, 7, 28, 11, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678229921, 'comment_body': 'Because `PinJoint`, `PrismaticJoint` are imported from different file than `JointsMethod`.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678230246, 'comment_body': 'This is only true for a 2D planar motion.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678230765, 'comment_body': 'See equation (4) here: https://ocw.mit.edu/courses/aeronautics-and-astronautics/16-07-dynamics-fall-2009/lecture-notes/MIT16_07F09_Lec27.pdf', 'comment_created': datetime.datetime(2021, 7, 28, 11, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678231163, 'comment_body': 'should take ReferenceFrame or Body', 'comment_created': datetime.datetime(2021, 7, 28, 11, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678231590, 'comment_body': '```suggestion\r\n    def __init__(self, newtonian, *joints):\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 11, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678231650, 'comment_body': ""1. Changes should be consisted in `RigidBody`, `Body` and `Particle`.\r\n2. In that line we have already differentiated that `Body` is rigidbody or body, so I think we don't need extra property or anything for that."", 'comment_created': datetime.datetime(2021, 7, 28, 11, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678231714, 'comment_body': 'or newtonian_body', 'comment_created': datetime.datetime(2021, 7, 28, 11, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678232249, 'comment_body': 'But I think user would expect the same result as given by `KanesMethod`.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678233485, 'comment_body': 'So what should it be?', 'comment_created': datetime.datetime(2021, 7, 28, 11, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678233529, 'comment_body': ""The explanation for this docstring needs to explain more carefully what these matrices and vectors are. Something like:\r\n\r\n```\r\nM*u' = F\r\nwhere u are the generalized speeds\r\n\r\nM_full*x' = F_full\r\n\r\nwhere x = [u , q]^T where q are the generalized coordinates\r\n```"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 0, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678233863, 'comment_body': '```suggestion\r\n    q, u : Matrix, shape(n, 1)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678234201, 'comment_body': '```suggestion\r\n    mass_matrix : Matrix, shape(n, n)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678234360, 'comment_body': '```suggestion\r\n    forcing : Matrix, shape(n, 1)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678234499, 'comment_body': '```suggestion\r\n    mass_matrix_full : Matrix, shape(2*n, 2*n)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678234603, 'comment_body': '```suggestion\r\n    forcing_full : Matrix, shape(2*n, 1)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678235527, 'comment_body': 'missing optional method kwarg', 'comment_created': datetime.datetime(2021, 7, 28, 12, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678235970, 'comment_body': ""```suggestion\r\n    >>> x, v = dynamicsymbols('x, v')\r\n```"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678236128, 'comment_body': 'More common to use x and v for position and velocity in this example.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678236259, 'comment_body': ""It is not passed in init, it's being shown in `form_eoms()` docstring."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678236372, 'comment_body': ""```suggestion\r\n    >>> wall = Body('W')\r\n```\r\n\r\nmore descriptive for the reader"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678236600, 'comment_body': ""```suggestion\r\n    >>> body = Body('B')\r\n```"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678237323, 'comment_body': ""Wouldn't be adding `#Wall` as comment better?"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678237371, 'comment_body': '```suggestion\r\n    >>> M = method.mass_matrix_full\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678237474, 'comment_body': '```suggestion\r\n    >>> F = method.forcing_full\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678237909, 'comment_body': 'use `method.rhs()` because this is documentation for JointsMethod not LUsolve', 'comment_created': datetime.datetime(2021, 7, 28, 12, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678239013, 'comment_body': 'My suggestion is to make the property detect if it is a particle or rigidbody, then the answer is guaranteed to be correct.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678239146, 'comment_body': 'Equation (4)', 'comment_created': datetime.datetime(2021, 7, 28, 12, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678239301, 'comment_body': 'As we discussed yesterday in meeting, example with `rhs` would be added in `form_eoms()`. So that user knows both methods . Also `Kanes.rhs()` uses forcing and mass_matrix instead of forcing_full, mass_matrix_full.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678239516, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2021, 7, 28, 12, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678239845, 'comment_body': 'The equations are also here. The `&` is the dot product.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678240458, 'comment_body': ""I try to use informative variable names so you don't need comments. The code can then speak for itself."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678242272, 'comment_body': ""Here's a short note on the topic: https://wiki.c2.com/?GoodVariableNames you can google more recommendations about this."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678242701, 'comment_body': '```suggestion\r\n        return self._bodies\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678243269, 'comment_body': 'Now that I think about it, forcelist is a bad name. We should be making these names `bodies` and `loads` consistently across the `Methods` classes.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678244595, 'comment_body': 'All these properties should be documented with docstrings (rather than manually in the class docstring). They sphinx\'s autdoc will pick them up.\r\n\r\n```python\r\n@property\r\ndef q(self):\r\n    """"""List of the generalized coordinates.""""""\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678245870, 'comment_body': 'Does this work if there are no loads? (which is a possible case)', 'comment_created': datetime.datetime(2021, 7, 28, 12, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678246538, 'comment_body': 'Needs a `Returns` section if it returns something.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678247130, 'comment_body': ""In `Body.__init__` we are detecting if it is a particle or rigidbody so I don't think we need a separate property for that. "", 'comment_created': datetime.datetime(2021, 7, 28, 12, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678247300, 'comment_body': ""make this consistent with the other example `wall = Body('W')` (or whatever you use above)"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678247382, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2021, 7, 28, 12, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678247493, 'comment_body': '```suggestion\r\n        >>> P.potential_energy = k * q**2 / S(2)\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 12, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678249138, 'comment_body': ""This isn't setup for future methods.\r\n\r\n```python\r\nif issubclass(method, LagrangesMethod):\r\n    do special thing for lagrange\r\nelse:\r\n   do normal thing for KanesMethod and any other future methods\r\n```"", 'comment_created': datetime.datetime(2021, 7, 28, 12, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678249647, 'comment_body': ""We should return the same result, if anything. Always return `M*u' + F` or `M*q'' + F`."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678250199, 'comment_body': ""This is a poor description of this method. It needs to explaing the math, which I've written in an above comment. It solves for the derivatives of the generalized speeds."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678250705, 'comment_body': 'Needs a Returns section. Also Explanation. Follow the docstring style guidelines.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678251604, 'comment_body': 'Why is KanesMethod modified here? KanesMethod only accepts RigidBody objects, not Body objects. You should preprocess in JointsMethod and provide KanesMethod what it asks for rather than having a hack like this.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678251895, 'comment_body': ""Don't add this."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678251957, 'comment_body': 'Remove.', 'comment_created': datetime.datetime(2021, 7, 28, 12, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678253134, 'comment_body': ""I'm suggesting removing the check in `__init__` and putting the check in the property (or method)."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678253765, 'comment_body': ""Make sure there is a unit test for that, if there isn't."", 'comment_created': datetime.datetime(2021, 7, 28, 12, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678253937, 'comment_body': 'lower case wall and part', 'comment_created': datetime.datetime(2021, 7, 28, 12, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 678805873, 'comment_body': ""We can't process `Body` to `RigidBody` or `Particle`, and since `is_particle` and `is_rigidbody` are required in `Body` so I think this is most optimal solution."", 'comment_created': datetime.datetime(2021, 7, 29, 4, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678806376, 'comment_body': '`_bodylist` is an internal private variable, no effect to user', 'comment_created': datetime.datetime(2021, 7, 29, 4, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678811590, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2021, 7, 29, 4, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678815621, 'comment_body': 'Now in Kanes it returns fr+fr*', 'comment_created': datetime.datetime(2021, 7, 29, 4, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678815896, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 29, 4, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678830729, 'comment_body': 'Added `Returns` section as well as `See Also` section.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678830951, 'comment_body': 'The math should be in the method that is being used, so added `See Also` pointing towards methods.rhs()', 'comment_created': datetime.datetime(2021, 7, 29, 5, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678830996, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 29, 5, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678831060, 'comment_body': 'Added', 'comment_created': datetime.datetime(2021, 7, 29, 5, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678836692, 'comment_body': '@moorepants Equation (6) is the simplified form of equation (4) and is being used in docstring.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 678838507, 'comment_body': 'The current way seems better because we need to instantiate `Particle` or `RigidBody` and that is to be done in `__init__`.', 'comment_created': datetime.datetime(2021, 7, 29, 5, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 680314144, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2021, 7, 31, 5, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 680314168, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 31, 5, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 680314197, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 7, 31, 5, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 681694186, 'comment_body': 'Would be nice if inertia accepted a Body, I suppose.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681705278, 'comment_body': 'q1 should be present in these equations of motion. Here is an example result: https://github.com/pydy/pydy/blob/master/examples/double_pendulum/double_pendulum.ipynb', 'comment_created': datetime.datetime(2021, 8, 3, 12, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681705689, 'comment_body': 'Check the equations of motion against the known solution for a simple double pendulum: https://en.wikipedia.org/wiki/Double_pendulum', 'comment_created': datetime.datetime(2021, 8, 3, 12, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681708399, 'comment_body': 'Please add the chaos pendulum as a 3d system test: https://github.com/pydy/pydy/tree/master/examples/chaos_pendulum', 'comment_created': datetime.datetime(2021, 8, 3, 12, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681709227, 'comment_body': '```suggestion\r\n                  child_axis=PartP.z)\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 12, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681709358, 'comment_body': 'Change all to use the Body attributes if possible.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681712758, 'comment_body': 'Check to make sure coordinates and speeds of every joint are unique from each other or raise an error.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681714501, 'comment_body': 'Make sure these eoms are the exact same as my result in the pydy example.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681720668, 'comment_body': ""Here is the output from the pydy example:\r\n\r\n```\r\nPython 3.7.10 | packaged by conda-forge | (default, Feb 19 2021, 16:07:37) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.25.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: %paste\r\nfrom sympy import symbols\r\nfrom sympy.physics.mechanics import *\r\n\r\nq1, q2 = dynamicsymbols('q1 q2')\r\nq1d, q2d = dynamicsymbols('q1 q2', 1)\r\nu1, u2 = dynamicsymbols('u1 u2')\r\nu1d, u2d = dynamicsymbols('u1 u2', 1)\r\nl, m, g = symbols('l m g')\r\n\r\nN = ReferenceFrame('N')\r\nA = N.orientnew('A', 'Axis', [q1, N.z])\r\nB = N.orientnew('B', 'Axis', [q2, N.z])\r\n\r\nA.set_ang_vel(N, u1 * N.z)\r\nB.set_ang_vel(N, u2 * N.z)\r\n\r\nO = Point('O')\r\nP = O.locatenew('P', l * A.x)\r\nR = P.locatenew('R', l * B.x)\r\n\r\nO.set_vel(N, 0)\r\nP.v2pt_theory(O, N, A)\r\nR.v2pt_theory(P, N, B)\r\n\r\nParP = Particle('ParP', P, m)\r\nParR = Particle('ParR', R, m)\r\n\r\nkd = [q1d - u1, q2d - u2]\r\nFL = [(P, m * g * N.x), (R, m * g * N.x)]\r\nBL = [ParP, ParR]\r\n\r\n\r\nKM = KanesMethod(N, q_ind=[q1, q2], u_ind=[u1, u2], kd_eqs=kd)\r\n\r\n## -- End pasted text --\r\n\r\nIn [2]: fr, frstar = KM.kanes_equations(BL, FL)\r\n\r\nIn [3]: fr\r\nOut[3]: \r\nMatrix([\r\n[-2*g*l*m*sin(q1(t))],\r\n[  -g*l*m*sin(q2(t))]])\r\n\r\nIn [4]: frstar\r\nOut[4]: \r\nMatrix([\r\n[-l**2*m*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t)))*Derivative(u2(t), t) + l**2*m*(-sin(q1(t))*cos(q2(t)) + sin(q2(t))*cos(q1(t)))*u2(t)**2 - 2*l**2*m*Derivative(u1(t), t)],\r\n[   -l**2*m*(sin(q1(t))*sin(q2(t)) + cos(q1(t))*cos(q2(t)))*Derivative(u1(t), t) + l**2*m*(sin(q1(t))*cos(q2(t)) - sin(q2(t))*cos(q1(t)))*u1(t)**2 - l**2*m*Derivative(u2(t), t)]])\r\n\r\nIn [5]: frstar.simplify()\r\n\r\nIn [6]: frstar\r\nOut[6]: \r\nMatrix([\r\n[-l**2*m*(u2(t)**2*sin(q1(t) - q2(t)) + cos(q1(t) - q2(t))*Derivative(u2(t), t) + 2*Derivative(u1(t), t))],\r\n[   l**2*m*(u1(t)**2*sin(q1(t) - q2(t)) - cos(q1(t) - q2(t))*Derivative(u1(t), t) - Derivative(u2(t), t))]])\r\n\r\n```"", 'comment_created': datetime.datetime(2021, 8, 3, 12, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681721528, 'comment_body': 'This is formulated the same as the wikipedia article though.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681728606, 'comment_body': ""Here is the problem redone with coordinates defined relative to the prior joint:\r\n\r\n```\r\nPython 3.7.10 | packaged by conda-forge | (default, Feb 19 2021, 16:07:37) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.25.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import sympy as sm\r\n\r\nIn [2]: import sympy.physics.mechanics as me\r\n\r\nIn [3]: q1, q2, u1, u2 = me.dynamicsymbols('q1, q2, u1, u2')\r\n\r\nIn [4]: l, m, g = sm.symbols('l, m, g')\r\n\r\nIn [5]: N = me.ReferenceFrame('N')\r\n\r\nIn [6]: A = me.ReferenceFrame('A')\r\n\r\nIn [7]: B = me.ReferenceFrame('B')\r\n\r\nIn [8]: A.orient_axis(N, N.z, q1)\r\n\r\nIn [9]: B.orient_axis(A, A.z, q2)\r\n\r\nIn [10]: A.set_ang_vel(N, u1*N.z)\r\n\r\nIn [11]: B.set_ang_vel(A, u2*A.z)\r\n\r\nIn [12]: O = me.Point('O')\r\n\r\nIn [13]: P = O.locatenew('P', l*A.x)\r\n\r\nIn [14]: R = P.locatenew('R', l*B.x)\r\n\r\nIn [15]: O.set_vel(N, 0)\r\n\r\nIn [16]: P.v2pt_theory(O, N, A)\r\nOut[16]: l*u1(t)*A.y\r\n\r\nIn [17]: R.v2pt_theory(P, N, B)\r\nOut[17]: l*u1(t)*A.y + l*(u1(t) + u2(t))*B.y\r\n\r\nIn [18]: bob1 = Particle('B1', P, m)\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-18-731beaa5f967> in <module>\r\n----> 1 bob1 = Particle('B1', P, m)\r\n\r\nNameError: name 'Particle' is not defined\r\n\r\nIn [19]: bob1 = me.Particle('B1', P, m)\r\n\r\nIn [20]: bob2 = me.Particle('B2', R, m)\r\n\r\nIn [21]: kdes = [q1.diff() - u1, q2.diff() - u2]\r\n\r\nIn [22]: loads = ((P, m*g*N.x), (R, m*g*N.x))\r\n\r\nIn [23]: bodies = (bob1, bob2)\r\n\r\nIn [24]: kane = me.KanesMethod(N, q_ind=(q1, q2), u_ind=(u1, u2), kd_eqs=kdes)\r\n\r\nIn [25]: fr, frstar = kane.kanes_equations(bodies, loads)\r\n\r\nIn [26]: fr\r\nOut[26]: \r\nMatrix([\r\n[g*l*m*(-sin(q1(t))*cos(q2(t)) - sin(q2(t))*cos(q1(t))) - 2*g*l*m*sin(q1(t))],\r\n[                     g*l*m*(-sin(q1(t))*cos(q2(t)) - sin(q2(t))*cos(q1(t)))]])\r\n\r\nIn [27]: frstar\r\nOut[27]: \r\nMatrix([\r\n[l**2*m*(u1(t) + u2(t))**2*sin(q2(t)) - l**2*m*u1(t)**2*sin(q2(t)) - m*(l**2*cos(q2(t)) + l**2)*Derivative(u2(t), t) - (l**2*m + m*(2*l**2*cos(q2(t)) + 2*l**2))*Derivative(u1(t), t)],\r\n[                                                                         -l**2*m*u1(t)**2*sin(q2(t)) - l**2*m*Derivative(u2(t), t) - m*(l**2*cos(q2(t)) + l**2)*Derivative(u1(t), t)]])\r\n\r\nIn [28]: fr.simplify()\r\n\r\nIn [29]: fr\r\nOut[29]: \r\nMatrix([\r\n[-g*l*m*(sin(q1(t) + q2(t)) + 2*sin(q1(t)))],\r\n[                 -g*l*m*sin(q1(t) + q2(t))]])\r\n\r\nIn [30]: frstar.simplify()\r\n\r\nIn [31]: frstar\r\nOut[31]: \r\nMatrix([\r\n[l**2*m*((u1(t) + u2(t))**2*sin(q2(t)) - (cos(q2(t)) + 1)*Derivative(u2(t), t) - (2*cos(q2(t)) + 3)*Derivative(u1(t), t) - u1(t)**2*sin(q2(t)))],\r\n[                                 -l**2*m*(u1(t)**2*sin(q2(t)) + cos(q2(t))*Derivative(u1(t), t) + Derivative(u1(t), t) + Derivative(u2(t), t))]])\r\n\r\nIn [32]: M = kane.mass_matrix_full\r\n\r\nIn [33]: F = kane.forcing_full\r\n\r\nIn [34]: M.simplify()\r\n\r\nIn [35]: F.simplify()\r\n\r\nIn [36]: M\r\nOut[36]: \r\nMatrix([\r\n[1, 0,                         0,                       0],\r\n[0, 1,                         0,                       0],\r\n[0, 0, l**2*m*(2*cos(q2(t)) + 3), l**2*m*(cos(q2(t)) + 1)],\r\n[0, 0,   l**2*m*(cos(q2(t)) + 1),                  l**2*m]])\r\n\r\nIn [37]: F\r\nOut[37]: \r\nMatrix([\r\n[                                                                                            u1(t)],\r\n[                                                                                            u2(t)],\r\n[l*m*(-g*sin(q1(t) + q2(t)) - 2*g*sin(q1(t)) + 2*l*u1(t)*u2(t)*sin(q2(t)) + l*u2(t)**2*sin(q2(t)))],\r\n[                                              -l*m*(g*sin(q1(t) + q2(t)) + l*u1(t)**2*sin(q2(t)))]])\r\n```\r\n\r\nI think that is correct, but still double check against the wikipedia answer."", 'comment_created': datetime.datetime(2021, 8, 3, 12, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 681818849, 'comment_body': 'Fixed, I was just missing forces.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 682348259, 'comment_body': 'Checked', 'comment_created': datetime.datetime(2021, 8, 4, 7, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 682348455, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 4, 7, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 682348745, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2021, 8, 4, 7, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 683970345, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2021, 8, 6, 6, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 686929108, 'comment_body': '```suggestion\r\nNow we can apply loads (forces and torques) to the bodies, gravity acts on all bodies,\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 15, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 686933414, 'comment_body': 'To mimic the kane and lagrange files, maybe this code should be moved into `joints.py` so that `from sympy.physics.joints import JointsMethod, PinJoint, PrismaticJoint` works cleanly.', 'comment_created': datetime.datetime(2021, 8, 11, 15, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 686955518, 'comment_body': 'Add check for : `xd(3) = (-2 * p.IBxx * alpha * omega * sin(phi) * cos(phi) + 2 * ...\r\n    p.IByy * alpha * omega * sin(phi) * cos(phi) - p.g * p.lA * p.mA * ...\r\n    sin(theta) - p.g * p.lB * p.mB * sin(theta)) / (p.IAxx + p.IBxx * ...\r\n    sin(phi)^2 + p.IByy * cos(phi)^2 + p.lA^2 * p.mA + p.lB^2 * p.mB);`', 'comment_created': datetime.datetime(2021, 8, 11, 15, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 686955830, 'comment_body': 'Add comment pointing to: https://www.pydy.org/examples/chaos_pendulum.html', 'comment_created': datetime.datetime(2021, 8, 11, 15, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 686957470, 'comment_body': '```suggestion\r\n                  parent_joint_pos=-(lB-lA)*rod.z, parent_axis=rod.z, child_axis=plate.z)\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 15, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': 'd93ab829c7c5d5480b8984b894d187fcd41767ed', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70affd175d9e3cb2d8e5cac7870d3ab37dbae995', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bbb5c6a3b4226d7124db122f08ea8705019c62c', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd74b7a316dcd234d3eb5123dbcd9c7a3b2608fe', 'committer_username': 'sahilshekhawat', 'committer_name': 'Sahil Shekhawat', 'committer_email': 'sahilshekhawat01@gmail.com', 'commit_date': datetime.datetime(2013, 11, 8, 17, 30, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e3ed810584047c724257091fa3b33ef40dee6b4', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6894824a1ef97e8faeb43d56f4baa37f48fd3996', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bbcdf8939b5e00554d2ba9cb910ce8717438961', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a69e17474a32c55034d41d0ec604f34a1c635ab', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f502cafb68bf9e86e1f382f34bfee933e48276', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e3fc89240cbbc1b52c45250cf8cfc84a2b82b44', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6511d6e4ce83c83ee2224fcd62183a5176aa4f7', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db0d90cb245bd51e09cce97c71c2b19850e63761', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7a371e11b6878db817155bbd2046d2f630ed8f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74cec272caa6fb57031aaab589d3cf24c4c1d89e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11629963fa1434df063a948e709f8a5558e07aa6', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab7099c0e9048560cc79d2e4fe87313e5bf53a70', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e8ef2f249f43f18208d7ac19de895999d1fd502', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb4b95ca9524642d1c7d5ccb92de4bfb5239eb7', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '958cce523e0d415d2b1c4f2ddade1c6c623440bc', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '163cfdb225b253fdb346244edac5521ee8bf38b5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8823a5d4fe7c0c5eba9b91fa4c756a38a93d6051', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca88fb2bd8ffac753788abb5715f2bbead6a97ef', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '546b15c06e9dbd1af4ecba7732005a7b2489c349', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89ae37ca251f45a86f41514836357f04816dace0', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bd5fdcb28522c5447c366603a393c3981c0692', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f7bdd1595381f98c5c7bcde2f04485e872cb533', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6788994a288e4e9436940b14bf053b68da1abdc4', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f52bc047b93a16e4324fd90c4ed3e0dc0ea01772', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e9da06bef0421ccf8e7f25f6c93a7750d55d271', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35059c1ac996f1b6da28903bde0ebbf7a0f91e04', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a1fc2536eba0dcbe10bed3066a9b3f044c369a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afd3a38d8fa75673a801a0638bee02f8c0e38cb6', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd89106160111ff31ccb2ede4fa587c88b9684179', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2b5805525d749064186efb76c2225daae289203', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d6e83fa1c876ef4f8598be15a44e37f1349576', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65b8c522bbd58f979833848a2cf0294a2aa65898', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94af9bc47612197defc06f772cf17e4f13ed1ca', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a603ddab357542e3e1fe93873f3d46917a51370a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7c0b7f35fb1bb01fa0b4041a5f75af03d5068d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b74682963b02df7bd3703a54a60f9b8df878cf', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd576580fd598dd29d074044a585a8bb25e455bd', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ff4f7a33a0f874b7395a11b5d6151d0062b6b03', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d3d1e12da6822dd17991d096da991b87f044490', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e26f4a22ce8a04e14a16cb7bf8d2be08372aba5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '820b1bd0c3ef85466ebe6a0e1fe8eb4d4bfa9535', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80532fd40fc85c99fd6e0d4db4df72005ba1af48', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69a714d677fa8d5d30fdcf94c71633b45a0ab9d8', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6897ad78cadcddcd9a44c8404a01d1575718bdd4', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe23066c67f27a76db28e2e2c8285f6bf9edd642', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc2f08e86d36eea3b59f7b0e86d47e99ba52125', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd98f6ac053a5d9488f06c7c73261bd0328b541b0', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '042fc25d126799e726f509639f0a9961ed9bcebe', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f3c4c89e72dbce904d1203c7716b40ba569564', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc10b0637fee552f16017b3de3954c14c89caadc', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59830f0c824f9953ea3564d3a3b3ec9314e8d72d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc170a8507409c5ebd11ffe459c2231ca848c874', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca319e06f0f4f82fb01d180a6aa5610f1af81b72', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '506348cd2c8fc3d19036945fc122cd22de63eb5b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e06dc40fedc759365c4c96a5d0020ef9729b9260', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8cddbfd199a384389704f4a850268678bd9941e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3a1c24c74357dfc74a6e0b06c4d66a620a3dacc', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aca0684d1eff931904c1cc6cedbd55e342fba681', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85801da5d015dd29230e131b35e2d983933fd34a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97b3e2ab9f5db2c86796a465b59dace615577e6', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15600bd67d5b8664db22e9870e66c779269d0079', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03bb49c085e85ab9375cf79289691245bcd3806d', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a45381cada1314e3c57b33652912f4c97910c3f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c89a57a73f2ed3b2476450ebd504d3a17ee46f3', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c97b40115595bff98c75878e322a081509dc8ec', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2daeffebc940ac2257452dee57d7d768d7ab0fb5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071da867345d6a6fa59a1962897d13b26cb73544', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0fa9f09324c4149bab439e528440f7384cde64', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cb37d5102495361a1e30f14bfebda87fbf61aae', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e235b88e73af06aa440293eeeccbf598cc87aa05', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d2a0fcee5dadd7d99b1207fafe10323aa7f2b32', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '138ef4ba126ee4127b415978311f8a7b008d67ed', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a113876c1241b5d11816037e2324bb549b7ffd3', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '559dccd2a199da67a9393a5d754f43ebac623e3e', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f065e127b4dfd8834183a22ea3294dbffadf069f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d56ab4d6812230d4d436799ead271cdc008279', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0427c4b727764d9763dc5d26b8e8d51cc00a6c8a', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2848fa04de88c539f6430783f35f603af9f57e48', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a7b53f93ec58adf3aa7b1e92bb4dc3554796f0', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '839ece01719c6a73a801089da6fe5b4beaf2962b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b73d108bc3ee7d8af495f3becfdcdee1ec79c256', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f318cf4e072dec8435594b279f2bf64be3b1767', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4298fdedaad9822b4896ac4326d9c38b6b56f6a3', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf2b6d66429434d5671175eb9097cafb9f90c117', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53659bd5b9de95b5d4fde9312aa03b68ba53057b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecdcf1b2dfe7fafbdc6e0fe0d45562c30c1bc5b', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe3a6414ae1d3092330a0228661be53d1fb81bb4', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
667734467,Adds `angle_between` to physics.Vector,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Adds new functions to Vector class in physics module namely - angle_between() and `unit_normal_from()`.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.vector
    * Added a new function, `angle_between` to Vector class to calculate angle between two vectors.
<!-- END RELEASE NOTES -->
",True,21600,https://api.github.com/repos/sympy/sympy/pulls/21600,https://github.com/sympy/sympy/pull/21600,closed,44,1,2,4,2,5,0,0,[],2021-06-11 06:33:38+00:00,2021-06-11 08:54:32+00:00,8454.0,2:20:54,"[{'comment_id': 649729455, 'comment_body': 'the smallest angle between', 'comment_created': datetime.datetime(2021, 6, 11, 6, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649730225, 'comment_body': 'Add `Ax.angle_between(A.x + A.y + A.z)` to show 3D case works correctly.', 'comment_created': datetime.datetime(2021, 6, 11, 6, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649730440, 'comment_body': ""This should be at the top. You don't have to import if you use `Vector.dot()`."", 'comment_created': datetime.datetime(2021, 6, 11, 6, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649733857, 'comment_body': 'All imports at top unless there are circular dependency issues.', 'comment_created': datetime.datetime(2021, 6, 11, 6, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 649735537, 'comment_body': ""A unit vector normal to both\r\n\r\nMaybe this is a more informative name (i.e. just a modified cross product).\r\n\r\nvector_a.unit_cross(vector_b)\r\n\r\nbut this is so trivial. Current code is:\r\n\r\nvector_a.cross(vector_b).normalize()\r\n\r\nI don't think we really need a method for this, since the existing method is so simple. The angle_between is nice because you don't have to remember the formula, but this one seems unnecessary.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 11, 6, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '76afc91c70b99e4620b3022a28fe865b7d2a29e9', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2566fc8a18b930fa1de4f67f4a3383cc0edc51e3', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b754e0950369a6b297e82248d5176b7dbf5dfde6', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a077732d6c1061e8243350c67a181c287ddfecd2', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
678275824,Check order of arguments in `orient_axis()`,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #21659

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.vector
    * The `orient_axis()` works if the order of axis and angle is swapped.
<!-- END RELEASE NOTES -->
",True,21662,https://api.github.com/repos/sympy/sympy/pulls/21662,https://github.com/sympy/sympy/pull/21662,closed,13,2,2,5,15,2,2,0,"[{'name': 'GSoC'}, {'name': 'physics.vector'}]",2021-06-26 04:56:50+00:00,2021-06-30 08:13:55+00:00,357425.0,"4 days, 3:17:05","[{'comment_id': 661162208, 'comment_body': ""These two functions do not return anything, so the result here is `assert None == None`, right? I don't think this is what you are hoping for in this test."", 'comment_created': datetime.datetime(2021, 6, 30, 6, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 661184543, 'comment_body': 'I corrected that', 'comment_created': datetime.datetime(2021, 6, 30, 7, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}]","[{'commit_sha': '7c61a0bbbcf2a560d06f1c7ca314f1998a3d6be4', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c15f85e0834221bd795b1f693ce26caca284ed75', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb33e9e626eca9ca5cab34f779dc024506a4cef', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d11f64f6d255762339ed417260ecfe332c9c14', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5ba56020cc32e57404f5acd93b1dc3424a9e3c5', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
686497310,Unpin the symengine version,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
All comments from here https://github.com/sympy/sympy/pull/21710#issuecomment-875713566

#### Brief description of what is fixed or changed
Unoin the symengine version on Travis

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21725,https://api.github.com/repos/sympy/sympy/pulls/21725,https://github.com/sympy/sympy/pull/21725,closed,1,1,1,1,8,0,0,0,[],2021-07-09 05:12:19+00:00,2021-07-09 07:09:35+00:00,7036.0,1:57:16,[],"[{'commit_sha': 'd4c77af1e986a23e6345c90411913a20ec446505', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
687141294,Fix failing master branch,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#21725

#### Brief description of what is fixed or changed
Change the way `pi` was being used to pass the failing test case.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21728,https://api.github.com/repos/sympy/sympy/pulls/21728,https://github.com/sympy/sympy/pull/21728,closed,2,8,1,1,24,0,2,0,"[{'name': 'physics.mechanics'}, {'name': 'SymEngine'}]",2021-07-10 07:13:55+00:00,2021-07-13 07:19:21+00:00,259526.0,"3 days, 0:05:26",[],"[{'commit_sha': 'f0eb4bfb4a963a7948f1f1e724b0c4171a11674f', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8
690434723,Add `warnings` to magnitude and angle_between,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#21729 

#### Brief description of what is fixed or changed
Added a `warnings` section to `.magnitude()` and `.angle_between()` to inform user.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* physics.vector
    * `Vector.angle_between()` has a new section `Warnings`.
    * `Vector.magnitude()` has a new section `Warnings`.
<!-- END RELEASE NOTES -->
",True,21749,https://api.github.com/repos/sympy/sympy/pulls/21749,https://github.com/sympy/sympy/pull/21749,closed,19,1,1,1,2,3,0,0,[],2021-07-15 06:28:31+00:00,2021-07-15 07:36:52+00:00,4101.0,1:08:21,"[{'comment_id': 670187088, 'comment_body': 'I think the heading ""Warnings"" is supposed to explain actual warnings that are returned. Just make this ""Notes"".', 'comment_created': datetime.datetime(2021, 7, 15, 6, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 670187700, 'comment_body': 'The `Warns` section is for actual warnings, `Warnings` is the one for this.', 'comment_created': datetime.datetime(2021, 7, 15, 6, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sidhu1012', 'type': 'User'}, {'comment_id': 670192299, 'comment_body': ""I'm wrong about that:\r\n\r\nhttps://numpydoc.readthedocs.io/en/latest/format.html#warns"", 'comment_created': datetime.datetime(2021, 7, 15, 7, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}]","[{'commit_sha': '5f90ac17448a539b301d33142dafd7ffd890e876', 'committer_username': 'sidhu1012', 'committer_name': 'Sudeep Sidhu', 'committer_email': 'sudeepsidhu1012@gmail.com', 'commit_date': datetime.datetime(2018, 12, 9, 11, 57, 34, tzinfo=datetime.timezone.utc)}]",Sudeep Sidhu,45732670,sudeepsidhu1012@gmail.com,User,,46,,3,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4363,12694,293,1320,58674,5121,14,717,"[{'id': 705262306, 'number': 21832, 'closed': datetime.datetime(2021, 8, 6, 7, 31, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 7, 31, 22, tzinfo=datetime.timezone.utc), 'time_taken': 12.0, 'time_delta': '0:00:12', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 696462167, 'number': 21778, 'closed': datetime.datetime(2021, 7, 28, 6, 53, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 8, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 254276.0, 'time_delta': '2 days, 22:37:56', 'additions': 78, 'deletions': 7, 'state': 'closed'}, {'id': 692366252, 'number': 21759, 'closed': datetime.datetime(2021, 8, 11, 17, 23, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 7, 58, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2021099.0, 'time_delta': '23 days, 9:24:59', 'additions': 589, 'deletions': 8, 'state': 'closed'}, {'id': 690434723, 'number': 21749, 'closed': datetime.datetime(2021, 7, 15, 7, 36, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 6, 28, 31, tzinfo=datetime.timezone.utc), 'time_taken': 4101.0, 'time_delta': '1:08:21', 'additions': 19, 'deletions': 1, 'state': 'closed'}, {'id': 687157195, 'number': 21730, 'closed': datetime.datetime(2021, 7, 13, 7, 12, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 9, 40, 44, tzinfo=datetime.timezone.utc), 'time_taken': 250334.0, 'time_delta': '2 days, 21:32:14', 'additions': 20, 'deletions': 1, 'state': 'closed'}, {'id': 687141294, 'number': 21728, 'closed': datetime.datetime(2021, 7, 13, 7, 19, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 7, 13, 55, tzinfo=datetime.timezone.utc), 'time_taken': 259526.0, 'time_delta': '3 days, 0:05:26', 'additions': 2, 'deletions': 8, 'state': 'closed'}, {'id': 686497310, 'number': 21725, 'closed': datetime.datetime(2021, 7, 9, 7, 9, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 5, 12, 19, tzinfo=datetime.timezone.utc), 'time_taken': 7036.0, 'time_delta': '1:57:16', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 684226944, 'number': 21712, 'closed': datetime.datetime(2021, 7, 20, 9, 16, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 9, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1207422.0, 'time_delta': '13 days, 23:23:42', 'additions': 342, 'deletions': 50, 'state': 'closed'}, {'id': 682970154, 'number': 21700, 'closed': datetime.datetime(2021, 7, 5, 7, 24, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 5, 24, 30, tzinfo=datetime.timezone.utc), 'time_taken': 180010.0, 'time_delta': '2 days, 2:00:10', 'additions': 22, 'deletions': 0, 'state': 'closed'}, {'id': 680563643, 'number': 21689, 'closed': datetime.datetime(2021, 7, 1, 11, 52, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 6, 14, 6, tzinfo=datetime.timezone.utc), 'time_taken': 106702.0, 'time_delta': '1 day, 5:38:22', 'additions': 125, 'deletions': 1, 'state': 'closed'}, {'id': 678726755, 'number': 21674, 'closed': datetime.datetime(2021, 7, 20, 8, 36, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 5, 49, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1910782.0, 'time_delta': '22 days, 2:46:22', 'additions': 443, 'deletions': 88, 'state': 'closed'}, {'id': 678275824, 'number': 21662, 'closed': datetime.datetime(2021, 6, 30, 8, 13, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 4, 56, 50, tzinfo=datetime.timezone.utc), 'time_taken': 357425.0, 'time_delta': '4 days, 3:17:05', 'additions': 13, 'deletions': 2, 'state': 'closed'}, {'id': 674248469, 'number': 21644, 'closed': datetime.datetime(2021, 6, 28, 5, 47, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 6, 9, 1, tzinfo=datetime.timezone.utc), 'time_taken': 603493.0, 'time_delta': '6 days, 23:38:13', 'additions': 707, 'deletions': 0, 'state': 'closed'}, {'id': 667734467, 'number': 21600, 'closed': datetime.datetime(2021, 6, 11, 8, 54, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 6, 33, 38, tzinfo=datetime.timezone.utc), 'time_taken': 8454.0, 'time_delta': '2:20:54', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 659944662, 'number': 21564, 'closed': datetime.datetime(2021, 7, 5, 8, 31, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 10, 38, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2843557.0, 'time_delta': '32 days, 21:52:37', 'additions': 888, 'deletions': 0, 'state': 'closed'}, {'id': 659841076, 'number': 21562, 'closed': datetime.datetime(2021, 6, 2, 10, 35, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 2, 8, 7, 45, tzinfo=datetime.timezone.utc), 'time_taken': 8893.0, 'time_delta': '2:28:13', 'additions': 367, 'deletions': 0, 'state': 'closed'}, {'id': 657997900, 'number': 21551, 'closed': datetime.datetime(2021, 6, 30, 6, 9, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 31, 6, 13, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2591798.0, 'time_delta': '29 days, 23:56:38', 'additions': 14, 'deletions': 2, 'state': 'closed'}, {'id': 653451813, 'number': 21524, 'closed': datetime.datetime(2021, 7, 20, 9, 6, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 8, 59, 21, tzinfo=datetime.timezone.utc), 'time_taken': 4752408.0, 'time_delta': '55 days, 0:06:48', 'additions': 270, 'deletions': 0, 'state': 'closed'}, {'id': 631145913, 'number': 21436, 'closed': datetime.datetime(2021, 5, 25, 11, 31, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 6, 6, 38, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1659194.0, 'time_delta': '19 days, 4:53:14', 'additions': 80, 'deletions': 4, 'state': 'closed'}, {'id': 612215732, 'number': 21271, 'closed': datetime.datetime(2021, 4, 22, 13, 18, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 9, 7, 15, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1145022.0, 'time_delta': '13 days, 6:03:42', 'additions': 87, 'deletions': 18, 'state': 'closed'}, {'id': 597431802, 'number': 21137, 'closed': datetime.datetime(2022, 2, 17, 6, 23, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 21, 7, 5, 1, tzinfo=datetime.timezone.utc), 'time_taken': 28768716.0, 'time_delta': '332 days, 23:18:36', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 583717806, 'number': 21027, 'closed': datetime.datetime(2022, 2, 17, 6, 23, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 3, 7, 11, tzinfo=datetime.timezone.utc), 'time_taken': 30323557.0, 'time_delta': '350 days, 23:12:37', 'additions': 69, 'deletions': 60, 'state': 'closed'}, {'id': 573986292, 'number': 20966, 'closed': datetime.datetime(2021, 2, 27, 6, 54, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 16, 7, 20, 13, tzinfo=datetime.timezone.utc), 'time_taken': 948830.0, 'time_delta': '10 days, 23:33:50', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 562246425, 'number': 20864, 'closed': datetime.datetime(2021, 1, 27, 6, 56, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 27, 5, 44, 51, tzinfo=datetime.timezone.utc), 'time_taken': 4274.0, 'time_delta': '1:11:14', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 560380557, 'number': 20851, 'closed': datetime.datetime(2021, 2, 11, 5, 58, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 23, 8, 45, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1631564.0, 'time_delta': '18 days, 21:12:44', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 558066739, 'number': 20830, 'closed': datetime.datetime(2022, 2, 17, 6, 23, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 20, 8, 46, 24, tzinfo=datetime.timezone.utc), 'time_taken': 33946633.0, 'time_delta': '392 days, 21:37:13', 'additions': 41, 'deletions': 2, 'state': 'closed'}, {'id': 548819560, 'number': 20741, 'closed': datetime.datetime(2021, 2, 9, 3, 50, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 5, 9, 10, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3004768.0, 'time_delta': '34 days, 18:39:28', 'additions': 32, 'deletions': 5, 'state': 'closed'}, {'id': 546387068, 'number': 20691, 'closed': datetime.datetime(2021, 9, 1, 1, 23, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 29, 8, 35, 5, tzinfo=datetime.timezone.utc), 'time_taken': 21228516.0, 'time_delta': '245 days, 16:48:36', 'additions': 80, 'deletions': 10, 'state': 'closed'}, {'id': 545772093, 'number': 20676, 'closed': datetime.datetime(2021, 1, 2, 7, 56, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 27, 6, 48, 6, tzinfo=datetime.timezone.utc), 'time_taken': 522496.0, 'time_delta': '6 days, 1:08:16', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 545668213, 'number': 20666, 'closed': datetime.datetime(2020, 12, 26, 15, 17, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 26, 7, 48, 37, tzinfo=datetime.timezone.utc), 'time_taken': 26905.0, 'time_delta': '7:28:25', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 542918479, 'number': 20630, 'closed': datetime.datetime(2020, 12, 27, 12, 21, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 19, 12, 5, 34, tzinfo=datetime.timezone.utc), 'time_taken': 692153.0, 'time_delta': '8 days, 0:15:53', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 527938658, 'number': 20493, 'closed': datetime.datetime(2022, 2, 17, 6, 23, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 26, 9, 17, 43, tzinfo=datetime.timezone.utc), 'time_taken': 38696754.0, 'time_delta': '447 days, 21:05:54', 'additions': 331, 'deletions': 66, 'state': 'closed'}, {'id': 526346160, 'number': 20481, 'closed': datetime.datetime(2021, 8, 23, 6, 51, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 24, 9, 42, 39, tzinfo=datetime.timezone.utc), 'time_taken': 23490512.0, 'time_delta': '271 days, 21:08:32', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 523762714, 'number': 20451, 'closed': datetime.datetime(2020, 11, 24, 0, 48, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 19, 8, 18, 21, tzinfo=datetime.timezone.utc), 'time_taken': 405015.0, 'time_delta': '4 days, 16:30:15', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 523139928, 'number': 20446, 'closed': datetime.datetime(2021, 1, 1, 10, 40, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 18, 12, 10, 15, tzinfo=datetime.timezone.utc), 'time_taken': 3796186.0, 'time_delta': '43 days, 22:29:46', 'additions': 113, 'deletions': 1, 'state': 'closed'}, {'id': 522230619, 'number': 20438, 'closed': datetime.datetime(2020, 12, 23, 15, 9, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 17, 8, 24, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3134677.0, 'time_delta': '36 days, 6:44:37', 'additions': 24, 'deletions': 9, 'state': 'closed'}, {'id': 517275743, 'number': 20396, 'closed': datetime.datetime(2020, 11, 17, 19, 56, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 8, 9, 10, 45, tzinfo=datetime.timezone.utc), 'time_taken': 816317.0, 'time_delta': '9 days, 10:45:17', 'additions': 53, 'deletions': 4, 'state': 'closed'}, {'id': 512176086, 'number': 20353, 'closed': datetime.datetime(2020, 11, 18, 14, 14, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 29, 10, 35, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1741162.0, 'time_delta': '20 days, 3:39:22', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 508091371, 'number': 20318, 'closed': datetime.datetime(2021, 2, 6, 20, 41, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 22, 7, 50, 24, tzinfo=datetime.timezone.utc), 'time_taken': 9291069.0, 'time_delta': '107 days, 12:51:09', 'additions': 531, 'deletions': 246, 'state': 'closed'}, {'id': 501548282, 'number': 20249, 'closed': datetime.datetime(2020, 12, 23, 5, 15, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 12, 12, 35, 22, tzinfo=datetime.timezone.utc), 'time_taken': 6194425.0, 'time_delta': '71 days, 16:40:25', 'additions': 17, 'deletions': 1, 'state': 'closed'}, {'id': 499659183, 'number': 20228, 'closed': datetime.datetime(2020, 10, 9, 15, 55, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 8, 5, 5, 40, tzinfo=datetime.timezone.utc), 'time_taken': 125362.0, 'time_delta': '1 day, 10:49:22', 'additions': 10, 'deletions': 7, 'state': 'closed'}, {'id': 499187710, 'number': 20223, 'closed': datetime.datetime(2020, 11, 8, 14, 35, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 11, 43, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2775150.0, 'time_delta': '32 days, 2:52:30', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 498470335, 'number': 20212, 'closed': datetime.datetime(2020, 10, 7, 10, 6, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 6, 11, 34, 13, tzinfo=datetime.timezone.utc), 'time_taken': 81126.0, 'time_delta': '22:32:06', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 497816080, 'number': 20208, 'closed': datetime.datetime(2020, 10, 6, 21, 31, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 5, 12, 25, 27, tzinfo=datetime.timezone.utc), 'time_taken': 119176.0, 'time_delta': '1 day, 9:06:16', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 497416570, 'number': 20200, 'closed': datetime.datetime(2021, 8, 23, 6, 50, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 4, 11, 22, 5, tzinfo=datetime.timezone.utc), 'time_taken': 27890906.0, 'time_delta': '322 days, 19:28:26', 'additions': 51, 'deletions': 27, 'state': 'closed'}, {'id': 497392377, 'number': 20197, 'closed': datetime.datetime(2020, 10, 24, 1, 14, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 4, 7, 49, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1704302.0, 'time_delta': '19 days, 17:25:02', 'additions': 665, 'deletions': 994, 'state': 'closed'}, {'id': 496837381, 'number': 20184, 'closed': datetime.datetime(2020, 10, 3, 15, 6, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 11, 3, 20, tzinfo=datetime.timezone.utc), 'time_taken': 100980.0, 'time_delta': '1 day, 4:03:00', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 496779390, 'number': 20183, 'closed': datetime.datetime(2020, 10, 2, 19, 51, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 9, 1, 39, tzinfo=datetime.timezone.utc), 'time_taken': 38984.0, 'time_delta': '10:49:44', 'additions': 36, 'deletions': 48, 'state': 'closed'}, {'id': 496774290, 'number': 20182, 'closed': datetime.datetime(2020, 10, 2, 19, 49, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 8, 51, 39, tzinfo=datetime.timezone.utc), 'time_taken': 39457.0, 'time_delta': '10:57:37', 'additions': 53, 'deletions': 133, 'state': 'closed'}, {'id': 496771244, 'number': 20181, 'closed': datetime.datetime(2020, 10, 2, 20, 9, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 8, 45, 22, tzinfo=datetime.timezone.utc), 'time_taken': 41020.0, 'time_delta': '11:23:40', 'additions': 43, 'deletions': 62, 'state': 'closed'}, {'id': 495970852, 'number': 20175, 'closed': datetime.datetime(2020, 10, 24, 13, 29, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 1, 5, 33, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2015744.0, 'time_delta': '23 days, 7:55:44', 'additions': 21, 'deletions': 2, 'state': 'closed'}, {'id': 495367805, 'number': 20169, 'closed': datetime.datetime(2021, 9, 17, 11, 37, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 9, 14, 32, tzinfo=datetime.timezone.utc), 'time_taken': 30421378.0, 'time_delta': '352 days, 2:22:58', 'additions': 36, 'deletions': 7, 'state': 'closed'}, {'id': 493939798, 'number': 20159, 'closed': datetime.datetime(2020, 10, 4, 20, 43, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 28, 7, 19, 19, tzinfo=datetime.timezone.utc), 'time_taken': 566663.0, 'time_delta': '6 days, 13:24:23', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 493689632, 'number': 20157, 'closed': datetime.datetime(2022, 2, 17, 6, 23, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 27, 8, 28, 5, tzinfo=datetime.timezone.utc), 'time_taken': 43883731.0, 'time_delta': '507 days, 21:55:31', 'additions': 54, 'deletions': 4, 'state': 'closed'}, {'id': 490910926, 'number': 20131, 'closed': datetime.datetime(2020, 10, 1, 6, 26, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 22, 12, 39, 33, tzinfo=datetime.timezone.utc), 'time_taken': 755199.0, 'time_delta': '8 days, 17:46:39', 'additions': 91, 'deletions': 5, 'state': 'closed'}, {'id': 481873048, 'number': 20058, 'closed': datetime.datetime(2020, 11, 30, 9, 31, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 8, 8, 24, 20, tzinfo=datetime.timezone.utc), 'time_taken': 7175253.0, 'time_delta': '83 days, 1:07:33', 'additions': 33, 'deletions': 24, 'state': 'closed'}, {'id': 480708288, 'number': 20054, 'closed': datetime.datetime(2021, 4, 15, 5, 51, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 6, 9, 48, 23, tzinfo=datetime.timezone.utc), 'time_taken': 19080186.0, 'time_delta': '220 days, 20:03:06', 'additions': 70, 'deletions': 3, 'state': 'closed'}, {'id': 480490090, 'number': 20049, 'closed': datetime.datetime(2020, 9, 22, 9, 45, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 5, 9, 37, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1469283.0, 'time_delta': '17 days, 0:08:03', 'additions': 136, 'deletions': 2, 'state': 'closed'}, {'id': 477941863, 'number': 20035, 'closed': datetime.datetime(2020, 11, 21, 6, 25, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 16, 23, 33, tzinfo=datetime.timezone.utc), 'time_taken': 6876139.0, 'time_delta': '79 days, 14:02:19', 'additions': 265, 'deletions': 0, 'state': 'closed'}, {'id': 476232897, 'number': 20023, 'closed': datetime.datetime(2020, 10, 2, 19, 38, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 11, 20, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2794704.0, 'time_delta': '32 days, 8:18:24', 'additions': 44, 'deletions': 84, 'state': 'closed'}, {'id': 475923500, 'number': 20019, 'closed': datetime.datetime(2020, 8, 31, 11, 45, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 15, 12, 5, tzinfo=datetime.timezone.utc), 'time_taken': 73991.0, 'time_delta': '20:33:11', 'additions': 52, 'deletions': 92, 'state': 'closed'}, {'id': 475767519, 'number': 20016, 'closed': datetime.datetime(2020, 10, 2, 11, 57, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 29, 12, 1, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2937413.0, 'time_delta': '33 days, 23:56:53', 'additions': 32, 'deletions': 2, 'state': 'closed'}, {'id': 475394302, 'number': 20010, 'closed': datetime.datetime(2020, 8, 29, 22, 15, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 13, 3, 59, tzinfo=datetime.timezone.utc), 'time_taken': 119484.0, 'time_delta': '1 day, 9:11:24', 'additions': 24, 'deletions': 30, 'state': 'closed'}, {'id': 475384470, 'number': 20009, 'closed': datetime.datetime(2020, 8, 28, 15, 47, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 12, 43, 31, tzinfo=datetime.timezone.utc), 'time_taken': 11067.0, 'time_delta': '3:04:27', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 474526407, 'number': 20005, 'closed': datetime.datetime(2020, 8, 28, 15, 20, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 8, 4, 30, tzinfo=datetime.timezone.utc), 'time_taken': 112542.0, 'time_delta': '1 day, 7:15:42', 'additions': 3190, 'deletions': 3617, 'state': 'closed'}, {'id': 474519017, 'number': 20004, 'closed': datetime.datetime(2020, 8, 27, 7, 59, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 7, 49, 27, tzinfo=datetime.timezone.utc), 'time_taken': 602.0, 'time_delta': '0:10:02', 'additions': 4, 'deletions': 4, 'state': 'closed'}]"
