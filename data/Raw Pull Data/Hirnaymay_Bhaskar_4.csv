pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1422790993,Text Style Popup,"Description:
This pull request introduces the implementation of the TextStylePopup, a versatile pop-up designed to accommodate various text-related features.
This project is a part of Google Summer of Code 2023 program
Project Description: https://summerofcode.withgoogle.com/programs/2023/projects/OifrwbNC

![Screenshot 2024-07-18 151705](https://github.com/user-attachments/assets/78bb7c3c-94c1-4112-9632-451f80ed7d57)

QML Structure and Keyboard Navigation Order
![qml_structure_and_navigation_order](https://github.com/user-attachments/assets/74030ddb-9024-4240-a414-e5741d477650)

- [x] I signed the [CLA](https://musescore.org/en/cla)
- [x] The title of the PR describes the problem it addresses
- [x] Each commit's message describes its purpose and effects, and references the issue it resolves
- [x] If changes are extensive, there is a sequence of easily reviewable commits
- [x] The code in the PR follows [the coding rules](https://github.com/musescore/MuseScore/wiki/CodeGuidelines)
- [x] There are no unnecessary changes
- [x] The code compiles and runs on my machine, preferably after each commit individually
",False,18436,https://api.github.com/repos/musescore/MuseScore/pulls/18436,https://github.com/musescore/MuseScore/pull/18436,open,1036,151,33,18,19,89,1,0,[{'name': 'GSoC'}],2023-07-06 12:14:51+00:00,,0.0,,"[{'comment_id': 1261058670, 'comment_body': 'Code style: here is an empty line too much (we always use only one empty line)', 'comment_created': datetime.datetime(2023, 7, 12, 11, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261062011, 'comment_body': ""Since the ColumnLayout only contains this button, it is not necessary to wrap the button in a ColumnLayout. Generally, I'd prevent using Layouts that contain only one child, just to avoid overhead."", 'comment_created': datetime.datetime(2023, 7, 12, 11, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261080337, 'comment_body': 'Please give this a more descriptive ID, like `fontDropdown`', 'comment_created': datetime.datetime(2023, 7, 12, 12, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261086431, 'comment_body': 'This is another RowLayout with only one child', 'comment_created': datetime.datetime(2023, 7, 12, 12, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261088125, 'comment_body': ""Code style: I'd prefer to have a newline after this line"", 'comment_created': datetime.datetime(2023, 7, 12, 12, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261122798, 'comment_body': 'Why is this wrapped in an `Item`? \r\n\r\nI think that that is the reason that the `anchors.topMargin: -15` is necessary. The `Item` namely has a height of 0 px by default, and it is centred in the Layout, and then the spin box is placed at position (0,0) inside the Item, i.e. the top of the spin box coincides with the top of the `Item`, which is the center of the `RowLayout`.\r\n\r\nSo, if you simply remove the `Item` and place the spin box directly in the `RowLayout`, you can remove the `anchors.…` properties. \r\n\r\nTo set the correct with of the spin box, you can use either `width: 60` for the spin box itself (the spinbox is derived from `Item`, so it also has a `width` property) of `Layout.preferredWidth: 60` (which is a more reliable way when working with layouts). ', 'comment_created': datetime.datetime(2023, 7, 12, 12, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261132182, 'comment_body': ""I understand that you just copied this from the Inspector for the time being, but it would be better to remove references to things that don't exist in this context (like `root.propertyItem`, for example). \r\n```suggestion\r\n                    currentIndex: 0 // indexOfValue(/*TODO*/)\r\n\r\n                    onActivated: function(index, value) {\r\n                        // TODO\r\n                    }\r\n```\r\n\r\nSame in other places in this file."", 'comment_created': datetime.datetime(2023, 7, 12, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261133255, 'comment_body': '```suggestion\r\n                    id: textStylesButtonGroup\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 12, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261139385, 'comment_body': ""General comment: you have not implemented keyboard navigation / accessibility for this file. That is okay for now, but needs to be done later. It's not very difficult, but a bit boring and requires a bit of carefulness. I can explain this to you later."", 'comment_created': datetime.datetime(2023, 7, 12, 12, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261141018, 'comment_body': 'This column layout also only has one child (namely the RowLayout), so it is not needed', 'comment_created': datetime.datetime(2023, 7, 12, 12, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261147408, 'comment_body': ""I'd be a bit more sparing with comments like this, and watch out that they don't clutter the file. This one for example, is not really necessary.\r\n\r\nYou can also make them a bit smaller: for example, instead of \r\n```\r\n            //Column -> 1 | Row -> 1\r\n            RowLayout {\r\n```\r\nyou can write \r\n```\r\n            RowLayout { // column 1, row 1\r\n```\r\n\r\nAnd comments for individual controls are often not necessary either because their `id` already says enough."", 'comment_created': datetime.datetime(2023, 7, 12, 13, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261148913, 'comment_body': ""Code style: extra empty line. (we generally don't add empty lines after `{`)"", 'comment_created': datetime.datetime(2023, 7, 12, 13, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261149493, 'comment_body': 'Code style: another extra newline', 'comment_created': datetime.datetime(2023, 7, 12, 13, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261153976, 'comment_body': ""Please use `StyledTextLabel`, which automatically has the correct font and color. \r\n\r\n(If some property should be different in this case from what `StyledTextLabel` does by default, you can still override specific properties, since `StyledTextLabel` is derived from `Text`.)\r\n\r\nAlso, for a text label is it clear enough what it is, so you don't need to add a comment for it, and also not an `id` unless that `id` needs to be referenced somewhere. "", 'comment_created': datetime.datetime(2023, 7, 12, 13, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261155693, 'comment_body': 'Needs to be translatable, and ""Sentence case"" instead of ""Title Case"":\r\n```suggestion\r\n                    text: qsTrc(""inspector"", ""Line spacing:"")\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 13, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261159050, 'comment_body': 'Same story about not wrapping in `Item` and removing `anchors.…`', 'comment_created': datetime.datetime(2023, 7, 12, 13, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261736431, 'comment_body': 'Code style: I actually meant adding a newline after the `}`.\r\n```suggestion\r\n                    return resultList\r\n                }\r\n\r\n                currentIndex: 0 //indexOfValue(/*TODO*/))\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 21, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261741581, 'comment_body': ""Code style: here is another extra empty line.\r\n\r\nOn the other hand, we do prefer to add an empty line between each two components, i.e.\r\n```qml\r\n    Whatever1 {\r\n        …\r\n    }\r\n    // add empty line here\r\n    Whatever2 {\r\n        …\r\n    }\r\n```\r\n\r\nTo summarise: the following rules cover most cases:\r\n- never an empty line after a line ending with `{`\r\n- never an empty line between two `}` `}`\r\n- almost always an empty line between `}` and a new component, property or function\r\n- exception: in a list of JS objects, like for the `model` property of a `RadioButtonGroup`, we don't add a newline between two objects, i.e.\r\n    ```qml\r\n    model: [\r\n        {\r\n             key: value1\r\n        },\r\n        {\r\n             key: value2\r\n        }\r\n    ]\r\n    ```\r\n    is correct."", 'comment_created': datetime.datetime(2023, 7, 12, 21, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261742523, 'comment_body': 'Our style is to use `Text style` with lowercase `s`. This style is referred to as ""Sentence case"". \r\nThe style of capitalising every word (which we _don\'t_ do) is called ""Title Case"".\r\n```suggestion\r\n                    text: qsTrc(""inspector"", ""Text style"")\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 21, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1261745897, 'comment_body': 'To be consistent with many other files, I would rename `menuItems` to `contentRow`:\r\n```suggestion\r\n    contentWidth: contentRow.width\r\n    contentHeight: contentRow.height\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 21, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1269404890, 'comment_body': 'What will this component be used for?', 'comment_created': datetime.datetime(2023, 7, 20, 12, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1269413955, 'comment_body': '""This is the popup that will launch when the \'Text Style\' button is clicked.\r\n![Screenshot 2023-07-20 181804](https://github.com/musescore/MuseScore/assets/90182257/6db79f7d-1a4a-48fd-b472-eb24a66981fd)\r\n', 'comment_created': datetime.datetime(2023, 7, 20, 12, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'octopols', 'type': 'User'}, {'comment_id': 1298103803, 'comment_body': ""This comment is now no longer accurate (let's remove it)"", 'comment_created': datetime.datetime(2023, 8, 18, 7, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298106444, 'comment_body': ""In line 41, you forgot to change the namespace, which is causing the build failure:\r\n```diff\r\n-Q_PROPERTY(\r\n-        QVector<mu::notation::HarpPedalPopupModel::Position> pedalState READ pedalState WRITE setDiagramPedalState NOTIFY pedalStateChanged)\r\n+Q_PROPERTY(\r\n+        QVector<mu::inspector::HarpPedalPopupModel::Position> pedalState READ pedalState WRITE setDiagramPedalState NOTIFY pedalStateChanged)\r\n```\r\n(For pure C++ purposes, it would be sufficient to write the name without `mu::inspector::`, but because Qt performs some extra processing on C++ files and generates some extra code, it needs to be written in full, _with_ `mu::inspector::`, because otherwise the generated code won't compile.)"", 'comment_created': datetime.datetime(2023, 8, 18, 7, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298108378, 'comment_body': 'Please change this to `MU_INSPECTOR_HARPPEDALPOPUPMODEL_H` (also at the bottom of the file; and similarly in the other popup models)', 'comment_created': datetime.datetime(2023, 8, 18, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298108642, 'comment_body': 'This line should be removed', 'comment_created': datetime.datetime(2023, 8, 18, 7, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298108872, 'comment_body': '`inspector/` should not be necessary ', 'comment_created': datetime.datetime(2023, 8, 18, 7, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298111485, 'comment_body': 'In the end, we ended up not using this file, as far as I can see. So it can be removed. ', 'comment_created': datetime.datetime(2023, 8, 18, 7, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298117814, 'comment_body': ""This file is named `IInspectorController.h`, with uppercase letters in it. Our naming convention is to use lowercase for .cpp/.h files, i.e. `iinspectorcontroller.h`. \r\n\r\nAlso, in the CMake file you write it in lowercase, while the real filename uses uppercase. macOS and Windows are case-insensitive, so on those OSs you'll get away with it, but it will make Linux unhappy. \r\n\r\nBecause of those case-insensitivity of Windows and macOS, it's very difficult to rename a file from uppercase to lowercase on those OSs: because the uppercase and lowercase filename are considered equal, Git won't notice that anything has changed, and won't let you commit. So, use the following workaround:\r\n1. Rename the file to something different, like `_iinspectorcontroller.h`\r\n2. Commit\r\n3. Rename the file to `iinspectorcontroller.h`\r\n4. Commit\r\n5. Squash these two temporary commits into the `Moved Popup System to Inspector Module` commit"", 'comment_created': datetime.datetime(2023, 8, 18, 7, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298120458, 'comment_body': 'Let\'s add a newline and remove `inspector/`\r\n```suggestion\r\n\r\n#include ""models/popups/abstractelementpopupmodel.h""\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 7, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298121247, 'comment_body': 'Preferably add `using namespace mu::inspector;` (followed by a newline), and then remove `mu::inspector::` from the rest of the file', 'comment_created': datetime.datetime(2023, 8, 18, 7, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298122177, 'comment_body': ""Let's add a newline above this line, to separate the popup stuff from the rest"", 'comment_created': datetime.datetime(2023, 8, 18, 7, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1298124475, 'comment_body': 'Does `NotationScene` still need to be imported?', 'comment_created': datetime.datetime(2023, 8, 18, 7, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1299064708, 'comment_body': ""It's giving me preprocessor issues when I remove `inspector\\` should I ignore it?"", 'comment_created': datetime.datetime(2023, 8, 19, 3, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'octopols', 'type': 'User'}, {'comment_id': 1299218098, 'comment_body': 'If you mean that Qt Creator displays errors in the code editor view, that is to be expected; because of _unity builds_, Qt Creator\'s code model does not have information about how to compile the individual cpp files, because during a real build those unity files would be compiled instead. This means that the code model does not know where to look for included files, and thus displays useless errors/warnings. You can ignore those, the only thing that really matters is what the compiler tells you in ""Compile output"". ', 'comment_created': datetime.datetime(2023, 8, 19, 16, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1306174679, 'comment_body': ""Oh, here's another comment that's not actual anymore :)"", 'comment_created': datetime.datetime(2023, 8, 25, 21, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1306176522, 'comment_body': ""I think this is not necessary; in this file you're only using `inspectorController()`, which is a method of NotationViewInputController (generated by INJECT), and thus does not need the inspector namespace."", 'comment_created': datetime.datetime(2023, 8, 25, 21, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1306177384, 'comment_body': 'Usually, we put ""public"" QML components in the toplevel qml folder of the module, i.e. `src/inspector/view/qml/MuseScore/Inspector/`. ', 'comment_created': datetime.datetime(2023, 8, 25, 21, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1307360293, 'comment_body': ""Perhaps it's better to use `toggleOpened()` instead of `open`, so that the user can click again to close the popup"", 'comment_created': datetime.datetime(2023, 8, 28, 12, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1307360440, 'comment_body': '(same here)', 'comment_created': datetime.datetime(2023, 8, 28, 12, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1307372113, 'comment_body': ""The subpopup can probably access the `textStyleModel` because of the context. But actually this is not entirely reliable, and I believe this is a deprecated feature of QML. It's better to pass the model via a property; and since you only need the textSettingsModel here, you only need to pass that, and not the whole `textStyleModel`. \r\nSo in TextStyleSubPopup.qml, you'd add `required property QtObject textSettingsModel`, and in `TextStylePopup.qml`, where the subpopup is instantiated, you'd add `textSettingsModel: textStyleModel.textSettingsModel`. \r\nAnd then, in TextStyleSubPopup.qml, you need to adjust how the model is accessed; you'll need to give the root component of this file an id (simply `id: root` would work) and then access the model via that id (like `root.textSettingsModel`).\r\n\r\nAlso, I don't think that `textStyleModel.textSettingsModel` will ever be null (since the textSettingsModel is created directly in the constructor of textStyleModel, so it's always there whenever QML tries to access it). So perhaps you don't need all the `textStyleModel.textSettingsModel ? … : …` checks. Unless you're still getting errors in Application Output without them, of course. "", 'comment_created': datetime.datetime(2023, 8, 28, 12, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1307373401, 'comment_body': 'The same comment about `textStyleModel.textSettingsModel` applies here (see TextStyleSubPopup).', 'comment_created': datetime.datetime(2023, 8, 28, 12, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1307375839, 'comment_body': 'Also, this `visible` line would actually mean that this subpopup is empty for dynamics (if we ever connect dynamics to this same popup). I\'d suggest to remove this `visible` property here, and add it in TextStylePopup instead to hide the whole ""frame"" button for dynamics.', 'comment_created': datetime.datetime(2023, 8, 28, 12, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1307378538, 'comment_body': 'That\'s quite long... as I mentioned in another comment, I don\'t think the null check should be necessary, but of course the `isUndefined` check _is_ necessary, so it will still be quite long. How about splitting it into several lines?\r\n```suggestion\r\n                        checked: !textStyleModel.textSettingsModel.textScriptAlignment.isUndefined \r\n                                 ? textStyleModel.textSettingsModel.textScriptAlignment.value === modelData[""typeRole""]\r\n                                 : false\r\n```', 'comment_created': datetime.datetime(2023, 8, 28, 12, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1308555923, 'comment_body': 'Should I remove null checks from everywhere? ', 'comment_created': datetime.datetime(2023, 8, 29, 10, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'octopols', 'type': 'User'}, {'comment_id': 1308586533, 'comment_body': ""If it indeed works without them, then yes :)\r\n(and I'm quite sure it will work, because `textStyleModel` is just the ID of a component, so that's never null, and `textStyleModel.textSettingsModel` won't be null either because the textSettingsModel property is initialised directly in the constructor of TextStylePopupModel.)"", 'comment_created': datetime.datetime(2023, 8, 29, 10, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1320547129, 'comment_body': 'Oopsie :)', 'comment_created': datetime.datetime(2023, 9, 9, 11, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1320547262, 'comment_body': 'This should stay `notationViewNavigationSection`', 'comment_created': datetime.datetime(2023, 9, 9, 11, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1320547834, 'comment_body': 'This should be `.order` instead of `.row`, because for panels we (almost) always use `order` instead of `column`/`row`', 'comment_created': datetime.datetime(2023, 9, 9, 11, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1320548398, 'comment_body': 'There\'s a typo here :)\r\n```suggestion\r\n                        navigation.accessible.name: qsTrc(""inspector"", ""Vertical alignment buttons"")\r\n```', 'comment_created': datetime.datetime(2023, 9, 9, 11, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1320549562, 'comment_body': 'Here another `inspcetor` :)\r\n\r\nAlso, even though this string will never appear on the screen (only pronounced by screen reader), it would be preferable to keep this ""Sentence case"" rather than ""Title Case"":\r\n```suggestion\r\n                    navigation.accessible.name: qsTrc(""inspector"", ""Text style options"")\r\n```', 'comment_created': datetime.datetime(2023, 9, 9, 11, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1320549627, 'comment_body': 'Same here:\r\n```suggestion\r\n                    navigation.accessible.name: qsTrc(""inspector"", ""Frame settings"")\r\n```', 'comment_created': datetime.datetime(2023, 9, 9, 11, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1320549831, 'comment_body': 'I believe that for text items, the official way is to use `Text.AlignRight`\r\n```suggestion \r\n                    horizontalAlignment: Text.AlignRight\r\n```', 'comment_created': datetime.datetime(2023, 9, 9, 12, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349555896, 'comment_body': 'You don\'t need to include `iinspectorcontroller.h` here, since it is already included via `internal/inspectorcontoller.h`. (Don\'t consider that a general rule, because in general it may make it unclear ""where things come from""; but in the case of an interface header and its implementation header, you don\'t need to include the interface header.)\n\nAlso, I\'d add a newline after the `internal/…` line. ', 'comment_created': datetime.datetime(2023, 10, 7, 18, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349558136, 'comment_body': ""We might want to add some more types here. At least `SYSTEM_TEXT`, but perhaps some others too. Let's discuss this with the designers when the PR can be tested. "", 'comment_created': datetime.datetime(2023, 10, 7, 18, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349558256, 'comment_body': 'This change seems unnecessary', 'comment_created': datetime.datetime(2023, 10, 7, 18, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349558330, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2023, 10, 7, 18, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349570461, 'comment_body': ""This include is not necessary because it is already included in notationviewinputcontroller.h. And this _is_ a general rule: if a file is included in the header file corresponding to this cpp file, you don't need to include it in this cpp file. "", 'comment_created': datetime.datetime(2023, 10, 7, 20, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349571768, 'comment_body': 'It seems to me that this line is not necessary and might even cause ""binding loops"". ', 'comment_created': datetime.datetime(2023, 10, 7, 20, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349572052, 'comment_body': 'This seems not necessary because invisible items in a column are completely ignored anyway. ', 'comment_created': datetime.datetime(2023, 10, 7, 20, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349575978, 'comment_body': ""Here you're just using `root.textSettingsModel` while in other places you have first check if it is not null (i.e. `root.textSettingsModel ? … : …`). It would be good to check if those other null checks are actually necessary (just check if no error messages are printed to Application Output if you remove them); if they are necessary, it would be good to have such checks consistently, so also in this instance. \n\n(Same in the textPlacementSection below.)"", 'comment_created': datetime.datetime(2023, 10, 7, 21, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349576993, 'comment_body': 'It is not necessary to null-check `textStyleModel.textSettingsModel.fontFamily`. The fontFamily PropertyItem is initialised directly in the constructor of TextSettingsModel, so there is no moment that it is null. ', 'comment_created': datetime.datetime(2023, 10, 7, 21, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349577085, 'comment_body': 'here is a superfluous newline before a `}`', 'comment_created': datetime.datetime(2023, 10, 7, 21, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349577357, 'comment_body': ""Shouldn't it be without `.value`?\n```suggestion\n                        checked: !textStyleModel.textSettingsModel.fontStyle.isUndefined\n```\n"", 'comment_created': datetime.datetime(2023, 10, 7, 21, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349577493, 'comment_body': '```suggestion\n                    currentValue: textStyleModel.textSettingsModel.fontSize.value\n```\n', 'comment_created': datetime.datetime(2023, 10, 7, 21, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349577601, 'comment_body': '```suggestion\n                        textStyleModel.textSettingsModel.fontSize.value = newValue\n```\n', 'comment_created': datetime.datetime(2023, 10, 7, 21, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349577759, 'comment_body': '```suggestion\n                    currentValue: textStyleModel.textSettingsModel.textLineSpacing.value\n```\n', 'comment_created': datetime.datetime(2023, 10, 7, 21, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349577791, 'comment_body': '```suggestion\n                        textStyleModel.textSettingsModel.textLineSpacing.value = newValue\n```\n', 'comment_created': datetime.datetime(2023, 10, 7, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349577867, 'comment_body': '```suggestion\n                    textStyleModel.textSettingsModel.insertSpecialCharacters()\n```\n', 'comment_created': datetime.datetime(2023, 10, 7, 21, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1349581086, 'comment_body': 'To make clear that this comment is there for documentation and not as a ToDo, you could do this, like we often do with comments like that:\n```suggestion\n    //! Note: the navigation order does not match the order of the components in the file\n```\n', 'comment_created': datetime.datetime(2023, 10, 7, 22, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1350268602, 'comment_body': ""Wouöldn't `STAFF_TEXT `be need here too, IOW: shouldn't this be in sync with `ELEMENT_POPUP_TYPES`"", 'comment_created': datetime.datetime(2023, 10, 9, 12, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Jojo-Schmitz', 'type': 'User'}, {'comment_id': 1350461855, 'comment_body': 'No, all types of text elements will get the same popup with the same model, like in the Inspector. So `ELEMENT_POPUP_TYPES` maps all these element types to the `TYPE_TEXT` model type.', 'comment_created': datetime.datetime(2023, 10, 9, 15, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1360233365, 'comment_body': 'Sounds good. When will the PR testing take place?', 'comment_created': datetime.datetime(2023, 10, 16, 7, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'octopols', 'type': 'User'}, {'comment_id': 1360249858, 'comment_body': ""I removed the checks, and there were no errors in the application output, so I believe it's safe to proceed this way."", 'comment_created': datetime.datetime(2023, 10, 16, 7, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'octopols', 'type': 'User'}, {'comment_id': 1360286041, 'comment_body': ""It would be great if you could push the fixes for my last round of review comments (and indeed rebase the PR), and then I'll ask someone to start testing!"", 'comment_created': datetime.datetime(2023, 10, 16, 8, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1363886285, 'comment_body': ""Okay, then I'll review the changes and create a commit for the fixes."", 'comment_created': datetime.datetime(2023, 10, 18, 13, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'octopols', 'type': 'User'}, {'comment_id': 1363898301, 'comment_body': 'So, I only need to delete the height property, correct?', 'comment_created': datetime.datetime(2023, 10, 18, 13, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'octopols', 'type': 'User'}, {'comment_id': 1384847005, 'comment_body': 'The contexts of the translatable strings in this file will also need to be updated from `""notation""` to `""inspector""`', 'comment_created': datetime.datetime(2023, 11, 7, 12, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1667088883, 'comment_body': 'This removal might have unintended side effects on other popups. Perhaps, instead of removing this line, we should make it conditional. Something like ""if (!viewInteraction()->isTextEditingStarted())`', 'comment_created': datetime.datetime(2024, 7, 5, 19, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1667089486, 'comment_body': 'This may also have unintended effects, and makes the method not do what it promises. If you only want to _open_ the popup, just call `showElementPopup`; `toggleElementPopup` should _toggle_ the popup. ', 'comment_created': datetime.datetime(2024, 7, 5, 19, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686828620, 'comment_body': 'This turns out to be unused', 'comment_created': datetime.datetime(2024, 7, 22, 16, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686835231, 'comment_body': 'This five properties can be made `readonly`', 'comment_created': datetime.datetime(2024, 7, 22, 16, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686835608, 'comment_body': 'Can be `readonly` as well', 'comment_created': datetime.datetime(2024, 7, 22, 16, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686835879, 'comment_body': 'And this one as well', 'comment_created': datetime.datetime(2024, 7, 22, 16, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686844276, 'comment_body': 'For controls, including the type of control in the accessibility name is not necessary: that is already announced by the screen reader itself\r\n```suggestion\r\n                    navigation.accessible.name: qsTrc(""inspector"", ""Font"")\r\n```', 'comment_created': datetime.datetime(2024, 7, 22, 16, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686844641, 'comment_body': '```suggestion\r\n                    navigation.accessible.name: qsTrc(""inspector"", ""Font size"")\r\n```\r\netc. below', 'comment_created': datetime.datetime(2024, 7, 22, 16, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686845914, 'comment_body': 'Perhaps this line is a bit long and can be split', 'comment_created': datetime.datetime(2024, 7, 22, 16, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686848718, 'comment_body': '```suggestion\r\n                        navigation.accessible.name: qsTrc(""inspector"", ""Line spacing"")\r\n```', 'comment_created': datetime.datetime(2024, 7, 22, 16, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}, {'comment_id': 1686849406, 'comment_body': '```suggestion\r\n```\r\nThis one is not necessary at all because for buttons it just takes the `text` as accessibility name by default', 'comment_created': datetime.datetime(2024, 7, 22, 16, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cbjeukendrup', 'type': 'User'}]","[{'commit_sha': '23b46065bf06ab114dfef739260bb5ae97a8ad77', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e3f4cd4a811c9f1d93b01d73f6a5b79f5e53ae', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3270cc6e0fc1ef121105a3178407a7db2a73613', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d93c58d8725dd3e6f0ca24ddc8a0eccc7d4346', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25d20c24732c48dfd4a157a17b2291f0a391b910', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06f2ec28b6483e81298145415641329c30fc1778', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '448157bd1d233448392986677df21d22ca9f76ca', 'committer_username': 'cbjeukendrup', 'committer_name': 'Casper Jeukendrup', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 17, 20, 55, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5a7716f65a51088c68ea33cd62747fc9d8241c6', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3f0ea63fe496ffd89ed58d77af54e6b239355ff', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8958f3db292bc80f690b47df91eabd61767efa7', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c26e79302169247a65233adcf4b117f651c2cf4f', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d9d66aace512ba4fc8fbe231e2d5d3752760e6', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2253100ec29e64daf056f371cbebafc023a0e3fc', 'committer_username': 'cbjeukendrup', 'committer_name': 'Casper Jeukendrup', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 17, 20, 55, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5765bb39b6e67dc18e651f6e894cca06e55d1dc8', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0062a8a3bf4fc89bbcd969ee66e575c94a57c697', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa0d1348a1a82a900011e8fd65c4e0f048ff7a1', 'committer_username': 'cbjeukendrup', 'committer_name': 'Casper Jeukendrup', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 17, 20, 55, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a61be589657a3f968c3d1dc56c07ded01dae5b', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee53282a9acbc7360fbbca7f493d6c0e6047f932', 'committer_username': 'octopols', 'committer_name': 'hirnaymay (harsh)', 'committer_email': 'sony.vaio.1404@gmail.com', 'commit_date': datetime.datetime(2021, 9, 6, 8, 28, 9, tzinfo=datetime.timezone.utc)}]",hirnaymay (harsh),90182257,sony.vaio.1404@gmail.com,User,,17,,10,13
1443732162,"Fix initial positioning of element edit popups (harp pedal, capo, ...)","This issue came up for the first time in https://github.com/musescore/MuseScore/pull/17904#issuecomment-1587930434, and our GSoC contributor discovered it in more extreme forms while working on #18436 ",True,18738,https://api.github.com/repos/musescore/MuseScore/pulls/18738,https://github.com/musescore/MuseScore/pull/18738,closed,40,60,10,3,5,0,0,1,[],2023-07-20 23:30:30+00:00,2023-07-24 22:42:10+00:00,342700.0,"3 days, 23:11:40",[],"[{'commit_sha': '1f539b952130ee7c4ac45814d36a15d5f8817c77', 'committer_username': 'cbjeukendrup', 'committer_name': 'Casper Jeukendrup', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 17, 20, 55, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7af21c722b2ee3df78c4c64b81e776cd738f065', 'committer_username': 'cbjeukendrup', 'committer_name': 'Casper Jeukendrup', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 17, 20, 55, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '681e7d041d58858ce6f5d98e35d116022b94b22f', 'committer_username': 'cbjeukendrup', 'committer_name': 'Casper Jeukendrup', 'committer_email': None, 'commit_date': datetime.datetime(2019, 3, 17, 20, 55, 7, tzinfo=datetime.timezone.utc)}]",Casper Jeukendrup,48658420,,User,,14,,0,33

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4454793,MuseScore,musescore/MuseScore,C++,2580,11972,240,426,37224,2720,110,134,"[{'id': 2005758731, 'number': 23929, 'closed': datetime.datetime(2024, 8, 6, 22, 8, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 6, 10, 29, 41, tzinfo=datetime.timezone.utc), 'time_taken': 41904.0, 'time_delta': '11:38:24', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1422790993, 'number': 18436, 'closed': None, 'created': datetime.datetime(2023, 7, 6, 12, 14, 51, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1036, 'deletions': 151, 'state': 'open'}, {'id': 1406627240, 'number': 18167, 'closed': datetime.datetime(2023, 7, 4, 20, 53, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 25, 11, 37, 23, tzinfo=datetime.timezone.utc), 'time_taken': 810948.0, 'time_delta': '9 days, 9:15:48', 'additions': 10, 'deletions': 6, 'state': 'closed'}, {'id': 1275833132, 'number': 16827, 'closed': None, 'created': datetime.datetime(2023, 3, 14, 22, 9, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 143, 'deletions': 122, 'state': 'open'}, {'id': 1252835373, 'number': 16525, 'closed': datetime.datetime(2023, 10, 26, 20, 20, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 24, 8, 21, 13, tzinfo=datetime.timezone.utc), 'time_taken': 21124748.0, 'time_delta': '244 days, 11:59:08', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 1237853711, 'number': 16322, 'closed': datetime.datetime(2023, 2, 13, 7, 34, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 11, 20, 54, 33, tzinfo=datetime.timezone.utc), 'time_taken': 124826.0, 'time_delta': '1 day, 10:40:26', 'additions': 36, 'deletions': 3, 'state': 'closed'}, {'id': 1230071314, 'number': 16226, 'closed': None, 'created': datetime.datetime(2023, 2, 6, 8, 48, 54, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 1, 'state': 'open'}, {'id': 1227806025, 'number': 16201, 'closed': None, 'created': datetime.datetime(2023, 2, 3, 9, 2, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 28, 'deletions': 13, 'state': 'open'}, {'id': 1226431354, 'number': 16190, 'closed': datetime.datetime(2023, 7, 14, 19, 3, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 2, 11, 39, 27, tzinfo=datetime.timezone.utc), 'time_taken': 14023428.0, 'time_delta': '162 days, 7:23:48', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1223079203, 'number': 16154, 'closed': datetime.datetime(2023, 2, 14, 21, 12, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 10, 46, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1247115.0, 'time_delta': '14 days, 10:25:15', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1223017800, 'number': 16153, 'closed': datetime.datetime(2023, 1, 31, 10, 23, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 10, 1, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1302.0, 'time_delta': '0:21:42', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1219655533, 'number': 16103, 'closed': datetime.datetime(2023, 2, 3, 9, 3, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 27, 17, 34, 38, tzinfo=datetime.timezone.utc), 'time_taken': 574114.0, 'time_delta': '6 days, 15:28:34', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 1218433158, 'number': 16087, 'closed': datetime.datetime(2023, 6, 25, 5, 30, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 26, 20, 59, 5, tzinfo=datetime.timezone.utc), 'time_taken': 12904306.0, 'time_delta': '149 days, 8:31:46', 'additions': 123, 'deletions': 101, 'state': 'closed'}, {'id': 1212646587, 'number': 16008, 'closed': datetime.datetime(2023, 1, 22, 21, 23, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 22, 16, 6, 22, tzinfo=datetime.timezone.utc), 'time_taken': 18999.0, 'time_delta': '5:16:39', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
