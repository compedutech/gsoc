pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1416065785,Implementing a logging interface for MLFlow,"In support of [this proposal](https://github.com/alan-turing-institute/MLJ.jl/issues/1029#issuecomment-1617093086), this PR shows the possibility to adapt a logging platform to MLJBase functionality. This completely modular implementation allows the creation and addition of multiple logging interfaces in the future by the use of [package extensions](https://pkgdocs.julialang.org/dev/creating-packages/#Conditional-loading-of-code-in-packages-(Extensions)). This work includes a way to connect MLJ with [MLFlow](https://mlflow.org/),  and opens new opportunities with other platforms (i.e. Neptune, SageMaker, etc...). The changes will be listed below:

- [x] A general package extension named **LoggersExt**, that allows the possibility to extend main methods functionality and loading desired behaviors dynamically
- [x] A minimal constructor named **MLFlowLogger** inside MLJBase source that will be extended when [MLFlowClient](https://github.com/JuliaAI/MLFlowClient.jl) is loaded, bringing a **MLFlowInstance** struct with the configurations needed by the user.
- [x] A `save` function extension that logs the model hyperparameters and saves it into the experiment artifact location.
- [x] An `evaluate!` function extension that saves the model hyperparameters and measures. This implementation is a mockup that **will be changed** in the future.
- [x] A new way to flat parameters from a NamedTuple, preserving names as key trees.
```julia-repl
julia> t = (X = (x = 1, y = 2), Y = 3)
julia> flat_params(t)
LittleDict{...} with 3 entries:
""X_x"" => 1
""X_y"" => 2
""Y""   => 3
```
- [ ] Save resampling strategy and it's parameters (as run tags)
- [ ] Adapt the functionality for composite models
- [ ] Adapt the functionality for tuned models
- [ ] Adapt the functionality for iterative models

### Additional information:
- [MLJ repo proposal](https://github.com/alan-turing-institute/MLJ.jl/issues/1029)
- [MLFlow documentation](https://mlflow.org/docs/latest/index.html)",False,912,https://api.github.com/repos/JuliaAI/MLJBase.jl/pulls/912,https://github.com/JuliaAI/MLJBase.jl/pull/912,closed,53,16,3,17,6,24,1,0,[{'name': 'WIP'}],2023-07-01 12:58:46+00:00,2023-08-16 15:38:40+00:00,3983994.0,"46 days, 2:39:54","[{'comment_id': 1268677998, 'comment_body': ""```suggestion\r\n  the required client parameters. Default is `nothing`. See [Loggers](@ref) for logger details.\r\n```\r\n\r\nAlso, I tried `?Loggers` and didn't get anything.  And `MLJBase.Loggers` does not exist.  I guess this is coming?"", 'comment_created': datetime.datetime(2023, 7, 19, 21, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268683537, 'comment_body': 'Here ""experiments"" is plural,  which is creating some cognitive dissonance for me, because `experiment_name\' is singular, not plural. Maybe  ""MLJ experiment"" is a better fallback?', 'comment_created': datetime.datetime(2023, 7, 19, 21, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268686733, 'comment_body': 'I\'m a little confused what this means: ""MLFlow will use its default directory"". Do you mean ""MLJFlowClient.jl"" has a default directory that is used, or that mlflow the application has a default that is used. It\'s not clear to me where I go to change the default. \r\n\r\nIf you are not already doing so, please refer to mlflow, the application, using lowercase letters, to distinguish between the `MLFlow` julia type. ', 'comment_created': datetime.datetime(2023, 7, 19, 21, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268708508, 'comment_body': 'As you document, the keyword argument is called `base_uri`. However, in the display, shown below, it is called `baseuri`, which confused me when I couldn\'t remember the name:\r\n\r\n```\r\njulia> logger\r\nLoggersExt.MLFlowLogger(MLFlow(\r\n    baseuri = ""http://127.0.0.1:5000"", \r\n    apiversion = 2.0\r\n), ""MLJ experiments"", missing)\r\n```\r\n\r\nIn any case, we may want to make this compulsory positional argument instead of a kwarg. See my [comment](https://github.com/JuliaAI/MLJBase.jl/pull/912#issuecomment-1642829658) below.', 'comment_created': datetime.datetime(2023, 7, 19, 21, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268750270, 'comment_body': 'You will also need to add a [compat] entry for MLFlowClient.jl, as this is requirement for all registered Julia packages: all [deps] must have a corresponding [compat] entry. ', 'comment_created': datetime.datetime(2023, 7, 19, 22, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268751086, 'comment_body': 'Style: remove the spare line:\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 22, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268754427, 'comment_body': 'In Julia `missing` is used in the setting of missing data (in the sense of statistics). Here you should use `nothing` instead of `missing` for the fallback `location`. \r\n\r\n`missing` has some behaviour that makes it trickier to handle. For example, `x == missing` always returns `missing`, no matter what `x` is. The idea is that a `missing` values should get propagated everywhere you operate on them (eg, in arithmetic).  By contrast, very little behaviour is actually overloaded for the `Nothing` type, so it is more predictable. ', 'comment_created': datetime.datetime(2023, 7, 19, 22, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268756758, 'comment_body': ""Just a note that you don't need to annotate the types for these functions. It makes no difference to the compiler here. However, it does improve readability, so it's fine to leave it here ðŸ˜„ "", 'comment_created': datetime.datetime(2023, 7, 19, 22, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268773055, 'comment_body': ""In this you appear to be unecessarily restricting the types, and this means less generic code. I mean, does MLFlowClient really care if a measurement is a `Float64`? If we are using a GPU, we might have `Float32` here, for example. And a measure like `true_postitive` returns an `Int`. Also, in MLJ, some measurement are not even numerical: we could have a float vector, class dictionary,  or a confusion matrix. \r\n\r\nTry to make this a generic as MLFlowClient will allow. If I understand rightly, MLFlowClient just calls `string` on everything. If that  is the case, I'd just leave this untyped (as in my suggestion). \r\n\r\nWith this in mind, here are some non-standard classification measures to add in your tests: `true_positive` (integer-valued, data must be `OrderedFactor{2}`), `ConfusionMatrix()` (returns a special type wrapping a matrix), `MulticlassFScore(average=MLJBase.NoAvg())` (dictionary-valued). \r\n\r\n```suggestion\r\nfunction _logmachinemeasures(client::MLFlow, run::MLFlowRun, measures, measurements)\r\n```"", 'comment_created': datetime.datetime(2023, 7, 19, 23, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268777669, 'comment_body': '```suggestion\r\nRecursively convert any object subtyping `Model` a named tuple,\r\nkeyed on the property names of `m`. The named tuple is possibly nested\r\nbecause `params` is recursively applied to the property values, which\r\nthemselves might subtype `Model`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 23, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268777967, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 23, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268808682, 'comment_body': '```suggestion\r\n# Workflow logging platforms, such as mlflow (provided by MLFlowClient.jl) overload the\r\n# following fallback method but replace the `logger` argument with `logger::LoggerType`,\r\n# where `LoggerType` is specific to the logging platform. Such an overloading will need to\r\n# include a call to the `evaluate` method which does *not* include the final `logger`\r\n# argument, namely the sole method called in the following fallback.\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 0, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268809925, 'comment_body': '```suggestion\r\n""X__x"" => 1\r\n""X__y"" => 2\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 0, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268814077, 'comment_body': 'Let\'s have a doc-string for `save` here. It will get appended to the existing `MLJBase.save` docstring. \r\n\r\nBy the way, how do I deserialise the artifact? I guess we haven\'t addressed this yet, right? A file is deserialised with `machine(""file_name.jls"")` but  `machine(logger::MLFlowLogger)` is not going work, because we need to point to a specific run, right? ', 'comment_created': datetime.datetime(2023, 7, 20, 0, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268814987, 'comment_body': 'Oh I see, `save` returns the appropriate `run`. Nice indeed, but be sure to document. ', 'comment_created': datetime.datetime(2023, 7, 20, 0, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268820508, 'comment_body': 'These tests are getting me thinking about how the user should do this. \r\n\r\nI accept that we can assume the user is  familiar with MLFlowClient.jl API, so `run.info.experiment_id` is okay. \r\nBut she does not know to get inside `logger`, as in `logger.client`? So,  perhaps  we need to add and document a method\r\n`client(logger::MLFlowLogger) = logger.client`? And any other access methods the user might need. \r\n\r\nOr, maybe better is to overload `MLFlowClient.getexperiment` in this way:\r\n\r\n```julia \r\n""""""\r\n    getexperiment(logger::MLFlowLogger, run)\r\n\r\nCalls `getexperiment(client, run)` where `client` is the client associated with `logger`.\r\n""""""\r\nMLFlowClient.getexperiment(logger::MLFlowLogger, run) = MLFlowClient.getexperiment(logger.client, run)\r\n```\r\nOr we could do both - provide a `client` accessor function and do the overloading. \r\n\r\nThese comments obviously apply to other MLFlowClient methods. ', 'comment_created': datetime.datetime(2023, 7, 20, 0, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1268822560, 'comment_body': 'As discussed in another comment above, we should add tests out some measures with different value types. \r\n\r\nI suggest making `y` an `OrderedFactor{2}` so that `true_positive` can be tested. So you can do, e.g., \r\n\r\n```julia\r\nX, y = make_moons()\r\ny = coerce(y, OrderedFactor)\r\n```\r\nto get some ordered factor binary data. ', 'comment_created': datetime.datetime(2023, 7, 20, 0, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1271298387, 'comment_body': ""I don't see this as an option due to someone can run this with default arguments. This baseuri is just a mirror of the default uri assigned by the mlflow project. This is not related about any Julia library, but it's important to be defined."", 'comment_created': datetime.datetime(2023, 7, 22, 13, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pebeto', 'type': 'User'}, {'comment_id': 1271540411, 'comment_body': ""You're right. The only way is to search for that specific run and retrieve the desired artifact using MLFlowClient.jl functionality."", 'comment_created': datetime.datetime(2023, 7, 23, 18, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pebeto', 'type': 'User'}, {'comment_id': 1271545512, 'comment_body': ""Our MLFlowLogger object will be used just to retrieve the related experiments. Crossing that line, we are just going to create auxiliary functions (like `client(logger::MLFlowLogger) = logger.client` that simplifies the calls from MLFlowClient. I don't think this could be a good idea because, by the nature of package extensions, we will import MLFlowClient and the end-user will be able to call anything from that package."", 'comment_created': datetime.datetime(2023, 7, 23, 19, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pebeto', 'type': 'User'}, {'comment_id': 1286391989, 'comment_body': ""Let's not export `log_evaluation`; this is not for the general user. You package MLJFlow.jl will just need to explicitly import this function or explicitly reference it as `MLJBase.log_evaluation`."", 'comment_created': datetime.datetime(2023, 8, 7, 21, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1286394957, 'comment_body': 'The order of fields is not idea, as I think it creates some cognitive dissonance to separate `measure` from `measurement`. Can I suggest putting `model` last or first?', 'comment_created': datetime.datetime(2023, 8, 7, 21, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1286396673, 'comment_body': 'Nit-picky suggestion. We frequently use `M` for a model type elsewhere. For consistency, can we do something like:\r\n\r\n```suggestion\r\nstruct PerformanceEvaluation{Measure,\r\n                             M,\r\n                             Measurement,\r\n                             Operation,\r\n                             PerFold,\r\n                             PerObservation,\r\n                             FittedParamsPerFold,\r\n                             ReportPerFold} <: MLJType\r\n    measure::Measure\r\n    model::M\r\n```', 'comment_created': datetime.datetime(2023, 8, 7, 21, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}, {'comment_id': 1286407943, 'comment_body': '```suggestion\r\n""""""\r\n    log_evaluation(logger, performance_evaluation)\r\n\r\nLog a performance evaluation to `logger`, an object specific\r\nto some logging platform, such as mlflow. If `logger=nothing`\r\nthen no logging is performed. The method is called at\r\nthe end of every call to `evaluate/evaluate!` using the\r\nlogger provided by the `logger` keyword argument.\r\n\r\n# Implementations for new logging platforms\r\n\r\nJulia interfaces to workflow logging platforms, such as\r\nmlflow (provided by the MLFlowClient.jl interface) should\r\noverload `log_evaluation(logger::LoggerType, performance_\r\nevaluation)`, where `LoggerType` is a platform-specific type\r\nfor logger objects. For an example, see the implementation\r\nprovided by the MLJFlow.jl package.\r\n""""""\r\n```', 'comment_created': datetime.datetime(2023, 8, 7, 21, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ablaom', 'type': 'User'}]","[{'commit_sha': 'ba82cc9f2c39090ee17b09a55831fc9bfe333a6e', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184028d83e0d227b4867c5d4193eb1dac2ab0d15', 'committer_username': 'MilesCranmer', 'committer_name': 'Miles Cranmer', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 15, 14, 15, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4da5fd267dca3bfb33f9a7df198c22e719e6250', 'committer_username': 'ablaom', 'committer_name': 'Anthony Blaom, PhD', 'committer_email': 'anthony.blaom@gmail.com', 'commit_date': datetime.datetime(2017, 7, 28, 4, 20, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f019a8e79c4eeb65c0050738da6e15d92d045f', 'committer_username': 'ablaom', 'committer_name': 'Anthony Blaom, PhD', 'committer_email': 'anthony.blaom@gmail.com', 'commit_date': datetime.datetime(2017, 7, 28, 4, 20, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d75263ac7bc783d3996b974f82c48bd31a6e90', 'committer_username': 'ablaom', 'committer_name': 'Anthony Blaom, PhD', 'committer_email': 'anthony.blaom@gmail.com', 'commit_date': datetime.datetime(2017, 7, 28, 4, 20, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760d50d11347bc4e678c92d267a5df63816164ae', 'committer_username': 'juliohm', 'committer_name': 'JÃºlio Hoffimann', 'committer_email': 'julio.hoffimann@gmail.com', 'commit_date': datetime.datetime(2013, 1, 23, 0, 47, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c15d7a036b0a31a1aeea84a50a1fd89d7d36c631', 'committer_username': 'OkonSamuel', 'committer_name': 'Okon Samuel', 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 18, 21, 58, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b590fac0c4945f7ed910ae251e3cca7b5fc6d465', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6344ce41247ba47cde2aa50ea417665bdd043673', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '972f2dc3d1b1bc9c038322c1b2f5fc27596f1b91', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05967994b7d7eabb0a27fee95b6cb59424ac6e03', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a86babf384d84b1789213824e65893752bd1efba', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cd258b389c9c0365a9f84ad66858baf6bfc540a', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '179dbe4778488e0aa239c266ff0200b2d1f052a7', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '582f7bb75866ad6ef8c4830cd8a85d91fa8df384', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b773b4b3f9363638d9ddee50323a96b2da3bf2', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60140db323ec2b056a9fcf01870a2d8cb1b594d', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}]",Jose Esparza,28990958,,User,,33,,2,10
1477697966,Preparing MLJBase to receive logger instances,"This PR contains the changes related to functions that can be extended by any logger projects (in this case, mlflow). It contains:

- A `log_evaluation` function that receives a logger instance and a performance evaluation.  It can be extended by any project that logs to a platform.
- Adapting MLJBase functions that receive logger as argument.

This changes can be seen applied in [MLJFlow.jl](https://github.com/JuliaAI/MLJFlow.jl).

Useful links:
- alan-turing-institute/MLJ.jl#1029
- Old PR: #912 ",True,925,https://api.github.com/repos/JuliaAI/MLJBase.jl/pulls/925,https://github.com/JuliaAI/MLJBase.jl/pull/925,closed,70,21,2,2,3,0,0,0,[],2023-08-16 15:35:07+00:00,2023-08-18 04:25:27+00:00,132620.0,"1 day, 12:50:20",[],"[{'commit_sha': '1387f64b5dbebd2365f7dfc325915d3bc2408849', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b6b047c57f4763ad56baaf5846dea9bbdf6d33c', 'committer_username': 'pebeto', 'committer_name': 'Jose Esparza', 'committer_email': None, 'commit_date': datetime.datetime(2017, 5, 26, 23, 21, 36, tzinfo=datetime.timezone.utc)}]",Jose Esparza,28990958,,User,,33,,2,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
161348052,MLJBase.jl,JuliaAI/MLJBase.jl,Julia,45,160,12,44,2563,38,25,0,"[{'id': 1477697966, 'number': 925, 'closed': datetime.datetime(2023, 8, 18, 4, 25, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 16, 15, 35, 7, tzinfo=datetime.timezone.utc), 'time_taken': 132620.0, 'time_delta': '1 day, 12:50:20', 'additions': 70, 'deletions': 21, 'state': 'closed'}, {'id': 1416065785, 'number': 912, 'closed': datetime.datetime(2023, 8, 16, 15, 38, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 12, 58, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3983994.0, 'time_delta': '46 days, 2:39:54', 'additions': 53, 'deletions': 16, 'state': 'closed'}]"
