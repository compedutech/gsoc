pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
993815785,Plugin for Selecting & Dragging & Doing Actions on Multiple Blocks,"### User behavior


1. When some of the selected blocks are in one block stack, for example, some top blocks and some of their children blocks are in the selection simultaneously. If applicable, the plugin only disconnects the selected most top block in that stack with its parent block. Move along with all the children's blocks of that most top block as a whole.
2. Blocks can be deselected by clicking on the workspace background.
3. Additional blocks can be able to be selected/deselected by holding SHIFT key while clicking the new/already selected block.
4. Clicking a new block without holding SHIFT key can clear the multiple selections and only select that block.
5. Holding SHIFT key to drag a rectangle area to select can reverse their selection state for the blocks touched by the rectangle.
6. Clicking on the button above the dustbin is equivalent to holding/releasing the SHIFT key for switching between the multiple selection mode and the normal mode. Icons are customizable.
7. Bumping neighbours after dragging to avoid overlapping is disabled in this plugin by default. Enable with `bumpNeighbours: true`.
8. Click on a block will bring that block to front. (In case Bumping neighbours is disabled)
9.  In multiple selection mode, workspace dragging as well as block dragging will all be disabled. You can only drag to draw a rectangle for selection.
10. The `Duplicate` menu will duplicate the selected most top block in the block stack and all the children blocks of that most top block. The selection will be changed to all newly created duplicate blocks' most top blocks.
11. The `Add Comment` / `Remove Comment` will instead read as `Add Comment (X)` / `Remove Comment (X)`, and will add / remove comment buttons to all the selected blocks.
12. The `Inline Inputs` / `External Inputs` will instead read as `Inline Inputs (X)` / `External Inputs (X)`, and will convert the input format with all the selected blocks.
13. The `Collapse Block` / `Expand Block` will instead read as `Collapse Block (X)` / `Expand Block (X)`, and will only apply to the selected most top block in the block stack.
14. The `Disable Block` / `Enable Block` will instead read as `Disable Block (X)` / `Enable Block (X)`, and will only apply to the selected most top block in the block stack. All the children blocks of that most top block will also get disabled.
15. For 11-14, `X` means the currently applicable number of selected blocks by the user, and `(X)` will only be shown when X is greater than 1.
16. The text to show in 11-14 is determined by the state of the block that the user right-clicks, and the same status will be applied to all the blocks no matter their individual state.
17. `Delete [X] Blocks` represents the count of the selected most top block in the block stack as well as all children of those selected most top block, and delete the blocks mentioned.
18. The ""Help"" option displays just the helping information for which block the user just right-clicked.
19. The workspace context menu has a item to `Select all Blocks` in that workspace.
20. When you use `Ctrl/Alt + A`, you can select all the blocks in the current workspace. `Ctrl/Alt + C` to copy the selected blocks, `Ctrl/Alt + X` to cut the selected blocks to the clipboard, and `Ctrl/Alt + V` to paste all the blocks currently in the clipboard and get all the newly pasted blocks selected, these will only apply to the selected most top block in the block stack.
21. (MIT App Inventor-only feature) Double click to collapse/expand currently selected blocks, enable with Blockly option `useDoubleClick: true`.

Note: **This plugin is part of the achievement by Songlin Jiang([@HollowMan6](https://github.com/HollowMan6)) participating the [Google Summer of Code 2022](https://summerofcode.withgoogle.com/programs/2022/projects/9wF06HWE) at [MIT App Inventor](https://github.com/mit-cml).**",True,1,https://api.github.com/repos/mit-cml/workspace-multiselect/pulls/1,https://github.com/mit-cml/workspace-multiselect/pull/1,closed,2635,721,18,26,7,142,0,0,[],2022-07-12 04:26:46+00:00,2022-07-28 23:55:26+00:00,1452520.0,"16 days, 19:28:40","[{'comment_id': 919111627, 'comment_body': 'I think any copyright comments should include `MIT` not `Google LLC`. @ewpatton to confirm that `MIT` is correct.', 'comment_created': datetime.datetime(2022, 7, 12, 15, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919112501, 'comment_body': 'This is a clever way to handle adding info while still using built-in translations!', 'comment_created': datetime.datetime(2022, 7, 12, 15, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919120475, 'comment_body': 'Can you add a comment here explaining that only duplicate-able blocks will be duplicated?', 'comment_created': datetime.datetime(2022, 7, 12, 15, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919126616, 'comment_body': ""```suggestion\r\n        if (block &&\r\n            duplicateOption.preconditionFn({block: block}) === 'enabled' &&\r\n            !hasSelectedParent(block)) {\r\n```\r\n\r\nNit: formatting. Generally best to include line breaks at a higher syntactic level, because it makes the code easier to read.\r\n\r\nHere and below."", 'comment_created': datetime.datetime(2022, 7, 12, 15, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919127554, 'comment_body': 'Yay for event grouping!', 'comment_created': datetime.datetime(2022, 7, 12, 15, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919128082, 'comment_body': '```suggestion\r\n      if (scope.block && !blockSelection.size) {\r\n```\r\nNit: formatting. This works in JavaScript because 0 is false-y. Here & below.', 'comment_created': datetime.datetime(2022, 7, 12, 15, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919131220, 'comment_body': 'If you undo the duplication, what blocks end up being selected?', 'comment_created': datetime.datetime(2022, 7, 12, 15, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919133109, 'comment_body': 'I think you can also remove the check for `block` because you always check that it exists before calling `apply`. Here and below.', 'comment_created': datetime.datetime(2022, 7, 12, 15, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919136630, 'comment_body': 'Hmm technically `selectedBlocksLength` is inaccurate, because the code is only removing comments from blocks that already have them. It should probably search the `blockSelection` for the blocks that actually have comments. (similarly for adding comments)', 'comment_created': datetime.datetime(2022, 7, 12, 15, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919137189, 'comment_body': 'I like determining whether comments get added or removed based on the block that was right-clicked! Very clever =)', 'comment_created': datetime.datetime(2022, 7, 12, 15, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919140033, 'comment_body': 'As with the `registerComment` option, I think this should try to provide an accurate count of how many blocks are being modified.', 'comment_created': datetime.datetime(2022, 7, 12, 15, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919438141, 'comment_body': ""Is it possible to select a block that is a child of a collapsed block? If so, you may want to expand a collapsed block even if it does have a selected parent. Although, you don't want to collapse selected blocks that have selected parents."", 'comment_created': datetime.datetime(2022, 7, 12, 21, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919438646, 'comment_body': ""Similar to the collapse case above, I think you do want to enable blocks that have selected parents. But I don't think you want to disable blocks that have selected parents."", 'comment_created': datetime.datetime(2022, 7, 12, 21, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919439278, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2022, 7, 12, 21, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919439901, 'comment_body': 'Nit: can this be included in the above if-condition?', 'comment_created': datetime.datetime(2022, 7, 12, 21, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919441868, 'comment_body': ""I think this can be refactored to use `workspace.getAllBlocks()` and [some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\r\n\r\nSomething like:\r\n```\r\nreturn scope.workspace.getAllBlocks().some((b) => b.isDeletable() && b.isMovable()) ?\r\n    'enabled' : 'disabled';\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 21, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919443430, 'comment_body': ""Actually, this precondition does not match your callback. In your callback you only ever select top blocks, even if they aren't movable/deletable and their children are. So I think you want to use `getTopBlocks` in your precondition, and not consider next blocks.\r\n\r\nEither that, or modify your callback to match."", 'comment_created': datetime.datetime(2022, 7, 12, 21, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919443816, 'comment_body': 'You can use `block.isInsertionMarker()`', 'comment_created': datetime.datetime(2022, 7, 12, 21, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919446037, 'comment_body': 'Instead of wrapping this whole function in an if statement, I recommend using:\r\n```\r\nif (inMultipleSelectionMode) {\r\n  return;\r\n}\r\n```\r\n\r\nThis makes the rest of the function easier to read =)', 'comment_created': datetime.datetime(2022, 7, 12, 21, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919447801, 'comment_body': 'I think this should be separated out into its own function (e.g. `startDragForUnselectedBlock`) so that `startDrag` is easier to comprehend.', 'comment_created': datetime.datetime(2022, 7, 12, 21, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919450446, 'comment_body': ""What case is this checking for? I think that if the block is disposed, it won't be returned by `getBlockById`"", 'comment_created': datetime.datetime(2022, 7, 12, 21, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919450659, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2022, 7, 12, 21, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919450873, 'comment_body': 'Nice use of composition rather than inheritance!', 'comment_created': datetime.datetime(2022, 7, 12, 21, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919453321, 'comment_body': ""Have you tested this with undo and redo? From my reading I think you're missing a `setGroup` call to make sure all of the drags can be undone/redone together. But there's also the possibility the individual block draggers will trample over your grouping anyway...\r\n\r\nIf it isn't working correctly then we can work from there haha."", 'comment_created': datetime.datetime(2022, 7, 12, 21, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919453790, 'comment_body': ""I'd like to find a way around this that doesn't involve monkey patching the prototype, but I'll have to think on it haha. @BeksOmega for later."", 'comment_created': datetime.datetime(2022, 7, 12, 21, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 919567402, 'comment_body': 'None of the blocks should get selected if undo the duplication, and this is also the behavior for the current blockly \r\n single block duplication.', 'comment_created': datetime.datetime(2022, 7, 13, 1, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 919580101, 'comment_body': ""OKay, so I guess using getTopBlocks would be the best suit. We don't want to select the children if the parents aren't movable/deletable, so that no block connections may get accidentally disrupted."", 'comment_created': datetime.datetime(2022, 7, 13, 2, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 919588634, 'comment_body': ""Oh, I used to directly store the BlockSVG obj into the blockSelection set, these are old code that didn't get cleaned up, so will change into directly checking the element (`if (element)`)."", 'comment_created': datetime.datetime(2022, 7, 13, 2, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 919602930, 'comment_body': 'I just re-organized it into an if branch, I guess it would be more clear than separating into its own function, as what they are doing is pretty much alike.\r\n![image](https://user-images.githubusercontent.com/43995067/178640425-bf0d50a1-f917-4f99-8623-8b8c6a84343a.png)', 'comment_created': datetime.datetime(2022, 7, 13, 2, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 919607996, 'comment_body': ""Yeah, I have tested that with undo and redo, all of the drags can be undone/redone together.\r\n\r\nThis is actually a intentionally hack, as `startDrag` https://github.com/google/blockly/blob/master/core/block_dragger.js#L129-L131 and `endDrag` \r\nhttps://github.com/google/blockly/blob/master/core/block_dragger.js#L287 set group id separately, what I'm doing here is to modify the group id before it goes into the stack so that those individual block draggers can share the same group id. Without these code, the group id will be empty in a multiple drag.\r\n\r\n`Blockly.getMainWorkspace().getUndoStack()`:\r\n![image](https://user-images.githubusercontent.com/43995067/178641279-2d774b3b-af1d-4660-a292-1a5d4e108fc9.png)\r\n"", 'comment_created': datetime.datetime(2022, 7, 13, 3, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 919612852, 'comment_body': 'If we can luckily fix the bug, then that monkey patch is no longer needed.\r\n\r\nThe bug is that, when you finished connecting multiple blocks at the same time, only one of the highlighted connection path that appear during the multiple drag can get deleted and others will still remain:\r\n![](https://user-images.githubusercontent.com/43995067/178642540-8cab4af4-9512-45ca-8215-f512e671f796.png)\r\n![](https://user-images.githubusercontent.com/43995067/178642574-c67e5423-bde6-4f84-928c-ef23ad62a813.png)\r\n![](https://user-images.githubusercontent.com/43995067/178642589-ec4a8430-0128-4135-92c1-74adc97387d3.png)\r\n\r\nSo the patch here is just a work around, it disables showing the highlight in a multiple drag.\r\n![image](https://user-images.githubusercontent.com/43995067/178643187-3458cd4e-d6c9-42a9-b954-8457c46f94c3.png)\r\n\r\nCurrently I have no idea on how to fix that, may be some upstream patches will be necessary I guess.', 'comment_created': datetime.datetime(2022, 7, 13, 3, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 919619905, 'comment_body': ""Cool, I didn't even realize that, thanks!"", 'comment_created': datetime.datetime(2022, 7, 13, 3, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 919682470, 'comment_body': 'Now except for `Delete X Blocks`, I have changed all into counting the blocks which will actually take effects with respected action.', 'comment_created': datetime.datetime(2022, 7, 13, 6, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 920555165, 'comment_body': 'Perfect! Sounds good :D', 'comment_created': datetime.datetime(2022, 7, 13, 22, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920557606, 'comment_body': 'I think you said you switched this to a set of Ids? Please update the docs if so.', 'comment_created': datetime.datetime(2022, 7, 13, 22, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920559670, 'comment_body': 'Best to use [getParent](https://developers.google.com/blockly/reference/js/Blockly.Block#getParent) =) parentBlock_ is private, and not supposed to be used by external projects/plugins.', 'comment_created': datetime.datetime(2022, 7, 13, 22, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920562246, 'comment_body': ""Do you expect them to pass the same config they pass to their `Blockly.inject` call to this `init` call? If so, I'm curious why. If not, I think this type annotation should just be `@param {Object}` or `@param {{multiSelectIcon: boolean, useDoubleClick: boolean}}`"", 'comment_created': datetime.datetime(2022, 7, 13, 22, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920572313, 'comment_body': 'I like this feature!', 'comment_created': datetime.datetime(2022, 7, 13, 22, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920574524, 'comment_body': ""Generally I prefer using [early returns](https://medium.com/swlh/return-early-pattern-3d18a41bba8), as opposed to nested if-statements. But that's a style thing, so I'll only leave one comment about it =)"", 'comment_created': datetime.datetime(2022, 7, 13, 22, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920574652, 'comment_body': '```suggestion\r\n            if (this.targetBlock_ && e.buttons === 1 &&\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 22, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920575283, 'comment_body': 'If you use an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), you might be able simplify this.', 'comment_created': datetime.datetime(2022, 7, 13, 22, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920575401, 'comment_body': 'Remove logs. (or add a TODO)', 'comment_created': datetime.datetime(2022, 7, 13, 22, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920577185, 'comment_body': ""Why do you need to update the selection highlight in bulk if you're updating individual blocks individual blocks as they're selected/unselected?"", 'comment_created': datetime.datetime(2022, 7, 13, 23, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920579384, 'comment_body': 'I agree that that is an upstream bug that needs to be fixed. Will file.', 'comment_created': datetime.datetime(2022, 7, 13, 23, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 920628907, 'comment_body': 'Oh, forgot about that 😂', 'comment_created': datetime.datetime(2022, 7, 14, 1, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 920640943, 'comment_body': 'Okay, will use `@param {{multiSelectIcon: boolean, useDoubleClick: boolean}}`', 'comment_created': datetime.datetime(2022, 7, 14, 1, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 920643096, 'comment_body': 'Okay, this was used for debugging. Guess it can be removed now.', 'comment_created': datetime.datetime(2022, 7, 14, 1, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 920703292, 'comment_body': 'We may want to keep consistency with the MIT ones https://github.com/mit-cml/appinventor-sources/blob/dd55a7321b8d9d23bc395bd61bb7828c44c148b2/appinventor/blocklyeditor/src/workspace_svg.js#L244-L260 as this feature is from the App Inventor.', 'comment_created': datetime.datetime(2022, 7, 14, 2, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921302034, 'comment_body': ""This is going to have some performance penalties, because each time you render a block it rerenders all of that block's parents as well. This makes it so that if the width of a value block changes, all of its parents can become wider as well.\r\n\r\nYou could fix this by finding all of the blocks that don't have children, and just re-rendering them. But if you're not seeing any performance problems, I wouldn't worry about optimizing right now.\r\n\r\nI would recommend adding a TODO or other comment so that future people can find this though."", 'comment_created': datetime.datetime(2022, 7, 14, 15, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921304203, 'comment_body': 'Nice job applying the comments I left on contextmenu.js here too =)', 'comment_created': datetime.datetime(2022, 7, 14, 15, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921307701, 'comment_body': 'I think this can be moved into the `preconditionFn` (this is also a bug in core apparently).', 'comment_created': datetime.datetime(2022, 7, 14, 15, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921318988, 'comment_body': ""If this shortcut deletes any blocks in the selection that are deletable, do we care if the one returned by `getSelected` is deletable? or should this shortcut be triggered even if it's not, as long as another block in the selection is?"", 'comment_created': datetime.datetime(2022, 7, 14, 15, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921322458, 'comment_body': 'I think this behavior makes sense, but just to check: you want the block to be added to the `copyData` even if it exists in the flyout?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921324586, 'comment_body': 'Is there any reason `data` would be false-y?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921325689, 'comment_body': ""No need to return the block if you're not doing anything with it."", 'comment_created': datetime.datetime(2022, 7, 14, 16, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921326873, 'comment_body': 'You should be able to use `clipboard.paste` instead.', 'comment_created': datetime.datetime(2022, 7, 14, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921329378, 'comment_body': ""```suggestion\r\n        if (block &&\r\n            (block.isDeletable() || block.isMovable()) &&\r\n            !block.isInsertionMarker()) {\r\n```\r\n\r\nI think the block should probably be selected as long as it's either deletable or movable. Because in that case there are some group operations that could apply to it."", 'comment_created': datetime.datetime(2022, 7, 14, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921332094, 'comment_body': '```suggestion\r\n     * @type {!WorkspaceMultiSelect} The plugin this button controls.\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921341613, 'comment_body': 'This casing does not match the casing used further in the file. (`this.MultiSelectGroup_` below)', 'comment_created': datetime.datetime(2022, 7, 14, 16, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921343056, 'comment_body': 'Why are you positioning this differently when the position is `top`? Have you tested this will all workspace configurations? (vertical, horizontal, start, end, rtl, and ltr)', 'comment_created': datetime.datetime(2022, 7, 14, 16, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921343691, 'comment_body': 'Nice use of `.bind`! ', 'comment_created': datetime.datetime(2022, 7, 14, 16, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921345129, 'comment_body': '```suggestion\r\n    this.enabled = false;\r\n```\r\n\r\n`enable` is a verb, which incorrectly implies this is a function. `enabled` is an adjective, which implies this is a property.', 'comment_created': datetime.datetime(2022, 7, 14, 16, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921348680, 'comment_body': 'I would expect this to be called from `switchMultiSelect_`? Is the image being updated on click?', 'comment_created': datetime.datetime(2022, 7, 14, 16, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921351466, 'comment_body': 'If you want other developers to use this, it might be nice to make the images configurable via the config passed to `WorkspaceMultiSelect`.', 'comment_created': datetime.datetime(2022, 7, 14, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921352174, 'comment_body': 'You could just pass the config options through here.', 'comment_created': datetime.datetime(2022, 7, 14, 16, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 921726385, 'comment_body': ""Okay, didn't aware that each time you render a block it rerenders all of that block's parents as well. So will check if the blocks have children, only re-render when they don't. Also will add this to the comment."", 'comment_created': datetime.datetime(2022, 7, 15, 1, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921730910, 'comment_body': 'Ah 😂', 'comment_created': datetime.datetime(2022, 7, 15, 1, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921734427, 'comment_body': ""So now we consider this as uncuttable to keep consistency with the single blocks' situation https://github.com/google/blockly/blob/e8d6f7f40848e41fba4996912708b122cec9e2b6/core/shortcut_items.js#L149. Then the answer is no."", 'comment_created': datetime.datetime(2022, 7, 15, 1, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921737061, 'comment_body': ""Actually I also haven't encountered a situation that will falsify `data`, but I can see check exists in Blockly's clipboard.paste here:\r\nhttps://github.com/google/blockly/blob/61322294da70c770b32abb28b9d695af75f61a16/core/clipboard.js#L47-L49"", 'comment_created': datetime.datetime(2022, 7, 15, 1, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921740885, 'comment_body': ""The reason I choose to re-realize the clipboard.paste https://github.com/google/blockly/blob/61322294da70c770b32abb28b9d695af75f61a16/core/clipboard.js#L46-L61 is that, I can't get access to the `copyData` directly\r\nhttps://github.com/google/blockly/blob/61322294da70c770b32abb28b9d695af75f61a16/core/clipboard.js#L26 It will simplify my code a lot and reducing a lot of duplicating work if that is accessible through API. \r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 15, 1, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921744155, 'comment_body': ""> I would expect this to be called from switchMultiSelect_?\r\n\r\nIt's called in the `switchMultiSelect` from the class in `index.js`, which is also the `this.plugin_`.\r\n\r\n> Is the image being updated on click?\r\n\r\nYes. To avoid confusion, I just updated the name into `updateMultiSelectIcon`"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921744300, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2022, 7, 15, 2, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921753939, 'comment_body': 'I passed the config through the constructor as this should be done before Dom is created.', 'comment_created': datetime.datetime(2022, 7, 15, 2, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921757035, 'comment_body': ""Yes, I've tested it with those workspace configurations:\r\n\r\n![](https://user-images.githubusercontent.com/43995067/179136432-0ac60f70-9877-452c-9ccf-c35a7917042b.png)\r\n![](https://user-images.githubusercontent.com/43995067/179136501-e634d775-8925-4472-bf3f-331bb655a1e9.png)\r\n![](https://user-images.githubusercontent.com/43995067/179136515-cd3196f1-c0ae-49bf-a2d0-a10fdadadc82.png)\r\n![](https://user-images.githubusercontent.com/43995067/179136521-5a44ebbb-450a-44ed-abb7-75925517c7f4.png)\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921785376, 'comment_body': 'Okay, so I just refactor all the related shortcuts (delete, copy, cut) into that, if some blocks in the selection lists are applicable to that action, then the shortcut will triggered.', 'comment_created': datetime.datetime(2022, 7, 15, 3, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 921793042, 'comment_body': ""We may still want to do this here, otherwise such as in the multiple selection shortcut copy and paste, it's not easy to keep all those selected. Maybe it can be optimized later, but currently we just keep the original as it's an easy way to avoid bugs and it seems like that it won't impact the performance."", 'comment_created': datetime.datetime(2022, 7, 15, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 922266889, 'comment_body': 'I think it should be fine to remove this check because you have complete control over the contents of `copyData` the check in core is because `paste` does not have complete control.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922268333, 'comment_body': ""Ah whoops I was reading core wrong. I thought it accepted the copy data as a parameter, but it apparently does not.\r\n\r\nRegardless, you're never adding anything falsey to the `copyData` set, so it should be fine to remove this check. "", 'comment_created': datetime.datetime(2022, 7, 15, 15, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922269091, 'comment_body': 'Mmm you are correct. Will file a bug!', 'comment_created': datetime.datetime(2022, 7, 15, 15, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922270532, 'comment_body': ""Nice job testing with the different configurations!\r\n\r\nI'm still confused why you move the button down further when it's positioned at the top though."", 'comment_created': datetime.datetime(2022, 7, 15, 15, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922317271, 'comment_body': ""Gotcha gotcha. Ok, I think this should be reorganized a bit.\r\n\r\nRight now it's hard to reason about the program, because it has a circular dependency. I.E. the current control flow is `MultiSelectControls.switchMultiSelect_` -> `WorkspaceMultiSelect.switchMultiselect` -> `MultiSelectControls.updateMultiSelectIcon`.\r\n\r\nMy suggestion is:\r\n  1) Have the `MultiSelectControls` take in a callback instead of the `WorkspaceMultiSelect` instance. This will remove the circular dependency.\r\n  2) Have `MultiSelectControls.switchMultiSelect_` update the view of the button directly. This makes the control flow clearer.\r\n  3) Split the logic in `WorkspaceMultiSelect.onKeyUp_` and `WorkspaceMultiSelect.onKeyDown_` into subprocedures so that the call to `updateMultiSelectIcon` won't be triggered by the callback passed to `MultiSelectControls`."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922338141, 'comment_body': 'Filed: https://github.com/google/blockly/issues/6274', 'comment_created': datetime.datetime(2022, 7, 15, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922338574, 'comment_body': 'Filed: https://github.com/google/blockly/issues/6273', 'comment_created': datetime.datetime(2022, 7, 15, 16, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922345609, 'comment_body': 'Filed: https://github.com/google/blockly/issues/6275', 'comment_created': datetime.datetime(2022, 7, 15, 16, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922399174, 'comment_body': 'Awesome! Thanks for testing =)', 'comment_created': datetime.datetime(2022, 7, 15, 17, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922399884, 'comment_body': ""Ok, I don't see a way around these monkey patches without fixes in core. @cpcallen , will module sealing break these patches? or will they be fine and we can leave them for now?"", 'comment_created': datetime.datetime(2022, 7, 15, 17, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 922593541, 'comment_body': ""Okay, then I'll remove this check."", 'comment_created': datetime.datetime(2022, 7, 16, 1, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 922605102, 'comment_body': 'Okay, I just changed the call to `WorkspaceMultiSelect.switchMultiselect` into a keyboard event simulation that directly applies to `this.workspace`, this removes the need to access the plugin instance.\r\n\r\n> Have `MultiSelectControls.switchMultiSelect_` update the view of the button directly. This makes the control flow clearer.\r\n\r\nI guess it will be easier to put button view updation into `WorkspaceMultiSelect.onKeyUp_` and `WorkspaceMultiSelect.onKeyDown_`, as we always want to indicate the current selection mode, no matter it is through the button or through the keyboard.', 'comment_created': datetime.datetime(2022, 7, 16, 1, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 922614768, 'comment_body': ""Oh, okay, I also don't remember and can't find a reason for this 😂, so will remove this then."", 'comment_created': datetime.datetime(2022, 7, 16, 2, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 923533013, 'comment_body': 'I would not recommend using event simulation to trigger logic, because you are likely to end up with side effects that are not intended. E.g. if someone else registers an onKeyUp_ listener for the workspace, clicking your multiselect button will trigger their event listener.\r\n\r\nSo I still recommend changing the `MultiselectControls` to take in a callback.', 'comment_created': datetime.datetime(2022, 7, 18, 15, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923539925, 'comment_body': 'Instead of including the min file, you can add this as a dependency. Webpack can give you better bundle sizes this way.\r\n\r\n1) Install: https://www.npmjs.com/package/dragselect#installation\r\n2) Update multiselect.js to use `import DragSelect from `dragselect`', 'comment_created': datetime.datetime(2022, 7, 18, 15, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923544972, 'comment_body': 'Use `getInjectionDiv()` instead of `injectionDiv_`. Most things that end in an underscore are private, and not meant to be used outside of core. Confusingly, some things that end in an underscore are protected, and can be used outside of core. That is our bad.', 'comment_created': datetime.datetime(2022, 7, 18, 16, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923557124, 'comment_body': 'Use `getParentSvg()` instead of `svgGroup_`', 'comment_created': datetime.datetime(2022, 7, 18, 16, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923563679, 'comment_body': '`getInjectionDiv()` here & below as well', 'comment_created': datetime.datetime(2022, 7, 18, 16, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923569194, 'comment_body': ""Generally, it's not great practice to save data by adding new properties to objects, because it makes code harder to optimize. [WeakMaps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) are preferred instead.\r\n\r\nBut this code already exists inside of a monkey patch (which is also not great practice, but as discussed, necessary in this case). So there's not a lot of benefit to refactoring this.\r\n\r\nJust wanted to point you toward the WeakMap docs in case you hadn't seen them before!"", 'comment_created': datetime.datetime(2022, 7, 18, 16, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923572274, 'comment_body': ""Even though this ends in an underscore, it's fine to access it because [it's protected](https://github.com/google/blockly/blob/61322294da70c770b32abb28b9d695af75f61a16/core/block_dragger.js#L71)."", 'comment_created': datetime.datetime(2022, 7, 18, 16, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923573324, 'comment_body': 'Love the credit section! Thank you for including this =)', 'comment_created': datetime.datetime(2022, 7, 18, 16, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 923968258, 'comment_body': ""Yeah, that's what I used to do, but then I find that the DragSelect has bugs making the current version published on npm unusable.\r\n\r\nLater I submitted a PR, but it's still not merged and released on npm. So here I included the patched min file now.\r\nhttps://github.com/ThibaultJanBeyer/DragSelect/pull/128\r\n"", 'comment_created': datetime.datetime(2022, 7, 19, 0, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 923972631, 'comment_body': ""Oh, really didn't know about WeakMap, thanks for sharing!"", 'comment_created': datetime.datetime(2022, 7, 19, 1, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 923990952, 'comment_body': 'Just checked and moved all the logics related into MultiselectControls, thanks for the suggestions.', 'comment_created': datetime.datetime(2022, 7, 19, 1, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 924526602, 'comment_body': 'Haha I love that you found the bug and fixed it yourself man! Sounds awesome =)', 'comment_created': datetime.datetime(2022, 7, 19, 13, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'BeksOmega', 'type': 'User'}, {'comment_id': 927254398, 'comment_body': 'Hi @BeksOmega , would you mind take a look at https://github.com/google/blockly-samples/pull/1202 and draft a new release for the `@blockly/plugin-scroll-options` at the npm so that I can get rid of the monkey patch here?', 'comment_created': datetime.datetime(2022, 7, 22, 3, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929469395, 'comment_body': 'Are we sure that this works with Blockly 7?', 'comment_created': datetime.datetime(2022, 7, 26, 2, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929470995, 'comment_body': ""Is this 100% required? I'm not sure we want to force people to pull in other plugins if we can help it."", 'comment_created': datetime.datetime(2022, 7, 26, 2, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929472983, 'comment_body': 'Presumably these can be relative to the page hosting the workspace?', 'comment_created': datetime.datetime(2022, 7, 26, 2, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929476686, 'comment_body': ""I'm concerned about storing this state here rather than in the plugin. What happens if there is more than one workspace instantiated on the page (with corresponding plugin), which is how App Inventor handles multiple workspaces? In this case, it might be possible to end up with blocks selected across multiple workspaces which is not what we would want."", 'comment_created': datetime.datetime(2022, 7, 26, 2, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929477256, 'comment_body': 'Maybe we should only return false if multiselect is enabled?', 'comment_created': datetime.datetime(2022, 7, 26, 2, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929478678, 'comment_body': 'Code style: continuation lines are typically indented by 4 spaces in the Google Javascript code style.', 'comment_created': datetime.datetime(2022, 7, 26, 2, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929480025, 'comment_body': 'I would not reassign to the prototype here. Why does this need to be modified to make the test work?', 'comment_created': datetime.datetime(2022, 7, 26, 2, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929480057, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 7, 26, 2, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929481531, 'comment_body': 'Code style: Continuation lines in Google Javascript style are +4 from the previous indentation level.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929482751, 'comment_body': 'What happens if we initialize the plugin multiple times? In App Inventor we have one workspace per screen, so I expect that means we will have one copy of the plugin per workspace. Verify that the code here works correctly if called multiple times.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929483117, 'comment_body': 'Do we want to make it so that the position of the control can be customized? Where does it end up by default? Is this documented somewhere?', 'comment_created': datetime.datetime(2022, 7, 26, 3, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929483710, 'comment_body': 'It seems like it would be better to group all of the unregister calls together followed by all of the register calls. Having this here could undo a registration that happened in the call on the previous line.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929484136, 'comment_body': 'If time permits, we may want to break this out as a separate plugin.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929484816, 'comment_body': 'We could probably do without the else here and just deindent the remainder of the function.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929485764, 'comment_body': '`apply` could be confusing. Consider `maybeCollapse` or something similar so the function behavior is more clear from the name.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929486706, 'comment_body': 'Make sure that the following test works:\r\n\r\n1. Press shift to enter multiselect mode\r\n2. While holding shift, press alt+tab to switch to a different program\r\n3. Use the mouse to reactivate the browser\r\n4. Confirm that the system is no longer in multiselect mode', 'comment_created': datetime.datetime(2022, 7, 26, 3, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929487082, 'comment_body': 'Code style', 'comment_created': datetime.datetime(2022, 7, 26, 3, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929488483, 'comment_body': ""Yes, let's coordinate with @ellelili2025 on this."", 'comment_created': datetime.datetime(2022, 7, 26, 3, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929496470, 'comment_body': ""I think this works in the short term but I think eventually we'd want to have alternative strings potentially given that some languages can be particular about how they pluralize given different numbers of items. For example, we could offer:\r\n\r\n```\r\nreturn Blockly.Msg['DUPLICATE_BLOCK_MULTIPLE'].replace('%1', workableBlocksLength) || Blockly.Msg['DUPLICATE_BLOCK'] + ' (' + workableBlocksLength + ')';\r\n```\r\n\r\nand just follow a convention that any translation X can have a version for multiples at `X_MULTIPLE`. This would give end users more control over the appearance of the final strings.\r\n\r\nConsider applying this change across this file."", 'comment_created': datetime.datetime(2022, 7, 26, 3, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929499140, 'comment_body': 'I would rather these be constants and the actual values used for the plugin be stored on the plugin itself. Otherwise, this prevents multiple workspaces on the same page from having different configurations.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929499284, 'comment_body': 'See my earlier note about making these properties of the plugin itself.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929500024, 'comment_body': ""Small code style issue: I'd like to have a blank line between the end of a function decl and before the jsdoc comment for the next function. Apply this to the remainder of the file."", 'comment_created': datetime.datetime(2022, 7, 26, 3, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929501382, 'comment_body': 'Can there potentially be 3 states? Multiselect on (gestures will add/remove blocks to the selection) Multiselect off (gestures trigger drags, etc.) and disabled (cannot turn on multiselect with control or shift key). Maybe this something to consider for a later version but if we want to allow it agreeing on terminology (on/off/disabled vs enabled/disabled) would be good.', 'comment_created': datetime.datetime(2022, 7, 26, 3, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929645630, 'comment_body': ""No, it isn't. Will delete that as this plugin is just for integration test."", 'comment_created': datetime.datetime(2022, 7, 26, 7, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929653490, 'comment_body': 'Just tested with Blockly 7, although the dragger works OK, there are some bugs for duplicate as well as copy and paste. So will remove Blockly 7 as supported.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929659672, 'comment_body': 'Yes, I use the relative path in the test pages.\r\n\r\nhttps://github.com/HollowMan6/workspace-multiselect/blob/10c25e8e5ef43c0888a3b3d82f63ffcb4e7fc19c/test/index.js#L84-L85', 'comment_created': datetime.datetime(2022, 7, 26, 8, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929661470, 'comment_body': 'Hmm, I\'ve never thought about the ""multiple workspaces"", will investigate more and give you an answer / solution later.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929664604, 'comment_body': 'Related to: https://github.com/google/blockly-samples/pull/1202\r\n\r\nAs https://github.com/mit-cml/workspace-multiselect/pull/1#discussion_r929645630, I just also removed the code here.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929665731, 'comment_body': 'Will check that with https://github.com/mit-cml/workspace-multiselect/pull/1#discussion_r929661470 together.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929676100, 'comment_body': ""It's always located near the trashcan. You can check the location in different modes.\r\nhttps://github.com/mit-cml/workspace-multiselect/pull/1#discussion_r921757035\r\n\r\nI guess it may not be necessary to make position of the control customizable as I can see that trashcan also has a fixed position, and so do the zoom in / zoom out controls.\r\n\r\nhttps://developers.google.com/blockly/guides/configure/web/configuration_struct\r\n<html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\ntrashcan | boolean | Displays or hides the trashcan. Defaults to\xa0true\xa0if the toolbox has categories,\xa0false\xa0otherwise.\r\n-- | -- | --\r\n\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>"", 'comment_created': datetime.datetime(2022, 7, 26, 8, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929682807, 'comment_body': 'Okay, I see. Shall we remove the feature in this plugin before release or keep it as for now?', 'comment_created': datetime.datetime(2022, 7, 26, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929701704, 'comment_body': ""I guess for disabled in on/off/disabled, as it's only a plugin and not some upstream features, we can call `plugin.dispose()` to disable the plugin, maybe there's no need for disabled in on/off/disabled, only on/off is enough."", 'comment_created': datetime.datetime(2022, 7, 26, 8, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929718391, 'comment_body': ""Great! And to keep consistency with DELETE_X_BLOCKS, which is an already existing item, I've make a small change that:\r\n```JavaScript\r\nreturn Blockly.Msg['DUPLICATE_X_BLOCKS']? Blockly.Msg['DUPLICATE_X_BLOCKS'].replace('%1', workableBlocksLength) : Blockly.Msg['DUPLICATE_BLOCK'] + ' (' + workableBlocksLength + ')';\r\n```"", 'comment_created': datetime.datetime(2022, 7, 26, 9, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929732085, 'comment_body': ""I guess that's not needed, as Drag Surface performs not so well, maybe it's better to disable that even if multiselect is enabled. https://github.com/google/blockly/issues/6160"", 'comment_created': datetime.datetime(2022, 7, 26, 9, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929744315, 'comment_body': 'Resolved by listening focus out event', 'comment_created': datetime.datetime(2022, 7, 26, 9, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929892455, 'comment_body': 'Just convert all global data into WeakMap for multiple workspace, so that now we can look for data based on the WorkspaceSvg', 'comment_created': datetime.datetime(2022, 7, 26, 12, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929895215, 'comment_body': ""Now make it to check if `Blockly.ContextMenuRegistry.registry.registry_.workspaceSelectAll` exists, then will not register twice. This would avoid the issue and I've verified by initializing the plugin multiple times"", 'comment_created': datetime.datetime(2022, 7, 26, 12, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 929918044, 'comment_body': 'For version 0.1 we can leave it in, but we probably want to refactor it out if we intend to do so for the 1.0 release.', 'comment_created': datetime.datetime(2022, 7, 26, 12, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 929931491, 'comment_body': ""Okay, so let's keep it for now."", 'comment_created': datetime.datetime(2022, 7, 26, 12, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 930052234, 'comment_body': '![image](https://user-images.githubusercontent.com/43995067/181035677-acecc4fb-1fd1-4a38-b654-cfcacb561921.png)\r\n\r\nActually I can see some warnings about this.\r\nIt loads `@blockly/eslint-config`, so I guess +2 would be the right one instead.', 'comment_created': datetime.datetime(2022, 7, 26, 14, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}]","[{'commit_sha': '981150374ce620be48d01197d0423143461e5270', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc2b23fad7d769870c9199ab5b10f6aa26beb7b8', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44848ca1c4f299cfb7a2ae045ecd1ccbaddfa34', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '225010a24e5fa9dce9462d047f8b605aa43b10c5', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10d6924cda40cb4dd726f162f946bb8dddd870d', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a6a16841e8cf876a75e5c003d5a4025f9208bb1', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6fa087af9a0486421dd4cdbbd052d60d135fb34', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a85fc79f81afdf3a1baa0919cbc8d7fcdc033c4f', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92234e7389de3b11f9a34d52bee0168f7f5841ff', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ae57f57067ec541831c3cac76e2a63b3a79c32', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4503f71f1d2fb19be01d5523f12b9b2e2df9ae30', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5390d7cef40ad7d13659286ca717f1ef94dc625', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2584f477903e2c3789f7f6f43577bc5dc4795ce', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9324d13341198ffcd654841b12357284efa492d', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc9b43095e358b1cfe9added1355eea8f2bfd0f', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a34589911232cbf63f7621e93169ea7a7fcc316', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bc4cbe9a010d1118db91c3a509349565c44826b', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f34b2261226a76466aa221e36fd7bf9e1f839893', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98c067605cadf39e00c6c6c19abf6e4246b746ae', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c25e8e5ef43c0888a3b3d82f63ffcb4e7fc19c', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f21612b62ad9e621a8499592d81aecd02fba907', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aa17a11a502bd330e1843d966e45661e58953bb', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c44ff370fa9e7110ebd2f65a71baa3fbb2e5e3', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd47edd78d56c01b5f8cb4a85274a5408a7cf004c', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37c2a13554c05e2f989eea292bb275869d3d722', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091375532c21d5c201c7c9a43d01e5b38a952b40', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530
1011583174,[Important] Fix ../lib/ds.min.js not Found,"Sorry I ignored that only the code under src folder will be uploaded to the NPM, so there's an error `../lib/ds.min.js not found` that blocks the plugin from integrating from NPM. A new release must be drafted to fix this.

Also I made a small change to the code, so that right now, the block can get selected when it is movable or deletable, without the need to satisfy the both at the same time.

I have also tested the integration with [Sandspiel Studio](https://github.com/MaxBittker/sandspiel-studio) since previously they showed some interest in this feature: https://github.com/google/blockly-samples/issues/267#issuecomment-1155252661 , and it works OK:

![GIF 29-07-2022 13-13-53](https://user-images.githubusercontent.com/43995067/181692249-9a44f536-f746-40e2-943d-74c44145b3c6.gif)

Signed-off-by: Hollow Man <hollowman@opensuse.org>",True,2,https://api.github.com/repos/mit-cml/workspace-multiselect/pulls/2,https://github.com/mit-cml/workspace-multiselect/pull/2,closed,4,4,2,1,4,5,0,0,[],2022-07-29 05:59:38+00:00,2022-08-03 03:16:53+00:00,422235.0,"4 days, 21:17:15","[{'comment_id': 934757917, 'comment_body': ""Shouldn't this be `eslint-enable`?"", 'comment_created': datetime.datetime(2022, 8, 1, 17, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 934769314, 'comment_body': ""Actually, it might be better to create a .eslintignore file and list this file there. This way we don't have to remember to add the comments if we update ds.min.js"", 'comment_created': datetime.datetime(2022, 8, 1, 17, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 934784311, 'comment_body': ""Maybe let's not bump the version number until we are ready to cut the next release. I think we should try to get in both this PR and #4 for version 0.1.1."", 'comment_created': datetime.datetime(2022, 8, 1, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 935018904, 'comment_body': ""> Shouldn't this be `eslint-enable`?\r\n\r\nJust removed that since we aim to disable eslint for the whole file here.\r\n\r\n> Actually, it might be better to create a .eslintignore file and list this file there. This way we don't have to remember to add the comments if we update ds.min.js\r\n\r\nYeah, actually that was the first solution that came to me, and then I find that this only works for `npm run lint`, somehow  it ignores `.eslintignore` when `npm run build`.\r\n![image](https://user-images.githubusercontent.com/43995067/182267551-8f518cc8-0489-4451-9319-f6a79ab89c70.png)\r\n![](https://user-images.githubusercontent.com/43995067/182267951-bac6fd84-c612-46a1-b87c-9b9d24a16176.png)\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 2, 0, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 935019310, 'comment_body': ""Okay, I'm removing this, you can add that version bump and draft the new release when you are ready."", 'comment_created': datetime.datetime(2022, 8, 2, 0, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}]","[{'commit_sha': 'f191546607b876e94825d9152bcc9f82d282edfa', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530
1012571735,feat: update fields to the same value for same type blocks selected,"resolves: #3

![GIF 30-07-2022 16-06-28](https://user-images.githubusercontent.com/43995067/181888649-cf50f3c3-6807-4c0d-a320-c1da5b75c8e8.gif)

Signed-off-by: Hollow Man <hollowman@opensuse.org>",True,4,https://api.github.com/repos/mit-cml/workspace-multiselect/pulls/4,https://github.com/mit-cml/workspace-multiselect/pull/4,closed,27,1,2,4,0,4,0,0,[],2022-07-30 08:08:27+00:00,2022-08-03 12:45:40+00:00,362233.0,"4 days, 4:37:13","[{'comment_id': 934762614, 'comment_body': ""I feel like this should start a group if one doesn't exist. Otherwise, if you change multiple blocks at the same time then deselect and hit Ctrl+Z you have to step through each block that changed rather than reverting the changes as a single event."", 'comment_created': datetime.datetime(2022, 8, 1, 17, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 935060340, 'comment_body': 'Just fixed that and make sure each block return to their original state when undoing:\r\n![GIF 02-08-2022 10-31-35](https://user-images.githubusercontent.com/43995067/182279130-83f6ca89-eb46-4e0a-98eb-8082b5549daf.gif)\r\n', 'comment_created': datetime.datetime(2022, 8, 2, 2, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 936198997, 'comment_body': 'We may want to check if a group is currently active. If so, we should continue with the current group and not call setGroup(false) at the end of this scope. It might also be worth wrapping the updates in a try-finally block so that even if an exception is thrown we reset the group state correctly.', 'comment_created': datetime.datetime(2022, 8, 3, 3, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ewpatton', 'type': 'User'}, {'comment_id': 936233394, 'comment_body': 'Thanks for the suggestion, fixed!', 'comment_created': datetime.datetime(2022, 8, 3, 4, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}]","[{'commit_sha': '3ff5660e1cddaeda03120cbee9d14404dbeeae9e', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae8fa00eb6950e2b81d30ecae0d5af68047f952d', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a06048b3b62c4249cf49cd502db7b4cb0e5ebf5f', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6893b104f1a18a7e04b2fef6bbb6f970b9e40a16', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530
1022174828,fix: context menu multi-select deletion,"Sometimes in the deletion process, the block in the scope (`scope.block`, which is the block user right-clicked on for the Context menu) can get deleted prior to `blockSelection.forEach` completes, which leads to `scope.block.workspace` returing null. so this PR fixes this by getting `scope.block.workspace` before the loop and also applying this to other actions in the context menu.

Also updates package.json to the latest.

Signed-off-by: Hollow Man <hollowman@opensuse.org>",True,5,https://api.github.com/repos/mit-cml/workspace-multiselect/pulls/5,https://github.com/mit-cml/workspace-multiselect/pull/5,closed,216,204,3,1,0,0,0,0,[],2022-08-10 03:27:54+00:00,2022-08-15 17:35:57+00:00,482883.0,"5 days, 14:08:03",[],"[{'commit_sha': '88b56e5ffc9f4526eb5f102a0e07f10070735502', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530
1004911277,fix: scroll-options when drag surface is disabled,"Patch for integration of https://github.com/mit-cml/workspace-multiselect/pull/1

Signed-off-by: Hollow Man <hollowman@opensuse.org>",True,1202,https://api.github.com/repos/google/blockly-samples/pulls/1202,https://github.com/google/blockly-samples/pull/1202,closed,15,6,2,3,4,2,0,1,[],2022-07-22 02:23:11+00:00,2022-08-23 00:24:13+00:00,2757662.0,"31 days, 22:01:02","[{'comment_id': 950541031, 'comment_body': 'if the drag surface is not being used, I think `getBlockDragSurface` can return null. so before calling `getSvgRoot` we should check for null, and/or we should only do this check if `is3dSupported` is true.\r\n\r\nSo i think this is safest?\r\n\r\n```js\r\nlet element;\r\nconst dragSurface = this.workspace_.getBlockDragSurface();\r\nif (Blockly.utils.svgMath.is3dSupported() && dragSurface) {\r\n  element = dragSurface.getSvgRoot();\r\n} else {\r\n  element = this.workspace_.svgGroup_;\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 20, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'maribethb', 'type': 'User'}, {'comment_id': 950626056, 'comment_body': ""Great, thanks for reviewing! Yeah, I agree. It's also a little bit strange as of now, since `getBlockDragSurface` doesn't return null even when it is not supported."", 'comment_created': datetime.datetime(2022, 8, 20, 0, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}]","[{'commit_sha': 'b9a6cf18ec0e5f8d1d57c1349bc09cee314aef0c', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e084e98a59ad4ff87ea95e94eb32c2de557a3d6', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6324e9ea63cad7f732b578f4d884d07d4d1ac511', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530
965826195,Add support for pointerEvents,"Hi, thanks for this great library. I'm now preparing to use DragSelect for implementing [Google Blockly](https://github.com/google/blockly)'s [multiselection project](https://summerofcode.withgoogle.com/programs/2022/projects/9wF06HWE). However, DragSelect can't work on Blockly as of now, Google Blockly uses the pointerEvents:

https://github.com/google/blockly/blob/24a808d54eef1711801ff3b7e6082409a8a78666/core/browser_events.js#L95-L100
https://github.com/google/blockly/blob/master/core/touch.js#L58-L69

So this PR makes DragSelect also listen to the pointerEvents so that it can work for the Blockly. It would be great if this PR can get merged and a new release can be drafted for this. Thank you!",False,128,https://api.github.com/repos/ThibaultJanBeyer/DragSelect/pulls/128,https://github.com/ThibaultJanBeyer/DragSelect/pull/128,closed,93,17,9,1,3,3,0,0,[],2022-06-13 14:36:51+00:00,2022-11-02 18:25:01+00:00,12282490.0,"142 days, 3:48:10","[{'comment_id': 925487003, 'comment_body': ""shouldn't all the `touch` events also be within the `else {}` clause? As far as I understand pointer events replace both, the mouse and the touch events. Or am I wrong?"", 'comment_created': datetime.datetime(2022, 7, 20, 11, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ThibaultJanBeyer', 'type': 'User'}, {'comment_id': 925627275, 'comment_body': ""No. Otherwise there will be some wired issues, so pointer event can't replace touch events now:\r\n\r\n![GIF 20-07-2022 21-43-26](https://user-images.githubusercontent.com/43995067/179997689-af2e036b-b560-4e80-ad1a-d68b5ba252af.gif)\r\n"", 'comment_created': datetime.datetime(2022, 7, 20, 13, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 931154176, 'comment_body': ""Oh okay sad :'( 👍 "", 'comment_created': datetime.datetime(2022, 7, 27, 14, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ThibaultJanBeyer', 'type': 'User'}]","[{'commit_sha': '993efca8274e9aaf7cee9b39b43febc70139b85e', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530
965826195,Add support for pointerEvents,"Hi, thanks for this great library. I'm now preparing to use DragSelect for implementing [Google Blockly](https://github.com/google/blockly)'s [multiselection project](https://summerofcode.withgoogle.com/programs/2022/projects/9wF06HWE). However, DragSelect can't work on Blockly as of now, Google Blockly uses the pointerEvents:

https://github.com/google/blockly/blob/24a808d54eef1711801ff3b7e6082409a8a78666/core/browser_events.js#L95-L100
https://github.com/google/blockly/blob/master/core/touch.js#L58-L69

So this PR makes DragSelect also listen to the pointerEvents so that it can work for the Blockly. It would be great if this PR can get merged and a new release can be drafted for this. Thank you!",False,128,https://api.github.com/repos/ThibaultJanBeyer/DragSelect/pulls/128,https://github.com/ThibaultJanBeyer/DragSelect/pull/128,closed,93,17,9,1,3,3,0,0,[],2022-06-13 14:36:51+00:00,2022-11-02 18:25:01+00:00,12282490.0,"142 days, 3:48:10","[{'comment_id': 925487003, 'comment_body': ""shouldn't all the `touch` events also be within the `else {}` clause? As far as I understand pointer events replace both, the mouse and the touch events. Or am I wrong?"", 'comment_created': datetime.datetime(2022, 7, 20, 11, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ThibaultJanBeyer', 'type': 'User'}, {'comment_id': 925627275, 'comment_body': ""No. Otherwise there will be some wired issues, so pointer event can't replace touch events now:\r\n\r\n![GIF 20-07-2022 21-43-26](https://user-images.githubusercontent.com/43995067/179997689-af2e036b-b560-4e80-ad1a-d68b5ba252af.gif)\r\n"", 'comment_created': datetime.datetime(2022, 7, 20, 13, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}, {'comment_id': 931154176, 'comment_body': ""Oh okay sad :'( 👍 "", 'comment_created': datetime.datetime(2022, 7, 27, 14, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ThibaultJanBeyer', 'type': 'User'}]","[{'commit_sha': '993efca8274e9aaf7cee9b39b43febc70139b85e', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530
1004911277,fix: scroll-options when drag surface is disabled,"Patch for integration of https://github.com/mit-cml/workspace-multiselect/pull/1

Signed-off-by: Hollow Man <hollowman@opensuse.org>",True,1202,https://api.github.com/repos/google/blockly-samples/pulls/1202,https://github.com/google/blockly-samples/pull/1202,closed,15,6,2,3,4,2,0,1,[],2022-07-22 02:23:11+00:00,2022-08-23 00:24:13+00:00,2757662.0,"31 days, 22:01:02","[{'comment_id': 950541031, 'comment_body': 'if the drag surface is not being used, I think `getBlockDragSurface` can return null. so before calling `getSvgRoot` we should check for null, and/or we should only do this check if `is3dSupported` is true.\r\n\r\nSo i think this is safest?\r\n\r\n```js\r\nlet element;\r\nconst dragSurface = this.workspace_.getBlockDragSurface();\r\nif (Blockly.utils.svgMath.is3dSupported() && dragSurface) {\r\n  element = dragSurface.getSvgRoot();\r\n} else {\r\n  element = this.workspace_.svgGroup_;\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 20, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'maribethb', 'type': 'User'}, {'comment_id': 950626056, 'comment_body': ""Great, thanks for reviewing! Yeah, I agree. It's also a little bit strange as of now, since `getBlockDragSurface` doesn't return null even when it is not supported."", 'comment_created': datetime.datetime(2022, 8, 20, 0, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HollowMan6', 'type': 'User'}]","[{'commit_sha': 'b9a6cf18ec0e5f8d1d57c1349bc09cee314aef0c', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e084e98a59ad4ff87ea95e94eb32c2de557a3d6', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6324e9ea63cad7f732b578f4d884d07d4d1ac511', 'committer_username': 'HollowMan6', 'committer_name': 'ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟', 'committer_email': 'hollowman@opensuse.org', 'commit_date': datetime.datetime(2018, 10, 9, 13, 40, 2, tzinfo=datetime.timezone.utc)}]",ℍ𝕠𝕝𝕝𝕠𝕨 𝕄𝕒𝕟,43995067,hollowman@opensuse.org,User,,95,,34,1530

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
504508641,workspace-multiselect,mit-cml/workspace-multiselect,JavaScript,12,11,7,7,57,2,1,1,"[{'id': 1918008157, 'number': 59, 'closed': datetime.datetime(2024, 6, 14, 6, 43, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 13, 7, 22, 22, tzinfo=datetime.timezone.utc), 'time_taken': 84087.0, 'time_delta': '23:21:27', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1681526539, 'number': 38, 'closed': datetime.datetime(2024, 2, 27, 18, 56, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 16, 18, 23, 8, tzinfo=datetime.timezone.utc), 'time_taken': 3630781.0, 'time_delta': '42 days, 0:33:01', 'additions': 399, 'deletions': 181, 'state': 'closed'}, {'id': 1666659903, 'number': 36, 'closed': datetime.datetime(2024, 1, 9, 16, 45, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 5, 18, 45, 18, tzinfo=datetime.timezone.utc), 'time_taken': 338425.0, 'time_delta': '3 days, 22:00:25', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 1665765771, 'number': 34, 'closed': datetime.datetime(2024, 1, 5, 16, 44, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 5, 7, 42, 5, tzinfo=datetime.timezone.utc), 'time_taken': 32556.0, 'time_delta': '9:02:36', 'additions': 163, 'deletions': 175, 'state': 'closed'}, {'id': 1630719125, 'number': 30, 'closed': datetime.datetime(2024, 1, 5, 16, 30, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 5, 16, 12, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2679488.0, 'time_delta': '31 days, 0:18:08', 'additions': 15, 'deletions': 1, 'state': 'closed'}, {'id': 1600394327, 'number': 26, 'closed': datetime.datetime(2023, 11, 21, 18, 6, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 14, 9, 43, 3, tzinfo=datetime.timezone.utc), 'time_taken': 635031.0, 'time_delta': '7 days, 8:23:51', 'additions': 464, 'deletions': 347, 'state': 'closed'}, {'id': 1521842008, 'number': 24, 'closed': datetime.datetime(2023, 9, 23, 22, 26, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 19, 18, 59, 39, tzinfo=datetime.timezone.utc), 'time_taken': 358039.0, 'time_delta': '4 days, 3:27:19', 'additions': 35, 'deletions': 32, 'state': 'closed'}, {'id': 1473471764, 'number': 21, 'closed': datetime.datetime(2023, 8, 30, 1, 8, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 13, 19, 18, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1403344.0, 'time_delta': '16 days, 5:49:04', 'additions': 181, 'deletions': 101, 'state': 'closed'}, {'id': 1472254726, 'number': 19, 'closed': datetime.datetime(2023, 8, 11, 20, 6, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 19, 29, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2219.0, 'time_delta': '0:36:59', 'additions': 105, 'deletions': 60, 'state': 'closed'}, {'id': 1451778456, 'number': 13, 'closed': datetime.datetime(2023, 7, 28, 20, 24, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 10, 53, 43, tzinfo=datetime.timezone.utc), 'time_taken': 120676.0, 'time_delta': '1 day, 9:31:16', 'additions': 3750, 'deletions': 15112, 'state': 'closed'}, {'id': 1280703770, 'number': 9, 'closed': datetime.datetime(2023, 3, 22, 13, 38, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 20, 0, tzinfo=datetime.timezone.utc), 'time_taken': 409126.0, 'time_delta': '4 days, 17:38:46', 'additions': 1034, 'deletions': 611, 'state': 'closed'}, {'id': 1130789065, 'number': 7, 'closed': datetime.datetime(2023, 2, 10, 16, 6, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 23, 55, 12, tzinfo=datetime.timezone.utc), 'time_taken': 6970262.0, 'time_delta': '80 days, 16:11:02', 'additions': 1500, 'deletions': 1843, 'state': 'closed'}, {'id': 1111359990, 'number': 6, 'closed': datetime.datetime(2022, 11, 16, 17, 5, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 4, 22, 1, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1019047.0, 'time_delta': '11 days, 19:04:07', 'additions': 2350, 'deletions': 2280, 'state': 'closed'}, {'id': 1022174828, 'number': 5, 'closed': datetime.datetime(2022, 8, 15, 17, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 3, 27, 54, tzinfo=datetime.timezone.utc), 'time_taken': 482883.0, 'time_delta': '5 days, 14:08:03', 'additions': 216, 'deletions': 204, 'state': 'closed'}, {'id': 1012571735, 'number': 4, 'closed': datetime.datetime(2022, 8, 3, 12, 45, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 8, 8, 27, tzinfo=datetime.timezone.utc), 'time_taken': 362233.0, 'time_delta': '4 days, 4:37:13', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 1011583174, 'number': 2, 'closed': datetime.datetime(2022, 8, 3, 3, 16, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 5, 59, 38, tzinfo=datetime.timezone.utc), 'time_taken': 422235.0, 'time_delta': '4 days, 21:17:15', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 993815785, 'number': 1, 'closed': datetime.datetime(2022, 7, 28, 23, 55, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 4, 26, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1452520.0, 'time_delta': '16 days, 19:28:40', 'additions': 2635, 'deletions': 721, 'state': 'closed'}]"
200125643,blockly-samples,google/blockly-samples,JavaScript,614,828,23,124,2071,142,47,3,"[{'id': 1965061277, 'number': 2417, 'closed': datetime.datetime(2024, 7, 19, 10, 32, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 11, 17, 57, 24, tzinfo=datetime.timezone.utc), 'time_taken': 664497.0, 'time_delta': '7 days, 16:34:57', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 1383067510, 'number': 1712, 'closed': datetime.datetime(2023, 6, 9, 17, 36, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 17, 4, 40, tzinfo=datetime.timezone.utc), 'time_taken': 174731.0, 'time_delta': '2 days, 0:32:11', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1111370196, 'number': 1363, 'closed': datetime.datetime(2022, 11, 11, 0, 3, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 4, 22, 23, 17, tzinfo=datetime.timezone.utc), 'time_taken': 524406.0, 'time_delta': '6 days, 1:40:06', 'additions': 31, 'deletions': 16, 'state': 'closed'}, {'id': 1004911277, 'number': 1202, 'closed': datetime.datetime(2022, 8, 23, 0, 24, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 2, 23, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2757662.0, 'time_delta': '31 days, 22:01:02', 'additions': 15, 'deletions': 6, 'state': 'closed'}]"
100693560,DragSelect,ThibaultJanBeyer/DragSelect,HTML,79,695,8,27,1006,10,5,0,"[{'id': 1130763317, 'number': 152, 'closed': datetime.datetime(2023, 1, 25, 11, 58, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 23, 21, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5575003.0, 'time_delta': '64 days, 12:36:43', 'additions': 120, 'deletions': 6, 'state': 'closed'}, {'id': 965826195, 'number': 128, 'closed': datetime.datetime(2022, 11, 2, 18, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 14, 36, 51, tzinfo=datetime.timezone.utc), 'time_taken': 12282490.0, 'time_delta': '142 days, 3:48:10', 'additions': 93, 'deletions': 17, 'state': 'closed'}]"
