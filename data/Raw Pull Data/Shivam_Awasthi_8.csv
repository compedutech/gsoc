pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1368981565,SQL: Schema Changes for Administration System,"This PR deals with the schema changes for the Administration System.

**Changes:**

- A new column called *privs* added to `bookbrainz.editor`.
- A new type called `admin_action_type` has been added to support potential action types which can be added in the future
- A new table called `bookbrainz.admin_log` has been created to track admin logs


",True,993,https://api.github.com/repos/metabrainz/bookbrainz-site/pulls/993,https://github.com/metabrainz/bookbrainz-site/pull/993,closed,55,0,4,2,1,12,0,0,[],2023-05-29 11:22:21+00:00,2023-06-06 13:01:45+00:00,697164.0,"8 days, 1:39:24","[{'comment_id': 1209233663, 'comment_body': ""```suggestion\r\n    admin_user_id INT NOT NULL,\r\n    affected_user_id INT NOT NULL,\r\n```\r\nNumbering the involved users makes these tables harder to understand, I would suggest naming the columns after the users' roles. Since this has also to be changed in other places, it would probably make sense to await all reviews before doing the changes."", 'comment_created': datetime.datetime(2023, 5, 29, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1209245850, 'comment_body': 'The reason I am hesitating to use such naming convention is because `admin_user` sounds like a higher-ranked user in hierarchy compared to the second user. This will be true in the current use-case. But in the future, when more actions such as `Reporting a user` are added, the first user might not necessarily be higher ranked than the second one. \r\nIt is possible that I might be reading too much into this.\r\nFor what its worth, my initial proposed schema contained similar naming. I am fine with it.', 'comment_created': datetime.datetime(2023, 5, 29, 11, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1209342753, 'comment_body': 'Good point, the affected user could be an ""admin"" too (whatever that means in the future). Maybe `acting_user` would be a better name?', 'comment_created': datetime.datetime(2023, 5, 29, 13, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1212999178, 'comment_body': 'You can directly add a new column at the table declaration. No need to alter the table.\r\n\r\nhttps://github.com/metabrainz/bookbrainz-site/pull/993/files#diff-78418986e4983535f6429f9d5766391c102e6c63830bca2071b8fad7051de628R32-R48 ', 'comment_created': datetime.datetime(2023, 6, 1, 11, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1217712537, 'comment_body': ""I think we can go with a simple `admin_id` and `user_id` columns. Since an 'Admin' is not an explicit user type in bookbrainz, we can say that an admin refers to anyone who is performing the administrative action, and the user is the user to which the action is directed at.\r\nThe moderation log [schema](https://github.com/metabrainz/critiquebrainz/blob/master/critiquebrainz/db/moderation_log.py) of CritiqueBrainz is also somewhat in the same vein, so I think this will be good enough. What do you think?"", 'comment_created': datetime.datetime(2023, 6, 5, 8, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1217714011, 'comment_body': 'I agree. Thanks!', 'comment_created': datetime.datetime(2023, 6, 5, 8, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1218291390, 'comment_body': 'I think `admin_id` and `target_user_id` would remove any doubt as to who is doing what, and might be a bit clearer than ""actor""/""acting"" or other alternatives I could think of (executor, initiator).', 'comment_created': datetime.datetime(2023, 6, 5, 16, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1218291650, 'comment_body': 'Yep, second that comment.', 'comment_created': datetime.datetime(2023, 6, 5, 16, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1218551733, 'comment_body': 'How about using `user_id `for the user initiating the action and `target_id `for the user getting affected?', 'comment_created': datetime.datetime(2023, 6, 5, 20, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'meziyum', 'type': 'User'}, {'comment_id': 1219298739, 'comment_body': 'I think that is more confusing at a quick glance, `user_id` could be either of the two.\r\nObviously `target_id` or `target_user_id` is quite clear, so perhaps `source_user_id` could also work in that case (but I still prefer `admin_id` myself.', 'comment_created': datetime.datetime(2023, 6, 6, 9, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1219337645, 'comment_body': 'I am also inclined towards using `admin_id` and `target_user_id`. I think they are succinct and serve our purpose well.', 'comment_created': datetime.datetime(2023, 6, 6, 10, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1219344411, 'comment_body': 'Also relevant, for what it\'s worth: I don\'t think the admin logs will show any action that hasn\'t been taken by an ""admin"". \r\nFor example, the use-case cited above (user1 reports user2) likely won\'t be shown in the admin logs, but the resulting action (admin blocked user2) would be.', 'comment_created': datetime.datetime(2023, 6, 6, 10, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}]","[{'commit_sha': 'a2cd2918da233954b16725948ca16e1af1a63561', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba5dd0cb9635e74535d226fbdebf8e3131313c1', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}]",Shivam Awasthi,56965261,,User,,8,,3,1
1390527959,feat(Admin System): Admin Panel Search Page and Edit Privileges,"### Overview:
This PR adds the functionality which allows an Administrator to search for users and then change their privileges.

### Components Added:

- **Privileges Dropdown:** A privileges dropdown has been added in the NavBar, which will eventually contain options corresponding to the special privileges that a user has. Currently only the Admin Panel can be accessed using this dropdown. Ideally, this Admin Panel can be accessed only by users who have the Administrator priv. We'll later use middlewares to fix these.

- **Admin Panel Search Page:** As the name implies, it allows us to search for users and makes use of two sub-components named: `AdminPanelSearchField` and `AdminPanelSearchResults`. The functionality of this is largely inspired from the [Search Page](https://bookbrainz.org/search?q=&size=20&from=0), which we already have.

- **Privs Edit Modal:** A modal which allows us to change privileges.
- **Privilege Badges:** This component displays the titles of the privileges in the form of badges.

### Icons:
I have taken some liberty and added some icons to differentiate users depending on the sets of privileges they have. They are used in the `PrivEditModal` and `AdminPanelSearchResults` components and brief outline of what they represent is as follows:
- **[White shield:](https://github.com/metabrainz/bookbrainz-site/pull/996/files#diff-2841b9ee1c3e343f5d9461bf49f59123cb363f82ef91331403e7e2e605c4dbae)** This is used to indicate a user with no privileges.
- **[Grey shield:](https://github.com/metabrainz/bookbrainz-site/pull/996/files#diff-f53166921b3b32f37af522f177776488af279d8f1121f2147f64d15e9194d2c6)** This is used to indicate a user with the Entity-Editor privilege (i.e., a normal editor without any special privilege)
- **[Orange shield:](https://github.com/metabrainz/bookbrainz-site/pull/996/files#diff-3c622667fa4bf8cacf9bfe88c2c1cd50b270627db30a5c99c88ec8e09bf7578d)** This is used to indicate a user with some special privileges, but not the admin priv.
- **[Orange shield with a tick:](https://github.com/metabrainz/bookbrainz-site/pull/996/files#diff-39cc26903a69ea6ed494e3e3b2251b30f86757933681c021b4eac7d1e290363c)** This is used to indicate that the user has the Admin priv.


",True,996,https://api.github.com/repos/metabrainz/bookbrainz-site/pulls/996,https://github.com/metabrainz/bookbrainz-site/pull/996,closed,1051,2,17,8,3,26,0,0,[],2023-06-13 12:37:23+00:00,2023-06-24 08:40:40+00:00,936197.0,"10 days, 20:03:17","[{'comment_id': 1233028196, 'comment_body': ""It'll be better if you can avoid reloading the window, by getting the updated values from the API and updating the states."", 'comment_created': datetime.datetime(2023, 6, 17, 11, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1233028394, 'comment_body': ""You can create a `PRIVILEGE` object with every detail about the privilege type like `title`, `variant` mapped to it's bit. Whenever you'd need to add a new privilege, or modify some information, you can directly update the object content instead of modifying the functions."", 'comment_created': datetime.datetime(2023, 6, 17, 11, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1233029337, 'comment_body': 'You should add a check, if the user who has sent the request has the privilege to perform this operation.', 'comment_created': datetime.datetime(2023, 6, 17, 11, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1233068635, 'comment_body': ""We'll eventually have to add middlewares for privilege-based access on almost all the routes. I think that will cover this."", 'comment_created': datetime.datetime(2023, 6, 17, 14, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1233278335, 'comment_body': ""Agreed. Updating the states definitely seems to be a better way. I have made some changes. I am not getting updated values from the API because each 'Save Privilege' action makes only one change to the state: it changes the `privs` variable of the `targetUser`, so I have directly updated the value on the state object with the new object. What do you think?"", 'comment_created': datetime.datetime(2023, 6, 18, 13, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1236289100, 'comment_body': 'This solution works, but I believe you should fetch the entire data from the API again so that in case any other user has changed the privileges or a new user gets added, it gets reflected on your end as well. So this function `updatePrivsOnResultsList` should pull a new copy of the data.', 'comment_created': datetime.datetime(2023, 6, 21, 5, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1236289523, 'comment_body': 'Also what do you think about this? @the-good-boy ', 'comment_created': datetime.datetime(2023, 6, 21, 5, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1236858943, 'comment_body': 'Hmm, good point. I have made the changes. Now, I am using the `triggerSearch` function inside the Pager component to refetch the data using the same query whenever we are updating the privileges. For achieving this task, I am passing a trigger as a prop which helps us run this `triggerSearch` function(since this lies in a child Pager component) from the parent AdminPanelSearch component. What do you think of this approach?', 'comment_created': datetime.datetime(2023, 6, 21, 11, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1236861952, 'comment_body': 'I agree we should create an object where we can keep the data for different privileges together. We can then make relevant getter functions which get the information we need from this object. \r\n', 'comment_created': datetime.datetime(2023, 6, 21, 11, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1238800858, 'comment_body': 'I have made some relevant changes for this. ', 'comment_created': datetime.datetime(2023, 6, 22, 16, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1240608765, 'comment_body': ""```suggestion\r\n\t\tbadgeVariant: 'success'\r\n```\r\nA typo here"", 'comment_created': datetime.datetime(2023, 6, 24, 5, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1242039610, 'comment_body': 'I have another mechanism to propose for this, that looks less like a workaround.\r\nInstead of using this `updateResultsTrigger` to trigger a method in `componentDidUpdate`, you can save a reference to the Pager component in this AdminPanelSearchPage class (using the ref prop like so `ref={this.pagerRef}`), and then in `updateResultsOnPrivsChange` we can use that ref to call a public method of the Pager class directly: `this.pagerRef?.current?.triggerSearch()` <- this method in Pager default to using the current state values from `from` and `size`.\r\n\r\nNote the syntax above uses `?.` too make sure there is a stored reference before calling the method, otherwise you can get some nasty ""method XXX does not exist on undefined"" errors.\r\n\r\nYou\'ll need instantiate that ref variable in the AdminPanelSearchPage constructor (`this.pagerRef = React.createRef();`)', 'comment_created': datetime.datetime(2023, 6, 26, 11, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242046379, 'comment_body': ""CSS classes instead of inlined styles, please :)\r\nIt's easier to reason about the CSS and keep it all synchronized when it is all in one place instead of scattered across the codebase."", 'comment_created': datetime.datetime(2023, 6, 26, 11, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242052451, 'comment_body': 'Using bootstrap class names here does not work on Safari (we just fixed that same issue across the codebase in #987, it\'s fresh on my mind :) ).\r\n\r\nYou can use the `width` property (native to the `<th>` element) to the same effect. The value should be `width=""42%""` which is what col-md-5 does, although I have found that the following values work well:\r\n\r\n![image](https://github.com/metabrainz/bookbrainz-site/assets/6179856/9f1dcf10-f541-428a-9a16-0b1f54a55baa)\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 11, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242068703, 'comment_body': ""With the `ref` method described above, this won't be needed."", 'comment_created': datetime.datetime(2023, 6, 26, 11, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242068849, 'comment_body': 'Same comment as above.', 'comment_created': datetime.datetime(2023, 6, 26, 11, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242071092, 'comment_body': ""You know, there's rarely a good use for disabling linting rules, but if I ever need a good example this will be the perfect one ! :D"", 'comment_created': datetime.datetime(2023, 6, 26, 11, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242073870, 'comment_body': 'I wonder if this should be a link to the  user\'s profile. It might be clearer to have this be just text, and have a separate ""visit profile"" link in the modal body (perhaps opening in a new tab).\r\nWhat do you think?', 'comment_created': datetime.datetime(2023, 6, 26, 11, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242075260, 'comment_body': ""This doesn't need to be quoted and in a JSX block, it can just be the text content"", 'comment_created': datetime.datetime(2023, 6, 26, 11, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242075708, 'comment_body': 'Same as above, this can be just the text', 'comment_created': datetime.datetime(2023, 6, 26, 11, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1242092763, 'comment_body': 'I wonder about this; it seems to me that the shield icon only repeats the information we already have in the privileges column.\r\n\r\nI think we only need an ""Edit"" button for now (in the future maybe ""Block""/""Delete"" buttons as well), for which I\'d rather have a text button that the very small icon which is harder to click on.\r\n\r\nWhat do you think?\r\nHere it is with text, and some button classes (btn-sm for size and btn-success for style)\r\n![image](https://github.com/metabrainz/bookbrainz-site/assets/6179856/432793eb-af9e-446e-8aa1-bc4e3c5e871a)\r\n', 'comment_created': datetime.datetime(2023, 6, 26, 12, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1243583526, 'comment_body': ""The shield icons were never really for any kind of additional information. They were just an aesthetic choice, one which I dont mind rescinding. One other reason I clubbed them with the pencil icon was so I can increase the hitbox of the click.\r\n\r\nI did give some thoughts to how the edit button should look like and here's why I ditched this simple Edit button. The main reason is because I think these buttons, when iterated in a table look really out of place to me, mostly because these types of buttons have mostly been used throughout the site as singular action initiators(i made that up), basically you find them mostly in isolation (as a 'Submit' button in a page, or a 'Create a collection' button, etc). I find that they look a bit odd when iterated in a table:\r\n![Screenshot 2023-06-27 at 16-44-39 Search Results – BookBrainz](https://github.com/metabrainz/bookbrainz-site/assets/56965261/ead9dec3-ee50-4450-8a9b-039b45e3ee73)\r\n\r\nThis also reminds me that I've been in a similar dilemma before, in this old [PR](https://github.com/metabrainz/bookbrainz-site/pull/830) where I used a question mark as a clickable link. I do agree that it does not work very good as a call to action and I also agree that we can definitely look for a better alternative in that case too, but now you know why I went for it instead of a button.\r\n\r\nI do realise that this can all be a very subjective discussion, and it is quite possible that I may be reading too much into this. I am okay with changing it to an 'Edit' button as suggested for now, but I think we should later go through some more ideas on what kind of buttons we'll use in a table.\r\n"", 'comment_created': datetime.datetime(2023, 6, 27, 11, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1243616304, 'comment_body': ""> The shield icons were never really for any kind of additional information.\r\n\r\nI think they look neat, but in this case they should be used in another place if they repeat info from the previous column. Maybe they would be a good indicator in front of user names on the website? Possibly only showing admins and privileged users, and not showing the empty shield icon in front of every user's name.\r\n\r\nFor this table, if you were to add it, I would add it in front of the user name instead of the user icon (which currently doesn't add any info). Might be helpful when quickly reading through the table.\r\n\r\n\r\nI get your thought process about the action column; the repeated buttons are perhaps not ideal, but IMO they are more *usable* that just the icon (as you mention the hitbox is small) even if the icons look better. The issue will compound once we have more actions.\r\nI think it'll end up looking fine with multiple buttons, each having a different color will help prevent misclicks (when compared to standalone icons).\r\nIf you want to jazz them up, I have two suggestion:\r\n1. we have outline style buttons which could reduce the repeating color block issue (i.e. `btn-outline-success` class etc. for -info, -danger, -warning etc.)\r\n2. you can add the icon in the button too"", 'comment_created': datetime.datetime(2023, 6, 27, 11, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1243971604, 'comment_body': 'Thanks for this suggestion. I have made a [PR](https://github.com/metabrainz/bookbrainz-site/pull/998) with these changes.', 'comment_created': datetime.datetime(2023, 6, 27, 15, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1243976925, 'comment_body': 'Indeed. I have created a class named `search-results-heading` in this [PR](https://github.com/metabrainz/bookbrainz-site/pull/998). Since this `AdminPanelSearchResults` component is largely inspired from the `SearchResults` component, I have made this change in that file as well. It was a small enough change to not warrant another PR, and so I took the liberty of including this change too.', 'comment_created': datetime.datetime(2023, 6, 27, 15, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1243979042, 'comment_body': 'For now, I have removed the link to the user\'s profile in this follow up [PR](https://github.com/metabrainz/bookbrainz-site/pull/998). I will, however, be sure to take care of this ""Visit Profile"" functionality in the next iteration of the PrivsModal.', 'comment_created': datetime.datetime(2023, 6, 27, 15, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}]","[{'commit_sha': 'e9309b102b0e3e45d55a02fc094a38b1ee5102a6', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b38f1dab17de2558485d565934de3f229866711', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c7f7e02fd3e88a215077a7f93f3a0b9f4d5959', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe32c171d7d09ad630da86ee453cadedef4f8240', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af418505e78a54c3e15a77f53dc9df61876534af', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d1f489a6dc4ca4ad652425c2ea64b88da228b5', 'committer_username': 'anshg1214', 'committer_name': 'Ansh Goyal', 'committer_email': 'anshg1214@gmail.com', 'commit_date': datetime.datetime(2021, 5, 12, 12, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89044cd5090d086a40a05a32f86f4e7cc306894c', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b38d1149536ef7c5a012805c8e7a1810ea8762c1', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}]",Shivam Awasthi,56965261,,User,,8,,3,1
1439445716,feat(Admin System): Admin logs page,"This PR adds an Admin logs page.

I have also added a field for adding a note/reason in the privs-edit-modal.",True,1001,https://api.github.com/repos/metabrainz/bookbrainz-site/pulls/1001,https://github.com/metabrainz/bookbrainz-site/pull/1001,closed,655,66,19,15,2,52,0,1,[],2023-07-18 15:18:42+00:00,2023-07-28 12:10:50+00:00,852728.0,"9 days, 20:52:08","[{'comment_id': 1268013629, 'comment_body': 'Since the creation of the admin log could potentially throw an error, I think it might be prudent to do both actions (save new privs and create admin log) in an SQL transaction.\r\nThis ensures that the transaction is rolled back if any error occurs during the process, meaning the editor privs changes are not saved if the log creation fails for some reason.\r\n\r\nThis is done by creating a transaction object (see the ORM method below) at the beginning of this route and passing it as an option to both ORM operations.\r\n\r\nFor example: https://github.com/metabrainz/bookbrainz-site/blob/656ed55ccf04423b8eb1cd40990b6b1dda9838eb/test/src/server/routes/entity/entity.js#L465\r\n\r\nIn other parts of the code I also see the use of `orm.bookshelf.transaction(…)` rather than `orm.bookshelf.knex.transaction(…)` which I think should be equivalent; the shorter version might be better.\r\n\r\nPassing the transaction object as an option is done like so: https://github.com/metabrainz/bookbrainz-site/blob/656ed55ccf04423b8eb1cd40990b6b1dda9838eb/src/server/routes/merge.ts#L240', 'comment_created': datetime.datetime(2023, 7, 19, 12, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268014121, 'comment_body': ""```suggestion\r\n\tCHANGE_PRIV = 'Change privileges'\r\n```"", 'comment_created': datetime.datetime(2023, 7, 19, 12, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268020224, 'comment_body': ""I think reorganizing like this would be a bit clearer:\r\n\r\n```\r\nif( i === 0){\r\n  grantStatement += `<strong>${privsAdded[i]}</strong>`;\r\n} else if(i === privsAdded.length - 1) {\r\n  grantStatement += ' and ';\r\n  grantStatement += `<strong>${privsAdded[i]}</strong>`;\r\n} else {\r\n  grantStatement += ', ';\r\n  grantStatement += `<strong>${privsAdded[i]}</strong>`;\r\n}\r\n```\r\n\r\nNo issue with your code, really, perhaps just personal preference, but that allows me to read one condition at a time which makes it easier to reason.\r\n\r\n\r\nEDIT: After rewriting it like the above, I realized we should be able to simplify considering we repeat the same line for each case:\r\n\r\n```\r\nif( i !== 0){\r\n  if(i === privsAdded.length - 1) {\r\n    grantStatement += ' and ';\r\n  } else {\r\n    grantStatement += ', ';\r\n  }\r\n}\r\ngrantStatement += `<strong>${privsAdded[i]}</strong>`;\r\n```\r\n\r\nAnd with all this being said, I wanted to add two things :)\r\n1. In the future we will have [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) API available for this, can't wait.\r\n2. Instead of using a `for` loop, I have found this shorter approach to be my go-to for this type of situation, making use of native array manipulation methods: get the last item, use array.join to create the list with commas and put the last item back in at the end. Doesn't mutate the original array, and will safely produce an empty `otherPrivs` array if there is only one element in `privsAdded`.\r\n\r\n```\r\nlet grantStatement = '';\r\nif (privsAdded.length) {\r\n  grantStatement = ' granted ';\r\n  const lastItem = privsAdded.at(-1);\r\n  const otherPrivs = privsAdded.slice(0, -1);\r\n  if(otherPrivs.length){\r\n    grantStatement += otherPrivs.map(priv => `<strong>${priv}</strong>`).join(', ');\r\n    grantStatement += ` and `;\r\n  }\r\n  grantStatement += `<strong>${lastItem}</strong>`\r\n}\r\n```\r\n"", 'comment_created': datetime.datetime(2023, 7, 19, 12, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268061661, 'comment_body': ""I'd suggest the same method as above using native array  functions instead of the for loop."", 'comment_created': datetime.datetime(2023, 7, 19, 13, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268062763, 'comment_body': ':+1:  thanks for the comment', 'comment_created': datetime.datetime(2023, 7, 19, 13, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268069077, 'comment_body': 'How would you feel about making this component a functional component instead of a class?\r\nIt seems very simple to convert and we might as well try to stay up to date with the newer syntax when we can.\r\nLet me know if you need a hand.', 'comment_created': datetime.datetime(2023, 7, 19, 13, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268078825, 'comment_body': ""We probably need this input to be required.\r\nI don't think there is currently validation on the server-side for an empty note, but we should make it as hard as possible to take admin actions without leaving some reason for it.\r\nSo possibly we should throw an error in the server route if the note is empty, as well as enforcing the front-end input?"", 'comment_created': datetime.datetime(2023, 7, 19, 13, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268081563, 'comment_body': 'Maybe adding `submittable: Boolean(event.target.value?.length)` here would be a good safeguard', 'comment_created': datetime.datetime(2023, 7, 19, 13, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268083915, 'comment_body': 'Yes please.\r\nI would also like to see this link duplicated in the ""privileges"" dropdown in the menu bar for easy access (considering this will eventually only be visible to a limited amount of users and is quite a utilitarian menu item, I think the duplication is fine in this case.', 'comment_created': datetime.datetime(2023, 7, 19, 13, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1268123053, 'comment_body': 'Types missing.', 'comment_created': datetime.datetime(2023, 7, 19, 14, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1268123125, 'comment_body': 'Types missing', 'comment_created': datetime.datetime(2023, 7, 19, 14, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1268123571, 'comment_body': 'Types Missing ', 'comment_created': datetime.datetime(2023, 7, 19, 14, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1268125485, 'comment_body': 'Yes, I also do feel we should switch to functional components.', 'comment_created': datetime.datetime(2023, 7, 19, 14, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1268135820, 'comment_body': 'Also in the footer, can we have ""Privacy & Terms"" below ""Admin logs""? I believe that would look better.\r\n<img width=""214"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/84081628/dcae1158-6cba-45ce-b9de-f59b4c43bdc6"">\r\n\r\n<br />\r\nOr maybe have to change this, cuz this does not look good on mobile screens.\r\n<img width=""363"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/84081628/2f77c962-6962-4310-93e8-39b3e7becfde"">\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 19, 14, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1268248736, 'comment_body': ""We've defined this type like [this](https://github.com/metabrainz/bookbrainz-site/blob/e7a36db220f0130fa102156345a3bc24a4b84539/sql/schemas/bookbrainz.sql#L23C1-L25C3). So I think it should remain capitalized here."", 'comment_created': datetime.datetime(2023, 7, 19, 15, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268249538, 'comment_body': 'Nice. Thanks for this suggestion.', 'comment_created': datetime.datetime(2023, 7, 19, 15, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268251666, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 7, 19, 15, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268251891, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 7, 19, 15, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268252074, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 7, 19, 15, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268253219, 'comment_body': 'fixed!', 'comment_created': datetime.datetime(2023, 7, 19, 15, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268299779, 'comment_body': 'It will require some more conditions to work. I have made some changes, please see.', 'comment_created': datetime.datetime(2023, 7, 19, 16, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268384404, 'comment_body': ""```suggestion\r\n\t\t\t// If we have also added a note, then set submittable also true\r\n\t\t\tthis.setState({\r\n\t\t\t\tprivs: newPrivs,\r\n\t\t\t\tsubmittable: Boolean(this.state.note.length)\r\n\t\t\t});\r\n```\r\nAlternatively, if you are a fan of cryptic code, like me:\r\n```suggestion\r\n\t\t\t// If we have also added a note, then set submittable also true\r\n\t\t\tthis.setState({\r\n\t\t\t\tprivs: newPrivs,\r\n\t\t\t\tsubmittable: !!this.state.note.length\r\n\t\t\t});\r\n```\r\nThis simplification could even be extended to include the else-branch below, but GitHub doesn't allow me to make suggestions for deleted lines."", 'comment_created': datetime.datetime(2023, 7, 19, 17, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1268420829, 'comment_body': ""```suggestion\r\n\tconst query = parseQuery(req.url);\r\n\tconst size = parseInt(query.get('size'), 10) || 20;\r\n\tconst from = parseInt(query.get('from'), 10) || 0;\r\n```\r\nThere's no need to do the URL parsing twice. Since there are also a few occurrences of this pattern in the code from #1000 you may want to also fix those while you're at it :innocent:\r\nThe other simplification works because `parseInt(null) === NaN` (missing query parameter) and `parseInt('') === NaN` (empty query parameter) and NaN is a falsy value.\r\nConsidering how often this pattern is used maybe it is also worth having a helper function `getInt(query, name, fallback = 0)`?"", 'comment_created': datetime.datetime(2023, 7, 19, 17, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1268918742, 'comment_body': 'Thanks for the suggestions! I have made the changes.', 'comment_created': datetime.datetime(2023, 7, 20, 4, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268919432, 'comment_body': 'There are some other files where we can use these helper functions, but I guess its better to make those changes in a different PR later.', 'comment_created': datetime.datetime(2023, 7, 20, 4, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1268921211, 'comment_body': 'Thank you also for finding time to lend an extra eye on these PRs.', 'comment_created': datetime.datetime(2023, 7, 20, 4, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1269126784, 'comment_body': 'Nitpick: The parameter is usually called `name` to follow the [specification](https://url.spec.whatwg.org/#interface-urlsearchparams) :nerd_face:\r\n```suggestion\r\nexport function getIntFromQueryParams(query: URLSearchParams, name: string, fallback = 0) {\r\n\treturn parseInt(query.get(name), 10) || fallback;\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 8, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1269134199, 'comment_body': ""```suggestion\r\n\tconst urlQuery = parseQuery(req.url);\r\n\tconst query = urlQuery.get('q') ?? '';\r\n```\r\nHere's one missed occurrence of `parseQuery` which can be combined with the next one."", 'comment_created': datetime.datetime(2023, 7, 20, 8, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1269134448, 'comment_body': ""```suggestion\r\n\tconst size = getIntFromQueryParams(urlQuery, 'size', 20);\r\n\tconst from = getIntFromQueryParams(urlQuery, 'from');\r\n```\r\nSee my comment above. Let's be generous and grant the variable name two more letters as well :grinning:"", 'comment_created': datetime.datetime(2023, 7, 20, 8, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1269153317, 'comment_body': ""I have the feeling that these functions could be combined to have only one iteration over the privileges, but I don't know whether it's worth the performance gain or whether there are use case where we will need one but no the other set. Maybe it's better to keep it as is then."", 'comment_created': datetime.datetime(2023, 7, 20, 8, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1269183802, 'comment_body': ""I don't think there will be any performance gains."", 'comment_created': datetime.datetime(2023, 7, 20, 9, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1269197263, 'comment_body': 'fixed!\r\n', 'comment_created': datetime.datetime(2023, 7, 20, 9, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1269197472, 'comment_body': 'fixed!', 'comment_created': datetime.datetime(2023, 7, 20, 9, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1269197827, 'comment_body': 'haha! fixed.', 'comment_created': datetime.datetime(2023, 7, 20, 9, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1269426178, 'comment_body': ""I think this should do it and you can remove the `searchResultsCallback` defined above, which in the end doesn't do more than pass the value to the set function.\r\n```suggestion\r\n\t\t\t\tsearchResultsCallback={setLogs}\r\n```"", 'comment_created': datetime.datetime(2023, 7, 20, 12, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1269428485, 'comment_body': 'This bit of feedback left.', 'comment_created': datetime.datetime(2023, 7, 20, 13, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1269449089, 'comment_body': ""I think it's pretty easy to refactor actually, and will definitely be a performance gain( not one that will be visible to us humans though :D ).\r\nJust combining putting both `if` blocks inside the same for loop and returning an object `{privsAdded, privsRemoved}` should run about twice as fast and is about the same level of readability IMO.\r\nThat would make the method name `getPrivsChanged` ?\r\nAnd then you can `const {privsAdded, privsRemoved} = getPrivsChanged(newPrivs, oldPrivs);` easily."", 'comment_created': datetime.datetime(2023, 7, 20, 13, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1269454463, 'comment_body': '```suggestion\r\n\t\t// fetch 1 more log item than required to check nextEnabled\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 13, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1269460174, 'comment_body': ""It's for this save operation that we really need the SQL transaction:\r\n```suggestion\r\n\t\tawait editor.save({privs: newPrivs},{transacting: trx});\r\n```"", 'comment_created': datetime.datetime(2023, 7, 20, 13, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1269463579, 'comment_body': 'This is unnecessary actually, my bad. From the [docs](https://bookshelfjs.org/api.html#Bookshelf-instance-transaction):\r\n\r\n> Note that there is no need to explicitly call transaction.commit() or transaction.rollback() since the entire transaction will be committed if there are no errors inside the transaction block.', 'comment_created': datetime.datetime(2023, 7, 20, 13, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1269469747, 'comment_body': '> Thank you also for finding time to lend an extra eye on these PRs.\r\n\r\nI second that !', 'comment_created': datetime.datetime(2023, 7, 20, 13, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1269649312, 'comment_body': ""I would call it `getChangedPrivs` then, for what it's worth."", 'comment_created': datetime.datetime(2023, 7, 20, 15, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1269849902, 'comment_body': ""I think we'll have to do this. This documentation is perhaps only for when we are using transaction in the form of a block as shown in the example. I am getting errors if I remove this."", 'comment_created': datetime.datetime(2023, 7, 20, 18, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1269851926, 'comment_body': ""I've made some changes regarding this. I will also make sure to add some more tests for checking this later."", 'comment_created': datetime.datetime(2023, 7, 20, 18, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1270238248, 'comment_body': 'I believe should be included in the `bookbrainz-data` package. What do you think?', 'comment_created': datetime.datetime(2023, 7, 21, 5, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1270241270, 'comment_body': 'The footer appears to be broken on test.bb. \r\n\r\n<img width=""363"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/84081628/64c53412-7a1b-48b0-98f3-0c279d42de43"">\r\n', 'comment_created': datetime.datetime(2023, 7, 21, 5, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1270253202, 'comment_body': '```suggestion\r\n\t\t\t\t\tvalue={this.state.note}\r\n```\r\n\r\nI believe you should use `value` for controlled components to ensure the state remains the single source of truth.', 'comment_created': datetime.datetime(2023, 7, 21, 5, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1270269278, 'comment_body': '```suggestion\r\n\t\tres.json(orderedRevisions);\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 6, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1270272668, 'comment_body': 'You can consider using React Fragments (<>...</>) here to avoid unnecessary wrapping elements.\r\n```suggestion\r\n\t\t<>\r\n\t\t\t{constructAdminLogStatement(logData)}\r\n\t\t\t{\r\n\t\t\t\tnote.length ?\r\n\t\t\t\t\t<div className=""small"">\r\n\t\t\t\t\t\t<strong>Note/Reason:&nbsp;</strong>{note}\r\n\t\t\t\t\t</div> : null\r\n\t\t\t}\r\n\t\t</>\r\n```', 'comment_created': datetime.datetime(2023, 7, 21, 6, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1270274252, 'comment_body': 'You should consider importing only the components you need, instead of importing the entire package. This would otherwise lead to larger bundle sizes. \r\n\r\nSimilarly [here](https://github.com/metabrainz/bookbrainz-site/pull/1001/files#diff-ec1b09b3858b2b94f7808ba9474ca2a6044e10b2222bae71c3be501cb1d41343R19) as well.', 'comment_created': datetime.datetime(2023, 7, 21, 6, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1270555627, 'comment_body': 'I agree, but would suggest to do this as a separate PR, so we can move forward.\r\nSince it will require publishing a new version of the bookbrainz-data package, we might as well collect all these types that need to be moved, and do as many as possible in one go to reduce the back-and-forth work.', 'comment_created': datetime.datetime(2023, 7, 21, 11, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1270711057, 'comment_body': 'I agree.', 'comment_created': datetime.datetime(2023, 7, 21, 13, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}]","[{'commit_sha': 'b629a0ae88d7b306c76f38c802dbf5cc0ee4dd1f', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1cd25e9d1363e2dbba57d4819cda905cae0b7db', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb91281cc8ece134655ebbc2bc8141c6533c422f', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a2e6b9f5c8502c9e145c75f05a7fd44de1fb41b', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c261c61995f1ce7c2876aadfbb3ac880a94eca4', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ab4d755a9881c75d45125201498455288bc79b', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba4f80ab245d30086d850ecb76ef3140dedb783', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873bc7a7dd4406d5b2ef7646e789e878a7e07e43', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31218360fc57338de34ccad918de63e5a6457928', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35163de4e98e71d26ce6c97942e73bfab5bdc929', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66da8e3b885836c69d967ccaa8ec5e99d9f79707', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada13ce9ec6e625b97b2e7e6db468715758db6af', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3550b5b5fd78cea485aa6efdf7f5c6256e6bbabc', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c52acae3084371f62968e91a226aacbb8a9b73b', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '715ec778e6f1d651a1cbb22499b909a40c951ea2', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}]",Shivam Awasthi,56965261,,User,,8,,3,1
1456618810,feat(Relationship Types): Relationship Types Editor and Relationship Types Page,"This PR makes the following changes:

**Relationship Type Editor**
This PR adds a Relationship Type Editor that allows us to add new relationship types and edit existing ones.
![RelationshipTypeEditor](https://github.com/metabrainz/bookbrainz-site/assets/56965261/a582f8c3-f492-4ce0-8012-f8b82d460ba4)

You can also add a parent relationship type using a Parent Type Modal:
![ParentTypeModal](https://github.com/metabrainz/bookbrainz-site/assets/56965261/ff606ec8-d00f-46c3-9d04-04d634f8bc34)


You can also add pre-defined attributes to relationships:
![AttributeTypes](https://github.com/metabrainz/bookbrainz-site/assets/56965261/f65840ac-a714-4626-b07b-880e9d97753b)


**Relationship Types Page**
This PR also adds a Relationship Types page, which allows us to view and then edit existing relationship types.
![RelationshipTypes](https://github.com/metabrainz/bookbrainz-site/assets/56965261/99a5bfdd-de41-4ac6-bc82-f855ceb5d848)

This Page follows a tree type structure similar to what we have in MB.

**Other**
The Privilege Dropdown has some more options now. Link for admin logs page has also been moved here:
![NewPrivDropdown](https://github.com/metabrainz/bookbrainz-site/assets/56965261/b9df0843-7707-4907-b290-2c60834f6eca)




",True,1005,https://api.github.com/repos/metabrainz/bookbrainz-site/pulls/1005,https://github.com/metabrainz/bookbrainz-site/pull/1005,closed,1681,102,28,26,0,46,0,0,[],2023-07-31 16:11:02+00:00,2023-08-18 09:16:24+00:00,1530322.0,"17 days, 17:05:22","[{'comment_id': 1281733581, 'comment_body': 'Sorry if I was unclear, what I meant previously is that I would like two links to the admin logs: one in the footer as you had, and also one in the privileges dropdown so that admins can  easily access it.\r\n\r\nThe reason why we would still need the footer link is that in my opinion the entire privileges dropdown should be completely hidden for users without any special privileges.\r\n\r\nA consequence of that is that the link to the Relationship Types list can\'t be in the privileges dropdown.\r\n\r\nHere are the ideas that come to mind:\r\n- don\'t have a link to the page anywhere in the menu; instead link to it from the Help page and from various places in the user docs\r\n- make the Help page menu item into a dropdown (to add the relationship types page, later other types pages)\r\n- Prepare to introduce a new ""Docs"" menu item (possibly replacing the Help page?) with more accessible-to-everyone links in it, like they do in MusicBrainz:\r\n<img width=""264"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/a1b9cf9c-108b-4652-a9e8-9e4b345e31bc"">\r\n\r\n\r\nI think the last option is probably the best to be honest. Happy to discuss this with you on IRC, just thought I\'d put my thoughts down on ""paper"" first.\r\n', 'comment_created': datetime.datetime(2023, 8, 2, 10, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281747417, 'comment_body': ""I'm somewhat surprised we don't export this array of entity types from somewhere !\r\nI see many duplicates in the codebase, and that's not right.\r\n\r\nCan you please move this array in [this file](https://github.com/metabrainz/bookbrainz-site/blob/beta/src/client/helpers/entity.tsx#L264) and export a constant ENTITY_TYPES variable?\r\nThen import it here and use it like you did (`ENTITY_TYPES.map((entity) => ({name: entity})`).\r\n\r\nNo need to refactor the entire codebase to use this constant, but at least we will have it available when we do want to clean up :)"", 'comment_created': datetime.datetime(2023, 8, 2, 10, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281885967, 'comment_body': 'What do you think of this look?\r\n![image](https://github.com/metabrainz/bookbrainz-site/assets/6179856/2de2e274-cdbf-435b-a735-f866c3c2e42f)\r\n\r\nIn short:\r\n- more/less button -> chevron icon with a rotation (css classes: `btn btn-sm margin-left-d10`)\r\n- use entity icons and link phrase on the same line as the relationship name, for an easy overview\r\n- description in small text (`<small>` element) under the name+link phrase\r\n- less margin for the expanded info (using indent level *10 instead of *20) but with a border (css styles: `    padding: 1em; border: 1px solid black; border-width: 1px 0;`)\r\n\r\nWhat do you think?', 'comment_created': datetime.datetime(2023, 8, 2, 13, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281891196, 'comment_body': ""I wonder if it might be easier to use react-bootstrap's Accordion component here. Not sure, but worth having a look"", 'comment_created': datetime.datetime(2023, 8, 2, 13, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281892140, 'comment_body': '`expandedRelationshipTypeIds` is not needed as a dependency here as far as I can tell', 'comment_created': datetime.datetime(2023, 8, 2, 13, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281892862, 'comment_body': 'I quite like the card with the big header.', 'comment_created': datetime.datetime(2023, 8, 2, 13, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281905889, 'comment_body': ""I mentioned this before in more details, but we'll want the list of relationship types to be accessible to everyone (most likely in another menu dropdown)"", 'comment_created': datetime.datetime(2023, 8, 2, 13, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281906819, 'comment_body': 'Great to see this improvement !', 'comment_created': datetime.datetime(2023, 8, 2, 13, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281938553, 'comment_body': 'We might be able to do a nice layered icon, using two different icons one on top of the other to make a new one:\r\nhttps://origin.fontawesome.com/v5/docs/web/style/layer\r\n\r\nI\'m thinking a combination of the link icon and the edit icon:\r\nhttps://fontawesome.com/icons/pencil?f=classic&s=solid\r\n\r\nMaybe something very roughly along those lines? https://codepen.io/Monkeyyyy/pen/VwVgpYQ\r\nJust spitballing…\r\n<img width=""91"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/ef6fff47-0ccb-48ec-9a00-1b8e445a9648"">\r\n', 'comment_created': datetime.datetime(2023, 8, 2, 13, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281976289, 'comment_body': 'hashtag #CheckYourPrivilege', 'comment_created': datetime.datetime(2023, 8, 2, 14, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281977570, 'comment_body': '```suggestion\r\n\tconst commonAttributes = oldAttributes.filter(value => newAttributes.includes(value));\r\n```', 'comment_created': datetime.datetime(2023, 8, 2, 14, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281987890, 'comment_body': ""I'm not certain what the order of execution is here. we're not awaiting the return value of the map method so it's possibly the further down `await trx.commit()` could be called before these `RelationshipTypeAttributeType` promises are finished.\r\n\r\nI usually do something along the lines of:\r\n```\r\n// note we are creating an array of promises, not awaiting them yet\r\nconst relTypeAttributeTypePromises = attributesToBeRemoved.map(attributeID => new RelationshipTypeAttributeType() …\r\n[…]\r\n// await all the promises\r\nawait Promise.all(relTypeAttributeTypePromises);\r\nawait trx.commit();\r\n```\r\n\r\nAnother important detail: you should be passing the transaction object to the [destroy function options](https://bookshelfjs.org/api.html#Model-instance-destroy): `.destroy({transacting: trx});`"", 'comment_created': datetime.datetime(2023, 8, 2, 14, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281991734, 'comment_body': ""This was correct previously.\r\nWe want the admin log to be fully public, meaning  we don't require any privilege nor even that a user be logged in.\r\nSee for example https://critiquebrainz.org/log/ in a new incognito browser tab"", 'comment_created': datetime.datetime(2023, 8, 2, 14, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281992265, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 8, 2, 14, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281993953, 'comment_body': 'Same comment as with the admin logs, this relationship types page should be fully public and available without an account.', 'comment_created': datetime.datetime(2023, 8, 2, 14, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1281994774, 'comment_body': 'Now this is perfectly correct, we only want logged in users with RELATIONSHIP_TYPE_EDITOR privs to be able to access this page :+1:', 'comment_created': datetime.datetime(2023, 8, 2, 14, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1282001425, 'comment_body': 'Probably not the ideal name with a `/` in it. How about `relationship-type-editor` or `create-relationship-type`?', 'comment_created': datetime.datetime(2023, 8, 2, 14, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1282156920, 'comment_body': ""I would even say that this constant is a candidate to be included in the bb-data repo, as are some of the type definitions above.\r\nHave you already worked with `yarn link` or `npm link` so far? I'm aware that it is annoying to work on two repos in parallel, but as @MonkeyDo and I have discussed on IRC yesterday, we really have to start getting the types defined in the right place with consistent names. The current situation (not your PR) is a mess with lots of overlapping and inconsistently defined types, so there is some work ahead of us. It's always going to be a pain before it gets better...\r\n\r\nSpecifically in this case we could also make use of a [nice trick](https://github.com/kellnerd/musicbrainz-scripts/blob/ed8a539113dba54e59c59e42e47d3e1b766a2a81/src/types/MB/common.d.ts#L2-L18) to avoid having to define both the array and the type and keep them in sync."", 'comment_created': datetime.datetime(2023, 8, 2, 16, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1282176601, 'comment_body': '```suggestion\r\n\tif (!_.isInteger(idToNumber) || idToNumber <= 0)) {\r\n```\r\nCan be optimized thanks to short-circuit evaluation.', 'comment_created': datetime.datetime(2023, 8, 2, 16, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1282353129, 'comment_body': 'As a matter of fact, I did try Accordion. It does not look clean with the tree structure(maybe there are ways to make it work, but I was not able to make it into a nice looking tree structure). Had it been for something where the levels of all the sub-components are same, then it would have worked. ', 'comment_created': datetime.datetime(2023, 8, 2, 19, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1286147944, 'comment_body': ""Indeed, I've just came across a few places in bb-data where I can also make use of this constant now that I'm refactoring the type definitions :grin:\r\nSo I will definitely create the definition over there right now."", 'comment_created': datetime.datetime(2023, 8, 7, 16, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1291723744, 'comment_body': ""You're right. Fixed!"", 'comment_created': datetime.datetime(2023, 8, 11, 19, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1291723910, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2023, 8, 11, 19, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1291730306, 'comment_body': ""I've added a Docs menu.\r\n![DocsDropdown](https://github.com/metabrainz/bookbrainz-site/assets/56965261/f0e8040b-b928-4d2b-9ae2-a98d99aa8937).\r\n\r\nI've extracted the FAQs into a separate page as a first step. But I think we can get rid of the Help Page altogether and add the following links here: \r\n- User Guide and Documentation\r\n- Entities\r\n- Glossary\r\n\r\nWhat do you think?\r\n"", 'comment_created': datetime.datetime(2023, 8, 11, 20, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1291774516, 'comment_body': 'I like the idea of combining these two icons. \r\nHowever, this is how it would look when we hover over the option:\r\n![rel-edit-icon-selected](https://github.com/metabrainz/bookbrainz-site/assets/56965261/04b4c9a3-f943-4b90-9066-54bac689157a)\r\n\r\nAnother thing is that I think a black and white icon would be more consistent, but this type of layering will probably not be enough to create a black and white icon, as it would not look good in areas where they overlap:\r\n![Rel_edit-icon-layered](https://github.com/metabrainz/bookbrainz-site/assets/56965261/54fb39de-fc3a-433f-9450-f4f291b10741)\r\n\r\nWe might have to create our own version using these two icons.\r\n', 'comment_created': datetime.datetime(2023, 8, 11, 21, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1291775096, 'comment_body': 'Ideally we would want the link icon to be white in color in places where it overlaps with the pencil icon. Then I think it would look nice. What do you think?', 'comment_created': datetime.datetime(2023, 8, 11, 21, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1295589003, 'comment_body': ""I think it would be best if I make the bb-data types related changes at the end. It would help me align my changes to the ones you're going to make in your (upcoming?) PR. "", 'comment_created': datetime.datetime(2023, 8, 16, 8, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1295681686, 'comment_body': ""Yeah, I guess so. Theoretically that part is ready, but some of the changes could be considered breaking changes and I don't want to cause a major version bump every time I have some more changes in bb-data.\r\nIt's probably better to wait with a new release until I've finished my first pass of improving the type definitions."", 'comment_created': datetime.datetime(2023, 8, 16, 10, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kellnerd', 'type': 'User'}, {'comment_id': 1295760559, 'comment_body': ""Let's keep this for a separate PR, but I agree with you we need to review the content of this menu.\r\nI don't consider this part of your GSoC project, so you can leave it with me to look at."", 'comment_created': datetime.datetime(2023, 8, 16, 11, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1295876955, 'comment_body': 'Proposal: moving this link back in the same column as the admin logs link (like it was before), but as a div with the class `small` rather than a `<small>` element.\r\nThen removing the empty `<Col xs={4}/>` on line 70, and making the middle column full width.\r\n\r\nThis will make a wide row at the bottom and three columns at the top, and avoid some of the wrapping issues we have with the long commit name:\r\n\r\nThe top row, last column:\r\n```\r\n\t\t\t\t\t<Col className=""text-right"" xs={4}>\r\n\t\t\t\t\t\t<div className=""small"">\r\n\t\t\t\t\t\t\t<a href=""/admin-logs"">\r\n\t\t\t\t\t\t\t\tAdmin Logs\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=""small"">\r\n\t\t\t\t\t\t\t<a href=""/privacy"">\r\n\t\t\t\t\t\t\t\tPrivacy & Terms\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Col>\r\n```\r\nThe bottom row:\r\n```\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col className=""text-center"" xs={12}>\r\n\t\t\t\t\t\t<small>\r\n\t\t\t\t\t\t\tAlpha Software —{\' \'}\r\n\t\t\t\t\t\t\t<a href={`${repositoryUrl}tree/${siteRevision || \'master\'}`}>\r\n\t\t\t\t\t\t\t\t{siteRevision || \'unknown revision\'}\r\n\t\t\t\t\t\t\t</a> —&nbsp;\r\n\t\t\t\t\t\t\t<a href=""https://tickets.metabrainz.org/projects/BB/issues/"">\r\n\t\t\t\t\t\t\t\tReport a Bug\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</small>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n```\r\n\r\nAnd the result:\r\n<img width=""421"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/d354ebb0-72c8-4967-8707-ed98969b3cb2"">\r\n', 'comment_created': datetime.datetime(2023, 8, 16, 13, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1295896097, 'comment_body': 'It seems here that for every nesting level the inner margin of the rel-type details increases, which is probably not what you\'re after.\r\nThis doesn\'t look like the right approach, adding the same css classes to each inner element to add a margin.\r\nThat\'s what padding is for ! :)\r\n\r\nIn this case, it should be as simple as adding the `small` class to the containing element instead of the children (`<div className=""relationship-type-details small"">`) and adding a larger padding to the left and right. Then you can remove the `relInnerElementsClass` entirely:\r\n```\r\n.relationship-type-details{\r\n\tpadding: 1em 2.5em;\r\n\tborder: 1px solid black;\r\n\tborder-width: 1px 0;\r\n}\r\n```\r\n\r\nYou should end up with the same look:\r\n\r\n<img width=""584"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/b0132a98-9920-4d8c-8c3e-4b12eecd299d"">\r\n', 'comment_created': datetime.datetime(2023, 8, 16, 13, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1295900869, 'comment_body': 'We should display a helpful message if there are no relationships to show. Currently it looks like maybe the page is broken or maybe something went wrong:\r\n<img width=""690"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/f993c851-ee42-49df-919d-108f2b5be281"">\r\n', 'comment_created': datetime.datetime(2023, 8, 16, 13, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1295908339, 'comment_body': 'OK, I\'ve got it now.\r\nHaving thought about it some more, this link should probably be called ""Create relationship type"" instead and have this icon combination:\r\n<img width=""89"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/671bde84-7009-455b-84a8-fa7493b5dc57"">\r\n\r\nWhat do you think, does that make more sense?\r\n\r\nFor the layered icon:\r\nhttps://codepen.io/Monkeyyyy/pen/VwVgpYQ', 'comment_created': datetime.datetime(2023, 8, 16, 13, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1295945375, 'comment_body': ""I am curious if you have a use-case for why we need this custom function rather than using lodash's [startCase](https://lodash.com/docs/4.17.15#startCase) directly"", 'comment_created': datetime.datetime(2023, 8, 16, 13, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1296017111, 'comment_body': 'Found the issue ! :D \r\nSneaky one that one.\r\n```suggestion\r\n\t\tconst res = await agent.get(`/relationship-type/${relationshipTypeId}/edit`);\r\n```', 'comment_created': datetime.datetime(2023, 8, 16, 14, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1296018003, 'comment_body': ""Same missing`/` issue as above.\r\nAlso, without the correct privs, we should get a 403 response *before* we get to the point where the rel type is loaded from the DB (which would 404 in this case)\r\n```suggestion\r\n\tit('should throw a 403 error when trying to edit a non-existent relationship type', async () => {\r\n\t\tconst relationshipTypeId = 222;\r\n\t\tconst res = await agent.get(`/relationship-type/${relationshipTypeId}/edit`);\r\n\t\texpect(res.ok).to.be.false;\r\n\t\texpect(res).to.have.status(403);\r\n```"", 'comment_created': datetime.datetime(2023, 8, 16, 14, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1296028540, 'comment_body': ""This could be confusing. At first I was surprised this worked, because I was expecting editing a rel type without any changes to throw an error. Then I realized we're not actually editing anything here, just accessing the page.\r\nCan you go through the test names in this file again, and apply the same change wherever it could be confusing?\r\n```suggestion\r\n\tit('should not throw accessing the relationship type editor', async () => {\r\n```"", 'comment_created': datetime.datetime(2023, 8, 16, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1296196024, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 8, 16, 17, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1296196325, 'comment_body': 'I agree. Fixed!', 'comment_created': datetime.datetime(2023, 8, 16, 17, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1296196922, 'comment_body': 'Thanks for the suggestion. Fixed!', 'comment_created': datetime.datetime(2023, 8, 16, 17, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1296202746, 'comment_body': 'So......I actually needed this for statements related to `Edition Group`. For example: The heading in RelationshipTypeTree component has the format ""EntityType1-EntityType2 relationship types"". For this, I was faced with the dilemma of what should I use for EditionGroups: should be called edition_group, Editiongroup, EditionGroup or Edition Group. I eventually settled with the sentenceCase because that\'s what musicbrainz [does](https://musicbrainz.org/relationships/release_group-release_group). \r\n\r\nDo you think this is reasonable?', 'comment_created': datetime.datetime(2023, 8, 16, 17, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1296204135, 'comment_body': 'fixed!', 'comment_created': datetime.datetime(2023, 8, 16, 17, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1296212324, 'comment_body': 'I love the suggestion for the icon. I was able to create a somewhat similar one using React FontAwesomeIcon as shown here. I have skipped the color styling as we only need a black and white. This is how it looks:\r\n![relationship-type-icon](https://github.com/metabrainz/bookbrainz-site/assets/56965261/b9641219-6ad1-4dc9-8e43-d4b8e46cdd7f)\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 16, 17, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1296943440, 'comment_body': 'Oh, I understand the reason why you want the current result, and I agree!\r\n\r\nHowever my question was about the implementation.\r\nIn the context of these entity names (which is all the code is used for IIUC), I don\'t see anything that your custom function does that lodash\'s `startCase` utility doesn\'t:\r\n<img width=""313"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/1985b65e-9d06-42be-8ccb-4f5aeed8b6b6"">\r\n\r\nI\'m just suggesting to drop this custom `snakeCaseToSentenceCase`  and use `startCase` instead.\r\nIIUC start case and sentence case are the same thing (at least where our entity names are concerned…)', 'comment_created': datetime.datetime(2023, 8, 17, 9, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1297077549, 'comment_body': 'Looking good !', 'comment_created': datetime.datetime(2023, 8, 17, 11, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1297403503, 'comment_body': ""You're right! "", 'comment_created': datetime.datetime(2023, 8, 17, 15, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}]","[{'commit_sha': 'b7b2230f0a857680be77ee59f80072e3e3077054', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a675445f37f07bb3c79f93ad7bc5610c43ec0028', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c49e91b565683c12067679facd34cdccbe00244', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13aad368aed5152da434951152b72342bf0bc7b0', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb5dec372acd7cb9ac69ca74e1c249526ccebf8c', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d0ba2c548a8080da576f8d9e4ef24899a386d1', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7f6a07ce99878dbd80750d0cf4a43101357ee7c', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf02554f714d03d97908e5f93a42e2afe7880b0', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd48bc5b7ef0a87581781b0f720cfed86a3c12cf8', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb0b5da39f2b56aef6bde1393b4478d60f0c4b90', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '756418010d2f96ad5b1e14efb4ea9bfd36ce5093', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2f2802f59eae778921b917dffcf281ca383652', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aa66c344bb13b76f22a2e51ec7f84810dd71071', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b606785507b55206a91c128f3e4f53d4ce517626', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b38d032217b48f9c3f880724fec8c1ad3bff782', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bbeb3df7454abc00f581d6d22159b6e58ba41b8', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b722b624ff33c18f01c587fc7d6eec99b6940a', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '333b3043eef1286dd913c4af877d6dcd2a09d558', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bbc18446a23cc51da8fb2441bdf5b10517a329d', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b10fcfc1468d7737c243d043ffc2507c97c6ef9', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c998fe74f28b838931dc6d5a52d9f39a20d6320', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '399caf13dacfa460005e451fac909f7c6eda5473', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291c54ad7cae001ee354861ff535ffc8fe258831', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68d4dc4bb65fb00c8f204e86132164380393498', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '361e0246a58c9cd9cf5d037d3c690ead92e1ab68', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd44d67a1e4ad54302ae3f0230cd77d402d253585', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}]",Shivam Awasthi,56965261,,User,,8,,3,1
1481560440,feat(Identifier types): Identifier Types Page and Identifier Types Editor,"This PR deals with Identifier Types.

Now, there is link to access an Identifier Types Page from the 'Docs' Menu:
![identifierTypesLink](https://github.com/metabrainz/bookbrainz-site/assets/56965261/ea7e6593-dba7-4230-be4a-aee7679f80f0)


The new Identifier Types Page has the tree structure similar to the Relationship Types page. It also has tabs for different entity types!
![identifierTypesPage](https://github.com/metabrainz/bookbrainz-site/assets/56965261/b30bce67-9f86-4d59-aa95-2354699dd9ef)


We also have a link to go to an Identifier Type Editor:
![identifierTypeEditorLink](https://github.com/metabrainz/bookbrainz-site/assets/56965261/dedb83a8-710e-47b8-9e5c-32b503cecc6c)

Now, privileged users can add and edit identifier types!
![identifierTypeEditor](https://github.com/metabrainz/bookbrainz-site/assets/56965261/844cbfd4-c53e-4502-b616-6cc20afe626f)

",True,1012,https://api.github.com/repos/metabrainz/bookbrainz-site/pulls/1012,https://github.com/metabrainz/bookbrainz-site/pull/1012,closed,1229,38,22,15,4,39,0,0,[],2023-08-19 19:32:17+00:00,2023-09-18 16:57:07+00:00,2582690.0,"29 days, 21:24:50","[{'comment_id': 1299861084, 'comment_body': '`<p>` elements can\'t be nested, so let\'s make this a div instead.\r\nWe can also directly give it the `small`  css class and get rid of the `<small>` element.\r\n\r\n\r\nSeparately to that, I was wondering if it would make sense to show the display format here as well as a convenient preview.\r\nHere\'s what it could look like, what do you think? Useful?\r\n<img width=""766"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/39114d6b-170b-4ed9-86d0-9821a45fabc3"">\r\nAs you can see in the screenshot I tried adding two different classes to it: `text-muted` or `text-info`; not sure which one I prefer.\r\nThe code end up looking like this:\r\n```\r\n<p class=""small"">\r\n  <div class=""text-info"">https://viaf.org/viaf/{value}</div>\r\n  The VIAF ID corresponding to a BookBrainz publisher\r\n</p>\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 9, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1299886440, 'comment_body': 'As described in the IRC channel, this error is just thrown in the console as an HTML page rather than showing an error message to the user.\r\nThe fact that the error received is an HTML error probably also means the cause error (in this case `duplicate key value violates unique constraint ""identifier_type_pkey""`)  is not being caught properly by the server to send a machine-readable error with  the right error code.', 'comment_created': datetime.datetime(2023, 8, 21, 9, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1299887280, 'comment_body': 'Supposedly this should be required too? (Although the code does seem to work)\r\n```suggestion\r\n\t}, [formData.entityType, formData.parentId]);\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 9, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1299892552, 'comment_body': ""I don't think the w-100 class is necessary. It can be removed from both buttons and result in the same layout."", 'comment_created': datetime.datetime(2023, 8, 21, 9, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1299900050, 'comment_body': 'Seems a bit out of scope for this PR, but could you please add the `fixedWidth` attribute for all the icons in this menu?\r\nhttps://origin.fontawesome.com/v5/docs/web/use-with/react#fixed-width-icons\r\n\r\nBefore:\r\n<img width=""222"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/87bb7c45-fc30-4bfa-9fef-c2301ae77237"">\r\n\r\n\r\nAfter: \r\n<img width=""226"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/70b7d8f0-4c7d-44d0-9817-ccc22879c81b"">\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 10, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1299900601, 'comment_body': 'Layered icons again?\r\nBarcode and plus sign?', 'comment_created': datetime.datetime(2023, 8, 21, 10, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1299913034, 'comment_body': 'Here is probably where the error is transformed into an HTML error page (caught down the line [here](https://github.com/metabrainz/bookbrainz-site/blob/10cba4a27844e70424daf4fea492c9a45ecd673a/src/server/app.js#L150-L154)).\r\nYou should send a more specific type of error instead (with an appropriate error message):\r\nhttps://github.com/metabrainz/bookbrainz-site/blob/9c4740de09628d2be051862b02e8795be4f4d9ce/src/server/helpers/middleware.ts#L205', 'comment_created': datetime.datetime(2023, 8, 21, 10, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1299915129, 'comment_body': ""I don't think we need the transaction here, unless I'm missing something "", 'comment_created': datetime.datetime(2023, 8, 21, 10, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1302000732, 'comment_body': 'Looks good to me. I have gone ahead with the `text-muted` class.', 'comment_created': datetime.datetime(2023, 8, 22, 17, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1302011487, 'comment_body': 'I dont think this is required.\r\n\r\nInitially, when there is no entityType selected we show the entire list of identifierTypes as possible parentTypes. When we select an entityType, then we filter this list of identifierTypes so that all possible parentTypes have the same entityType. Now, even if we change parentId from here on, the list will remain the same since there is no change in the entityType.', 'comment_created': datetime.datetime(2023, 8, 22, 18, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1302013660, 'comment_body': ""I've made some changes to prevent throwing of error as an HTML page.\r\n\r\nIf you agree with this change, I will make similar changes to the relationship-type editor too."", 'comment_created': datetime.datetime(2023, 8, 22, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1303358439, 'comment_body': ""Just a small nitpicking. You've used both `IdentifierTypeId` and `idenTypeId`. It's better to stick to a consistent naming convention, like `identifierTypeId`."", 'comment_created': datetime.datetime(2023, 8, 23, 17, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1303371613, 'comment_body': ""The initial value of `selectedParentType` should be taken from the `identifierTypeData` prop, not directly from `formData`, as it's being used as an initial value and may not reflect the latest prop data.\n\n```suggestion\n\tconst [selectedParentType, setSelectedParentType] = useState<number | null>(identifierTypeData.parentId);\n```"", 'comment_created': datetime.datetime(2023, 8, 23, 18, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1303468625, 'comment_body': 'Will this work for a new user who has downloaded the dump and setup their local environment or do they have to run this migration again?\r\n\r\nAlso what if we have lets say 60 identifiers in the data dump, and then we create a new a new identifier. Will it work?', 'comment_created': datetime.datetime(2023, 8, 23, 19, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1304203141, 'comment_body': ""There is an arcane incantation to use the highest ID value dynamically, see https://stackoverflow.com/questions/5342440/reset-auto-increment-counter-in-postgres/55024610#55024610\r\n\r\nSomething like this perhaps? (⚠️ untested ⚠️ )\r\n\r\n`SELECT SETVAL('identifier_type_id_seq', (SELECT MAX(id) FROM identifier_type));`"", 'comment_created': datetime.datetime(2023, 8, 24, 11, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1304235985, 'comment_body': ""I would rather you use the error helpers that exist, including the sendErrorAsJSON utility like so:\r\nhttps://github.com/metabrainz/bookbrainz-site/blob/10cba4a27844e70424daf4fea492c9a45ecd673a/src/server/helpers/auth.js#L138\r\n\r\nExcept in this case it would be something like:\r\n`return error.sendErrorAsJSON(res, new error.SiteError('A problem occurred while saving the identifier type')); `\r\nNote that I made the error message a bit clearer while at it."", 'comment_created': datetime.datetime(2023, 8, 24, 12, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1305493309, 'comment_body': 'I did reset my db and tested this out. After applying the migration, it works well.', 'comment_created': datetime.datetime(2023, 8, 25, 10, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'anshg1214', 'type': 'User'}, {'comment_id': 1311528358, 'comment_body': ""It won't change much, but you can use `event.target.valueAsNumber` directly:\r\n```suggestion\r\n\t\tsetChildOrder(event.target.valueAsNumber || 0);\r\n```"", 'comment_created': datetime.datetime(2023, 8, 31, 12, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311531744, 'comment_body': 'The name of this function suggests more validation than just whether an entity type has been selected. \r\nIs a portion of this validation function missing?', 'comment_created': datetime.datetime(2023, 8, 31, 12, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311532907, 'comment_body': 'The `===`  and  `!==` and other comparison operators already return a boolean:\r\n```suggestion\r\n\t\treturn JSON.stringify(formData) !== JSON.stringify(identifierTypeData);\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 12, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311546213, 'comment_body': ""I'd like to avoid mixing `.then` and `await` promise styles, it makes the code harder to read and reason with.\r\n\r\nI looked at the superagent docs quickly to see the synta, but they don't make the error handling with await very clear.\r\nHowever, I found this issue which explains it: https://github.com/ladjs/superagent/issues/1148\r\nShould be something like this:\r\n```\r\n  try {\r\n    const response = await request.post(submissionURL).send(formData)\r\n    window.location.href = '/identifier-types';\r\n  } catch (err) {\r\n    const errorMessage = err.response.body.error;\r\n    setErrorMsg(errorMessage);\r\n    setTimeout(() => {\r\n      setErrorMsg('');\r\n    }, 3000);\r\n  }\r\n```"", 'comment_created': datetime.datetime(2023, 8, 31, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311573397, 'comment_body': ""array.find will return undefined if no item satisfies the assertion, so let's be safe:\r\n```suggestion\r\n\t\t\tconst parentType = parentTypes.find(type => type.id === formData.parentId);\r\n\t\t\tif (formData.entityType && formData.entityType !== parentType?.entityType) {\r\n```"", 'comment_created': datetime.datetime(2023, 8, 31, 12, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311580282, 'comment_body': 'I think the naming here is confusing. On such a page, when I see a ""Submit"" button, I expect that to be the final ""I filled everything, now I\'m submitting the form"" which this modal button isn\'t.\r\n\r\nI would suggest something more neutral like ""Select Parent"" or ""Add Parent""\r\n', 'comment_created': datetime.datetime(2023, 8, 31, 12, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311584754, 'comment_body': ""Currently, I am able to edit an existing identifier and set itself as the parent identifier.\r\n\r\nWe should probably filter out any item that matches the current identifier's ID (if it has one)"", 'comment_created': datetime.datetime(2023, 8, 31, 12, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311591620, 'comment_body': 'Same trick as above, you should be able to simply `toggleExpand(event.target.valueAsNumber);`', 'comment_created': datetime.datetime(2023, 8, 31, 12, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311602898, 'comment_body': 'Despite having the correct privileges on test.BB, I don\'t see the reindex search server option in the privileges menu:\r\n<img width=""255"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/86d5e280-0b32-40de-b113-22b4ba6ea328"">\r\n\r\nWhat do?\r\n\r\nI can however access the /search/reindex route successfully with the right privs, but not without the right privs so on that front everything works as expected :+1:\r\n', 'comment_created': datetime.datetime(2023, 8, 31, 13, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311607644, 'comment_body': ""Thank you !\r\nI've been wanted this gone since the first time I saw it in the codebase !"", 'comment_created': datetime.datetime(2023, 8, 31, 13, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1311649188, 'comment_body': ""~~I looked into it a bit more and found the underlying issue: the checkPrivilege function returns false for the inputs 23 and 8 (23 being my current privs and 8 being the REINDEX_SEARCH_SERVER priv)~~\r\n\r\n~~If you try the JS snippet `Boolean(23 & 8)` indeed it evaluates as false~~\r\n\r\n\r\n\r\nTHAT'S RIGHT! I forgot I need to log out and log back in to have my privs up to date on the session.\r\nWill definitely have to think about how to resolve that issue (busting the session cache for that user or forcefully logging them out), but it's not a blocker."", 'comment_created': datetime.datetime(2023, 8, 31, 13, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1327947834, 'comment_body': 'Thanks for the suggestion. Fixed it! ', 'comment_created': datetime.datetime(2023, 9, 16, 11, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1327947911, 'comment_body': ""You're right! Fixed it. "", 'comment_created': datetime.datetime(2023, 9, 16, 11, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1327948101, 'comment_body': 'This needs to be fixed in the Relationship Type Editor, too. ', 'comment_created': datetime.datetime(2023, 9, 16, 11, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1327948166, 'comment_body': ""I've fixed this. Now the parentTypes prop will no longer have the identifierType being edited. "", 'comment_created': datetime.datetime(2023, 9, 16, 11, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1328127995, 'comment_body': 'At the outset, I wanted an `isValid` function to check those required fields on the form which cannot directly be checked by adding a `required` flag. In case of the relationship type editor, there were two such fields: a `sourceEntityType` and a `targetEntityType`. In this case, we only have one such field: `entityType`.\r\n\r\nI agree the name `isValid` itself is a bit more general(and maybe misleading), perhaps it should have been something like `checkRequiredFields`. We can also get rid of this function here, but I went ahead with it just to make it similar to the relationship type editor code.', 'comment_created': datetime.datetime(2023, 9, 17, 18, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1328128502, 'comment_body': '`event.target.valueAsNumber` returns undefined in this case. It seems to work in the previous case, but here I think its not working because we are passing `idenType.id` as a value prop in the Button, and then using it. ', 'comment_created': datetime.datetime(2023, 9, 17, 18, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1328964507, 'comment_body': 'Ideally it should check all the required fields, but the combination of the `required` attribute on the inputs and the error thrown by the server is probably sufficient.\r\nTrying to prove that point, I edited the html to remove the required attribute on all the inputs (but selecting an entity type to satisfy `isValid`) and I can submit with empty values, and get an error back from the server:\r\n<img width=""746"" alt=""image"" src=""https://github.com/metabrainz/bookbrainz-site/assets/6179856/3c0f2073-5c7e-449d-a5f2-96d19b6627f5"">\r\n\r\n\r\nIMO this is sufficient for this type of interface, and if proper validation should be done it should be done on the server-side.', 'comment_created': datetime.datetime(2023, 9, 18, 16, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1328970218, 'comment_body': 'I took the liberty of pushing that :)', 'comment_created': datetime.datetime(2023, 9, 18, 16, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 1328990539, 'comment_body': 'so what I mean by required fields is this: for non-select fields, there is prompt which occurs like this in case we try to submit the form without entering anything in that field:\r\n![Screenshot 2023-09-18 215839](https://github.com/metabrainz/bookbrainz-site/assets/56965261/862b0e14-cb58-4d43-8b0c-2b68933a22d9)\r\n\r\nFor the select type fields, there is no such validation. In order to prevent sending incomplete data to backend, we should probably use this function to do this in frontend itself:\r\n![Screenshot 2023-09-18 at 22-02-12 BookBrainz – The Open Book Database](https://github.com/metabrainz/bookbrainz-site/assets/56965261/7a6fa73c-f792-4291-b951-e0752e1ea24e)', 'comment_created': datetime.datetime(2023, 9, 18, 16, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1329006081, 'comment_body': ""Although you're right, ideally we should be doing for all the fields. The only reason I went for this is because for the non-select fields at least there is a prompt which tells us `Please fill out this field.`, while for the select field, there is no such prompt."", 'comment_created': datetime.datetime(2023, 9, 18, 16, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'the-good-boy', 'type': 'User'}, {'comment_id': 1329010230, 'comment_body': '> so what I mean by required fields is this: for non-select fields, there is prompt which occurs like this in case we try to submit the form without entering anything in that field:\r\n\r\nYep, completely understand, tested and approved :)\r\nI just tried to break it by manually modifying the HTML in my page to allow empty inputs, which would not normally happen in any reasonable circumstance I can imagine.', 'comment_created': datetime.datetime(2023, 9, 18, 16, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}]","[{'commit_sha': 'd1f4ec93714646a9f70f436921e1a56f1c5db3f2', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8cfdef8bf11aaefaac73d4a987c791a6cffffb5', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '533156a846d645c01503f3b1e245555b8e7cf485', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154be66c12d24066e12d0f3ccda564b5f8fc413b', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78071dc72a414a37b1e53a475174164e1696ab11', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '744b3995bc53d281ffd0c5b48f880d700f4172a3', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f97b11dbac8e1743af82d4c5c29a9fdae74d5b', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261ac7b171666d4cd8641b4cbc201830a2f8fc74', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4abe7f0444de9ce95912f0e50f4bc3adc9357cad', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '240d2fc9ea076268318c80d73dbaee1e787e4533', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56d8a83243805c1f0288075ea8221b14561dd9b', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3917a8445e3e2aef803dba9934ab40d2dfe2d36c', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fddcf26326d66f97ef02ef8d48c459cf08c6e46d', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c3016412c4a1e57bfb1fd2bc5ea2b0e12ff464', 'committer_username': 'the-good-boy', 'committer_name': 'Shivam Awasthi', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 24, 12, 51, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd820932372f7923748b0a5f5e7d9ac735f081fc', 'committer_username': 'MonkeyDo', 'committer_name': 'Monkey Do', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 13, 16, 38, 28, tzinfo=datetime.timezone.utc)}]",Shivam Awasthi,56965261,,User,,8,,3,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28521896,bookbrainz-site,metabrainz/bookbrainz-site,JavaScript,279,186,15,94,6138,20,21,20,"[{'id': 1481560440, 'number': 1012, 'closed': datetime.datetime(2023, 9, 18, 16, 57, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 19, 32, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2582690.0, 'time_delta': '29 days, 21:24:50', 'additions': 1229, 'deletions': 38, 'state': 'closed'}, {'id': 1456618810, 'number': 1005, 'closed': datetime.datetime(2023, 8, 18, 9, 16, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 16, 11, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1530322.0, 'time_delta': '17 days, 17:05:22', 'additions': 1681, 'deletions': 102, 'state': 'closed'}, {'id': 1439445716, 'number': 1001, 'closed': datetime.datetime(2023, 7, 28, 12, 10, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 15, 18, 42, tzinfo=datetime.timezone.utc), 'time_taken': 852728.0, 'time_delta': '9 days, 20:52:08', 'additions': 655, 'deletions': 66, 'state': 'closed'}, {'id': 1423014674, 'number': 1000, 'closed': datetime.datetime(2023, 7, 18, 10, 18, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 6, 14, 36, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1021274.0, 'time_delta': '11 days, 19:41:14', 'additions': 148, 'deletions': 89, 'state': 'closed'}, {'id': 1417769275, 'number': 999, 'closed': datetime.datetime(2023, 7, 4, 17, 58, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 9, 46, 1, tzinfo=datetime.timezone.utc), 'time_taken': 115953.0, 'time_delta': '1 day, 8:12:33', 'additions': 519, 'deletions': 70, 'state': 'closed'}, {'id': 1410074124, 'number': 998, 'closed': datetime.datetime(2023, 6, 28, 12, 37, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 27, 14, 54, 29, tzinfo=datetime.timezone.utc), 'time_taken': 78157.0, 'time_delta': '21:42:37', 'additions': 28, 'deletions': 38, 'state': 'closed'}, {'id': 1390527959, 'number': 996, 'closed': datetime.datetime(2023, 6, 24, 8, 40, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 13, 12, 37, 23, tzinfo=datetime.timezone.utc), 'time_taken': 936197.0, 'time_delta': '10 days, 20:03:17', 'additions': 1051, 'deletions': 2, 'state': 'closed'}, {'id': 1368981565, 'number': 993, 'closed': datetime.datetime(2023, 6, 6, 13, 1, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 29, 11, 22, 21, tzinfo=datetime.timezone.utc), 'time_taken': 697164.0, 'time_delta': '8 days, 1:39:24', 'additions': 55, 'deletions': 0, 'state': 'closed'}, {'id': 1274905813, 'number': 963, 'closed': datetime.datetime(2023, 3, 20, 17, 24, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 14, 11, 56, 27, tzinfo=datetime.timezone.utc), 'time_taken': 538080.0, 'time_delta': '6 days, 5:28:00', 'additions': 51, 'deletions': 0, 'state': 'closed'}, {'id': 1273347684, 'number': 957, 'closed': datetime.datetime(2023, 3, 20, 17, 18, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 13, 14, 2, 8, tzinfo=datetime.timezone.utc), 'time_taken': 616573.0, 'time_delta': '7 days, 3:16:13', 'additions': 22, 'deletions': 5, 'state': 'closed'}, {'id': 1238127058, 'number': 931, 'closed': datetime.datetime(2023, 3, 9, 15, 57, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 12, 18, 14, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2151771.0, 'time_delta': '24 days, 21:42:51', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 1238109469, 'number': 930, 'closed': datetime.datetime(2023, 2, 23, 16, 16, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 12, 17, 8, 10, tzinfo=datetime.timezone.utc), 'time_taken': 947285.0, 'time_delta': '10 days, 23:08:05', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 925649074, 'number': 841, 'closed': datetime.datetime(2022, 6, 21, 18, 8, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 2, 14, 59, 12, tzinfo=datetime.timezone.utc), 'time_taken': 4331337.0, 'time_delta': '50 days, 3:08:57', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 910865228, 'number': 837, 'closed': datetime.datetime(2023, 2, 21, 16, 59, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 15, 13, 50, 48, tzinfo=datetime.timezone.utc), 'time_taken': 26968139.0, 'time_delta': '312 days, 3:08:59', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 899056290, 'number': 830, 'closed': None, 'created': datetime.datetime(2022, 4, 4, 13, 49, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 29, 'deletions': 1, 'state': 'open'}, {'id': 881733212, 'number': 814, 'closed': datetime.datetime(2022, 9, 1, 16, 4, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 19, 37, 49, tzinfo=datetime.timezone.utc), 'time_taken': 14588790.0, 'time_delta': '168 days, 20:26:30', 'additions': 68, 'deletions': 58, 'state': 'closed'}, {'id': 878413283, 'number': 805, 'closed': datetime.datetime(2022, 3, 23, 16, 13, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 13, 15, 35, 56, tzinfo=datetime.timezone.utc), 'time_taken': 866226.0, 'time_delta': '10 days, 0:37:06', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 871879900, 'number': 793, 'closed': datetime.datetime(2022, 3, 4, 18, 29, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 4, 17, 46, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2608.0, 'time_delta': '0:43:28', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 871493233, 'number': 792, 'closed': datetime.datetime(2022, 3, 4, 18, 39, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 4, 9, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 31947.0, 'time_delta': '8:52:27', 'additions': 720, 'deletions': 606, 'state': 'closed'}, {'id': 813265680, 'number': 754, 'closed': datetime.datetime(2022, 1, 24, 10, 53, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 3, 16, 33, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1793973.0, 'time_delta': '20 days, 18:19:33', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 797113717, 'number': 737, 'closed': datetime.datetime(2021, 12, 21, 15, 35, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 7, 16, 54, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1204873.0, 'time_delta': '13 days, 22:41:13', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 631542472, 'number': 622, 'closed': datetime.datetime(2021, 9, 1, 15, 10, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 6, 15, 24, 38, tzinfo=datetime.timezone.utc), 'time_taken': 10194349.0, 'time_delta': '117 days, 23:45:49', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 629746103, 'number': 618, 'closed': datetime.datetime(2021, 9, 1, 14, 6, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 4, 12, 5, 54, tzinfo=datetime.timezone.utc), 'time_taken': 10375259.0, 'time_delta': '120 days, 2:00:59', 'additions': 93, 'deletions': 79, 'state': 'closed'}, {'id': 629283839, 'number': 617, 'closed': datetime.datetime(2022, 3, 3, 12, 37, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 3, 18, 33, 44, tzinfo=datetime.timezone.utc), 'time_taken': 26244242.0, 'time_delta': '303 days, 18:04:02', 'additions': 77, 'deletions': 10, 'state': 'closed'}, {'id': 592534390, 'number': 571, 'closed': datetime.datetime(2021, 4, 26, 17, 21, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 14, 12, 35, 1, tzinfo=datetime.timezone.utc), 'time_taken': 3732392.0, 'time_delta': '43 days, 4:46:32', 'additions': 51, 'deletions': 50, 'state': 'closed'}, {'id': 591913812, 'number': 567, 'closed': datetime.datetime(2021, 3, 22, 11, 58, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 19, 43, 14, tzinfo=datetime.timezone.utc), 'time_taken': 836106.0, 'time_delta': '9 days, 16:15:06', 'additions': 12, 'deletions': 4, 'state': 'closed'}, {'id': 591888733, 'number': 566, 'closed': datetime.datetime(2021, 3, 12, 19, 10, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 18, 55, 27, tzinfo=datetime.timezone.utc), 'time_taken': 888.0, 'time_delta': '0:14:48', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 569746485, 'number': 553, 'closed': datetime.datetime(2021, 3, 8, 10, 14, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 8, 20, 8, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2383547.0, 'time_delta': '27 days, 14:05:47', 'additions': 17, 'deletions': 13, 'state': 'closed'}, {'id': 561311697, 'number': 551, 'closed': datetime.datetime(2021, 2, 2, 14, 6, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 19, 25, 9, tzinfo=datetime.timezone.utc), 'time_taken': 672068.0, 'time_delta': '7 days, 18:41:08', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 560585780, 'number': 550, 'closed': datetime.datetime(2021, 1, 25, 19, 10, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 24, 11, 32, 28, tzinfo=datetime.timezone.utc), 'time_taken': 113897.0, 'time_delta': '1 day, 7:38:17', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
