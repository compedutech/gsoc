pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1407663761,Update MVP+Makefile.md," A bare minimum SQL-only extension, then write a document describing how to build it.",True,14,https://api.github.com/repos/IshaanAdarsh/Postgres-extension-tutorial/pulls/14,https://github.com/IshaanAdarsh/Postgres-extension-tutorial/pull/14,closed,898,0,1,30,3,155,1,1,[{'name': 'documentation'}],2023-06-26 10:35:29+00:00,2023-08-19 17:14:51+00:00,4689562.0,"54 days, 6:39:22","[{'comment_id': 1243017144, 'comment_body': ""The Makefile is technically optional, but I don't think I'd mention that."", 'comment_created': datetime.datetime(2023, 6, 27, 1, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243017616, 'comment_body': 'I wonder if `ini` syntax would work well here.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243018431, 'comment_body': 'I suggest adding some notes about what these do and a link to the docs.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243018722, 'comment_body': 'Mention that the double-dash is meaningful so that Postgres know which part of the file name is the version number.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243018904, 'comment_body': 'Old line?', 'comment_created': datetime.datetime(2023, 6, 27, 1, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243020796, 'comment_body': ""I suggest starting with a function rather than a table. Something as simple as this will do:\r\n\r\n``` sql\r\nCREATE FUNCTION add_two(\r\n    n int\r\n) RETURNS INT LANGUAGE SQL AS 'SELECT n + 2';\r\n```   "", 'comment_created': datetime.datetime(2023, 6, 27, 1, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243021275, 'comment_body': ""Omit mention of the object file here, since this extension doesn't have one."", 'comment_created': datetime.datetime(2023, 6, 27, 1, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243022306, 'comment_body': ""Since you've solved this problem, do you need to keep this comment?"", 'comment_created': datetime.datetime(2023, 6, 27, 1, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243023199, 'comment_body': 'Say something here about how PGXS is a library of Makefile commands to simplify building and installing extensions just by setting variables it reads, like `EXTENSION` and `DATA`.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243023463, 'comment_body': 'This is true, although here there is nothing to compile.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243023763, 'comment_body': 'I suggest you show the output of all the commands you run.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243023976, 'comment_body': 'This output is not SQL; use plain text formatting.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243024633, 'comment_body': ""I don't understand this sentence, since you didn't have the reader change the table name, nor is there a function call. Leftover from a previous doc?"", 'comment_created': datetime.datetime(2023, 6, 27, 1, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243025304, 'comment_body': 'Why would you be creating this table when the extension already creates it? The first thing the script should do is `CREATE EXTENSION my_extension`.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243026225, 'comment_body': 'Mention that it should be *exactly* the expected text from the script.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243026360, 'comment_body': '```suggestion\r\n- If the expected file matched the results, the teat passed.\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 1, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243026842, 'comment_body': 'Include output to show what that looks like.', 'comment_created': datetime.datetime(2023, 6, 27, 1, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243027275, 'comment_body': ""It will also create a diff file showing the difference between actual and expected output. One should include this file in one's `.gitignore` file."", 'comment_created': datetime.datetime(2023, 6, 27, 1, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243028255, 'comment_body': 'Oh, you have it below, never mind!', 'comment_created': datetime.datetime(2023, 6, 27, 1, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243156501, 'comment_body': ""Sure i'll change it."", 'comment_created': datetime.datetime(2023, 6, 27, 5, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243157933, 'comment_body': 'I had a funtion in the previous code, but due to some issue, it was not working in the regression testing.\r\nSo i switched to the `CREATE TABLE`\r\n\r\nI will figure out where i went wrong and will add a function to the SQL file as well', 'comment_created': datetime.datetime(2023, 6, 27, 5, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243158749, 'comment_body': 'These comments are just for my reference, just to make sure that if i run into these issues again i know what the problem and the solution is', 'comment_created': datetime.datetime(2023, 6, 27, 5, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243159276, 'comment_body': 'I will add a comment expalining each line of the code.\r\nI will add another section on PGXS and PGXN after regression testing, to cover all bases', 'comment_created': datetime.datetime(2023, 6, 27, 5, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243160332, 'comment_body': ""yup I mentioned this in the comments, I will add a line that specifies in this particular extension code there is No Modules to install, so make doesn't serve a purpose."", 'comment_created': datetime.datetime(2023, 6, 27, 5, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243161726, 'comment_body': 'the first part of the point is faulty i will look into it\r\n\r\nyup, the function call is something I have to fix.\r\nWhen I fix the function, the 2nd part of the line will make sense.', 'comment_created': datetime.datetime(2023, 6, 27, 5, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243163442, 'comment_body': 'yup\r\n', 'comment_created': datetime.datetime(2023, 6, 27, 5, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243163640, 'comment_body': 'Yes, i will make those changes', 'comment_created': datetime.datetime(2023, 6, 27, 5, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1243826129, 'comment_body': ""Okay, although PGXN doesn't really enter into this example at all."", 'comment_created': datetime.datetime(2023, 6, 27, 14, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1243850993, 'comment_body': 'I will just explain PGXN in 1-2 sentences, its use basically.\r\nThen i want to proceed with the Extension management and upgradability.\r\nThat should cover all bases.', 'comment_created': datetime.datetime(2023, 6, 27, 14, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1244765677, 'comment_body': 'ERROR: does not adhere to the INI syntax\r\nI tried using `ini` syntax in control file, got this error in my iterm shell\r\n', 'comment_created': datetime.datetime(2023, 6, 28, 6, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1244766922, 'comment_body': 'I will make a /doc/README.md for all the details for the extension. \r\nI want to package and release it on PGXN, after that all the changes I perform to make the SQL extension more extensive i will keep updating the extension package', 'comment_created': datetime.datetime(2023, 6, 28, 6, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1245281558, 'comment_body': 'Fixed it', 'comment_created': datetime.datetime(2023, 6, 28, 14, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1247262851, 'comment_body': 'I honesty think the PGXN packaging should be a separate lesson.', 'comment_created': datetime.datetime(2023, 6, 29, 23, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247263175, 'comment_body': ""This isn't necessary to release on PGXN."", 'comment_created': datetime.datetime(2023, 6, 29, 23, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247263424, 'comment_body': 'Expanding the extension with new functionality is a great lesson, but ought to be independent of distribution on PGXN, I think.', 'comment_created': datetime.datetime(2023, 6, 29, 23, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247264261, 'comment_body': ""This is true if you install it and run `CREATE EXTENSION` where it did not exist before, but if it already exists the new function won't appear. That will require creating another file, `my_extension--1.0.0--1.0.1.sql` that contains just the new objects, including it in the `DATA` variable in the Makefile, and then, after installing, running `ALTER EXTENSION UPDATE`."", 'comment_created': datetime.datetime(2023, 6, 29, 23, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247264434, 'comment_body': 'Did this file exist before?', 'comment_created': datetime.datetime(2023, 6, 29, 23, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247264770, 'comment_body': 'You should show an example of this.', 'comment_created': datetime.datetime(2023, 6, 29, 23, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247265076, 'comment_body': ""Needs examples and links, including a section on how to create a PGXN account. But again, I'd urge you to make PGXN distribution a separate lesson."", 'comment_created': datetime.datetime(2023, 6, 29, 23, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247407064, 'comment_body': 'sure, i will make it a separate lesson', 'comment_created': datetime.datetime(2023, 6, 30, 4, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1247407362, 'comment_body': 'yes', 'comment_created': datetime.datetime(2023, 6, 30, 4, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1247407624, 'comment_body': 'i will make it  separate lesson, with pictures and link to docs.\r\n', 'comment_created': datetime.datetime(2023, 6, 30, 4, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1247408388, 'comment_body': ""What i'll do is i will keep the new function but remove all the information about the PGXN. I will cover that in a separate lesson.(I can give some information about PGXS too as it isn't too long)"", 'comment_created': datetime.datetime(2023, 6, 30, 4, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1247408995, 'comment_body': ""I though you had to change all the files which point to the older version.\r\nDoes'nt that include the control file too, which points to the older version of the extension?"", 'comment_created': datetime.datetime(2023, 6, 30, 4, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1247795487, 'comment_body': ""You only have to increment the distribution version if you've previously made a release on PGXN."", 'comment_created': datetime.datetime(2023, 6, 30, 12, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1247823962, 'comment_body': 'I will mention that in the new PGXN quick start.', 'comment_created': datetime.datetime(2023, 6, 30, 12, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1249547998, 'comment_body': 'Dropped the PGXN related documentation, will cover it in a different document and added 2 ways of updating the extension:\r\n- `ALTER EXTENSION`\r\n- `DROP EXTENSION` and `CREATE EXTENSION`\r\n\r\nI thinks the basic SQL quick start is pretty much done.', 'comment_created': datetime.datetime(2023, 7, 2, 14, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1274283149, 'comment_body': '```suggestion\r\n# Indicates whether the extension is relocatable, allowing it to be moved to a different location (true by default)\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 1, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274283982, 'comment_body': 'I was not aware of this `RETURN ` syntax of `CREATE FUNCTION`, nice! Looks like it was added in Postgres 14.', 'comment_created': datetime.datetime(2023, 7, 26, 1, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274286089, 'comment_body': 'What is a ""module name"" as mentioned here? I\'m not familiar with the term for makefiles…', 'comment_created': datetime.datetime(2023, 7, 26, 1, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274286921, 'comment_body': '```suggestion\r\nFor more information on the Makefiles, you can refer to the [PostgreSQL documentation on makefile](https://www.postgresql.org/docs/current/extend-pgxs.html).\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 1, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274288926, 'comment_body': 'It took me a few minutes to parse this section. I think the important point is that different versions of an extension can be supported by having files for each version, e.g., `my_extension-1.0.0.sql`, `my_extension-1.0.1.sql`, `my_extension-1.2.0.sql`, etc. You tell Postgres about them by including them all in the `DATA` variable, either as a list or using wildcards, e.g., `DATA = $(wildcard my-extension--*.sql)`.', 'comment_created': datetime.datetime(2023, 7, 26, 2, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274289439, 'comment_body': ""I think it's worth covering the need for`make` and PGXS, often installed via `-lib` packages in Yum, apt, and the like."", 'comment_created': datetime.datetime(2023, 7, 26, 2, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274290837, 'comment_body': '```suggestion\r\n### Step 1: Create the Extension subdirectory for test SQL files:\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 2, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274291099, 'comment_body': 'I recommend using a single dash, here; double dashes are used in extension file names because they have special meaning, separating names from versions.', 'comment_created': datetime.datetime(2023, 7, 26, 2, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1274403585, 'comment_body': ""Module specifies the modules to bt installed using the `make` command. As this is a SQL Extnesion we don't really need a module but while using C we need to specify module to create the `.so` and `.o` files. I have added this as a further explanation of the make file error of sort below."", 'comment_created': datetime.datetime(2023, 7, 26, 5, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1274405931, 'comment_body': ""I was suggested this by a fellow gsoc contributor when i asked him for some feedback. He told me that he had a problem with understanding this part. Most people know about the wildcard but including the 2-3 SQL scripts to load all of them isn't mentioned probably.\r\n\r\nI can add a section about wildcard to give a better approach for having all the versions. "", 'comment_created': datetime.datetime(2023, 7, 26, 5, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1274409734, 'comment_body': 'I can cover the `make` explaination in the use of external files( C extensions ). Its wont be helpful for the user to see the whole explanation all here with out an example to back it.v\r\n\r\nI can add a whole section on using PGXN and add a link to this original QS. I was thinking that this thould be the main QS and all the other QS be linked to this central basic QS. Currently we have:\r\n- QS on explaining Extensibility\r\n- Procedural Language (plpython) [Need to add plpgsql]\r\n\r\nWhat is left:\r\n- I will add a separate PGXN QS, which cover `pgxnclient`. It can link to the PGXN docs too.\r\n- External language is also left we will need to cover that as well (Python and C)\r\n', 'comment_created': datetime.datetime(2023, 7, 26, 5, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1274410294, 'comment_body': 'Sure i will make the changes.', 'comment_created': datetime.datetime(2023, 7, 26, 5, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275563282, 'comment_body': ""Yeah, since there is no C here perhaps don't venture module. But also, it's `module_pathname`."", 'comment_created': datetime.datetime(2023, 7, 26, 23, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275563749, 'comment_body': ""I think it's fine to explicitly list the files as an example; my point is that I had a hard time understanding your explanation."", 'comment_created': datetime.datetime(2023, 7, 26, 23, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275564284, 'comment_body': ""I'm not referring to PGXN, but that the use of a `Makefile` requires `make` and the use of `PGXS` (not PGX*N*) requires the Postgres development libraries."", 'comment_created': datetime.datetime(2023, 7, 26, 23, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275572809, 'comment_body': 'Given this it might make sense to omit `make` and its output in this doc.', 'comment_created': datetime.datetime(2023, 7, 26, 23, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275574200, 'comment_body': 'What kind of scenarios? Maybe provide some examples for when to use these queries.', 'comment_created': datetime.datetime(2023, 7, 26, 23, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275576098, 'comment_body': '```suggestion\r\n- The `REGRESS` variable is used to specify the name of the regression test script file for the extension. In this case, the name is `my_extension--regress` (without the `.sql` extension). This file will contain the SQL commands for the regression tests to be executed.\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 23, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275576497, 'comment_body': 'The file is not recognized or used by the installation process (`make install`), only by the testing process (`make installcheck`).', 'comment_created': datetime.datetime(2023, 7, 26, 23, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275576667, 'comment_body': '```suggestion\r\n### Step 3: Create the `expected` subdirectory for expected result:\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 23, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275577220, 'comment_body': ""I'm not sure making assumptions is ideal here, but you can suggest that the user create it by doing something like\r\n\r\n``` sh\r\npsql -f sql/my_extension--regress.sql > expected/my_extensions--regress.out\r\n```\r\n\r\nAt least to bootstrap the file."", 'comment_created': datetime.datetime(2023, 7, 26, 23, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275577420, 'comment_body': ""In fact, you don't need to include the name `regression` in it at all. "", 'comment_created': datetime.datetime(2023, 7, 26, 23, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275577583, 'comment_body': '```suggestion\r\n- If the expected file matched the results exactly then the regression test passes.\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 23, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275605075, 'comment_body': '```suggestion\r\n#### How `make installcheck` works:\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 0, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275605953, 'comment_body': ""```suggestion\r\nThe `regression.diffs` file and `regression.out` files are generated when the tests fail. Here's an explanation of each:\r\n```"", 'comment_created': datetime.datetime(2023, 7, 27, 0, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275606393, 'comment_body': '```suggestion\r\n1. `regression.diffs`: This file contains the differences between the expected output and the actual output of the regression tests. It shows the changes, additions, or deletions made to the expected output to match the actual output. Each difference is indicated with a line starting with a ""-"" or ""+"" sign, representing removed or added lines, respectively.\r\n\r\n2. `regression.out`: This file contains the actual output of the regression tests. It shows the results, error messages, or any other output generated by the test scripts. The `regression.out` file is compared with the expected output to generate the `regression.diff` file.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 0, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275606630, 'comment_body': 'Suggest you update all other references to these files, too.', 'comment_created': datetime.datetime(2023, 7, 27, 0, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275607383, 'comment_body': '```suggestion\r\n```diff\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 0, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275608464, 'comment_body': ""This block isn't bash; suggest you omit the type here."", 'comment_created': datetime.datetime(2023, 7, 27, 0, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275608904, 'comment_body': ""While true, I'm not sure this pattern is worth going into here. The need for it is rare."", 'comment_created': datetime.datetime(2023, 7, 27, 0, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275610622, 'comment_body': '```suggestion\r\n-- Create necessary objects for version 1.0.0\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 0, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275611928, 'comment_body': 'If I recall correctly, you will also need to add `my_extension--1.0.1.sql` for those who are installing from scratch, yes? Or does `CREATE EXTENSION` know to run these in sequence like `ALTER EXTENSION` does?', 'comment_created': datetime.datetime(2023, 7, 27, 0, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275612086, 'comment_body': ""I believe you need to include both files here; otherwise `CREATE EXTENSION` will not work. It only worked for you because you'd previously installed the 1.0.0 file."", 'comment_created': datetime.datetime(2023, 7, 27, 0, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275614596, 'comment_body': 'Did you mean to include the asterisk and backticks here?', 'comment_created': datetime.datetime(2023, 7, 27, 0, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275615511, 'comment_body': '```suggestion\r\n-- Create necessary objects for version 1.0.0\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 0, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275615622, 'comment_body': 'Add comment that this is the new stuff for 1.0.1.', 'comment_created': datetime.datetime(2023, 7, 27, 0, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275615958, 'comment_body': ""If you don't also include the 1.0.0 file, no one will be able to install that version. Which is fine if that's what you want."", 'comment_created': datetime.datetime(2023, 7, 27, 0, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275616162, 'comment_body': 'I suggest using `my_extension` in these examples, rather than `your_extension_name`.', 'comment_created': datetime.datetime(2023, 7, 27, 0, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275616510, 'comment_body': '```suggestion\r\n- Follow a consistent versioning scheme for your extension to indicate changes and updates. A common approach is to use [Semantic Versioning (SemVer)](https://semver.org), which consists of three parts: `MAJOR.MINOR.PATCH`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 0, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275616899, 'comment_body': 'Any reason not to use \\`\\`\\` blocks here?', 'comment_created': datetime.datetime(2023, 7, 27, 0, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275617576, 'comment_body': 'I suggest calling this section `Description`, as `Architecture and Design` is likely only useful for pretty advanced extensions.', 'comment_created': datetime.datetime(2023, 7, 27, 0, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275618075, 'comment_body': 'I think this very useful information (as well as Performance Considerations, Testing and Regression, and Contribution Guidelines) might be better included in the README than in the docs. The README is for someone building or modifying the source; the documentation file is for someone using the extension.', 'comment_created': datetime.datetime(2023, 7, 27, 0, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275618967, 'comment_body': 'Include a link!', 'comment_created': datetime.datetime(2023, 7, 27, 0, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275619731, 'comment_body': 'I think you have to describe the `META.json` file before talking about packaging it up.', 'comment_created': datetime.datetime(2023, 7, 27, 0, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275620713, 'comment_body': 'There is a lot more to it than this. Releasing is not included in the [pgxnclient](https://pypi.org/project/pgxnclient/) ([repo](https://github.com/pgxn/pgxnclient)). For that you also need to install [pgxn-utils](/guedes/pgxn-utils), which adds the command to upload to PGXN.', 'comment_created': datetime.datetime(2023, 7, 27, 1, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275621212, 'comment_body': 'I believe is the command to `CREATE EXTENSION`. You first need to install it with `pgxn install my_extension`.', 'comment_created': datetime.datetime(2023, 7, 27, 1, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275621623, 'comment_body': ""Yeah, not till it has been released on PGXN. I presume that's covered in another chapter, yes?"", 'comment_created': datetime.datetime(2023, 7, 27, 1, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275622120, 'comment_body': 'I think there  is a lot more to it than this brief section covers, including specifics about various package managers and how to get packages added to their repos. May not be worth including here for now.', 'comment_created': datetime.datetime(2023, 7, 27, 1, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275622696, 'comment_body': ""This section could use a lot more information, as well, and I'm not sure there's much value in it here. What do you think?"", 'comment_created': datetime.datetime(2023, 7, 27, 1, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275740541, 'comment_body': ""yup i'll remove it. "", 'comment_created': datetime.datetime(2023, 7, 27, 5, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275740984, 'comment_body': 'ohk, i will change it up and submit it for review again.', 'comment_created': datetime.datetime(2023, 7, 27, 5, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275750048, 'comment_body': '```suggestion\r\n  - The Makefile is used to define the build process. It specifies extension name, and SQL files. The PG_CONFIG variable retrieves the path to the pg_config utility, which is used to get the necessary configuration for building the extension.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275752676, 'comment_body': ""i just included this so a newbie doesn't look at that output like an error.  I did and asked on Stackoverflow, as it's not explicitly stated in the docs about this output. So i thought i might add this."", 'comment_created': datetime.datetime(2023, 7, 27, 5, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275753958, 'comment_body': 'I added regression in the comments. Should i add it in the title too?', 'comment_created': datetime.datetime(2023, 7, 27, 5, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275754076, 'comment_body': '```suggestion\r\n-   Create a new file called `my_extension-regress.sql`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275754207, 'comment_body': '```suggestion\r\n$ touch my_extension-regress.sql\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275754369, 'comment_body': '```suggestion\r\n- Open the `my_extension-regress.sql` file and add the following content keeping in mind these instructions:\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275755269, 'comment_body': ""As this is a simple extension it doesn't really make sense to do all this. i just added this point to inform the user on how to write proper regression tests. "", 'comment_created': datetime.datetime(2023, 7, 27, 5, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275755567, 'comment_body': '```suggestion\r\n- In the given code, the changes made to the `Makefile` are related to the addition of a new variable called `REGRESS` and the inclusion of a new SQL file `my_extension-regress`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275755662, 'comment_body': '```suggestion\r\nREGRESS = my_extension-regress\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275755853, 'comment_body': '```suggestion\r\n- The `REGRESS` variable is used to specify the name of the regression test script file for the extension. In this case, the name is `my_extension-regress`. This file will contain the SQL commands for the regression tests to be executed.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275756377, 'comment_body': '```suggestion\r\n- The `REGRESS` variable is used to specify the name of the regression test script file for the extension. In this case, the name is `my_extension-regress` (without the `.sql` extension). This file will contain the SQL commands for the regression tests to be executed.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275756798, 'comment_body': 'oh yup. will change that.', 'comment_created': datetime.datetime(2023, 7, 27, 5, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275757623, 'comment_body': '```suggestion\r\n- The changes made to the `Makefile` allow the `my_extension-regress.sql` file to be recognized during the testing process (`make installcheck`), enabling the execution of regression tests.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275775180, 'comment_body': 'Yes its true. But this section only deals with updating the files. I can add a point about user installing from scratch. ', 'comment_created': datetime.datetime(2023, 7, 27, 6, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275782984, 'comment_body': '```suggestion\r\n- The `DATA` variable in the `Makefile` allows you to specify multiple SQL script files for different extension versions. Each file represents a specific version with distinct objects or functionality. \r\n- When installing the extension, only the relevant script file is used based on the version specified, keeping the code organized and manageable.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275797560, 'comment_body': '```suggestion\r\n-   Create a new file called `my_extension-regress.out`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275797713, 'comment_body': '```suggestion\r\n$ touch my_extension-regress.out\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275798164, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275798912, 'comment_body': 'I will omit the part about the assumption. ', 'comment_created': datetime.datetime(2023, 7, 27, 6, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275806824, 'comment_body': 'Also where should i add this section.\r\n> ```shell\r\n> psql -f sql/my_extension--regress.sql > expected/my_extensions--regress.out\r\n> ```\r\n\r\nProbably in the `make installcheck` part.\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 27, 6, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275808040, 'comment_body': '```suggestion\r\nFor more information on the Makefiles, you can refer to the [PostgreSQL documentation on makefile](https://www.postgresql.org/docs/current/extend-pgxs.html).\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275810864, 'comment_body': '```suggestion\r\n#### Tip:\r\n- Another way of running the regression script is by running this command:\r\n\r\n`psql -f sql/my_extension--regress.sql > expected/my_extension--regress.out`\r\n\r\nThe command `psql -f sql/my_extension--regress.sql > expected/my_extensions--regress.out` runs the regression test script `my_extension--regress.sql` and redirects the output to a file named `my_extensions--regress.out` in the `expected` directory.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275812533, 'comment_body': '```suggestion\r\nThe purpose of comparing the expected output with the actual output is to validate that the extension behaves as intended and produces the correct results. Any differences between the expected and actual output are highlighted in the `regression.diff` file, allowing developers to identify and resolve any issues in the extension code.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275814606, 'comment_body': '```suggestion\r\n```\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 6, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275815232, 'comment_body': 'Should i remove it entirely?', 'comment_created': datetime.datetime(2023, 7, 27, 6, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275819539, 'comment_body': 'For users who are installing the extension from scratch, including all SQL script files, such as `my_extension--1.0.0.sql` and `my_extension--1.0.1.sql`, ensures that they can choose the specific version they desire. By having both SQL script files available, users can set up the extension with the necessary objects and functionality corresponding to the version they want to install. This flexibility allows users to easily tailor the extension to their specific requirements, enhancing their overall experience.\r\n\r\ni could add this point just to clarify.', 'comment_created': datetime.datetime(2023, 7, 27, 7, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275820581, 'comment_body': 'Yup. I will add that.', 'comment_created': datetime.datetime(2023, 7, 27, 7, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275820897, 'comment_body': '```suggestion\r\nDATA = my_extension--1.0.0.sql my_extension--1.0.0--1.0.1.sql   # Update the DATA variable with the Upgrade Script file\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 7, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275821767, 'comment_body': 'no its a typo error\r\n', 'comment_created': datetime.datetime(2023, 7, 27, 7, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275821998, 'comment_body': ""```suggestion\r\nSELECT * FROM pg_extension_update_paths('extension_name');\r\n```"", 'comment_created': datetime.datetime(2023, 7, 27, 7, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275822809, 'comment_body': ""```suggestion\r\nSELECT * FROM pg_extension WHERE extname = 'my_extension';\r\n```"", 'comment_created': datetime.datetime(2023, 7, 27, 7, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275825256, 'comment_body': '```suggestion\r\n\r\n-- Version 1.0.1: Adding the complex_add function to the extension. \r\n-- complex_add allows users to perform complex addition operations using an array of integers as input, returning the sum of all array elements. \r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 7, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275826344, 'comment_body': '```suggestion\r\nDATA = my_extension--1.0.0.sql my_extension--1.0.1.sql\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 7, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275826635, 'comment_body': 'Completed the changes. ', 'comment_created': datetime.datetime(2023, 7, 27, 7, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275829893, 'comment_body': 'The README.md file is inside the code block. If i am using these i am separating the code books. If there is a way to nest code block i could apply that but i looked around and there is no ways to do that.  \r\n\r\nIts just to emphasise that it is a Code block.', 'comment_created': datetime.datetime(2023, 7, 27, 7, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275830277, 'comment_body': '```suggestion\r\n## Description\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 7, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275833411, 'comment_body': ""I had a doubt regarding this. There are a lot of parts which are repeated in the README.md and docfile. Shouldn't there be a distinction between these two?\r\n\r\nMoreover, could you just direct me on which parts should i include in the readme and what to include in the doc file. I will make the changes accordingly "", 'comment_created': datetime.datetime(2023, 7, 27, 7, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275838652, 'comment_body': '```suggestion\r\n1. Fork the repository.\r\nhttps://github.com/IshaanAdarsh/my_extension\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 7, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275840080, 'comment_body': ""I will link to the `PGXN and pgxnclient` #31  explanation for this. It doesn't make sense to repeat the steps separately.\r\n"", 'comment_created': datetime.datetime(2023, 7, 27, 7, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275841557, 'comment_body': '`pgxn_utils` has depreciated as far as i know. It has not been updated in the last two years. Should i include it in this QS?', 'comment_created': datetime.datetime(2023, 7, 27, 7, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275842816, 'comment_body': 'I will remove all this part explaining in short on how to use PGXN and add a link to #31. We can make the changes there.', 'comment_created': datetime.datetime(2023, 7, 27, 7, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275843069, 'comment_body': 'yup', 'comment_created': datetime.datetime(2023, 7, 27, 7, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275844706, 'comment_body': 'Just adding short explanations might not be helpful. I could just mention these ways and end there. \r\n\r\nThen anyone can look around and discover them according to their own volition.', 'comment_created': datetime.datetime(2023, 7, 27, 7, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275845610, 'comment_body': 'I think we should remove the steps and mention the ways of distributing only.\r\nExplaining PGXN will be more than enough', 'comment_created': datetime.datetime(2023, 7, 27, 7, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275848265, 'comment_body': '@theory any comments about this. Should I prepare a separate section for PGXS or does this do it justice?\r\n\r\nI suppose there is already a lot of information about the advanced concepts of PGXS, these 3-4 lines just give a basic understanding of the topic.', 'comment_created': datetime.datetime(2023, 7, 27, 7, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1276324739, 'comment_body': '**Need for `make`:**\r\n   - `make` is a build automation tool used to compile and build software projects, including PostgreSQL extensions.\r\n   - It reads instructions from a file called ""Makefile"" to determine the build process, dependencies, and rules for compilation.\r\n   - Without `make`, developers would need to manually manage complex compilation steps, leading to errors and inefficiencies. \r\n\r\n**How `make` Command Functions:**\r\n   - The `make` command is executed in the extension\'s directory to initiate the build process defined in the Makefile.\r\n   - It automatically compiles source files, links object files, and generates the shared object (`.so`) file for the extension.\r\n   - By default, `make` uses the `all` target in the Makefile, but developers can specify other targets for specific tasks, such as cleaning or installing the extension.\r\n\r\n**The Role of PGXS (PostgreSQL Extension Build Infrastructure):**\r\n   - PGXS is a standardized build infrastructure provided by PostgreSQL for developing extensions independently of the core codebase.\r\n   - It includes macros, rules, and utilities that streamline the extension development process and ensure compatibility with the installed PostgreSQL version.\r\n   - PGXS simplifies the integration of extensions with the PostgreSQL installation, making it easier to distribute and manage extensions.\r\n\r\n**Installation and Use of PGXS:**\r\n   - The PGXS infrastructure is installed with the PostgreSQL development libraries and headers.\r\n   - On Linux distributions, developers can install the necessary packages, such as `postgresql-server-dev-X`, via package managers like Yum or Apt.\r\n   - PGXS provides the necessary environment and tools for extension development, ensuring compatibility with the installed PostgreSQL version. \r\n\r\n**Using a Makefile for Extension Building:**\r\n   - When building a PostgreSQL extension, developers create a Makefile with instructions for compiling and linking extension code.\r\n   - The Makefile uses PGXS macros to include PostgreSQL-specific build settings, libraries, and header files necessary for extension development.\r\n   - The Makefile specifies the extension\'s shared object (`.so`) file, name, and version, ensuring proper integration with the PostgreSQL environment.\r\n\r\nthese are some of the points i could get from the previous reference documentation i made. @theory Could you guide me with points should i include?\r\n', 'comment_created': datetime.datetime(2023, 7, 27, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1282508808, 'comment_body': ""If you still have reference documentation, it'd be good to simply link to these bits, but honestly I think your readers will be best served by a list of instructions for how to install all the dependencies on RedHat-based Linux, Debian-based Linux, macOS, and Windows."", 'comment_created': datetime.datetime(2023, 8, 2, 23, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282509073, 'comment_body': ""I don't understand the comment. You don't need the word `regression` in the file name."", 'comment_created': datetime.datetime(2023, 8, 2, 23, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282509843, 'comment_body': ""I haven't heard that it was deprecated; @guedes, do you continue to maintain `pgxn_utils`?"", 'comment_created': datetime.datetime(2023, 8, 2, 23, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282510422, 'comment_body': ""It's less about PGXN than using `make`."", 'comment_created': datetime.datetime(2023, 8, 2, 23, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282510920, 'comment_body': ""Yes, it's enough to explain what these 3-4 lines do at a high level, I think."", 'comment_created': datetime.datetime(2023, 8, 2, 23, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282654483, 'comment_body': 'Okay, i miss understood. I just was using a particular extension as an example. He used --regress.sql, so i followed suit. ', 'comment_created': datetime.datetime(2023, 8, 3, 5, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1285102268, 'comment_body': 'Perhaps then link to some examples?', 'comment_created': datetime.datetime(2023, 8, 5, 18, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285105621, 'comment_body': 'Right, but if this is a getting started guide, the more it can help someone get from zero to building and testing without having to search the web for how to do something, the better!', 'comment_created': datetime.datetime(2023, 8, 5, 18, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1292372523, 'comment_body': ""Hi all! \r\n\r\nI'd like to know whether `pgxn_utils` whorths yet to community. If you think it brings value to community yet, I can put some effort to update dependencies and review some issues/PRs. Furthermore, it could be nice to rewrite it with fewer dependencies and with more improvements in boilerplate/scaffold generation. \r\n\r\nI'm open to your comments :)"", 'comment_created': datetime.datetime(2023, 8, 12, 16, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'guedes', 'type': 'User'}, {'comment_id': 1292554572, 'comment_body': ""Well I certainly use it :-) Though in truth I use it less than I used to now that some of my extensions use workflow actions to release, [like this](https://github.com/theory/pg-semver/blob/main/.github/workflows/release.yml). But I've always been rather fond of `pgxn_utils` :-)"", 'comment_created': datetime.datetime(2023, 8, 12, 23, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1293565367, 'comment_body': ""Thanks @theory for you feedback! \r\n\r\nI'll work on `pgxn_utils` on the next weeks by fixing bugs, review some code and improve it."", 'comment_created': datetime.datetime(2023, 8, 14, 14, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'guedes', 'type': 'User'}]","[{'commit_sha': 'be44aaba4937abeaef05283d908ef5782f21cbe1', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2132a057b45477c117a26d71dbc97db899e646fd', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f67ab28d3a3a47b28980dfda2348572b4d47fd', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4821e8f4bd0fe2c3f52d2e652ef408f74eacffb7', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0104c1cda8671983a8fbc089ae24ab4d34cff302', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aebc9d848b7213188a2e5cb056c83a2c8be2ead6', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e6cf85be573c2b590a141f8cc99474a7dea47eb', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ad9bb3d83232d4e9ae3e7cdbc12b7b777e9e4d4', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c18e01928332949d0775a4c69b6a0057043bbb', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd831857adb07e183be1fa338dabfacb1f019f467', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '930ff85b2e7dab36bf1b9a5596e0f9ebd20c33a8', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a624fcc5867bd4ffe034e565789a195b8461e3d5', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb820a7e641b0952224a610f8155cb08cd5cf9c3', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69fe4b83782a468621adadff21c5ebb57d7557ad', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cb0374efe670b17bd93ac68880e637c8cdc0d05', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17bc9cebac7ac0cace1437c3eb52a31ceb70492', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9536c58e0160216f1aaf8c42b9d2bbb2675dcb9c', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9c644417d058f027c166e5f02558cc8c5034cd4', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a008776175fe1600383bf7d7bf9ff38113e7a00', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fbdae9d3f76fdfc4f112241cdc1b56e7d176bb4', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595c81caafb7eb64c77abe387620d177ce988e21', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6d234d7454e60fecb637d012f597d43d31d6c32', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec2e4b9a7a693e87a533212e81c9765f12c1a438', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a6504b89458bdce145d30809d703d99b7cda4c', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745bf5d76db2d30e4829efb11bab0bfe1c0229d8', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '486136507e2d221aa36efb7f64e1466ec766ebca', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e462bc0e2187a22f5b840244ff054ed1984b4934', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11bc35b295584b975abd2d8ee3ea8a3fa64b8068', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c32e21f79f581cfa86662825f6b4771850dbcd8', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c53bf601e627770fa92963708ab834bb0fc352', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}]",Ishaan Adarsh,100434702,,User,,40,,105,83
1426275411,Update Sample-Ext.md,"This PR contains the quick start on different ways to extend Postgres:
In this quick start guide, we will explore the process of extending PostgreSQL using the `pg_sample_ext` extension. `pg_sample_ext` is a sample extension that gradually introduces various extension features which include
- Functions
- Data Types
  - `CREATE TYPE`
  - `CREATE DOMAIN`
- Operators
",True,25,https://api.github.com/repos/IshaanAdarsh/Postgres-extension-tutorial/pulls/25,https://github.com/IshaanAdarsh/Postgres-extension-tutorial/pull/25,closed,257,0,1,9,1,12,1,1,[{'name': 'documentation'}],2023-07-09 11:37:34+00:00,2023-08-19 17:14:29+00:00,3562615.0,"41 days, 5:36:55","[{'comment_id': 1275623788, 'comment_body': 'This is super brief, which is great! But I suggest linking to the `my_extension` tutorial for people who need more detail to get started.', 'comment_created': datetime.datetime(2023, 7, 27, 1, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275624100, 'comment_body': '```suggestion\r\n### Usage:\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 1, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275624350, 'comment_body': 'Maybe mention and link to details on testing here.', 'comment_created': datetime.datetime(2023, 7, 27, 1, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275624999, 'comment_body': '```suggestion\r\nUsing the Data Types:\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 1, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275625321, 'comment_body': '```suggestion\r\n- A domain type is a custom data type that is based on an existing base type but with additional constraints applied. It provides a way to create a specialized version of an existing data type.\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 1, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275626135, 'comment_body': 'Version 1.0.2 of what?', 'comment_created': datetime.datetime(2023, 7, 27, 1, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1275747758, 'comment_body': ""this is a typo. I was trying something else. I'll fix this ASAP.\r\nActually, i was actually creating an update script for the extension, and forgot to repomove the comments while adding the SQL content to this QS\r\n"", 'comment_created': datetime.datetime(2023, 7, 27, 5, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275860354, 'comment_body': 'sure.\r\n', 'comment_created': datetime.datetime(2023, 7, 27, 7, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275863947, 'comment_body': '```suggestion\r\n\r\nFor a detailed tutorial on getting started with extension creation, refer to the [Extension Creation Quick Start](https://github.com/IshaanAdarsh/Postgres-extension-tutorial/pull/14).\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 7, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275865958, 'comment_body': 'Should i link to the my_extension regression testing?\r\nor the postgres docs on regression testing', 'comment_created': datetime.datetime(2023, 7, 27, 7, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1275867824, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 7, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1282511391, 'comment_body': 'Link to your tutorial first, IMHO.', 'comment_created': datetime.datetime(2023, 8, 2, 23, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}]","[{'commit_sha': '587bbcd469328f4760b3bed5993a0bf9dce5f8b5', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712d139121fa50d26bea5c04a7626a0c6e71d751', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77236534c1f129b6d0fcf2aea436b8a19b1688c5', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3663d9c3a9a067eddf47434444ebfbbc68607914', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15f124e350e6a06e01f84b79ba1f4784e4b8b87d', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a86a59982145e0ec032e8eac35f99fd7edf58ca6', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389f8e5c4114b6ca5549c4d8cd84c0c2fe2d4137', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9584e8b0b9cc0c6254c09ac8d9943d9d28bf91d', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268f400107611176e5fad2be99981aed55d8608', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}]",Ishaan Adarsh,100434702,,User,,40,,105,83
1449634964,Procedural Languages (PL/pgSQL + PL/Python),The Quick Start aims to guide users through the process of creating a simple PostgreSQL extension using PL/pgSQL.,True,32,https://api.github.com/repos/IshaanAdarsh/Postgres-extension-tutorial/pulls/32,https://github.com/IshaanAdarsh/Postgres-extension-tutorial/pull/32,closed,279,0,1,5,0,20,1,1,[{'name': 'documentation'}],2023-07-26 06:46:50+00:00,2023-08-19 17:14:00+00:00,2111230.0,"24 days, 10:27:10","[{'comment_id': 1285107211, 'comment_body': ""```suggestion\r\nProcedural languages in PostgreSQL provide a powerful way to extend the database's functionality by writing functions and procedures in languages other than SQL. These are natively supported by PostgreSQL and can be used directly within the database environment. These languages, also known as PLs, offer developers the flexibility to implement complex business logic and computations directly within the database.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 5, 18, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107292, 'comment_body': 'Also triggers! Suggest linking to the docs for these features, in case the reader wonders what a custom aggregate or window function is and wants to find out.', 'comment_created': datetime.datetime(2023, 8, 5, 18, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107491, 'comment_body': 'I recommend using a semantic version at all times.', 'comment_created': datetime.datetime(2023, 8, 5, 18, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107511, 'comment_body': ""You can also like to your other tutorial's section that introduces the control file."", 'comment_created': datetime.datetime(2023, 8, 5, 18, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107546, 'comment_body': '```suggestion\r\n- `relocatable = true`: This line indicates that the extension is relocatable, meaning it does not have to live in a particular schema, and can be moved to a different schema if need be.\r\n```', 'comment_created': datetime.datetime(2023, 8, 5, 18, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107685, 'comment_body': 'Also need `make` and the Postgres libraries (dev package).', 'comment_created': datetime.datetime(2023, 8, 5, 18, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107719, 'comment_body': 'Can also link to your earlier tutorial, yes?', 'comment_created': datetime.datetime(2023, 8, 5, 18, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107785, 'comment_body': 'Also `make` and the dev libraries.', 'comment_created': datetime.datetime(2023, 8, 5, 18, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285107833, 'comment_body': 'Maybe mention what the `u` means.', 'comment_created': datetime.datetime(2023, 8, 5, 18, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1287525315, 'comment_body': '```suggestion\r\n3. **Custom Aggregates, Window Functions, and Triggers:** Procedural languages allow developers to define [custom aggregates](https://www.postgresql.org/docs/current/xaggr.html), [window functions](https://www.postgresql.org/docs/current/functions-window.html), and [triggers](https://www.postgresql.org/docs/current/triggers.html), enabling advanced data analysis, processing, and event-driven actions directly within the database.\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 18, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287528362, 'comment_body': '```suggestion\r\n- Basic knowledge of SQL and PL/pgSQL programming.\r\n- `make` utility for building and compiling software. \r\n- Knowledge about the Postgres Development Libraries\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 18, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287530407, 'comment_body': ""```suggestion\r\ndefault_version = '1.0.0'\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 18, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287531192, 'comment_body': ""```suggestion\r\n- `default_version = '1.0.0'`: This line specifies the default version of the extension.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 18, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287531399, 'comment_body': '```suggestion\r\nDATA = pg_plpgsql_ext--1.0.0.sql\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 18, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287531777, 'comment_body': '```suggestion\r\n- `DATA = pg_plpgsql_ext--1.0.0.sql`: This variable includes the SQL script file (""pg_plpgsql_ext--1.0.0.sql"") in the extension.\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 18, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287532612, 'comment_body': '```suggestion\r\n- [plpython3u]((https://www.postgresql.org/docs/current/plpython.html)) procedural language available in your PostgreSQL installation.\r\n\r\n> In the context of PostgreSQL\'s procedural languages, the ""u"" in ""plpython3u"" stands for ""untrusted"". This signifies that the language implementation allows for executing arbitrary code and potentially accessing external resources.\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 19, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287533342, 'comment_body': '```suggestion\r\n- Basic knowledge of [Python](https://www.python.org) programming.\r\n- `make` utility for building and compiling software. \r\n- Knowledge about the Postgres Development Libraries\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 19, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287536231, 'comment_body': 'Made all the changes.', 'comment_created': datetime.datetime(2023, 8, 8, 19, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287537001, 'comment_body': '```suggestion\r\n- For a basic explanation of Control file and its elements (LINK to QS)\r\n- For more detailed information on Control Files, you can refer to the [PostgreSQL documentation on Control Files](https://www.postgresql.org/docs/current/extend-extensions.html#id-1.8.3.20.11).\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287537678, 'comment_body': '```suggestion\r\n- For a basic explanation of Makefile and its various components (LINK to QS)\r\n- For more information on the Makefiles, you can refer to the [PostgreSQL documentation on makefile](https://www.postgresql.org/docs/15/extend-pgxs.html).\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 19, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}]","[{'commit_sha': '33652977c94fe3e508ac0196b30554779512cfaf', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a193f4a6eed7a9a2817a4d69e2aa2dde1e1a78d', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a990ad4ac58baa3edf9a488e3995bd1f62d82e', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34571c357671d177d767a8077f23cbe493fbafdc', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b58436b507d427af67ad4501d91f546cdaff7782', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}]",Ishaan Adarsh,100434702,,User,,40,,105,83
1451915603,External Languages ( C ),The Quick Start aims to guide users through the process of creating a simple PostgreSQL extension using c.,True,33,https://api.github.com/repos/IshaanAdarsh/Postgres-extension-tutorial/pulls/33,https://github.com/IshaanAdarsh/Postgres-extension-tutorial/pull/33,closed,156,0,1,7,0,10,1,1,[{'name': 'documentation'}],2023-07-27 12:31:26+00:00,2023-08-19 17:13:43+00:00,2004137.0,"23 days, 4:42:17","[{'comment_id': 1276598929, 'comment_body': ""```suggestion\r\nadd_nums(int,int) RETURNS int AS 'MODULE_PATHNAME','add_nums'\r\n```"", 'comment_created': datetime.datetime(2023, 7, 27, 17, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1285108023, 'comment_body': ""I think Python, Ruby, and Java are all PLs, not external languages. Not sure what's really supported aside from C and maybe C++; whatever can generate a dynamic library, I would guess."", 'comment_created': datetime.datetime(2023, 8, 5, 18, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285108072, 'comment_body': 'I think these are much more about PLs, but *execution* performance is definitely a big deal for C extensions.', 'comment_created': datetime.datetime(2023, 8, 5, 18, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285108101, 'comment_body': ""I don't follow this. I don't have to implement C to build a C extension. A little confused."", 'comment_created': datetime.datetime(2023, 8, 5, 18, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285108153, 'comment_body': 'Also `make`, a compiler, and the Postgres dev libraries.', 'comment_created': datetime.datetime(2023, 8, 5, 18, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285108536, 'comment_body': '```suggestion\r\nThe PostgreSQL Extension Build Infrastructure (PGXS) is a set of Makefile macros and rules that simplify the build process for PostgreSQL extensions. It automates common build tasks and allows developers to use predefined variables and targets in their `Makefile`. By including PGXS in the `Makefile`, developers can leverage its functionality and ensure a standardized build process.\r\n```', 'comment_created': datetime.datetime(2023, 8, 5, 18, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1287504650, 'comment_body': ""yup your right, but just mentioning C and C++ doesn't really add value. \r\nMaybe could add languages like R or C#. Could you suggest some languages apart from this?\r\n"", 'comment_created': datetime.datetime(2023, 8, 8, 18, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287518903, 'comment_body': 'I did create a simple C file to implement the sum function, this point is to just showcase that point.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287522471, 'comment_body': '```suggestion\r\n- Familiarity with the PostgreSQL extension development process.\r\n- Prerequisites:\r\n\r\n- [PostgreSQL](https://www.postgresql.org/download/) installed and running on your system.\r\n- Basic knowledge of C programming.\r\n- Familiarity with the PostgreSQL extension development process.\r\n- `make` utility for building and compiling software. \r\n- Compiler to convert your source code into executable machine code.\r\n- Knowledge about the Postgres Development Libraries\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 18, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1287522981, 'comment_body': 'Added these points', 'comment_created': datetime.datetime(2023, 8, 8, 18, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}]","[{'commit_sha': '0dac28fbd3eca2dcb016b1d59e0d3522d9b74ae7', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41d1e3d3aefac04457444bb568f5ecee401af778', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3cf4d217aa112b32685b579f0ebaff8978a88a', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9400b76f9080794fcf0e51699c2ee22c4a2457b7', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4cc0aeae377ceab5e1c66331d36bac27195d3e', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ad548641c7233ba41c8c1a3f5146c835ae6804', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754b8e6ff1438f6a86c1f017948aa6f1045c0201', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}]",Ishaan Adarsh,100434702,,User,,40,,105,83
1449612748,PGXN + pgxnclient,Added information about how to create a PGXN extension and information about all the available commands on the `pgxnclient` and how to use it properly.,True,31,https://api.github.com/repos/IshaanAdarsh/Postgres-extension-tutorial/pulls/31,https://github.com/IshaanAdarsh/Postgres-extension-tutorial/pull/31,closed,168,0,1,5,0,15,1,1,[{'name': 'documentation'}],2023-07-26 06:26:03+00:00,2023-08-19 17:14:15+00:00,2112492.0,"24 days, 10:48:12","[{'comment_id': 1282511623, 'comment_body': 'Intro paragraph?', 'comment_created': datetime.datetime(2023, 8, 2, 23, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282511767, 'comment_body': 'PGXN is not for collaboration, just distribution.', 'comment_created': datetime.datetime(2023, 8, 2, 23, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282512022, 'comment_body': '```suggestion\r\nVisit [PGXN manager](https://manager.pgxn.org/) and create an account. This will allow you to manage your extensions and publish them on the PGXN repository.\r\n```', 'comment_created': datetime.datetime(2023, 8, 2, 23, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282512188, 'comment_body': 'Link back to your tutorial!', 'comment_created': datetime.datetime(2023, 8, 2, 23, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282512783, 'comment_body': 'I suggest you link to the [meta spec](https://pgxn.org/spec/).', 'comment_created': datetime.datetime(2023, 8, 2, 23, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282512984, 'comment_body': 'I suggest you briefly explain what each of these fields are for.', 'comment_created': datetime.datetime(2023, 8, 2, 23, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282513168, 'comment_body': 'You should link to said ""PGXN packaging guidelines"" so that your reader can be sure to follow them! :-)', 'comment_created': datetime.datetime(2023, 8, 2, 23, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282513658, 'comment_body': 'I suggest you show an example how to do this (and other steps). The [how two](https://manager.pgxn.org/howto) will be a useful reference (and link for additional details).', 'comment_created': datetime.datetime(2023, 8, 2, 23, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282513982, 'comment_body': 'You cannot release an extension with the CLI (which needs a link and installation instructions here) without also installing `pgxn_utils`.', 'comment_created': datetime.datetime(2023, 8, 2, 23, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282514932, 'comment_body': 'I believe it downloads, builds and tests an extension. I suggest you link to [the docs](https://pgxn.github.io/pgxnclient/usage.html#pgxn-check) for all of these commands for additional information.', 'comment_created': datetime.datetime(2023, 8, 3, 0, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1282778169, 'comment_body': 'I updated the CLI part, it was an oversight at my end.', 'comment_created': datetime.datetime(2023, 8, 3, 7, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1282779191, 'comment_body': 'Done. Linked all the commands to their respective docs.', 'comment_created': datetime.datetime(2023, 8, 3, 7, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}, {'comment_id': 1285100726, 'comment_body': 'Is there a reason not to link to it here?', 'comment_created': datetime.datetime(2023, 8, 5, 18, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1285100904, 'comment_body': '```suggestion\r\nPGXN requires a metadata file that provides information about your extension. Create a file named `META.json` that includes details such as the extension name, version, author, description, dependencies, and other relevant information. Refer to the [PGXN Meta Specification](https://pgxn.org/spec/) for the required format and fields.\r\n```', 'comment_created': datetime.datetime(2023, 8, 5, 18, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'theory', 'type': 'User'}, {'comment_id': 1287540726, 'comment_body': '```suggestion\r\n# [PGXN](https://pgxn.org) (PostgreSQL Extension Network):\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 19, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IshaanAdarsh', 'type': 'User'}]","[{'commit_sha': '02ce827ca085467d61ff07e8701bba429648c9f5', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59643202ad5fb31a7f3583b5ca42b441900540c3', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaadb3e9eb61ec4c5c1d3c26a89cb786a715345c', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdf2c5dc9ad0d63a98d7bee223d5a65e90b949e9', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa369da3e1d6a43ec48ca5c1b0d074591eaeffde', 'committer_username': 'IshaanAdarsh', 'committer_name': 'Ishaan Adarsh', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 25, 16, 52, 8, tzinfo=datetime.timezone.utc)}]",Ishaan Adarsh,100434702,,User,,40,,105,83

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
614830038,Postgres-extension-tutorial,IshaanAdarsh/Postgres-extension-tutorial,PLpgSQL,1,10,3,1,576,0,1,0,"[{'id': 1451915603, 'number': 33, 'closed': datetime.datetime(2023, 8, 19, 17, 13, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 12, 31, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2004137.0, 'time_delta': '23 days, 4:42:17', 'additions': 156, 'deletions': 0, 'state': 'closed'}, {'id': 1449634964, 'number': 32, 'closed': datetime.datetime(2023, 8, 19, 17, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 26, 6, 46, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2111230.0, 'time_delta': '24 days, 10:27:10', 'additions': 279, 'deletions': 0, 'state': 'closed'}, {'id': 1449612748, 'number': 31, 'closed': datetime.datetime(2023, 8, 19, 17, 14, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 26, 6, 26, 3, tzinfo=datetime.timezone.utc), 'time_taken': 2112492.0, 'time_delta': '24 days, 10:48:12', 'additions': 168, 'deletions': 0, 'state': 'closed'}, {'id': 1448932427, 'number': 30, 'closed': datetime.datetime(2023, 8, 1, 11, 49, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 25, 18, 20, 44, tzinfo=datetime.timezone.utc), 'time_taken': 581297.0, 'time_delta': '6 days, 17:28:17', 'additions': 144, 'deletions': 0, 'state': 'closed'}, {'id': 1434784272, 'number': 27, 'closed': datetime.datetime(2023, 7, 15, 5, 55, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 13, 20, 18, tzinfo=datetime.timezone.utc), 'time_taken': 59714.0, 'time_delta': '16:35:14', 'additions': 65, 'deletions': 109, 'state': 'closed'}, {'id': 1426275411, 'number': 25, 'closed': datetime.datetime(2023, 8, 19, 17, 14, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 9, 11, 37, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3562615.0, 'time_delta': '41 days, 5:36:55', 'additions': 257, 'deletions': 0, 'state': 'closed'}, {'id': 1413836022, 'number': 21, 'closed': datetime.datetime(2023, 6, 30, 20, 15, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 19, 38, 9, tzinfo=datetime.timezone.utc), 'time_taken': 88656.0, 'time_delta': '1 day, 0:37:36', 'additions': 203, 'deletions': 0, 'state': 'closed'}, {'id': 1411667911, 'number': 18, 'closed': datetime.datetime(2023, 6, 29, 18, 15, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 13, 32, 37, tzinfo=datetime.timezone.utc), 'time_taken': 103345.0, 'time_delta': '1 day, 4:42:25', 'additions': 190, 'deletions': 0, 'state': 'closed'}, {'id': 1409128580, 'number': 16, 'closed': datetime.datetime(2023, 6, 28, 13, 29, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 27, 5, 22, 15, tzinfo=datetime.timezone.utc), 'time_taken': 115634.0, 'time_delta': '1 day, 8:07:14', 'additions': 59, 'deletions': 0, 'state': 'closed'}, {'id': 1407663761, 'number': 14, 'closed': datetime.datetime(2023, 8, 19, 17, 14, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 26, 10, 35, 29, tzinfo=datetime.timezone.utc), 'time_taken': 4689562.0, 'time_delta': '54 days, 6:39:22', 'additions': 898, 'deletions': 0, 'state': 'closed'}, {'id': 1401795181, 'number': 12, 'closed': datetime.datetime(2023, 6, 24, 20, 4, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 14, 15, 2, tzinfo=datetime.timezone.utc), 'time_taken': 280155.0, 'time_delta': '3 days, 5:49:15', 'additions': 448, 'deletions': 0, 'state': 'closed'}, {'id': 1401767374, 'number': 11, 'closed': datetime.datetime(2023, 6, 24, 20, 3, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 14, 1, 21, tzinfo=datetime.timezone.utc), 'time_taken': 280952.0, 'time_delta': '3 days, 6:02:32', 'additions': 390, 'deletions': 0, 'state': 'closed'}, {'id': 1398204527, 'number': 10, 'closed': datetime.datetime(2023, 6, 24, 20, 4, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 13, 3, 31, tzinfo=datetime.timezone.utc), 'time_taken': 457262.0, 'time_delta': '5 days, 7:01:02', 'additions': 142, 'deletions': 0, 'state': 'closed'}, {'id': 1398183695, 'number': 9, 'closed': datetime.datetime(2023, 6, 24, 20, 4, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 12, 53, 1, tzinfo=datetime.timezone.utc), 'time_taken': 457906.0, 'time_delta': '5 days, 7:11:46', 'additions': 243, 'deletions': 0, 'state': 'closed'}, {'id': 1397169292, 'number': 8, 'closed': datetime.datetime(2023, 6, 24, 20, 5, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 14, 47, 50, tzinfo=datetime.timezone.utc), 'time_taken': 537431.0, 'time_delta': '6 days, 5:17:11', 'additions': 45, 'deletions': 45, 'state': 'closed'}, {'id': 1397169131, 'number': 7, 'closed': datetime.datetime(2023, 6, 24, 20, 5, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 14, 47, 15, tzinfo=datetime.timezone.utc), 'time_taken': 537493.0, 'time_delta': '6 days, 5:18:13', 'additions': 106, 'deletions': 106, 'state': 'closed'}, {'id': 1397168959, 'number': 6, 'closed': datetime.datetime(2023, 6, 24, 20, 5, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 14, 46, 39, tzinfo=datetime.timezone.utc), 'time_taken': 537546.0, 'time_delta': '6 days, 5:19:06', 'additions': 387, 'deletions': 386, 'state': 'closed'}, {'id': 1397168839, 'number': 5, 'closed': datetime.datetime(2023, 6, 24, 20, 6, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 14, 46, 9, tzinfo=datetime.timezone.utc), 'time_taken': 537638.0, 'time_delta': '6 days, 5:20:38', 'additions': 138, 'deletions': 138, 'state': 'closed'}, {'id': 1397168645, 'number': 4, 'closed': datetime.datetime(2023, 6, 30, 20, 17, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 14, 45, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1056704.0, 'time_delta': '12 days, 5:31:44', 'additions': 315, 'deletions': 315, 'state': 'closed'}, {'id': 1397164944, 'number': 3, 'closed': datetime.datetime(2023, 6, 30, 20, 16, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 14, 36, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1057226.0, 'time_delta': '12 days, 5:40:26', 'additions': 101, 'deletions': 101, 'state': 'closed'}, {'id': 1384784702, 'number': 2, 'closed': datetime.datetime(2023, 6, 8, 16, 15, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 16, 15, 19, tzinfo=datetime.timezone.utc), 'time_taken': 34.0, 'time_delta': '0:00:34', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1384761067, 'number': 1, 'closed': datetime.datetime(2023, 6, 8, 16, 8, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 8, 16, 7, 58, tzinfo=datetime.timezone.utc), 'time_taken': 30.0, 'time_delta': '0:00:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
