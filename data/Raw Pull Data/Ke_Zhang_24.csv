pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
687320976,Query and dispatch ProfileTaskCommand,"This is PR is for Google Summer Of Code 2021 Project: [Proposal for Apache SkyWalking: Python agent supports profiling](https://summerofcode.withgoogle.com/dashboard/project/5701806362984448/overview/)

Add query and dispatch part of ProfileTaskCommand, mainly includes those steps:

```
1. query ProfileTaskCommand from OAPServer.
2. deserialize command to object
3. dispatch it to appropriate CommandExecutor, here is ProfileTaskCommandExecutor
4. check the ProfileTask's attributes is rational and add it in profile task queue
```
It uses two threads to complete the task: `QueryProfileCommandThread` for query and `CommandDispatchThread` for command dispatch and check.

This PR is the first part of https://github.com/apache/skywalking/issues/5943. I will add the execute part and tests for profiling feature in following PRs.
",True,127,https://api.github.com/repos/apache/skywalking-python/pulls/127,https://github.com/apache/skywalking-python/pull/127,closed,616,8,19,11,2,27,2,0,"[{'name': 'feature'}, {'name': 'core'}]",2021-07-11 11:45:17+00:00,2021-07-12 04:00:34+00:00,58517.0,16:15:17,"[{'comment_id': 667468800, 'comment_body': 'I think we can enable this by default because it only functions when user creates a profiling task, right?', 'comment_created': datetime.datetime(2021, 7, 11, 11, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 667468890, 'comment_body': ""Let's be clear about the time unit, seconds"", 'comment_created': datetime.datetime(2021, 7, 11, 11, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 667469131, 'comment_body': 's/`MINUTE_TO_MILLS`/`MINUTE_TO_MILLIS`/g', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 667469175, 'comment_body': 'Yes, but maybe when I finished the whole part of profiling function? What do you think?', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}, {'comment_id': 667469215, 'comment_body': 'Ok, I will add it', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}, {'comment_id': 667469216, 'comment_body': '*Incompatible variable type:*  command is declared to have type `str` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469220, 'comment_body': '*Incompatible variable type:*  serial_number is declared to have type `str` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469256, 'comment_body': '*Incompatible variable type:*  create_time is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469260, 'comment_body': '*Incompatible variable type:*  dump_period is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469263, 'comment_body': '*Incompatible variable type:*  duration is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469266, 'comment_body': '*Incompatible variable type:*  endpoint_name is declared to have type `str` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469269, 'comment_body': '*Incompatible variable type:*  max_sampling_count is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469272, 'comment_body': '*Incompatible variable type:*  min_duration_threshold is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469273, 'comment_body': '> Yes, but maybe when I finished the whole part of profing function? What do you think?\r\n\r\nYes sure!!!', 'comment_created': datetime.datetime(2021, 7, 11, 11, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 667469275, 'comment_body': '*Incompatible variable type:*  serial_number is declared to have type `str` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469277, 'comment_body': '*Incompatible variable type:*  start_time is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469281, 'comment_body': '*Incompatible variable type:*  task_id is declared to have type `str` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469284, 'comment_body': '*Incompatible variable type:*  create_time is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469288, 'comment_body': '*Incompatible variable type:*  duration is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469313, 'comment_body': '*Incompatible variable type:*  first_span_op_name is declared to have type `str` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469319, 'comment_body': '*Incompatible variable type:*  max_sampling_count is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469322, 'comment_body': '*Incompatible variable type:*  min_duration_threshold is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469325, 'comment_body': '*Incompatible variable type:*  start_time is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469328, 'comment_body': '*Incompatible variable type:*  task_id is declared to have type `str` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469331, 'comment_body': '*Incompatible variable type:*  thread_dump_period is declared to have type `int` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469333, 'comment_body': '*Inconsistent override:*  `skywalking.command.executors.profile_task_command_executor.ProfileTaskCommandExecutor.execute` overrides method defined in `CommandExecutor` inconsistently. Parameter of type `ProfileTaskCommand` is not a supertype of the overridden parameter `skywalking.command.base_command.BaseCommand`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 7, 11, 11, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 667469922, 'comment_body': 'Got it!', 'comment_created': datetime.datetime(2021, 7, 11, 11, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}]","[{'commit_sha': '7e20120ceebd69ee8d2e3fd44356fe54438df036', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '339e95925d04ee2b360fc6c133c96f8bebd07db9', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2074dfaa11e7e1fc84f5e5bfffa0867f8f5b8c4', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41bb5ed751cd509bbd942472727716f8554233f1', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd88da5bc58cab49097756521612c633265b4cbf', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a748f59b425adb2ec0f8c9d9b0f2c498ae767fe', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ae2b048aed915c6982c591a8a7b547af45f525', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c33a4954e27a8f2f16ca92f641fe088176b7f9d0', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f2970c0d560eb85efa4316d6a4d3c40d8e4540', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08805d955b9fa8edfcb2d34410f7d1b55def9a0f', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60b66a04de25fba0b43224d71cc501c6e105a2ec', 'committer_username': 'kezhenxu94', 'committer_name': 'kezhenxu94', 'committer_email': 'kezhenxu94@apache.org', 'commit_date': datetime.datetime(2015, 11, 22, 10, 47, 52, tzinfo=datetime.timezone.utc)}]",Ke Zhang,24400940,humbertzk@gmail.com,User,,68,,119,130
717102814,Add Profile function,"This is PR is for Google Summer Of Code 2021 Project: [Proposal for Apache SkyWalking: Python agent supports profiling](https://summerofcode.withgoogle.com/dashboard/project/5701806362984448/overview/)
I will add test for profile function after GSoC is  over. 

This PR is the rest part of https://github.com/apache/skywalking/issues/5943 following https://github.com/apache/skywalking-python/pull/127 .

It added the profile function into Python Agent, I tested it in normal and concurrent scenario and it works fine. 
",True,155,https://api.github.com/repos/apache/skywalking-python/pulls/155,https://github.com/apache/skywalking-python/pull/155,closed,854,135,21,12,1,17,2,0,"[{'name': 'feature'}, {'name': 'core'}]",2021-08-21 06:30:34+00:00,2021-08-22 04:20:10+00:00,78576.0,21:49:36,"[{'comment_id': 693313674, 'comment_body': '*Incompatible attribute type:*  Attribute `_profiling_stop_event` declared in class `ProfileTaskExecutionContext` has type `Event` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 8, 21, 6, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 693313675, 'comment_body': '*Incompatible attribute type:*  Attribute `_profiling_thread` declared in class `ProfileTaskExecutionContext` has type `Thread` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 8, 21, 6, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 693313678, 'comment_body': '*Incompatible attribute type:*  Attribute `_stop_event` declared in class `ProfileThread` has type `Event` but is used as type `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 8, 21, 6, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 693313679, 'comment_body': '*Incompatible parameter type:*  Expected `int` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[int]`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 8, 21, 6, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 693313680, 'comment_body': '*Incompatible parameter type:*  Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `AtomicArray`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 8, 21, 6, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 693313681, 'comment_body': '*Incompatible return type:*  Expected `TracingThreadSnapshot` but got `None`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 8, 21, 6, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 693316483, 'comment_body': '*Incompatible parameter type:*  Expected `typing.Union[_SupportsIndex, _SupportsTrunc, bytes, str, typing.SupportsInt]` for 1st positional only parameter to call `int.__new__` but got `Optional[int]`.\n(at-me [in a reply](https://help.sonatype.com/lift) with `help` or `ignore`)', 'comment_created': datetime.datetime(2021, 8, 21, 7, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sonatype-lift[bot]', 'type': 'Bot'}, {'comment_id': 693317535, 'comment_body': 'ignore', 'comment_created': datetime.datetime(2021, 8, 21, 7, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}, {'comment_id': 693317593, 'comment_body': 'ignore', 'comment_created': datetime.datetime(2021, 8, 21, 7, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}, {'comment_id': 693324527, 'comment_body': '@sonatype-lift ignore', 'comment_created': datetime.datetime(2021, 8, 21, 8, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}, {'comment_id': 693428577, 'comment_body': 'We should not always schedule after `task.duration` minutes, right? If the agent restarts, the task will be stopped after `task.duration` minutes after the agent restarted, even at that time the duration may be passed.\r\n\r\nWe should check whether, for example, `current_time_millis() - task.start_time > task.duration`?', 'comment_created': datetime.datetime(2021, 8, 22, 2, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 693429890, 'comment_body': 'Will simply using a tuple `bool, str` make codes more simpler (and Pythonic)? Ignore me if you want to keep it as is', 'comment_created': datetime.datetime(2021, 8, 22, 2, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 693429945, 'comment_body': '```suggestion\r\n            time.sleep(need_sleep / 1000)\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 2, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 693430176, 'comment_body': '```suggestion\r\n                                                           using_slot_cnt + 1):\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 2, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 693430209, 'comment_body': '```suggestion\r\n            logger.debug(""profile task [%s] for endpoint [%s] stopped"", need_stop.task.task_id,\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 2, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kezhenxu94', 'type': 'User'}, {'comment_id': 693434148, 'comment_body': 'I staied at same with Java Agent here, I think the reason for that is to make sure to profile enough time', 'comment_created': datetime.datetime(2021, 8, 22, 3, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}, {'comment_id': 693434221, 'comment_body': 'I will modify here', 'comment_created': datetime.datetime(2021, 8, 22, 3, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Humbertzhang', 'type': 'User'}]","[{'commit_sha': 'f496e7dd387c450fa98234569784aedd973952b4', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd41cfdf2bf4705206ed330e7c14f0687f29bc4', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f36e45817103cfcb76822c987c388e16d04c0c', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ebfc4ef7f68436fc184e4ae626ded66cc833c2', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c5d0bded00a32815c15d25ffd25076a47ea681', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fafb2d9581faf24d972dfb5b5a3a3f1c0c6f493', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '911078bcb714f83e9f8e5ea8d8c8548d5a31f40b', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b8434206d1c412ec023a5b147ae5c993e308cf2', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c7398abfabaee1bda7eb2c6fab40d6620453c2', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5617a07cef268b284e3c82daf25b1425f281871f', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1f4cd6aacfdf2e82c0773a5a2dbe3041f62695a', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a03c204b786f6a5927af987fa99c8d79cfb5f2', 'committer_username': 'Humbertzhang', 'committer_name': 'Ke Zhang', 'committer_email': 'humbertzk@gmail.com', 'commit_date': datetime.datetime(2016, 12, 6, 1, 56, 51, tzinfo=datetime.timezone.utc)}]",Ke Zhang,24400940,humbertzk@gmail.com,User,,68,,119,130

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
261456329,skywalking-python,apache/skywalking-python,Python,103,185,36,40,311,1,4,1,"[{'id': 717102814, 'number': 155, 'closed': datetime.datetime(2021, 8, 22, 4, 20, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 21, 6, 30, 34, tzinfo=datetime.timezone.utc), 'time_taken': 78576.0, 'time_delta': '21:49:36', 'additions': 854, 'deletions': 135, 'state': 'closed'}, {'id': 687320976, 'number': 127, 'closed': datetime.datetime(2021, 7, 12, 4, 0, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 11, 45, 17, tzinfo=datetime.timezone.utc), 'time_taken': 58517.0, 'time_delta': '16:15:17', 'additions': 616, 'deletions': 8, 'state': 'closed'}, {'id': 501361385, 'number': 78, 'closed': datetime.datetime(2020, 10, 12, 7, 49, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 12, 7, 2, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2861.0, 'time_delta': '0:47:41', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 493721888, 'number': 74, 'closed': datetime.datetime(2020, 10, 9, 16, 19, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 27, 13, 28, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1047012.0, 'time_delta': '12 days, 2:50:12', 'additions': 224, 'deletions': 0, 'state': 'closed'}, {'id': 465950241, 'number': 63, 'closed': datetime.datetime(2020, 8, 13, 14, 27, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 8, 25, 3, tzinfo=datetime.timezone.utc), 'time_taken': 194541.0, 'time_delta': '2 days, 6:02:21', 'additions': 199, 'deletions': 8, 'state': 'closed'}, {'id': 464142297, 'number': 60, 'closed': datetime.datetime(2020, 8, 7, 3, 12, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 16, 47, 57, tzinfo=datetime.timezone.utc), 'time_taken': 37480.0, 'time_delta': '10:24:40', 'additions': 694, 'deletions': 0, 'state': 'closed'}, {'id': 456692235, 'number': 52, 'closed': datetime.datetime(2020, 7, 27, 5, 25, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 2, 32, 6, tzinfo=datetime.timezone.utc), 'time_taken': 96825.0, 'time_delta': '1 day, 2:53:45', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 456183041, 'number': 49, 'closed': datetime.datetime(2020, 7, 25, 5, 29, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 9, 30, 40, tzinfo=datetime.timezone.utc), 'time_taken': 71916.0, 'time_delta': '19:58:36', 'additions': 37, 'deletions': 21, 'state': 'closed'}, {'id': 452524263, 'number': 42, 'closed': datetime.datetime(2020, 7, 19, 12, 58, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 11, 59, 44, tzinfo=datetime.timezone.utc), 'time_taken': 3497.0, 'time_delta': '0:58:17', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 449986773, 'number': 37, 'closed': datetime.datetime(2020, 7, 18, 15, 30, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 7, 59, 21, tzinfo=datetime.timezone.utc), 'time_taken': 199851.0, 'time_delta': '2 days, 7:30:51', 'additions': 404, 'deletions': 0, 'state': 'closed'}]"
