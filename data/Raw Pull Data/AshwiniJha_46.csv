pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
431229736,RecastDetour Integration,"# Google Summer of Code 2020 
### Organisation: Python Software Foundation | Sub-Organisation: Panda3D
This is the Pull Request for the integration of Recast Detour tools into Panda3D. It is part of my **Google Summer of Code 2020** Project. My proposal for the same can be found here: [GSoC Proposal](https://blogs.python-gsoc.org/media/proposals/Panda3D_GSoC_Proposal.pdf)
Recast Detour tools are advanced pathfinding tools used in game development. Recast builds a navigation mesh, which is the geometry containing all the walkable surfaces. Detour helps in finding path between source and destination points avoiding obstacles over that navigation mesh.
For the integration, we have divided the Recast Detour tools into two lilbraries: **navmeshgen** and **navigation**.

### navmeshgen

- **NavMeshBuilder:** NavMeshBuilder class contains all the vertices and triangles. It also has the functions to build the navigation meshes using those vertices and triangles. Set the properties of the actor and environment using this class  and then build it to get a NavMesh object as output.

### navigation

- **NavMeshParams:** NavMeshParams class stores all the parameters of a navigation mesh.
- **NavMesh:** NavMesh class stores the navigation mesh. The navigation mesh can be obtained using NavMeshBuilder class or can be generated using the NavMeshParams class by the user.
- **NavMeshNode:** NavMeshNode class is a child class of PandaNode which stores the NavMesh object.
- **NavMeshQuery:** NavMeshQuery class contains the functions to query the navigation mesh stored in a NavMesh object. The queries include functions to find the paths from one point to another over the mesh.

Sample code is also provided in the `samples/navigation` directory.

![panda3d](https://user-images.githubusercontent.com/31981122/91656147-ff460780-ead3-11ea-983e-c240e86f284a.gif)

The above gif shows the successful integration of the Recast Detour tools into Panda3D world. You get the same output on running the sample code. Press `Left-Mouse-Button` to set/change destination. Additionally, press `s` on keyboard to show the navigation mesh (in blue color) and press `h` to hide the navigation mesh.
We have also prepared the python and c++ docs for the same. The Pull Request for the Panda3d-Docs is available here: [#71](https://github.com/panda3d/panda3d-docs/pull/71)

As of the end of GSoC 2020 coding period, the integrated code can be compiled using makepanda. To list down the points which require to be done in future and which are completed during the GSoC period, it looks like follows:
- [x] Implementing the code into two libraries: navmeshgen and navigation
- [x] Generating navigation mesh
- [x] BAM Serialization
- [x] Exposing the three main dtNavMeshQuery query functions: `find_path`, `find_straight_path` and `find_nearest_point`
- [x] Writing Python and C++ Documentation
- [x] Implementing navigation mesh visualisation for debugging
- [x] Writing sample code
- [x] Writing unit test files
- [x] Addressing and resolving all PR reviews
- [x] Adding MakePanda support
- [ ] Adding CMake support
- [ ] Exposing more dtNavMeshQuery queries
- [ ] Adding Area costs

The last commit before the final evaluation is : [36986d9](https://github.com/panda3d/panda3d/pull/950/commits/36986d961e2c8b3506fddd0c8a5523c81b4c078f)

Special thanks to @rdb and @Moguri for being the best mentors and helping out in every situation.
To know more about the project, you can follow the comments and the commits in this Pull Request as well as the Pull Request [#71](https://github.com/panda3d/panda3d-docs/pull/71) for Panda3D-docs.

To know about my GSoC 2020 journey, read my blogs:
- [Python GSoC Weekly Blogs](https://blogs.python-gsoc.org/en/imaj_ashwinis-blog/)
- [Panda3D Discourse Thread](https://discourse.panda3d.org/t/recast-and-detour-integration-in-panda3d/26066)

_This comment is updated as of 30th August for the final evaluations of GSoC 2020._",False,950,https://api.github.com/repos/panda3d/panda3d/pulls/950,https://github.com/panda3d/panda3d/pull/950,closed,22648,0,54,32,9,138,1,0,[{'name': 'gsoc'}],2020-06-08 15:38:59+00:00,2022-05-21 16:44:48+00:00,61520749.0,"712 days, 1:05:49","[{'comment_id': 443243884, 'comment_body': 'Typo, should be climb', 'comment_created': datetime.datetime(2020, 6, 21, 18, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443243907, 'comment_body': 'We usually put the public interface at the top so you can easily see the public interface after opening the header file.  Also, this should be `PUBLISHED:` to make these methods exposed to Python.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443244051, 'comment_body': 'Members should be underscored.  Also, `mp` is not a very descriptive name; you should favour readability over terseness.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443244138, 'comment_body': ""Should be `const std::string &name` since it's not modifying it\r\n\r\nNavMesh should be a reference-counted class, so `PT(NavMesh)` (and make NavMesh inherit from ReferenceCount, or better yet, TypedWritableReferenceCount)."", 'comment_created': datetime.datetime(2020, 6, 21, 18, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443244209, 'comment_body': 'All your source/header files (not the Recast/Detour ones) need to have a file header with the license, author and date, like in other Panda source files.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443244245, 'comment_body': 'pandaFramework.h should not be included here', 'comment_created': datetime.datetime(2020, 6, 21, 18, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443244585, 'comment_body': ""NavMesh should be reference-counted, so that it can be passed between Python and C++ applications without issues.  You can do this by inheriting from ReferenceCount and making sure you allocate it with `new` and pass it by pointer.  Use `PT()` like with other Panda classes whenever storing it to make sure that the object won't get deleted.\r\n\r\nWe actually want to inherit it from TypedReferenceCount (which adds typing information on top of ReferenceCount, for the benefit of using the class from Python), and add all the TypeHandle boilerplate that can be seen in other Panda classes (look at `panda/src/skel/typedSkel.h` or `panda/src/movies/movieAudio.h` for examples of this.)\r\n\r\nEventually, we will want to change it to inherit from TypedWritableReferenceCount, which will be necessary to add the ability to serialise NavMesh objects from/to .bam files.\r\n\r\nThese suggestions only apply to NavMesh (and NavMeshNode, but it already inherits from TypedWritableReferenceCount indirectly through PandaNode), since these are the only classes that will need to be serialised to disk."", 'comment_created': datetime.datetime(2020, 6, 21, 18, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443244889, 'comment_body': 'Just thinking out loud, but I think that once you made NavMesh a class that is passed by pointer, you can wrap it and `build()` into a single call: `PT(NavMesh) build();` and simply return `nullptr` if it failed to build.', 'comment_created': datetime.datetime(2020, 6, 21, 18, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443262958, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 21, 22, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443262973, 'comment_body': 'Added them in the lastest commit', 'comment_created': datetime.datetime(2020, 6, 21, 22, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443262981, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 21, 22, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443263017, 'comment_body': 'Done in latest commit.', 'comment_created': datetime.datetime(2020, 6, 21, 22, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443263043, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 21, 22, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443263069, 'comment_body': 'Done in latest commit', 'comment_created': datetime.datetime(2020, 6, 21, 22, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443263130, 'comment_body': 'Removed get_navmesh function. Now build() returns PT(NavMesh)', 'comment_created': datetime.datetime(2020, 6, 21, 22, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443263179, 'comment_body': 'Tried removing it. Gave errors.\r\nProbably because ""TypedWritableReferenceCount"" requires that header.', 'comment_created': datetime.datetime(2020, 6, 21, 22, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 443757717, 'comment_body': 'Still missing from config_navigation.*', 'comment_created': datetime.datetime(2020, 6, 22, 18, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443757999, 'comment_body': 'Every file contains `@file movieAudio.h`', 'comment_created': datetime.datetime(2020, 6, 22, 18, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443759240, 'comment_body': 'Class NavMeshNode needs a docstring\r\n\r\nSince this class (indirectly) inherits from TypedObject, it needs TypeHandle boilerplate for use in Python (see the stuff at the bottom of MovieAudio and CollisionNode et al), this means adding this to the bottom of the class:\r\n\r\n```cpp\r\npublic:\r\n  static TypeHandle get_class_type() {\r\n    return _type_handle;\r\n  }\r\n  static void init_type() {\r\n    PandaNode::init_type();\r\n    register_type(_type_handle, ""NavMeshNode"",\r\n                  PandaNode::get_class_type());\r\n  }\r\n  virtual TypeHandle get_type() const {\r\n    return get_class_type();\r\n  }\r\n  virtual TypeHandle force_init_type() {init_type(); return get_class_type();}\r\n\r\nprivate:\r\n  static TypeHandle _type_handle;\r\n```\r\n\r\nand this to the top of the .cxx file, below the includes:\r\n```cpp\r\nTypeHandle NavMeshNode::_type_handle;\r\n```\r\n\r\nAnd this to the config_navigation.cxx file, in the init function:\r\n```\r\n  NavMeshNode::init_type();\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 18, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 443759903, 'comment_body': 'Well, maybe you should replace it with an include to `typedWritableReferenceCount.h` :-)\r\n\r\nIt may be that pandaFramework.h is indirectly including the header that you actually need.', 'comment_created': datetime.datetime(2020, 6, 22, 18, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 446546931, 'comment_body': ""Do not add 'config-variable' to the name, and please add a description."", 'comment_created': datetime.datetime(2020, 6, 27, 17, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446547306, 'comment_body': 'We should create properties for these using `MAKE_PROPERTY()`. `nodePath.h` has examples of this, but for `actor_radius`, you would do:\r\n```cpp\r\nMAKE_PROPERTY(actor_radius, get_actor_radius, set_actor_radius)\r\n```', 'comment_created': datetime.datetime(2020, 6, 27, 17, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446547369, 'comment_body': 'Please avoid single letter variable names for parameter names so that the auto-generated API docs are cleaner.', 'comment_created': datetime.datetime(2020, 6, 27, 17, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446547442, 'comment_body': 'These names imply that you are creating a NavMeshBuilder from these inputs. Looking at the rest of this API, I believe `add_node_path()` and `add_geom()` may be more appropriate. Does it make sense to also expose `add_vertex()` and `add_triangle()`?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446547500, 'comment_body': 'Should these be builder functions? I am not sure why the builder has verts and such; I would expect this kind of stuff on the NavMesh class.', 'comment_created': datetime.datetime(2020, 6, 27, 17, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446547606, 'comment_body': 'Any reason to not store all of these in an instance of `BuildSettings` instead of duplicating the individual items here?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446547685, 'comment_body': 'Are we using DetourCrowd?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446547835, 'comment_body': ""This comment doesn't make any sense to me. Maybe just remove it?"", 'comment_created': datetime.datetime(2020, 6, 27, 17, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446548344, 'comment_body': 'This appears to be unused; can it be removed?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446549123, 'comment_body': 'I think we should avoid starting a convention where we call `NavMeshBuilder` instances `nav` since that is better suited for the nav mesh itself. Maybe `nav_builder` or just `builder`?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446549155, 'comment_body': 'Prefer snake-case for new Python code.', 'comment_created': datetime.datetime(2020, 6, 27, 17, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 446988417, 'comment_body': 'The functions like set_actor_*() are optional. Those variables have a default value while from_node_path()/from_geom() is a compulsory function and is required to be called before build(). So, I thought to have different naming for them.', 'comment_created': datetime.datetime(2020, 6, 29, 13, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 446990167, 'comment_body': ""Also, we may expose add_vertex() but that I don't think would make much sense as we cannot expose add_triangle(). Add_triangle() requires indices of 3 vertices as input. The user won't be knowing what index is assigned to what vertex. "", 'comment_created': datetime.datetime(2020, 6, 29, 13, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 447907459, 'comment_body': 'These methods still lack docstrings.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447907686, 'comment_body': 'Class lacks docstring.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447908044, 'comment_body': 'Return at the end of a method is unnecessary', 'comment_created': datetime.datetime(2020, 6, 30, 18, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447908437, 'comment_body': 'All members need their names to start with underscores so that they can be easily distinguished.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447909502, 'comment_body': 'A convenience add_triangle method exposed to Python could surely take three LPoint3 instances, which are looked up in the vertex map (and if not present, added to the vertices).', 'comment_created': datetime.datetime(2020, 6, 30, 18, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447909742, 'comment_body': 'Use snake_case', 'comment_created': datetime.datetime(2020, 6, 30, 18, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447910061, 'comment_body': 'Why is there a filename on NavMeshBuilder?.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447910226, 'comment_body': 'Missing docstring', 'comment_created': datetime.datetime(2020, 6, 30, 18, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 447996350, 'comment_body': 'yes, will add that function as well\r\n', 'comment_created': datetime.datetime(2020, 6, 30, 21, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 451925108, 'comment_body': 'Member variables should have a leading underscore (i.e., `_params`). However, this may also be confusing with the ""params"" for BAM serialization. Maybe `_dt_params` or `_mesh_params` would be clearer? I would also prefer this to be private.', 'comment_created': datetime.datetime(2020, 7, 9, 2, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 451925644, 'comment_body': ""The Bullet stuff does this for a list of shapes, but we only have the one NavMesh, so I don't think we need a null value to indicate the end of a list."", 'comment_created': datetime.datetime(2020, 7, 9, 2, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 451926082, 'comment_body': ""Remove this code if we don't need it.\r\n\r\n@rdb, we noticed that BulletBodyNode did not define a `make_from_bam()` (presumably making use of `PandaNode::make_from_bam()`). Is this correct, or is BulletBodyNode potentially broken by not defining its own `make_from_bam()`?"", 'comment_created': datetime.datetime(2020, 7, 9, 2, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 451926148, 'comment_body': 'Remove extra, unnecessary whitespace.', 'comment_created': datetime.datetime(2020, 7, 9, 2, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 451926477, 'comment_body': 'This `2048` should come from a constant (can be static to this compilation unit) or a member variable. Using a variable instead of a ""magic number"" makes the code more self-explanatory.', 'comment_created': datetime.datetime(2020, 7, 9, 2, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 451927370, 'comment_body': 'These functions all need doc strings which will be used for our generated API reference.', 'comment_created': datetime.datetime(2020, 7, 9, 2, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 451929930, 'comment_body': '`string_utils.h` has a `downcase()` to convert a string to all lowercase, which would make this check nicer and more robust:\r\n\r\n```cpp\r\nif (downcase(p) == ""watershed"") {\r\n...\r\n}```', 'comment_created': datetime.datetime(2020, 7, 9, 2, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 451965992, 'comment_body': 'Actually, I was calling this member and giving it values in NavMeshBuilder.cxx . So, I thought to keep it public.', 'comment_created': datetime.datetime(2020, 7, 9, 5, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 452516399, 'comment_body': 'Yeah, forgot to remove it. Earlier, I was taking .obj filename as input and converting it to polymesh. Removed it now.\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 22, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 452596102, 'comment_body': ""I believe initializing these types should come after the init guard (`if (initialized)`). Also, I see that config_bullet.cxx is calling the `register_with_read_factory()` member functions on various types, so I am guessing you'll need to do the same."", 'comment_created': datetime.datetime(2020, 7, 10, 2, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463385836, 'comment_body': 'Use Notify and not stdout', 'comment_created': datetime.datetime(2020, 7, 31, 3, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463385865, 'comment_body': 'Use Notify and not stdout', 'comment_created': datetime.datetime(2020, 7, 31, 3, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463385896, 'comment_body': 'Use Notify and not stdout', 'comment_created': datetime.datetime(2020, 7, 31, 3, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463385998, 'comment_body': 'Remove unused PRC variable left over from the skeleton/sample file.', 'comment_created': datetime.datetime(2020, 7, 31, 3, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463386300, 'comment_body': 'Should this be a constant? Also, is this something we should expose to Python?', 'comment_created': datetime.datetime(2020, 7, 31, 3, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463386543, 'comment_body': 'Remove the single-line (`//`) comments, you already have this as a mutli-line (`/* ... */`) comment.', 'comment_created': datetime.datetime(2020, 7, 31, 3, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463386817, 'comment_body': 'Remove unused PRC variable', 'comment_created': datetime.datetime(2020, 7, 31, 3, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463386863, 'comment_body': 'Remove unused PRC variable', 'comment_created': datetime.datetime(2020, 7, 31, 3, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463387379, 'comment_body': 'Prefer snake_case for new samples', 'comment_created': datetime.datetime(2020, 7, 31, 3, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463387833, 'comment_body': ""We should be attaching a NavMeshNode to the scene graph, not a Geom representation of the NavMesh. Also, show()/hide() on the NavMeshNode (or maybe it's the NavMesh?) should use this debug drawing capability. We should remove Geom generation from the builder.\r\n\r\nA shortcut (e.g., bind f1) to show/hide the navmesh debug mesh would be nice."", 'comment_created': datetime.datetime(2020, 7, 31, 3, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388254, 'comment_body': 'The sample should demonstrate querying. I think the most straight-forward example would be to have an Actor that moves to a location based on a mouse click. You can use Intervals to move the Actor along the points found from querying. It would also be nice to represent the current path (e.g., using line segments).', 'comment_created': datetime.datetime(2020, 7, 31, 3, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388385, 'comment_body': 'No empty line after function signatures', 'comment_created': datetime.datetime(2020, 7, 31, 3, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388403, 'comment_body': 'No empty line after function signatures', 'comment_created': datetime.datetime(2020, 7, 31, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388423, 'comment_body': 'No empty line after function signatures', 'comment_created': datetime.datetime(2020, 7, 31, 3, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388465, 'comment_body': 'No extra new-line at the end of the file', 'comment_created': datetime.datetime(2020, 7, 31, 3, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388492, 'comment_body': 'No empty line after function signatures', 'comment_created': datetime.datetime(2020, 7, 31, 3, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388511, 'comment_body': 'No empty line after function signatures', 'comment_created': datetime.datetime(2020, 7, 31, 3, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463388802, 'comment_body': 'Why import `NodePath` and `LPoint3` specifically when you grab everything else via `core`? Might as well keep the namespacing intact and use `core.NodePath` and `core.LPoint3`.', 'comment_created': datetime.datetime(2020, 7, 31, 3, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463389525, 'comment_body': ""Shouldn't this be `navmeshgen.NavMeshBuilder()`?"", 'comment_created': datetime.datetime(2020, 7, 31, 3, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Moguri', 'type': 'User'}, {'comment_id': 463790124, 'comment_body': 'I have not updated the sample code as of now. I planned to write the sample code again after finding new level\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 19, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 465411729, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 8, 5, 1, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 465418474, 'comment_body': 'Removed\r\n', 'comment_created': datetime.datetime(2020, 8, 5, 1, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 465419275, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 5, 1, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 467597381, 'comment_body': 'If this is not used for anything it should be removed.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597400, 'comment_body': 'This should be removed as it looks like a test print.  Same with the rest of the file.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597456, 'comment_body': ""Don't forget about the docstrings for the methods!"", 'comment_created': datetime.datetime(2020, 8, 9, 15, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597519, 'comment_body': ""There's probably a more idiomatic way to do this in C++.  I guess `_params = {};` should do it."", 'comment_created': datetime.datetime(2020, 8, 9, 15, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597554, 'comment_body': 'Tab character', 'comment_created': datetime.datetime(2020, 8, 9, 15, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597645, 'comment_body': 'You should use a notify category, like:\r\n```cpp\r\n    navigation_cat.error()\r\n      << ""Could not build Detour navmesh.\\n"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 15, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597845, 'comment_body': 'If there is time you should take into account that the `coordinate-system` Config.prc variable may not be set to Z-up necessarily.  It may be necessary to, before the loop, store something like:\r\n```python\r\nLMatrix4 mat = LMatrix4::convert_mat(CS_yup_right, CS_default);\r\n\r\nAnd then during the loop use `mat.convert_point` to convert your points according to the given transformation.\r\n\r\nEither that, or you can pass the matrix to a call to `geom.transform_vertices` after the fact.\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 15, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597878, 'comment_body': 'Please remove unnecessary lines of spacing.  One empty line between methods is enough.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467597939, 'comment_body': 'Looks like you added the typedWirtableReferenceCount.h include, so now it should be OK to remove pandaFramework.h.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467598081, 'comment_body': 'Agreed, is this necessary?', 'comment_created': datetime.datetime(2020, 8, 9, 15, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467598226, 'comment_body': ""This is a constant, we don't need to store it anywhere."", 'comment_created': datetime.datetime(2020, 8, 9, 15, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467598287, 'comment_body': 'Again, since this is a constant, this should not be stored (and if it really should be stored, it should conform to the naming conventions for members).', 'comment_created': datetime.datetime(2020, 8, 9, 15, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467598483, 'comment_body': ""Use Panda's own casting system, which does not rely on RTTI.  To use it: `DCAST(NavMeshNode, nav_mesh_node_path.node())`"", 'comment_created': datetime.datetime(2020, 8, 9, 15, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467599237, 'comment_body': 'The debug info should be taken out or you should use `navmeshgen_cat.spam()` or `navmeshgen_cat.debug()` so that the debug info can be disabled in Config.prc.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467599303, 'comment_body': ""This shouldn't take a string.  This should take an enum that is properly exposed to Python."", 'comment_created': datetime.datetime(2020, 8, 9, 15, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467599332, 'comment_body': 'Use `nullptr` for pointers', 'comment_created': datetime.datetime(2020, 8, 9, 15, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467599427, 'comment_body': 'partition_type should be an enum', 'comment_created': datetime.datetime(2020, 8, 9, 15, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467599509, 'comment_body': ""I think these should be LVecBase3—but actually, they appear to be entirely unused, so you should remove these (and take a pass over these variables to make sure that you don't have unused or confusing variables in here)."", 'comment_created': datetime.datetime(2020, 8, 9, 15, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467599708, 'comment_body': ""This is unused, but perhaps this is WIP?  I don't see any way in the API that a Python user can input a BuildSettings object."", 'comment_created': datetime.datetime(2020, 8, 9, 15, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 467599747, 'comment_body': 'Instead of requiring a drawNavMeshGeom call, it would be good that the user can just call `.show()` on a NodePath pointing to a NavMeshNode.  See CollisionNode for an example of how to make this possible.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 469595006, 'comment_body': 'In the latest commit, I removed BuildSettings class and added separate functions to set and get settings which were defined in BuildSettings.\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 23, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 469595345, 'comment_body': 'Done. Please review if it is done correctly.', 'comment_created': datetime.datetime(2020, 8, 12, 23, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 469596926, 'comment_body': 'Done. Please review if it is correctly done.', 'comment_created': datetime.datetime(2020, 8, 12, 23, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 471524465, 'comment_body': 'I have added add_polygon method exposed to Python which takes in 3 LPoint3 instances.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 17, 14, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 471530508, 'comment_body': 'i have removed buildsettings class', 'comment_created': datetime.datetime(2020, 8, 17, 14, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 471549428, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 8, 17, 15, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472095660, 'comment_body': 'Done for all such output instructions\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472103965, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 11, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472104089, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 11, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472105384, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 11, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472105602, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 11, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472105851, 'comment_body': 'Removed it', 'comment_created': datetime.datetime(2020, 8, 18, 11, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472105984, 'comment_body': 'Removed it', 'comment_created': datetime.datetime(2020, 8, 18, 11, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472109202, 'comment_body': 'Should docstrings be added in header files as well? I have added them in cxx files only for all the functions', 'comment_created': datetime.datetime(2020, 8, 18, 11, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472109492, 'comment_body': 'Should docstrings be added in header files as well? I have added them in cxx files only for all the functions @rdb ', 'comment_created': datetime.datetime(2020, 8, 18, 11, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472137540, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 12, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472137753, 'comment_body': 'Removed\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 12, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472143273, 'comment_body': 'It still gives error\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 12, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472147427, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 12, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472150646, 'comment_body': '@rdb the vertices with this value belong to the edges which are solid borders. So if someone does not use navmeshgen to build the navmesh, then he/she might have a different value for such vertices. ', 'comment_created': datetime.datetime(2020, 8, 18, 12, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472150874, 'comment_body': '@rdb the vertices with this value belong to the edges which are solid borders. So if someone does not use navmeshgen to build the navmesh, then he/she might have a different value for such vertices.', 'comment_created': datetime.datetime(2020, 8, 18, 12, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472151097, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 12, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472279620, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 18, 15, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 472624137, 'comment_body': 'the vertices with this value belong to the edges which are solid borders. So if someone does not use navmeshgen to build the navmesh, then he/she might have a different value for such vertices.', 'comment_created': datetime.datetime(2020, 8, 19, 3, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 474463373, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 7, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 474463636, 'comment_body': 'Renamed it\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 7, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 474464035, 'comment_body': 'Renamed\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 7, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 475227064, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 23, 14, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 475227606, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 23, 14, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 475227630, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 8, 23, 14, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 475227757, 'comment_body': 'added to NavMesh class', 'comment_created': datetime.datetime(2020, 8, 23, 14, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 475242995, 'comment_body': 'Done. Thanks :smiley: ', 'comment_created': datetime.datetime(2020, 8, 23, 17, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 477081254, 'comment_body': ""Bound 's' for show() and 'h' for hide()"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ash1215', 'type': 'User'}, {'comment_id': 483948098, 'comment_body': ""These shouldn't be members,because these are constant and not unique for every class.  If you want to store these then it's better to put these as `static const` on top of the .cxx file."", 'comment_created': datetime.datetime(2020, 9, 5, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948127, 'comment_body': 'Oops, looks like a tab character made it in!', 'comment_created': datetime.datetime(2020, 9, 5, 12, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948359, 'comment_body': 'Returns at the end of a void function are unnecessary.', 'comment_created': datetime.datetime(2020, 9, 5, 12, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948416, 'comment_body': 'These appear to be unused and can be removed.', 'comment_created': datetime.datetime(2020, 9, 5, 12, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948550, 'comment_body': 'Please use {} around all if blocks, thanks.', 'comment_created': datetime.datetime(2020, 9, 5, 12, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948625, 'comment_body': 'Should we return `nullptr` instead of an incomplete NavMesh object if an error occurred?', 'comment_created': datetime.datetime(2020, 9, 5, 12, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948761, 'comment_body': ""The SAMPLE_ prefix referred to the Recast sample program; I don't think this naming is appropriate for our Recast integration.  In fact, I don't think we should define a list of poly areas/flags, which should rather be chosen by the user as needed.\r\n\r\nSince SamplePolyAreas and SamplePolyFlags are unused, you can just remove them."", 'comment_created': datetime.datetime(2020, 9, 5, 12, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948791, 'comment_body': 'PT_watershed, PT_monotone, PT_layers, as per Panda convention.', 'comment_created': datetime.datetime(2020, 9, 5, 12, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483948821, 'comment_body': ""These property names shouldn't start with an underscore.  The goal of these property definitions (which are parsed by our Python binding generator) is that people are able to do things like:\r\n```python\r\nbuilder.cell_size += 1\r\n```\r\nRather than:\r\n```python\r\nbuilder.set_cell_size(builder.get_cell_size() + 1)\r\n```\r\n\r\nThe MAKE_PROPERTY in conjunction with Interrogate will automatically take care of these things."", 'comment_created': datetime.datetime(2020, 9, 5, 12, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}, {'comment_id': 483949145, 'comment_body': 'These look like tabs, rather than spaces!', 'comment_created': datetime.datetime(2020, 9, 5, 13, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rdb', 'type': 'User'}]","[{'commit_sha': 'a96d7c3cad9b5acd07fecc6210f62b211f4cfd51', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1524ad0034642aa0c495472028902dfb9fa4e5dc', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63cad0a4f1342b1cab6e16fc58596ea3a28be7c8', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68adec358081698da3e98e0923a76dcca540adeb', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aefa532b3b621304df71c8c1b975c69ca01ed72f', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e9b85e5bbff187bccd24526b35e91f978fc7f9b', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ceb07765d1a7c630bcf43f43b932fe84aefffd', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bb9beb167a02070c2b32ac74d06597703e1d806', 'committer_username': 'ash1215', 'committer_name': 'Ashwini Jha', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 15, 6, 16, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3511f65cafc6a9b4150b6826b4088c10d3f7fd0d', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a0342c0f7805e1380da10dfbc94c5a25085f9d', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fdad6193fbdd84c912b6065b31fa1de256da817', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6cd1053be126b72db25ac2ae09cc0a0f1656a7c', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b37d8e190876fb77649341ea76bc359af9bf0edf', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a49b1abaff8a48dec46d5420aec5cbff7a902393', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea7d4e44d156ce32296557f36282faeec5abeda', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '947d55a01ef0756d98b95ce485f3d4dde95187dc', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cce60420c7b164e6b0f256861270cec131cafafc', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb260ef6635bd94da8acbd7088518798d3c077db', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbcb894c85bcc0f1111889a12ae56adfa3c0a5a7', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b2d6861d45ce9783401754849b07a86c4fa1493', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df4d1c914aff8788db2de6bbf8d3825d0e645db6', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b29b8a2539ece9078bbac02380b689fbc7f271af', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f53cf7c2a8a370e0cbf9a9e50e2d261682c04f72', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72dca5f74a4215b416effdbbc86c713df0a25d30', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd28a086b3622635f37534874105d6bf7b51d31a', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4df3997260c6cb2437d7e4c8e9da3f39f0ffb3eb', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e569bc43d2b59ff92219910960dfc533e7934da', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2cadf4a4ddca387e87a1aecc11e303801a0b1d', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37f2b568bb0e72a6b62bbfdff68035445918290d', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3650363138a4edf608577c0f7dcde610d4bcfd3f', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd56dd0f29129fcd4fd8f279288b5f1a71997778', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36986d961e2c8b3506fddd0c8a5523c81b4c078f', 'committer_username': 'ashwini-clumio', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 9, 19, 26, tzinfo=datetime.timezone.utc)}]",Ashwini Jha,31981122,,User,,20,,2,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
13212165,panda3d,panda3d/panda3d,C++,777,4417,200,165,26182,343,29,43,"[{'id': 431229736, 'number': 950, 'closed': datetime.datetime(2022, 5, 21, 16, 44, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 15, 38, 59, tzinfo=datetime.timezone.utc), 'time_taken': 61520749.0, 'time_delta': '712 days, 1:05:49', 'additions': 22648, 'deletions': 0, 'state': 'closed'}, {'id': 401103049, 'number': 903, 'closed': datetime.datetime(2020, 4, 25, 22, 15, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 8, 22, 2, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1469595.0, 'time_delta': '17 days, 0:13:15', 'additions': 41, 'deletions': 4, 'state': 'closed'}, {'id': 395763638, 'number': 893, 'closed': datetime.datetime(2020, 4, 17, 16, 4, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 16, 31, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1553607.0, 'time_delta': '17 days, 23:33:27', 'additions': 4, 'deletions': 4, 'state': 'closed'}]"
