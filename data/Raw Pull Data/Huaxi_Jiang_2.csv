pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
692575356,feat: implement schema API,"Please answer these questions before submitting a pull request

- Why submit this pull request?
- [ ] Bugfix
- [x] New feature provided
- [ ] Improve performance
- [ ] Backport patches

- Related issues
___
### New feature or improvement

- Implement schema API for getting plugin's schema from APISIX.
",True,601,https://api.github.com/repos/apache/apisix-ingress-controller/pulls/601,https://github.com/apache/apisix-ingress-controller/pull/601,closed,724,44,23,13,5,32,0,0,[],2021-07-19 12:47:40+00:00,2021-08-05 12:41:27+00:00,1468427.0,"16 days, 23:53:47","[{'comment_id': 672307972, 'comment_body': 'If you changed the types.go, Please use the `make codegen` to genrate code.\r\n`', 'comment_created': datetime.datetime(2021, 7, 19, 13, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 672314518, 'comment_body': 'I am not sure if this url is right. Because I can not see the prefix contains `/schema/plugins/xxx`.\r\nFor example, if we want to get the schema of plugin `kafka-logger`. We can use this `http://127.0.0.1:9080/apisix/admin/schema/plugins/kafka-logger`.', 'comment_created': datetime.datetime(2021, 7, 19, 13, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 672318911, 'comment_body': 'I found `/apisix/admin/schema/plugins/<plugin_name>` and `/apisix/admin/plugins/<plugin_name>` return the same result.', 'comment_created': datetime.datetime(2021, 7, 19, 13, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 672323570, 'comment_body': 'I did it but nothing updates.', 'comment_created': datetime.datetime(2021, 7, 19, 13, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 672730220, 'comment_body': 'Better to use `InsertPluginSchema`.', 'comment_created': datetime.datetime(2021, 7, 20, 0, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 672731273, 'comment_body': 'We may use the unified term, This so-called `Plugin` client actually only returns its schema. We may just use the term `PluginSchema`.', 'comment_created': datetime.datetime(2021, 7, 20, 0, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 673587421, 'comment_body': '`v1.Schema` is the schema of APISIX objects, including plugin, route, upstream, etc. So `InsertSchema` can be reused.', 'comment_created': datetime.datetime(2021, 7, 21, 1, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 673587467, 'comment_body': 'I will add a `Schema` client for getting schema of APISIX objects (including plugin, route, upstream, etc.) and the `Plugin` will be only used to query names of plugins.', 'comment_created': datetime.datetime(2021, 7, 21, 1, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 673594679, 'comment_body': 'Then the title is confusing.', 'comment_created': datetime.datetime(2021, 7, 21, 1, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 673596411, 'comment_body': 'updated', 'comment_created': datetime.datetime(2021, 7, 21, 1, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 673596573, 'comment_body': 'add a debug log to show the plugin list.', 'comment_created': datetime.datetime(2021, 7, 21, 1, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 673596624, 'comment_body': 'Please categorize the imports.', 'comment_created': datetime.datetime(2021, 7, 21, 1, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 673596992, 'comment_body': 'Please categorize the imports, one for 3rd parties, and one for packages in current module.', 'comment_created': datetime.datetime(2021, 7, 21, 1, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 673784492, 'comment_body': 'ok, this should be checked in `make lint`, I will update the config of golangci', 'comment_created': datetime.datetime(2021, 7, 21, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 674454084, 'comment_body': 'Put local packages at the bottom of the import block.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 674454226, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 674454391, 'comment_body': 'Since this ticker is used by `syncSchema`, just created it inside it.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 674454452, 'comment_body': 'Also, ticker should be closed explicitly.', 'comment_created': datetime.datetime(2021, 7, 22, 2, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 674611921, 'comment_body': '@fgksgf  If use goland, you can integrate `goimports-reviser`. It works well for me.', 'comment_created': datetime.datetime(2021, 7, 22, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 675269131, 'comment_body': 'May not handle the signal notification here.', 'comment_created': datetime.datetime(2021, 7, 23, 2, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 675270646, 'comment_body': ""Just do it like `syncCache`.\r\n\r\nPS: I know the design of `newCluster` is not so elegant, we may add a context for it, but I'd like to optimize this in another PR in the future."", 'comment_created': datetime.datetime(2021, 7, 23, 2, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 679631649, 'comment_body': 'But it is different from `syncCache`, which is executed only once. However, the schema needs to be synced regularly, so where should I close the ticker?', 'comment_created': datetime.datetime(2021, 7, 30, 4, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 680508174, 'comment_body': 'cc @tokers\r\nI think syncing the schema is a normal task to prevent the schema from changing after the APISIX upgrade, which requires a regular task to run in the background all the time. So this is not the same as `syncCache`.\r\n\r\nDo you have any better way to update the schema, if APISIX DP upgrade?', 'comment_created': datetime.datetime(2021, 8, 1, 13, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 680598607, 'comment_body': 'cache sync is not an one-kick event, it will be executed once the leader changing.', 'comment_created': datetime.datetime(2021, 8, 2, 1, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 680598894, 'comment_body': '> I think syncing the schema is a normal task to prevent the schema from changing after the APISIX upgrade, which requires a regular task to run in the background all the time. So this is not the same as syncCache.\r\n\r\nThis is by no means related to the signal handling stuff. Of course, we can do it periodically. A Golang program should only have one place handling the signals.', 'comment_created': datetime.datetime(2021, 8, 2, 1, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 680599154, 'comment_body': '@fgksgf You may tweak the cluster creation logic, and passing the context to it. Here you can listen to the ctx channel.', 'comment_created': datetime.datetime(2021, 8, 2, 1, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 680720696, 'comment_body': 'All right, so this comment is about signal processing.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 680721034, 'comment_body': 'Signal processing can be unified.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 682279807, 'comment_body': 'context should be propagated here.', 'comment_created': datetime.datetime(2021, 8, 4, 4, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 682289241, 'comment_body': 'then how to use it? ', 'comment_created': datetime.datetime(2021, 8, 4, 5, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 682339348, 'comment_body': '`context.TODO()` are used in some places, you can replace them with the passed-in context.', 'comment_created': datetime.datetime(2021, 8, 4, 6, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 683325296, 'comment_body': 'Not `break`, it should be `return`, `break` just let the flow jump out the `select` block but still in the `for` block.', 'comment_created': datetime.datetime(2021, 8, 5, 10, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}]","[{'commit_sha': '3d1956dc09ee74a5adfd5e99c33ad260e6bea078', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40dc4f2e70606bdfa4e4bf3cede5f9b8b0d2c93f', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3c2526abc42454155b946b6acce1c3591b6a71', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c0be6d634018d124c50941cda794f89bab56cd', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f9c46d820172aa4b179cef94c438a4f1cb1aeca', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e98ce62a89a65ffc30aba5bc9495b3b68e16d0eb', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e6bed19ce4af45275c323cddcef81c63f4051f', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ba309352743a1ed9f3476ec2838b2ed28cecd3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3eb4673ef7383678f3cb72a7475ac38f6c2f85b', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4c9097442bdace934119f902d75d3abc5512a7a', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035fd223938af44f40398c86f9c9ecfefcfba95b', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cbad13c48d68ff6d466385abcf3f31efd599b23', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c24dab22105265732ebe32ac9105514fb150147', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}]",Hoshea,26627380,hoshea@apache.org,User,,67,,55,94
683999074,feat: Implement the admission server and a validation webhook for plugins,"Please answer these questions before submitting a pull request

- Why submit this pull request?
- [ ] Bugfix
- [x] New feature provided
- [ ] Improve performance
- [ ] Backport patches

- Related issues
#244 
___

### New feature or improvement
- Describe the details and related test reports.
Implement an admission server via [kubewebhook](https://github.com/slok/kubewebhook) to validate configurations like plugins.

#### TODO

- [x] implement an admission server
- [x] implement a validating webhook for plugins
- [x] add YAML of webhook
- [x] add e2e test
",True,573,https://api.github.com/repos/apache/apisix-ingress-controller/pulls/573,https://github.com/apache/apisix-ingress-controller/pull/573,closed,1348,289,27,23,9,45,1,0,[{'name': 'area/admission'}],2021-07-06 01:27:50+00:00,2021-09-01 04:31:21+00:00,4935811.0,"57 days, 3:03:31","[{'comment_id': 664187459, 'comment_body': 'PluginSchema needs to get from admin API, such as `http://127.0.0.1:9080/apisix/admin/schema/plugins/api-breaker`.', 'comment_created': datetime.datetime(2021, 7, 6, 2, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 689002617, 'comment_body': 'Need to support v2beta1 version of ApisixRoute resource', 'comment_created': datetime.datetime(2021, 8, 14, 23, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 689002827, 'comment_body': 'Better to use /validation instead？', 'comment_created': datetime.datetime(2021, 8, 14, 23, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 693591456, 'comment_body': 'Why reduplicate the same contents that were implemented in another make directive (`push-images-to-kind`)?', 'comment_created': datetime.datetime(2021, 8, 23, 1, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693591583, 'comment_body': ""We'd better not to use the well-known `443` port here:\r\n\r\n1. Listen on `443` requiring root permission\r\n2. it's not consistent with the HTTP listen (`8080`)."", 'comment_created': datetime.datetime(2021, 8, 23, 1, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693591810, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592243, 'comment_body': 'Should it be optional? Only enable TLS if the certificate and private key are specified simultaneously.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592424, 'comment_body': 'Add the timeout limitation.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592706, 'comment_body': 'You may try to use `ioutil.TempFile` to generate different files, instead of specifying filename by yourself.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592953, 'comment_body': 'Add some comments for this function.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593399, 'comment_body': 'Use go-multierror package.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593618, 'comment_body': 'Why fetch schema in the singleton way, schema is synchronized periodically.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593844, 'comment_body': 'Schema loader can be cached (in the future).', 'comment_created': datetime.datetime(2021, 8, 23, 1, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693594225, 'comment_body': 'Also check out the error message.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693595386, 'comment_body': ""Because when I'm debugging the e2e, I only modify the ingress controller code. So I want to only rebuild and push this image to re-run e2e tests for faster. I will remove this."", 'comment_created': datetime.datetime(2021, 8, 23, 1, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 693595525, 'comment_body': 'Or use 8443 instead.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 693596269, 'comment_body': 'Because `cfg.CertFilePath` and  `cfg.KeyFilePath` have default values.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695322438, 'comment_body': ""I didn't get your point, it seems that the singleton will not interfere with the synchronization process."", 'comment_created': datetime.datetime(2021, 8, 25, 1, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695759347, 'comment_body': 'I modified this for webhook e2e case, not sure if it will break other e2e test cases.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695761476, 'comment_body': 'To generate the webhook certs, I have to specify the namespace of webhook service, so I make it to a constant.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695762515, 'comment_body': 'I have no idea if this script need to add license header, because it is copied from `istio`.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695867474, 'comment_body': 'Yes ，it will break other e2e test cases. Suggest to keep `cert` and `key`, add `cert.pem` and `key.pem`.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 695869813, 'comment_body': '`Istio` is Apache-2.0 License too, The script needs to add a license header, but you can declare that it is a copy from `istio`.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 695877878, 'comment_body': 'In e2e, every test scene has a namespace alone. It cannot be a constant, because test cases may run concurrently.\r\n\r\nThe order of execution should be to generate namespace first and then certs.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698014334, 'comment_body': '443 -> 8443', 'comment_created': datetime.datetime(2021, 8, 29, 13, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698014526, 'comment_body': '443 -> 8443', 'comment_created': datetime.datetime(2021, 8, 29, 13, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698025707, 'comment_body': '`failurePolicy` must be `Fail`', 'comment_created': datetime.datetime(2021, 8, 29, 14, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698098181, 'comment_body': ""Because this feature is just implemented, I'm afraid that it may be not stable enough. I prefer to set to `Fail` after I implement other webhooks (route/upstream/consumer) and add more test cases."", 'comment_created': datetime.datetime(2021, 8, 30, 0, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698117163, 'comment_body': 'Sort the import.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117176, 'comment_body': 'Sort the import.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117259, 'comment_body': 'Please add some comments for this function.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117356, 'comment_body': 'Maybe `/validation/apisixroutes/plugin`?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698118062, 'comment_body': ""Then you should prepare the default certificate and private key, or it's difficult to start the server in the local environment."", 'comment_created': datetime.datetime(2021, 8, 30, 2, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698119784, 'comment_body': 'The codes here are weird, we may both add a timeout for these two servers, and the closing can be parallel.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698120075, 'comment_body': '```suggestion\r\n\t}\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 2, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698121172, 'comment_body': 'Why comment these codes?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698121330, 'comment_body': 'Why not prepare static files and put them into `testdata` dir?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698135325, 'comment_body': '-_-||, This must be for debugging, please change it back.', 'comment_created': datetime.datetime(2021, 8, 30, 3, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698138844, 'comment_body': 'Yes, I comment these for debugging and forgot to uncomment them... sry', 'comment_created': datetime.datetime(2021, 8, 30, 3, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698139235, 'comment_body': ""good idea, I didn't notice the `testdata` dir"", 'comment_created': datetime.datetime(2021, 8, 30, 3, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698235840, 'comment_body': 'How about this:\r\n```go\r\nclosed := make(chan struct{}, 2)\r\ngo srv.closeHttpServer(closed)\r\ngo srv.closeAdmissionServer(closed)\r\n\r\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\r\ndefer cancel()\r\ncnt := 2\r\nfor cnt > 0 {\r\n\tselect {\r\n\tcase <-ctx.Done():\r\n\t\tlog.Errorf(""close servers timeout"")\r\n\t\treturn\r\n\tcase <-closed:\r\n\t\tcnt--\r\n\t\tlog.Debug(""close a server"")\r\n\t}\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 6, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698236045, 'comment_body': 'should I put the timeout into the config?', 'comment_created': datetime.datetime(2021, 8, 30, 6, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698240555, 'comment_body': ""`make lint` should identify this, but it didn't"", 'comment_created': datetime.datetime(2021, 8, 30, 7, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698493769, 'comment_body': 'Just ignore my comment as long as the schema cache is refreshed periodically.', 'comment_created': datetime.datetime(2021, 8, 30, 13, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698495449, 'comment_body': ""> should I put the timeout into the config?\r\n\r\nDon't have to. And I think the code is correct."", 'comment_created': datetime.datetime(2021, 8, 30, 13, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}]","[{'commit_sha': '6eaf6eb63ab8e2c81650b6048770c49959e38f34', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8592e69291a35e4e1dfb0408b6138255aa92f20c', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3c5c60757f19e7a3e57a874393be867b25594f8', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '428a3d2c95f60ad624d622b6e8f15d12c39c21ac', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c2d8543e209ce93429a579739c350efb29ad4c3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27c344b2f6bc6a36e4672deb920d48779dc2b328', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087e0ea4a7e06278cfc3de6d9399d6a0dffb35e5', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a543818e34b2041b4ec3c1ea99174a99762d31', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cacdc3b6a20b96b509b0870e1ac587a29d3b4ee2', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '586e5ebf364c9fecbadfbbbb8e146106e9ae59b2', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ee39a032bda88863553a71a087a2a46df0f3cfc', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e080c56331b1311ab25dd6ed00489e9c195654c3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c564a261a94a2c7b47a7301d33b1bc0f78fb4796', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3c52d48ad7f50a06637d9dca2a65d393270dd26', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f0f9149a6fdb3c22634e29db46cb4ad20995be', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb99fa42bbcdc1e35a731c338ecb2113e79b9cb3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d49cf55f808008370a8f8442d924189d187ca3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25fda76293a1d8058a6bdc99f239246a8d504e69', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd71ab8ce0f2aa1f97925b85286f37fd62312cb', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c086e929a0ca539349801e6c9465aef4dfd411', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c975b507fc6e5dceb616fc84bf4badd695e61a12', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372da2637be38d2b3b1cd775cf89293b29729614', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '240ffae8ad6c5808cc9b84ba5b79a0d874eeaa5d', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}]",Hoshea,26627380,hoshea@apache.org,User,,67,,55,94
683999074,feat: Implement the admission server and a validation webhook for plugins,"Please answer these questions before submitting a pull request

- Why submit this pull request?
- [ ] Bugfix
- [x] New feature provided
- [ ] Improve performance
- [ ] Backport patches

- Related issues
#244 
___

### New feature or improvement
- Describe the details and related test reports.
Implement an admission server via [kubewebhook](https://github.com/slok/kubewebhook) to validate configurations like plugins.

#### TODO

- [x] implement an admission server
- [x] implement a validating webhook for plugins
- [x] add YAML of webhook
- [x] add e2e test
",True,573,https://api.github.com/repos/apache/apisix-ingress-controller/pulls/573,https://github.com/apache/apisix-ingress-controller/pull/573,closed,1348,289,27,23,9,45,1,0,[{'name': 'area/admission'}],2021-07-06 01:27:50+00:00,2021-09-01 04:31:21+00:00,4935811.0,"57 days, 3:03:31","[{'comment_id': 664187459, 'comment_body': 'PluginSchema needs to get from admin API, such as `http://127.0.0.1:9080/apisix/admin/schema/plugins/api-breaker`.', 'comment_created': datetime.datetime(2021, 7, 6, 2, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 689002617, 'comment_body': 'Need to support v2beta1 version of ApisixRoute resource', 'comment_created': datetime.datetime(2021, 8, 14, 23, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 689002827, 'comment_body': 'Better to use /validation instead？', 'comment_created': datetime.datetime(2021, 8, 14, 23, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 693591456, 'comment_body': 'Why reduplicate the same contents that were implemented in another make directive (`push-images-to-kind`)?', 'comment_created': datetime.datetime(2021, 8, 23, 1, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693591583, 'comment_body': ""We'd better not to use the well-known `443` port here:\r\n\r\n1. Listen on `443` requiring root permission\r\n2. it's not consistent with the HTTP listen (`8080`)."", 'comment_created': datetime.datetime(2021, 8, 23, 1, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693591810, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592243, 'comment_body': 'Should it be optional? Only enable TLS if the certificate and private key are specified simultaneously.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592424, 'comment_body': 'Add the timeout limitation.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592706, 'comment_body': 'You may try to use `ioutil.TempFile` to generate different files, instead of specifying filename by yourself.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592953, 'comment_body': 'Add some comments for this function.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593399, 'comment_body': 'Use go-multierror package.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593618, 'comment_body': 'Why fetch schema in the singleton way, schema is synchronized periodically.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593844, 'comment_body': 'Schema loader can be cached (in the future).', 'comment_created': datetime.datetime(2021, 8, 23, 1, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693594225, 'comment_body': 'Also check out the error message.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693595386, 'comment_body': ""Because when I'm debugging the e2e, I only modify the ingress controller code. So I want to only rebuild and push this image to re-run e2e tests for faster. I will remove this."", 'comment_created': datetime.datetime(2021, 8, 23, 1, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 693595525, 'comment_body': 'Or use 8443 instead.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 693596269, 'comment_body': 'Because `cfg.CertFilePath` and  `cfg.KeyFilePath` have default values.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695322438, 'comment_body': ""I didn't get your point, it seems that the singleton will not interfere with the synchronization process."", 'comment_created': datetime.datetime(2021, 8, 25, 1, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695759347, 'comment_body': 'I modified this for webhook e2e case, not sure if it will break other e2e test cases.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695761476, 'comment_body': 'To generate the webhook certs, I have to specify the namespace of webhook service, so I make it to a constant.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695762515, 'comment_body': 'I have no idea if this script need to add license header, because it is copied from `istio`.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695867474, 'comment_body': 'Yes ，it will break other e2e test cases. Suggest to keep `cert` and `key`, add `cert.pem` and `key.pem`.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 695869813, 'comment_body': '`Istio` is Apache-2.0 License too, The script needs to add a license header, but you can declare that it is a copy from `istio`.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 695877878, 'comment_body': 'In e2e, every test scene has a namespace alone. It cannot be a constant, because test cases may run concurrently.\r\n\r\nThe order of execution should be to generate namespace first and then certs.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698014334, 'comment_body': '443 -> 8443', 'comment_created': datetime.datetime(2021, 8, 29, 13, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698014526, 'comment_body': '443 -> 8443', 'comment_created': datetime.datetime(2021, 8, 29, 13, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698025707, 'comment_body': '`failurePolicy` must be `Fail`', 'comment_created': datetime.datetime(2021, 8, 29, 14, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698098181, 'comment_body': ""Because this feature is just implemented, I'm afraid that it may be not stable enough. I prefer to set to `Fail` after I implement other webhooks (route/upstream/consumer) and add more test cases."", 'comment_created': datetime.datetime(2021, 8, 30, 0, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698117163, 'comment_body': 'Sort the import.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117176, 'comment_body': 'Sort the import.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117259, 'comment_body': 'Please add some comments for this function.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117356, 'comment_body': 'Maybe `/validation/apisixroutes/plugin`?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698118062, 'comment_body': ""Then you should prepare the default certificate and private key, or it's difficult to start the server in the local environment."", 'comment_created': datetime.datetime(2021, 8, 30, 2, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698119784, 'comment_body': 'The codes here are weird, we may both add a timeout for these two servers, and the closing can be parallel.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698120075, 'comment_body': '```suggestion\r\n\t}\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 2, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698121172, 'comment_body': 'Why comment these codes?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698121330, 'comment_body': 'Why not prepare static files and put them into `testdata` dir?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698135325, 'comment_body': '-_-||, This must be for debugging, please change it back.', 'comment_created': datetime.datetime(2021, 8, 30, 3, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698138844, 'comment_body': 'Yes, I comment these for debugging and forgot to uncomment them... sry', 'comment_created': datetime.datetime(2021, 8, 30, 3, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698139235, 'comment_body': ""good idea, I didn't notice the `testdata` dir"", 'comment_created': datetime.datetime(2021, 8, 30, 3, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698235840, 'comment_body': 'How about this:\r\n```go\r\nclosed := make(chan struct{}, 2)\r\ngo srv.closeHttpServer(closed)\r\ngo srv.closeAdmissionServer(closed)\r\n\r\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\r\ndefer cancel()\r\ncnt := 2\r\nfor cnt > 0 {\r\n\tselect {\r\n\tcase <-ctx.Done():\r\n\t\tlog.Errorf(""close servers timeout"")\r\n\t\treturn\r\n\tcase <-closed:\r\n\t\tcnt--\r\n\t\tlog.Debug(""close a server"")\r\n\t}\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 6, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698236045, 'comment_body': 'should I put the timeout into the config?', 'comment_created': datetime.datetime(2021, 8, 30, 6, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698240555, 'comment_body': ""`make lint` should identify this, but it didn't"", 'comment_created': datetime.datetime(2021, 8, 30, 7, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698493769, 'comment_body': 'Just ignore my comment as long as the schema cache is refreshed periodically.', 'comment_created': datetime.datetime(2021, 8, 30, 13, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698495449, 'comment_body': ""> should I put the timeout into the config?\r\n\r\nDon't have to. And I think the code is correct."", 'comment_created': datetime.datetime(2021, 8, 30, 13, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}]","[{'commit_sha': '6eaf6eb63ab8e2c81650b6048770c49959e38f34', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8592e69291a35e4e1dfb0408b6138255aa92f20c', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3c5c60757f19e7a3e57a874393be867b25594f8', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '428a3d2c95f60ad624d622b6e8f15d12c39c21ac', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c2d8543e209ce93429a579739c350efb29ad4c3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27c344b2f6bc6a36e4672deb920d48779dc2b328', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087e0ea4a7e06278cfc3de6d9399d6a0dffb35e5', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a543818e34b2041b4ec3c1ea99174a99762d31', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cacdc3b6a20b96b509b0870e1ac587a29d3b4ee2', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '586e5ebf364c9fecbadfbbbb8e146106e9ae59b2', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ee39a032bda88863553a71a087a2a46df0f3cfc', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e080c56331b1311ab25dd6ed00489e9c195654c3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c564a261a94a2c7b47a7301d33b1bc0f78fb4796', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3c52d48ad7f50a06637d9dca2a65d393270dd26', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f0f9149a6fdb3c22634e29db46cb4ad20995be', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb99fa42bbcdc1e35a731c338ecb2113e79b9cb3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d49cf55f808008370a8f8442d924189d187ca3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25fda76293a1d8058a6bdc99f239246a8d504e69', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd71ab8ce0f2aa1f97925b85286f37fd62312cb', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c086e929a0ca539349801e6c9465aef4dfd411', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c975b507fc6e5dceb616fc84bf4badd695e61a12', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372da2637be38d2b3b1cd775cf89293b29729614', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '240ffae8ad6c5808cc9b84ba5b79a0d874eeaa5d', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}]",Hoshea,26627380,hoshea@apache.org,User,,67,,55,94
683999074,feat: Implement the admission server and a validation webhook for plugins,"Please answer these questions before submitting a pull request

- Why submit this pull request?
- [ ] Bugfix
- [x] New feature provided
- [ ] Improve performance
- [ ] Backport patches

- Related issues
#244 
___

### New feature or improvement
- Describe the details and related test reports.
Implement an admission server via [kubewebhook](https://github.com/slok/kubewebhook) to validate configurations like plugins.

#### TODO

- [x] implement an admission server
- [x] implement a validating webhook for plugins
- [x] add YAML of webhook
- [x] add e2e test
",True,573,https://api.github.com/repos/apache/apisix-ingress-controller/pulls/573,https://github.com/apache/apisix-ingress-controller/pull/573,closed,1348,289,27,23,9,45,1,0,[{'name': 'area/admission'}],2021-07-06 01:27:50+00:00,2021-09-01 04:31:21+00:00,4935811.0,"57 days, 3:03:31","[{'comment_id': 664187459, 'comment_body': 'PluginSchema needs to get from admin API, such as `http://127.0.0.1:9080/apisix/admin/schema/plugins/api-breaker`.', 'comment_created': datetime.datetime(2021, 7, 6, 2, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 689002617, 'comment_body': 'Need to support v2beta1 version of ApisixRoute resource', 'comment_created': datetime.datetime(2021, 8, 14, 23, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 689002827, 'comment_body': 'Better to use /validation instead？', 'comment_created': datetime.datetime(2021, 8, 14, 23, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 693591456, 'comment_body': 'Why reduplicate the same contents that were implemented in another make directive (`push-images-to-kind`)?', 'comment_created': datetime.datetime(2021, 8, 23, 1, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693591583, 'comment_body': ""We'd better not to use the well-known `443` port here:\r\n\r\n1. Listen on `443` requiring root permission\r\n2. it's not consistent with the HTTP listen (`8080`)."", 'comment_created': datetime.datetime(2021, 8, 23, 1, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693591810, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592243, 'comment_body': 'Should it be optional? Only enable TLS if the certificate and private key are specified simultaneously.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592424, 'comment_body': 'Add the timeout limitation.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592706, 'comment_body': 'You may try to use `ioutil.TempFile` to generate different files, instead of specifying filename by yourself.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693592953, 'comment_body': 'Add some comments for this function.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593399, 'comment_body': 'Use go-multierror package.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593618, 'comment_body': 'Why fetch schema in the singleton way, schema is synchronized periodically.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693593844, 'comment_body': 'Schema loader can be cached (in the future).', 'comment_created': datetime.datetime(2021, 8, 23, 1, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693594225, 'comment_body': 'Also check out the error message.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 693595386, 'comment_body': ""Because when I'm debugging the e2e, I only modify the ingress controller code. So I want to only rebuild and push this image to re-run e2e tests for faster. I will remove this."", 'comment_created': datetime.datetime(2021, 8, 23, 1, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 693595525, 'comment_body': 'Or use 8443 instead.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 693596269, 'comment_body': 'Because `cfg.CertFilePath` and  `cfg.KeyFilePath` have default values.', 'comment_created': datetime.datetime(2021, 8, 23, 1, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695322438, 'comment_body': ""I didn't get your point, it seems that the singleton will not interfere with the synchronization process."", 'comment_created': datetime.datetime(2021, 8, 25, 1, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695759347, 'comment_body': 'I modified this for webhook e2e case, not sure if it will break other e2e test cases.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695761476, 'comment_body': 'To generate the webhook certs, I have to specify the namespace of webhook service, so I make it to a constant.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695762515, 'comment_body': 'I have no idea if this script need to add license header, because it is copied from `istio`.', 'comment_created': datetime.datetime(2021, 8, 25, 13, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 695867474, 'comment_body': 'Yes ，it will break other e2e test cases. Suggest to keep `cert` and `key`, add `cert.pem` and `key.pem`.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 695869813, 'comment_body': '`Istio` is Apache-2.0 License too, The script needs to add a license header, but you can declare that it is a copy from `istio`.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 695877878, 'comment_body': 'In e2e, every test scene has a namespace alone. It cannot be a constant, because test cases may run concurrently.\r\n\r\nThe order of execution should be to generate namespace first and then certs.', 'comment_created': datetime.datetime(2021, 8, 25, 15, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698014334, 'comment_body': '443 -> 8443', 'comment_created': datetime.datetime(2021, 8, 29, 13, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698014526, 'comment_body': '443 -> 8443', 'comment_created': datetime.datetime(2021, 8, 29, 13, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698025707, 'comment_body': '`failurePolicy` must be `Fail`', 'comment_created': datetime.datetime(2021, 8, 29, 14, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698098181, 'comment_body': ""Because this feature is just implemented, I'm afraid that it may be not stable enough. I prefer to set to `Fail` after I implement other webhooks (route/upstream/consumer) and add more test cases."", 'comment_created': datetime.datetime(2021, 8, 30, 0, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698117163, 'comment_body': 'Sort the import.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117176, 'comment_body': 'Sort the import.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117259, 'comment_body': 'Please add some comments for this function.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698117356, 'comment_body': 'Maybe `/validation/apisixroutes/plugin`?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698118062, 'comment_body': ""Then you should prepare the default certificate and private key, or it's difficult to start the server in the local environment."", 'comment_created': datetime.datetime(2021, 8, 30, 2, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698119784, 'comment_body': 'The codes here are weird, we may both add a timeout for these two servers, and the closing can be parallel.', 'comment_created': datetime.datetime(2021, 8, 30, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698120075, 'comment_body': '```suggestion\r\n\t}\r\n)\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 2, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698121172, 'comment_body': 'Why comment these codes?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698121330, 'comment_body': 'Why not prepare static files and put them into `testdata` dir?', 'comment_created': datetime.datetime(2021, 8, 30, 2, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698135325, 'comment_body': '-_-||, This must be for debugging, please change it back.', 'comment_created': datetime.datetime(2021, 8, 30, 3, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gxthrj', 'type': 'User'}, {'comment_id': 698138844, 'comment_body': 'Yes, I comment these for debugging and forgot to uncomment them... sry', 'comment_created': datetime.datetime(2021, 8, 30, 3, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698139235, 'comment_body': ""good idea, I didn't notice the `testdata` dir"", 'comment_created': datetime.datetime(2021, 8, 30, 3, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698235840, 'comment_body': 'How about this:\r\n```go\r\nclosed := make(chan struct{}, 2)\r\ngo srv.closeHttpServer(closed)\r\ngo srv.closeAdmissionServer(closed)\r\n\r\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\r\ndefer cancel()\r\ncnt := 2\r\nfor cnt > 0 {\r\n\tselect {\r\n\tcase <-ctx.Done():\r\n\t\tlog.Errorf(""close servers timeout"")\r\n\t\treturn\r\n\tcase <-closed:\r\n\t\tcnt--\r\n\t\tlog.Debug(""close a server"")\r\n\t}\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 6, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698236045, 'comment_body': 'should I put the timeout into the config?', 'comment_created': datetime.datetime(2021, 8, 30, 6, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698240555, 'comment_body': ""`make lint` should identify this, but it didn't"", 'comment_created': datetime.datetime(2021, 8, 30, 7, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fgksgf', 'type': 'User'}, {'comment_id': 698493769, 'comment_body': 'Just ignore my comment as long as the schema cache is refreshed periodically.', 'comment_created': datetime.datetime(2021, 8, 30, 13, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}, {'comment_id': 698495449, 'comment_body': ""> should I put the timeout into the config?\r\n\r\nDon't have to. And I think the code is correct."", 'comment_created': datetime.datetime(2021, 8, 30, 13, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tokers', 'type': 'User'}]","[{'commit_sha': '6eaf6eb63ab8e2c81650b6048770c49959e38f34', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8592e69291a35e4e1dfb0408b6138255aa92f20c', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3c5c60757f19e7a3e57a874393be867b25594f8', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '428a3d2c95f60ad624d622b6e8f15d12c39c21ac', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c2d8543e209ce93429a579739c350efb29ad4c3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27c344b2f6bc6a36e4672deb920d48779dc2b328', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087e0ea4a7e06278cfc3de6d9399d6a0dffb35e5', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a543818e34b2041b4ec3c1ea99174a99762d31', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cacdc3b6a20b96b509b0870e1ac587a29d3b4ee2', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '586e5ebf364c9fecbadfbbbb8e146106e9ae59b2', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ee39a032bda88863553a71a087a2a46df0f3cfc', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e080c56331b1311ab25dd6ed00489e9c195654c3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c564a261a94a2c7b47a7301d33b1bc0f78fb4796', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3c52d48ad7f50a06637d9dca2a65d393270dd26', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f0f9149a6fdb3c22634e29db46cb4ad20995be', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb99fa42bbcdc1e35a731c338ecb2113e79b9cb3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d49cf55f808008370a8f8442d924189d187ca3', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25fda76293a1d8058a6bdc99f239246a8d504e69', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd71ab8ce0f2aa1f97925b85286f37fd62312cb', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c086e929a0ca539349801e6c9465aef4dfd411', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c975b507fc6e5dceb616fc84bf4badd695e61a12', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372da2637be38d2b3b1cd775cf89293b29729614', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '240ffae8ad6c5808cc9b84ba5b79a0d874eeaa5d', 'committer_username': 'fgksgf', 'committer_name': 'Hoshea', 'committer_email': 'hoshea@apache.org', 'commit_date': datetime.datetime(2017, 3, 23, 13, 52, 51, tzinfo=datetime.timezone.utc)}]",Hoshea,26627380,hoshea@apache.org,User,,67,,55,94

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
221468226,apisix-ingress-controller,apache/apisix-ingress-controller,Go,340,991,46,133,968,111,28,17,"[{'id': 903537317, 'number': 957, 'closed': datetime.datetime(2022, 4, 11, 4, 3, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 8, 7, 41, 41, tzinfo=datetime.timezone.utc), 'time_taken': 246125.0, 'time_delta': '2 days, 20:22:05', 'additions': 85, 'deletions': 19, 'state': 'closed'}, {'id': 899911687, 'number': 949, 'closed': datetime.datetime(2022, 4, 7, 4, 48, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 5, 8, 28, 36, tzinfo=datetime.timezone.utc), 'time_taken': 159615.0, 'time_delta': '1 day, 20:20:15', 'additions': 191, 'deletions': 116, 'state': 'closed'}, {'id': 754021785, 'number': 705, 'closed': datetime.datetime(2021, 10, 9, 3, 17, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 8, 13, 3, 32, tzinfo=datetime.timezone.utc), 'time_taken': 51255.0, 'time_delta': '14:14:15', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 732336222, 'number': 679, 'closed': datetime.datetime(2021, 9, 14, 12, 34, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 13, 3, 0, 35, tzinfo=datetime.timezone.utc), 'time_taken': 120847.0, 'time_delta': '1 day, 9:34:07', 'additions': 28, 'deletions': 13, 'state': 'closed'}, {'id': 727981971, 'number': 667, 'closed': datetime.datetime(2021, 10, 8, 6, 57, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 6, 13, 53, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2739825.0, 'time_delta': '31 days, 17:03:45', 'additions': 633, 'deletions': 102, 'state': 'closed'}, {'id': 721961062, 'number': 655, 'closed': datetime.datetime(2021, 9, 1, 6, 15, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 29, 14, 23, 21, tzinfo=datetime.timezone.utc), 'time_taken': 229925.0, 'time_delta': '2 days, 15:52:05', 'additions': 64, 'deletions': 12, 'state': 'closed'}, {'id': 692575356, 'number': 601, 'closed': datetime.datetime(2021, 8, 5, 12, 41, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 12, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1468427.0, 'time_delta': '16 days, 23:53:47', 'additions': 724, 'deletions': 44, 'state': 'closed'}, {'id': 683999074, 'number': 573, 'closed': datetime.datetime(2021, 9, 1, 4, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 1, 27, 50, tzinfo=datetime.timezone.utc), 'time_taken': 4935811.0, 'time_delta': '57 days, 3:03:31', 'additions': 1348, 'deletions': 289, 'state': 'closed'}, {'id': 595627902, 'number': 307, 'closed': datetime.datetime(2021, 3, 23, 0, 54, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 14, 31, 25, tzinfo=datetime.timezone.utc), 'time_taken': 382996.0, 'time_delta': '4 days, 10:23:16', 'additions': 53, 'deletions': 53, 'state': 'closed'}]"
