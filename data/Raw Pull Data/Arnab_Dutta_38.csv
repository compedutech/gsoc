pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
437886464,reading and writing registers,,True,79,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/79,https://github.com/Wenzel/libmicrovmi/pull/79,closed,158,26,4,1,2,43,0,0,[],2020-06-22 11:48:16+00:00,2020-07-08 14:25:52+00:00,1391856.0,"16 days, 2:37:36","[{'comment_id': 444752258, 'comment_body': 'Do we need to add clippy as a dependency ?\r\ncc @rageagainsthepc ', 'comment_created': datetime.datetime(2020, 6, 24, 9, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444752755, 'comment_body': ""You don't need that panic. Your match just needs to be exhaustive over the CrType enum, which it already is, otherwise you would get a compiler warning :)"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444753681, 'comment_body': 'always use selective imports to clearly state what you need  from the crate.\r\nopinion @rageagainsthepc  ?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444754087, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 6, 24, 9, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444755356, 'comment_body': 'Remove this CrType', 'comment_created': datetime.datetime(2020, 6, 24, 9, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444755496, 'comment_body': 'Only import what you really need', 'comment_created': datetime.datetime(2020, 6, 24, 9, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444756874, 'comment_body': 'The function name is plural, and yet it takes a single register as parameter.\r\nI would prefer changing the signature to take a `Registers` Enum, and write all registers accordingly', 'comment_created': datetime.datetime(2020, 6, 24, 9, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444757322, 'comment_body': 'remove CR2', 'comment_created': datetime.datetime(2020, 6, 24, 9, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444757380, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 6, 24, 9, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444757994, 'comment_body': 'You can use https://doc.rust-lang.org/std/macro.unimplemented.html which is in the standard library', 'comment_created': datetime.datetime(2020, 6, 24, 9, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 444950463, 'comment_body': 'I second that opinion. There are exceptions of course (e.g. `use super::*` for unit tests)', 'comment_created': datetime.datetime(2020, 6, 24, 14, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 444955536, 'comment_body': 'I would say absolutely not. Why did you add that in the first place, @arnabcs17b006?', 'comment_created': datetime.datetime(2020, 6, 24, 14, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 446488875, 'comment_body': '@arnabcs17b006 you can remove this modifications now that your kvmi PR is merged upstream ', 'comment_created': datetime.datetime(2020, 6, 27, 5, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 446488902, 'comment_body': 'no need for a newline here', 'comment_created': datetime.datetime(2020, 6, 27, 5, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 446488973, 'comment_body': 'was this issue resolved ?\r\ni can still see the `*` import', 'comment_created': datetime.datetime(2020, 6, 27, 5, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 446489033, 'comment_body': 'did you use `unimplemented()` macro ?', 'comment_created': datetime.datetime(2020, 6, 27, 5, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 446494495, 'comment_body': 'Sir all the members of api.rs are being used', 'comment_created': datetime.datetime(2020, 6, 27, 6, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'arnabcs17b006', 'type': 'User'}, {'comment_id': 449540850, 'comment_body': 'Please remove this line.', 'comment_created': datetime.datetime(2020, 7, 3, 11, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449542038, 'comment_body': ""I don't see a purpose for this variable declaration."", 'comment_created': datetime.datetime(2020, 7, 3, 11, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449544455, 'comment_body': 'nitpick: I would use the into/from trait for converting the kvm segment regs into hypervisor agnostic segment regs. It makes the code much more concise and therefore readable.', 'comment_created': datetime.datetime(2020, 7, 3, 11, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449558088, 'comment_body': 'This is an unnecessary comment.', 'comment_created': datetime.datetime(2020, 7, 3, 12, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449563431, 'comment_body': 'This should be camel case.', 'comment_created': datetime.datetime(2020, 7, 3, 12, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449574285, 'comment_body': ""You don't need to change anything here but I suggest you install the editorconfig plugin. I have added an editorconfig file to the master branch which will generally make your coding experience a little bit more consistent."", 'comment_created': datetime.datetime(2020, 7, 3, 13, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449575803, 'comment_body': 'nitpick: You could also use the From trait here which would reduce the amount of lines. Then you could put everything into the match arm above.', 'comment_created': datetime.datetime(2020, 7, 3, 13, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449576870, 'comment_body': 'You can re-export the `kvm_segment` in the kvmi crate in order to make it available here.', 'comment_created': datetime.datetime(2020, 7, 3, 13, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449753376, 'comment_body': 'That looks so much nicer already :+1: But if you implement `From` you get `Into` for free, so that means you can just write:\r\n```suggestion\r\n            cs: sregs.cs.into(),\r\n```', 'comment_created': datetime.datetime(2020, 7, 4, 8, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449753549, 'comment_body': ""I'd prefer it if you didn't separate the kvm struct from its impl block here."", 'comment_created': datetime.datetime(2020, 7, 4, 8, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449753926, 'comment_body': '```suggestion\r\n                self.kvmi.set_registers(vcpu, &x86_registers.into())?;\r\n```', 'comment_created': datetime.datetime(2020, 7, 4, 8, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449754099, 'comment_body': ""Can you please elaborate. I don't quite get it. "", 'comment_created': datetime.datetime(2020, 7, 4, 8, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arnabcs17b006', 'type': 'User'}, {'comment_id': 449754168, 'comment_body': 'Why are you deleting the tests? 😱 ', 'comment_created': datetime.datetime(2020, 7, 4, 8, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449754180, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 7, 4, 8, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449754394, 'comment_body': 'Sir\r\nThe tests are present in the unit_tests branch', 'comment_created': datetime.datetime(2020, 7, 4, 8, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'arnabcs17b006', 'type': 'User'}, {'comment_id': 449783056, 'comment_body': 'Yes, your new tests. But those are the tests that are already present in the master branch. You should not delete them.', 'comment_created': datetime.datetime(2020, 7, 4, 15, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449783128, 'comment_body': 'Please delete this.', 'comment_created': datetime.datetime(2020, 7, 4, 15, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449783387, 'comment_body': 'Please try to get rid of all the unnecessary whitespace changes.', 'comment_created': datetime.datetime(2020, 7, 4, 15, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 450110206, 'comment_body': '```suggestion\r\n        let (regs, sregs, msrs) = self.kvmi.get_registers(vcpu)?;\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 9, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 451164219, 'comment_body': 'The comment in the line above belongs to the line below.', 'comment_created': datetime.datetime(2020, 7, 7, 21, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 451509754, 'comment_body': 'Unnecessary whitespace change.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 451509958, 'comment_body': 'Unnecessary whitespace change.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 451509999, 'comment_body': 'Unnecessary whitespace change.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 451510032, 'comment_body': 'Unnecessary whitespace change.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 451552159, 'comment_body': 'This comment provides no additional information.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 451552986, 'comment_body': 'Again, please delete the whole range of commented out code.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}]","[{'commit_sha': 'e2b70bbd142cfac4933065b4375db98d7fb62fe0', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
437889544,Read/write physical memory,Do not merge until previous ones are merged!,True,80,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/80,https://github.com/Wenzel/libmicrovmi/pull/80,closed,17,6,4,1,1,4,0,0,[],2020-06-22 11:54:03+00:00,2020-07-10 22:00:09+00:00,1591566.0,"18 days, 10:06:06","[{'comment_id': 443783987, 'comment_body': 'same thing here, remove CR2 register', 'comment_created': datetime.datetime(2020, 6, 22, 19, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 443784463, 'comment_body': ""This doesn't make sense.\r\nIf the event is not a Cr, we should do some error handling, and not convert it to fake CR3"", 'comment_created': datetime.datetime(2020, 6, 22, 19, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 452717183, 'comment_body': ""You should use `panic!` instead of `unimplemented!` here. It's not like you haven't implemented the functionality yet, but rather you're not expecting any other events to occur."", 'comment_created': datetime.datetime(2020, 7, 10, 9, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 452999651, 'comment_body': 'This line belongs to the msr PR as well afais.', 'comment_created': datetime.datetime(2020, 7, 10, 18, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}]","[{'commit_sha': 'f8bb375c91bda5158fde5f52e7e8f9e77e067d52', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
447735094,msr events,,True,87,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/87,https://github.com/Wenzel/libmicrovmi/pull/87,closed,174,10,4,1,0,6,0,0,[],2020-07-11 07:40:50+00:00,2020-07-11 15:57:05+00:00,29775.0,8:16:15,"[{'comment_id': 453175253, 'comment_body': 'What does the ""micro"" stand for in `micro_msr_type`?', 'comment_created': datetime.datetime(2020, 7, 11, 9, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 453175365, 'comment_body': 'I think I did that temporarily so it compiles. Now that you have added all possible match arms you can just remove this again.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 453176572, 'comment_body': 'I think it\'s not really a good example to just pass integers as msr indices for two reasons:\r\n1. You have to look those indices up.\r\n2. Currently we are only supporting a very limited set of those indices. The user would have to trial and error to find out which indices actually work.\r\n\r\nTherefore I suggest that you match strings like ""lstar"" to their respective indices. We only support 6 msr values currently so it\'s not hard to do. Additionally you should write what values are possible into the argument description.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 453176670, 'comment_body': 'nitpick: Put this into a separate method.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 453176834, 'comment_body': 'nitpick: Your first version is already 0.3? ;)', 'comment_created': datetime.datetime(2020, 7, 11, 9, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 453176918, 'comment_body': 'nitpick: Mathieu is not the author of this file, you are. Either remove this or enter your own name.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}]","[{'commit_sha': 'fc101adef3297eeb9e471ee5378555625c58988d', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
447803737,breakpoint event support added,,True,88,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/88,https://github.com/Wenzel/libmicrovmi/pull/88,closed,128,0,3,1,1,2,0,0,[],2020-07-11 18:52:47+00:00,2020-07-12 10:42:16+00:00,56969.0,15:49:29,"[{'comment_id': 453295015, 'comment_body': 'nitpick: ""get"" in the function name usually implies that your function yields a return value. You don\'t return anything here so this function name is misleading.', 'comment_created': datetime.datetime(2020, 7, 12, 9, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 453295333, 'comment_body': ""As a general rule of thumb: Try to make your function names descriptive enough so you don't need these kinds of comments."", 'comment_created': datetime.datetime(2020, 7, 12, 9, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}]","[{'commit_sha': '8081fb08d362a87b9fcd18c688c8318322912372', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
447901795,KVM: pagefault event support added,,True,89,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/89,https://github.com/Wenzel/libmicrovmi/pull/89,closed,238,7,5,1,8,18,0,0,[],2020-07-12 13:40:52+00:00,2020-08-19 22:15:50+00:00,3314098.0,"38 days, 8:34:58","[{'comment_id': 454994169, 'comment_body': 'Please choose a better name for this function.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 455003054, 'comment_body': 'Why have you added this function to the api? This looks to me like it is specifically tailored to your use case. In libmicrovmi we aim to provide a low level interface, not to implement convenience functions to handle events in a specific way.', 'comment_created': datetime.datetime(2020, 7, 15, 12, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 455004411, 'comment_body': 'I would prefer an enum for `access`', 'comment_created': datetime.datetime(2020, 7, 15, 12, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 456517703, 'comment_body': 'You are breaking the abstraction here. The example should be hypervisor agnostic.', 'comment_created': datetime.datetime(2020, 7, 17, 15, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 456518946, 'comment_body': 'Afais this is KVM specific so it does not belong in this file. Also, if you need to account for error cases you should implement `TryFrom` instead of `From`', 'comment_created': datetime.datetime(2020, 7, 17, 15, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 456522188, 'comment_body': 'You are just passing the access permissions without any abstraction here. This is a bad idea because hypervisors have differing conventions for access permissions. Now, I understand that you want to be able to do arithmetics with the values so a plain enum would problably not be the best fit. Instead I suggest you have a look at the `bitflags` crate.', 'comment_created': datetime.datetime(2020, 7, 17, 15, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 457589730, 'comment_body': 'No need for `TryFrom` here since there is no way this conversion can fail. I would simply implement the `Into` trait for `Access`.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 457593168, 'comment_body': 'It looks to me like you have introduced the `DUMMY` value for the sole purpose of being able to match on the fallthrough case. This is not good style. Why not simply:\r\n```suggestion\r\n        match access {\r\n            0 => Ok(Access::NIL),\r\n            1 => Ok(Access::R),\r\n            2 => Ok(Access::W),\r\n            3 => Ok(Access::RW),\r\n            4 => Ok(Access::X),\r\n            5 => Ok(Access::RX),\r\n            6 => Ok(Access::WX),\r\n            7 => Ok(Access::RWX),\r\n            _ => Err(""invalid access value""),\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 18, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 457595973, 'comment_body': 'Also you should not use plain integers if there are `KVMI_PAGE_ACCESS` definitions available in the kvmi crate.', 'comment_created': datetime.datetime(2020, 7, 20, 18, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 457601576, 'comment_body': 'This function is way to complicated for what it actually does. Correct me if I am wrong but you want allow the access that caused the pagefault here, right? Why not call `get_page_access`, add the permission bit that caused the page fault, call `set_page_access` and be done with it?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 457602131, 'comment_body': 'You probably forgot to revert this?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 458006134, 'comment_body': 'nitpick: Using a function or adding a comment here would be helpful so it is immediately clear what you intend to do.', 'comment_created': datetime.datetime(2020, 7, 21, 10, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 458010551, 'comment_body': '```suggestion\r\nimpl Into<u8> for Access {\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 10, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 458011432, 'comment_body': 'Again, we should really use `KVMiPageAccess` instead of `u8` everywhere possible so the conversions will be unambiguous.', 'comment_created': datetime.datetime(2020, 7, 21, 10, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 458011958, 'comment_body': 'You should be consistent and use `KVMiPageAccess` here as well.', 'comment_created': datetime.datetime(2020, 7, 21, 10, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 459104980, 'comment_body': '```suggestion\r\n        self.kvmi.set_page_access(paddr, access.try_into().unwrap())?;\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 21, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 459375645, 'comment_body': 'nitpick: The naming of `p_access` and `access` is confusing imho.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 472089404, 'comment_body': 'Is this change here intentional?', 'comment_created': datetime.datetime(2020, 8, 18, 10, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}]","[{'commit_sha': 'd5a99a2305a9e05e97776d4da1b781fd23e70da6', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
437892957,Unit tests,Do not merge until previous ones are merged!,False,82,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/82,https://github.com/Wenzel/libmicrovmi/pull/82,open,887,27,3,1,7,40,0,0,[],2020-06-22 12:00:04+00:00,,0.0,,"[{'comment_id': 449581594, 'comment_body': 'Do you have unmerged changes in your own kvmi fork?', 'comment_created': datetime.datetime(2020, 7, 3, 13, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449582438, 'comment_body': ""Please install the editorconfig plugin so we don't see such unnecessary whitespace changes again."", 'comment_created': datetime.datetime(2020, 7, 3, 13, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449598312, 'comment_body': ""You should move all expectations that belong to the new and the drop method into a separate method like e.g. `setup_kvmi_mock()`. You are also too specific with your mock setups. Remember, you want to test `pause_vcpu` here. Ideally, a test should not fail for any other reason than something being wrong with the part that is being tested. It shouldn't fail for example if `get_vcpu_count()` has been called 4 instead of 3 times."", 'comment_created': datetime.datetime(2020, 7, 3, 14, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449601305, 'comment_body': ""Don't copy this part. That just over-complicates the tests. I did this in my test to verify that the initialization is correct even for multiple vcpus. You don't need to verify that again and again ;)"", 'comment_created': datetime.datetime(2020, 7, 3, 14, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449603205, 'comment_body': ""Why? What's wrong with the old fashioned `kvm.pause()`"", 'comment_created': datetime.datetime(2020, 7, 3, 14, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449605049, 'comment_body': 'The naming convention for the tests is `test_feature_under_test()` not `test_method_name()`. You should be more descriptive in your test function names.', 'comment_created': datetime.datetime(2020, 7, 3, 14, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449607290, 'comment_body': 'When you write tests, please adhere to the following convention:\r\n```\r\ntest_func() {\r\n    setup();\r\n\r\n    test();\r\n\r\n    assertion();\r\n}\r\n```\r\n\r\nSplitting your tests into these three logical blocks improves readability.', 'comment_created': datetime.datetime(2020, 7, 3, 14, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449654190, 'comment_body': 'Yes. I made ffi_event a public member of event struct.\r\n', 'comment_created': datetime.datetime(2020, 7, 3, 16, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'arnabcs17b006', 'type': 'User'}, {'comment_id': 449709155, 'comment_body': 'Ah, I see. Could you create a PR for that?', 'comment_created': datetime.datetime(2020, 7, 3, 21, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 449711028, 'comment_body': 'Sure👍', 'comment_created': datetime.datetime(2020, 7, 3, 22, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'arnabcs17b006', 'type': 'User'}, {'comment_id': 474615883, 'comment_body': 'Unnecessary change.', 'comment_created': datetime.datetime(2020, 8, 21, 10, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 474750710, 'comment_body': ""This is still a parameterized test even after you've removed the other test cases. Please create regular tests instead."", 'comment_created': datetime.datetime(2020, 8, 21, 14, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475074940, 'comment_body': ""nitpick: Not a good name for the function as it is not specific enough. I'd suggest `setup_kvmi_mock`. Also, I'd appreciate it if you would move this method further down somewhere behind the tests. The reasoning behind this is that readability is improved if you move helper methods out of the way of the more important things (the tests themselves)."", 'comment_created': datetime.datetime(2020, 8, 22, 10, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475076422, 'comment_body': 'What you are testing here? You manually increase `expect_pause_ev` to 5 and then just expect ok(), but to what end?\r\nFor example, you could instead test that `kvmi.pause()` is not called if there is already a pause event pending.', 'comment_created': datetime.datetime(2020, 8, 22, 10, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475076708, 'comment_body': 'I would also just call kvm.pause() instead of manually increasing the value. Furthermore this is a good case where you can use parameterized tests to verify that the behavior is correct for different vcpu counts.', 'comment_created': datetime.datetime(2020, 8, 22, 10, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475077526, 'comment_body': 'Regarding my first comment. I misread something, the test case is not invalid per se, but there are many more situations you can test regarding pause/resume handing. You can verify the early returns, you can verify that the functions behave correctly for various vcpu counts and you can verify what happens if e.g. `kvmi.pause()` returns an error.', 'comment_created': datetime.datetime(2020, 8, 22, 10, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475077591, 'comment_body': ""Don't forget to name your functions according to what you are testing."", 'comment_created': datetime.datetime(2020, 8, 22, 10, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475087508, 'comment_body': 'You are testing a lot of features in one test case. You should only test a single feature per test function.', 'comment_created': datetime.datetime(2020, 8, 22, 12, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475266452, 'comment_body': ""I'm commenting here because I have the feeling that you've forgotten about this."", 'comment_created': datetime.datetime(2020, 8, 23, 20, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475782120, 'comment_body': 'I would like to avoid manipulating internal variables. Unit tests should try to verify that the public interface of a class behaves as expected. To this end, private functions are usually not tested explicitely and the internal state of an object should only be modified through external influence. I would rename the test to something like `test_pause_vm_only_once_for_multiple_invocations()` and then test accordingly.', 'comment_created': datetime.datetime(2020, 8, 24, 17, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475808938, 'comment_body': 'In this test it would make sense to verify that `listen()` returns the expected event.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475819467, 'comment_body': 'It would also make sense to expect the correct access rights here as well as the correct address.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475823298, 'comment_body': 'Same here, verify the content.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475824663, 'comment_body': 'Verify the content.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475825951, 'comment_body': 'try to reach the same effect with manipulating this value directly.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475827881, 'comment_body': 'Returning 5 pause events for the same vcpu? This is unlikely to happen. You could pass in an outer varable which you increment every time you return something here.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475830702, 'comment_body': 'I would write something into the buffer here and verify that the content at the end.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 475831946, 'comment_body': 'Same principle as in read_physical, just the other way around. Expect some specific content in the mocked call.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 476529468, 'comment_body': ""That shouldn't be necessary. The test would fail anyway if you called these functions without setting them up first. Also, you are asserting too much here. The test shouldn't fail for reasons that don't belong to the hypothesis."", 'comment_created': datetime.datetime(2020, 8, 25, 15, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 476534840, 'comment_body': '@Wenzel is it logically possible for toggling pagefault interception on to fail if called a second time?', 'comment_created': datetime.datetime(2020, 8, 25, 15, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 476535274, 'comment_body': 'why have you replaced setup_kvmi() with this? :scream: ', 'comment_created': datetime.datetime(2020, 8, 25, 15, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477314672, 'comment_body': 'Of all the magical values you could think of for testing, 0 is probably the worst one since it is often used for default initialization.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477409137, 'comment_body': '1. You should compare with `paddr`, not with hardcoded `0`\r\n2. `matches!` is only for enum matching. What you are doing here makes no sense and will always return true. You could write `matches!(x, bla)` for the same effect. I encourage you to look at the expanded macro: `cargo expand --features kvm --lib --tests` (You need to install cargo-expand first)', 'comment_created': datetime.datetime(2020, 8, 26, 15, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477443213, 'comment_body': 'belongs to arrange block', 'comment_created': datetime.datetime(2020, 8, 26, 16, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477443490, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 8, 26, 16, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477445093, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 8, 26, 16, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477445278, 'comment_body': 'belongs to act block', 'comment_created': datetime.datetime(2020, 8, 26, 16, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477504016, 'comment_body': '2x times()?', 'comment_created': datetime.datetime(2020, 8, 26, 18, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477512343, 'comment_body': ""Something that came to my mind: This part is also almost always the same right? Perhaps you could write another function the yields a kvm object completely initialized and set up. If you have the time, I don't deem this necessary. But it would certainly reduce the amount of duplicate setup code alot."", 'comment_created': datetime.datetime(2020, 8, 26, 18, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477513499, 'comment_body': ""Ah, you know what? Don't bother with that. You have enough on your plate as it is."", 'comment_created': datetime.datetime(2020, 8, 26, 18, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}]","[{'commit_sha': '51d3d67fd2d17072322a062c051e409e629c40fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",,46973323,,User,,26,,0,0
464231502,Xen: event support,,False,93,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/93,https://github.com/Wenzel/libmicrovmi/pull/93,closed,124,21,4,1,1,12,0,0,[],2020-08-06 19:51:31+00:00,2020-12-18 17:36:15+00:00,11569484.0,"133 days, 21:44:44","[{'comment_id': 470954851, 'comment_body': 'Why is there a sys crate in here? We should probably create a safe API layer for it. @Wenzel ?', 'comment_created': datetime.datetime(2020, 8, 15, 8, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 470954917, 'comment_body': 'You should mark those dependencies as optional, otherwise the CI will always fail.', 'comment_created': datetime.datetime(2020, 8, 15, 8, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rageagainsthepc', 'type': 'User'}, {'comment_id': 477617396, 'comment_body': ""Yes, we should have\r\nbut it's a bit late now.\r\nLet'd keep it like this and improve in the future.\r\n\r\nsorry I missed this comment."", 'comment_created': datetime.datetime(2020, 8, 26, 22, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477618523, 'comment_body': 'why did you changed the timeout ?', 'comment_created': datetime.datetime(2020, 8, 26, 22, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477618640, 'comment_body': 'why did you commented the loop ?', 'comment_created': datetime.datetime(2020, 8, 26, 22, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477619367, 'comment_body': ""you don't need to recreate the fd and the poll structure everytime.\r\ncreate it once, store it, and use it here."", 'comment_created': datetime.datetime(2020, 8, 26, 22, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477620788, 'comment_body': 'forward the error, either with an explicit match, or the `?` (try) operator ', 'comment_created': datetime.datetime(2020, 8, 26, 22, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477621155, 'comment_body': 'use a `match` on the poll result to handle each possible value, and `_` for all the others.', 'comment_created': datetime.datetime(2020, 8, 26, 22, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477622140, 'comment_body': ""- forward the error.\r\n- use a match statement to handle all possible values\r\n- is pending_event_port is -1, it is a failure, and your code continues its execution. it shouldn't"", 'comment_created': datetime.datetime(2020, 8, 26, 22, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477623001, 'comment_body': ""`flag` doesn't mean anything."", 'comment_created': datetime.datetime(2020, 8, 26, 22, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477623192, 'comment_body': ""don't panic, it's a library, you should return an Error"", 'comment_created': datetime.datetime(2020, 8, 26, 22, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}, {'comment_id': 477624416, 'comment_body': ""actually, you don't need it. your `if` statement can return a value, which is your Event, or None.\r\njust call notify, and then Ok on the value returned by the if"", 'comment_created': datetime.datetime(2020, 8, 26, 22, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Wenzel', 'type': 'User'}]","[{'commit_sha': '0e7bdd50f5f11acca7dcf5f5dc31a3f9b948ae76', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
469656580,Xen: MSR events,"MSR Events
",False,114,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/114,https://github.com/Wenzel/libmicrovmi/pull/114,closed,140,33,7,2,1,0,0,0,[],2020-08-18 18:09:18+00:00,2020-12-17 12:52:09+00:00,10435371.0,"120 days, 18:42:51",[],"[{'commit_sha': '8b190aa9be1efc638a6f5085d5331a436585cfd3', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba88fb69abc4e9d7398b54b2b54d2bd112f2615b', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
468131750,Xen: Breakpoint,,False,98,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/98,https://github.com/Wenzel/libmicrovmi/pull/98,closed,147,33,7,3,1,0,0,0,[],2020-08-14 18:42:37+00:00,2020-12-18 17:36:02+00:00,10882405.0,"125 days, 22:53:25",[],"[{'commit_sha': '6895d0876458c292e82c5b9bedfaaf43407518e6', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd53ebc8cd07d98460646e552c941ad484b28ba53', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '987e996a930111bb417db2921187b4ab8fa2caa3', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
468915396,Xen: Pagefault,,False,110,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/110,https://github.com/Wenzel/libmicrovmi/pull/110,open,200,42,8,4,1,0,0,0,[],2020-08-17 15:50:03+00:00,,0.0,,[],"[{'commit_sha': 'f7d7dd71a558204a24cfcc50040371375163cf0b', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ead18c9d50283e1965e1e59124450bd2cdd547', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b0ca56d3cd347c53c79c74e5e8fdb97ef849a18', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b609888bada5ecd35217ffb8af85a18f217fa20', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
469519635,Xen: Singlestep events,,False,113,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/113,https://github.com/Wenzel/libmicrovmi/pull/113,open,305,43,9,5,1,0,0,0,[],2020-08-18 14:02:05+00:00,,0.0,,[],"[{'commit_sha': 'ade936b3e0d44be5ae33f9eb71c0c302c3b0cc7c', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4ad12b5ff204393f7bb1c1a78b1913199eaf8c', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e972d8c8c69ff4717fca13a0c1cab965a473d15', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c7e234317702873ffcfdfb0d60ab6e492039d2', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d96bab0a264490b93f34da796288c88f204de1', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
470469220,C examples,,False,117,https://api.github.com/repos/Wenzel/libmicrovmi/pulls/117,https://github.com/Wenzel/libmicrovmi/pull/117,open,830,43,19,6,0,0,0,0,[],2020-08-19 21:31:37+00:00,,0.0,,[],"[{'commit_sha': '95d43a093c080e672552ddc4e4d2caf9bfe16f1f', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8df7708b6d42b2156a50db0d797dc4496e9495af', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1937e68bedc1366082f8c95c8faf9583a2e7fb', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '535e45e5d10951e96fa139881f4cec0f06446fd4', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '960b97cb84c3b4bec96ae01bef43c4d4fc4fa6fb', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78db587f6321344723f141dccec4bdced54ca0fa', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
474922335,Mockable crate,,False,25,https://api.github.com/repos/Wenzel/xenctrl/pulls/25,https://github.com/Wenzel/xenctrl/pull/25,open,623,42,5,6,0,0,0,0,[],2020-08-27 20:07:34+00:00,,0.0,,[],"[{'commit_sha': '8fcff0701c25905ee4251b06a70bec2bdc50f802', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2760561997ed5293829116c1c7b6efb29398c00', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b5fcfdc4e1f16528f8aa0e7a2c5cbf3c1373f9d', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b537b1f637f89983231f54e63bee6bd799b14343', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '180b1b6510d8cb2044d998c58c3ed5293b6cd5a1', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651aae949d0c5d61bd4efa1c21b81bde23774ec3', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
466134678,Mockable crate,,False,5,https://api.github.com/repos/Wenzel/xenevtchn/pulls/5,https://github.com/Wenzel/xenevtchn/pull/5,open,134,16,3,2,0,0,0,0,[],2020-08-11 14:17:38+00:00,,0.0,,[],"[{'commit_sha': 'bb85bacf28dba1269b26977c8c842e139cd9dbeb', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3468fa88e783807ac50315570fe5fdf5a1e8abd', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
474756706,made this crate mockable,,False,5,https://api.github.com/repos/Wenzel/xenforeignmemory/pulls/5,https://github.com/Wenzel/xenforeignmemory/pull/5,open,26,9,1,1,0,0,0,0,[],2020-08-27 14:54:32+00:00,,0.0,,[],"[{'commit_sha': '3ad68944ca3457516bad5787e7557567c9c2891c', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0
474770233,made this crate mockable,,False,4,https://api.github.com/repos/Wenzel/xenstore/pulls/4,https://github.com/Wenzel/xenstore/pull/4,open,26,9,1,1,0,0,0,0,[],2020-08-27 15:14:21+00:00,,0.0,,[],"[{'commit_sha': 'c91e73740f7826306c6dad20b3cca7cd0ceb855c', 'committer_username': 'arnabcs17b006', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 23, 18, 23, 18, tzinfo=datetime.timezone.utc)}]",,46973323,,User,,26,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
188470858,libmicrovmi,Wenzel/libmicrovmi,Rust,16,163,8,7,784,34,11,8,"[{'id': 477157317, 'number': 124, 'closed': None, 'created': datetime.datetime(2020, 9, 1, 15, 22, 2, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1803, 'deletions': 104, 'state': 'open'}, {'id': 470469220, 'number': 117, 'closed': None, 'created': datetime.datetime(2020, 8, 19, 21, 31, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 830, 'deletions': 43, 'state': 'open'}, {'id': 469656580, 'number': 114, 'closed': datetime.datetime(2020, 12, 17, 12, 52, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 18, 9, 18, tzinfo=datetime.timezone.utc), 'time_taken': 10435371.0, 'time_delta': '120 days, 18:42:51', 'additions': 140, 'deletions': 33, 'state': 'closed'}, {'id': 469519635, 'number': 113, 'closed': None, 'created': datetime.datetime(2020, 8, 18, 14, 2, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 305, 'deletions': 43, 'state': 'open'}, {'id': 468915396, 'number': 110, 'closed': None, 'created': datetime.datetime(2020, 8, 17, 15, 50, 3, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 200, 'deletions': 42, 'state': 'open'}, {'id': 468131750, 'number': 98, 'closed': datetime.datetime(2020, 12, 18, 17, 36, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 18, 42, 37, tzinfo=datetime.timezone.utc), 'time_taken': 10882405.0, 'time_delta': '125 days, 22:53:25', 'additions': 147, 'deletions': 33, 'state': 'closed'}, {'id': 464231502, 'number': 93, 'closed': datetime.datetime(2020, 12, 18, 17, 36, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 19, 51, 31, tzinfo=datetime.timezone.utc), 'time_taken': 11569484.0, 'time_delta': '133 days, 21:44:44', 'additions': 124, 'deletions': 21, 'state': 'closed'}, {'id': 451163201, 'number': 91, 'closed': datetime.datetime(2020, 8, 26, 22, 5, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 14, 28, 31, tzinfo=datetime.timezone.utc), 'time_taken': 3483442.0, 'time_delta': '40 days, 7:37:22', 'additions': 32, 'deletions': 1, 'state': 'closed'}, {'id': 451159085, 'number': 90, 'closed': datetime.datetime(2020, 12, 16, 23, 1, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 14, 22, 20, tzinfo=datetime.timezone.utc), 'time_taken': 13163934.0, 'time_delta': '152 days, 8:38:54', 'additions': 101, 'deletions': 40, 'state': 'closed'}, {'id': 447901795, 'number': 89, 'closed': datetime.datetime(2020, 8, 19, 22, 15, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 12, 13, 40, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3314098.0, 'time_delta': '38 days, 8:34:58', 'additions': 238, 'deletions': 7, 'state': 'closed'}, {'id': 447803737, 'number': 88, 'closed': datetime.datetime(2020, 7, 12, 10, 42, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 18, 52, 47, tzinfo=datetime.timezone.utc), 'time_taken': 56969.0, 'time_delta': '15:49:29', 'additions': 128, 'deletions': 0, 'state': 'closed'}, {'id': 447735094, 'number': 87, 'closed': datetime.datetime(2020, 7, 11, 15, 57, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 7, 40, 50, tzinfo=datetime.timezone.utc), 'time_taken': 29775.0, 'time_delta': '8:16:15', 'additions': 174, 'deletions': 10, 'state': 'closed'}, {'id': 438646012, 'number': 84, 'closed': datetime.datetime(2020, 8, 17, 23, 44, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 15, 24, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4782020.0, 'time_delta': '55 days, 8:20:20', 'additions': 136, 'deletions': 12, 'state': 'closed'}, {'id': 437894650, 'number': 83, 'closed': datetime.datetime(2020, 7, 12, 13, 41, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 12, 3, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1733903.0, 'time_delta': '20 days, 1:38:23', 'additions': 794, 'deletions': 28, 'state': 'closed'}, {'id': 437892957, 'number': 82, 'closed': None, 'created': datetime.datetime(2020, 6, 22, 12, 0, 4, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 887, 'deletions': 27, 'state': 'open'}, {'id': 437891661, 'number': 81, 'closed': datetime.datetime(2020, 6, 27, 17, 18, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 11, 57, 46, tzinfo=datetime.timezone.utc), 'time_taken': 451253.0, 'time_delta': '5 days, 5:20:53', 'additions': 398, 'deletions': 22, 'state': 'closed'}, {'id': 437889544, 'number': 80, 'closed': datetime.datetime(2020, 7, 10, 22, 0, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 11, 54, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1591566.0, 'time_delta': '18 days, 10:06:06', 'additions': 17, 'deletions': 6, 'state': 'closed'}, {'id': 437886464, 'number': 79, 'closed': datetime.datetime(2020, 7, 8, 14, 25, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 11, 48, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1391856.0, 'time_delta': '16 days, 2:37:36', 'additions': 158, 'deletions': 26, 'state': 'closed'}, {'id': 427958664, 'number': 74, 'closed': datetime.datetime(2020, 8, 21, 13, 36, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 16, 37, 42, tzinfo=datetime.timezone.utc), 'time_taken': 6728351.0, 'time_delta': '77 days, 20:59:11', 'additions': 963, 'deletions': 59, 'state': 'closed'}]"
189097788,xenctrl,Wenzel/xenctrl,Rust,6,4,4,7,152,8,3,2,"[{'id': 474922335, 'number': 25, 'closed': None, 'created': datetime.datetime(2020, 8, 27, 20, 7, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 623, 'deletions': 42, 'state': 'open'}, {'id': 474645550, 'number': 24, 'closed': datetime.datetime(2020, 8, 27, 20, 7, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 11, 47, 25, tzinfo=datetime.timezone.utc), 'time_taken': 29992.0, 'time_delta': '8:19:52', 'additions': 480, 'deletions': 37, 'state': 'closed'}, {'id': 469240981, 'number': 21, 'closed': datetime.datetime(2020, 12, 17, 14, 31, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 6, 39, 59, tzinfo=datetime.timezone.utc), 'time_taken': 10482701.0, 'time_delta': '121 days, 7:51:41', 'additions': 549, 'deletions': 28, 'state': 'closed'}, {'id': 468479835, 'number': 19, 'closed': datetime.datetime(2020, 12, 17, 14, 13, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 18, 36, 28, tzinfo=datetime.timezone.utc), 'time_taken': 10611412.0, 'time_delta': '122 days, 19:36:52', 'additions': 524, 'deletions': 28, 'state': 'closed'}, {'id': 468119444, 'number': 18, 'closed': datetime.datetime(2020, 12, 17, 13, 36, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 18, 10, 43, tzinfo=datetime.timezone.utc), 'time_taken': 10783565.0, 'time_delta': '124 days, 19:26:05', 'additions': 425, 'deletions': 17, 'state': 'closed'}, {'id': 468085011, 'number': 17, 'closed': datetime.datetime(2020, 12, 17, 11, 22, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 16, 54, 47, tzinfo=datetime.timezone.utc), 'time_taken': 10780067.0, 'time_delta': '124 days, 18:27:47', 'additions': 421, 'deletions': 17, 'state': 'closed'}, {'id': 451163933, 'number': 14, 'closed': datetime.datetime(2020, 12, 16, 22, 21, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 14, 29, 33, tzinfo=datetime.timezone.utc), 'time_taken': 13161134.0, 'time_delta': '152 days, 7:52:14', 'additions': 440, 'deletions': 17, 'state': 'closed'}]"
201109056,xenevtchn,Wenzel/xenevtchn,Rust,2,2,3,3,37,1,2,1,"[{'id': 466134678, 'number': 5, 'closed': None, 'created': datetime.datetime(2020, 8, 11, 14, 17, 38, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 134, 'deletions': 16, 'state': 'open'}, {'id': 458086966, 'number': 3, 'closed': datetime.datetime(2020, 8, 11, 20, 7, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 22, 15, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1201957.0, 'time_delta': '13 days, 21:52:37', 'additions': 140, 'deletions': 21, 'state': 'closed'}]"
191631821,xenforeignmemory,Wenzel/xenforeignmemory,Rust,4,1,2,2,34,1,1,1,"[{'id': 474756706, 'number': 5, 'closed': None, 'created': datetime.datetime(2020, 8, 27, 14, 54, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 26, 'deletions': 9, 'state': 'open'}]"
190828342,xenstore,Wenzel/xenstore,Rust,4,3,3,4,85,2,1,1,"[{'id': 474770233, 'number': 4, 'closed': None, 'created': datetime.datetime(2020, 8, 27, 15, 14, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 26, 'deletions': 9, 'state': 'open'}]"
