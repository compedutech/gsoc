pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
428957914,Nullness annotations to gson [review 1]," @Maxi17, annotations are added for nullness checker according to week 1 of plan. ",False,1,https://api.github.com/repos/typetools/gson/pulls/1,https://github.com/typetools/gson/pull/1,open,659,362,41,18,1,34,0,0,[],2020-06-06 03:52:24+00:00,,0.0,,"[{'comment_id': 436700927, 'comment_body': 'In the documentation it is not specified that the return result can be null. This annotation is forced here because the method `get(Object)` in `java.lang.reflect` has its return type annotated with `@Nullable`. I am not sure if this annotation is correct, since `get` from `jdk.internal.reflect.FieldAccessor.java` is not annotated as `@Nullable`.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436706449, 'comment_body': 'Avoid this type of changes.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436709474, 'comment_body': 'Even though the annotation is added correctly, the build passes even without it. This holds for all annotations in this file, except the last one.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436718706, 'comment_body': 'Only one annotation is used, so only that annotation needs to be imported.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436726656, 'comment_body': 'This is not required. There is an exception thrown anyways if `obj` is `null`, so for the program not to crash, obj is required to be `@NonNull` when entering this method.', 'comment_created': datetime.datetime(2020, 6, 8, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436729674, 'comment_body': 'This is not required because of the comment in `gson/internal/$Gson$Preconditions.java`', 'comment_created': datetime.datetime(2020, 6, 8, 14, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436741911, 'comment_body': 'Why annotating the return type with `@Nullable` is not working?', 'comment_created': datetime.datetime(2020, 6, 8, 14, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436742570, 'comment_body': 'Revert this change', 'comment_created': datetime.datetime(2020, 6, 8, 14, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436748963, 'comment_body': ""The method is package private, which means there is only called inside the package. This means it is not visible to the outside world, so the developers made sure they don't call it with  `subclass` equal to `null`."", 'comment_created': datetime.datetime(2020, 6, 8, 14, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436753946, 'comment_body': 'The method `getSuperclassTypeParameter` here is only called in one place and is not public. In that place, it is called using with a class as parameter, which means `subclass.getGenericSuperclass()` cannot return an interface (the only case in which it returns `null`. This means the code is safe here.', 'comment_created': datetime.datetime(2020, 6, 8, 14, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436757586, 'comment_body': 'Add a comment to explain why 3, 4 and 5 imply the method call is safe.', 'comment_created': datetime.datetime(2020, 6, 8, 14, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436761635, 'comment_body': 'Both `@SuppressWarnings` in this file are possible inconsistencies in Checker Framework. It should have known the variables are not null on that line. Can you read the manual, and if nothing that explains this behavior pops up, create a test case for this?', 'comment_created': datetime.datetime(2020, 6, 8, 14, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436765121, 'comment_body': 'This method return type can be `null`', 'comment_created': datetime.datetime(2020, 6, 8, 14, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436768492, 'comment_body': 'Why do you suppress `argument.type.incompatible` here?', 'comment_created': datetime.datetime(2020, 6, 8, 14, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436771981, 'comment_body': 'The method is private. Still, can you verify that it is not possible to throw a `NullPointerException` internally?', 'comment_created': datetime.datetime(2020, 6, 8, 14, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 436775697, 'comment_body': 'The errors you suppressed are InitializationChecker errors. You can use this when doing nullness case studies. Can you make sure adding such annotations still produce `method.invocation.invalid` errors?', 'comment_created': datetime.datetime(2020, 6, 8, 14, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 437817970, 'comment_body': '@Maxi17 I could not completely understand this comment. Adding which annotations still produce this error?', 'comment_created': datetime.datetime(2020, 6, 10, 2, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 437821350, 'comment_body': ""The function does not return a null value. I provided the explanation for the case which led to the error. I'll improve the comment."", 'comment_created': datetime.datetime(2020, 6, 10, 2, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 438223822, 'comment_body': ""What I'm saying here is that `mvn compile` passes even without suppressing `argument.type.incompatible`."", 'comment_created': datetime.datetime(2020, 6, 10, 15, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 438225640, 'comment_body': ""Don't make changes that don't add any value to the file. This is one example."", 'comment_created': datetime.datetime(2020, 6, 10, 15, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 438228858, 'comment_body': ""I am saying that the errors you are suppressing are because of `InitializationChecker`. What I'm asking is if you add `InitializationChecker` annotations (link `@Initialized`) works here."", 'comment_created': datetime.datetime(2020, 6, 10, 15, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 438232348, 'comment_body': 'This is no longer necessary.', 'comment_created': datetime.datetime(2020, 6, 10, 15, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443902768, 'comment_body': 'Running `mvn compile` issues a warning for these two lines because you placed the annotation in an incorrect position. `@Nullable` should be before the type of the object.', 'comment_created': datetime.datetime(2020, 6, 23, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443904945, 'comment_body': 'After you add the annotation in the jdk, make sure you re-run the case study and fix all `@SuppressWarnings` caused by missing jdk annotations.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443906890, 'comment_body': 'This class is only used internally, and when it was used `chars` was initialized`', 'comment_created': datetime.datetime(2020, 6, 23, 1, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443907189, 'comment_body': 'Seems like more annotations need to be added in the jdk. Remove the comment after you do so.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443908176, 'comment_body': 'Revert changes like this.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443908988, 'comment_body': 'No information on why this is here.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443909319, 'comment_body': 'No explanation for this `@SuppressWarnings`', 'comment_created': datetime.datetime(2020, 6, 23, 1, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443909481, 'comment_body': 'This looks like a bug in Gson. Can you produce a test case in which `INSTANCE` is null and the program crashes?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443910281, 'comment_body': 'If `null` should not be sent to this smethod, then why is the code safe?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 449353603, 'comment_body': 'No NullPointerException is thrown internally but as the method is private developers ensure the concerned read function does not return null so the code is safe', 'comment_created': datetime.datetime(2020, 7, 3, 3, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 449355990, 'comment_body': 'Annotation needs to be added to the current object or `this` which is not possible, therefore the suppression', 'comment_created': datetime.datetime(2020, 7, 3, 3, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 449365164, 'comment_body': 'The method is defined inside a private class  and is never called so can this method be ruled out as safe?', 'comment_created': datetime.datetime(2020, 7, 3, 4, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}]","[{'commit_sha': '535d5b9c596301fbbba192d1530c65e75ce06bbd', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4ece5810ca3bebd5fae76834e206c4cc82ea1e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bb5a3201ed7247e0c633ef3d265ac4cbb3a59a', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f045cca37c6d9e8b56ddd1a590b15456b527fc07', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4118f19587028a02f893ddd9aed8822501b9ce39', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53b773e1d4486de90668efa7f45d1b0b90d95e2', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3f7feb6467a5dec8cd124f02b32a4d520d0240d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c8027c986a20cb0cee6682ad8ace0f1fea254ab', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '686c753f727b87a1296671c614fde9e8a99bf6b2', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e11d7e9c332b895113356726b4f7d455767e3c', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f48a82f456862051d0fbf03772f2e67cea4f29f', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '843d65c78ef60a4da86b8a9f73eea0ca1b9437ca', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6cee36c40819eaef6fe63e783f3cc5a4f1f6e2', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3525a49cb144c9afec2689533e6733b3af129eeb', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9050698ce9d0df979a9a928263e4362d13fcbd5d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aa628be28630809d5578e39e4bf5e11fe211fe1', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fac12eca5f523461c583f5f22f536a5362b426c', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c85b1f7add86662ab1622ae721663cc2cf0977', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
436436009,Index annotations,@Maxi17 Index annotations are added. Please review.,False,2,https://api.github.com/repos/typetools/gson/pulls/2,https://github.com/typetools/gson/pull/2,open,504,206,17,12,0,6,0,0,[],2020-06-18 12:21:46+00:00,,0.0,,"[{'comment_id': 443912054, 'comment_body': 'Why is an annotation from `NullnessChecker` present in index case study?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443912518, 'comment_body': 'This diff file is too cluttered with empty spaces.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443913450, 'comment_body': ""Why using a `@MinLen` annotation to express what you said here doesn't work?"", 'comment_created': datetime.datetime(2020, 6, 23, 1, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443913881, 'comment_body': 'Remember to delete these comments once missing JDK annotations are added.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443914082, 'comment_body': 'So is this a possible bug in Gson?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443914904, 'comment_body': 'Again, can you write a test case in which unexpected behavior happens?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}]","[{'commit_sha': '535d5b9c596301fbbba192d1530c65e75ce06bbd', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4ece5810ca3bebd5fae76834e206c4cc82ea1e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bb5a3201ed7247e0c633ef3d265ac4cbb3a59a', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2354aa4ff2fd2748fd3004ee0a502e87eeea4524', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc124b3fce240b20ab07c970c983a74c4a87a695', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f52f45acb8402f2221f6749b8d2048568d26db', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d80a93435e51012a88bb812d1bfb423029692bf', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9f505e2211743eacbeba504455634e5038645b7', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11e5f08f07a3ca3d48700b061ad816f3600bcd0', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bfd755575f01acfc24a52c13f6cf1ede33ff759', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33253c9245777abb8159b5380503040ae885b1b1', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc36635cf29ec54e1e5936741cd2d71911c0ebc9', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
436436009,Index annotations,@Maxi17 Index annotations are added. Please review.,False,2,https://api.github.com/repos/typetools/gson/pulls/2,https://github.com/typetools/gson/pull/2,open,504,206,17,12,0,6,0,0,[],2020-06-18 12:21:46+00:00,,0.0,,"[{'comment_id': 443912054, 'comment_body': 'Why is an annotation from `NullnessChecker` present in index case study?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443912518, 'comment_body': 'This diff file is too cluttered with empty spaces.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443913450, 'comment_body': ""Why using a `@MinLen` annotation to express what you said here doesn't work?"", 'comment_created': datetime.datetime(2020, 6, 23, 1, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443913881, 'comment_body': 'Remember to delete these comments once missing JDK annotations are added.', 'comment_created': datetime.datetime(2020, 6, 23, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443914082, 'comment_body': 'So is this a possible bug in Gson?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}, {'comment_id': 443914904, 'comment_body': 'Again, can you write a test case in which unexpected behavior happens?', 'comment_created': datetime.datetime(2020, 6, 23, 1, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Maxi17', 'type': 'User'}]","[{'commit_sha': '535d5b9c596301fbbba192d1530c65e75ce06bbd', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4ece5810ca3bebd5fae76834e206c4cc82ea1e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bb5a3201ed7247e0c633ef3d265ac4cbb3a59a', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2354aa4ff2fd2748fd3004ee0a502e87eeea4524', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc124b3fce240b20ab07c970c983a74c4a87a695', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f52f45acb8402f2221f6749b8d2048568d26db', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d80a93435e51012a88bb812d1bfb423029692bf', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9f505e2211743eacbeba504455634e5038645b7', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b11e5f08f07a3ca3d48700b061ad816f3600bcd0', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bfd755575f01acfc24a52c13f6cf1ede33ff759', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33253c9245777abb8159b5380503040ae885b1b1', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc36635cf29ec54e1e5936741cd2d71911c0ebc9', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
441835197,Interning annotations,@Maxi17 I have added interning annotations. Please review,False,3,https://api.github.com/repos/typetools/gson/pulls/3,https://github.com/typetools/gson/pull/3,open,159,35,13,8,0,0,0,0,[],2020-06-30 07:23:38+00:00,,0.0,,[],"[{'commit_sha': '535d5b9c596301fbbba192d1530c65e75ce06bbd', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4ece5810ca3bebd5fae76834e206c4cc82ea1e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bb5a3201ed7247e0c633ef3d265ac4cbb3a59a', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2354aa4ff2fd2748fd3004ee0a502e87eeea4524', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993d4bc16815012c618e315aab36787e8513c7a5', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2e27c746a40273fe4142ea16bf04f0ea1ddd275', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14d2de02a6818e04cbfa88aec6fee2010e3037d3', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09922cb39372bd7db45cba9e4cafcce86f19ad9d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
471374607,Add @Pure annotations to pure methods in java.lang.reflect.Array,`@Pure` annotations are missing from some pure methods in the class `java.lang.reflect.Array`. This pull request adds those missing annotations.,True,79,https://api.github.com/repos/typetools/jdk/pulls/79,https://github.com/typetools/jdk/pull/79,closed,9,9,1,2,2,0,0,0,[],2020-08-21 04:45:20+00:00,2020-08-22 15:09:11+00:00,123831.0,"1 day, 10:23:51",[],"[{'commit_sha': '54c9e79d2c51fc5ce096947eac21e00481b33a6f', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd17850032038ea18ce1f0b6011f3147d84e9d8', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
464359099,add @Pure to getLength of Array,"Array.getLength method has no visible side effects and is deterministic, therefore should be annotated as @Pure.",True,77,https://api.github.com/repos/typetools/jdk/pulls/77,https://github.com/typetools/jdk/pull/77,closed,2,1,1,2,1,0,0,0,[],2020-08-07 02:51:21+00:00,2020-08-07 14:24:29+00:00,41588.0,11:33:08,[],"[{'commit_sha': '4654893992340ccdea25d816dd709a42f8bd0241', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ef81546a5d6c3b5aff7bc7d5916125d711664aa', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
438954210,add missing annotation to getUpperBounds() ,"According to the documentation getUpperBounds function 'Returns an array of {@code Type} objects representing the  upper bound(s) of this type variable.  If no upper bound is explicitly declared, the upper bound is {@code Object}.'. Therefore, getUpperBounds() function returns an array of atleast length 1.",True,60,https://api.github.com/repos/typetools/jdk/pulls/60,https://github.com/typetools/jdk/pull/60,closed,2,1,1,8,1,0,0,0,[],2020-06-24 04:31:40+00:00,2020-07-26 04:22:00+00:00,2764220.0,"31 days, 23:50:20",[],"[{'commit_sha': '25671ae7afca4a864c396bcb710529a39cec5357', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed6e72ae2d717b11f8692a6d333dd5cdcdc6c92', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae3c27953fcdf969e65a38c08f2fafa5a57f4301', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caea99ffc9b34d10cb7315c91f90c63a1d376799', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c9936f1aea1d0cc390e4692411868f929da845f', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62dc442c6ff1b002dae04a26d33a78fc1fc3a3c', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d75c259bc7d118cd4e89a5499d9eb388a20353', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7071b6eaae79f2d9cf06311591a615f2ba30af', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
388143276,Added missing annotations for index checker in ResultSetMetaData.java,,True,35,https://api.github.com/repos/typetools/jdk/pulls/35,https://github.com/typetools/jdk/pull/35,closed,28,24,1,6,2,6,0,0,[],2020-03-14 04:04:00+00:00,2020-07-29 20:53:08+00:00,11897348.0,"137 days, 16:49:08","[{'comment_id': 460471864, 'comment_body': ""Please don't make whitespace changes."", 'comment_created': datetime.datetime(2020, 7, 26, 3, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 460471884, 'comment_body': 'Import statements should go with the `package` statement, not between the class Javadoc and the class definition.', 'comment_created': datetime.datetime(2020, 7, 26, 3, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 460472353, 'comment_body': 'I found multiple different implementations of this interface that sometimes return 0.  Are you sure that all those implementations are incorrect?  What are you basing this `@NonNegative` annotation on?', 'comment_created': datetime.datetime(2020, 7, 26, 3, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 460472426, 'comment_body': 'The Javadoc explicitly says that the return value may be 0, on line 177 above.  Why did you annotate the return type as `@NonNegative`?', 'comment_created': datetime.datetime(2020, 7, 26, 3, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 460473451, 'comment_body': '`@NonNegative`\'s documentation says ""The annotated expression evaluates to an integer greater than or equal to 0. "" which means that the return value includes 0. Did I get the usage of the annotation wrong?', 'comment_created': datetime.datetime(2020, 7, 26, 3, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 461235751, 'comment_body': 'Sorry, I switched around the two annotations on this line.  I apologize for my mistake.', 'comment_created': datetime.datetime(2020, 7, 27, 23, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}]","[{'commit_sha': '25671ae7afca4a864c396bcb710529a39cec5357', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed6e72ae2d717b11f8692a6d333dd5cdcdc6c92', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31ed14f20d84f65472afb64f2b28a5dea72f9f81', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43b00cdb6ee26b4b5365b18f46f011db8d4cde1', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3c100cd49210b2cfea554d4a6550c7ceb5ddb07', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4c0e92b3bf997db7031c662d6b11d3cf3879d4f', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
458407399,Propagate length information from argument to return value of Arrays.copyOf(),"Fixes #3224;
The Value checker did not infer array length information from the arguments of `Arrays.copyOf()` method leading to false positives.

To avoid those false positives, check if the expression `valueTree` is a call to `Arrays.copyOf()` method in `commonAssignmentCheck()` of `ValueVisitor.java` and then add appropriate `@ArrayLen` annotations to the return value of `Arrays.copyOf()`.",True,3524,https://api.github.com/repos/typetools/checker-framework/pulls/3524,https://github.com/typetools/checker-framework/pull/3524,closed,76,0,3,14,0,10,0,1,[],2020-07-29 12:29:43+00:00,2020-08-03 14:57:02+00:00,440839.0,"5 days, 2:27:19","[{'comment_id': 462456968, 'comment_body': 'This only tests that the second argument is any array length access expression. The correct test needs to check that it is an array length access for the array that is the first argument. You can add a test case for this:\r\n\r\n```\r\n    public static void m4(String @MinLen(1) [] args, String[] otherArray) {\r\n        // :: error: assignment.type.incompatible\r\n        String @MinLen(1) [] args2 = Arrays.copyOf(args, otherArray.length);\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 17, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 462458900, 'comment_body': 'Why only `IntVal`? If there is an `IntRange` annotation, you could take its lower bound (`from` field) and use that.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 462459137, 'comment_body': '(and, you should add a test with `IntRange` when you do)', 'comment_created': datetime.datetime(2020, 7, 29, 17, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 462723045, 'comment_body': 'Do we want to check this now? As suggested above I have added to `valuetype` any `@IntVal` or `@IntRange` annotation on the second argument. Suppose the user intends to have `args2` of the same length as `otherArray`, then this check might lead to a false positive.', 'comment_created': datetime.datetime(2020, 7, 30, 4, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 463111205, 'comment_body': 'nit: in camel-case, this should be `isArraysCopyOfMethodInvocation` (that is, capitalize the ""c"" in ""copy"")', 'comment_created': datetime.datetime(2020, 7, 30, 16, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 463113222, 'comment_body': 'This test isn\'t strong enough - it will return true on any method named `copyOf` in a class named `Arrays`, even if it is not the one from the JDK.\r\n\r\nYou should look at how `IndexMethodIdentifier` in the Index Checker identifies specific methods; you should be able to use the same kind of code here to identify `Arrays.copyOf` with confidence.\r\n\r\n(It would probably also be worthwhile to add an inner static class named ""Arrays"" with a static ""copyOf"" method to the tests and then ensure that your code is not invoked when that method is called.)', 'comment_created': datetime.datetime(2020, 7, 30, 16, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 463122731, 'comment_body': 'Please add a check here that the length of `args` is what you expect (i.e. 2) and throw a `BugInCF` otherwise', 'comment_created': datetime.datetime(2020, 7, 30, 16, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 463124284, 'comment_body': ""Rather than checking for `IntVal` and `IntRange` by hand, I suggest using `ValueCheckerUtils.getPossibleValues`, which returns a `Range` or `null` if the annotation isn't integral. It already has support for both `IntVal` and `IntRange`, and you should be able to just use its lower bound directly rather than doing the computations below. That will greatly simplify the code."", 'comment_created': datetime.datetime(2020, 7, 30, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 463124855, 'comment_body': 'In the test case I suggested, that is a true positive: `otherArray` might not be `@MinLen(1)`, even if the user hopes that it is - its length could be zero. I think you can add that test method verbatim into the existing test (except for changing the name).', 'comment_created': datetime.datetime(2020, 7, 30, 16, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}, {'comment_id': 463693062, 'comment_body': '`range` can be null here, but `createArrayLenRange` assumes its input in non-null. Can you add a null check and only do the `type.replaceAnnotation(atypeFactory.createArrayLenRangeAnnotation(range));` if the range is non-null?\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 15, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kelloggm', 'type': 'User'}]","[{'commit_sha': '5624d27a78b4f001b1e3c221bef373f66cb22a7d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3723b511d80ffc2424695f00d5765514782a92e4', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32a728fa0fc51699fbeefd70c7dfa1b797ddfafa', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fea713f6d5402497c9d2abee4b2ba1755b1a54a', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888a7a4d45dba9e750ceb1d8dcf144788d4f880e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ad98a2e508c37609e6afa1816fe662e2444bdc', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688ca4f12aa48340354a9fc8b3748296efabcddb', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3966be6af765918300fc12a7e5aac7d5c81edae3', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35a6430068cb3d0892bff03d6a6964ab94261e25', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecb48f5408a45daab742c32b28819618ebc7380e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e309153a6d4f56e9a1e00ad9849562f1f88c196a', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '221d3c0a38adb701171050395d054a55631c954f', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a02c561d662715e38d7bfd29803d41f57e4f2c7', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '881bbe943530d2a2e0d8a8a25850c0aa5dbd4dfc', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
456037728,Retreive @MinLen annotations from ArrayAccess receivers,"Fixes #3207;
The Value Checker did not infer information from annotated ArrayAccess Receiver due to which [Issue3207.java](https://github.com/typetools/checker-framework/blob/master/checker/tests/index/Issue3207.java) leads to `assignment.type.incompatible` error.

To fix this add a condition in `getMinLenFromString()` of `ValueAnnotator.java` that checks for ArrayAccess receivers and then retrieve the `@MinLen` or related annotation from the Receiver and return the min length to the UpperBoundChecker.

",True,3502,https://api.github.com/repos/typetools/checker-framework/pulls/3502,https://github.com/typetools/checker-framework/pull/3502,closed,12,2,2,5,0,0,0,0,[],2020-07-24 02:10:32+00:00,2020-07-24 22:22:37+00:00,72725.0,20:12:05,[],"[{'commit_sha': '5624d27a78b4f001b1e3c221bef373f66cb22a7d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '347205dc41ab7dbb8bd64c5f275d4f54852be6d5', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cf9b4579e3fdebabe7115161305668149b53a2', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d323d9ac1f22eb591a0e6f258af9cf7ff3ba3c', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '880866b57fab319b70f3768242ca2341821c6dd9', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
447745505,Add -Aversion command-line option; fixes #3381,#3381 Add -Aversion option,True,3464,https://api.github.com/repos/typetools/checker-framework/pulls/3464,https://github.com/typetools/checker-framework/pull/3464,closed,25,0,3,14,2,21,0,1,[],2020-07-11 09:30:25+00:00,2020-07-20 22:51:43+00:00,825678.0,"9 days, 13:21:18","[{'comment_id': 453217458, 'comment_body': 'Please use correct capitalization for Checker Framework.', 'comment_created': datetime.datetime(2020, 7, 11, 17, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453217485, 'comment_body': 'Use correct name for Checker Framework.', 'comment_created': datetime.datetime(2020, 7, 11, 17, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453217652, 'comment_body': 'You need to document that this can return null.  Under what circumstances can it do so?  Should it throw an exception rather than returning null?', 'comment_created': datetime.datetime(2020, 7, 11, 17, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453217739, 'comment_body': 'Why does this loop continue after setting `version`?  Could you use a `return` statement here?', 'comment_created': datetime.datetime(2020, 7, 11, 17, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453218160, 'comment_body': 'Rather than creating an empty Properties on line 2547 and then merging a Properties into it, can this line be\r\n```\r\nProperties p = getProperties(getClass(), RLS_FILE);\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 11, 17, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453218306, 'comment_body': 'Is it a bug if this line is reached?  If so, it is better to fail than to print a line that users are likely to overlook.', 'comment_created': datetime.datetime(2020, 7, 11, 17, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453218371, 'comment_body': 'Under what circumstances is `version` null?  Is that a bug?', 'comment_created': datetime.datetime(2020, 7, 11, 17, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453261759, 'comment_body': 'Its never null for the current version. It can only be null if the tag in release.properties is not found in `XML_FILE`. Should I remove this check altogether and throw an exception if ever version is null?', 'comment_created': datetime.datetime(2020, 7, 12, 3, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 453266371, 'comment_body': 'Since that would indicate an unexpected problem, I think that is the best approach.', 'comment_created': datetime.datetime(2020, 7, 12, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 453272479, 'comment_body': 'Made the changes accordingly. Please re-review.', 'comment_created': datetime.datetime(2020, 7, 12, 6, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 453689412, 'comment_body': '@PRITI1999 CI does not pass.  Please make it pass before requesting a review.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454160371, 'comment_body': 'I apologize. CI succeeds now.', 'comment_created': datetime.datetime(2020, 7, 14, 7, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'PRITI1999', 'type': 'User'}, {'comment_id': 454390080, 'comment_body': 'Minor: end sentences with punctuation (in this case, a period).', 'comment_created': datetime.datetime(2020, 7, 14, 14, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454390727, 'comment_body': 'It is usually not necessary to state the type, which is already stated nearby in the source code and in the generated API documentation.', 'comment_created': datetime.datetime(2020, 7, 14, 14, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454390777, 'comment_body': 'Why is this variable needed?', 'comment_created': datetime.datetime(2020, 7, 14, 14, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454391343, 'comment_body': 'If you use ""Extract"", say from where.  Even better, I would leave implementation details like that out of the specification and just use ""Returns"".', 'comment_created': datetime.datetime(2020, 7, 14, 14, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454392955, 'comment_body': 'This is an odd choice of exception.  Why not use `BugInCF`?', 'comment_created': datetime.datetime(2020, 7, 14, 14, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454395359, 'comment_body': 'This line can be combined with the following one.', 'comment_created': datetime.datetime(2020, 7, 14, 14, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454396624, 'comment_body': 'This user-visible change needs to be documented in the manual and in the changelog.', 'comment_created': datetime.datetime(2020, 7, 14, 14, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454397066, 'comment_body': 'Does this work?  It crashed for me when I tried to run it, because neither of the two files is not available in `checker.jar`.', 'comment_created': datetime.datetime(2020, 7, 14, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}, {'comment_id': 454429986, 'comment_body': 'You could use `git.properties` instead.  See method `printGitProperties`.', 'comment_created': datetime.datetime(2020, 7, 14, 15, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mernst', 'type': 'User'}]","[{'commit_sha': '5624d27a78b4f001b1e3c221bef373f66cb22a7d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3f119dc3ec24e5e2ce6ccaedde461e283ec2100', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6839fac8660cc2b560cb392db870deb899868be', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22e5c0be1420e9c47aff8590ac768edfd7c1f8fb', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d3c46f11d6bab107717c6332ce19002f95a25d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26c69df089121a2dfbaad646eb5e1996424bd8bb', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a8331657649890bf7ec2261ffd3c18a965ea06e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74985e7e998116e309b7dec37e15d21085d8831e', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6584fd3ed8b32d84968056488a498bc45d6736', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cef0d29f42f4922c1638860005d0bd4515b8d449', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5addc49a4c65931242a9486fcdd47e857889b9fd', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d29f7df1f6de39ea106050a247b63eedf3b03ef', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a4d3f6b9de85500fbce5a58ffb5eed3f339612', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8655852730026b5a5869a2641af92c100c653d4', 'committer_username': 'mernst', 'committer_name': 'Michael Ernst', 'committer_email': None, 'commit_date': datetime.datetime(2009, 8, 30, 4, 1, 11, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25
458839367,Improve UserError message in createActiveOptions(),The `UserError` thrown in `createActiveOptions()` of `SourceChecker.java` displays the number of `OPTION_SEPARATOR` given as the number of strings obtained on splitting. Generally this value would be 1 less than the number of strings.  ,True,3530,https://api.github.com/repos/typetools/checker-framework/pulls/3530,https://github.com/typetools/checker-framework/pull/3530,closed,1,1,1,4,2,0,0,0,[],2020-07-30 03:11:41+00:00,2020-07-31 00:46:18+00:00,77677.0,21:34:37,[],"[{'commit_sha': '5624d27a78b4f001b1e3c221bef373f66cb22a7d', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3723b511d80ffc2424695f00d5765514782a92e4', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29bd19b4fa3bb917bd3ed8d432d8d88273463379', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50107a2e6e5d4aa27fcbc0f7be15a5c5a412a68', 'committer_username': 'PRITI1999', 'committer_name': 'Priti Chattopadhyay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 11, 55, 54, tzinfo=datetime.timezone.utc)}]",Priti Chattopadhyay,35490584,,User,,32,,7,25

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
267058118,gson,typetools/gson,,1,0,2,112,1485,3,14,3,"[{'id': 441835197, 'number': 3, 'closed': None, 'created': datetime.datetime(2020, 6, 30, 7, 23, 38, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 159, 'deletions': 35, 'state': 'open'}, {'id': 436436009, 'number': 2, 'closed': None, 'created': datetime.datetime(2020, 6, 18, 12, 21, 46, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 504, 'deletions': 206, 'state': 'open'}, {'id': 428957914, 'number': 1, 'closed': None, 'created': datetime.datetime(2020, 6, 6, 3, 52, 24, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 659, 'deletions': 362, 'state': 'open'}]"
203821596,jdk,typetools/jdk,Java,30,3,4,1510,65134,4,1,4,"[{'id': 471374607, 'number': 79, 'closed': datetime.datetime(2020, 8, 22, 15, 9, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 4, 45, 20, tzinfo=datetime.timezone.utc), 'time_taken': 123831.0, 'time_delta': '1 day, 10:23:51', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 464359099, 'number': 77, 'closed': datetime.datetime(2020, 8, 7, 14, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 2, 51, 21, tzinfo=datetime.timezone.utc), 'time_taken': 41588.0, 'time_delta': '11:33:08', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 441197496, 'number': 61, 'closed': datetime.datetime(2020, 7, 26, 3, 0, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 5, 6, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2325219.0, 'time_delta': '26 days, 21:53:39', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 438954210, 'number': 60, 'closed': datetime.datetime(2020, 7, 26, 4, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 4, 31, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2764220.0, 'time_delta': '31 days, 23:50:20', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 388143276, 'number': 35, 'closed': datetime.datetime(2020, 7, 29, 20, 53, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 4, 4, tzinfo=datetime.timezone.utc), 'time_taken': 11897348.0, 'time_delta': '137 days, 16:49:08', 'additions': 28, 'deletions': 24, 'state': 'closed'}]"
38488726,checker-framework,typetools/checker-framework,Java,350,1010,42,168,18983,375,4,18,"[{'id': 469892388, 'number': 3602, 'closed': datetime.datetime(2020, 12, 21, 18, 36, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 3, 7, 14, tzinfo=datetime.timezone.utc), 'time_taken': 10769382.0, 'time_delta': '124 days, 15:29:42', 'additions': 108, 'deletions': 12, 'state': 'closed'}, {'id': 468250150, 'number': 3596, 'closed': datetime.datetime(2020, 9, 11, 20, 51, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 2, 49, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2397728.0, 'time_delta': '27 days, 18:02:08', 'additions': 131, 'deletions': 46, 'state': 'closed'}, {'id': 463732595, 'number': 3563, 'closed': datetime.datetime(2020, 9, 11, 19, 39, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 1, 55, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3174262.0, 'time_delta': '36 days, 17:44:22', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 458839367, 'number': 3530, 'closed': datetime.datetime(2020, 7, 31, 0, 46, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 3, 11, 41, tzinfo=datetime.timezone.utc), 'time_taken': 77677.0, 'time_delta': '21:34:37', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 458407399, 'number': 3524, 'closed': datetime.datetime(2020, 8, 3, 14, 57, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 12, 29, 43, tzinfo=datetime.timezone.utc), 'time_taken': 440839.0, 'time_delta': '5 days, 2:27:19', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 456037728, 'number': 3502, 'closed': datetime.datetime(2020, 7, 24, 22, 22, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 2, 10, 32, tzinfo=datetime.timezone.utc), 'time_taken': 72725.0, 'time_delta': '20:12:05', 'additions': 12, 'deletions': 2, 'state': 'closed'}, {'id': 447745505, 'number': 3464, 'closed': datetime.datetime(2020, 7, 20, 22, 51, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 9, 30, 25, tzinfo=datetime.timezone.utc), 'time_taken': 825678.0, 'time_delta': '9 days, 13:21:18', 'additions': 25, 'deletions': 0, 'state': 'closed'}]"
