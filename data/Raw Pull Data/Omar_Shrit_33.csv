pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
434896137,CLI11,"This pull request contains cherry-picked commits from #2415 in order to realize the transition from boost program option to CLI11.
",True,2459,https://api.github.com/repos/mlpack/mlpack/pulls/2459,https://github.com/mlpack/mlpack/pull/2459,closed,13233,4416,270,184,52,121,2,0,"[{'name': 'c: build system'}, {'name': 'c: core'}]",2020-06-16 00:13:11+00:00,2020-07-14 23:50:22+00:00,2504231.0,"28 days, 23:37:11","[{'comment_id': 443074308, 'comment_body': 'Probably no need to include these changes. :+1:', 'comment_created': datetime.datetime(2020, 6, 19, 23, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443074333, 'comment_body': 'I think this needs to be added back in.', 'comment_created': datetime.datetime(2020, 6, 19, 23, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443074414, 'comment_body': 'This is related to cereal, so we should remove it from this PR.', 'comment_created': datetime.datetime(2020, 6, 19, 23, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443074500, 'comment_body': ""I don't think the `CMAKE_CROSSCOMPILING` check is necessary now."", 'comment_created': datetime.datetime(2020, 6, 19, 23, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443074612, 'comment_body': ""Should we avoid this and instead use the version that's directly in the repository like in #2465?  Personally I have no problem with it either way, but if we go with the #2465 approach, we can remove the CMake configuration changes here."", 'comment_created': datetime.datetime(2020, 6, 19, 23, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443074721, 'comment_body': 'We should still call it `BINDING_TYPE_CLI`, in my opinion. :+1:', 'comment_created': datetime.datetime(2020, 6, 19, 23, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443074752, 'comment_body': '```suggestion\r\n * Utility functions to add options to CLI11 based on their type.\r\n```\r\n\r\nThis can be reflowed. :)', 'comment_created': datetime.datetime(2020, 6, 19, 23, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443074967, 'comment_body': 'I think we can still leave it as namespace `cli` since the CLI11 namespace is `CLI`; so there should be no collision.', 'comment_created': datetime.datetime(2020, 6, 19, 23, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443075063, 'comment_body': 'This is formatted a little strangely; maybe you can make it follow the style guide?', 'comment_created': datetime.datetime(2020, 6, 19, 23, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443075121, 'comment_body': 'You could update the comment here; `multitoken()` is no longer accurate.', 'comment_created': datetime.datetime(2020, 6, 19, 23, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443075185, 'comment_body': ""Also, if this overload does the same thing as when `T` isn't a `std::vector`, the two could be merged. :+1:"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443075288, 'comment_body': 'This too maybe should stay `CLIOption`. :+1:', 'comment_created': datetime.datetime(2020, 6, 19, 23, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443075335, 'comment_body': 'Could you fix the formatting on this wrapped line please?  It should be indented twice. :+1:', 'comment_created': datetime.datetime(2020, 6, 19, 23, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443075767, 'comment_body': ""Now it is clear that we do need to rename `mlpack::core::CLI`, but I'm not sure if `CMD` is the right name to use, since it is used for all binding types.  Maybe a better name would be `IO`?  (Amusingly, that was the original name of the `CLI` back in ~2011-2013.)"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443076065, 'comment_body': ""I think `SetParam` was used only during the process of parsing with `boost::program_options`, and the lambdas that you are now passing to CLI11 probably mean that `SetParam` isn't used anymore.  Do you think you could check to see if there are any other uses, and if not, maybe you could remove that function entirely?"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443076274, 'comment_body': ""Just wanted to put a comment here, let's make sure that before merge we find out if `MapParameterName` is still necessary. :+1:"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443076335, 'comment_body': 'Do you think you could update the comments for accuracy too?', 'comment_created': datetime.datetime(2020, 6, 19, 23, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443076447, 'comment_body': '```suggestion\r\n    CMD::GetSingleton().functionMap[d.tname][""AddToPO""](d, NULL, (void*) &app);\r\n```\r\nIt fits on one line. :)', 'comment_created': datetime.datetime(2020, 6, 19, 23, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443076954, 'comment_body': 'Once we change it to its final name, we should actually rename the file with git too. :)', 'comment_created': datetime.datetime(2020, 6, 19, 23, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443077083, 'comment_body': ""Wow!  This comment was written in 2009 and hasn't changed.  Here's a more accurate suggestion if you don't mind updating it while we're at it:\r\n```suggestion\r\n * This file implements the CMD subsystem which is a global singleton\r\n * intended to handle parameter passing for different binding types.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443077567, 'comment_body': 'Looks like a bad regex here---would you mind fixing it?', 'comment_created': datetime.datetime(2020, 6, 19, 23, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443077698, 'comment_body': ""```suggestion\r\n * A binding to load and save a image dataset.\r\n```\r\nI think the comment was a little inaccurate to begin with, so maybe we can make it better while we're at it. :)"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443077742, 'comment_body': ""```suggestion\r\n * A binding to binarize a dataset.\r\n```\r\nHere's another one we can improve too. :)"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443077770, 'comment_body': '```suggestion\r\n * Descriptive Statistics Class and binding.\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 23, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443077852, 'comment_body': '```suggestion\r\n * A binding to scale a dataset.\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 23, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443077909, 'comment_body': '```suggestion\r\n * A binding to split a dataset.\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 23, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443078008, 'comment_body': ""Here's another bad regex replacement. :)"", 'comment_created': datetime.datetime(2020, 6, 19, 23, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443078204, 'comment_body': 'We can rename this file in git too when we choose a final name for `CLI`.', 'comment_created': datetime.datetime(2020, 6, 19, 23, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443078937, 'comment_body': ""I don't think Github will let me comment at exactly the right place, but we can now remove `program_options` from the link dependencies throughout the CMake configuration."", 'comment_created': datetime.datetime(2020, 6, 19, 23, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443124393, 'comment_body': 'Yes, of course, this change is old, it was just in case to be able to compile.', 'comment_created': datetime.datetime(2020, 6, 20, 11, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443124570, 'comment_body': 'Agree `IO` seems to be a better option.\r\nHopping not create a bigger mess with regexp :+1: ', 'comment_created': datetime.datetime(2020, 6, 20, 11, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443124626, 'comment_body': 'Actually, I thought about it, but I was afraid to remove a lot of stuff before making it working.', 'comment_created': datetime.datetime(2020, 6, 20, 11, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443124729, 'comment_body': 'I will rename everything back to `IO` even file name.', 'comment_created': datetime.datetime(2020, 6, 20, 11, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443124873, 'comment_body': 'Of course, I am just wondering why it is called `FUNCTCLIN` at the first place?', 'comment_created': datetime.datetime(2020, 6, 20, 11, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443131803, 'comment_body': 'It is still used when generating python code in `print_input_processing.hpp`\r\nI am not sure why it is used in Python and Julia, but it is still used there.\r\n', 'comment_created': datetime.datetime(2020, 6, 20, 13, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443134570, 'comment_body': '@rcurtin if these two can be merged, there would be no need for SFINAE since there will be no failure in substitution, what do you think?', 'comment_created': datetime.datetime(2020, 6, 20, 14, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443138011, 'comment_body': ""Heh, good point; that's probably because a regex was used to change `IO` to `CLI` many years ago and this was missed..."", 'comment_created': datetime.datetime(2020, 6, 20, 15, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443232945, 'comment_body': ""```suggestion\r\n# Unfortunately this configuration variable is necessary and will need to be\r\n# updated as time goes on and new versions are released.\r\n```\r\nI don't see a reason to remove the space here. :)"", 'comment_created': datetime.datetime(2020, 6, 21, 15, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443232967, 'comment_body': '```suggestion\r\n      unit_test_framework\r\n      serialization\r\n```\r\nJust a spacing fix.', 'comment_created': datetime.datetime(2020, 6, 21, 15, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443232994, 'comment_body': '```suggestion\r\n```\r\nNo need for a newline here in my opinion.', 'comment_created': datetime.datetime(2020, 6, 21, 15, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443233003, 'comment_body': '```suggestion\r\n```\r\nNo need for a double newline. :)', 'comment_created': datetime.datetime(2020, 6, 21, 15, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443233077, 'comment_body': '```suggestion\r\n#ifndef MLPACK_BINDINGS_CLI_ADD_TO_PO_HPP\r\n#define MLPACK_BINDINGS_CLI_ADD_TO_PO_HPP\r\n```\r\nThis header include guard should still be `CLI` (to match the filename). :+1:', 'comment_created': datetime.datetime(2020, 6, 21, 15, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443233114, 'comment_body': 'The namespace is still `cmd`; can we change it back to `cli`?', 'comment_created': datetime.datetime(2020, 6, 21, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443233263, 'comment_body': ""```suggestion\r\n      [&param](const T& value)\r\n      {\r\n       param.value = value;\r\n       param.wasPassed = true;\r\n      }, \r\n      param.desc.c_str());\r\n```\r\nThanks for restyling this; these are wrapped lines, though, so we should indent them twice.  Sorry to be so pedantic but I think it's important that we match style throughout the repository.  See also https://github.com/mlpack/mlpack/wiki/DesignGuidelines#style-guidelines"", 'comment_created': datetime.datetime(2020, 6, 21, 16, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443233784, 'comment_body': ""> @rcurtin if these two can be merged, there would be no need for SFINAE since there will be no failure in substitution, what do you think?\r\n\r\nI can't seem to comment on that thread while writing a new review, but I agree; perhaps we can combine everything into the bottom `AddToPO(util::ParamData&, const void*, void*)` function for simplicity. :+1:"", 'comment_created': datetime.datetime(2020, 6, 21, 16, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443233844, 'comment_body': 'I think maybe a lot of the header guards will need to be fixed to use `CLI`. :+1:', 'comment_created': datetime.datetime(2020, 6, 21, 16, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443233876, 'comment_body': '```suggestion\r\nclass CLIOption\r\n```\r\nIn this directory we are considering the command-line (CLI) bindings, not the `IO` class for managing parameters, so we should call this `CLIOption`. :+1:', 'comment_created': datetime.datetime(2020, 6, 21, 16, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443234143, 'comment_body': ""For some reason I can't comment on the existing thread.\r\n\r\n> It is still used when generating python code in print_input_processing.hpp\r\nI am not sure why it is used in Python and Julia, but it is still used there.\r\n\r\nYeah, I just meant from the CLI bindings; I think it is safe to remove them only from there. :+1:"", 'comment_created': datetime.datetime(2020, 6, 21, 16, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443234745, 'comment_body': ""```suggestion\r\n  std::map<std::string, util::ParamData>& parameters = IO::Parameters();\r\n```\r\nThis fits on one line too; maybe if you haven't already done it it would be good to set your editor's number of columns to 80?  It doesn't hurt to have lines that are too short, but it's probably good to try and maximize the length when we can. :+1:"", 'comment_created': datetime.datetime(2020, 6, 21, 16, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443234859, 'comment_body': 'We should probably rename this file too. :+1:', 'comment_created': datetime.datetime(2020, 6, 21, 16, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443234883, 'comment_body': 'This file should probably be renamed too. :+1:', 'comment_created': datetime.datetime(2020, 6, 21, 16, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443234936, 'comment_body': ""I haven't found all the filenames that need to change, but I've found a few and labeled them.  Do you think you could take a look through and handle any `cli` -> `io` filename changes that are needed?"", 'comment_created': datetime.datetime(2020, 6, 21, 16, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443506005, 'comment_body': 'I am very sorry for this but I did not find anything related to lamda in the StyleGuidline,', 'comment_created': datetime.datetime(2020, 6, 22, 11, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443506682, 'comment_body': 'Agreed,', 'comment_created': datetime.datetime(2020, 6, 22, 11, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443507138, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 6, 22, 11, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 443889021, 'comment_body': '```suggestion\r\n        ""-"" + std::string(1, alias[0]) + "",--"" + cliName : ""--"" + cliName;\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 0, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 443889335, 'comment_body': '```suggestion\r\n    IO::GetSingleton().functionMap[d.tname][""AddToPO""](d, NULL, (void*) &app);\r\n```\r\nLooks like the main compile issues past this point are just that the mlpack object `CLI` needs to be renamed in this directory (and maybe the other directories). :+1:', 'comment_created': datetime.datetime(2020, 6, 23, 0, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445206400, 'comment_body': '@rcurtin I have refactored these functions as follows. I had to use `if constexpr` in order to make it compile (which is only available in C++17), otherwise we will have to keep the two functions as before.\r\nI had referenced to this solution [here](https://stackoverflow.com/questions/48649953/stdis-same-not-working-with-bool) since I got similar errors.\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 22, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 445936293, 'comment_body': ""Should we go with just `<CLI11/CLI11.hpp>` here and set `include_directories()` right in the CMake configuration? I'd probably do that but I'm not sure if I've overlooked any ramifications of that decision."", 'comment_created': datetime.datetime(2020, 6, 26, 2, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445938230, 'comment_body': ""We should avoid a `using namespace` in a header file; if we do that, then this declaration applies automatically in every file that includes this file too, which is something we should avoid.  For this particular file, I doubt that a user would ever include it and it's only included from one place, but we should still avoid it anyway. :) We can just use the explicit namespace name in each usage."", 'comment_created': datetime.datetime(2020, 6, 26, 2, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445938724, 'comment_body': ""I know this is *super* pedantic but the spacing is off here---it's indented 6 spaces but should be 4. I'd fix it because I feel bad being so pedantic but I'm using a phone to review this (which is basically on fire at this point, the PR is too big :)) so I don't have easy access to the suggestion functionality."", 'comment_created': datetime.datetime(2020, 6, 26, 2, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445938954, 'comment_body': 'We should avoid the `using namespace` here too. :+1:', 'comment_created': datetime.datetime(2020, 6, 26, 2, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445939496, 'comment_body': 'I hope you can accept my apology for not using C++ foreach loops even though they were available at the time I wrote this code. :-D', 'comment_created': datetime.datetime(2020, 6, 26, 2, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445940021, 'comment_body': ""We should fix the tabbing here. :+1: (I'll provide a suggestion tomorrow morning unless you beat me to it)"", 'comment_created': datetime.datetime(2020, 6, 26, 2, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445940991, 'comment_body': 'We actually should change the name of the module (and file) too.', 'comment_created': datetime.datetime(2020, 6, 26, 2, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 445942820, 'comment_body': 'Weird! I wonder why this was included here? I wonder if this change will unexpectedly significantly improve compilation time? I know the boost `program_options` headers are quite large.', 'comment_created': datetime.datetime(2020, 6, 26, 2, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 446141005, 'comment_body': '```suggestion\r\n  app.add_option_function<T>(cliName.c_str(),\r\n      [&param](const T& value)\r\n      {\r\n        param.value = value;\r\n        param.wasPassed = true;\r\n      },\r\n      param.desc.c_str());\r\n```\r\nOk, there we go, much easier from a computer. :)', 'comment_created': datetime.datetime(2020, 6, 26, 12, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 446141086, 'comment_body': 'I agree with that, it was just here for no obvious reason', 'comment_created': datetime.datetime(2020, 6, 26, 12, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 446141982, 'comment_body': 'Actually, I do think that this will remain necessary.  The functionality of `MapParameterName` is to turn the argument names associated with a matrix or model parameter into ones with `_file` appended.  So, e.g., if you specify `PARAM_MATRIX(""input"", ...)`, the CLI bindings actually need to have the argument name `input_file` since it\'s the path to the file that\'s being input.  That\'s the same even when we change from boost::program_options to CLI11, so we can probably leave it here.', 'comment_created': datetime.datetime(2020, 6, 26, 12, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 446142288, 'comment_body': '```suggestion\r\nvoid PrintDefnOutput(util::ParamData& d,\r\n                     const void* /* input */,\r\n                     void* /* output */)\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 12, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 446142468, 'comment_body': '```suggestion\r\nvoid PrintDefnInput(util::ParamData& d,\r\n                     const void* /* input */,\r\n                     void* /* output */)\r\n```\r\nMight as well fix this one too. :)', 'comment_created': datetime.datetime(2020, 6, 26, 12, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 446145200, 'comment_body': ""We probably should put this in `src/mlpack/bindings/cli/third_party/` (or something like that, just under the `src/mlpack/bindings/cli/` directory), since that's the only place that it's actually used."", 'comment_created': datetime.datetime(2020, 6, 26, 12, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 446145664, 'comment_body': 'I will move it there immediately ', 'comment_created': datetime.datetime(2020, 6, 26, 12, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 446660522, 'comment_body': ""I think here is our issue.  I took a look at the backtrace, and it seems like `data::Load()` is being called with a filename that is (somehow) an invalid string.  `data::Load()` is going to be called, in this context, from inside `GetParam<N>()`.  This code seems to work for when `N` is `arma::mat`, but the failing case we have is when `N` is actually a categorical matrix (i.e. `N = std::tuple<mlpack::data::DatasetInfo, arma::mat>`).\r\n\r\nI think the reason is that, in this particular code, `T` in this function is `std::string` (because `ParameterType<typename std::remove_pointer<std::tuple<mlpack::data::DatasetInfo, arma::mat>>>` is `std::string`).  So that means we are assigning `value` (of type `std::string`) to `param.value`... but later in `GetParam<>`, we are expecting that `param.value` holds a `std::tuple<std::tuple<mlpack::data::DatasetInfo, arma::mat>, std::string>` (i.e. see line 84 of `get_param.hpp`.\r\n\r\nSo maybe I was wrong earlier and what we actually have to do is have different overloads for `AddToPO()` when `T` in the bottom-most overload of `AddToPO()` is `arma::mat` or `std::tuple<mlpack::data::DatasetInfo, arma::mat>`, and in those cases, we can call `GetRawParam<T>(d) = value`.\r\n\r\nThis is pretty complex infrastructure so let me know if there's anything else I can clarify about what I wrote.  It might take a little while of reading through the code to understand everything I wrote here. :+1:"", 'comment_created': datetime.datetime(2020, 6, 28, 14, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449654160, 'comment_body': '```suggestion\r\n\r\n  * Replace boost program_options dependency with CLI11 (#2459).\r\n```', 'comment_created': datetime.datetime(2020, 7, 3, 16, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449654477, 'comment_body': ""`typename ParameterType<typename std::remove_pointer<T>::type>::type` is not the same as the actual type of the option, so the SFINAE checks in the other implementations don't work.  We would just use `T` here, but, actually, for serializable models, we get `T` as a pointer, and SFINAE is easier to do without pointers, so use `typename std::remove_pointer<T>::type` here, as is done in `set_param.hpp`. :+1:"", 'comment_created': datetime.datetime(2020, 7, 3, 16, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449655228, 'comment_body': 'One additional thought: `AddToPO` actually means ""add to program options"", so we should change this to, perhaps `AddToCLI11()` (and update the filename accordingly). :+1:', 'comment_created': datetime.datetime(2020, 7, 3, 16, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449656186, 'comment_body': ""So, let's assume you've made the change below so that `T` is passed directly from the bottom overload to here.  This overload applies when `T` is `std::tuple<mlpack::data::DatasetInfo, arma::mat>`.  But like I explained on the call, the `boost::any` of `param.value` is not going to hold a `std::tuple<mlpack::data::DatasetInfo, arma::mat>`; we also have to hold the filename, so it will *actually* hold a `std::tuple<std::tuple<mlpack::data::DatasetInfo, arma::mat>, std::string>`, where that last `std::string` is holding the filename of the matrix.  Therefore, we have to account for that in this overload.  Thus, the lambda here should be:\r\n\r\n```\r\napp.add_option_function<T>(cliName.c_str(),\r\n    [&param](const T& value)\r\n    {\r\n      typedef std::tuple<T, typename ParameterType<T>::type> TupleType;\r\n      TupleType& tuple = *boost::any_cast<TupleType>(&param.value);\r\n      std::get<1>(tuple) = boost::any_cast<std::string>(value);\r\n      param.wasPassed = true;\r\n    },\r\n    param.desc.c_str());\r\n```\r\n\r\nNote that the inner implementation I am using there is directly taken from `set_param.hpp`. :+1:"", 'comment_created': datetime.datetime(2020, 7, 3, 16, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449656581, 'comment_body': 'This one applies for a serializable model, so if I look at the `SetParam()` implementation there, we can adapt this in a similar way:\r\n\r\n```\r\n  app.add_option_function<T>(cliName.c_str(),\r\n      [&param](const T& value)\r\n      {\r\n        typedef std::tuple<T*, typename ParameterType<T>::type> TupleType;\r\n        TupleType& tuple = *boost::any_cast<TupleType>(&param.value);\r\n        std::get<1>(tuple) = boost::any_cast<std::string>(value);\r\n      },\r\n      param.desc.c_str());\r\n```\r\n\r\nNote that we hold a `T*` here, because we stripped the pointer off in the top-level call with the `std::remove_pointer`.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449657097, 'comment_body': 'This overload is fine---it applies when `T` is bool, for which this implementation is already correct.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449657293, 'comment_body': ""I don't see any implementations for the case when `arma::is_arma_type<T>` is true or when all four of these checks are false.  I think that we need to add those.  Correct me if I overlooked something."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449802694, 'comment_body': ""```suggestion\r\n  AddToCLI11<typename std::remove_pointer<T>::type>(\r\n```\r\nI *think* that this should work.  But in your comment you mentioned that maybe it doesn't?"", 'comment_created': datetime.datetime(2020, 7, 4, 20, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449802768, 'comment_body': 'No, it did not compile\r\n', 'comment_created': datetime.datetime(2020, 7, 4, 20, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 449802789, 'comment_body': ""```suggestion\r\n        TupleType& tuple = *boost::any_cast<TupleType*>(&param.value);\r\n```\r\nI'm not sure, I think this implementation might be off.  Either the change above will work (I think) or I suppose we could avoid the `&param.value` and just use `param.value`.  However I seem to remember having problems unless I used the `boost::any_cast<>` calls with pointers."", 'comment_created': datetime.datetime(2020, 7, 4, 20, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449887892, 'comment_body': 'I was looking at the Windows build failure.  I am not sure if this is the problem, but I did notice that in this function we forgot to set the parameter as `passed`.  If you add this line to the lambda I think it should help:\r\n\r\n```\r\nparam.wasPassed = true;\r\n```\r\n\r\nHopefully it will fix the Windows issue too.', 'comment_created': datetime.datetime(2020, 7, 5, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 449888721, 'comment_body': 'Exactly, only windows test are failing', 'comment_created': datetime.datetime(2020, 7, 5, 15, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 450519479, 'comment_body': '```suggestion\r\n      Log::Fatal << ""An option is defined multiple times: "" \r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 22, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450520088, 'comment_body': 'Also we should catch `OptionNotFound`:\r\n\r\n```\r\n$ bin/mlpack_pca\r\nterminate called after throwing an instance of \'CLI::OptionNotFound\'\r\n  what():  input_file not found\r\nAborted\r\n```\r\n\r\nI think this could work:\r\n\r\n```suggestion\r\n    }\r\n    catch (const CLI::OptionNotFound& onf)\r\n    {\r\n      Log::Fatal << ""Required option --"" << app.exit(onf) << ""!"" << std::endl;\r\n    }\r\n```\r\n(I think that will line up the `--` with the option name correctly...)', 'comment_created': datetime.datetime(2020, 7, 6, 22, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450839777, 'comment_body': ""```suggestion\r\n  for (auto& it : parameters)\r\n```\r\nThis is why the Windows build fails.  When we do `auto it : parameters`, this does not use references---it creates a copy of each element in `parameters`.  Thus when we push `&data` onto the map `memoryAddresses`, that memory address goes out of scope as soon as we move on to the next loop iteration.  Therefore in the next loop, when we iterate over `memoryAddresses`, all the addresses are invalid.  If you want to see, take a look at the build logs and the changes in #2505.  If we instead use `auto& it : parameters`, this uses a reference to each element in `parameters` instead of making a copy, and the code works fine.\r\n\r\nI'll go throughout and make suggestions to replace the `auto it` pattern with `auto& it`. :+1:"", 'comment_created': datetime.datetime(2020, 7, 7, 12, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450839903, 'comment_body': '```suggestion\r\n    for (auto& it2 : IO::GetSingleton().timer.GetAllTimers())\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450839972, 'comment_body': '```suggestion\r\n    for (auto& it : parameters)\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450840070, 'comment_body': '```suggestion\r\n  for (auto& it : parameters)\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450840302, 'comment_body': '```suggestion\r\n  for (auto& it : parameters)\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450840412, 'comment_body': '```suggestion\r\n  for (auto& it : parameters)\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450840540, 'comment_body': '```suggestion\r\n    for (auto& iter : parameters)\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 451885090, 'comment_body': ""I think we can delete this line, but don't feel obligated this is just a cleanup :)\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 7, 8, 23, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'robertohueso', 'type': 'User'}, {'comment_id': 451885182, 'comment_body': 'This line can also be deleted\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 23, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'robertohueso', 'type': 'User'}, {'comment_id': 452192627, 'comment_body': '```suggestion\r\n * @param app A CLI11 object to add parameter to.\r\n```\r\n\r\nTo be consistent with the rest of the codebase, this probably applies to other methods here as well.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 452192888, 'comment_body': 'Should this be `@param An object of util::ParamData.`?', 'comment_created': datetime.datetime(2020, 7, 9, 12, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 452195477, 'comment_body': ""I guess in this case let's remove the extra comment."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 452196730, 'comment_body': '```suggestion\r\n  catch (std::exception& ex)\r\n```\r\n\r\nMinor style fix.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 452264106, 'comment_body': 'Regex probably matched this, we should keep `BUILD_CLI_EXECUTABLES`\r\n```suggestion\r\n - BUILD_CLI_EXECUTABLES=(ON/OFF): compile the mlpack command-line executables\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 14, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'robertohueso', 'type': 'User'}, {'comment_id': 452264596, 'comment_body': 'Yes I think so', 'comment_created': datetime.datetime(2020, 7, 9, 14, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 452373625, 'comment_body': ""Style issue: there's an extra space\r\n\r\n```suggestion\r\nvoid PrintDefnInput(util::ParamData& d,\r\n                    const void* /* input */,\r\n                    void* /* output */)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 17, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'robertohueso', 'type': 'User'}, {'comment_id': 452393216, 'comment_body': 'Legacy define, we should keep consistency\r\n\r\n```suggestion\r\n#ifndef MLPACK_BINDINGS_CLI_ADD_TO_CLI11_HPP\r\n#define MLPACK_BINDINGS_CLI_ADD_TO_CLI11_HPP\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 17, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'robertohueso', 'type': 'User'}, {'comment_id': 452567761, 'comment_body': '```suggestion\r\n    rann->SingleSampleLimit() = IO::GetParam<int>(""single_sample_limit"");\r\n```\r\n@shrit should be an easy fix, I think it was just a bad merge. :) #2442 corrected the type of `single_sample_limit`, but my guess is that git just overwrote that change when you merged the branch in. :+1:', 'comment_created': datetime.datetime(2020, 7, 10, 0, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 452692536, 'comment_body': 'I agree I had bad merged since it did not notice the change from double to int', 'comment_created': datetime.datetime(2020, 7, 10, 8, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 453156882, 'comment_body': ':tada: ', 'comment_created': datetime.datetime(2020, 7, 11, 5, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 453376007, 'comment_body': '```suggestion\r\n *\r\n```\r\n\r\nRemove some extra whitespace.', 'comment_created': datetime.datetime(2020, 7, 12, 23, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 453560222, 'comment_body': '```suggestion\r\nset to the value @c BINDING_TYPE_CLI.  This is handled by the CMake macro\r\n```\r\nHi @shrit, I am not sure, but I think so there some more `IO` which are not replaced correctly in `doc/` folder.', 'comment_created': datetime.datetime(2020, 7, 13, 10, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 453588312, 'comment_body': 'Exactly, thanks for the review', 'comment_created': datetime.datetime(2020, 7, 13, 11, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 454035614, 'comment_body': '```suggestion\r\nWhen @c BINDING_TYPE is set to @c BINDING_TYPE_CLI, the following is set in\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 1, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 454035643, 'comment_body': '```suggestion\r\n   mlpack::bindings::cli::CLIOption.\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 1, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 454035775, 'comment_body': 'Maybe we should leave this line here for now?', 'comment_created': datetime.datetime(2020, 7, 14, 1, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 454035845, 'comment_body': '```suggestion\r\n// This definition below means we will only compile for the command line.\r\n#define BINDING_TYPE BINDING_TYPE_CLI\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 1, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 454035959, 'comment_body': '```suggestion\r\n#define BINDING_TYPE BINDING_TYPE_CLI\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 1, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 454035981, 'comment_body': '```suggestion\r\nas the output --neighbors_file and --distances_file for the CLI interface (see\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 1, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 454036017, 'comment_body': '```suggestion\r\nsimilar to the output files --neighbors_file and --distances_file for the CLI\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 1, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 454211387, 'comment_body': 'Of course', 'comment_created': datetime.datetime(2020, 7, 14, 9, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 454223425, 'comment_body': '```suggestion\r\n      - Name: `Boost_SERIALIZATION_LIBRARY_RELEASE`; type `FILEPATH`; value should be `C:/boost/lib64-msvc-14.2/boost_serialization-vc142-mt-x64-1_71.lib`\r\n```\r\nI think so it is a typo.\r\n', 'comment_created': datetime.datetime(2020, 7, 14, 9, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 454224269, 'comment_body': ':+1:  :100: ', 'comment_created': datetime.datetime(2020, 7, 14, 9, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}]","[{'commit_sha': '0f37d374e0a4708f8f5f72ab0f8964afda70a1a7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7e1ee6676b442812f04bec79d9c2b782c37f627', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a7f2ef42c80f39b4b999e7024f1076ca4396c79', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c6c81b77f84a44f89e96f27deb77cc57cc2346', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7335743711fcd1c7bd9ab40097b0dbd0d7fbe0a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bab98493cbdeb6aaaf6b11352f5943f8f2a4b9c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8431d1b71190a46894697f129c7dc9faf62121c9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '334445c1bad9bd967dedf5aee2277ed6ad0e7634', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc14b696a3e535bc80500a66d6ef809ed1ce9df1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d422477e4466a38126ad4d87e9a5000f3f9fb3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d058612b5b675e60d667ac0878468f35661d75', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f2afcf520f1d3a2a3764f557c13bf008927d5e3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a734e7d31987cefe6dbc9c2f9ac99e55d07fcce7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7287d3bf0b61a44783217ae19cf75c5295bea694', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799cdb4e6af1b3901c0a6e0b9a00c27a5b2881cb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976dd9b8afd2cca22d008b4952c8c75f1ac3da74', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42cc09bd2e3841caddf3e94c2ca273119aff871d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8756033f6b7cc6b0a023d183e4a45561f68de8b5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57bb69d1a59f2f04a809d576f936f991c11a4b43', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4198eb468e266b9bcf7517360da548b62bad482', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a1de41f176895578854a30070ff39b6f1360abe', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb13d9bc250d93dd25e3b9bb02b64cd69ee1a42', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '099e9db51189df45d62b82a7b28f6c7eefb09c32', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3cad5046520438d865e60f13353472024580704', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a43e1a449b086eff1d5c8fdc54901f968fc67b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a215cd4e9a6e119e918ddc89fae34cac43f53e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b783bf4bea8c763be302fc02b78ff813fca56b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e54489f47e648cf6f0b715463d21ddf8f7535484', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2952c968bab21854986e8a458a67095a9d305e51', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5b6d5eac1460d33b772327ff0da3cb4a4627b7e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6330c384476a7010350beb935a62a354753f3e6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe0e0c905f42e07a62639638c423e99626bb101f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33aa06643abf336cd8f95ede0fb14aebf57e3ce5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b431159df75fcccbb07ddba38b2f9d6ac3a25bb1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dcccae9976f35f675256bee1397392adc6b1e0a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d87890ae5e7764a8d48c2052ee9881ad140f8a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af03916156a5e4eb24c9bb2a802ae4c62190cf9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2425b1c8b2fa6bd0ceeb2f5bb4b02ae91cd0a69d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71d264a01919c7c131206c935407a93eb9e0c30a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3912e3e39d767311c6827f8a43b3f1b40a80776d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '486734ebc862c44b8d0a45896a72653f8935cf7c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '355aad42a0c735f938ce27ad11239cccc41a05ac', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd877f38ae3edae1b7545047e55ea0cc638bd6760', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d5473f2d6f22fe91d401ba2ea6b53597b2027c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68448e4181e3b7b546ca71c129733ab4129f0ac8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4e86e0f17c1c127a63f5f6a99436d9a6913afb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd602d31fc84025e0591d9f7fc1705ff3b886fe', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93fa0b805b12583de1b9f1368c15c19186772201', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b893220f6fbe23d1506ccd65858d0947507c3ef7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e251a8f70f3d7f2e6071b452a58fca2cf3aeda', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '507fa9c00453dbbee9666a7d74b92776b80bc43a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a5b12ff2d32542295c7d84200da905f68c679d1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b3347f57f231ad27fc74faa89c7aac6bf2d0067', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfd5359d48c6f38762b437c735deccd5f6f299e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feece68b79d1be55635842f7dfe2b0f2a39315ec', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ce14da9b6d52299ab58a288846cba36eb4a387', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28b6f2462cb7e2fd786ff7eb5cba9fe36266320', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '377fc0c71eae83db397cb80f857e213340af7c98', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75f62c3556f119a665e6613882f71346fe28693', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7669eeba897f613e309595b0f8b3cb62ab2cb8d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '398d1dc7d99b233ff067eb71cc75c9f9b7e4c7e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f042e00545ab20ad71040b41255f8ef52f300a3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2785c4d019dec6a8b3e73270243856cedf6326a0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb8d50e2d30b7903dde03b7a542cf979b286c27', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f9a2510481b6892b8cef0e2acead80f96489f5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32dbb6231955d3b6872ede547c21d678697fc0a7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e90513365f411ae9f9bafbeac5d2c3587caf5d1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb39ec1ca964452f2671f6d97e9d60435775895', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11072083c303e4ee90519cf0edadbfba9a6c0ccd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03c5fda503ecb4824a7c42c7a63e12c8d1145e93', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf28d265271feaa5c30fe0209c87af3a587de32', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '755a056e1810ba808991e88d7a12b32a22a34785', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e927e1af5544f3cef1e9cf2b81cd3cdc32fd3b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a26893b3c35a36867b8a745ee42ac64ef490d6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e8acd8502aa1307b8935316d95183d1f327a6a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a31a63a6ed0b6f4a137353a91eb9d24b1654758d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81b6aab7372e95c35615cd4c729b41343c5e1011', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '363367edb5709a9f69729220104229510dec8c40', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917e59698271d50a55db762ab34dd086c6767b34', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c1fb1b92d22db05d5d1362127483fbef3f94dd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c93aeabaf18497bc814c16b4ae5dbb86294c41', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '529732247c3b700344fc8416355111e733749d25', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58cc3fc7a45f0132942a9e43e9cc4d7d0c16281c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b763c35e5fac6a162f257f4c7e3cda700981060', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648dfef32ff3d69c60ae99a650fd81c493f7f305', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c34cd0fff9891497a23553b2034557f66c13da', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f40e7abf65ec2d470a662e3713129a22e59733', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b16ee09bea9d66ae1d826b49d5d76ebb1130fd5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b7e75be1d6f21b69f74a8bc0615470937ebdec1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e149a51d53f6fd5af94c5608b4df265391f940d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '316d8bda01ee47a9bdc64713d36bb31335d5f4b3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d6a67bd2c0c9cb363a41a3304924e665b9632ca', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f6a7fb573c8f00ad4e8875c1cd889d897cc0515', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d532c92e042999c79232003692ee11ffb391d66', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec109c81af99f3692281b9ec430f536db4cfd77c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91f95e595038939534d1a2d01165bb1fe4186d1a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fbd5fa3814f78492a01a22953ab0c938ce93712', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae243feb5cc1c0ba5b7f8174bbc679bbf8314736', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4810774a878d0b7d66f34f4adca7fc9997fbdf41', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0c7e946d8d6df22072e244c1681d7309c0ca2d0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10bf651db55a8d18e5604b1da1a38ddd3520ac00', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce50ab0974a62fdb458a37be48aa34856990c6cf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7c1fb54d03cdd1cac6a7e2c20ef49d4018cec81', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba4273ff3fa11f94bf488de90bfa561788fb3f33', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8949a1ec09a12bdf799c6acae749ffddcf8eb03', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df366deff7692e5c044f34d1f24489b0f860b6d5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5addf0ee92a77c35818abe2f649123d2497a39b0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e049aa6ec4438aa6248af4bc67410187016736ec', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a824aae995855ecb08ec5ab789d01bc2de9ce0a2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3491f6871ace57aa07b01ef82341fc45fc93774', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '247f65f2df4fa8ebb069fdea7c090cdc7fd669b1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d6338cecccac8e2da27381828e8ad066333c97', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f302c391d7b3acbc4c2cc200af7c73d30966353f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798b606ac7c50b9141627b0c72d6bec527c54b80', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1f813345de96321d417863ff171589c355ed241', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '107a3114dc21ace038eb458400e37c79617cb2e2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29f5f2c6d59c86278eab758153de7b94103850a5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27ee3eaf2a0d9354d47d1d588346ea394ba53526', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd7c7a77844b0eac07468df6424c6da1050a6ea4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f442f80333ae355455c91f60aae06f2feb187f5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '503de0f3e9057d542bb0df27ae1e66123f007fcf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '294be94f4bba5e843298e316d00c2908b60fe165', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a56520facdc297343dde1dc364ac435e2088337', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b01ce09bd88794450a9bca4bbc7aa8103a3f53', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bac7e5635c4d4e80576ef0b919d7e2490457a0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f85598ceff2ee74671fe10568001225f1b4ba1ec', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9dc0dd5b9a45484ccc844dab99b7a8cdfd91445', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a11ccd342f65924fc30ff4c7a3657804e77ee6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '062400e4113e2d0981e650aeaa35de768309d895', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99c47e5b2ec292f97ab3fb1247c2abd0d9848c01', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c79eb620f1be2795cca0750a1167e572b4c636', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bd1be3164dd676ca6f26cf03c3ed1c7fd92ca45', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3039acefa6e5f33f39c407176669ba3be52b55ab', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eabcaa8e4444e1ea3430c75ca0de6b6682513b03', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '834053e23be34356203b84c810ef13d528141c3c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1b7ea56ec66e7875be5637267c09dde84880ae', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fbfc6cfd183e79a1c30e58d0837e1c53f89d64', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdcd9e147ec425168370f8ae577920bd4e188953', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '064a36d6d2b1801f78b8da5cb9bd2abe7a5b1083', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84ecc9bd417a6bc4751d95150ed47decc045effc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cdbc5448670ad8ca1b6a5fa57d621d9c69b6b59', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f45e5842fa2e11481b85fd38bcf1072505ee14ea', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd112c2d40ec6d235b561e715d6bb30a9b74fab', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0630e585708d83ad8c907bd92274e5d94fe58340', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23a9545237e11696aa7bdbeb05d48f1ff0df4bb2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b9a6651268a2deeb7186477eebbbd797752ef0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58017f79d6b64940e79d33f47a45260caf22e55d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd10a22349826a4fe54e84ef0074e0dc49747d8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f63167039f252635631b2db4e4b4b4d699cf2f8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a74ec237a044a555f797816490390214b72a534', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda86ffe1a2baa5cfc8c7ace2d3dd1a6885e964a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e3e0e09f181214f2a82365654da78b4cdbaa74c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c10d1f7202a69125a53293434fa805bd645b36a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5819975f601c68db951f583c7dc0efc48c1b5aa1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '567d4ad87ea7fab34d750509c0f47994bd2d1da4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75264e62b040cea15f146e43e0db4ff22ddd0639', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a0b3901efcc919834c230ca2a73d90f72334ded', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e552aaa4785a2479981a94b423e1fbabbc97cc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d188097d5c8b713c506e8ff08de51a47ea1a933', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2676d1899fabf8d41c2415d16548dbe878f2d65a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cffc761eaa871dd8a7ba306ae7935faa58a42142', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1946d07b8aae0ce3095d271d4eba4b5a4c4c58a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64d58c33ebd2961d6877f8692e448932d9c08571', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d59a4c2f8fb4f577d77263a2576c68a882c1bbe', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32d6e42db839a1a4dfb9cac8dae6f6db0733e8a8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7392e3d97ba727fabe2fb883341028cc4286297', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b82e9564c1139bccd92dbb5d829e0251a865d48', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd4dfaae76950b20433e60cca29a6ce58c1a2c7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36812abb07d35b6f5714589363fdf5456652b3b7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6c049566d15924610fbccaa68d97b793b335f0f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6448cd11f0d56ee4be568051ae102ed521558f0f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cbd33fd430e8f8aaa2e3abafb52e89b3af9390f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2feb0e82c29f725629017d827ee02e47d9ccb8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2dfbd73cb80c9ebcf865fe0b04786a39524e48', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a9443867233dc45439dda34533e8ea1971f157', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bca1c8de47f8bfa996f0d4728b6ad784910438dd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e3ae8be561a188f549029fe4e008fcc387a607', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97b9fe6fa1c32ff237e1a46b4b24bd663f2e3d6d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b390cf75ce0400ad8d1e2c94d3244eeca47ebebc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e15fd4b1dd04c071ced5f83d8ff0f60a083b1ab8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610d1dc9bcef41a526ea1275c99363d954c2ed19', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfac57a8d17a9a4f759df520a715e9dbd30134f4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e375cc041896072fc4848f06faabfb41b14342', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f1fd21b1a768b2802ec46f00868608ac2aa494', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}]",Omar Shrit,15039782,omar@shrit.me,User,,38,,79,34
434879119,Cereal,"This pull request contains all commits cherry-picked from #2415 that is related to the transition from boost serialization into cereal.
",True,2458,https://api.github.com/repos/mlpack/mlpack/pulls/2458,https://github.com/mlpack/mlpack/pull/2458,closed,4346,7552,495,584,169,369,2,0,"[{'name': 'c: testing'}, {'name': 'c: core'}]",2020-06-15 23:32:04+00:00,2020-10-29 14:52:38+00:00,11719234.0,"135 days, 15:20:34","[{'comment_id': 441992007, 'comment_body': 'Perhaps this is a good opportunity to rethink the invasive addition of extra functions to the `arma::Mat<eT>` class (ie. beyond the functions that Armadillo already provides).\r\n\r\nAdding `arma::Mat<eT>::serialize()` is a brittle approach anyway: if the user includes the Armadillo header before mlpack headers, this type of live-patching won\'t work. The same applies to `arma::Cube<eT>::serialize()`, `SpMat<eT>::serialize()`, etc.  Furthermore, calling`access::rw()` and `init_cold()` is using internal Armadillo functionality, which is subject to change or removal.\r\n\r\nIt would be safer and more robust to use an external `serialize()` function, which takes `arma::Mat<eT>` as input.  Both Boost and Cereal provide this option:\r\n* Boost has the ""Non Intrusive Version"" in https://www.boost.org/doc/libs/1_73_0/libs/serialization/doc/tutorial.html\r\n* Cereal has the ""External serialize function"": https://uscilab.github.io/cereal/serialization_functions.html\r\n\r\nThere is no need to write directly into internal Armadillo variables and arrays.  Appropriate constructors can be used.\r\n\r\nCC: @rcurtin @zoq \r\n', 'comment_created': datetime.datetime(2020, 6, 18, 6, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 442172713, 'comment_body': 'Agreed, I see this as an opportunity to fix those things as well, no need to modify Armadillo code to get this done nicely.', 'comment_created': datetime.datetime(2020, 6, 18, 11, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 442173239, 'comment_body': ""I wonder why I did it the intrusive way the first time around?  What you've suggested is very clearly better.  Thanks for pointing this out! :+1:"", 'comment_created': datetime.datetime(2020, 6, 18, 12, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450526941, 'comment_body': ""So, in the implementation that you have in `pointer_wrapper.hpp`, it looks like `d.release()` will just return the pointer `localPointer` that's held in `d`.  If `cereal::make_pointer` takes a `T*&` instead of a `T*`, then I think that `d.localPointer` will be exactly equal to `z`, and you could just do this:\r\n\r\n```\r\narchive(cereal::make_pointer(z));\r\n```\r\n\r\nand that would work for both saving and loading.  It would work for loading because the `pointer_wrapper` is holding a reference to the pointer `z`, so when you call `smartPointer.release()`, that should be directly modifying `z`. :+1:"", 'comment_created': datetime.datetime(2020, 7, 6, 23, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450527119, 'comment_body': 'In reference to https://github.com/mlpack/mlpack/pull/2458/files#r450526941, I believe that if you make the change below the idea should work:\r\n\r\n```suggestion\r\nmake_pointer(T*& t)\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 23, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450527292, 'comment_body': 'Then you could simplify here too (I think):\r\n\r\n```suggestion\r\n  return pointer_wrapper<T>(t);\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 23, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450697752, 'comment_body': '@rcurtin. I agree, but I was getting segmentation fault doing when passing the reference pointer. Finally, I resolved that using the `release` function. Maybe I was missing something. I will re-look into it.', 'comment_created': datetime.datetime(2020, 7, 7, 8, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456823552, 'comment_body': 'Personally I think it would be better to use `find_package()` here instead of automatically downloading it.  cereal is available on:\r\n\r\n - debian/ubuntu https://packages.debian.org/stretch/libcereal-dev\r\n - RHEL https://centos.pkgs.org/7/epel-x86_64/cereal-devel-1.2.2-1.el7.noarch.rpm.html (technically that is only available for RHEL7, but I know how to request that it get imported into the RHEL8 repos)\r\n - homebrew https://formulae.brew.sh/formula/cereal\r\n - vcpkg https://github.com/microsoft/vcpkg/tree/master/ports/cereal\r\n - arch https://www.archlinux.org/packages/community/any/cereal/', 'comment_created': datetime.datetime(2020, 7, 18, 20, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824011, 'comment_body': ""@shrit no need to do this if you're still prototyping, but we should make sure we handle this comment before we merge the PR. :+1:"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824066, 'comment_body': ':rocket:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824084, 'comment_body': 'We can come back to this later, but we should document this class before merge. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824122, 'comment_body': '```suggestion\r\n    const T* m_t;\r\n```\r\nThis is really pedantic and makes no difference to the program itself, but for consistency with the rest of mlpack, we typically put the `const` first. :+1:\r\n\r\nAlso, we should avoid using `_`s in variable names, so I might suggest just `array` and `count` for the names of the two members in this class.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824171, 'comment_body': ""```suggestion\r\n    const size_t m_element_count;\r\n```\r\nI think the `std::` isn't needed. :+1:"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824212, 'comment_body': ""```suggestion\r\n#ifndef MLPACK_CORE_CEREAL_ARRAY_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_ARRAY_WRAPPER_HPP\r\n```\r\nI wouldn't want these to accidentally overwrite some header guard from the cereal library, so maybe being more specific is better."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824234, 'comment_body': '```suggestion\r\n  array_wrapper.hpp\r\n  pointer_wrapper.hpp\r\n```\r\nI think that is needed here too?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825624, 'comment_body': 'I think we can remove this file now since the proof-of-concept seems to work. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825651, 'comment_body': '```suggestion\r\n#ifndef MLPACK_CORE_CEREAL_PONTER_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_PONTER_WRAPPER_HPP\r\n```\r\nJust a little bit of extra paranoia here too. :)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825707, 'comment_body': 'I think maybe this comment should go right with the `pointer_wrapper` class. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825755, 'comment_body': ""I think that this is only necessary if the compiler doesn't already have `make_unique` available.  I believe `make_unique` was added in C++14, so you can just check with a macro to see what the C++ standard being used is, and only add this function if it's needed."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826516, 'comment_body': 'Would it be possible to make a macro like `CEREAL_NVP_ARRAY` and do `CEREAL_NVP_ARRAY(bounds, dim)` here?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826576, 'comment_body': 'Just a comment, did you want to switch to `ar(CEREAL_NVP(...))` or would you rather stick with `ar & CEREAL_NVP(...)`?  I imagine it would be easy to switch back and forth with a regex (I very much doubt it would accidentally catch anything else).', 'comment_created': datetime.datetime(2020, 7, 18, 20, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826835, 'comment_body': 'From the cereal documentation:\r\n\r\n> cereal will not perform any checks to ensure that serialization was done with the same version of cereal.\r\n\r\nWe should maybe think about this a little bit.  This means that if we change anything about the serialization of a class, we maybe need a major version bump.  That\'s definitely not desired.  Another option might be to, for every single top-level mlpack class that will be serialized, serialize a ""version number"".  Then, upon deserializing, we could just check that that version number is the same (or take some kind of corrective action if it\'s not, like we do now).\r\n\r\nHowever, in any case, I\'m happy to remove this code for now since we will have to make a 4.0.0 release for cereal anyway.  But, we should think about how we are going to handle this moving forward, and probably make sure that we set things up here in a way that we can have reverse compatibility later. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826903, 'comment_body': '```suggestion\r\n  ar & CEREAL_NVP(padWLeft);\r\n  ar & CEREAL_NVP(padWRight);\r\n  ar & CEREAL_NVP(padHBottom);\r\n  ar & CEREAL_NVP(padHTop);\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 20, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826952, 'comment_body': '```suggestion\r\n\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826960, 'comment_body': '```suggestion\r\n    ar & CEREAL_NVP(reset);\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827081, 'comment_body': ""I'm not sure if this will work in general.  We need to serialize the number of children too, so that we can resize `children` appropriately during load.  One option would be to create a wrapper so that you can serialize a `std::vector` that holds pointers... `CEREAL_POINTER_VECTOR` or something?"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827176, 'comment_body': '```suggestion\r\n  ar & CEREAL_POINTER(d);\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 20, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827215, 'comment_body': '```suggestion\r\n    if (datasetInfo->Type(splitDimension) == data::Datatype::categorical)\r\n      ar & CEREAL_NVP(categoricalSplit);\r\n    else\r\n      ar & CEREAL_NVP(numericSplit);\r\n```\r\nI think the indentation was ok before. :)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827246, 'comment_body': ""Same comment here as for the decision tree---if we don't serialize the size of `children`, too, we may deserialize the wrong number of children."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827313, 'comment_body': 'Maybe I missed something---do these need to be `explicit`?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827360, 'comment_body': 'It seems to me like this header should probably already be included from somewhere else. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827375, 'comment_body': '```suggestion\r\n```\r\nWe can just remove the line. :smile:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827411, 'comment_body': ""I assume this one is still in progress, but if you'd like me to help out just let me know. :)"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827446, 'comment_body': 'I am happy to see that go! :tada:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827722, 'comment_body': 'I believe the way that these functions work is that the ""name"" in the NVP (name-value pair) is computed from the variable itself.\r\n\r\nSo, here you would actually want to do `CEREAL_NVP(t)` to match the name from before.  However, the function takes in two arguments `t` and `newT` and they should stay separate... so you might want to do something like this:\r\n\r\nFor serialization:\r\n```\r\n    try\r\n    {\r\n      T& x(t); // Create a reference to t.\r\n      o << CEREAL_NVP(x);\r\n    }\r\n```\r\n\r\nThen for deserialization:\r\n\r\n```\r\n    try\r\n    {\r\n      T& x(newT);\r\n      i >> CEREAL_NVP(x);\r\n    }\r\n```\r\n\r\nThis way the name matches.  Anyway, it seems likely that you might have to do this for some of the other serialization test functions too. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 21, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456830098, 'comment_body': 'Yes I agree', 'comment_created': datetime.datetime(2020, 7, 18, 21, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456830325, 'comment_body': 'I think I will keep the old-style `ar &` since it is working perfectly, this will avoid any error related to regexp', 'comment_created': datetime.datetime(2020, 7, 18, 21, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456830755, 'comment_body': 'Yes, I wanted to ask about that, but since it worked when I serialized one by one I moved on.\r\nI agree that we need to create a wrapper, just to register the number on the children \r\n', 'comment_created': datetime.datetime(2020, 7, 18, 21, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456833747, 'comment_body': 'me too :+1: ', 'comment_created': datetime.datetime(2020, 7, 18, 22, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456833970, 'comment_body': 'No, I wanted to test something for cereal two months ago, I have just forgotten to remove it.', 'comment_created': datetime.datetime(2020, 7, 18, 22, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456845640, 'comment_body': ':+1: yeah, it should not be too hard to make a wrapper.', 'comment_created': datetime.datetime(2020, 7, 19, 1, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 457519557, 'comment_body': '@rcurtin Exactly', 'comment_created': datetime.datetime(2020, 7, 20, 15, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 458942938, 'comment_body': 'Of course.', 'comment_created': datetime.datetime(2020, 7, 22, 16, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 458943713, 'comment_body': 'I have reset the version in all mlpack codebase. I think it will be easier to activate that as we change the classes in the future? I am not sure, it is your call.', 'comment_created': datetime.datetime(2020, 7, 22, 16, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459738177, 'comment_body': 'I assume that we need to re-add this line?', 'comment_created': datetime.datetime(2020, 7, 23, 21, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459738305, 'comment_body': 'Do we need to add, e.g., `CEREAL_INCLUDE_DIR` to `MLPACK_INCLUDE_DIRS`?', 'comment_created': datetime.datetime(2020, 7, 23, 21, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459741147, 'comment_body': ':tada:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459741654, 'comment_body': ""I think we will still need to keep these, otherwise things won't build.  I'll open a separate PR later to fix that. :+1:"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459741993, 'comment_body': ""Actually your new `serialize_armadillo.hpp` implementations aren't under the MPL, they can be under BSD since you wrote them for mlpack.  The only files to include there are explicit backports of Armadillo functions that come from newer versions of Armadillo.\r\n\r\nUpdate: I took a look at the other files in this directory... I think we're not actually backporting anything anymore!  If that's the case, we can remove this `README.md` file too. :+1:"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459742082, 'comment_body': 'These will also need to be kept for now. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459743103, 'comment_body': 'I think this is fine to remove---that macro may not be set for older versions of Armadillo (before we found that workaround), but if a user ever reports a bug we can just tell them to `#define H5_USE_110_API`.  New versions of Armadillo set it automatically.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459744034, 'comment_body': 'Should there be a line wrap here?  Maybe I missed something. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459744220, 'comment_body': 'Awesome, this looks good to me. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459744811, 'comment_body': ""If we are loading though, don't we have to deserialize the count too, then allocate the space for the array?"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459745954, 'comment_body': 'This one is a candidate for a nice wrapper macro too (I think you already have the wrapper in place).', 'comment_created': datetime.datetime(2020, 7, 23, 21, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459746163, 'comment_body': 'I think it was a little nicer to have the tabbing here before. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459746704, 'comment_body': 'I believe we can remove all the `const unsigned int` parameters now too. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459748240, 'comment_body': 'Yeah; I think we have to ""prepare"" for that.  Consider this serialize function:\r\n\r\n```\r\nclass C\r\n{\r\n  int x;\r\n  int y;\r\n  int z;\r\n\r\n  void serialize(Archive& ar)\r\n  {\r\n    ar(x);\r\n    ar(y);\r\n    ar(z);\r\n  }\r\n};\r\n```\r\n\r\nBut if we ever want to change that and add another parameter `a` to the definition of `C`, now we break reverse compatibility.  There\'s no way to write a reverse-compatible `serialize()` function.  So instead I would suggest an implementation like this:\r\n\r\n```\r\nclass C\r\n{\r\n  int x;\r\n  int y;\r\n  int z;\r\n\r\n  void serialize(Archive& ar)\r\n  {\r\n    int version = 1;\r\n    ar(version);\r\n\r\n    ar(x);\r\n    ar(y);\r\n    ar(z);\r\n  }\r\n};\r\n```\r\n\r\nAnd then, if we wanted to add `a`, we could do it in a reverse-compatible way:\r\n\r\n```\r\nclass C\r\n{\r\n  int x;\r\n  int y;\r\n  int z;\r\n  int a;\r\n\r\n  void serialize(Archive& ar)\r\n  {\r\n    int version = 2;\r\n    ar(version); // If an old model is loaded, version will be set to 1.\r\n\r\n    ar(x);\r\n    ar(y);\r\n    ar(z);\r\n    if (version >= 2)\r\n      ar(a);\r\n    else\r\n      a = 0.0; // Set a default value for `a` since it was not serialized in the old version.\r\n  }\r\n};\r\n```\r\n\r\nSo, this means we\'ll have to add that `int version; ar(version);` snippet to basically every mlpack class that we want to be reverse-compatible.  I would say it\'s okay to do that for just about every class, although we may want to avoid it for things we hold huge vectors of.  For instance, maybe we want to avoid it for most classes in `core/`, and instead just have versions for things in `methods/`.  (Also, maybe we want a `uint8_t` for `version` to save 3 bytes.)', 'comment_created': datetime.datetime(2020, 7, 23, 21, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459751225, 'comment_body': 'OK, perfect, I will remove the readme entirely', 'comment_created': datetime.datetime(2020, 7, 23, 21, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459751503, 'comment_body': 'Perfect.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459751845, 'comment_body': 'Yes, I will apply the vector wrapper to this file too.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459753460, 'comment_body': '@rcurtin I agree, we need to keep them, but since they are no longer part of armadillo internal, are you going to open a pull request on armadillo side? or here? I have just moved them to `serialize_armadillo.hpp`\r\nIn fact, my question is how to rename them in the most appropriate way to keep the build, maybe your PR will resolve the issue,', 'comment_created': datetime.datetime(2020, 7, 23, 22, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459754098, 'comment_body': 'Actually, I am not sure, I did not have time to verify if there is a specific cmake file for find_package in cereal side.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459754257, 'comment_body': 'Yes, I think it has been removed because of a bad merge', 'comment_created': datetime.datetime(2020, 7, 23, 22, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459756205, 'comment_body': 'Are you sure that the change in the signature will pass the sfinae?', 'comment_created': datetime.datetime(2020, 7, 23, 22, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459756440, 'comment_body': 'Hmm, I am not sure if I modified this file, I will take a look.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459760247, 'comment_body': 'Yes, I need to blame kakoune for that', 'comment_created': datetime.datetime(2020, 7, 23, 22, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459765501, 'comment_body': ""Ah, right, the SFINAE check probably needs to be adapted too.  But cereal doesn't require the `const unsigned int`, so there's no reason to keep it. :+1:"", 'comment_created': datetime.datetime(2020, 7, 23, 22, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459776064, 'comment_body': 'Perfect. :+1: :+1:\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 23, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 460585299, 'comment_body': ""Nice!  This is a clever implementation. :+1:  (I wouldn't have expected it to be so simple!)"", 'comment_created': datetime.datetime(2020, 7, 26, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461608329, 'comment_body': 'We should probably keep this header guard. :)', 'comment_created': datetime.datetime(2020, 7, 28, 14, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461608628, 'comment_body': '```suggestion\r\n```\r\nWe should be able to remove this now. :+1:', 'comment_created': datetime.datetime(2020, 7, 28, 14, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461609550, 'comment_body': ""So, very technically, we can't do this yet because of those typedefs that are still present in `arma_extend.hpp`.  We'll be able to remove this in a future PR when that is handled."", 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461609983, 'comment_body': 'That means we should remove this from here for now too.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461637457, 'comment_body': 'Ok perfect.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462428564, 'comment_body': ""I'm not sure this can work; the struct `save_vistor` doesn't have any constructor that takes arguments."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462430578, 'comment_body': ""I believe this might need to be something more like this:\r\n\r\n```\r\ntemplate<typename Archive>\r\nstruct save_visitor : public boost::static_visitor<void>\r\n{\r\n  template<typename T>\r\n  void operator()(T& t)\r\n  {\r\n    ar(CEREAL_POINTER(t));\r\n  }\r\n};\r\n```\r\n\r\nDon't forget the `void` template type to `static_visitor` like @robertohueso pointed out, and don't forget to use a reference for `t` in the `operator()` so that we don't copy the `T`.\r\n\r\nYou'll probably have to adapt the `load_visitor` the same way.  Honestly, since the code is the same in both, you might be able to just do `serialize_visitor` and use that in `pointer_variant_wrapper`."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462431341, 'comment_body': ""Are you sure this will work in general?  I think that we need to serialize the type of `PointerVariant`, so that we can load the right type.  You might consider taking a look at how Cereal implements its `boost::variant` support and then imitating that.  After all this should be basically the same, you just need to call `POINTER_WRAPPER()` when you serialize whatever's held since it's a bare pointer."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462432711, 'comment_body': 'In this case, the `ar` will be undefined if I remove the `Archive& ar` from the signature of `operator()`.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462432763, 'comment_body': 'https://github.com/USCiLab/cereal/blob/master/include/cereal/types/variant.hpp\r\n\r\nWhat you\'ve got is close-ish to what they\'re doing there; I think that a main piece missing is that you have to serialize ""index"":\r\n\r\nhttps://github.com/USCiLab/cereal/blob/master/include/cereal/types/variant.hpp#L96\r\n\r\nThe `load_variant` templated function might take a while to understand, but it\'s a clever way of calling the load visitor with the right template type.  If you like, I can try and walk you through it, just let me know. :+1:', 'comment_created': datetime.datetime(2020, 7, 29, 16, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462433951, 'comment_body': 'Hmm, So basically, I will have to imitate the `boost::variant` implementation in cereal, I have tried to do that before but I did not understand everything there. I will spend more time on their implementation to understand what is happening.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462434261, 'comment_body': 'Sorry I wrote this totally wrong :facepalm: let me try again:\r\n\r\n```\r\ntemplate<typename Archive>\r\nstruct save_visitor : public boost::static_visitor<void>\r\n{\r\n  save_visitor(Archive& ar) : ar(ar) { }\r\n\r\n  template<typename T>\r\n  void operator()(T& t)\r\n  {\r\n    ar(CEREAL_POINTER(t));\r\n  }\r\n\r\n  Archive& ar;\r\n};\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 16, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462448378, 'comment_body': '@rcurtin I have thought about the `index` since we are serializing pointers. However,  it is only in `std::variant` there is nothing similar in `boost::variant`', 'comment_created': datetime.datetime(2020, 7, 29, 16, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462477067, 'comment_body': 'Sorry, perhaps I linked to the wrong file. https://github.com/USCiLab/cereal/blob/master/include/cereal/types/boost_variant.hpp', 'comment_created': datetime.datetime(2020, 7, 29, 17, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466456492, 'comment_body': ""I think that we could maybe use simple overloading here to add an overload of `operator()` for when a `boost::variant` is held internally:\r\n\r\n```\r\ntemplate<typename Archive, typename... VariantTypes>\r\nvoid operator()(Archive& ar, boost::variant<VariantTypes...>& variant) const\r\n{\r\n  ar(CEREAL_VARIANT_POINTER(variant));\r\n}\r\n```\r\n\r\nI *think* that would work (and you could do a similar thing for `save_visitor`).  Let me know what you think---I'm happy to try and help debug it if it doesn't work.  The basic idea, I think, should be valid though: we can just catch when a `variant` holds a `variant` inside of itself, and then call `CEREAL_VARIANT_POINTER()` again."", 'comment_created': datetime.datetime(2020, 8, 6, 14, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466516158, 'comment_body': '@rcurtin I have tested it, but I got the exact same error above. \r\nI am not sure we can call another `operator()` if the first one has already been called.\r\nI think the idea is valid if there was only `boost::variant<boost::variant<T...>>`. However, since we are mixing type, I am not sure.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466532649, 'comment_body': ""I am looking through the code now.  Why haven't you used `LoadAndConstructLoadWrapper` like in the `cereal/types/boost_variant.hpp` implementation?  Maybe there is something I have overlooked?  There aren't very many comments, so I'm not sure what the state of the code is---does it fully work and pass tests when serializing a `boost::variant` that doesn't internally contain a `boost::variant`?"", 'comment_created': datetime.datetime(2020, 8, 6, 16, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466541398, 'comment_body': '@rcurtin I think I did not get the reason why they have to use it in the first place.\r\nI think the implementation of `boost::variant` is working since the only errors I am getting now are related to non serialized raw pointers.', 'comment_created': datetime.datetime(2020, 8, 6, 16, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466542674, 'comment_body': 'Okay, but when you pass a `boost::variant<>` that contains pointer types and *also* another `boost::variant` (i.e. like it happens for ANN with the `MoreLayers` typedef), this still fails?', 'comment_created': datetime.datetime(2020, 8, 6, 16, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466548795, 'comment_body': 'Yes it still fails, actually, it is not complaining about the pointers because if it is the case the compiler would have stopped before. The issue is it is not matching the function call when it sees `boost::variant`\r\n```\r\ndouble> >*, mlpack::ann::VRClassReward<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::VirtualBatchNorm<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::RBF<arma::Mat<double>, arm\r\na::Mat<double>, mlpack::ann::GaussianFunction>*, mlpack::ann::BaseLayer<mlpack::ann::GaussianFunction, arma::Mat<double>, arma::Mat<double> >*> > >::value_type&)’\r\n  122 | #define CEREAL_VARIANT_POINTER(T) cereal::make_pointer_variant(T)\r\n      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\r\n/meta/mlpack/src/mlpack/methods/ann/ffn_impl.hpp:568:9: note: in expansion of macro ‘CEREAL_VARIANT_POINTER’\r\n  568 |    ar & CEREAL_VARIANT_POINTER(network.at(i));\r\n      |         ^~~~~~~~~~~~~~~~~~~~~~\r\n/meta/mlpack/src/mlpack/core/cereal/pointer_variant_wrapper.hpp:117:1: note: candidate: ‘template<class ... VariantTypes> cereal::pointer_variant_wrapper<VariantTypes ...> cereal::make_point\r\ner_variant(boost::variant<VariantTypes* ...>&)’\r\n  117 | make_pointer_variant(boost::variant<VariantTypes*...>& t)\r\n      | ^~~~~~~~~~~~~~~~~~~~\r\n/meta/mlpack/src/mlpack/core/cereal/pointer_variant_wrapper.hpp:117:1: note:   template argument deduction/substitution failed:\r\n/meta/mlpack/src/mlpack/core/cereal/pointer_variant_wrapper.hpp:122:63: note:   mismatched types ‘VariantTypes*’ and ‘boost::variant<mlpack::ann::Glimpse<arma::Mat<double>, arma::Mat<double>\r\n >*, mlpack::ann::Highway<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::Recurrent<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::RecurrentAttention<arma::Mat<double>, arma::Ma\r\nt<double> >*, mlpack::ann::ReinforceNormal<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::Reparametrization<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::Select<arma::Mat<doub\r\nle>, arma::Mat<double> >*, mlpack::ann::Sequential<arma::Mat<double>, arma::Mat<double>, false>*, mlpack::ann::Sequential<arma::Mat<double>, arma::Mat<double>, true>*, mlpack::ann::Subview<a\r\nrma::Mat<double>, arma::Mat<double> >*, mlpack::ann::VRClassReward<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::VirtualBatchNorm<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann\r\n::RBF<arma::Mat<double>, arma::Mat<double>, mlpack::ann::GaussianFunction>*, mlpack::ann::BaseLayer<mlpack::ann::GaussianFunction, arma::Mat<double>, arma::Mat<double> >*>’\r\n  122 | #define CEREAL_VARIANT_POINTER(T) cereal::make_pointer_variant(T)\r\n      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\r\n/meta/mlpack/src/mlpack/methods/ann/ffn_impl.hpp:568:9: note: in expansion of macro ‘CEREAL_VARIANT_POINTER’\r\n  568 |    ar & CEREAL_VARIANT_POINTER(network.at(i));\r\n      |         ^~~~~~~~~~~~~~~~~~~~~~\r\n[ 80%] Building CXX object src/mlpack/tests/CMakeFiles/mlpack_test.dir/main_tests/decision_stump_test.cpp.o\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 16, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466574215, 'comment_body': ""Ok, I'll play with this and see if I can get something figured out, by adapting the idea above. :+1:"", 'comment_created': datetime.datetime(2020, 8, 6, 17, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466705093, 'comment_body': 'I believe that this implementation works:\r\n\r\n```\r\n/**\r\n * @file core/cereal/pointer_variant_wrapper.hpp\r\n * @author Omar Shrit\r\n *\r\n * Implementation of a boost::variant wrapper to enable the serialization of\r\n * the pointers inside boost variant in cereal\r\n *\r\n * mlpack is free software; you may redistribute it and/or modify it under the\r\n * terms of the 3-clause BSD license.  You should have received a copy of the\r\n * 3-clause BSD license along with mlpack.  If not, see\r\n * http://www.opensource.org/licenses/BSD-3-Clause for more information.\r\n */\r\n#ifndef MLPACK_CORE_CEREAL_POINTER_VARIANT_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_POINTER_VARIANT_WRAPPER_HPP\r\n\r\n#include <cereal/archives/json.hpp>\r\n#include <cereal/archives/portable_binary.hpp>\r\n#include <cereal/archives/xml.hpp>\r\n#include <cereal/types/boost_variant.hpp>\r\n\r\n#include <boost/variant.hpp>\r\n#include <boost/variant/variant_fwd.hpp>\r\n#include <boost/variant/static_visitor.hpp>\r\n\r\n#include ""pointer_wrapper.hpp""\r\n\r\nnamespace cereal {\r\n\r\n// Forward declaration.\r\ntemplate<typename... VariantTypes>\r\nclass pointer_variant_wrapper;\r\n\r\ntemplate<typename... VariantTypes>\r\ninline pointer_variant_wrapper<VariantTypes...>\r\nmake_pointer_variant(boost::variant<VariantTypes...>& t)\r\n{\r\n  return pointer_variant_wrapper<VariantTypes...>(t);\r\n}\r\n\r\ntemplate<class Archive>\r\nstruct save_visitor : public boost::static_visitor<void>\r\n{\r\n  save_visitor(Archive& ar) : ar_(ar) {}\r\n\r\n  template<class T>\r\n  void operator()(const T* value) const~\r\n  {\r\n    ar_ & CEREAL_POINTER(value);\r\n  }\r\n\r\n  template<typename... Types>\r\n  void operator()(boost::variant<Types*...>& value) const\r\n  {\r\n    ar_ & make_pointer_variant(value);\r\n  }\r\n\r\n  Archive& ar_;\r\n};\r\n\r\ntemplate<typename T>\r\nstruct load_visitor : public boost::static_visitor<void>\r\n{\r\n  template<typename Archive, typename VariantType>\r\n  static void load_impl(Archive& ar, VariantType& variant, std::true_type)\r\n  {\r\n    // Note that T will be a pointer type.\r\n    T loadVariant;\r\n    ar & CEREAL_POINTER(loadVariant);\r\n    variant = loadVariant;\r\n  }\r\n\r\n  template<typename Archive, typename VariantType>\r\n  static void load_impl(Archive& ar, VariantType& value, std::false_type)\r\n  {\r\n    // This must be a nested boost::variant.\r\n    ar & make_pointer_variant(value);\r\n  }\r\n\r\n  template<typename Archive, typename VariantType>\r\n  static void load(Archive& ar, VariantType& variant)\r\n  {\r\n    // Delegate to the proper load_impl() overload depending on whether T is a\r\n    // pointer type.  If T is not a pointer type, then we expect it to be a\r\n    // nested boost::variant.\r\n    load_impl(ar, variant, typename std::is_pointer<T>::type() );\r\n  }\r\n};\r\n\r\ntemplate<typename... VariantTypes>\r\nclass pointer_variant_wrapper\r\n{\r\n/*\r\n * The objective of this class is to create a wrapper for\r\n * boost::variant.~\r\n * Cereal supports the serialization of boost::vairnat, but~\r\n * we need to serialize it if it holds a raw pointers.\r\n */\r\n public:\r\n   pointer_variant_wrapper(boost::variant<VariantTypes...>& PointerVar)\r\n    : PointerVariant(PointerVar)\r\n  {}\r\n\r\n  template<class Archive>\r\n  void save(Archive& ar) const\r\n  {\r\n    // which represent the index in std::variant.\r\n    int which = PointerVariant.which();\r\n    ar & CEREAL_NVP(which);\r\n    save_visitor<Archive> s(ar);\r\n    boost::apply_visitor(s, PointerVariant);\r\n  }\r\n\r\n  template<class Archive>\r\n  void load(Archive& ar)\r\n  {\r\n    // Load the size of the serialized type.\r\n    int which;\r\n    ar & CEREAL_NVP(which);\r\n\r\n    // Create function pointers to each overload of load_visitor<T>::load, for\r\n    // all T in VariantTypes.\r\n    using LoadFuncType = void(*)(Archive&, boost::variant<VariantTypes...>&);\r\n    LoadFuncType loadFuncArray[] = { &load_visitor<VariantTypes>::load... };\r\n\r\n    if(which >= int(sizeof(loadFuncArray)/sizeof(loadFuncArray[0])))\r\n      throw std::runtime_error(""Invalid \'which\' selector when deserializing boost::variant"");\r\n\r\n    loadFuncArray[which](ar, PointerVariant);\r\n  }\r\n\r\nprivate:\r\n   boost::variant<VariantTypes...>& PointerVariant;\r\n};\r\n\r\n#define CEREAL_VARIANT_POINTER(T) cereal::make_pointer_variant(T)\r\n\r\n} // end namespace cereal\r\n\r\n#endif // CEREAL_POINTER_VARIANT_WRAPPER_HPP\r\n```\r\n\r\nHowever, I did not compile successfully, as there are layers in `src/mlpack/methods/ann/layer/` that internally hold `LayerTypes` or `std::vector<LayerTypes>`, and the code there will need to be adapted to appropriately use the variant wrapper here.  You can find the necessary classes just by doing a `grep LayerTypes` in `src/mlpack/methods/ann/layer/` and you\'ll see that there are probably 8 or 9 classes that would need to be adapted.  I didn\'t try, since I wasn\'t sure if you had a nice wrapper for `std::vector<boost::variant<...>>` or anything.  Maybe another one needs to be made for convenience, like `CEREAL_VECTOR_VARIANT_POINTER()` or something?', 'comment_created': datetime.datetime(2020, 8, 6, 21, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466705239, 'comment_body': ""(I don't mind adding lots of those wrappers.  Eventually, we'll be replacing and removing them anyway, most likely.)"", 'comment_created': datetime.datetime(2020, 8, 6, 21, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466712731, 'comment_body': 'I will give it a try and see what will happen.', 'comment_created': datetime.datetime(2020, 8, 6, 22, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466719964, 'comment_body': 'By the way, `CEREAL_VECTOR_VARIANT_POINTER()` will be a true wrapper :+1: :+1: :+1: ', 'comment_created': datetime.datetime(2020, 8, 6, 22, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467531477, 'comment_body': 'I imagine, in this case, that we have to also serialize `network.size()` and then call `resize()` to set the correct size if we are loading. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 3, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467562314, 'comment_body': '@rcurtin Of course,  I did not finish this yet, I was just able to serialize all layers and network types.\r\nThis should follow the same principle as `CEREAL_VECTOR`.\r\nI just wanted to be sure that the variant wrapper is working in the first place.', 'comment_created': datetime.datetime(2020, 8, 9, 9, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467565174, 'comment_body': 'Considering the `boost::string_view`, I was thinking of creating a wrapper that converts `boost::string_view` into `std::string` and then serialize it. (I have never used `string_view` so I am not sure if what I am doing is valid)', 'comment_created': datetime.datetime(2020, 8, 9, 10, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467628177, 'comment_body': '@rcurtin I have commented these lines as I have done a refactoring in `hrectbound_impl.hpp` I have changed the bound type into an `std::vector` since it will be easier to serialize, and since I can not figure the reason of using the C-Style array here.\r\nOtherwise, everything seems to be compiled, and all tests are passing.', 'comment_created': datetime.datetime(2020, 8, 9, 20, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467638909, 'comment_body': ""My distribution of CMake (CMake 3.16) doesn't have any `FindCereal.cmake` or `Findcereal.cmake` in `/usr/share/cmake-3.16/Modules/`, so I guess we might have to ship that file ourselves.  Perhaps this version?  https://github.com/facebookresearch/flashlight/blob/master/cmake/Findcereal.cmake\r\n(It's BSD-licensed, so we should attribute the source in a comment or something, but otherwise usage of that file should be just fine.)\r\n\r\nOnce that's done, we'll probably need something like `set(MLPACK_INCLUDE_DIRS ${MLPACK_INCLUDE_DIRS} ${CEREAL_INCLUDE_DIRS})` and maybe also `add_definitions(${CEREAL_DEFINITIONS})`---however, I am not sure `CEREAL_DEFINITIONS` can ever be set in that script, so maybe that part can be ignored."", 'comment_created': datetime.datetime(2020, 8, 9, 22, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467638924, 'comment_body': ':tada: :tada: :tada:', 'comment_created': datetime.datetime(2020, 8, 9, 22, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467638950, 'comment_body': '```suggestion\r\n<tt>template<typename Archive> void serialize(Archive&)</tt>\r\n```\r\nLooks like this documentation got a little out of date too. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 22, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639041, 'comment_body': ""```suggestion\r\n(i.e. the type must be serializable via cereal).\r\n```\r\nA long time ago, we actually did have a shim for `boost::serialization` that allowed us to specify a function called `Serialize()` instead of `serialize()`, but that shim doesn't exist anymore (thankfully!  It was not one of my smartest ideas), and so we can change the documentation to remove any reference to it. :)"", 'comment_created': datetime.datetime(2020, 8, 9, 22, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639111, 'comment_body': 'I think we can drop `text` from this list and replace it with `json`?', 'comment_created': datetime.datetime(2020, 8, 9, 23, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639251, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar);\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639328, 'comment_body': '```suggestion\r\nvoid serialize(Archive& ar);\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639390, 'comment_body': ""```suggestion\r\ndisk.  The \\c cereal documentation is fairly comprehensive.\r\n```\r\nGitHub won't let me suggest it all, but we can simply remove the rest of this paragraph about `Serialize()` since it's no longer relevant. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639400, 'comment_body': '```suggestion\r\n\\c cereal, because \\c serialize() may be called at any time during\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639412, 'comment_body': ""```suggestion\r\nTherefore, be careful that \\c serialize() (and the tree's destructor) properly\r\n```"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639475, 'comment_body': '```suggestion\r\n[the Cereal website](http://uscilab.github.io/cereal/)),\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639533, 'comment_body': ""There's an example below this comment---do you think you can re-run it with a cereal XML archive and update the printed XML model to match?"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639719, 'comment_body': '```suggestion\r\n      ""Serialize an mlpack model `model` in the binary cereal format to the \\n""\r\n      ""given `stream`.  Example:\\n""\r\n```\r\nI know it\'s a bit pedantic but I reflowed these lines so they display better in the Julia documentation. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639869, 'comment_body': '```suggestion\r\n      ""Only use this if you have saved the model in the cereal binary format \\n""\r\n      ""using `serialize_bin()` or an mlpack binding in another language!  If \\n""\r\n      ""you used `Serialization.serialize()` to serialize your model, then use\\n""\r\n      ""`Serialization.deserialize()` to deserialize it.\\n""\r\n```\r\nI reflowed this one too. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640087, 'comment_body': 'Maybe we should remove this comment?  It actually turns out to be not accurate anymore. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640166, 'comment_body': '```suggestion\r\n\r\n  // Manually set the values in the sparse matrix by assigning what we deserialized.\r\n```\r\nI think maybe it could be helpful to add a comment here.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640228, 'comment_body': ""```suggestion\r\n```\r\nI think maybe we can remove this comment too; it's mostly inaccurate now, since we are using `CEREAL_NVP` for the various `arma::uword` members."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640266, 'comment_body': ""```suggestion\r\n\r\n // Directly serialize the contents of the matrix's memory.\r\n```\r\nA comment could be useful here too. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640305, 'comment_body': ""```suggestion\r\n\r\n // Directly serialize the contents of the matrix's memory.\r\n```\r\n(Same as above.)"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640356, 'comment_body': ""```suggestion\r\n}\r\n\r\n} // end namespace cereal\r\n```\r\n\r\nIt's pedantic but I think it can be nice to separate the close of a function and the close of a namespace."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640404, 'comment_body': ""Since we're getting closer to merge now, it might be worthwhile to take the time to document this (and the other wrappers) now. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640481, 'comment_body': ""Do you think you can make the wrapper code match the style guide?  I imagine the style guide will throw some errors already.  Let me know if you'd like me to help out.  I'll leave a few (hopefully helpful) comments throughout but I won't comment on everything. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640498, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar)\r\n```\r\n(Just a simple style fix.)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640578, 'comment_body': 'I think for the style, we should name these `arrayAddress` and `arraySize`. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640616, 'comment_body': ""I think that this comment still applies.  I don't see how we are allocating space to deserialize."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640648, 'comment_body': 'Another little style fix, we should avoid the underscores in class member names; so, this can be `ar`.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640683, 'comment_body': ""Seems like this works now!  I'll go ahead and resolve this conversation. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640925, 'comment_body': 'It could be nice to add some documentation here on these macros too, that Doxygen will pick up. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641075, 'comment_body': ""I don't think we can deserialize directly into `VectorPointerVariant.size()`; correct me if I'm wrong.  I imagine we have to deserialize this value first into a `size_t`, then call `VectorPointerVariant.resize()`.  If we have to specify a value for each element when we call `resize()`, since each element can be a pointer, we can first just specify `NULL` here.  But I don't remember if we have to specify the default value when we call `resize()`.  Anyway, let me know if you have any issue with it---I'm happy to help debug."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641116, 'comment_body': 'The name is long, but hopefully it is temporary. :smile:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641224, 'comment_body': 'Same comment here as for the `boost::variant` vector serialization wrapper---I think we have to be careful about serializing the size.  I think that these issues cause some of the tests to currently fail, but I have not dug into it too far yet:\r\n\r\n```\r\nunknown location(0): fatal error: in ""FeedForwardNetworkTest/SerializationTest"": memory access violation at address: 0x00000949: no mapping at fault address\r\n```\r\n\r\nBut, that\'s just a guess; I haven\'t dug in yet.  If you fix this and the error still happens then I am happy to go digging further. :smile:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641511, 'comment_body': 'It would be interesting to share this shim somehow with the cereal maintainers, but I am not sure if they would find it useful.  If you like, maybe we could post it in some related issue in their repository, or send them an email or something.  Totally up to you.  (I think there might be some drawbacks to this approach, like one pointer getting serialized multiple times if it appears in a struct a few times, so that might mean that it is not particularly useful outside our context.  In our case I believe our serialization methods for, e.g., trees manage to avoid this problem by being careful about what they serialize.)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641720, 'comment_body': ""I won't leave this comment again but I think we should apply it to the vast majority of classes.  We've already talked about it but I want to write it down so it doesn't get lost (although I know at this point I've already left a ton of comments so it has risk of getting lost anyway :smile:).\r\n\r\nWe can hack in some support for versioning later like this:\r\n\r\n```\r\n  uint8_t version = 1;\r\n  ar & CEREAL_NVP(version);\r\n\r\n```\r\n\r\nThat should be all that's needed for now.  Later, if we update the serialization function but need to preserve reverse compatibility, we just increment `version`, then use an `if` statement after `version` has been serialized/deserialized or similar."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641871, 'comment_body': '```suggestion\r\n    else if (extension == ""json"")\r\n```\r\nI think that we need to change this too. :)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641898, 'comment_body': '```suggestion\r\n\r\n```\r\nNo need to add extra spaces.  I know it is a really pedantic comment. :smile:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642001, 'comment_body': '```suggestion\r\n    else if (extension == ""json"")\r\n```\r\nI think this one has to change too. :)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642159, 'comment_body': 'It\'s up to you, but do you want to switch to the more ""idiomatic"" `ar(CEREAL_NVP(scale))`?  I think it would be an easy regex.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642344, 'comment_body': ""I am not sure if it's easy, so feel free to not do this, but in many cases where we removed `version`, now the entire definition could fit on one line:\r\n\r\n```\r\nvoid NMS<UseCoordinates>::serialize(Archive& ar)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642393, 'comment_body': '```suggestion\r\n    Archive& ar)\r\n```\r\nJust a little style fix. :)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643144, 'comment_body': ""Cereal doesn't appear to have protections for serializing the same pointer multiple times, so I believe we have to handle that ourselves here.  Although this didn't seem to make a huge difference in my experiments, I think it would be good to first serialize whether `parent == NULL`, and then serialize the dataset only if so.  e.g.:\r\n\r\n```\r\nbool hasParent = (parent == NULL); // The conditional only matters when saving.\r\nar(CEREAL_NVP(hasParent));\r\nif (!hasParent)\r\n  ar(CEREAL_NVP(dataset));\r\n```\r\n\r\nLet me know if that makes sense why we need to do that."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643183, 'comment_body': 'I think we need to fix this part.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643866, 'comment_body': 'In this case I think we need to use the same strategy I suggested for `BinarySpaceTree`.  Check this out:\r\n\r\n```\r\n$ ls -lh test_data_3_1000.csv\r\n-rw-r--r-- 1 ryan ryan 36K Aug  9 19:05 test_data_3_1000.csv\r\n$ bin/mlpack_knn -r test_data_3_1000.csv -M model.xml -v -t cover\r\n...\r\n$ ls -lh model.xml\r\n-rw-r--r-- 1 ryan ryan 294M Aug  9 21:37 model.xml\r\n```\r\n\r\nSo you can see there is duplication of the entire dataset for every single node in the tree, causing the serialized model to be huge. :)\r\n\r\nIt looks like in this function we already make an serialize a `hasParent` member, so you can just use that here I think. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643968, 'comment_body': ""```suggestion\r\n  if (Archive::is_loading::value)\r\n    ownsMetric = true;\r\n```\r\n\r\nActually I believe there is a bug here.  If we are loading, `ownsMetric` will always be true.  And if we are saving, there's no need to serialize that member."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644109, 'comment_body': '```suggestion\r\n  if (Archive::is_loading::value)\r\n```\r\nI know you did not write this code originally but I believe the `parent == NULL` condition is superfluous or even wrong.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644343, 'comment_body': ""I believe the reason to avoid doing this before was computational: I believe we found that it was quicker to hold a raw pointer than to dereference elements from a `std::vector`.\r\n\r\nIs there a reason that using `cereal::make_array` wouldn't work here?"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644455, 'comment_body': ""I'm not sure what this statement does now?"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644593, 'comment_body': 'The same issue probably applies here.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467645044, 'comment_body': ""If `this->localPointer` is `NULL` I think this doesn't work right.  Maybe we need something like this:\r\n\r\n```\r\nstd::unique_ptr<T> smartPointer;\r\nif (this->localPointer != NULL)\r\n  smartPointer = std::make_unique<T>(std::move(*this->localPointer));\r\n```\r\nI wrote up a patch for this; it seems to handle the issue correctly.  I linked to it in the main review comment. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657270, 'comment_body': ""I'm not sure this is working right:\r\n\r\n```\r\n$ bin/mlpack_knn -r test_data_3_1000.csv -M model.xml -v -t r\r\n[DEBUG] Compiled with debugging symbols.\r\n[INFO ] Using reference data from Loading 'test_data_3_1000.csv' as CSV data.  Size is 3 x 1000.\r\n[INFO ] 'test_data_3_1000.csv' (3x1000 matrix).\r\n[INFO ] Building reference tree...\r\n[INFO ] Tree built.\r\nmlpack_knn: /home/ryan/src/mlpack/src/mlpack/core/tree/rectangle_tree/rectangle_tree_impl.hpp:241: mlpack::tree::RectangleTree<MetricType, StatisticType, MatType, SplitType, DescentType, AuxiliaryInformationType>::RectangleTree(mlpack::tree::RectangleTree<MetricType, StatisticType, MatType, SplitType, DescentType, AuxiliaryInformationType>&&) [with MetricType = mlpack::metric::LMetric<2, true>; StatisticType = mlpack::neighbor::NeighborSearchStat<mlpack::neighbor::NearestNS>; MatType = arma::Mat<double>; SplitType = mlpack::tree::RTreeSplit; DescentType = mlpack::tree::RTreeDescentHeuristic; AuxiliaryInformationType = mlpack::tree::NoAuxiliaryInformation]: Assertion `iChild < numChildren' failed.\r\nAborted\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 1, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657351, 'comment_body': ""I think this might need some different handling.  `ownsDataset` should always be true only if we are loading, and we should only serialize the dataset if we are the root node (i.e. `parent == NULL`).  Do you think you could apply the same strategies I've suggested for the other trees here?"", 'comment_created': datetime.datetime(2020, 8, 10, 1, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657457, 'comment_body': ""I don't think this change was needed. :+1:"", 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657483, 'comment_body': ""Same here, I don't think these were needed either."", 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657551, 'comment_body': ""I'm not sure this change is right either."", 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657559, 'comment_body': 'This one too.', 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468233623, 'comment_body': 'This wrapper is nice, thank you for taking the time to implement it. :+1:', 'comment_created': datetime.datetime(2020, 8, 10, 23, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468233777, 'comment_body': ""I guess we don't need to serialize `ownsLayers` if we are setting it if the Archive is loading.  I suppose we could remove this line with no ill effects."", 'comment_created': datetime.datetime(2020, 8, 10, 23, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 469381272, 'comment_body': 'You are welcome', 'comment_created': datetime.datetime(2020, 8, 12, 16, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469382380, 'comment_body': 'Exactly, I have tried to replace `text` by `json` in every place I have seen. However, still, there are a lot of places I think I have left text', 'comment_created': datetime.datetime(2020, 8, 12, 16, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469388516, 'comment_body': 'Agreed,', 'comment_created': datetime.datetime(2020, 8, 12, 16, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469389391, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 12, 16, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469389654, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 12, 16, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469391524, 'comment_body': 'Of course,', 'comment_created': datetime.datetime(2020, 8, 12, 16, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469393133, 'comment_body': 'Agreed, I have copied it between load and save. Sorry.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469393330, 'comment_body': 'Hopefully,', 'comment_created': datetime.datetime(2020, 8, 12, 16, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469394951, 'comment_body': 'Of course, I will not forget the versionning, I will copy these comments to some place.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469395128, 'comment_body': 'Of course.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469397958, 'comment_body': 'I agree I do not know how I get these extra lines, I am trying to pay more attention to these small details, but still, I can not escape. I am sorry to make you spend time on these small errors', 'comment_created': datetime.datetime(2020, 8, 12, 16, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469398942, 'comment_body': ""That's would be possible, but maybe in the end."", 'comment_created': datetime.datetime(2020, 8, 12, 16, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469418015, 'comment_body': 'No worries!  It takes like 10 seconds max to add the suggestion. :)', 'comment_created': datetime.datetime(2020, 8, 12, 17, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 469490924, 'comment_body': 'I have changed the type of `mbound` to an `std::vector`', 'comment_created': datetime.datetime(2020, 8, 12, 19, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469491257, 'comment_body': 'Perfect:+1: Thanks for the patch', 'comment_created': datetime.datetime(2020, 8, 12, 19, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469491584, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 8, 12, 19, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469768691, 'comment_body': '@rcurtin I have tried to use `cereal::make_array` but there was an error telling that cereal can not serialize raw pointers.\r\nAlso, I am not sure if the error was from `hrectbound` or from another class. \r\nI thought about the change since it is rare to see this raw pointer array these days in mlpack. Even, we can use `std::array` instead of `std::vector` if it is very slow.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469769560, 'comment_body': 'Agreed, I have already applied this modification on several functions. It requires to get inside each class and see what is happening inside.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469932218, 'comment_body': ""I'd prefer to avoid changing this unless you also want to benchmark the performance and show that the performances are comparable.  Many years ago quite some time went into the implementation of this class, since it is used very heavily throughout tree traversals, and at that time it was found that the fastest implementation could be done with raw pointers.\r\n\r\nI thought that you had serialized raw pointer arrays elsewhere too?"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470006620, 'comment_body': '@rcurtin This is what I have in mind If you think this is good, I will apply it to all the trees?', 'comment_created': datetime.datetime(2020, 8, 13, 14, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 470032724, 'comment_body': '@rcurtin would it be possible to include `cereal` headers in Jenkins?', 'comment_created': datetime.datetime(2020, 8, 13, 15, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 470045121, 'comment_body': 'Done. :+1:', 'comment_created': datetime.datetime(2020, 8, 13, 15, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470045922, 'comment_body': 'Also, yes, I believe that code for `BinarySpaceTree` serialization will work correctly (you can see if it passes the tests, they are pretty comprehensive).', 'comment_created': datetime.datetime(2020, 8, 13, 15, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475832423, 'comment_body': '@rcurtin I have applied the similar principle in `rectangle_tree` I am not sure if it is working correctly, the tests do not show an error, but it goes in a loop for a long time. Tell me what do you think :+1: ', 'comment_created': datetime.datetime(2020, 8, 24, 19, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 475835108, 'comment_body': ""I did the same thing actually. :)  Here's a bugfix, in the inner loop:\r\n\r\n```\r\nfor (size_t i = 0; i < node->numChildren; ++i)\r\n{\r\n  stack.push(node->children[i]);\r\n}\r\n```\r\n\r\n:)"", 'comment_created': datetime.datetime(2020, 8, 24, 19, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 485275140, 'comment_body': ""@shrit here's the problem.  I don't understand why this is needed; it looks like part of the patch for R bindings that you applied.  @Yashwants19 why was this needed for R?  I wonder if `BINDING_TYPE` is not defined for the tests we are building, and thus the `#if` doesn't work.  (If we do need it, I guess maybe we could make the check as `#if !defined(BINDING_TYPE) || (BINDING_TYPE != BINDING_TYPE_R)` or something like this.)"", 'comment_created': datetime.datetime(2020, 9, 9, 0, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 485341638, 'comment_body': ""If I didn't use `#define CEREAL_ARCHIVES_JSON_HPP_` in `inst/include/mlpack.h` I got these error, hence to resolve this error I have to use this definition in `inst/include/mlpack.h` and `src/rcpp_mlpack.h`and bypass all the `JSON` calls, I am really sorry, I didn't discussion about the solution, may be you might some better solution here:\r\n\r\n```\r\nIn file included from /usr/share/R/include/R.h:91,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp/r/headers.h:71,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/RcppCommon.h:29,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp.h:27,\r\n                 from ../inst/include/mlpack.h:15,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:71:66: error: expected ‘)’ before ‘newSize’\r\n   71 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |                                                                  ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:25: note: in definition of macro ‘Realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                         ^\r\n/usr/share/R/include/R_ext/RS.h:73:24: note: to match this ‘(’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:71:11: note: in expansion of macro ‘Realloc’\r\n   71 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |           ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: expected identifier before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:79:17: note: in expansion of macro ‘Free’\r\n   79 |     static void Free(void *ptr) { std::free(ptr); }\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: ‘parameter’ declared as function returning a function\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:79:17: note: in expansion of macro ‘Free’\r\n   79 |     static void Free(void *ptr) { std::free(ptr); }\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:50: error: expected ‘)’ before ‘,’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ~                         ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:79:17: note: in expansion of macro ‘Free’\r\n   79 |     static void Free(void *ptr) { std::free(ptr); }\r\n      |                 ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:191:66: error: expected ‘)’ before ‘newSize’\r\n  191 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |                                                                  ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:25: note: in definition of macro ‘Realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                         ^\r\n/usr/share/R/include/R_ext/RS.h:73:24: note: to match this ‘(’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:191:11: note: in expansion of macro ‘Realloc’\r\n  191 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |           ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: expected identifier before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:225:17: note: in expansion of macro ‘Free’\r\n  225 |     static void Free(void *ptr) { (void)ptr; } // Do nothing\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: ‘parameter’ declared as function returning a function\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:225:17: note: in expansion of macro ‘Free’\r\n  225 |     static void Free(void *ptr) { (void)ptr; } // Do nothing\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:50: error: expected ‘)’ before ‘,’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ~                         ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:225:17: note: in expansion of macro ‘Free’\r\n  225 |     static void Free(void *ptr) { (void)ptr; } // Do nothing\r\n      |                 ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h: In member function ‘void rapidjson::MemoryPoolAllocator<BaseAllocator>::Clear()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:148:29: note: in expansion of macro ‘Free’\r\n  148 |             baseAllocator_->Free(chunkHead_);\r\n      |                             ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h: In member function ‘void rapidjson::internal::Stack<Allocator>::ShrinkToFit()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:103:24: note: in expansion of macro ‘Free’\r\n  103 |             Allocator::Free(stack_);\r\n      |                        ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h: In member function ‘void rapidjson::internal::Stack<Allocator>::Resize(std::size_t)’:\r\n/usr/share/R/include/R_ext/RS.h:73:24: error: expected unqualified-id before ‘(’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:28: error: expected primary-expression before ‘)’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                            ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘)’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘;’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h: In member function ‘void rapidjson::internal::Stack<Allocator>::Destroy()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:207:20: note: in expansion of macro ‘Free’\r\n  207 |         Allocator::Free(stack_);\r\n      |                    ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h: In destructor ‘rapidjson::GenericValue<Encoding, Allocator>::~GenericValue()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:727:32: note: in expansion of macro ‘Free’\r\n  727 |                     Allocator::Free(e);\r\n      |                                ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:734:28: note: in expansion of macro ‘Free’\r\n  734 |                 Allocator::Free(GetMembersPointer());\r\n      |                            ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:738:28: note: in expansion of macro ‘Free’\r\n  738 |                 Allocator::Free(const_cast<Ch*>(GetStringPointer()));\r\n      |                            ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h: In member function ‘rapidjson::GenericValue<Encoding, Allocator>& rapidjson::GenericValue<Encoding, Allocator>::AddMember(rapidjson::GenericValue<Encoding, Allocator>&, rapidjson::GenericValue<Encoding, Allocator>&, Allocator&)’:\r\n/usr/share/R/include/R_ext/RS.h:73:24: error: expected unqualified-id before ‘(’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:71: note: in expansion of macro ‘Realloc’\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                       ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:28: error: expected primary-expression before ‘)’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                            ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:71: note: in expansion of macro ‘Realloc’\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                       ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘)’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:71: note: in expansion of macro ‘Realloc’\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                       ^~~~~~~\r\nIn file included from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/archives/json.hpp:56,\r\n                 from ./mlpack/prereqs.hpp:80,\r\n                 from ./mlpack/core/data/extension.hpp:16,\r\n                 from ./mlpack/core/data/detect_file_type.cpp:15,\r\n                 from ../inst/include/mlpack.h:46,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:159: error: expected ‘;’ before ‘)’ token\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                                                                                                               ^\r\n      |                                                                                                                                                               ;\r\nIn file included from /usr/share/R/include/R.h:91,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp/r/headers.h:71,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/RcppCommon.h:29,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp.h:27,\r\n                 from ../inst/include/mlpack.h:15,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h: In member function ‘rapidjson::GenericValue<Encoding, Allocator>& rapidjson::GenericValue<Encoding, Allocator>::Reserve(rapidjson::SizeType, Allocator&)’:\r\n/usr/share/R/include/R_ext/RS.h:73:24: error: expected unqualified-id before ‘(’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:74: note: in expansion of macro ‘Realloc’\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                          ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:28: error: expected primary-expression before ‘)’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                            ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:74: note: in expansion of macro ‘Realloc’\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                          ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘)’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:74: note: in expansion of macro ‘Realloc’\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                          ^~~~~~~\r\nIn file included from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/archives/json.hpp:56,\r\n                 from ./mlpack/prereqs.hpp:80,\r\n                 from ./mlpack/core/data/extension.hpp:16,\r\n                 from ./mlpack/core/data/detect_file_type.cpp:15,\r\n                 from ../inst/include/mlpack.h:46,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:181: error: expected ‘;’ before ‘)’ token\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                                                                                                                                     ^\r\n      |                                                                                                                          \r\n```"", 'comment_created': datetime.datetime(2020, 9, 9, 5, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 485443640, 'comment_body': '@rcurtin Thanks, exactly I have arrived at the same results yesterday night. I have removed the binding declaration, I am working on the `CoverTreeTest`. :+1: ', 'comment_created': datetime.datetime(2020, 9, 9, 8, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 485915052, 'comment_body': '@Yashwants19 looks like a macro collision:\r\n\r\n```\r\n/usr/share/R/include/R_ext/RS.h:73:24: note: to match this ‘(’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:71:11: note: in expansion of macro ‘Realloc’\r\n   71 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n```\r\n\r\nMaybe before including the cereal headers, you want to, e.g., `#undef Realloc` and then redefine it after inclusion is done?', 'comment_created': datetime.datetime(2020, 9, 9, 20, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486696555, 'comment_body': ""Shouldn't these two be reversed?  Otherwise we might label it `1.1.2` when it's actually `1.2.0`."", 'comment_created': datetime.datetime(2020, 9, 10, 23, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486696659, 'comment_body': 'Up to you, but we could replace with `&` in this file if you like.', 'comment_created': datetime.datetime(2020, 9, 10, 23, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486696788, 'comment_body': 'We should also modify the other parts of the README to indicate that cereal >= 1.1.2 is required.  This file and `doc/guide/build.hpp` should be sufficient.', 'comment_created': datetime.datetime(2020, 9, 10, 23, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697011, 'comment_body': '```suggestion\r\ncereal documentation at https://uscilab.github.io/cereal/index.html.\r\n```\r\n(I think it will fit on one line now.)', 'comment_created': datetime.datetime(2020, 9, 10, 23, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697212, 'comment_body': 'Just as a reminder, this one is still an open comment. :)', 'comment_created': datetime.datetime(2020, 9, 10, 23, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697535, 'comment_body': ""I think we should be able to remove this file entirely.  @Yashwants19 correct me if I'm wrong on that."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697781, 'comment_body': 'I think the comment still needs to be removed. :)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697954, 'comment_body': '```suggestion\r\n * This implementation allows to seriliaze an array easily using cereal.\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698128, 'comment_body': '```suggestion\r\n/** \r\n * This class is used as a shim for cereal to be able to serialize a raw pointer array.\r\n */\r\ntemplate<class T>\r\nclass ArrayWrapper\r\n{\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698354, 'comment_body': ""I don't understand the comment; maybe it is inaccurate or needs to be clarified?"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698522, 'comment_body': ""I think these are unused; correct me if I'm wrong.  You could remove them if you want, if so."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698617, 'comment_body': 'We should also document this function, since this is what users will be using.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698739, 'comment_body': '```suggestion\r\n        std::is_same<Archive, cereal::JSONInputArchive>::value ||\r\n```\r\n(Regardless of what we do about the R bindings, this should still be indented.)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698807, 'comment_body': '```suggestion\r\n        std::is_same<Archive, cereal::JSONOutputArchive>::value ||\r\n```\r\n(Same comment as in is_loading.hpp.)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699095, 'comment_body': '```suggestion\r\n/**\r\n * The objective of this class is to create a wrapper for\r\n * boost::variant. \r\n * Cereal supports the serialization of boost::variant, but \r\n * we need to serialize it if it holds a raw pointers.\r\n */\r\ntemplate<typename... VariantTypes>\r\nclass pointer_variant_wrapper\r\n{\r\n```\r\nThe double asterisks in the opening (`/**`) are important so that Doxygen actually picks up the documentation.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699224, 'comment_body': '```suggestion\r\n  pointer_variant_wrapper(boost::variant<VariantTypes...>& pointerVar) :\r\n      pointerVariant(pointerVar)\r\n```\r\nSimple style fix.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699293, 'comment_body': 'We should perhaps call this class `PointerVariantWrapper` to match mlpack naming conventions.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699338, 'comment_body': '```suggestion\r\n    // which represents the index in std::variant.\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699463, 'comment_body': 'Same comments here about the class naming and the location of the class documentation. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699565, 'comment_body': 'We should also add documentation here too. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699704, 'comment_body': ""Also same comments here about class naming and comment location.  I think this is the last one.  I hope.  But I'll find out when I keep scrolling. :)"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699770, 'comment_body': '```suggestion\r\n#ifndef MLPACK_CORE_CEREAL_POINTER_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_POINTER_WRAPPER_HPP\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699811, 'comment_body': 'Ah, one more. :)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699864, 'comment_body': 'And we should also document this too. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486700430, 'comment_body': ""Just to check, this file (and `pair_associative_container.hpp`) are here for backporting to older versions, right?  It might be useful to put that in a comment at the top of each file or something so it's clear why the file is here. :+1:"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486700596, 'comment_body': ""```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */)\r\n```\r\nCorrect me if I'm wrong, but I believe that this should work throughout and matches the mlpack style a bit better.  It should be easy to catch in a regex too---I don't believe we use `uint32_t` anywhere else."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486700901, 'comment_body': ""This is a very strange diff in this file!  Do you know what's different?  Line endings maybe?  (But not on every line?)"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486701288, 'comment_body': ""It's up to you, but should we go with `ar(CEREAL_NVP(...))` throughout the codebase instead of the older boost::serialization style with `&`?  I'm fine with either.  If you wanted, you could apply a regex and I could look for every instance where it didn't get caught. :)"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486701762, 'comment_body': ""I'm actually going to resolve this comment, because I also made the same comment above and I don't want to scroll back and find it now. :smile:"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486701912, 'comment_body': 'I think this line is longer than 80 characters; also, `version` is unused so we can comment that out. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486702450, 'comment_body': ""```suggestion\r\n  // Save children last.\r\n```\r\nActually I think cereal is not going to get confused, but it's probably still good to serialize the children last.  If I remember right, the reason I had to do that for boost was that its pointer tracking would get very confused."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486702605, 'comment_body': 'We should probably make a wrapper macro for `make_array` like `CEREAL_POINTER_ARRAY()` or something?', 'comment_created': datetime.datetime(2020, 9, 11, 0, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486702976, 'comment_body': 'I *think* you could avoid this by making `datasetTemp` a `MatType*&` and adjusting the `const_cast` accordingly.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703276, 'comment_body': 'You could make this a part of the previous `is_loading()` if statement.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703429, 'comment_body': 'Same here, I think if you use `MatType*&` then this block is not needed.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703594, 'comment_body': '```suggestion\r\n  // We have to correct the dataset pointers in all of the children.\r\n  if (!hasParent)\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703875, 'comment_body': ""Same comment here; I think if we use `MatType*&` then this block isn't necessary."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486704064, 'comment_body': ""```suggestion\r\n  Timers() : enabled(false) { }\r\n```\r\nI don't think there's a need for an extra space here. :+1:"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486776585, 'comment_body': 'We can remove this file safely. I am not sure how this file left behind even after deleting the complete `boost` folder. :thinking: ', 'comment_created': datetime.datetime(2020, 9, 11, 5, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 486777628, 'comment_body': '`#if !defined(BINDING_TYPE) || (BINDING_TYPE != BINDING_TYPE_R)`\r\nI think so this also looks like a nice solution.\r\nOr should we use `#undef  Realloc` and `#undef Free` for fixing this?', 'comment_created': datetime.datetime(2020, 9, 11, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 487038157, 'comment_body': 'This is a very old comment, it needs to be removed I will handle it', 'comment_created': datetime.datetime(2020, 9, 11, 13, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487038497, 'comment_body': 'Yes exactly these functions can be removed safely', 'comment_created': datetime.datetime(2020, 9, 11, 13, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487041414, 'comment_body': 'OK  I see,', 'comment_created': datetime.datetime(2020, 9, 11, 13, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487042530, 'comment_body': ""Ahh, `Free` overlaps too.  Personally I think the `#undef` solution is better, because then users will still be able to serialize to JSON.  The `#if` solution will disable JSON serialization.  Maybe give it a shot and see if it works?  I assume after we include cereal, we'll have to then redefine `Realloc` and `Free`."", 'comment_created': datetime.datetime(2020, 9, 11, 13, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487044216, 'comment_body': 'Yes, of course, one regexp should fix all mlpack sources', 'comment_created': datetime.datetime(2020, 9, 11, 13, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487049179, 'comment_body': 'Yes, it is the line ending.\r\nI think the author used Emacs or a special text editor that replaced all the trailing whitespaces with special functionality. However, it seems that the editor has replaced whitespaces with a special char (I can not even tell), but it was a clear a visible in Kakoune, so I removed it manually where I saw it. \r\nAlso, I think you can see the diff locally with git diff. I am not sure how it is shown on Github.', 'comment_created': datetime.datetime(2020, 9, 11, 13, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487050706, 'comment_body': 'Yes, why not, if you prefer the new style, I also think the new one is better. It is hard to understand for a new user the strange overload for `&` and what is doing here.', 'comment_created': datetime.datetime(2020, 9, 11, 13, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487050997, 'comment_body': 'Yes, of course', 'comment_created': datetime.datetime(2020, 9, 11, 13, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487068813, 'comment_body': 'Yes of course,', 'comment_created': datetime.datetime(2020, 9, 11, 14, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487095069, 'comment_body': 'Probably with `()` everywhere in mlacpk. It need to be modified in `tests`', 'comment_created': datetime.datetime(2020, 9, 11, 14, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487095962, 'comment_body': 'I am not sure, actually, I have a file that has been added in `1.2.0` which allows as to distinguish it too.', 'comment_created': datetime.datetime(2020, 9, 11, 14, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487097625, 'comment_body': 'I think it will be `CEREAL_ARRAY_NVP` :+1: ', 'comment_created': datetime.datetime(2020, 9, 11, 14, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487400894, 'comment_body': 'I have try to apply `#undef` solution in this patch (https://gist.github.com/Yashwants19/6cdadffb26549c07c545033ca17188a3).\r\nLet me know what you think?', 'comment_created': datetime.datetime(2020, 9, 12, 11, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 487560097, 'comment_body': ""I think it should---since `valarray.hpp` will exist in versions 1.1.2 and later, then the if chain here will not actually get to this statement; even if the version is 1.2.0, it will terminate returning a version of 1.1.2.  Correct me if I'm wrong on that."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560149, 'comment_body': ""Don't forget to modify `doc/guide/build.hpp` too.  I believe that also has version dependency information. :)"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560181, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t version);\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560416, 'comment_body': ""So, for the documentation here, I don't mean to be *too* picky but these are functions that developers will be using, and it's safe to assume that most of them won't know (or care) about the internals of cereal.  So, at least for the macro versions like `CEREAL_POINTER_ARRAY`, we should write clear and comprehensive documentation about what it does and specifically when one would use the function for serialization."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560625, 'comment_body': ""```suggestion\r\n    Archive& /* ar */,\r\n```\r\nThis variable is unused, so I commented it out so that it doesn't throw a warning during compilation. :)"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560664, 'comment_body': '```suggestion\r\n    Archive& /* ar */,\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560712, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561036, 'comment_body': '```suggestion\r\n  ar(cereal::make_nvp(""this"", *this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561153, 'comment_body': '```suggestion\r\n    ownsMetric = true;\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561174, 'comment_body': 'I think this should probably change to the macro name. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561185, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561245, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561285, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561455, 'comment_body': 'I think the ordering is off here.  Should we move the serialization of `datasetPtr` up here?  (Also should we use `MatType*&` to simplify the code a bit?', 'comment_created': datetime.datetime(2020, 9, 13, 18, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561603, 'comment_body': ""I'll resolve this conversation, since we ended up realizing that cereal *does* have versioning support. :)"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561691, 'comment_body': ""```suggestion\r\n```\r\nThis member was only serialized in earlier versions, and we don't have to support that anymore, so we can just remove it. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561748, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */);\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561783, 'comment_body': 'We should still serialize `ownsLayers`. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561873, 'comment_body': ""We don't need this block anymore---you can see in the original code that the condition was `version < 2`, and so we don't need to support that anymore.  So there is no need to serialize any of these four members."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561988, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```\r\n`version` seems to be unused. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562145, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562236, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562272, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562323, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```\r\nRight now, since we have just switched to cereal, there should actually be no serialize function where we use `version` (yet!).  We should only need to uncomment it after our 4.0.0 release, when serialization starts changing in classes but we have to support reverse compatibility.', 'comment_created': datetime.datetime(2020, 9, 13, 18, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562414, 'comment_body': '```suggestion\r\n        Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562496, 'comment_body': '```suggestion\r\n```\r\nThis condition was only associated with older versions where `ownsLayers` was not serialized.  Now, we can remove it. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562544, 'comment_body': '```suggestion\r\n>::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562615, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 9, 13, 18, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562706, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562735, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562839, 'comment_body': '```suggestion\r\nvoid BayesianLinearRegression::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563049, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563083, 'comment_body': 'Here, too, we could use `MatType*&`. :+1:\r\n```suggestion\r\n    MatType*& referenceSetTmp = const_cast<MatType*&>(referenceSet);\r\n    ar(CEREAL_POINTER(referenceSetTmp));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563186, 'comment_body': 'If this works without issue, then all those other places where we make a `MatType*& tmp = const_cast<MatType*&>(...)` could be removed and we could just do the `const_cast<>` directly in the `CEREAL_NVP()` call.  Let me know what you think or if I overlooked something. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563267, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563310, 'comment_body': '```suggestion\r\n    else if (type == HMMType::DiagonalGaussianMixtureModelHMM)\r\n```\r\n(Also, the empty line above can be removed. :+1:)', 'comment_created': datetime.datetime(2020, 9, 13, 18, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563356, 'comment_body': ""I don't understand what the `[B]` here is?"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563399, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(type));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563409, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(hmm));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563455, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(type));\r\n  ar(CEREAL_NVP(hmm));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563565, 'comment_body': ""So, this block is special handling for a const object, but could we just change this to do the `const_cast<>` trick that's done in other places?  I may be overlooking something."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564032, 'comment_body': ""We don't need this particular block anymore---it was only useful for `version == 0`, so it can be removed. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564217, 'comment_body': '```suggestion\r\n                                               const uint32_t /* version */)\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 9, 13, 18, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564378, 'comment_body': ""`tables` appears to only be used to set the size of `secondHashTable`.  But I don't think that it actually does anything.  If I am not mistaken I believe it can be removed and we can just serialized `secondHashTable`.  Can you take a look at the code and let me know what you think?"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564400, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564440, 'comment_body': 'We should be able to use `MatType*&` or even the `const_cast` directly in the serialization call here. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564452, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564468, 'comment_body': '```suggestion\r\nvoid NSModel<SortPolicy>::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564609, 'comment_body': ""Here's another place where we could use `MatType*&` or `const_cast` directly."", 'comment_created': datetime.datetime(2020, 9, 13, 19, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564713, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564762, 'comment_body': ""Here's another place where we could use `MatType*&` or serialize directly with `const_cast`. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 19, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564808, 'comment_body': ""I think we should re-add this comment here, since we can't quite remove it yet. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 19, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564854, 'comment_body': '```suggestion\r\n  main_tests/hmm_loglik_test.cpp\r\n```\r\nNo need for the extra space. :)', 'comment_created': datetime.datetime(2020, 9, 13, 19, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565017, 'comment_body': '```suggestion\r\n    boa(CEREAL_NVP(shallowTree));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565037, 'comment_body': '```suggestion\r\n    bia(CEREAL_NVP(deepTree));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565080, 'comment_body': 'Nice catch! :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 19, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565133, 'comment_body': '```suggestion\r\n  oa(CEREAL_POINTER(model));\r\n```\r\nIs this comment still accurate, also?  I think it may need to be removed, since this appears to work now (correct me if I am wrong).', 'comment_created': datetime.datetime(2020, 9, 13, 19, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565169, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565195, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565288, 'comment_body': 'I wonder if it would be better to just let the exception throw here, and then it would be propagated up to the tests, where some actual good output is shown, instead of just a report that `success == false`.  What do you think?', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565314, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565329, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565336, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565341, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565361, 'comment_body': '```suggestion\r\n      o(CEREAL_POINTER(t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565387, 'comment_body': '```suggestion\r\n      i(CEREAL_POINTER(newT));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565416, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565443, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565454, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565472, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565482, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565492, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565534, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565544, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(newT));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565722, 'comment_body': '```suggestion\r\n    b(cereal::make_nvp(name.c_str(), *t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565736, 'comment_body': '```suggestion\r\n  b(cereal::make_nvp(name.c_str(), *t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565886, 'comment_body': '```suggestion\r\n    serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565936, 'comment_body': '```suggestion\r\n    serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565964, 'comment_body': '```suggestion\r\n                                                   const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566001, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566023, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566055, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566084, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566124, 'comment_body': '```suggestion\r\nvoid KDEModel::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487575348, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 9, 13, 20, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487575360, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 9, 13, 20, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487575523, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 9, 13, 20, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487575607, 'comment_body': 'Yes, of course, I will apply the modification, I can not remember where exactly I have applied each one\r\n', 'comment_created': datetime.datetime(2020, 9, 13, 20, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487576812, 'comment_body': 'You have an eye of an eagle:+1: ', 'comment_created': datetime.datetime(2020, 9, 13, 21, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487579781, 'comment_body': 'Neither do I:+1: \r\nThe compiler does not seem to be caring too', 'comment_created': datetime.datetime(2020, 9, 13, 21, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487579987, 'comment_body': 'Totally agreed, we need to test also if the `polymorphic_impl_fwd.hpp` does not exist in 1.1.2\r\n', 'comment_created': datetime.datetime(2020, 9, 13, 21, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487582839, 'comment_body': 'This error needs to be removed you are right\r\n', 'comment_created': datetime.datetime(2020, 9, 13, 22, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 488232724, 'comment_body': 'Yes, of course, if the exception is giving more details it would be a much better answer than the `success == false` in which we already know that.\r\nI think it is the case right now?', 'comment_created': datetime.datetime(2020, 9, 14, 21, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 489425610, 'comment_body': '```suggestion\r\n  if (extension == ""txt"" || extension == ""tsv"")\r\n```\r\nThis is in the function that saves an `SpMat`, so that doesn\'t use cereal, so we can leave it as `txt`.', 'comment_created': datetime.datetime(2020, 9, 16, 13, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489777651, 'comment_body': ""This is fixed now, so I'll resolve it. :+1:"", 'comment_created': datetime.datetime(2020, 9, 16, 21, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489779092, 'comment_body': 'I see the comment in `pair_associative_container.hpp`, but not in `unordered_map.hpp`; can you add it here too? :+1:', 'comment_created': datetime.datetime(2020, 9, 16, 22, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489780649, 'comment_body': '```suggestion\r\n       stack.push(node->right);\r\n```\r\nI noticed this in my editor. :)', 'comment_created': datetime.datetime(2020, 9, 16, 22, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489781519, 'comment_body': ""We can remove this---take a look at the original logic: if `version` was greater than or equal to 1, we serialized `ownsLayers`; *otherwise*, if we were loading, we set `ownsLayers` to `!model`.  But now, we only have to consider the case where the version is the newest (since we are removing reverse compatibility) and thus we don't need the `if` anymore. :+1:"", 'comment_created': datetime.datetime(2020, 9, 16, 22, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489783234, 'comment_body': 'Yeah, like we saw this morning, removing all the `try`/`catch` blocks gives way better output.  So I think we should adjust the code accordingly. :+1:', 'comment_created': datetime.datetime(2020, 9, 16, 22, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489784704, 'comment_body': ""It doesn't: https://github.com/USCiLab/cereal/tree/v1.1.2/include/cereal/details\r\n\r\nSo we should be able to reorder the check here and everything should be fine. :+1:"", 'comment_created': datetime.datetime(2020, 9, 16, 22, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 490337247, 'comment_body': 'It is used later to resize the table but I totally agree with you, everything related to `tables` can be removed since cereal, handle the serialization of `std::map`', 'comment_created': datetime.datetime(2020, 9, 17, 15, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 491463541, 'comment_body': ""We should probably keep the comment but remove the `Boost_SERIALIZATION_LIBRARY` line.  Anyway let's see if it works. :smile:"", 'comment_created': datetime.datetime(2020, 9, 19, 15, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 491463708, 'comment_body': 'Agreed.\r\n', 'comment_created': datetime.datetime(2020, 9, 19, 15, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 492708293, 'comment_body': 'I think you have to remove the `/m` too.  Honestly I think you could remove the whole line.', 'comment_created': datetime.datetime(2020, 9, 22, 12, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 494649290, 'comment_body': 'Maybe adding `msbuildArguments: /Zm10` solves the issue?', 'comment_created': datetime.datetime(2020, 9, 24, 22, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 494649859, 'comment_body': 'See https://docs.microsoft.com/en-us/cpp/build/reference/zm-specify-precompiled-header-memory-allocation-limit?view=vs-2019 for more information, I guess you can also directly go for `/Zm200`.', 'comment_created': datetime.datetime(2020, 9, 24, 22, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 495038052, 'comment_body': 'I will try this one too.', 'comment_created': datetime.datetime(2020, 9, 25, 14, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 495987792, 'comment_body': ""Building Armadillo in parallel would probably be fine, so maybe we can uncomment this?  But I don't think it matters much."", 'comment_created': datetime.datetime(2020, 9, 28, 14, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 495988551, 'comment_body': '@shrit want to try the `/Zm10` or `/Zm200` options and see if they fix the remaining C1060 errors?  We are getting close---only `feedforward_network_test.cpp` and `recurrent_network_test.cpp` have problems now, and I know those particular files have very large RAM usage on Linux too.', 'comment_created': datetime.datetime(2020, 9, 28, 14, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 495989247, 'comment_body': 'In the worst case, we could perhaps split those two files into multiple files, in the hopes that smaller files would have smaller RAM usage.', 'comment_created': datetime.datetime(2020, 9, 28, 14, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 495994979, 'comment_body': 'Yes, of course, it was only for precaution:+1: ', 'comment_created': datetime.datetime(2020, 9, 28, 14, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 499139802, 'comment_body': '```suggestion\r\n```\r\nI guess you can remove these lines.', 'comment_created': datetime.datetime(2020, 10, 3, 11, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 499139827, 'comment_body': '```suggestion\r\n````\r\nSame here.', 'comment_created': datetime.datetime(2020, 10, 3, 11, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 499140013, 'comment_body': 'What if we add `${CEREAL_INCLUDE_DIR}` after finding cereal(`find_package(cereal)`).', 'comment_created': datetime.datetime(2020, 10, 3, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 499140459, 'comment_body': 'I guess we can remove this file too, and alter the changes accordingly for setup.py.in, just an idea may be I am missing something here. ', 'comment_created': datetime.datetime(2020, 10, 3, 11, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 503914907, 'comment_body': ""We should probably add a comment indicating why we commented things out here (i.e. mlpack currently causes 'compiler out of heap space' issues with VS15, but not VS16)."", 'comment_created': datetime.datetime(2020, 10, 13, 12, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 503966380, 'comment_body': '@Yashwants19 Thanks for your comment, I am very far to be a Python expert, I have removed this file, but I am not sure if there are any modifications to do in `setup.py.in`', 'comment_created': datetime.datetime(2020, 10, 13, 13, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 504075325, 'comment_body': 'May be we can\'t remove this file directly, but we can use other file here.\r\n\r\nhttps://github.com/mlpack/mlpack/blob/11f60ee7be17225d350622bb3c0dd65ac8558882/src/mlpack/bindings/python/CMakeLists.txt#L31\r\n\r\nWe can use:\r\n```cmake\r\n-P ""${CMAKE_SOURCE_DIR}/CMake/ConfigureGenerate.cmake""\r\n```\r\nand here.\r\nhttps://github.com/mlpack/mlpack/blob/11f60ee7be17225d350622bb3c0dd65ac8558882/src/mlpack/bindings/python/CMakeLists.txt#L18-L19\r\n\r\n```CMake\r\n-D GENERATE_CPP_IN=${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/setup.py.in\r\n-D GENERATE_CPP_OUT=${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/setup.py\r\n```', 'comment_created': datetime.datetime(2020, 10, 13, 16, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 504268933, 'comment_body': '@Yashwants19 Perfect I understand. I have already removed the file, so do I need to bring this file back or not?', 'comment_created': datetime.datetime(2020, 10, 13, 21, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 504835233, 'comment_body': ""This doesn't preserve the existing directories that are already in `MLPACK_INCLUDE_DIRS`."", 'comment_created': datetime.datetime(2020, 10, 14, 17, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 504836863, 'comment_body': 'True, you are right, a small mistake, sorry\r\n', 'comment_created': datetime.datetime(2020, 10, 14, 17, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 505623498, 'comment_body': '```suggestion\r\n            -D GENERATE_CPP_IN=${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/setup.py.in\r\n            -D GENERATE_CPP_OUT=${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/setup.py\r\n```\r\nI guess this must be.', 'comment_created': datetime.datetime(2020, 10, 15, 15, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 505734105, 'comment_body': ""Did this somehow break the `HoeffdingTree` serialization test on OS X?  If so I guess we should revert the suggestion. :'(  It did seem to work okay before."", 'comment_created': datetime.datetime(2020, 10, 15, 17, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 505760385, 'comment_body': 'ok, I will bring back the old temporary pointer for this one.', 'comment_created': datetime.datetime(2020, 10, 15, 18, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 506999449, 'comment_body': ""I agree with @Yashwants19 here; now there's no need for special handling.  I think we should remove `ConfigureSetup.cmake`, and then *also* rename `ConfigureGenerate.cmake` to `ConfigureFile.cmake` and rename the arguments accordingly (since it is no longer specific to configuring C++ files), and then change all uses of `ConfigureGenerate.cmake` to `ConfigureFile.cmake`. :+1:"", 'comment_created': datetime.datetime(2020, 10, 18, 0, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507000397, 'comment_body': ""I don't see any comment; would you mind adding one?  Thanks! :+1:"", 'comment_created': datetime.datetime(2020, 10, 18, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507000776, 'comment_body': 'Wait, sorry!  I was looking at not all of the commits, so I saw an old version.  It looks just fine, thank you!', 'comment_created': datetime.datetime(2020, 10, 18, 0, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507001082, 'comment_body': 'Sorry, I was looking at the wrong diff again, so it looks like `ConfigureSetup.cmake` is already gone, which is great, so my only additional suggestion would be to fix the name and comments inside of `ConfigureGenerate.cmake` so that it is `ConfigureFile.cmake`. :+1:', 'comment_created': datetime.datetime(2020, 10, 18, 0, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507856291, 'comment_body': 'Are you sure `$PWD` is right here?  It looks like you are in `build/`, so maybe `../cereal-1.3.0/include/`?', 'comment_created': datetime.datetime(2020, 10, 19, 15, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507859038, 'comment_body': 'It seems the latest revision shows a bug with this script.  When an incorrect `CEREAL_INCLUDE_DIR` is given, here is the output:\r\n\r\n```\r\nCMake Error at /usr/local/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake:164 (message):\r\n  Could NOT find cereal: Found unsuitable version ""1.1.1"", but required is at\r\n  least ""1.1.2"" (found /home/vsts/work/1/s/build/cereal-1.3.0/include)\r\n```\r\n\r\nBut in this case, no version is found at all.  So I think we should check that any cereal file at all is available.  So perhaps this:\r\n\r\n```suggestion\r\nelseif(EXISTS ""${CEREAL_INCLUDE_DIR}/cereal/cereal.hpp"")\r\n\r\n  set(CEREAL_VERSION_MAJOR 1)\r\n  set(CEREAL_VERSION_MINOR 1)\r\n  set(CEREAL_VERSION_PATCH 1)\r\nelse()\r\n\r\n  set(CEREAL_FOUND NO)\r\n```', 'comment_created': datetime.datetime(2020, 10, 19, 15, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507875540, 'comment_body': 'Thanks, I did not know where I am,', 'comment_created': datetime.datetime(2020, 10, 19, 16, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 507876426, 'comment_body': ""I'm just guessing, I'm not totally sure.  If that fails too just try doing `ls` and other commands in the build to try and figure out what is going on. :)"", 'comment_created': datetime.datetime(2020, 10, 19, 16, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'f361b8c36a36605f8104396af5e08d76156097d2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e142f5846059d790ddf5a964e756f8660b1999d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6712872fd46b66188606a6c107715b462ddeea9b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453db70e714a94e56802c433ba8661450ea358de', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc3e49880be78be0b73a71fad024c236cbdc872', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c0270f9bb6c0cd47e1194f5d373ee920362848', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cdd20506e2b5e16968db4da9c8c1f4c89236aff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6513cc0cc75d2e25a428f655b8a12ea7bb61e6cb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada11ac75ce25c287d7e04262f66743555b99a21', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27a6f75d2468baaef381e3ac711a3bd739e79791', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6914fb80830ea06b3a7d877540fc6f354265a678', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fa4ec7217a4130186f874d17a36f7d94846284', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6729fa427d2150b7818789379d246b2f201642', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7503728bfa551f5a322c2275f1ef4ef864c20424', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a745815acaf868f6e7f86fc9f7608d1e646e1aaa', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf03c45270bf5be580b85f258723f487567f3b50', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e88346892d846faef31400326c2ae553c564b66', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1166c2e84bc695d944583a72d0d5d29a0949cc60', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef773488dfbbb601b2ff62d3b76bdddfc3456fea', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e95f7cab9244fd8c75e1e69b0795e0477db0328', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87a890b75940d901216d5fd48b6061d18639b586', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f3e94dd03f8f4e55160db848dc0a73fa237cd66', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03251db791db319a049e8af5d2d508fe250ac776', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab1e900c9b74905a11c9bdbf696f256e0f1676e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1ae15bbff9a68fd90444b8fc851a89a1990543', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9923ba4e7a7ab3e723368afa8f1fce7250fb13', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '424a8ff85e99b919d380a63c20fb37ed174f7f93', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce3e9930d0450ed4ff42f49e4c3810b4e2887ec', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa037f17057b79ffcc72d84c5cd2e2ece836e216', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a092e03b8551a6f682e87f151f5fdb6f806fe68', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84c14a241e744f949046d4c35e451626d738776', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a83d497b215076aa071618a8a807dba0329fd2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69b6e2acbc24c66a4b67106ab31c157418ef7a2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd60188ec254cbb1d6b333b3b29097d931128dccc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc99c714c1f7d2cc8f41897cf72baeac32e4632a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8514374c40d5b61e59a4051b300ea5e0226c86c9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f99bd8db3d2cd2fa9d0c013d9347b2c030762a3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03cee034832f24ff927f82b4e5d311c64cb90b78', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e0ef895ff81f3f9d69c3506dd9fc569d22dfea', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63036a60acb90de402b079c9c5e27e157b5c6c6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be3681f1af8af65015adaa20ac677b570cab6c37', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f89a02969b0ef3f8a666597598a6e371024f73d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd53d7b76d8aaa06e1176da4214280893aa57f25d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b46cffdf1ff1141dc9fcf654e04ccfc63449237', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e1dc4ab9c2349afac44294b8b2b54f2e02e344', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8ea550998ba32535f67aeb5330fdb1b6381095', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ad085370bf0989cb3a51f46ef7a16c141bf6b2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf69b1184a4c3d996a73f08d9bf03a18f01bf83', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82138407c5b8cb917e3e33dcc47cfbc605cf266', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c67692a77d1689ff596ee5330295cce629ae22', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d1543110a833238ccd234e219bf8d109a5e6b43', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b532b184a00ad2ad1c6f1986d89640e30d2fb53', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b33a593bce66ed2584b86c3262dbc9b52e20528', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bacfbe94a4068e359421da91f076c497f1c263f0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c5c89a705b4b1cbbf68955cbf80a2b760329ac1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdd49186f5263b44ea7be8c3b5a37b59cfb84642', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98fc353ec7a0f45fcac69109e984cb101073a20', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df86e1cfdb4b2aede1c6ac83d7bb8082219f629', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fb311443553f4698e13a5c65d19c226e2bf93f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0d91720a4922e4a81c92696db38bc8bcd79666', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '650e3618ac9992d7360f98345d389bd32afaf124', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69f669d81cfd6408c3cc7526cdc93f64e8f8d2f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bba4d90ac035dd58dbf8f27cab06a112f60c57', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96fd655b9a9cf6513a57e24c111bcfff666c355c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9122ec59df2ec6550d2e07df070e84edf907a924', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dedf9e4c9285d117d8a5ed3757acdce7ac285144', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feb27be42ca521828067c5030da40d3ec687b9e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873e80b47fe410d9d97eaaa39bfef1047cb6cbe1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '116677cfcfe055ffeb531e28f69c820c0e222186', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '987a6646e22acbe0e489a9fb45db8e2ea139132c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c25a17b3db1c181387d57156fe0b9c954b8e93', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab9bc50e1d29eec9ccd359f89404d27cdf8d5f4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf610bcef9ae743c7201929750eb3e953cb43eff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddf65c6acb6af098a611921a280b46db24c49dce', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69baeabaf7f050bfae14e581d75ecfa3e0492381', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8073d4864f630ff7cdf0673f82238217693aed09', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2696363e1b028799ce8e2189f653dd365e63590', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd1967c6dce5d0624aec7652f6143edc5c2be2a1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb7bf857114b465260a0b23c03d4bcd846c5f83f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37de2902f30f4f151e03b9768e976d1d6488c93', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f57fc9317fcb732cb7c2824b1ce038318984784', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16b4a90e5b9dcc734c608f6ac661bb436a48cc23', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e537a282c49597a573433ad08b4adf996feab51f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '089595ace63e5cb28a90033f08867ca09602597e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d05739394624e9501b709296e9f3a37b3b5c75', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea009cb5f4b8e868cee17c92ffaca40441862c8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48700016a5e4809bda3128e546a60cdead46d19f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90e21bcabf1c2874b60f1d75ecaa2d304b978f81', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '549169d232783f5f3be8b8b62180a4cb66138047', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01bc6ea8bd7295eed7eeb729112cf40b5cc5826d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c60bbbf8b4b51d0e3ccc13e8c80c9e4c4930a06', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7248899cc422d6f2ba0badec5cce1239a659dd7e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423c0cf6edac9e69a7ae9d607a33be9bb13de307', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1329b25861df6831d7e9e0fe979d16a31361beb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36a154595c204e2cb099c5915521d036b1c58111', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07f4fcacfdf2c1ee69b276978c9dc3cbc389d07f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b53b94bde8d4b03c1db3386e459c8c040e4482', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184eb471453abe59380094da714009277bc6a1c0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5ad89476fce1708e6f9d39d30ef8f9ba013220b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de6c7120b021bb51fcfdbbd8435bdaa869bdad0f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a65b5646218d54b19e088e2650ffa80da689901c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d3bca447d81ebbc0088dadd8361cf4a3421c39', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c934903b200db6cc03530adfcb4d51a7514d76cd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726c49e688d2851867071f419546a90ba1560bdd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2590bd29d06297dc0e9eaa37842b91948fa702', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bdf7deb36047216824629a67b490801782c0728', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f2f46c7f5b69f3f29ff7cd8557a740404a214e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e323bc12d8fa31c05dfc4ffc8b48cf50d21dbff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '473a3ec804a27f48550ef2cfe76efa428ae15775', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '511a2bb9ead69844bdefe8cd8b50cfadb17b9378', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '475e9de7c172852bfaf1214bcf08318dd37dbe62', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346d3fe19060853157a59d8cd4e165e4548f884f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04eac58295d92ce2adf58faa0e3425ebc50ad0e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4667c8adc8a28a7a09f3abdd613fa9792ccb322', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c612a94f7a14e453865a87a2b5c951cadbcd35f7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297ad4b9fef15cdff68f59ec43e7f5f3fcbb88fa', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ef68f597f56ddc7fbf254e505c6e642b67b673', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8326d2b0646a2ee2509864dff409dfc64017674d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d2ff164a65e90a46dcd107269cc3236d75970f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be50215b798b93b76f05e03685450daeca1b76b3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d023aba0ef73ee9258db47c53c2e09d67cc8286', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10489a4dc5e7d5c6310e5877273c822302fd471f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6d6565a73f4dd5d7186e0d06e466e73dde3279', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c8b6c8be4544abb079161d70dbf5fb1df90b5d6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5555748040d8e61b7c86bd5b4897c3a66facd3f6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3d4421f27940421bbbf9a47cf575b511e34060', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9399ba82463ac0f6b9e14d4da709283f380806', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '723359e300e544628ccf9217fb536d1bbbde545d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6b6bbd228fbc6f446b499984b92d2f212a4b9c0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1170fee29dd3c83f724e429f85e205e863e0dead', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afeacd43c431a5e2c927995b4a3ad7763a7d0ddb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff7ddca83cf150fe2e65fe5a375d560d5835f9ab', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13774bf3e3ab5e7f19d0d372d88ec35ddcec4db8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '106def9a9e42b4af6e2cedb9623584b1c346119c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cad613b2e9fb88500a75d5ac8320131de565414', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7101d82eea254ebdbdaaed24f59489c97ffd02e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863a7ac6394eda2f9bf567fdc1642f747448d484', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b2d9ba77bcd528393332645deec72ba1966fe1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e47c1376917e53c14c39d2061569a6b31ffee9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '631f1cdb1853da16ea579336492ddadcb6a448d8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d1ee81ad2e5715649ace4ee5b24db9af1fa4898', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e595545a016f98389d8ade4db8e78c0dd3e5df8e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d1106829f44b57d1e3d152b0e95ce8ea8d67c6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e0c97a1d70f4c4545d7e9b78aadfdf10ac1dff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b0570abe8f94b533981fa34bda0a0dd5f01913a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '667b8075d700406cf258adaac6aa9fcadd16b6a4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb7e876799acede2104eb65a2a9118b5ed0f32ac', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ad44a023a95faff87204aa2cf961feac5875dd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7559441b3536871e854a22fd79d87d3b6d4b83d4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b335ff0510a5add20cab4e1eb4ba6ab6c1dc007b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae050dbb6ecdfee479f1ea9de3797c99ffa3c587', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21865dd1474fe9946d2202134eaf53a82b3f24d1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1cfaa30b458c757be794e40180b6a9483e17783', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d8a3535763f1366473cc5284aa19bfd7d7fbcf8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0b95dbea5a9f2f53ad6731cccaba378bc3a3ee', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c690444089d03ea7c70e7c0c58321a627b1d92b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90b1204570d0470da09d12df2aa18fc85cca92d8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c49615cd0843a1270ec6162c38cf4a701f6ca7d5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0481b92ce7ba838a5c46b77915e5e9c04c4565b2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee9f72ab9922ad66b16e47dd65c9098b6cbb78e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fafda54dd961460f99cfcd815476e1f89514094', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52096b9dafb777f4c81ed74d74b81a33a26e9d7e', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e73043295e9d9636097f4adf7e8d27354a7bf5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b20a55d903512582a590bc10eceeb601192eba18', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0373f5762307cf393585f04791202c90761e273f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac50a2b3d5cc1235bef1dbd12717788539647c38', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd131b07753b1ec388db3a8b67620de8ad9e282e4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c750df7328857f99ce79ae4ba582635e29123071', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f19a90731890af82ce1156c00f40117e0a3660', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07588c1a59fb14ec91ab7849333652bb90e02d5b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98d1fdfb2ee26fa77e4d83b680b36d7f085d628a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39af001aa24cbbf97abd03d7e2f6d909c38c7a09', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d3371958340ea9c709609a9a8afb0d2e5883cba', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829c0221b716d21c292d9b6c2e70de2d7f81f5b0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc43004045d89f423bada4b97e15868e480b8168', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4aead47e13130eb00852e85c65db981d7b0fa37', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd623952684968ba6ef45e262a4b8f74a38a8f7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea876203fea1ddc66df8f39b86a73a7286be7ef6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b59dad745c216512544418d98628e7e73e1926', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8504446354fbe7ed324d79d81f61e1f53456abbf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f6cfaffdf89806e7d60e7e20b42937e13cd8e40', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f30b3f71a163e3edc33135474b2db81ab77c675e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68394ed1c8d16b3357c5b0100432673e55cfd9da', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2468395ec6009e0640cccc184709272377405d4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3bb66aedd11a964ebc9db60002dd5114e60ce9c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b69d9e483f1ac4283cd6692d9dc93e05bb9a6e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2df27d16cd25117ae674afe1511b581507cd35', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4084845e2389b2f1257cd9cc4b34fe382322a2c7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8085cb0621458afc2ae9051cd9ed384ee2083d52', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6212c58a5d4d584bbaa2e2a37541221ecec4ede', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea0f14c2c0bb92c16960621f0bd0a8d17ac5b8b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee3592032f0410c2debae416893f382abe839a91', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b49c9615c40f8099b7d585f6adf1f66cdda2782', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54c79bbaae19a134922c5aa9269df865482df719', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffe81a34286413a28fd6136953ce299804d605d7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e16d8592521d35797e2ebd278071a34b968d3b5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfdc94977fb7bbd21a020b84279a01346eb88f67', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8210f9e3fbee852f7f654cf33d7289776973b3e2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cae18611d6214aa5879dae7fad7ddfdecb2697', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4d833144c9526b4e578f3723becfbc36038925f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0902a61e6e1c0f727c888ce4e27e6f73c10b46b9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f4a934d0fe227e0bfa074add030fca6561fbdd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8de0d4841c1931c1bf0ad254cedbda9749a02e6c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba3429f80b1adabbfd0026c421e1dc35fd32a1b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384b5d29e2337f46fdb9e5636fd5080be14e9dd0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '629c01f44514b6f6a74ca09fce25b83b9e64b508', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc44b2f54de82eb9c530b6821c23983174ead72', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d598cd79ea90551d3f87f319b265d88a13420e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee2441d6e9d147dfcd7b8ab005d9cf65b916403', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda610506155b66dda55e57446a84525200c9171', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea02d87285d6befcc545fce6e1e36a738fc5359', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948555b20f3c2d8bfa39863b4df03abc5416c51e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6406f45462179933b0e35282e90cf02481ee997', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9fdfd8c66ca150cc7a5dfea2d6082715ffd92c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09a71e10844e3bc9d71b09f4ac87e2c5bd3130e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e524d1ec0f65e626469d2f0afa1f058267cbc900', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a887308b867e8e9f06c98ea45ab7cd836dbce2cf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c8f93f4268b5f08010a140ebdce63051c57acd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184efcf9d3ac1d01ff6ef64bec80192660427046', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0361c9cf4087d60760798c45fc1cdecf6ee1a9be', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bacb3e5c3b6a1e564bf690898d6d300e87a18d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3b93834f79020890ccfb5dd67936ca2fdc0e60', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c618b9141fc8a05775fc90f25cdce9a2f394a01', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5abf1c454a959531f9a28ac4cb6b20c72db4a471', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6786fb1e0609e4c0d75a78bcc2409865e691e9e5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6fbac7a51e86b0ffa1451fb0408366755f77ba2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0bf9ab8f50518e6b8233ee06e81007de9f0de9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb0ea36acd4d0e2d9e52144f0fcac2018ca17cf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd234a9804b4c664db04ab3a2dde05706a4deaf24', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd354faaa30b76c78fd8d478d5b20d798e0cd4e2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3351b143b1375d6f98cbc0310602984a6c74ce1f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e6492015a0cd856d47575750691d2b71b79e72', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f60ee7be17225d350622bb3c0dd65ac8558882', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a6c26e568afa2f72ee68021a7f996f846ed70f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf60ec9086e823f0a00e46ba29b36118836f96b2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '257c08bcbb3f921b403b2f624bcc163eed439408', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13a03277ea57a865cc844fd66614320707af2309', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '445a4200897efa6088ab70dfff8b1f918265141d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '249ebbfa1dc183c22039321737130ce1a86e3e13', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d36398dd558e08b7aefda7f9d34585ff9cef852', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aebb7af71488750d62969a755c16e51e033c2a7e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07b26d3277d0119c3e44496ce9f4d746f8ef9c4d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5893a83022ffb6b9900e6d1a96419e0bea8fe2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '231bd5b073eb193b56cf6d570f5849401af9e0a0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '681f792eba82e134f9e9e7c9f83bf9fd979c3416', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b3f65b008775ecb83831ba323cf826fa8a02bb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79a685ad27966e5089f061b9a89e0535dfa22e29', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b569c82caed17240126df3c386e09ecc7557866', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df84e83ebfa0f1c380b12c7717294d630e5557fc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9a0f0b106a7baeb0f5aa8a8c2a39424cbb11976', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}]",Omar Shrit,15039782,omar@shrit.me,User,,38,,79,34
453705936,Add support for several platform including but not limited to embedded system,This pull request contains cherry-picked commits from #2415. These commits are related to cross-compilation and embedded system,False,2531,https://api.github.com/repos/mlpack/mlpack/pulls/2531,https://github.com/mlpack/mlpack/pull/2531,closed,393,205,14,254,38,170,5,0,"[{'name': 's: needs review'}, {'name': 's: keep open'}, {'name': 'c: build system'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-07-20 18:17:28+00:00,2021-05-01 12:38:49+00:00,24603681.0,"284 days, 18:21:21","[{'comment_id': 572914013, 'comment_body': ""```suggestion\r\n    #containerRegistry: ''\r\n    command: run\r\n    arguments: '-v $PWD:/opt/share'\r\n    tags: arm64v8/ubuntu\r\n    script: | # maybe the name is different?\r\n        uname -m\r\n        ls\r\n        whoami\r\n```\r\nThis is just an idea---I have no idea if it's right.  The idea would just be to use a pre-existing Docker image and see if you can get it to print any output at all showing you are inside the container."", 'comment_created': datetime.datetime(2021, 2, 9, 14, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 572957724, 'comment_body': 'Let us see if it prints somethings', 'comment_created': datetime.datetime(2021, 2, 9, 14, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 573343733, 'comment_body': '@zoq After the tags, it entered this loop, no information is printed for line 100. Any ideas?', 'comment_created': datetime.datetime(2021, 2, 10, 0, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 576406286, 'comment_body': ""I realize that you've spent a *lot* of time and attempts fighting with this, so I might be jumping in with ideas you tried many days ago... :)\r\n\r\nI was taking a look through the Azure CI documentation, and I think maybe you don't need a `Docker@2` task.  To my understanding, that is a task that can build a container, but technically you don't need to build a container---you only need to run the tests inside of a container.  I can see above (lines 77-85) that you've got a script block that pulls the `arm64v8/ubuntu` container and then builds a new container with that as a base.\r\n\r\nI think maybe it could be simpler if instead of building a Docker image, you ran the `arm64v8/ubuntu` image and just had a script that you ran inside of it.  So imagine having a script file like this:\r\n\r\n```sh\r\n# This script installs all necessary packages and then runs the tests.\r\napt-get update\r\napt-get install -y --allow-unauthenticated cmake\r\ncd /build/\r\n# just a debugging pwd here... I *think* this will be in the root of the build directory, but good to check\r\npwd\r\n# same, check if we are in the build directory\r\nls\r\n\r\n# Now actually run the tests.\r\nCTEST_OUTPUT_ON_FAILURE=1 ctest -T Test .\r\n```\r\n\r\nAnd then in this yaml file, have a script step like this:\r\n\r\n```\r\n  docker pull arm64v8/ubuntu\r\n  docker run -v .:/build/ --rm arm64v8/ubuntu test_script.sh\r\n```\r\n\r\nAnyway, I am not totally sure if that will work, but at least to me it seems like we should be able to avoid building a new Docker image just to run the tests.  I think we can just use the existing `arm64v8/ubuntu` one."", 'comment_created': datetime.datetime(2021, 2, 15, 20, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 576431294, 'comment_body': 'I will give it a try, thanks', 'comment_created': datetime.datetime(2021, 2, 15, 21, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597285317, 'comment_body': 'Could it be better to continue anyway here?  CMAKE_CROSSCOMPILING is standard CMake support, so it seems to me that even if a specific board configuration is not specified, if they still specify all the necessary CMake variables it should still work.', 'comment_created': datetime.datetime(2021, 3, 18, 22, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597285950, 'comment_body': 'Can we still use the CMake library search functionality here?  It seems like all we really need to do here is get GFORTRAN_LIBRARY set right and OPENBLAS_LIBRARIES set to a statically linked version of OpenBLAS for the target architecture.', 'comment_created': datetime.datetime(2021, 3, 18, 22, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597286308, 'comment_body': 'You could integrate this condition with the `CMAKE_SYSTEM_NAME` condition above---that seems like it would be easier. :+1:', 'comment_created': datetime.datetime(2021, 3, 18, 22, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597286779, 'comment_body': 'Perhaps in this situation we can force CMake to use Armadillo in header-only mode?  It would be great to use the system-installed version, since by itself Armadillo is header-only.', 'comment_created': datetime.datetime(2021, 3, 18, 22, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597287262, 'comment_body': ""We do need to use `ARMADILLO_INCLUDE_DIRS` here, since that could actually refer to several directories needed to properly capture Armadillo's dependencies (like HDF5).  Maybe reworking the `FindArmadillo.cmake` script is the better option here?"", 'comment_created': datetime.datetime(2021, 3, 18, 22, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597287527, 'comment_body': 'Since cereal is header only too, I think it should be reasonable to use whatever the user has available on the system.', 'comment_created': datetime.datetime(2021, 3, 18, 22, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597287925, 'comment_body': 'In fact, if you set BOOST_ROOT, you can still call `find_package()` here just fine.  In our case we no longer link with any Boost libraries directly, so we only need to find the header. :+1:', 'comment_created': datetime.datetime(2021, 3, 18, 22, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597289503, 'comment_body': 'Just out of curiosity, is that naming convention (`aarch64-linux-gnu-gcc`) standard across distributions?', 'comment_created': datetime.datetime(2021, 3, 18, 22, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597290153, 'comment_body': 'It looks like `BINUTILS_PATH` is never used?', 'comment_created': datetime.datetime(2021, 3, 18, 22, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597290773, 'comment_body': 'Should we use `BUILD_SHARED_LIBS` as the variable to check here instead?', 'comment_created': datetime.datetime(2021, 3, 18, 22, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597290933, 'comment_body': ""I don't think we need to add this line; correct me if I'm wrong. :+1:"", 'comment_created': datetime.datetime(2021, 3, 18, 22, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597297458, 'comment_body': 'I think there is only one macro, which is singular, so I would go with `The macro is added in [...]`.', 'comment_created': datetime.datetime(2021, 3, 18, 22, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597297857, 'comment_body': ""Looks like you meant to write it's a known issue, also there is a stop missing at the end."", 'comment_created': datetime.datetime(2021, 3, 18, 23, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597298201, 'comment_body': 'Would go with the singular form here, `[...] resolved, the macro can be removed [...]`.', 'comment_created': datetime.datetime(2021, 3, 18, 23, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597300030, 'comment_body': 'Maybe I missed something but does it need to be `openblas`, I thought `blas, lapack` is good as well?', 'comment_created': datetime.datetime(2021, 3, 18, 23, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597300971, 'comment_body': 'I probably miss something, but why do we list specific versions here?', 'comment_created': datetime.datetime(2021, 3, 18, 23, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597301741, 'comment_body': '```suggestion\r\n## standard toolchain. If you download your own toolchain you have to specify\r\n```', 'comment_created': datetime.datetime(2021, 3, 18, 23, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597301998, 'comment_body': '```suggestion\r\n## or it can be specified from command-line.\r\n```', 'comment_created': datetime.datetime(2021, 3, 18, 23, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597302519, 'comment_body': 'Might be useful to break that line down to make it easier to read.', 'comment_created': datetime.datetime(2021, 3, 18, 23, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 597590754, 'comment_body': '@rcurtin  I know, I totally agree with you, using the already installed version will make our life easier, but unfortunately we can not use the system header, in fact we can not use anything from the system root file when cross compiling.\r\nThe reason for this is related to C/C++ headers and anything related to (binaries, libraries (libpthread). etc.). Knowing that C++ headers for aaarch64 are different from the x86, therefore we need to tell the CMake where is the new root for C++ libraries and for relative dependencies. \r\nI know, this is the main problem when cross compiling, we need to keep two root file systems, one for the host and one for the target. Usually cross-compiling platforms such as `buildroot` download all the dependencies for host and target and respectively compile and cross-compile them one by one in order to create a full Linux system image.\r\nWhat is good in our case, it that we have to download only-headers libraries, with no requirement for cross compilation. \r\nThe only cross-compiling we need to do is for OpenBLAS.\r\nLet me know what do you think, if you have a better idea let me know :+1:\r\n\r\nThe second main issue here is related to the toolchain, the user has  to install the toolchain, and I suppose also that is if the user want to cross-compile, then the user has a relative good knowledge about toolchains. \r\n\r\nThe best solution I can see for a cross compilation issue can be similar to what build `buildroot` is doing, which is to provide a config file, or ncurses `make menueconfig` similar to how to configure the Linux kernel. The user will do `make meuconfig`, choose the target platform, processor type, and that is all. `Makefile will take care of everything else. \r\n\r\n@zoq I matched the version here to be the same as the one in `download_dependencies.sh` script in `board directory.\r\nThese are the default values, otherwise the user can set a new path for these deps\r\n', 'comment_created': datetime.datetime(2021, 3, 19, 11, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597592987, 'comment_body': 'Exactly :+1: ', 'comment_created': datetime.datetime(2021, 3, 19, 11, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597593104, 'comment_body': 'I know, I agree totally with you, but unfortunately as detailed above we can not use `find_package()` since it is going to search in the system header.', 'comment_created': datetime.datetime(2021, 3, 19, 11, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597593772, 'comment_body': 'Same as above :(', 'comment_created': datetime.datetime(2021, 3, 19, 11, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597593832, 'comment_body': 'Same as above :(', 'comment_created': datetime.datetime(2021, 3, 19, 11, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597599274, 'comment_body': 'Agreed, I will remove it.', 'comment_created': datetime.datetime(2021, 3, 19, 11, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597599373, 'comment_body': 'I will check :+1: ', 'comment_created': datetime.datetime(2021, 3, 19, 11, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597600210, 'comment_body': 'It should be the same, this should be different only when using a different cross-compiler toolchain.\r\nThe main issue sometimes is the missing symbolic link toward the `aarch64-linux-gnu-gcc`, therefore I have added the option to add the version at the end. For instance, you might find `aarch64-linux-gnu-gcc-5` instead of `aarch64-linux-gnu-gcc`', 'comment_created': datetime.datetime(2021, 3, 19, 11, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597601907, 'comment_body': 'Agreed, At first, I thought I will add one comment for all macros, and then I added a comment for each macro.', 'comment_created': datetime.datetime(2021, 3, 19, 11, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597602251, 'comment_body': 'Because we have to download them and cross compile them before doing anything, if you would like we can add `blas` and `lapack` but this should mean that we need to add them to the auto-downloader and cross compile them for each architecture, even if at the end we are going to use the best one `OpenBLAS` usually. ', 'comment_created': datetime.datetime(2021, 3, 19, 11, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597602658, 'comment_body': 'I tried to, but CMake does not like it, is there any way to break lines in CMake?', 'comment_created': datetime.datetime(2021, 3, 19, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597603025, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 3, 19, 11, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597731632, 'comment_body': 'I do not mind if it gives the same results', 'comment_created': datetime.datetime(2021, 3, 19, 14, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 597825812, 'comment_body': 'Right, I see that we need to use the system C++ headers specific to the target host, so I agree that a user will need to tell us where those are.  (I guess that is part of the toolchain file.)  But we should still be able to use, e.g., cereal, Boost, and Armadillo headers that are installed on the system.  Maybe I overlooked something?', 'comment_created': datetime.datetime(2021, 3, 19, 16, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597826713, 'comment_body': ""Ok, let's work out the reply above and we can then return to this with the conclusion. :+1:"", 'comment_created': datetime.datetime(2021, 3, 19, 16, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597828656, 'comment_body': 'I think that would be better, or alternately perhaps an additional variable to set if the user wants statically-compiled programs too.  We may also want to consider `CMAKE_FIND_LIBRARY_SUFFIXES` too: https://blog.kitware.com/creating-static-executables-on-linux/ (since whenever making a static program all dependencies must be statically linked too).', 'comment_created': datetime.datetime(2021, 3, 19, 16, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 597829402, 'comment_body': 'Auto-downloaders should probably be optional---so if the user wants, they can provide their own statically-cross-compiled dependency.  It might be a little bit more CMake work to get that support, though.', 'comment_created': datetime.datetime(2021, 3, 19, 16, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 598039413, 'comment_body': 'Thanks for clarifying this for me today---I had not realized that if, e.g., `CEREAL_INCLUDE_DIR` is set to `/usr/include/` that this will translate into `-I/usr/include/`, which is a disaster for cross-compilation. :)  My thinking is that we can provide an auto-downloader for convenience, but also we should make it easy so that a user who knows what they are doing can already have set up all the dependencies in their cross-compilation environment (or elsewhere) and then can specify, e.g., `CEREAL_INCLUDE_DIR`, `ARMADILLO_INCLUDE_DIR`, etc. without problems. :+1:', 'comment_created': datetime.datetime(2021, 3, 20, 1, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 598039508, 'comment_body': 'For this (and other comments like it), I think we can use `find_package()` just fine, expecting either that the user has (a) set `ARMADILLO_INCLUDE_DIR` correctly, (b) installed Armadillo to the root of their cross-compilation toolchain include directory, (c) used the auto-downloader, which can set `ARMADILLO_INCLUDE_DIR` before the `find_package()` call.', 'comment_created': datetime.datetime(2021, 3, 20, 1, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 598097067, 'comment_body': 'I will give it a try, it should work.', 'comment_created': datetime.datetime(2021, 3, 20, 11, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 598320962, 'comment_body': ""@rcurtin I test it locally with ensmallen since it doesn't have `if(NOT CMAKE_CROSSCOMPILING)` before `find_package()`.\r\nIt can be possible to remove the `if(NOT CMAKE_CROSSCOMPILING)` but there are three cases:\r\n1) if ensmallen is installed manually, then it is fine, since it is installed in `/usr/local/include`\r\n2) if ensmallen is installed via system package manager, then it will be found in `/usr/include` which will show the above issue. `-I/usr/include/`\r\n3) if ensmallen is not found, it will be downloaded automatically which is also fine too.\r\n\r\nThis will be the same issue with `stb`.\r\n\r\nTherefore, in order to avoid being in case 2) I have to put `if(NOT CMAKE_CROSSCOMPILING)` before `find_package` for the two above cases.\r\n\r\nAlso for Armadillo, when using `find_package()` without `if(NOT CMAKE_CROSSCOMPILING)` it sets `ARMADILLO_LIBRARIES=/usr/lib/libarmadillo.so`\r\n\r\nAnythoughts?"", 'comment_created': datetime.datetime(2021, 3, 21, 18, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 598328547, 'comment_body': 'Does your cross-compilation setup set `CMAKE_FIND_ROOT_PATH` to something other than the default?  If `CMAKE_FIND_ROOT_PATH` is set correctly, then I believe `/usr/include/` should not be searched.', 'comment_created': datetime.datetime(2021, 3, 21, 19, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 598830794, 'comment_body': 'Yes, `CMAKE_FIND_ROOT_PATH`, is correctly set, I find the issue it is coming from `CMAKE_SYSROOT`. \r\nEven I set it to empty, it has a default value inside, in order to change the default value, I have set the `SYSROOT` to the same value of `FIND_ROOT_PATH`.\r\nI removed all these `if(NOT CMAKE_CROSSCOMPILING)`. It is working fine now. :+1: \r\n', 'comment_created': datetime.datetime(2021, 3, 22, 15, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 598834529, 'comment_body': 'I added an optional autodownloader, it should be set by the user if the deps are not available. The default value is set to `OFF`', 'comment_created': datetime.datetime(2021, 3, 22, 15, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 599582372, 'comment_body': ""To make this easier on users, you could either set it to `${CMAKE_SYSROOT}`, or maybe you might be able to remove it too.  I'm using this as an example:\r\n\r\nhttps://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-for-linux\r\n\r\nand they don't specify `CMAKE_FIND_ROOT_PATH` there, so maybe we can get away without it?"", 'comment_created': datetime.datetime(2021, 3, 23, 13, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 599583198, 'comment_body': ""No need for a line wrap here?  Also, I think the `echo` is wrong---we don't need to build Boost, since we're only using headers from it."", 'comment_created': datetime.datetime(2021, 3, 23, 13, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 599587088, 'comment_body': ""I'd suggest refactoring this script a little bit so that we can use it directly from CMake.  Actually it is not too hard to download a file natively from CMake, and then unpack it too.  You could use `execute_process` for the one instance where you have to build (OpenBLAS).\r\n\r\nIf you had a separate CMake function or script for each individual download, then you could only download the dependencies that you need.  For instance, just like the ensmallen auto-downloader, we try to use `find_package()`, and if that fails, then we do the download and unpack into `build/deps/`.\r\n\r\nIn fact, if you got really fancy, you could make a CMake macro that tries to call `find_package()` for a given package, and then downloads it from a given URL if it isn't found.\r\n\r\nOn top of that, actually downloading dependencies is not specific to cross-compiling.  If we are going through the effort to make an auto-downloader for each of our dependencies, then we can make this available to any user, which could be nice!"", 'comment_created': datetime.datetime(2021, 3, 23, 13, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 599587963, 'comment_body': 'We can make these parameters set by CMake before calling, which could be nice.  Perhaps in `flags-config.cmake`, we can also set the necessary OpenBLAS configuration options.', 'comment_created': datetime.datetime(2021, 3, 23, 13, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 599588284, 'comment_body': '```suggestion\r\n```\r\nNo need for the extra line. :)', 'comment_created': datetime.datetime(2021, 3, 23, 13, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611959363, 'comment_body': 'Very nice!  Great to have this functionality split out.  It significantly simplifies the main `CMakeLists.txt` for sure.\r\n\r\nA comment though; I know it is CMake and not C++, but would you mind adding some comments discussing what the function does?  We have quite a sizable CMake codebase at this point so we should do our best to keep it maintainable. :)', 'comment_created': datetime.datetime(2021, 4, 12, 21, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611960070, 'comment_body': ""This may not work on Windows... maybe we should check to see `if (MSVC)` or something like that and disallow auto-downloading if so?  (I suppose technically a MinGW environment might have `make` on the path.  But MSVC probably won't, at least.)"", 'comment_created': datetime.datetime(2021, 4, 12, 21, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611960553, 'comment_body': 'You might want to use a glob here, just because it may not be `.a` on all systems.  One example might be the MinGW-based Windows environment I referenced in the last comment, where it could be .a.dll or .dll.a or something like that.  (I am not 100% sure.)', 'comment_created': datetime.datetime(2021, 4, 12, 21, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611962077, 'comment_body': ""Instead of `set()`, you can probably use `find_library()` to set `GFORTRAN_LIBRARY` and `PTHREAD_LIBRARY`.  This way, if a user specifies either variable, CMake won't actually search for it; but if they don't specify the variable, then CMake will search all of its usual directories (including `CMAKE_SYSROOT` I think)."", 'comment_created': datetime.datetime(2021, 4, 12, 21, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611963589, 'comment_body': 'When we call `find_package()` the second time, perhaps we should mark it as `REQUIRED`?\r\n\r\nAlso, we need a little bit of special handling---some packagers need to know that the build will not use any HTTP or anything, so we have the `DISABLE_DOWNLOADS` CMake flag.  So, perhaps it is better to have some flow like this:\r\n\r\n```\r\nfind_package(Boost ""${BOOST_VERSION}"")\r\nif (NOT Boost_FOUND AND NOT DISABLE_DOWNLOADS)\r\n  get_deps(...)\r\nendif ()\r\nfind_package(Boost REQUIRED)\r\n```\r\n\r\nI\'m not sure the syntax is exactly right, but you get the idea I think. :)', 'comment_created': datetime.datetime(2021, 4, 12, 21, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611964071, 'comment_body': 'Maybe we should rename `BUILD_SHARED_LIBS` to `BUILD_SHARED_OBJECTS` (or add another configuration flag)?  Technically these command-line programs are not libraries.', 'comment_created': datetime.datetime(2021, 4, 12, 21, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611964705, 'comment_body': 'This code is really specific to each library... it would be better if the standalone function could take in, say, the name of the variable that needs to be set as an argument or something like that.  That way we could remove all code specific to each particular dependency from this function, and have that specific to the place where `get_deps()` is called.  Let me know what you think. :)', 'comment_created': datetime.datetime(2021, 4, 12, 21, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 611965168, 'comment_body': 'I guess we might need to include the package name as a parameter, so that we can format this error message correctly.', 'comment_created': datetime.datetime(2021, 4, 12, 21, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 612259546, 'comment_body': 'I tried to use `find_library ()` it never worked, I am happy to find an example to show me if it will work one day.', 'comment_created': datetime.datetime(2021, 4, 13, 8, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 612267305, 'comment_body': 'I know, I have thought about that, but at the end I have to set the `INCLUDE_DIR` for each library. Do you have an idea to do this? is there anyway to return a value from `CMake` functions ?', 'comment_created': datetime.datetime(2021, 4, 13, 9, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 612272490, 'comment_body': 'Of course, I will add `GLOB` here, but are Windows users supposed to do cross compilation? I mean it would very hard to download toolchain and use it there', 'comment_created': datetime.datetime(2021, 4, 13, 9, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 613631020, 'comment_body': ""It shouldn't be too hard: https://cmake.org/cmake/help/latest/command/find_library.html\r\n\r\nI think that something like this could work:\r\n\r\n```\r\nfind_library(GFORTRAN_LIBRARY NAMES libgfortran.a gfortran.a libgfortran.dll.a gfortran libgfortran)\r\n```\r\n\r\nThis may be helpful too: https://cmake.org/pipermail/cmake/2010-December/041326.html\r\n\r\nI haven't tried that command directly, but the way it should work is that if the user specifies `GFORTRAN_LIBRARY` on the command line, `find_library()` will do nothing.  In this case, I would expect that if you set `CMAKE_SYSROOT` to the root of the buildroot installation, it *should* be able to find gfortran... it might take a little debugging and playing with it to get it right, but it definitely should work. :+1:"", 'comment_created': datetime.datetime(2021, 4, 14, 22, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 613631549, 'comment_body': ""I'm not sure, but a Windows user might try.  I think it's reasonable to avoid testing it, but where we can it would be great to try not to be specific to Linux or OS X.  I think getting globbing to work should be straightforward... I hope. :)"", 'comment_created': datetime.datetime(2021, 4, 14, 22, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 613632301, 'comment_body': 'This is the kind of workaround I was thinking could be used here: https://cmake.org/pipermail/cmake/2008-November/025423.html\r\n\r\nYou just add an additional variable to the function that\'s a ""return variable"", then at the calling site, just add another command to set the desired variable name to have the value of the ""return variable"". :+1:', 'comment_created': datetime.datetime(2021, 4, 14, 22, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 613949958, 'comment_body': 'Thanks I was able to find a solution for this one, I did not push anything since I am waiting for the `stb.tar.gz` to get merged', 'comment_created': datetime.datetime(2021, 4, 15, 10, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 613951758, 'comment_body': 'I will give it a try thanks, I wrote something similar even with specifying the path, I did not try to add all cases of gfortran, I will add this one and see what will happen :+1: ', 'comment_created': datetime.datetime(2021, 4, 15, 10, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 614139594, 'comment_body': 'Are you sure, this variable only to check if mlpack and other dependencies are to build as `.a` therefore allowing to build in static. Let me know what do you think', 'comment_created': datetime.datetime(2021, 4, 15, 14, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615181408, 'comment_body': ""Maybe it's worth pointing out that we are expecting the dependency to be a .tar.gz or a .tar.xz?  If you wanted, it might be useful to add a quick check at the start of the function and throw an error if the arguments aren't the expected form."", 'comment_created': datetime.datetime(2021, 4, 17, 0, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615181455, 'comment_body': '```suggestion\r\ninclude(CMake/Autodownload.cmake)\r\n\r\n```\r\nSeems like it would be a good idea to add an empty line here.', 'comment_created': datetime.datetime(2021, 4, 17, 0, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615181581, 'comment_body': 'You might want to do a different kind of check here.  I found that if I reconfigure with cmake, I need to specify `BOARD_NAME` again.  I\'m not sure exactly what the right solution is though... maybe `set(BOARD_NAME ""${BOARD_NAME}""`?', 'comment_created': datetime.datetime(2021, 4, 17, 0, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615181695, 'comment_body': '```suggestion\r\n    find_package(Bfd)\r\n    find_package(LibDL)\r\n    if(LIBBFD_FOUND AND LIBDL_FOUND)\r\n      set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -rdynamic"")\r\n      set(MLPACK_INCLUDE_DIRS ${MLPACK_INCLUDE_DIRS} ${LIBBFD_INCLUDE_DIRS}\r\n          ${LIBDL_INCLUDE_DIRS})\r\n      set(MLPACK_LIBRARIES ${MLPACK_LIBRARIES} ${LIBBFD_LIBRARIES}\r\n          ${LIBDL_LIBRARIES})\r\n      add_definitions(-DHAS_BFD_DL)\r\n    else()\r\n```\r\nI don\'t think the extra indentation is needed.', 'comment_created': datetime.datetime(2021, 4, 17, 0, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615181839, 'comment_body': 'Very nice!  We might consider using a link we control, since the versions available on Sourceforge change over time.  Maybe you want one from `files.mlpack.org`?  (I have a bunch hosted there already.)', 'comment_created': datetime.datetime(2021, 4, 17, 0, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615181907, 'comment_body': 'The documentation at the top says `INCLUDE_DIR`; I guess we should change it to `GENERIC_INCLUDE_DIR`?', 'comment_created': datetime.datetime(2021, 4, 17, 0, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182003, 'comment_body': ""Also, I'm not sure if it makes sense to have it be a cached variable.  It might be sufficient to just set it with `PARENT_SCOPE`.  When users use the CMake GUI (like on Windows, or you could also use that from Linux I think), it shows all `CACHE` variables, but there's probably no reason for them to see that."", 'comment_created': datetime.datetime(2021, 4, 17, 0, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182231, 'comment_body': ""These are still specific---do you think that we can factor them out too?  For Boost at least, it might make sense to return something like `UNPACKED_ROOT` instead of `GENERIC_INCLUDE_DIR`, by e.g., setting `UNPACKED_ROOT` to `${CMAKE_BINARY_DIR}/deps/${DEPENDENCY_DIR}/`.  Then, at the higher level, you can just add `include/` if needed (and for Boost it's not needed) to get the desired include directory."", 'comment_created': datetime.datetime(2021, 4, 17, 0, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182354, 'comment_body': ""Shouldn't this be inside of the if?  I think we only want to set these if we actually found STB."", 'comment_created': datetime.datetime(2021, 4, 17, 1, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182459, 'comment_body': ""I think we also need to consider the `DISABLE_DOWNLOADS` variable here---if the user told us they don't want to download anything if it's not available, we should respect that. :+1:"", 'comment_created': datetime.datetime(2021, 4, 17, 1, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182611, 'comment_body': 'Is this ever used anywhere?  I think if GCC is being used, CMake actually has variables to get the version available anyway.', 'comment_created': datetime.datetime(2021, 4, 17, 1, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182700, 'comment_body': 'It could be worth adding some documentation to the top of this file, since users may need to modify it for their particular system.', 'comment_created': datetime.datetime(2021, 4, 17, 1, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182826, 'comment_body': 'https://stackoverflow.com/questions/7637539/how-to-split-strings-across-multiple-lines-in-cmake\r\n\r\nYou could also do something like this:\r\n\r\n```\r\nset (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -Os"")\r\nset (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fdata-sections"")\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 4, 17, 1, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182898, 'comment_body': ""Was it worthwhile to use the gold linker in testing?  I remember doing some testing some time back and we found that it wasn't actually all that useful.  But maybe the situation is different for embedded devices?"", 'comment_created': datetime.datetime(2021, 4, 17, 1, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615182954, 'comment_body': ""```suggestion\r\n```\r\nI think this line doesn't do anything."", 'comment_created': datetime.datetime(2021, 4, 17, 1, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615183094, 'comment_body': 'I suppose... we should point out somewhere that if `BUILD_SHARED_LIBS` is `OFF`, then even the command-line programs will be linked statically.  Either that, or just add another option `BUILD_SHARED_PROGRAMS` or something.  I think either way is fine.', 'comment_created': datetime.datetime(2021, 4, 17, 1, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615183115, 'comment_body': '```suggestion\r\n    target_link_libraries(mlpack_${name}\r\n      mlpack\r\n      ${ARMADILLO_LIBRARIES}\r\n      ${COMPILER_SUPPORT_LIBRARIES}\r\n    )\r\n```\r\nForgotten indent. :)', 'comment_created': datetime.datetime(2021, 4, 17, 1, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615183378, 'comment_body': '```suggestion\r\n                std::map<int,\r\n                         std::vector<DualCoverTreeMapEntry>,\r\n                         std::greater<int>>& referenceMap);\r\n```\r\nOops, I made this line too long...', 'comment_created': datetime.datetime(2021, 4, 17, 1, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615183417, 'comment_body': '```suggestion\r\n                std::map<int,\r\n                         std::vector<DualCoverTreeMapEntry>,\r\n                         std::greater<int>>& referenceMap,\r\n```', 'comment_created': datetime.datetime(2021, 4, 17, 1, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615183453, 'comment_body': '```suggestion\r\n                std::map<int,\r\n                         std::vector<DualCoverTreeMapEntry>,\r\n                         std::greater<int>>& childMap);\r\n```', 'comment_created': datetime.datetime(2021, 4, 17, 1, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615183586, 'comment_body': '```suggestion\r\n                          std::map<int,\r\n                                   std::vector<DualCoverTreeMapEntry>,\r\n                                   std::greater<int>>& referenceMap);\r\n```', 'comment_created': datetime.datetime(2021, 4, 17, 1, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615183665, 'comment_body': ""```suggestion\r\n  )\r\n```\r\nThis poor parentheses didn't get indented. :smile: "", 'comment_created': datetime.datetime(2021, 4, 17, 1, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615236663, 'comment_body': 'Definitely, :+1: I wanted to ask you if this is possible :smile: ', 'comment_created': datetime.datetime(2021, 4, 17, 10, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615237153, 'comment_body': 'I thought about that, but I thought that if we are going to remove boost before mlpack 4.0,  this line is definitely going to be removed, therefore, would it worths investing refactoring since it is going to be removed in a couple of months?\r\nIf you think it should, I am happy to refactor it.\r\nFor Openblas, I will see what I can do.\r\n\r\nLet me know what do you think', 'comment_created': datetime.datetime(2021, 4, 17, 10, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615237825, 'comment_body': 'It has better support for `flto`optimization which help in reducing the size a little more, but it is very complicated to do that on Ubuntu 16, since the golden linker did not have support for `lto` inside. However, in recent version it is integrated in the golden linker. \r\nIn the future (when mlpack moves to a recent version of Ubutnu) this will allow us to use the golden linker.', 'comment_created': datetime.datetime(2021, 4, 17, 10, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615238886, 'comment_body': 'Frankly, this variable is only for Ubuntu users that are usually on docker container who might use the default toolchain instead of buildroot, therefore, in this particular case, `aarch64-linux-gnu-gcc` might not exist, but instead it is often named as `aarch64-linux-gnu-gcc-5` with no dynamic link toward  `aarch64-linux-gnu-gcc`. In this case, the user might not be able at all to find the cross compiler, therefore I have added this variable, so the user can use it in this particular case', 'comment_created': datetime.datetime(2021, 4, 17, 10, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615257968, 'comment_body': 'I remember I have tried `PARENT_SCOPE` but it did not work, I can give it a try if you want.', 'comment_created': datetime.datetime(2021, 4, 17, 13, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615260268, 'comment_body': 'Armadillo is now `.tar.gz` since it is downloaded from mlpack website, therefore, there is no reason to have `.tar.xz` (All dependencies are `.tar.gz` and probably it will never change in the future) I will add a comment to mention this.', 'comment_created': datetime.datetime(2021, 4, 17, 14, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615421648, 'comment_body': 'Yes, we definitely should not set these as cache variables.', 'comment_created': datetime.datetime(2021, 4, 18, 16, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615421737, 'comment_body': ""It seems like it should only take a couple minutes, but if you want to wait until Boost is removed that's fine too.  Just make sure you document in the comments in the code, and maybe in the open issues we have, that this little bit needs to be removed too.  It would be really easy to forget about it."", 'comment_created': datetime.datetime(2021, 4, 18, 16, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615421811, 'comment_body': ""Shouldn't they just override `CMAKE_CXX_COMPILER` then?  (Perhaps by modifying the toolchain file?)"", 'comment_created': datetime.datetime(2021, 4, 18, 16, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615421864, 'comment_body': 'Cool, thanks for the explanation. :+1:', 'comment_created': datetime.datetime(2021, 4, 18, 16, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615424377, 'comment_body': 'I will see what I can do :+1: ', 'comment_created': datetime.datetime(2021, 4, 18, 16, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615424686, 'comment_body': 'Of course, my initial thought was to reduce the user need to modify the toolchain file, but since it is a very rare case it will be more logical to remove the variable, and add mention this in documentation', 'comment_created': datetime.datetime(2021, 4, 18, 16, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615424916, 'comment_body': 'I frankly have no idea what to do here, I will think of a solution for it.', 'comment_created': datetime.datetime(2021, 4, 18, 16, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615425342, 'comment_body': 'I would prefer to keep and remove it when boost is removed, for two reasons, 1) there will force me to check the entire code base for boost cleaning, 2) line 24 from the same file is related to `boost` since the name of `boost` package is different from the other library, and this one should be definitely removed. Thus, there will be a check on this file for `boost`. :+1: \r\nI will add a comment too in this file to keep me aware that I have to clean boost once it is no longer used by mlpack.\r\n', 'comment_created': datetime.datetime(2021, 4, 18, 16, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615426316, 'comment_body': 'Sounds good to me. :+1:', 'comment_created': datetime.datetime(2021, 4, 18, 17, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615431904, 'comment_body': 'I have added a comment in the main `CMakeLists.txt` Let me know if this makes sense.', 'comment_created': datetime.datetime(2021, 4, 18, 17, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615432271, 'comment_body': '@rcurtin Would you mind if I declare it outside `CMAKE_CROSSCOMPILNG` with the set of the above options? Basically move it to line 20?', 'comment_created': datetime.datetime(2021, 4, 18, 17, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615456442, 'comment_body': 'Yeah, Agreed, the board will only specify the flags, therefore, it is not necessary neither important. \r\nOf course, it is better to specify the board, but not obligatory.\r\nI will refactor this part', 'comment_created': datetime.datetime(2021, 4, 18, 21, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615908905, 'comment_body': 'Yeah, I think that you will have to do that.  I think `option()` only supports `Bool` types though.', 'comment_created': datetime.datetime(2021, 4, 19, 14, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615911206, 'comment_body': '```suggestion\r\n      ""Compile shared libraries (if OFF, static libraries and binaries are compiled)."" OFF)\r\n```\r\nWe should update this documentation too, otherwise users may not see it (I doubt that many open `CMakeLists.txt`).', 'comment_created': datetime.datetime(2021, 4, 19, 14, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615911323, 'comment_body': '```suggestion\r\n      ""Compile shared libraries (if OFF, static libraries and binaries are compiled)."" OFF)\r\n```', 'comment_created': datetime.datetime(2021, 4, 19, 14, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615911543, 'comment_body': '```suggestion\r\n      ""Compile shared libraries (if OFF, static libraries and binaries are compiled)."" ON)\r\n```', 'comment_created': datetime.datetime(2021, 4, 19, 14, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615912066, 'comment_body': ""Looks great!  I'm glad these could be simplified. :+1:"", 'comment_created': datetime.datetime(2021, 4, 19, 14, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615919416, 'comment_body': 'I have already refactored this part, it is just `set()`.\r\nLet me know what do you think, I think I have ll discussions resolved.\r\nAll tests here are passing, I am starting one on Jenkins', 'comment_created': datetime.datetime(2021, 4, 19, 14, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615920517, 'comment_body': '```suggestion\r\n  set(MLPACK_LIBRARIES ${MLPACK_LIBRARIES} ${ARMADILLO_LIBRARIES})\r\n```\r\nThis is a bit of an important point: Armadillo can be configured with or without the ""wrapper""; this is controlled by the `ARMA_USE_WRAPPER` macro in `include/armadillo_bits/config.hpp`.  If `ARMA_USE_WRAPPER` is set, then we can link against only `libarmadillo.so` (or whatever the object is called).  If `ARMA_USE_WRAPPER` is not set---or if `ARMA_DONT_USE_WRAPPER` is set, then we have to link against all the dependencies of Armadillo instead.  Depending on the user\'s configuration, this could be more than just OpenBLAS; please take a look at the details of `FindArmadillo.cmake` to understand what\'s going on. :+1:\r\n\r\nIn the case where the autodownloader is being used, `ARMA_USE_WRAPPER` will not be set, as you are just using the sources directly in `include/` from the unpacked tarball.  But what happens if the autodownloader is not being used, and `ARMA_USE_WRAPPER` is true?  In this case, I suppose we need to find the statically-linked Armadillo library (`libarmadillo.a` or similar).\r\n\r\nI think maybe we want to put some of the logic here into `FindArmadillo.cmake`.  Really the only difference between `CMAKE_CROSSCOMPILING` being true or false is whether we want static libraries or not to link against.  So perhaps we should modify `FindArmadillo.cmake` to take the variable `BUILD_SHARED_LIBS` into account, and if it\'s `OFF`, then search for static libraries (and also add gfortran and pthread).\r\n\r\nIdeally, we should have as little as possible specific to `CMAKE_CROSSCOMPILING`---really that just controls whether or not we want static linking and what the compiler/toolchain is.  But our actual CMake logic should be separated from that.', 'comment_created': datetime.datetime(2021, 4, 19, 14, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615922366, 'comment_body': ""Do you really need to set `AND (NOT CMAKE_CROSSCOMPILING)`?  I think what will happen in most cases is just that Bfd or LibDL can't be found, and then nothing happens."", 'comment_created': datetime.datetime(2021, 4, 19, 14, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615923140, 'comment_body': 'Actually I am not sure it is necessary to have these lines here.  If we call `find_library( ... )` later to set the value of `GFORTRAN_LIBRARY`, then that will create the cache entry.', 'comment_created': datetime.datetime(2021, 4, 19, 14, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 615934355, 'comment_body': 'If this is the case, then I am okay with removing it, I have only added it for precaution ', 'comment_created': datetime.datetime(2021, 4, 19, 15, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615935225, 'comment_body': 'Exactly, there is no need for these ones here', 'comment_created': datetime.datetime(2021, 4, 19, 15, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 615936684, 'comment_body': ""Give it a shot and let's see what happens. :)  We could also add an option like `SHOW_BACKTRACES` and just set that to `OFF` as the default if we are cross-compiling (and `ON` otherwise), if we do have problems."", 'comment_created': datetime.datetime(2021, 4, 19, 15, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616646855, 'comment_body': 'I worried that this would override any value of `BOARD_NAME` that had been set, but then I found this in the CMake documentation:\r\n\r\n> Since cache entries are meant to provide user-settable values this does not overwrite existing cache entries by default.\r\n\r\nSo, I guess this is just fine. :)', 'comment_created': datetime.datetime(2021, 4, 20, 12, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616647737, 'comment_body': ""```suggestion\r\nset(MLPACK_INCLUDE_DIRS ${MLPACK_INCLUDE_DIRS} ${ARMADILLO_INCLUDE_DIRS})\r\n```\r\nAh, just like `ARMADILLO_LIBRARY` vs. `ARMADILLO_LIBRARIES`, we might find multiple include directories for Armadillo's dependencies, so we need to use `ARMADILLO_INCLUDE_DIRS` here. :+1:"", 'comment_created': datetime.datetime(2021, 4, 20, 12, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616648957, 'comment_body': ""I think we need an `if (STB_FOUND)` or similar here; otherwise, we might be adding `STB_IMAGE-NOTFOUND` to the list of include directories.  I'm not 100% sure on that; it's something worth checking though.  You could see what happens by configuring with `-DDISABLE_DOWNLOADS=ON` and making sure STB is not available on the system, then printing `MLPACK_INCLUDE_DIRS` at the end of the CMake configuration."", 'comment_created': datetime.datetime(2021, 4, 20, 12, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616651046, 'comment_body': 'Agreed, I think there has been `STB_FOUND `', 'comment_created': datetime.datetime(2021, 4, 20, 12, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 616651178, 'comment_body': 'Hmm, I realized that if the user set `DISABLE_DOWNLOADS`, we might end up not issuing an error if Boost isn\'t found.  Here\'s another strategy that will use the default `find_package()` errors:\r\n\r\n```\r\nset(Boost_NO_BOOST_CMAKE 1)\r\nif (DISABLE_DOWNLOADS)\r\n  find_package(Boost ""${BOOST_VERSION}"" REQUIRED)\r\nelseif (NOT DISABLE_DOWNLOADS)\r\n  find_package(Boost ""${BOOST_VERSION}"")\r\n  if (NOT Boost_FOUND)\r\n    get_deps(https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.gz boost boost_1_75_0.tar.gz)\r\n    find_package(Boost REQUIRED)\r\n  endif ()\r\nendif ()\r\n```\r\n\r\nProbably we should use that pattern (or similar) for all instances where we use `get_deps()` to get the dependency if it\'s not available.', 'comment_created': datetime.datetime(2021, 4, 20, 12, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616651339, 'comment_body': '```suggestion\r\n## This file handles cross-compilation configurations for aarch64,\r\n```\r\n:)', 'comment_created': datetime.datetime(2021, 4, 20, 12, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616654136, 'comment_body': 'Totally agreed, otherwise we will run into a situation, where libraries are not found, and the user has disabled download', 'comment_created': datetime.datetime(2021, 4, 20, 12, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 616750982, 'comment_body': 'I think that you have to add `ARMADILLO_LIBRARIES` regardless of whether or not cross-compiling is being done, since `ARMADILLO_LIBRARIES` could contain other things like HDF5, SuperLU, etc.', 'comment_created': datetime.datetime(2021, 4, 20, 14, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616751984, 'comment_body': 'I think you have to have the `find_package()` here---if `DISABLE_DOWNLOADS` is `OFF`, then before this line we have not called `find_package(Boost ...)` at all.', 'comment_created': datetime.datetime(2021, 4, 20, 14, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616764649, 'comment_body': '```suggestion\r\n## This function auto-downloads mlpack dependencies.\r\n## You need to pass the LINK to download from, the name of\r\n## the dependency, and the name of the compressed package such as\r\n## armadillo.tar.gz\r\n## At each download, this module sets a GENERIC_INCLUDE_DIR path,\r\n## which means that you need to set the main path for the include\r\n## directories for each package.\r\n```', 'comment_created': datetime.datetime(2021, 4, 20, 14, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616765462, 'comment_body': '```suggestion\r\n      # Clean this line when boost is removed.\r\n```', 'comment_created': datetime.datetime(2021, 4, 20, 14, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616766296, 'comment_body': '```suggestion\r\n      # (it works only if the file is present as .tar.gz).\r\n```', 'comment_created': datetime.datetime(2021, 4, 20, 14, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616768500, 'comment_body': '```suggestion\r\n                ""Problem unpacking ${DEPS_NAME}! Expected only one directory ${DEPS_NAME};. Try to remove the directory ${CMAKE_BINARY_DIR}/deps and reconfigure."")\r\n```\r\n\r\nNot sure what `reconfiguring` means in this context.', 'comment_created': datetime.datetime(2021, 4, 20, 14, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616770300, 'comment_body': '```suggestion\r\nif (CMAKE_CROSSCOMPILING)\r\n  include(board/flags-config.cmake)\r\n  if (BOARD_NAME STRGREATER  """")\r\n    flags(${BOARD_NAME})\r\n  endif()\r\nendif()\r\n```\r\n\r\nMight be a good idea to use the same style across the file, I think above you used another style as well.', 'comment_created': datetime.datetime(2021, 4, 20, 15, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616771314, 'comment_body': '```suggestion\r\n# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES.\r\n```', 'comment_created': datetime.datetime(2021, 4, 20, 15, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616773387, 'comment_body': 'Looks like we can remove this line.', 'comment_created': datetime.datetime(2021, 4, 20, 15, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616774316, 'comment_body': 'Looks like the comment is incomplete?', 'comment_created': datetime.datetime(2021, 4, 20, 15, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616776871, 'comment_body': ""Not sure but maybe it makes sense to serve `armadillo-latest` on the files server, that way we don't have to update the CMake file everytime there is a new armadillo release."", 'comment_created': datetime.datetime(2021, 4, 20, 15, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616779782, 'comment_body': 'I guess if we go for it we should do it for the other packages as well, OpenBLAS, cereal.', 'comment_created': datetime.datetime(2021, 4, 20, 15, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 616824797, 'comment_body': 'Yeah, agreed, but this will add more work to do on the mlpack.org side for maintenance.\r\nAlso, cereal development seems to be slow, so it might work if we add `cereal-latest`\r\nIt might be a good idea to do this :+1: ', 'comment_created': datetime.datetime(2021, 4, 20, 15, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 616825858, 'comment_body': 'I will unify it locally', 'comment_created': datetime.datetime(2021, 4, 20, 15, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 616847799, 'comment_body': 'maybe :thinking: I will check', 'comment_created': datetime.datetime(2021, 4, 20, 16, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 616852179, 'comment_body': 'Agreed but in this case, they should be header only.\r\nI think this is the case for `HDF5`, but I am not sure for `SuperLU`\r\nAlso, it should not be to find SuperLU, unless if it is cross-compiled, since CMake is not looking at the root file system.\r\nI will give a try and see what happens\r\n', 'comment_created': datetime.datetime(2021, 4, 20, 16, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 616859235, 'comment_body': '@rcurtin @zoq if you agree with this solution, I am happy to open a pull request on mlpack.org and add armadillo, cereal, and openblas. Let me know what do you think', 'comment_created': datetime.datetime(2021, 4, 20, 16, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 617059768, 'comment_body': 'I *think* that setting `OPENBLAS_LIBRARIES` here should be unnecessary---`find_package(Armadillo ...)` should return `ARMADILLO_LIBRARIES` with `libopenblas.a` in it.', 'comment_created': datetime.datetime(2021, 4, 20, 21, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 617059817, 'comment_body': '```suggestion\r\n  find_package(Armadillo ""${ARMADILLO_VERSION}"")\r\n```\r\n:)', 'comment_created': datetime.datetime(2021, 4, 20, 21, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 617060416, 'comment_body': 'Actually, this may also be the reason that the MacOS build is failing.  Not 100% sure though.', 'comment_created': datetime.datetime(2021, 4, 20, 21, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 617089332, 'comment_body': 'I will give a try locally and see what happen', 'comment_created': datetime.datetime(2021, 4, 20, 23, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 617096380, 'comment_body': '@rcurtin it did not work, `libopenblas` was not listed on the linker, I suppose that `ARMADILLO_LIBRARIES` was empty? If you think it is very important, I am happy to take sometime to see what is happening unless if it does not worth the effort.\r\nLet me know what do you think', 'comment_created': datetime.datetime(2021, 4, 20, 23, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 617152582, 'comment_body': 'No need to put a huge amount of time into it, but do you think you can add a `message(STATUS ""Armadillo libraries: ${ARMADILLO_LIBRARIES}"")` after the `find_package(Armadillo ...)` just so that we can see what it\'s finding?  I think you have things set up so that will run on Jenkins and we can both take a look at the log?', 'comment_created': datetime.datetime(2021, 4, 21, 2, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 617536025, 'comment_body': 'Of course, I have added it, you can have a look, I have printed locally the variable is empty. Here is a link toward Jenkins:\r\nhttp://ci.mlpack.org/job/aarch64/51/console', 'comment_created': datetime.datetime(2021, 4, 21, 13, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 618752035, 'comment_body': 'I spent a long time trying to figure out what was going on here.  My digging took me into `CMake/FindArmadillo.cmake` where I found a few typos and bugs (I posted about that in the main review comment), and then into the CMake-supplied `FindBLAS.cmake` and `FindLAPACK.cmake`.  I discovered that we can get `FindBLAS.cmake` to find OpenBLAS when it\'s statically compiled, but only if we set these variables beforehand:\r\n\r\n```\r\nset(BLA_VENDOR OpenBLAS)\r\nset(BLA_STATIC ON)\r\n```\r\n\r\nSo, you could do that instead of `set(MLPACK_LIBRARIES ${MLPACK_LIBRARIES} ${OPENBLAS_LIBRARIES})`.\r\n\r\nNext, I wanted to figure out why `ARMADILLO_LIBRARIES` did not end up with pthread or gfortran in it.  I couldn\'t figure this one out, because I could see that `find_package(Threads)` was being called from inside `FindBLAS.cmake`.  So, I can\'t come up with a better solution than what you are doing here.  But, I do think it would be better to add those two to `COMPILER_SUPPORT_LIBRARIES` instead:\r\n\r\n```\r\n  message(STATUS ""Found gfortran: ${GFORTRAN}"")\r\n  message(STATUS ""Found pthread: ${PTHREAD}"")\r\n  set(COMPILER_SUPPORT_LIBRARIES ${COMPILER_SUPPORT_LIBRARIES} ${GFORTRAN} ${PTHREAD})\r\n```\r\n\r\nAlso, the `PATHS` is unnecessary (CMake will already search `${CMAKE_SYSROOT}/usr/lib/`):\r\n\r\n```\r\n  find_library(GFORTRAN NAMES libgfortran.a)\r\n  find_library(PTHREAD NAMES libpthread.a)\r\n```', 'comment_created': datetime.datetime(2021, 4, 22, 21, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618753010, 'comment_body': ""I noticed that this runs every time configuration happens, which is probably not what we want.  If you want to see, just try typing `cmake ../` a second time after configuring CMake.  Maybe a solution here is to have `get_deps()` first check to see if the target directory exists, and if so, it does nothing but sets some variable like `DOWNLOAD_ALREADY_EXISTS`.  Then, here, we enclose the `execute_process()` in a `if (NOT DOWNLOAD_ALREADY_EXISTS)`.  That's just one idea; I can think of a few ways to do it.  Let me know what you think. :+1:"", 'comment_created': datetime.datetime(2021, 4, 22, 21, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618753158, 'comment_body': '```suggestion\r\n```\r\nThis seems like it was just for debugging. :)', 'comment_created': datetime.datetime(2021, 4, 22, 21, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618753449, 'comment_body': ""```suggestion\r\n  if (BOARD_NAME)\r\n```\r\n\r\nI think, but I'm not 100% sure of this."", 'comment_created': datetime.datetime(2021, 4, 22, 21, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618753932, 'comment_body': '```suggestion\r\n# If BUILD_SHARED_LIBS is OFF then the mlpack library will be built statically.\r\n# In addition, all mlpack CLI bindings will be linked statically as well.\r\n```\r\n:)', 'comment_created': datetime.datetime(2021, 4, 22, 21, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618754195, 'comment_body': ""```suggestion\r\n```\r\nI know we put this here just for debugging, so I figured a suggestion would make it easy to remove now that we're done. :)"", 'comment_created': datetime.datetime(2021, 4, 22, 21, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618755101, 'comment_body': 'I don\'t think this should be `REQUIRED`---it\'s possible to compile mlpack without STB support.  Instead maybe this whole block should be this:\r\n\r\n```\r\nif (DISABLE_DOWNLOADS)\r\n  find_package(StbImage)\r\nelse()\r\n  find_package(StbImage)\r\n  if (NOT STB_IMAGE_FOUND)\r\n    get_deps(http://mlpack.org/files/stb.tar.gz stb stb.tar.gz)\r\n    set(STB_IMAGE_INCLUDE_DIR ${GENERIC_INCLUDE_DIR})\r\n    find_package(StbImage REQUIRED)\r\n  endif()\r\nendif()\r\n\r\nif (STB_IMAGE_FOUND)\r\n  add_definitions(-DHAS_STB)\r\n  set(STB_AVAILABLE ""1"")\r\nendif()\r\n```\r\n\r\nLet me know if I overlooked something.', 'comment_created': datetime.datetime(2021, 4, 22, 21, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618757974, 'comment_body': 'Do you think we should issue an error if only one of `TOOLCHAIN_PREFIX` or `CMAKE_SYSROOT` is set?  I had some confusing results when I was setting `TOOLCHAIN_PREFIX` but not `CMAKE_SYSROOT` (and vice versa).  In that situation, it seems the setting of `TOOLCHAIN_PREFIX` and `CMAKE_SYSROOT` get overwritten.\r\n\r\nMaybe it could be better to have one block for `if (DEFINED TOOLCHAIN_PREFIX)` and one for `if (DEFINED CMAKE_SYSROOT)`?', 'comment_created': datetime.datetime(2021, 4, 22, 21, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 618774199, 'comment_body': 'Neither do I, but I do remember as this is the only way to check if a string is empty, let me check on this locally before commiting', 'comment_created': datetime.datetime(2021, 4, 22, 22, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 618774339, 'comment_body': 'Of course :)', 'comment_created': datetime.datetime(2021, 4, 22, 22, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 618775495, 'comment_body': 'I do believe that this should work', 'comment_created': datetime.datetime(2021, 4, 22, 22, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 619206308, 'comment_body': 'Yes, we need to issue and error and stop cmake from continuing if one of them is set. Otherwise, this might lead to a very strange result.', 'comment_created': datetime.datetime(2021, 4, 23, 13, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 619211055, 'comment_body': 'I will add two check, one for the package and the other for the library.\r\nIn this case, if the library is already downloaded, then it will check if it is already compiled.\r\nWe do not want to run into a situation when the library is only downloaded but not compiled. ', 'comment_created': datetime.datetime(2021, 4, 23, 13, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 619269135, 'comment_body': ""@shrit good call; I would be okay with just assuming that if it wasn't downloaded it needed to be downloaded and compiled, but two checks is fine (and safer) too. :+1:"", 'comment_created': datetime.datetime(2021, 4, 23, 14, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 619723667, 'comment_body': '@rcurtin, that what I came up with after hours of thinking and trying, cmake is not suitable to manipulate strings. thus we need to use boolean.\r\nIf users set `BUILDROOT` or `TOOLCHAIN_PATH`, there will be an error.\r\nThis model will allow us to support more toolchains in the future, as users might need to\r\n', 'comment_created': datetime.datetime(2021, 4, 24, 23, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 619723778, 'comment_body': 'Similar logic here', 'comment_created': datetime.datetime(2021, 4, 24, 23, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}]","[{'commit_sha': '08aaf555c9298e246e9d3cf9f08bd3f6d6b4dc76', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c1b83745319c16239174cae4bee3f3c5e99c15', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f8405ca1f178a006fb65ed53374ab22f8cb72d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df6ddb7510fcdaee1ac5fe5467db4e91660e4dd0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a0c961eb6c8bf411797ce2786c83e0b11c9e27d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ad0ce272167f972e94913064322cc1d87cb57b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ccb54a55d2ef06b9f2147d011dacaae88ffe2d4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c29dc25ace19c211a7b1ddac84beb2502adbf7d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fbd49b176f56ffde4fff9dd81ea8a7395508493', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '553709a6f2e94396ad19ee1ac3d5d0b2cd6774d4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c111f2eac56732b92920e1d88465ca31c108c867', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbfdd47acbc6447aff17fa6f747ef1adfff5ad44', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b25ba21a8bff8fcabfe126747c3432dc0ad0198', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98a5a50fad8e6d7eb2b478c8878505ca88b5ccc9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e3c810e900153811ddb1a2cef05b8ef814e3809', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a34ca519a5353658a19b4420a21114fc57909ddf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b5fb8b2b33c664c6e0bcbe7e15e9e7b2405bb15', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6589e2eff00dccb180250f6fe5ebe40036b2c29', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a35dd5c27d545f07651c24894f6367ce1c7f4c82', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf6bed271ef3a1bc297fe95a2ffb5a949617fa63', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111b4fea58cbc24b1781c2bfca12a1778363e46f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b61815e82dd7b94ea19d7b0dfe0fc014fb1d63c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c410bdf99acc75cba45125dbdec5cfa3720aaae', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aab511dbc45e6bd39a8d7e4029a86015c0ed126a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58773e4cffa96769a043d02fd14d15d8069f008f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b95745fb3e8ba34a5570dbebbe41d3643f64c619', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65fbe3db0c4ee2a5159859a684d88eac56eea25a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab9357345b26164908242fe9c6ad2cef6b5caa95', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b36f28839dec03dffdd290222cbe4b4a8e752caa', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d35bf853db60d3f9bdba23d677cf9130c87b77f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f599e596302e0d0ebb3d3305fd0bfbe53c98e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1954b7ebd9bdc61aad201f2d4c83c3c5cc25476f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbada3967176660f7d07c20500cd8b96389d615b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '890da38edabd2f9a283824e27e02278219ba513a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1c9cf52ab7ebbe022c0c0850f08ffa05baab12', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eef2d9d8b8ead2b88547a300ae0ad9cf5e23f7d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8b7ee265f0b54324d993f3311c5a8b154d7696', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6c7161728f7e75eb7eed4a9e325abad16e2c0ef', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01ebcf312f1c1a90a9430b1cb42a1ac584ead986', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f30bda1ab6224164bdf725a6ad667fea28dafd8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2ddb860c541894db981d303be35c445d7bb53a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb5decbd4600260f5d268f33894ca357f8e1360b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9600d534ef04393b318119013e7e3c05d03f0a30', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1fe2f352803182f063fac014d7b99e4f6a2eca', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19cbbd064de8b5c412c8187df6fa941d390e187a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd47dedbcf8d513a9ae80a836579af9710c1cc1db', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb23385089b45ae58be5650f5308aafd06f5c8ac', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebdc848946d15518073804bf3ec0a2b0779449e4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61bdceae63673e7b9cbb176e382d06fcb20bf0f5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87196de2f521043493b6d518de3531fefb8b256c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c7cbb082ac25dff6e82e6a0a3c331f67c45496', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00d516a4abdc3b330a4b0fe898a7522ecc8890a1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7603817ff07c9688ad21d513580da63ac4c17a0f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a825f60bf3c8d0e858923a9acc21a1036ec12c9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1816e1e5dfc0f249efdf6632c5e89ff153ff0f67', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd633496779c6f0c692c33afd4d0bc558e3ab31c7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33f34543b735f6a7724d7088981b8c5d1069a463', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '432bc6fda01b08ab09147dae1ec6cbaf338bc428', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9214227ce20ef9edf5199f0c058e3a451f2a4794', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77253b3d912a2e24233e90a3d6bc230b6dd81c52', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b7398b321d40ac16077aa10e3cb6b0b7dc1eef', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc35730025a523bc78049b7e01a161c83b5b8af0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09a2247b25dcf17e4d7d4bcf42a8364bf11f3d08', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8e919a34e7144a65a346e01b66e05496ceab00f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd456f997fb6f26bce05b3e0eae24a5384a4be2ff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca362199fa95e207a72cb37a0b9a75f1d0d717eb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6022148f852e341995d6eb1b4a7530d0bed06964', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d88753c32d03d9282c29756cc39abd2f9b959b5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '244c7bc60fe276dfa61b34c9655480a0270d8548', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd1340ea6181851018b760d529c679f69500c6c6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2a1f7b886e997ec9b163062f4f59283a6086a9e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '833326b7a849019ae1e87c744468b609a69a403a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0bb683312ca253559de5d7cedb51dff9db4078', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff3c2e6eb7ef5ad96cc7484edac618d49067798f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb7d78979e2bbefafbf347d62c55c80af37cc61c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fb1db75b4ab0016e0b76cecbc6e872a77fe9b86', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc1451ace13e33ac6e848fb3316e2cdbd9e4fb3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f3b7d1c911ac47db04eb006b8661c7b3df45420', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42ad2b1716c23255ef1b6415ff072fabd6347f1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06d14b3e1a3092f7b43425dde2f50e79d56a8aaf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '911f450fff45eded4422f59632f04384f88a6b2f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4829fe891679acb7ddf66ff4b703c979952f3f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb1c3b97de1b7de9b4dfbff2bfe1f26e0e5b8bb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4da2d9550225fe54a0f3cbcd7797daab85c4ef14', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10187640dfd8167f1896924cec35a64d028ebaa7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b4a66810301fff9ffdbc49618ac2114ea754122', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6986c3a7c4c69f0e61bc23d9f313cc7be1deab2a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f6c991bcf487e4236727990f523e3cf26702d3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d91f259f935742f3c64cb22f90322e29836dfe', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '092f28ab5e1eea86d2d564602a27250fd7049387', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4783b254dbd5cade812674f795fc1f58cfa9b5bb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a6535fa27b195e694afffba53c705217ef1f547', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af3ee9eaf6541219f416701f47827cc6999d3eb7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18435f55d209b0e87b0536294605600c662cf1f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b996b562cef5ec9c8b7a053d3e5afbe98fb7bd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81f6ec8fdbf7ed859d1bdf14bc775fbe0fde4080', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '559460fd818f354589dfb5b11934ba294000462a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aaf743e6c693abe4ba845f3307f7e674dbef988', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51566e044c891274e9bbc15ee11ce9fad9e0c9d1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a36474d6af5beb0fd55b02c80e370166eeacf43', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ec14247dbe427a52ff97958758297a6d6e9f36', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caa9608b61cc0e1518d5c35166c3a54a0ef807e3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cd17aa8a9f235f912cdf1a0bce73fb41e43d81a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '408eeb1cbd5af97efa141e350cd9dfd0ac9c5dfd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b63c634317eaf168c397a8d7ad046a59de4a724d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6416a0e0c640840ceafc17f837a124ba3cbc3583', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '205a3ea2eb2e92531ecf2b546ddd5aa37ed52f48', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967082b6b02eafb052379df01ada2096af427f68', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e385b9ae92eb76b4e3b1278e2cda3320ef044ba8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2023ee1472fe6b96383437e76367fa4770d0526d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0acd28e5213c6007502d74e7fa893baaa626527f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca1a01faa5da7d956d9d196cf95c4f8ba80941b9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba3a037028701fa31e271362d848757a04196f0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36b918af234ccda48a0c9b27e15629557aeea39a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aa43bfff8e9a07151e8c6546834214b2e18adc4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a924a8a79adefb73d66de4d29480d2fb7fe9c5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '667d1ae136f59d8a809be85e99ec65236309d7f2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8708cd24087f3b1e19a9ddfb93642ca3e944ece9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d516c1a1164e928e77c0f8c29e416cead4fd278', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500f5ca4c41ba91b75712d54d4e4d71200f2285d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1d4aa5e586ed54a24a9d6febab15d6e55e3204', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1ee039b23da9586c3066a60511c025763835bb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '613bd30b0118138514c9cd3db360199b84079088', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebb3247898ce19fd8e80dbef658bb7e52b18789', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c8a983f6a7ca0509f32d37ca2617e599684e004', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6086220cb45939ec575cf44cd9b40cdf7e21abf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d78d75e21bab127743d786e006955f68c60333c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d5180d7fd5440066d878077a8956339a97dbdb7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67118d9ad31037bf91b7bc842246ca2f6129624b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c83633475bedb75dd51c11fe5fb86c6d7d2f22b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bb9675003f81eba28329ae93eca52ad10ce7614', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f81a2222f57e1c39de2b92d96baccf3e9ed0cca', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d5e976de03d6a7d5148dd41a5d1f25a0a05050c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d4cca5f4f47010edb068155aa2ec9b647e8cb2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f64eaf0f94383bd6d2829b279f38c99490ac1c2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '943e4ae4eb0ea07e2cd636ad18202fbe63d0c0a8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca9bf70259b8d2b86530e6e590a2f690dc6736c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d11d7a739034dd967a4a6c80e137dd47e29499', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed29c46049fa19fce4b0c03528f93c23a9df2d2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c90a4409aa6d606eb27a227ab6915bd9a65d77', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1178b0a576b3b5d6ab7102fe72d6084948a517b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fe8cd8885b3b0fbbfa2c79e7b5f7dffaae8730', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc09c79a7e07d86702faa891094e2668793fd2a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63229573d8654859d0c1c3eb949675bdfdba9359', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a041d27cb606089fb06534bfaaef666f0b941d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61dcaff4e519fb73c857d2f9672f0dc332d507a8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fefdf87136c1e144f2f2a8661d0f9b783075c78', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fe57a54c1a4fc6b421ef52c2be0a7cd7358d0e4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0def74dd57e9ff58397c76afe1b1f089532c3e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79b4fc4d4067d6e427495bfb536d21e3a8ee4d39', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2921b17007b0197c9657115011b46e8e8f43a336', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dd79d60e6e519ecf6946f27ea0712145853feb9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57fbcf16c868be8f3481e78f09fb5f848a5006b2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d990b0aadccf3c0272662ad752e65a7738cc8e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4169acbfd6508c5080945b96706180fd60f31dc6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '364da3dc8a0218ca95ebb3e67484d6626fb96288', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a0a79cd4819a767c9af7042366af41d4a31a91e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd440f781cc198e4f6a6033b125c9130a576bf4de', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86298159bd0e6e156f31282a141ae57e6e9d363', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9f003dee5607b9cd2dce08c44a358f1e8a12798', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c16cb2ad78c17935c9fbf91d8c9d23e93e9de328', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0982f12ae382f1293e3184036e09c54bfc224554', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e427b91074d5381735396199a73d0d936ed1f49a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc787a3696d4645ec5562fe7156b2148a306bf94', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aa6521364653dfa1a3832184e892d0c61089604', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c1e10daf370084446b621eb418c8a6d73cb3da', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8903fd1db64002e79a4657ddb052a2023e04388', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8859972e9b44fa00f0590be93620722b1f397f97', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '650eae0a687bd6b871cefbcc86bf5201f5b96337', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4164e9ac6874a25d82311d466823bdfff90fdf67', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499409f52c326fcb69ea6b3253b86fce9637d2c4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b4517ce8c8dcbc0b19dca4e9dc54e8b67992c2a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f433133fca3e32ad88cad752b75c28299b69077c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7d471821a27fcf02fee3659d4a19b8d7f6fad37', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6967cf44759937f8f096f8b0d3aec2bd6f264854', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f8cca3469f0f3a22e041a8fc3640bcefc3c8ad', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c2346dfd3e399dd2678a4d7931bcbb903b76105', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4943d178f3fbfb0f31cde311957b4ee5356b5f7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e5f6f8855282eaf8f94f6abfee470dfcdf97a49', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9044ceca8189d43b4bcd9db6f998a82b087c45ad', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '434f3abdc8fb69e8d9868d15080d6e0f43f6460a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ab348a44e5d8f5cb1730dab571277c9779d36d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '752f8389b2e168a00499308aea75a9472417360d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aedae3e39261cccfd999719fe7bf35fbe02213c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dbdd0fdc88c7d1ec0f66808ab8cb012c86e7982', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c422aeeff628ef50ab90dc98147461d0417f52c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f317a0d560110e7108610767e2f5661b22f51e2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb92a9707c275041789c3bccc8a0dda4aa101e5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6826eaf1905b30438605b1f4bea25b3bff40ff3e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fec8e311f5b04096b450ffe9716940d71e50c03', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b2f670df943b4432bbe96c4be7412b6961b593', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87e63c9bb650c3a9eb35f6e997798f587e2635d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1d8cb7e3082b96af87a4f49a07958355fb67fcd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888e47dedd2588e3c7dc279b14b5b297b454c5ff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd262b340b9385e79fec8d2a8616c6e84f839203f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62c0f20133befb5cac0b8d3b1986679e92aecc5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd582309442de160dca5be63f5fcc1684803e18c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4371339f678df8fb40d027e4733a805fb34f45bb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8220a774509b6a79a5d29b3633fa201a71b22f61', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52618489c0a2f4bc6b0bade690d9417df651f7aa', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd04ca7b620420b084e690511ecb8c7f4df2c856f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51781d02aadfdf27186d70b11282c2516d642852', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df71b7b1e8832db2cee2b01d673d44590d739ec0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cc1a79952db83a32350b607238a6d1f9a51aceb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b887bcf98eae48dbb98e5f4f2dbccaae47b7e0d6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a75a9c15b539658bb7dcf25f2e01a7d079e2a81f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71644ae16dddf752ea6e310566f2ddc288af5990', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '061ffb2f59f0933040433ead377ffb66e7837a9d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708ca71aae027107b2cc85b439165b11acf88ade', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '765cb9b02b944afc1ac018fd8004328b5e7ef74d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e731808fb20779358a271d4ab29a79eb4feadc02', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea60c0448fb2ff0922386690e9d2db0d6ee4139', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5644646b03bf7aa39f8636c2be0ddaa29e05240a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0641fa7ef03706574f9c3025b98d7c31ab90909d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebffdf4b9de610f6b826dd32f01b05e7c2d9b151', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449613659bb27dabd8883c43e7426b3878b9a8bc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92f48181ad0dbf28eb94e257568a725bc03cd50b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd140ce03cec2e05b02112cc4e40a3cadfaf3aa41', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b3a0be05492c2e88aba09fd8a857e831972531', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0462492820c963cfe8cffeb33dabb02b48c1d529', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a758d4bac1dc29a15b4762e7d8ebc08424c810bc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3a8e1c97402534f199995080902a7f4f6399e25', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94dcc56100ba79ffde0c1e5ee19010ae3685ddf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a014108ef9c6333396cff01e53ae1b2316399b4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe3ffba0698b969d2e727d486ba0fb839d0a67e6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c782a568128d92a6853474b17d39fc52bc6c7f57', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06211c1661e9619d66bb13d2945d24e9c50e6d7a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5b447a52147dfd44516c540b84c63a2dfabd260', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1ebcb923448826082a95e4d46d8368aaaed5fbb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34703924c1d2ce2c6911f1183c36508d9ab0d4a1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c21bac7a4c352e282a37ded2275b58cd2332edba', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac9116a8b2f68c83cc6ccdc5cc8aa83e8bc59871', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c165f34efdcee94295b5a870a36d29945fca62c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9660277a93449dd766d5a698e63d657bd630469a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f219b0b5cf770f1ca29bcfa3a97c4461f5975e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6045ce44521b28f30b93d96f12d405db16dab1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f8afedf8ce52ee3a4ec16606a47f53d75991a01', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '301da57b4600df50b058658eaa86cf6640b48f7d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba5df4f604b27187ea341252a17e052188c2c631', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df156a130bb41e8289bcb8ccbc1b20abfd1ca8a8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00e0299aa267c3290dd9bf70759bfa9c2d396df3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ac4781315ce5fdf3b365c8f65bc47573da4a00', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b763d7c0b4b795dfabf75e482e6fc45d912c836', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2bda5ca1bc4ab9dfb639131dda1142b6738be2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58f5e4d7e36ebc1c689d8a21419953c92f7c45bc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba7df5e2c25d0f7cb1d968d0ad6ecac024dc485', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91dd14f13208ed0f571c9136ad8392bd704651f5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4721d89c61dcf380c70b37327bf4b71c35596d8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4136c6b1f0e4d24f38c14f46b8c5f7e5261a0900', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1586b36019f6cb265aef8ebec93bf36294e0af', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}]",Omar Shrit,15039782,omar@shrit.me,User,,38,,79,34
434879119,Cereal,"This pull request contains all commits cherry-picked from #2415 that is related to the transition from boost serialization into cereal.
",True,2458,https://api.github.com/repos/mlpack/mlpack/pulls/2458,https://github.com/mlpack/mlpack/pull/2458,closed,4346,7552,495,584,169,369,2,0,"[{'name': 'c: testing'}, {'name': 'c: core'}]",2020-06-15 23:32:04+00:00,2020-10-29 14:52:38+00:00,11719234.0,"135 days, 15:20:34","[{'comment_id': 441992007, 'comment_body': 'Perhaps this is a good opportunity to rethink the invasive addition of extra functions to the `arma::Mat<eT>` class (ie. beyond the functions that Armadillo already provides).\r\n\r\nAdding `arma::Mat<eT>::serialize()` is a brittle approach anyway: if the user includes the Armadillo header before mlpack headers, this type of live-patching won\'t work. The same applies to `arma::Cube<eT>::serialize()`, `SpMat<eT>::serialize()`, etc.  Furthermore, calling`access::rw()` and `init_cold()` is using internal Armadillo functionality, which is subject to change or removal.\r\n\r\nIt would be safer and more robust to use an external `serialize()` function, which takes `arma::Mat<eT>` as input.  Both Boost and Cereal provide this option:\r\n* Boost has the ""Non Intrusive Version"" in https://www.boost.org/doc/libs/1_73_0/libs/serialization/doc/tutorial.html\r\n* Cereal has the ""External serialize function"": https://uscilab.github.io/cereal/serialization_functions.html\r\n\r\nThere is no need to write directly into internal Armadillo variables and arrays.  Appropriate constructors can be used.\r\n\r\nCC: @rcurtin @zoq \r\n', 'comment_created': datetime.datetime(2020, 6, 18, 6, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'conradsnicta', 'type': 'User'}, {'comment_id': 442172713, 'comment_body': 'Agreed, I see this as an opportunity to fix those things as well, no need to modify Armadillo code to get this done nicely.', 'comment_created': datetime.datetime(2020, 6, 18, 11, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 442173239, 'comment_body': ""I wonder why I did it the intrusive way the first time around?  What you've suggested is very clearly better.  Thanks for pointing this out! :+1:"", 'comment_created': datetime.datetime(2020, 6, 18, 12, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450526941, 'comment_body': ""So, in the implementation that you have in `pointer_wrapper.hpp`, it looks like `d.release()` will just return the pointer `localPointer` that's held in `d`.  If `cereal::make_pointer` takes a `T*&` instead of a `T*`, then I think that `d.localPointer` will be exactly equal to `z`, and you could just do this:\r\n\r\n```\r\narchive(cereal::make_pointer(z));\r\n```\r\n\r\nand that would work for both saving and loading.  It would work for loading because the `pointer_wrapper` is holding a reference to the pointer `z`, so when you call `smartPointer.release()`, that should be directly modifying `z`. :+1:"", 'comment_created': datetime.datetime(2020, 7, 6, 23, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450527119, 'comment_body': 'In reference to https://github.com/mlpack/mlpack/pull/2458/files#r450526941, I believe that if you make the change below the idea should work:\r\n\r\n```suggestion\r\nmake_pointer(T*& t)\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 23, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450527292, 'comment_body': 'Then you could simplify here too (I think):\r\n\r\n```suggestion\r\n  return pointer_wrapper<T>(t);\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 23, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 450697752, 'comment_body': '@rcurtin. I agree, but I was getting segmentation fault doing when passing the reference pointer. Finally, I resolved that using the `release` function. Maybe I was missing something. I will re-look into it.', 'comment_created': datetime.datetime(2020, 7, 7, 8, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456823552, 'comment_body': 'Personally I think it would be better to use `find_package()` here instead of automatically downloading it.  cereal is available on:\r\n\r\n - debian/ubuntu https://packages.debian.org/stretch/libcereal-dev\r\n - RHEL https://centos.pkgs.org/7/epel-x86_64/cereal-devel-1.2.2-1.el7.noarch.rpm.html (technically that is only available for RHEL7, but I know how to request that it get imported into the RHEL8 repos)\r\n - homebrew https://formulae.brew.sh/formula/cereal\r\n - vcpkg https://github.com/microsoft/vcpkg/tree/master/ports/cereal\r\n - arch https://www.archlinux.org/packages/community/any/cereal/', 'comment_created': datetime.datetime(2020, 7, 18, 20, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824011, 'comment_body': ""@shrit no need to do this if you're still prototyping, but we should make sure we handle this comment before we merge the PR. :+1:"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824066, 'comment_body': ':rocket:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824084, 'comment_body': 'We can come back to this later, but we should document this class before merge. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824122, 'comment_body': '```suggestion\r\n    const T* m_t;\r\n```\r\nThis is really pedantic and makes no difference to the program itself, but for consistency with the rest of mlpack, we typically put the `const` first. :+1:\r\n\r\nAlso, we should avoid using `_`s in variable names, so I might suggest just `array` and `count` for the names of the two members in this class.', 'comment_created': datetime.datetime(2020, 7, 18, 20, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824171, 'comment_body': ""```suggestion\r\n    const size_t m_element_count;\r\n```\r\nI think the `std::` isn't needed. :+1:"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824212, 'comment_body': ""```suggestion\r\n#ifndef MLPACK_CORE_CEREAL_ARRAY_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_ARRAY_WRAPPER_HPP\r\n```\r\nI wouldn't want these to accidentally overwrite some header guard from the cereal library, so maybe being more specific is better."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456824234, 'comment_body': '```suggestion\r\n  array_wrapper.hpp\r\n  pointer_wrapper.hpp\r\n```\r\nI think that is needed here too?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825624, 'comment_body': 'I think we can remove this file now since the proof-of-concept seems to work. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825651, 'comment_body': '```suggestion\r\n#ifndef MLPACK_CORE_CEREAL_PONTER_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_PONTER_WRAPPER_HPP\r\n```\r\nJust a little bit of extra paranoia here too. :)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825707, 'comment_body': 'I think maybe this comment should go right with the `pointer_wrapper` class. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456825755, 'comment_body': ""I think that this is only necessary if the compiler doesn't already have `make_unique` available.  I believe `make_unique` was added in C++14, so you can just check with a macro to see what the C++ standard being used is, and only add this function if it's needed."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826516, 'comment_body': 'Would it be possible to make a macro like `CEREAL_NVP_ARRAY` and do `CEREAL_NVP_ARRAY(bounds, dim)` here?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826576, 'comment_body': 'Just a comment, did you want to switch to `ar(CEREAL_NVP(...))` or would you rather stick with `ar & CEREAL_NVP(...)`?  I imagine it would be easy to switch back and forth with a regex (I very much doubt it would accidentally catch anything else).', 'comment_created': datetime.datetime(2020, 7, 18, 20, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826835, 'comment_body': 'From the cereal documentation:\r\n\r\n> cereal will not perform any checks to ensure that serialization was done with the same version of cereal.\r\n\r\nWe should maybe think about this a little bit.  This means that if we change anything about the serialization of a class, we maybe need a major version bump.  That\'s definitely not desired.  Another option might be to, for every single top-level mlpack class that will be serialized, serialize a ""version number"".  Then, upon deserializing, we could just check that that version number is the same (or take some kind of corrective action if it\'s not, like we do now).\r\n\r\nHowever, in any case, I\'m happy to remove this code for now since we will have to make a 4.0.0 release for cereal anyway.  But, we should think about how we are going to handle this moving forward, and probably make sure that we set things up here in a way that we can have reverse compatibility later. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826903, 'comment_body': '```suggestion\r\n  ar & CEREAL_NVP(padWLeft);\r\n  ar & CEREAL_NVP(padWRight);\r\n  ar & CEREAL_NVP(padHBottom);\r\n  ar & CEREAL_NVP(padHTop);\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 20, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826952, 'comment_body': '```suggestion\r\n\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456826960, 'comment_body': '```suggestion\r\n    ar & CEREAL_NVP(reset);\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827081, 'comment_body': ""I'm not sure if this will work in general.  We need to serialize the number of children too, so that we can resize `children` appropriately during load.  One option would be to create a wrapper so that you can serialize a `std::vector` that holds pointers... `CEREAL_POINTER_VECTOR` or something?"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827176, 'comment_body': '```suggestion\r\n  ar & CEREAL_POINTER(d);\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 20, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827215, 'comment_body': '```suggestion\r\n    if (datasetInfo->Type(splitDimension) == data::Datatype::categorical)\r\n      ar & CEREAL_NVP(categoricalSplit);\r\n    else\r\n      ar & CEREAL_NVP(numericSplit);\r\n```\r\nI think the indentation was ok before. :)', 'comment_created': datetime.datetime(2020, 7, 18, 20, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827246, 'comment_body': ""Same comment here as for the decision tree---if we don't serialize the size of `children`, too, we may deserialize the wrong number of children."", 'comment_created': datetime.datetime(2020, 7, 18, 20, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827313, 'comment_body': 'Maybe I missed something---do these need to be `explicit`?', 'comment_created': datetime.datetime(2020, 7, 18, 20, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827360, 'comment_body': 'It seems to me like this header should probably already be included from somewhere else. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827375, 'comment_body': '```suggestion\r\n```\r\nWe can just remove the line. :smile:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827411, 'comment_body': ""I assume this one is still in progress, but if you'd like me to help out just let me know. :)"", 'comment_created': datetime.datetime(2020, 7, 18, 20, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827446, 'comment_body': 'I am happy to see that go! :tada:', 'comment_created': datetime.datetime(2020, 7, 18, 20, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456827722, 'comment_body': 'I believe the way that these functions work is that the ""name"" in the NVP (name-value pair) is computed from the variable itself.\r\n\r\nSo, here you would actually want to do `CEREAL_NVP(t)` to match the name from before.  However, the function takes in two arguments `t` and `newT` and they should stay separate... so you might want to do something like this:\r\n\r\nFor serialization:\r\n```\r\n    try\r\n    {\r\n      T& x(t); // Create a reference to t.\r\n      o << CEREAL_NVP(x);\r\n    }\r\n```\r\n\r\nThen for deserialization:\r\n\r\n```\r\n    try\r\n    {\r\n      T& x(newT);\r\n      i >> CEREAL_NVP(x);\r\n    }\r\n```\r\n\r\nThis way the name matches.  Anyway, it seems likely that you might have to do this for some of the other serialization test functions too. :+1:', 'comment_created': datetime.datetime(2020, 7, 18, 21, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456830098, 'comment_body': 'Yes I agree', 'comment_created': datetime.datetime(2020, 7, 18, 21, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456830325, 'comment_body': 'I think I will keep the old-style `ar &` since it is working perfectly, this will avoid any error related to regexp', 'comment_created': datetime.datetime(2020, 7, 18, 21, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456830755, 'comment_body': 'Yes, I wanted to ask about that, but since it worked when I serialized one by one I moved on.\r\nI agree that we need to create a wrapper, just to register the number on the children \r\n', 'comment_created': datetime.datetime(2020, 7, 18, 21, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456833747, 'comment_body': 'me too :+1: ', 'comment_created': datetime.datetime(2020, 7, 18, 22, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456833970, 'comment_body': 'No, I wanted to test something for cereal two months ago, I have just forgotten to remove it.', 'comment_created': datetime.datetime(2020, 7, 18, 22, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 456845640, 'comment_body': ':+1: yeah, it should not be too hard to make a wrapper.', 'comment_created': datetime.datetime(2020, 7, 19, 1, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 457519557, 'comment_body': '@rcurtin Exactly', 'comment_created': datetime.datetime(2020, 7, 20, 15, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 458942938, 'comment_body': 'Of course.', 'comment_created': datetime.datetime(2020, 7, 22, 16, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 458943713, 'comment_body': 'I have reset the version in all mlpack codebase. I think it will be easier to activate that as we change the classes in the future? I am not sure, it is your call.', 'comment_created': datetime.datetime(2020, 7, 22, 16, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459738177, 'comment_body': 'I assume that we need to re-add this line?', 'comment_created': datetime.datetime(2020, 7, 23, 21, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459738305, 'comment_body': 'Do we need to add, e.g., `CEREAL_INCLUDE_DIR` to `MLPACK_INCLUDE_DIRS`?', 'comment_created': datetime.datetime(2020, 7, 23, 21, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459741147, 'comment_body': ':tada:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459741654, 'comment_body': ""I think we will still need to keep these, otherwise things won't build.  I'll open a separate PR later to fix that. :+1:"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459741993, 'comment_body': ""Actually your new `serialize_armadillo.hpp` implementations aren't under the MPL, they can be under BSD since you wrote them for mlpack.  The only files to include there are explicit backports of Armadillo functions that come from newer versions of Armadillo.\r\n\r\nUpdate: I took a look at the other files in this directory... I think we're not actually backporting anything anymore!  If that's the case, we can remove this `README.md` file too. :+1:"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459742082, 'comment_body': 'These will also need to be kept for now. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459743103, 'comment_body': 'I think this is fine to remove---that macro may not be set for older versions of Armadillo (before we found that workaround), but if a user ever reports a bug we can just tell them to `#define H5_USE_110_API`.  New versions of Armadillo set it automatically.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459744034, 'comment_body': 'Should there be a line wrap here?  Maybe I missed something. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459744220, 'comment_body': 'Awesome, this looks good to me. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459744811, 'comment_body': ""If we are loading though, don't we have to deserialize the count too, then allocate the space for the array?"", 'comment_created': datetime.datetime(2020, 7, 23, 21, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459745954, 'comment_body': 'This one is a candidate for a nice wrapper macro too (I think you already have the wrapper in place).', 'comment_created': datetime.datetime(2020, 7, 23, 21, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459746163, 'comment_body': 'I think it was a little nicer to have the tabbing here before. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459746704, 'comment_body': 'I believe we can remove all the `const unsigned int` parameters now too. :+1:', 'comment_created': datetime.datetime(2020, 7, 23, 21, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459748240, 'comment_body': 'Yeah; I think we have to ""prepare"" for that.  Consider this serialize function:\r\n\r\n```\r\nclass C\r\n{\r\n  int x;\r\n  int y;\r\n  int z;\r\n\r\n  void serialize(Archive& ar)\r\n  {\r\n    ar(x);\r\n    ar(y);\r\n    ar(z);\r\n  }\r\n};\r\n```\r\n\r\nBut if we ever want to change that and add another parameter `a` to the definition of `C`, now we break reverse compatibility.  There\'s no way to write a reverse-compatible `serialize()` function.  So instead I would suggest an implementation like this:\r\n\r\n```\r\nclass C\r\n{\r\n  int x;\r\n  int y;\r\n  int z;\r\n\r\n  void serialize(Archive& ar)\r\n  {\r\n    int version = 1;\r\n    ar(version);\r\n\r\n    ar(x);\r\n    ar(y);\r\n    ar(z);\r\n  }\r\n};\r\n```\r\n\r\nAnd then, if we wanted to add `a`, we could do it in a reverse-compatible way:\r\n\r\n```\r\nclass C\r\n{\r\n  int x;\r\n  int y;\r\n  int z;\r\n  int a;\r\n\r\n  void serialize(Archive& ar)\r\n  {\r\n    int version = 2;\r\n    ar(version); // If an old model is loaded, version will be set to 1.\r\n\r\n    ar(x);\r\n    ar(y);\r\n    ar(z);\r\n    if (version >= 2)\r\n      ar(a);\r\n    else\r\n      a = 0.0; // Set a default value for `a` since it was not serialized in the old version.\r\n  }\r\n};\r\n```\r\n\r\nSo, this means we\'ll have to add that `int version; ar(version);` snippet to basically every mlpack class that we want to be reverse-compatible.  I would say it\'s okay to do that for just about every class, although we may want to avoid it for things we hold huge vectors of.  For instance, maybe we want to avoid it for most classes in `core/`, and instead just have versions for things in `methods/`.  (Also, maybe we want a `uint8_t` for `version` to save 3 bytes.)', 'comment_created': datetime.datetime(2020, 7, 23, 21, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459751225, 'comment_body': 'OK, perfect, I will remove the readme entirely', 'comment_created': datetime.datetime(2020, 7, 23, 21, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459751503, 'comment_body': 'Perfect.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459751845, 'comment_body': 'Yes, I will apply the vector wrapper to this file too.', 'comment_created': datetime.datetime(2020, 7, 23, 21, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459753460, 'comment_body': '@rcurtin I agree, we need to keep them, but since they are no longer part of armadillo internal, are you going to open a pull request on armadillo side? or here? I have just moved them to `serialize_armadillo.hpp`\r\nIn fact, my question is how to rename them in the most appropriate way to keep the build, maybe your PR will resolve the issue,', 'comment_created': datetime.datetime(2020, 7, 23, 22, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459754098, 'comment_body': 'Actually, I am not sure, I did not have time to verify if there is a specific cmake file for find_package in cereal side.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459754257, 'comment_body': 'Yes, I think it has been removed because of a bad merge', 'comment_created': datetime.datetime(2020, 7, 23, 22, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459756205, 'comment_body': 'Are you sure that the change in the signature will pass the sfinae?', 'comment_created': datetime.datetime(2020, 7, 23, 22, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459756440, 'comment_body': 'Hmm, I am not sure if I modified this file, I will take a look.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459760247, 'comment_body': 'Yes, I need to blame kakoune for that', 'comment_created': datetime.datetime(2020, 7, 23, 22, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 459765501, 'comment_body': ""Ah, right, the SFINAE check probably needs to be adapted too.  But cereal doesn't require the `const unsigned int`, so there's no reason to keep it. :+1:"", 'comment_created': datetime.datetime(2020, 7, 23, 22, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459776064, 'comment_body': 'Perfect. :+1: :+1:\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 23, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 460585299, 'comment_body': ""Nice!  This is a clever implementation. :+1:  (I wouldn't have expected it to be so simple!)"", 'comment_created': datetime.datetime(2020, 7, 26, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461608329, 'comment_body': 'We should probably keep this header guard. :)', 'comment_created': datetime.datetime(2020, 7, 28, 14, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461608628, 'comment_body': '```suggestion\r\n```\r\nWe should be able to remove this now. :+1:', 'comment_created': datetime.datetime(2020, 7, 28, 14, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461609550, 'comment_body': ""So, very technically, we can't do this yet because of those typedefs that are still present in `arma_extend.hpp`.  We'll be able to remove this in a future PR when that is handled."", 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461609983, 'comment_body': 'That means we should remove this from here for now too.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 461637457, 'comment_body': 'Ok perfect.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462428564, 'comment_body': ""I'm not sure this can work; the struct `save_vistor` doesn't have any constructor that takes arguments."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462430578, 'comment_body': ""I believe this might need to be something more like this:\r\n\r\n```\r\ntemplate<typename Archive>\r\nstruct save_visitor : public boost::static_visitor<void>\r\n{\r\n  template<typename T>\r\n  void operator()(T& t)\r\n  {\r\n    ar(CEREAL_POINTER(t));\r\n  }\r\n};\r\n```\r\n\r\nDon't forget the `void` template type to `static_visitor` like @robertohueso pointed out, and don't forget to use a reference for `t` in the `operator()` so that we don't copy the `T`.\r\n\r\nYou'll probably have to adapt the `load_visitor` the same way.  Honestly, since the code is the same in both, you might be able to just do `serialize_visitor` and use that in `pointer_variant_wrapper`."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462431341, 'comment_body': ""Are you sure this will work in general?  I think that we need to serialize the type of `PointerVariant`, so that we can load the right type.  You might consider taking a look at how Cereal implements its `boost::variant` support and then imitating that.  After all this should be basically the same, you just need to call `POINTER_WRAPPER()` when you serialize whatever's held since it's a bare pointer."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462432711, 'comment_body': 'In this case, the `ar` will be undefined if I remove the `Archive& ar` from the signature of `operator()`.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462432763, 'comment_body': 'https://github.com/USCiLab/cereal/blob/master/include/cereal/types/variant.hpp\r\n\r\nWhat you\'ve got is close-ish to what they\'re doing there; I think that a main piece missing is that you have to serialize ""index"":\r\n\r\nhttps://github.com/USCiLab/cereal/blob/master/include/cereal/types/variant.hpp#L96\r\n\r\nThe `load_variant` templated function might take a while to understand, but it\'s a clever way of calling the load visitor with the right template type.  If you like, I can try and walk you through it, just let me know. :+1:', 'comment_created': datetime.datetime(2020, 7, 29, 16, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462433951, 'comment_body': 'Hmm, So basically, I will have to imitate the `boost::variant` implementation in cereal, I have tried to do that before but I did not understand everything there. I will spend more time on their implementation to understand what is happening.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462434261, 'comment_body': 'Sorry I wrote this totally wrong :facepalm: let me try again:\r\n\r\n```\r\ntemplate<typename Archive>\r\nstruct save_visitor : public boost::static_visitor<void>\r\n{\r\n  save_visitor(Archive& ar) : ar(ar) { }\r\n\r\n  template<typename T>\r\n  void operator()(T& t)\r\n  {\r\n    ar(CEREAL_POINTER(t));\r\n  }\r\n\r\n  Archive& ar;\r\n};\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 16, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 462448378, 'comment_body': '@rcurtin I have thought about the `index` since we are serializing pointers. However,  it is only in `std::variant` there is nothing similar in `boost::variant`', 'comment_created': datetime.datetime(2020, 7, 29, 16, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 462477067, 'comment_body': 'Sorry, perhaps I linked to the wrong file. https://github.com/USCiLab/cereal/blob/master/include/cereal/types/boost_variant.hpp', 'comment_created': datetime.datetime(2020, 7, 29, 17, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466456492, 'comment_body': ""I think that we could maybe use simple overloading here to add an overload of `operator()` for when a `boost::variant` is held internally:\r\n\r\n```\r\ntemplate<typename Archive, typename... VariantTypes>\r\nvoid operator()(Archive& ar, boost::variant<VariantTypes...>& variant) const\r\n{\r\n  ar(CEREAL_VARIANT_POINTER(variant));\r\n}\r\n```\r\n\r\nI *think* that would work (and you could do a similar thing for `save_visitor`).  Let me know what you think---I'm happy to try and help debug it if it doesn't work.  The basic idea, I think, should be valid though: we can just catch when a `variant` holds a `variant` inside of itself, and then call `CEREAL_VARIANT_POINTER()` again."", 'comment_created': datetime.datetime(2020, 8, 6, 14, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466516158, 'comment_body': '@rcurtin I have tested it, but I got the exact same error above. \r\nI am not sure we can call another `operator()` if the first one has already been called.\r\nI think the idea is valid if there was only `boost::variant<boost::variant<T...>>`. However, since we are mixing type, I am not sure.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466532649, 'comment_body': ""I am looking through the code now.  Why haven't you used `LoadAndConstructLoadWrapper` like in the `cereal/types/boost_variant.hpp` implementation?  Maybe there is something I have overlooked?  There aren't very many comments, so I'm not sure what the state of the code is---does it fully work and pass tests when serializing a `boost::variant` that doesn't internally contain a `boost::variant`?"", 'comment_created': datetime.datetime(2020, 8, 6, 16, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466541398, 'comment_body': '@rcurtin I think I did not get the reason why they have to use it in the first place.\r\nI think the implementation of `boost::variant` is working since the only errors I am getting now are related to non serialized raw pointers.', 'comment_created': datetime.datetime(2020, 8, 6, 16, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466542674, 'comment_body': 'Okay, but when you pass a `boost::variant<>` that contains pointer types and *also* another `boost::variant` (i.e. like it happens for ANN with the `MoreLayers` typedef), this still fails?', 'comment_created': datetime.datetime(2020, 8, 6, 16, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466548795, 'comment_body': 'Yes it still fails, actually, it is not complaining about the pointers because if it is the case the compiler would have stopped before. The issue is it is not matching the function call when it sees `boost::variant`\r\n```\r\ndouble> >*, mlpack::ann::VRClassReward<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::VirtualBatchNorm<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::RBF<arma::Mat<double>, arm\r\na::Mat<double>, mlpack::ann::GaussianFunction>*, mlpack::ann::BaseLayer<mlpack::ann::GaussianFunction, arma::Mat<double>, arma::Mat<double> >*> > >::value_type&)’\r\n  122 | #define CEREAL_VARIANT_POINTER(T) cereal::make_pointer_variant(T)\r\n      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\r\n/meta/mlpack/src/mlpack/methods/ann/ffn_impl.hpp:568:9: note: in expansion of macro ‘CEREAL_VARIANT_POINTER’\r\n  568 |    ar & CEREAL_VARIANT_POINTER(network.at(i));\r\n      |         ^~~~~~~~~~~~~~~~~~~~~~\r\n/meta/mlpack/src/mlpack/core/cereal/pointer_variant_wrapper.hpp:117:1: note: candidate: ‘template<class ... VariantTypes> cereal::pointer_variant_wrapper<VariantTypes ...> cereal::make_point\r\ner_variant(boost::variant<VariantTypes* ...>&)’\r\n  117 | make_pointer_variant(boost::variant<VariantTypes*...>& t)\r\n      | ^~~~~~~~~~~~~~~~~~~~\r\n/meta/mlpack/src/mlpack/core/cereal/pointer_variant_wrapper.hpp:117:1: note:   template argument deduction/substitution failed:\r\n/meta/mlpack/src/mlpack/core/cereal/pointer_variant_wrapper.hpp:122:63: note:   mismatched types ‘VariantTypes*’ and ‘boost::variant<mlpack::ann::Glimpse<arma::Mat<double>, arma::Mat<double>\r\n >*, mlpack::ann::Highway<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::Recurrent<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::RecurrentAttention<arma::Mat<double>, arma::Ma\r\nt<double> >*, mlpack::ann::ReinforceNormal<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::Reparametrization<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::Select<arma::Mat<doub\r\nle>, arma::Mat<double> >*, mlpack::ann::Sequential<arma::Mat<double>, arma::Mat<double>, false>*, mlpack::ann::Sequential<arma::Mat<double>, arma::Mat<double>, true>*, mlpack::ann::Subview<a\r\nrma::Mat<double>, arma::Mat<double> >*, mlpack::ann::VRClassReward<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann::VirtualBatchNorm<arma::Mat<double>, arma::Mat<double> >*, mlpack::ann\r\n::RBF<arma::Mat<double>, arma::Mat<double>, mlpack::ann::GaussianFunction>*, mlpack::ann::BaseLayer<mlpack::ann::GaussianFunction, arma::Mat<double>, arma::Mat<double> >*>’\r\n  122 | #define CEREAL_VARIANT_POINTER(T) cereal::make_pointer_variant(T)\r\n      |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\r\n/meta/mlpack/src/mlpack/methods/ann/ffn_impl.hpp:568:9: note: in expansion of macro ‘CEREAL_VARIANT_POINTER’\r\n  568 |    ar & CEREAL_VARIANT_POINTER(network.at(i));\r\n      |         ^~~~~~~~~~~~~~~~~~~~~~\r\n[ 80%] Building CXX object src/mlpack/tests/CMakeFiles/mlpack_test.dir/main_tests/decision_stump_test.cpp.o\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 16, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466574215, 'comment_body': ""Ok, I'll play with this and see if I can get something figured out, by adapting the idea above. :+1:"", 'comment_created': datetime.datetime(2020, 8, 6, 17, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466705093, 'comment_body': 'I believe that this implementation works:\r\n\r\n```\r\n/**\r\n * @file core/cereal/pointer_variant_wrapper.hpp\r\n * @author Omar Shrit\r\n *\r\n * Implementation of a boost::variant wrapper to enable the serialization of\r\n * the pointers inside boost variant in cereal\r\n *\r\n * mlpack is free software; you may redistribute it and/or modify it under the\r\n * terms of the 3-clause BSD license.  You should have received a copy of the\r\n * 3-clause BSD license along with mlpack.  If not, see\r\n * http://www.opensource.org/licenses/BSD-3-Clause for more information.\r\n */\r\n#ifndef MLPACK_CORE_CEREAL_POINTER_VARIANT_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_POINTER_VARIANT_WRAPPER_HPP\r\n\r\n#include <cereal/archives/json.hpp>\r\n#include <cereal/archives/portable_binary.hpp>\r\n#include <cereal/archives/xml.hpp>\r\n#include <cereal/types/boost_variant.hpp>\r\n\r\n#include <boost/variant.hpp>\r\n#include <boost/variant/variant_fwd.hpp>\r\n#include <boost/variant/static_visitor.hpp>\r\n\r\n#include ""pointer_wrapper.hpp""\r\n\r\nnamespace cereal {\r\n\r\n// Forward declaration.\r\ntemplate<typename... VariantTypes>\r\nclass pointer_variant_wrapper;\r\n\r\ntemplate<typename... VariantTypes>\r\ninline pointer_variant_wrapper<VariantTypes...>\r\nmake_pointer_variant(boost::variant<VariantTypes...>& t)\r\n{\r\n  return pointer_variant_wrapper<VariantTypes...>(t);\r\n}\r\n\r\ntemplate<class Archive>\r\nstruct save_visitor : public boost::static_visitor<void>\r\n{\r\n  save_visitor(Archive& ar) : ar_(ar) {}\r\n\r\n  template<class T>\r\n  void operator()(const T* value) const~\r\n  {\r\n    ar_ & CEREAL_POINTER(value);\r\n  }\r\n\r\n  template<typename... Types>\r\n  void operator()(boost::variant<Types*...>& value) const\r\n  {\r\n    ar_ & make_pointer_variant(value);\r\n  }\r\n\r\n  Archive& ar_;\r\n};\r\n\r\ntemplate<typename T>\r\nstruct load_visitor : public boost::static_visitor<void>\r\n{\r\n  template<typename Archive, typename VariantType>\r\n  static void load_impl(Archive& ar, VariantType& variant, std::true_type)\r\n  {\r\n    // Note that T will be a pointer type.\r\n    T loadVariant;\r\n    ar & CEREAL_POINTER(loadVariant);\r\n    variant = loadVariant;\r\n  }\r\n\r\n  template<typename Archive, typename VariantType>\r\n  static void load_impl(Archive& ar, VariantType& value, std::false_type)\r\n  {\r\n    // This must be a nested boost::variant.\r\n    ar & make_pointer_variant(value);\r\n  }\r\n\r\n  template<typename Archive, typename VariantType>\r\n  static void load(Archive& ar, VariantType& variant)\r\n  {\r\n    // Delegate to the proper load_impl() overload depending on whether T is a\r\n    // pointer type.  If T is not a pointer type, then we expect it to be a\r\n    // nested boost::variant.\r\n    load_impl(ar, variant, typename std::is_pointer<T>::type() );\r\n  }\r\n};\r\n\r\ntemplate<typename... VariantTypes>\r\nclass pointer_variant_wrapper\r\n{\r\n/*\r\n * The objective of this class is to create a wrapper for\r\n * boost::variant.~\r\n * Cereal supports the serialization of boost::vairnat, but~\r\n * we need to serialize it if it holds a raw pointers.\r\n */\r\n public:\r\n   pointer_variant_wrapper(boost::variant<VariantTypes...>& PointerVar)\r\n    : PointerVariant(PointerVar)\r\n  {}\r\n\r\n  template<class Archive>\r\n  void save(Archive& ar) const\r\n  {\r\n    // which represent the index in std::variant.\r\n    int which = PointerVariant.which();\r\n    ar & CEREAL_NVP(which);\r\n    save_visitor<Archive> s(ar);\r\n    boost::apply_visitor(s, PointerVariant);\r\n  }\r\n\r\n  template<class Archive>\r\n  void load(Archive& ar)\r\n  {\r\n    // Load the size of the serialized type.\r\n    int which;\r\n    ar & CEREAL_NVP(which);\r\n\r\n    // Create function pointers to each overload of load_visitor<T>::load, for\r\n    // all T in VariantTypes.\r\n    using LoadFuncType = void(*)(Archive&, boost::variant<VariantTypes...>&);\r\n    LoadFuncType loadFuncArray[] = { &load_visitor<VariantTypes>::load... };\r\n\r\n    if(which >= int(sizeof(loadFuncArray)/sizeof(loadFuncArray[0])))\r\n      throw std::runtime_error(""Invalid \'which\' selector when deserializing boost::variant"");\r\n\r\n    loadFuncArray[which](ar, PointerVariant);\r\n  }\r\n\r\nprivate:\r\n   boost::variant<VariantTypes...>& PointerVariant;\r\n};\r\n\r\n#define CEREAL_VARIANT_POINTER(T) cereal::make_pointer_variant(T)\r\n\r\n} // end namespace cereal\r\n\r\n#endif // CEREAL_POINTER_VARIANT_WRAPPER_HPP\r\n```\r\n\r\nHowever, I did not compile successfully, as there are layers in `src/mlpack/methods/ann/layer/` that internally hold `LayerTypes` or `std::vector<LayerTypes>`, and the code there will need to be adapted to appropriately use the variant wrapper here.  You can find the necessary classes just by doing a `grep LayerTypes` in `src/mlpack/methods/ann/layer/` and you\'ll see that there are probably 8 or 9 classes that would need to be adapted.  I didn\'t try, since I wasn\'t sure if you had a nice wrapper for `std::vector<boost::variant<...>>` or anything.  Maybe another one needs to be made for convenience, like `CEREAL_VECTOR_VARIANT_POINTER()` or something?', 'comment_created': datetime.datetime(2020, 8, 6, 21, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466705239, 'comment_body': ""(I don't mind adding lots of those wrappers.  Eventually, we'll be replacing and removing them anyway, most likely.)"", 'comment_created': datetime.datetime(2020, 8, 6, 21, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 466712731, 'comment_body': 'I will give it a try and see what will happen.', 'comment_created': datetime.datetime(2020, 8, 6, 22, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 466719964, 'comment_body': 'By the way, `CEREAL_VECTOR_VARIANT_POINTER()` will be a true wrapper :+1: :+1: :+1: ', 'comment_created': datetime.datetime(2020, 8, 6, 22, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467531477, 'comment_body': 'I imagine, in this case, that we have to also serialize `network.size()` and then call `resize()` to set the correct size if we are loading. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 3, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467562314, 'comment_body': '@rcurtin Of course,  I did not finish this yet, I was just able to serialize all layers and network types.\r\nThis should follow the same principle as `CEREAL_VECTOR`.\r\nI just wanted to be sure that the variant wrapper is working in the first place.', 'comment_created': datetime.datetime(2020, 8, 9, 9, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467565174, 'comment_body': 'Considering the `boost::string_view`, I was thinking of creating a wrapper that converts `boost::string_view` into `std::string` and then serialize it. (I have never used `string_view` so I am not sure if what I am doing is valid)', 'comment_created': datetime.datetime(2020, 8, 9, 10, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467628177, 'comment_body': '@rcurtin I have commented these lines as I have done a refactoring in `hrectbound_impl.hpp` I have changed the bound type into an `std::vector` since it will be easier to serialize, and since I can not figure the reason of using the C-Style array here.\r\nOtherwise, everything seems to be compiled, and all tests are passing.', 'comment_created': datetime.datetime(2020, 8, 9, 20, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 467638909, 'comment_body': ""My distribution of CMake (CMake 3.16) doesn't have any `FindCereal.cmake` or `Findcereal.cmake` in `/usr/share/cmake-3.16/Modules/`, so I guess we might have to ship that file ourselves.  Perhaps this version?  https://github.com/facebookresearch/flashlight/blob/master/cmake/Findcereal.cmake\r\n(It's BSD-licensed, so we should attribute the source in a comment or something, but otherwise usage of that file should be just fine.)\r\n\r\nOnce that's done, we'll probably need something like `set(MLPACK_INCLUDE_DIRS ${MLPACK_INCLUDE_DIRS} ${CEREAL_INCLUDE_DIRS})` and maybe also `add_definitions(${CEREAL_DEFINITIONS})`---however, I am not sure `CEREAL_DEFINITIONS` can ever be set in that script, so maybe that part can be ignored."", 'comment_created': datetime.datetime(2020, 8, 9, 22, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467638924, 'comment_body': ':tada: :tada: :tada:', 'comment_created': datetime.datetime(2020, 8, 9, 22, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467638950, 'comment_body': '```suggestion\r\n<tt>template<typename Archive> void serialize(Archive&)</tt>\r\n```\r\nLooks like this documentation got a little out of date too. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 22, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639041, 'comment_body': ""```suggestion\r\n(i.e. the type must be serializable via cereal).\r\n```\r\nA long time ago, we actually did have a shim for `boost::serialization` that allowed us to specify a function called `Serialize()` instead of `serialize()`, but that shim doesn't exist anymore (thankfully!  It was not one of my smartest ideas), and so we can change the documentation to remove any reference to it. :)"", 'comment_created': datetime.datetime(2020, 8, 9, 22, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639111, 'comment_body': 'I think we can drop `text` from this list and replace it with `json`?', 'comment_created': datetime.datetime(2020, 8, 9, 23, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639251, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar);\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639328, 'comment_body': '```suggestion\r\nvoid serialize(Archive& ar);\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639390, 'comment_body': ""```suggestion\r\ndisk.  The \\c cereal documentation is fairly comprehensive.\r\n```\r\nGitHub won't let me suggest it all, but we can simply remove the rest of this paragraph about `Serialize()` since it's no longer relevant. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639400, 'comment_body': '```suggestion\r\n\\c cereal, because \\c serialize() may be called at any time during\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639412, 'comment_body': ""```suggestion\r\nTherefore, be careful that \\c serialize() (and the tree's destructor) properly\r\n```"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639475, 'comment_body': '```suggestion\r\n[the Cereal website](http://uscilab.github.io/cereal/)),\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 23, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639533, 'comment_body': ""There's an example below this comment---do you think you can re-run it with a cereal XML archive and update the printed XML model to match?"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639719, 'comment_body': '```suggestion\r\n      ""Serialize an mlpack model `model` in the binary cereal format to the \\n""\r\n      ""given `stream`.  Example:\\n""\r\n```\r\nI know it\'s a bit pedantic but I reflowed these lines so they display better in the Julia documentation. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467639869, 'comment_body': '```suggestion\r\n      ""Only use this if you have saved the model in the cereal binary format \\n""\r\n      ""using `serialize_bin()` or an mlpack binding in another language!  If \\n""\r\n      ""you used `Serialization.serialize()` to serialize your model, then use\\n""\r\n      ""`Serialization.deserialize()` to deserialize it.\\n""\r\n```\r\nI reflowed this one too. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640087, 'comment_body': 'Maybe we should remove this comment?  It actually turns out to be not accurate anymore. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640166, 'comment_body': '```suggestion\r\n\r\n  // Manually set the values in the sparse matrix by assigning what we deserialized.\r\n```\r\nI think maybe it could be helpful to add a comment here.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640228, 'comment_body': ""```suggestion\r\n```\r\nI think maybe we can remove this comment too; it's mostly inaccurate now, since we are using `CEREAL_NVP` for the various `arma::uword` members."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640266, 'comment_body': ""```suggestion\r\n\r\n // Directly serialize the contents of the matrix's memory.\r\n```\r\nA comment could be useful here too. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640305, 'comment_body': ""```suggestion\r\n\r\n // Directly serialize the contents of the matrix's memory.\r\n```\r\n(Same as above.)"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640356, 'comment_body': ""```suggestion\r\n}\r\n\r\n} // end namespace cereal\r\n```\r\n\r\nIt's pedantic but I think it can be nice to separate the close of a function and the close of a namespace."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640404, 'comment_body': ""Since we're getting closer to merge now, it might be worthwhile to take the time to document this (and the other wrappers) now. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640481, 'comment_body': ""Do you think you can make the wrapper code match the style guide?  I imagine the style guide will throw some errors already.  Let me know if you'd like me to help out.  I'll leave a few (hopefully helpful) comments throughout but I won't comment on everything. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640498, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar)\r\n```\r\n(Just a simple style fix.)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640578, 'comment_body': 'I think for the style, we should name these `arrayAddress` and `arraySize`. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640616, 'comment_body': ""I think that this comment still applies.  I don't see how we are allocating space to deserialize."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640648, 'comment_body': 'Another little style fix, we should avoid the underscores in class member names; so, this can be `ar`.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640683, 'comment_body': ""Seems like this works now!  I'll go ahead and resolve this conversation. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467640925, 'comment_body': 'It could be nice to add some documentation here on these macros too, that Doxygen will pick up. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641075, 'comment_body': ""I don't think we can deserialize directly into `VectorPointerVariant.size()`; correct me if I'm wrong.  I imagine we have to deserialize this value first into a `size_t`, then call `VectorPointerVariant.resize()`.  If we have to specify a value for each element when we call `resize()`, since each element can be a pointer, we can first just specify `NULL` here.  But I don't remember if we have to specify the default value when we call `resize()`.  Anyway, let me know if you have any issue with it---I'm happy to help debug."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641116, 'comment_body': 'The name is long, but hopefully it is temporary. :smile:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641224, 'comment_body': 'Same comment here as for the `boost::variant` vector serialization wrapper---I think we have to be careful about serializing the size.  I think that these issues cause some of the tests to currently fail, but I have not dug into it too far yet:\r\n\r\n```\r\nunknown location(0): fatal error: in ""FeedForwardNetworkTest/SerializationTest"": memory access violation at address: 0x00000949: no mapping at fault address\r\n```\r\n\r\nBut, that\'s just a guess; I haven\'t dug in yet.  If you fix this and the error still happens then I am happy to go digging further. :smile:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641511, 'comment_body': 'It would be interesting to share this shim somehow with the cereal maintainers, but I am not sure if they would find it useful.  If you like, maybe we could post it in some related issue in their repository, or send them an email or something.  Totally up to you.  (I think there might be some drawbacks to this approach, like one pointer getting serialized multiple times if it appears in a struct a few times, so that might mean that it is not particularly useful outside our context.  In our case I believe our serialization methods for, e.g., trees manage to avoid this problem by being careful about what they serialize.)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641720, 'comment_body': ""I won't leave this comment again but I think we should apply it to the vast majority of classes.  We've already talked about it but I want to write it down so it doesn't get lost (although I know at this point I've already left a ton of comments so it has risk of getting lost anyway :smile:).\r\n\r\nWe can hack in some support for versioning later like this:\r\n\r\n```\r\n  uint8_t version = 1;\r\n  ar & CEREAL_NVP(version);\r\n\r\n```\r\n\r\nThat should be all that's needed for now.  Later, if we update the serialization function but need to preserve reverse compatibility, we just increment `version`, then use an `if` statement after `version` has been serialized/deserialized or similar."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641871, 'comment_body': '```suggestion\r\n    else if (extension == ""json"")\r\n```\r\nI think that we need to change this too. :)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467641898, 'comment_body': '```suggestion\r\n\r\n```\r\nNo need to add extra spaces.  I know it is a really pedantic comment. :smile:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642001, 'comment_body': '```suggestion\r\n    else if (extension == ""json"")\r\n```\r\nI think this one has to change too. :)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642159, 'comment_body': 'It\'s up to you, but do you want to switch to the more ""idiomatic"" `ar(CEREAL_NVP(scale))`?  I think it would be an easy regex.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642344, 'comment_body': ""I am not sure if it's easy, so feel free to not do this, but in many cases where we removed `version`, now the entire definition could fit on one line:\r\n\r\n```\r\nvoid NMS<UseCoordinates>::serialize(Archive& ar)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467642393, 'comment_body': '```suggestion\r\n    Archive& ar)\r\n```\r\nJust a little style fix. :)', 'comment_created': datetime.datetime(2020, 8, 9, 23, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643144, 'comment_body': ""Cereal doesn't appear to have protections for serializing the same pointer multiple times, so I believe we have to handle that ourselves here.  Although this didn't seem to make a huge difference in my experiments, I think it would be good to first serialize whether `parent == NULL`, and then serialize the dataset only if so.  e.g.:\r\n\r\n```\r\nbool hasParent = (parent == NULL); // The conditional only matters when saving.\r\nar(CEREAL_NVP(hasParent));\r\nif (!hasParent)\r\n  ar(CEREAL_NVP(dataset));\r\n```\r\n\r\nLet me know if that makes sense why we need to do that."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643183, 'comment_body': 'I think we need to fix this part.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643866, 'comment_body': 'In this case I think we need to use the same strategy I suggested for `BinarySpaceTree`.  Check this out:\r\n\r\n```\r\n$ ls -lh test_data_3_1000.csv\r\n-rw-r--r-- 1 ryan ryan 36K Aug  9 19:05 test_data_3_1000.csv\r\n$ bin/mlpack_knn -r test_data_3_1000.csv -M model.xml -v -t cover\r\n...\r\n$ ls -lh model.xml\r\n-rw-r--r-- 1 ryan ryan 294M Aug  9 21:37 model.xml\r\n```\r\n\r\nSo you can see there is duplication of the entire dataset for every single node in the tree, causing the serialized model to be huge. :)\r\n\r\nIt looks like in this function we already make an serialize a `hasParent` member, so you can just use that here I think. :+1:', 'comment_created': datetime.datetime(2020, 8, 9, 23, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467643968, 'comment_body': ""```suggestion\r\n  if (Archive::is_loading::value)\r\n    ownsMetric = true;\r\n```\r\n\r\nActually I believe there is a bug here.  If we are loading, `ownsMetric` will always be true.  And if we are saving, there's no need to serialize that member."", 'comment_created': datetime.datetime(2020, 8, 9, 23, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644109, 'comment_body': '```suggestion\r\n  if (Archive::is_loading::value)\r\n```\r\nI know you did not write this code originally but I believe the `parent == NULL` condition is superfluous or even wrong.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644343, 'comment_body': ""I believe the reason to avoid doing this before was computational: I believe we found that it was quicker to hold a raw pointer than to dereference elements from a `std::vector`.\r\n\r\nIs there a reason that using `cereal::make_array` wouldn't work here?"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644455, 'comment_body': ""I'm not sure what this statement does now?"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467644593, 'comment_body': 'The same issue probably applies here.', 'comment_created': datetime.datetime(2020, 8, 9, 23, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467645044, 'comment_body': ""If `this->localPointer` is `NULL` I think this doesn't work right.  Maybe we need something like this:\r\n\r\n```\r\nstd::unique_ptr<T> smartPointer;\r\nif (this->localPointer != NULL)\r\n  smartPointer = std::make_unique<T>(std::move(*this->localPointer));\r\n```\r\nI wrote up a patch for this; it seems to handle the issue correctly.  I linked to it in the main review comment. :+1:"", 'comment_created': datetime.datetime(2020, 8, 9, 23, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657270, 'comment_body': ""I'm not sure this is working right:\r\n\r\n```\r\n$ bin/mlpack_knn -r test_data_3_1000.csv -M model.xml -v -t r\r\n[DEBUG] Compiled with debugging symbols.\r\n[INFO ] Using reference data from Loading 'test_data_3_1000.csv' as CSV data.  Size is 3 x 1000.\r\n[INFO ] 'test_data_3_1000.csv' (3x1000 matrix).\r\n[INFO ] Building reference tree...\r\n[INFO ] Tree built.\r\nmlpack_knn: /home/ryan/src/mlpack/src/mlpack/core/tree/rectangle_tree/rectangle_tree_impl.hpp:241: mlpack::tree::RectangleTree<MetricType, StatisticType, MatType, SplitType, DescentType, AuxiliaryInformationType>::RectangleTree(mlpack::tree::RectangleTree<MetricType, StatisticType, MatType, SplitType, DescentType, AuxiliaryInformationType>&&) [with MetricType = mlpack::metric::LMetric<2, true>; StatisticType = mlpack::neighbor::NeighborSearchStat<mlpack::neighbor::NearestNS>; MatType = arma::Mat<double>; SplitType = mlpack::tree::RTreeSplit; DescentType = mlpack::tree::RTreeDescentHeuristic; AuxiliaryInformationType = mlpack::tree::NoAuxiliaryInformation]: Assertion `iChild < numChildren' failed.\r\nAborted\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 1, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657351, 'comment_body': ""I think this might need some different handling.  `ownsDataset` should always be true only if we are loading, and we should only serialize the dataset if we are the root node (i.e. `parent == NULL`).  Do you think you could apply the same strategies I've suggested for the other trees here?"", 'comment_created': datetime.datetime(2020, 8, 10, 1, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657457, 'comment_body': ""I don't think this change was needed. :+1:"", 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657483, 'comment_body': ""Same here, I don't think these were needed either."", 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657551, 'comment_body': ""I'm not sure this change is right either."", 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 467657559, 'comment_body': 'This one too.', 'comment_created': datetime.datetime(2020, 8, 10, 1, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468233623, 'comment_body': 'This wrapper is nice, thank you for taking the time to implement it. :+1:', 'comment_created': datetime.datetime(2020, 8, 10, 23, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 468233777, 'comment_body': ""I guess we don't need to serialize `ownsLayers` if we are setting it if the Archive is loading.  I suppose we could remove this line with no ill effects."", 'comment_created': datetime.datetime(2020, 8, 10, 23, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 469381272, 'comment_body': 'You are welcome', 'comment_created': datetime.datetime(2020, 8, 12, 16, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469382380, 'comment_body': 'Exactly, I have tried to replace `text` by `json` in every place I have seen. However, still, there are a lot of places I think I have left text', 'comment_created': datetime.datetime(2020, 8, 12, 16, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469388516, 'comment_body': 'Agreed,', 'comment_created': datetime.datetime(2020, 8, 12, 16, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469389391, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 12, 16, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469389654, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 8, 12, 16, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469391524, 'comment_body': 'Of course,', 'comment_created': datetime.datetime(2020, 8, 12, 16, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469393133, 'comment_body': 'Agreed, I have copied it between load and save. Sorry.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469393330, 'comment_body': 'Hopefully,', 'comment_created': datetime.datetime(2020, 8, 12, 16, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469394951, 'comment_body': 'Of course, I will not forget the versionning, I will copy these comments to some place.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469395128, 'comment_body': 'Of course.', 'comment_created': datetime.datetime(2020, 8, 12, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469397958, 'comment_body': 'I agree I do not know how I get these extra lines, I am trying to pay more attention to these small details, but still, I can not escape. I am sorry to make you spend time on these small errors', 'comment_created': datetime.datetime(2020, 8, 12, 16, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469398942, 'comment_body': ""That's would be possible, but maybe in the end."", 'comment_created': datetime.datetime(2020, 8, 12, 16, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469418015, 'comment_body': 'No worries!  It takes like 10 seconds max to add the suggestion. :)', 'comment_created': datetime.datetime(2020, 8, 12, 17, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 469490924, 'comment_body': 'I have changed the type of `mbound` to an `std::vector`', 'comment_created': datetime.datetime(2020, 8, 12, 19, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469491257, 'comment_body': 'Perfect:+1: Thanks for the patch', 'comment_created': datetime.datetime(2020, 8, 12, 19, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469491584, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 8, 12, 19, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469768691, 'comment_body': '@rcurtin I have tried to use `cereal::make_array` but there was an error telling that cereal can not serialize raw pointers.\r\nAlso, I am not sure if the error was from `hrectbound` or from another class. \r\nI thought about the change since it is rare to see this raw pointer array these days in mlpack. Even, we can use `std::array` instead of `std::vector` if it is very slow.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469769560, 'comment_body': 'Agreed, I have already applied this modification on several functions. It requires to get inside each class and see what is happening inside.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 469932218, 'comment_body': ""I'd prefer to avoid changing this unless you also want to benchmark the performance and show that the performances are comparable.  Many years ago quite some time went into the implementation of this class, since it is used very heavily throughout tree traversals, and at that time it was found that the fastest implementation could be done with raw pointers.\r\n\r\nI thought that you had serialized raw pointer arrays elsewhere too?"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470006620, 'comment_body': '@rcurtin This is what I have in mind If you think this is good, I will apply it to all the trees?', 'comment_created': datetime.datetime(2020, 8, 13, 14, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 470032724, 'comment_body': '@rcurtin would it be possible to include `cereal` headers in Jenkins?', 'comment_created': datetime.datetime(2020, 8, 13, 15, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 470045121, 'comment_body': 'Done. :+1:', 'comment_created': datetime.datetime(2020, 8, 13, 15, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 470045922, 'comment_body': 'Also, yes, I believe that code for `BinarySpaceTree` serialization will work correctly (you can see if it passes the tests, they are pretty comprehensive).', 'comment_created': datetime.datetime(2020, 8, 13, 15, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 475832423, 'comment_body': '@rcurtin I have applied the similar principle in `rectangle_tree` I am not sure if it is working correctly, the tests do not show an error, but it goes in a loop for a long time. Tell me what do you think :+1: ', 'comment_created': datetime.datetime(2020, 8, 24, 19, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 475835108, 'comment_body': ""I did the same thing actually. :)  Here's a bugfix, in the inner loop:\r\n\r\n```\r\nfor (size_t i = 0; i < node->numChildren; ++i)\r\n{\r\n  stack.push(node->children[i]);\r\n}\r\n```\r\n\r\n:)"", 'comment_created': datetime.datetime(2020, 8, 24, 19, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 485275140, 'comment_body': ""@shrit here's the problem.  I don't understand why this is needed; it looks like part of the patch for R bindings that you applied.  @Yashwants19 why was this needed for R?  I wonder if `BINDING_TYPE` is not defined for the tests we are building, and thus the `#if` doesn't work.  (If we do need it, I guess maybe we could make the check as `#if !defined(BINDING_TYPE) || (BINDING_TYPE != BINDING_TYPE_R)` or something like this.)"", 'comment_created': datetime.datetime(2020, 9, 9, 0, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 485341638, 'comment_body': ""If I didn't use `#define CEREAL_ARCHIVES_JSON_HPP_` in `inst/include/mlpack.h` I got these error, hence to resolve this error I have to use this definition in `inst/include/mlpack.h` and `src/rcpp_mlpack.h`and bypass all the `JSON` calls, I am really sorry, I didn't discussion about the solution, may be you might some better solution here:\r\n\r\n```\r\nIn file included from /usr/share/R/include/R.h:91,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp/r/headers.h:71,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/RcppCommon.h:29,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp.h:27,\r\n                 from ../inst/include/mlpack.h:15,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:71:66: error: expected ‘)’ before ‘newSize’\r\n   71 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |                                                                  ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:25: note: in definition of macro ‘Realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                         ^\r\n/usr/share/R/include/R_ext/RS.h:73:24: note: to match this ‘(’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:71:11: note: in expansion of macro ‘Realloc’\r\n   71 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |           ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: expected identifier before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:79:17: note: in expansion of macro ‘Free’\r\n   79 |     static void Free(void *ptr) { std::free(ptr); }\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: ‘parameter’ declared as function returning a function\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:79:17: note: in expansion of macro ‘Free’\r\n   79 |     static void Free(void *ptr) { std::free(ptr); }\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:50: error: expected ‘)’ before ‘,’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ~                         ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:79:17: note: in expansion of macro ‘Free’\r\n   79 |     static void Free(void *ptr) { std::free(ptr); }\r\n      |                 ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:191:66: error: expected ‘)’ before ‘newSize’\r\n  191 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |                                                                  ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:25: note: in definition of macro ‘Realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                         ^\r\n/usr/share/R/include/R_ext/RS.h:73:24: note: to match this ‘(’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:191:11: note: in expansion of macro ‘Realloc’\r\n  191 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n      |           ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: expected identifier before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:225:17: note: in expansion of macro ‘Free’\r\n  225 |     static void Free(void *ptr) { (void)ptr; } // Do nothing\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:37: error: ‘parameter’ declared as function returning a function\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                                     ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:225:17: note: in expansion of macro ‘Free’\r\n  225 |     static void Free(void *ptr) { (void)ptr; } // Do nothing\r\n      |                 ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:50: error: expected ‘)’ before ‘,’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ~                         ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:225:17: note: in expansion of macro ‘Free’\r\n  225 |     static void Free(void *ptr) { (void)ptr; } // Do nothing\r\n      |                 ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h: In member function ‘void rapidjson::MemoryPoolAllocator<BaseAllocator>::Clear()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:148:29: note: in expansion of macro ‘Free’\r\n  148 |             baseAllocator_->Free(chunkHead_);\r\n      |                             ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h: In member function ‘void rapidjson::internal::Stack<Allocator>::ShrinkToFit()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:103:24: note: in expansion of macro ‘Free’\r\n  103 |             Allocator::Free(stack_);\r\n      |                        ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h: In member function ‘void rapidjson::internal::Stack<Allocator>::Resize(std::size_t)’:\r\n/usr/share/R/include/R_ext/RS.h:73:24: error: expected unqualified-id before ‘(’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:28: error: expected primary-expression before ‘)’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                            ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘)’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘;’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:201:49: note: in expansion of macro ‘Realloc’\r\n  201 |         stack_ = static_cast<char*>(allocator_->Realloc(stack_, GetCapacity(), newCapacity));\r\n      |                                                 ^~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h: In member function ‘void rapidjson::internal::Stack<Allocator>::Destroy()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/stack.h:207:20: note: in expansion of macro ‘Free’\r\n  207 |         Allocator::Free(stack_);\r\n      |                    ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h: In destructor ‘rapidjson::GenericValue<Encoding, Allocator>::~GenericValue()’:\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:727:32: note: in expansion of macro ‘Free’\r\n  727 |                     Allocator::Free(e);\r\n      |                                ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:734:28: note: in expansion of macro ‘Free’\r\n  734 |                 Allocator::Free(GetMembersPointer());\r\n      |                            ^~~~\r\n/usr/share/R/include/R_ext/RS.h:74:24: error: expected unqualified-id before ‘(’ token\r\n   74 | #define Free(p)        (R_chk_free( (void *)(p) ), (p) = NULL)\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:738:28: note: in expansion of macro ‘Free’\r\n  738 |                 Allocator::Free(const_cast<Ch*>(GetStringPointer()));\r\n      |                            ^~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h: In member function ‘rapidjson::GenericValue<Encoding, Allocator>& rapidjson::GenericValue<Encoding, Allocator>::AddMember(rapidjson::GenericValue<Encoding, Allocator>&, rapidjson::GenericValue<Encoding, Allocator>&, Allocator&)’:\r\n/usr/share/R/include/R_ext/RS.h:73:24: error: expected unqualified-id before ‘(’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:71: note: in expansion of macro ‘Realloc’\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                       ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:28: error: expected primary-expression before ‘)’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                            ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:71: note: in expansion of macro ‘Realloc’\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                       ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘)’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:71: note: in expansion of macro ‘Realloc’\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                       ^~~~~~~\r\nIn file included from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/archives/json.hpp:56,\r\n                 from ./mlpack/prereqs.hpp:80,\r\n                 from ./mlpack/core/data/extension.hpp:16,\r\n                 from ./mlpack/core/data/detect_file_type.cpp:15,\r\n                 from ../inst/include/mlpack.h:46,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1199:159: error: expected ‘;’ before ‘)’ token\r\n 1199 |                 SetMembersPointer(reinterpret_cast<Member*>(allocator.Realloc(GetMembersPointer(), oldCapacity * sizeof(Member), o.capacity * sizeof(Member))));\r\n      |                                                                                                                                                               ^\r\n      |                                                                                                                                                               ;\r\nIn file included from /usr/share/R/include/R.h:91,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp/r/headers.h:71,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/RcppCommon.h:29,\r\n                 from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcpp/include/Rcpp.h:27,\r\n                 from ../inst/include/mlpack.h:15,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h: In member function ‘rapidjson::GenericValue<Encoding, Allocator>& rapidjson::GenericValue<Encoding, Allocator>::Reserve(rapidjson::SizeType, Allocator&)’:\r\n/usr/share/R/include/R_ext/RS.h:73:24: error: expected unqualified-id before ‘(’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:74: note: in expansion of macro ‘Realloc’\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                          ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:28: error: expected primary-expression before ‘)’ token\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                            ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:74: note: in expansion of macro ‘Realloc’\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                          ^~~~~~~\r\n/usr/share/R/include/R_ext/RS.h:73:30: error: expected ‘)’ before ‘R_chk_realloc’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                              ^~~~~~~~~~~~~\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:74: note: in expansion of macro ‘Realloc’\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                          ^~~~~~~\r\nIn file included from /home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/archives/json.hpp:56,\r\n                 from ./mlpack/prereqs.hpp:80,\r\n                 from ./mlpack/core/data/extension.hpp:16,\r\n                 from ./mlpack/core/data/detect_file_type.cpp:15,\r\n                 from ../inst/include/mlpack.h:46,\r\n                 from RcppExports.cpp:4:\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/document.h:1525:181: error: expected ‘;’ before ‘)’ token\r\n 1525 |             SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))));\r\n      |                                                                                                                                                                                     ^\r\n      |                                                                                                                          \r\n```"", 'comment_created': datetime.datetime(2020, 9, 9, 5, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 485443640, 'comment_body': '@rcurtin Thanks, exactly I have arrived at the same results yesterday night. I have removed the binding declaration, I am working on the `CoverTreeTest`. :+1: ', 'comment_created': datetime.datetime(2020, 9, 9, 8, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 485915052, 'comment_body': '@Yashwants19 looks like a macro collision:\r\n\r\n```\r\n/usr/share/R/include/R_ext/RS.h:73:24: note: to match this ‘(’\r\n   73 | #define Realloc(p,n,t) (t *) R_chk_realloc( (void *)(p), (R_SIZE_T)((n) * sizeof(t)) )\r\n      |                        ^\r\n/home/yashwant/R/x86_64-pc-linux-gnu-library/4.0/Rcereal/include/cereal/external/rapidjson/internal/../allocators.h:71:11: note: in expansion of macro ‘Realloc’\r\n   71 |     void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {\r\n```\r\n\r\nMaybe before including the cereal headers, you want to, e.g., `#undef Realloc` and then redefine it after inclusion is done?', 'comment_created': datetime.datetime(2020, 9, 9, 20, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486696555, 'comment_body': ""Shouldn't these two be reversed?  Otherwise we might label it `1.1.2` when it's actually `1.2.0`."", 'comment_created': datetime.datetime(2020, 9, 10, 23, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486696659, 'comment_body': 'Up to you, but we could replace with `&` in this file if you like.', 'comment_created': datetime.datetime(2020, 9, 10, 23, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486696788, 'comment_body': 'We should also modify the other parts of the README to indicate that cereal >= 1.1.2 is required.  This file and `doc/guide/build.hpp` should be sufficient.', 'comment_created': datetime.datetime(2020, 9, 10, 23, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697011, 'comment_body': '```suggestion\r\ncereal documentation at https://uscilab.github.io/cereal/index.html.\r\n```\r\n(I think it will fit on one line now.)', 'comment_created': datetime.datetime(2020, 9, 10, 23, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697212, 'comment_body': 'Just as a reminder, this one is still an open comment. :)', 'comment_created': datetime.datetime(2020, 9, 10, 23, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697535, 'comment_body': ""I think we should be able to remove this file entirely.  @Yashwants19 correct me if I'm wrong on that."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697781, 'comment_body': 'I think the comment still needs to be removed. :)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486697954, 'comment_body': '```suggestion\r\n * This implementation allows to seriliaze an array easily using cereal.\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698128, 'comment_body': '```suggestion\r\n/** \r\n * This class is used as a shim for cereal to be able to serialize a raw pointer array.\r\n */\r\ntemplate<class T>\r\nclass ArrayWrapper\r\n{\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698354, 'comment_body': ""I don't understand the comment; maybe it is inaccurate or needs to be clarified?"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698522, 'comment_body': ""I think these are unused; correct me if I'm wrong.  You could remove them if you want, if so."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698617, 'comment_body': 'We should also document this function, since this is what users will be using.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698739, 'comment_body': '```suggestion\r\n        std::is_same<Archive, cereal::JSONInputArchive>::value ||\r\n```\r\n(Regardless of what we do about the R bindings, this should still be indented.)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486698807, 'comment_body': '```suggestion\r\n        std::is_same<Archive, cereal::JSONOutputArchive>::value ||\r\n```\r\n(Same comment as in is_loading.hpp.)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699095, 'comment_body': '```suggestion\r\n/**\r\n * The objective of this class is to create a wrapper for\r\n * boost::variant. \r\n * Cereal supports the serialization of boost::variant, but \r\n * we need to serialize it if it holds a raw pointers.\r\n */\r\ntemplate<typename... VariantTypes>\r\nclass pointer_variant_wrapper\r\n{\r\n```\r\nThe double asterisks in the opening (`/**`) are important so that Doxygen actually picks up the documentation.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699224, 'comment_body': '```suggestion\r\n  pointer_variant_wrapper(boost::variant<VariantTypes...>& pointerVar) :\r\n      pointerVariant(pointerVar)\r\n```\r\nSimple style fix.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699293, 'comment_body': 'We should perhaps call this class `PointerVariantWrapper` to match mlpack naming conventions.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699338, 'comment_body': '```suggestion\r\n    // which represents the index in std::variant.\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699463, 'comment_body': 'Same comments here about the class naming and the location of the class documentation. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699565, 'comment_body': 'We should also add documentation here too. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699704, 'comment_body': ""Also same comments here about class naming and comment location.  I think this is the last one.  I hope.  But I'll find out when I keep scrolling. :)"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699770, 'comment_body': '```suggestion\r\n#ifndef MLPACK_CORE_CEREAL_POINTER_WRAPPER_HPP\r\n#define MLPACK_CORE_CEREAL_POINTER_WRAPPER_HPP\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699811, 'comment_body': 'Ah, one more. :)', 'comment_created': datetime.datetime(2020, 9, 11, 0, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486699864, 'comment_body': 'And we should also document this too. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486700430, 'comment_body': ""Just to check, this file (and `pair_associative_container.hpp`) are here for backporting to older versions, right?  It might be useful to put that in a comment at the top of each file or something so it's clear why the file is here. :+1:"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486700596, 'comment_body': ""```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */)\r\n```\r\nCorrect me if I'm wrong, but I believe that this should work throughout and matches the mlpack style a bit better.  It should be easy to catch in a regex too---I don't believe we use `uint32_t` anywhere else."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486700901, 'comment_body': ""This is a very strange diff in this file!  Do you know what's different?  Line endings maybe?  (But not on every line?)"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486701288, 'comment_body': ""It's up to you, but should we go with `ar(CEREAL_NVP(...))` throughout the codebase instead of the older boost::serialization style with `&`?  I'm fine with either.  If you wanted, you could apply a regex and I could look for every instance where it didn't get caught. :)"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486701762, 'comment_body': ""I'm actually going to resolve this comment, because I also made the same comment above and I don't want to scroll back and find it now. :smile:"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486701912, 'comment_body': 'I think this line is longer than 80 characters; also, `version` is unused so we can comment that out. :+1:', 'comment_created': datetime.datetime(2020, 9, 11, 0, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486702450, 'comment_body': ""```suggestion\r\n  // Save children last.\r\n```\r\nActually I think cereal is not going to get confused, but it's probably still good to serialize the children last.  If I remember right, the reason I had to do that for boost was that its pointer tracking would get very confused."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486702605, 'comment_body': 'We should probably make a wrapper macro for `make_array` like `CEREAL_POINTER_ARRAY()` or something?', 'comment_created': datetime.datetime(2020, 9, 11, 0, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486702976, 'comment_body': 'I *think* you could avoid this by making `datasetTemp` a `MatType*&` and adjusting the `const_cast` accordingly.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703276, 'comment_body': 'You could make this a part of the previous `is_loading()` if statement.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703429, 'comment_body': 'Same here, I think if you use `MatType*&` then this block is not needed.', 'comment_created': datetime.datetime(2020, 9, 11, 0, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703594, 'comment_body': '```suggestion\r\n  // We have to correct the dataset pointers in all of the children.\r\n  if (!hasParent)\r\n```', 'comment_created': datetime.datetime(2020, 9, 11, 0, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486703875, 'comment_body': ""Same comment here; I think if we use `MatType*&` then this block isn't necessary."", 'comment_created': datetime.datetime(2020, 9, 11, 0, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486704064, 'comment_body': ""```suggestion\r\n  Timers() : enabled(false) { }\r\n```\r\nI don't think there's a need for an extra space here. :+1:"", 'comment_created': datetime.datetime(2020, 9, 11, 0, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 486776585, 'comment_body': 'We can remove this file safely. I am not sure how this file left behind even after deleting the complete `boost` folder. :thinking: ', 'comment_created': datetime.datetime(2020, 9, 11, 5, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 486777628, 'comment_body': '`#if !defined(BINDING_TYPE) || (BINDING_TYPE != BINDING_TYPE_R)`\r\nI think so this also looks like a nice solution.\r\nOr should we use `#undef  Realloc` and `#undef Free` for fixing this?', 'comment_created': datetime.datetime(2020, 9, 11, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 487038157, 'comment_body': 'This is a very old comment, it needs to be removed I will handle it', 'comment_created': datetime.datetime(2020, 9, 11, 13, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487038497, 'comment_body': 'Yes exactly these functions can be removed safely', 'comment_created': datetime.datetime(2020, 9, 11, 13, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487041414, 'comment_body': 'OK  I see,', 'comment_created': datetime.datetime(2020, 9, 11, 13, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487042530, 'comment_body': ""Ahh, `Free` overlaps too.  Personally I think the `#undef` solution is better, because then users will still be able to serialize to JSON.  The `#if` solution will disable JSON serialization.  Maybe give it a shot and see if it works?  I assume after we include cereal, we'll have to then redefine `Realloc` and `Free`."", 'comment_created': datetime.datetime(2020, 9, 11, 13, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487044216, 'comment_body': 'Yes, of course, one regexp should fix all mlpack sources', 'comment_created': datetime.datetime(2020, 9, 11, 13, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487049179, 'comment_body': 'Yes, it is the line ending.\r\nI think the author used Emacs or a special text editor that replaced all the trailing whitespaces with special functionality. However, it seems that the editor has replaced whitespaces with a special char (I can not even tell), but it was a clear a visible in Kakoune, so I removed it manually where I saw it. \r\nAlso, I think you can see the diff locally with git diff. I am not sure how it is shown on Github.', 'comment_created': datetime.datetime(2020, 9, 11, 13, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487050706, 'comment_body': 'Yes, why not, if you prefer the new style, I also think the new one is better. It is hard to understand for a new user the strange overload for `&` and what is doing here.', 'comment_created': datetime.datetime(2020, 9, 11, 13, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487050997, 'comment_body': 'Yes, of course', 'comment_created': datetime.datetime(2020, 9, 11, 13, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487068813, 'comment_body': 'Yes of course,', 'comment_created': datetime.datetime(2020, 9, 11, 14, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487095069, 'comment_body': 'Probably with `()` everywhere in mlacpk. It need to be modified in `tests`', 'comment_created': datetime.datetime(2020, 9, 11, 14, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487095962, 'comment_body': 'I am not sure, actually, I have a file that has been added in `1.2.0` which allows as to distinguish it too.', 'comment_created': datetime.datetime(2020, 9, 11, 14, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487097625, 'comment_body': 'I think it will be `CEREAL_ARRAY_NVP` :+1: ', 'comment_created': datetime.datetime(2020, 9, 11, 14, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487400894, 'comment_body': 'I have try to apply `#undef` solution in this patch (https://gist.github.com/Yashwants19/6cdadffb26549c07c545033ca17188a3).\r\nLet me know what you think?', 'comment_created': datetime.datetime(2020, 9, 12, 11, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 487560097, 'comment_body': ""I think it should---since `valarray.hpp` will exist in versions 1.1.2 and later, then the if chain here will not actually get to this statement; even if the version is 1.2.0, it will terminate returning a version of 1.1.2.  Correct me if I'm wrong on that."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560149, 'comment_body': ""Don't forget to modify `doc/guide/build.hpp` too.  I believe that also has version dependency information. :)"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560181, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t version);\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560416, 'comment_body': ""So, for the documentation here, I don't mean to be *too* picky but these are functions that developers will be using, and it's safe to assume that most of them won't know (or care) about the internals of cereal.  So, at least for the macro versions like `CEREAL_POINTER_ARRAY`, we should write clear and comprehensive documentation about what it does and specifically when one would use the function for serialization."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560625, 'comment_body': ""```suggestion\r\n    Archive& /* ar */,\r\n```\r\nThis variable is unused, so I commented it out so that it doesn't throw a warning during compilation. :)"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560664, 'comment_body': '```suggestion\r\n    Archive& /* ar */,\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487560712, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561036, 'comment_body': '```suggestion\r\n  ar(cereal::make_nvp(""this"", *this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561153, 'comment_body': '```suggestion\r\n    ownsMetric = true;\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561174, 'comment_body': 'I think this should probably change to the macro name. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561185, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561245, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561285, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(*this));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561455, 'comment_body': 'I think the ordering is off here.  Should we move the serialization of `datasetPtr` up here?  (Also should we use `MatType*&` to simplify the code a bit?', 'comment_created': datetime.datetime(2020, 9, 13, 18, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561603, 'comment_body': ""I'll resolve this conversation, since we ended up realizing that cereal *does* have versioning support. :)"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561691, 'comment_body': ""```suggestion\r\n```\r\nThis member was only serialized in earlier versions, and we don't have to support that anymore, so we can just remove it. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561748, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */);\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561783, 'comment_body': 'We should still serialize `ownsLayers`. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561873, 'comment_body': ""We don't need this block anymore---you can see in the original code that the condition was `version < 2`, and so we don't need to support that anymore.  So there is no need to serialize any of these four members."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487561988, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```\r\n`version` seems to be unused. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562145, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562236, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562272, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562323, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```\r\nRight now, since we have just switched to cereal, there should actually be no serialize function where we use `version` (yet!).  We should only need to uncomment it after our 4.0.0 release, when serialization starts changing in classes but we have to support reverse compatibility.', 'comment_created': datetime.datetime(2020, 9, 13, 18, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562414, 'comment_body': '```suggestion\r\n        Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562496, 'comment_body': '```suggestion\r\n```\r\nThis condition was only associated with older versions where `ownsLayers` was not serialized.  Now, we can remove it. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562544, 'comment_body': '```suggestion\r\n>::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562615, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 9, 13, 18, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562706, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562735, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487562839, 'comment_body': '```suggestion\r\nvoid BayesianLinearRegression::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563049, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563083, 'comment_body': 'Here, too, we could use `MatType*&`. :+1:\r\n```suggestion\r\n    MatType*& referenceSetTmp = const_cast<MatType*&>(referenceSet);\r\n    ar(CEREAL_POINTER(referenceSetTmp));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563186, 'comment_body': 'If this works without issue, then all those other places where we make a `MatType*& tmp = const_cast<MatType*&>(...)` could be removed and we could just do the `const_cast<>` directly in the `CEREAL_NVP()` call.  Let me know what you think or if I overlooked something. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563267, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563310, 'comment_body': '```suggestion\r\n    else if (type == HMMType::DiagonalGaussianMixtureModelHMM)\r\n```\r\n(Also, the empty line above can be removed. :+1:)', 'comment_created': datetime.datetime(2020, 9, 13, 18, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563356, 'comment_body': ""I don't understand what the `[B]` here is?"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563399, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(type));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563409, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(hmm));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563455, 'comment_body': '```suggestion\r\n  ar(CEREAL_NVP(type));\r\n  ar(CEREAL_NVP(hmm));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487563565, 'comment_body': ""So, this block is special handling for a const object, but could we just change this to do the `const_cast<>` trick that's done in other places?  I may be overlooking something."", 'comment_created': datetime.datetime(2020, 9, 13, 18, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564032, 'comment_body': ""We don't need this particular block anymore---it was only useful for `version == 0`, so it can be removed. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564217, 'comment_body': '```suggestion\r\n                                               const uint32_t /* version */)\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 9, 13, 18, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564378, 'comment_body': ""`tables` appears to only be used to set the size of `secondHashTable`.  But I don't think that it actually does anything.  If I am not mistaken I believe it can be removed and we can just serialized `secondHashTable`.  Can you take a look at the code and let me know what you think?"", 'comment_created': datetime.datetime(2020, 9, 13, 18, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564400, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564440, 'comment_body': 'We should be able to use `MatType*&` or even the `const_cast` directly in the serialization call here. :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 18, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564452, 'comment_body': '```suggestion\r\n  void serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564468, 'comment_body': '```suggestion\r\nvoid NSModel<SortPolicy>::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 18, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564609, 'comment_body': ""Here's another place where we could use `MatType*&` or `const_cast` directly."", 'comment_created': datetime.datetime(2020, 9, 13, 19, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564713, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564762, 'comment_body': ""Here's another place where we could use `MatType*&` or serialize directly with `const_cast`. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 19, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564808, 'comment_body': ""I think we should re-add this comment here, since we can't quite remove it yet. :+1:"", 'comment_created': datetime.datetime(2020, 9, 13, 19, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487564854, 'comment_body': '```suggestion\r\n  main_tests/hmm_loglik_test.cpp\r\n```\r\nNo need for the extra space. :)', 'comment_created': datetime.datetime(2020, 9, 13, 19, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565017, 'comment_body': '```suggestion\r\n    boa(CEREAL_NVP(shallowTree));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565037, 'comment_body': '```suggestion\r\n    bia(CEREAL_NVP(deepTree));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565080, 'comment_body': 'Nice catch! :+1:', 'comment_created': datetime.datetime(2020, 9, 13, 19, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565133, 'comment_body': '```suggestion\r\n  oa(CEREAL_POINTER(model));\r\n```\r\nIs this comment still accurate, also?  I think it may need to be removed, since this appears to work now (correct me if I am wrong).', 'comment_created': datetime.datetime(2020, 9, 13, 19, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565169, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565195, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565288, 'comment_body': 'I wonder if it would be better to just let the exception throw here, and then it would be propagated up to the tests, where some actual good output is shown, instead of just a report that `success == false`.  What do you think?', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565314, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565329, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565336, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565341, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565361, 'comment_body': '```suggestion\r\n      o(CEREAL_POINTER(t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565387, 'comment_body': '```suggestion\r\n      i(CEREAL_POINTER(newT));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565416, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565443, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565454, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565472, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565482, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565492, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(x));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565534, 'comment_body': '```suggestion\r\n      o(CEREAL_NVP(t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565544, 'comment_body': '```suggestion\r\n      i(CEREAL_NVP(newT));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565722, 'comment_body': '```suggestion\r\n    b(cereal::make_nvp(name.c_str(), *t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565736, 'comment_body': '```suggestion\r\n  b(cereal::make_nvp(name.c_str(), *t));\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565886, 'comment_body': '```suggestion\r\n    serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565936, 'comment_body': '```suggestion\r\n    serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487565964, 'comment_body': '```suggestion\r\n                                                   const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566001, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566023, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566055, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566084, 'comment_body': '```suggestion\r\n    Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487566124, 'comment_body': '```suggestion\r\nvoid KDEModel::serialize(Archive& ar, const uint32_t /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 9, 13, 19, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 487575348, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 9, 13, 20, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487575360, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2020, 9, 13, 20, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487575523, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2020, 9, 13, 20, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487575607, 'comment_body': 'Yes, of course, I will apply the modification, I can not remember where exactly I have applied each one\r\n', 'comment_created': datetime.datetime(2020, 9, 13, 20, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487576812, 'comment_body': 'You have an eye of an eagle:+1: ', 'comment_created': datetime.datetime(2020, 9, 13, 21, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487579781, 'comment_body': 'Neither do I:+1: \r\nThe compiler does not seem to be caring too', 'comment_created': datetime.datetime(2020, 9, 13, 21, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487579987, 'comment_body': 'Totally agreed, we need to test also if the `polymorphic_impl_fwd.hpp` does not exist in 1.1.2\r\n', 'comment_created': datetime.datetime(2020, 9, 13, 21, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 487582839, 'comment_body': 'This error needs to be removed you are right\r\n', 'comment_created': datetime.datetime(2020, 9, 13, 22, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 488232724, 'comment_body': 'Yes, of course, if the exception is giving more details it would be a much better answer than the `success == false` in which we already know that.\r\nI think it is the case right now?', 'comment_created': datetime.datetime(2020, 9, 14, 21, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 489425610, 'comment_body': '```suggestion\r\n  if (extension == ""txt"" || extension == ""tsv"")\r\n```\r\nThis is in the function that saves an `SpMat`, so that doesn\'t use cereal, so we can leave it as `txt`.', 'comment_created': datetime.datetime(2020, 9, 16, 13, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489777651, 'comment_body': ""This is fixed now, so I'll resolve it. :+1:"", 'comment_created': datetime.datetime(2020, 9, 16, 21, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489779092, 'comment_body': 'I see the comment in `pair_associative_container.hpp`, but not in `unordered_map.hpp`; can you add it here too? :+1:', 'comment_created': datetime.datetime(2020, 9, 16, 22, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489780649, 'comment_body': '```suggestion\r\n       stack.push(node->right);\r\n```\r\nI noticed this in my editor. :)', 'comment_created': datetime.datetime(2020, 9, 16, 22, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489781519, 'comment_body': ""We can remove this---take a look at the original logic: if `version` was greater than or equal to 1, we serialized `ownsLayers`; *otherwise*, if we were loading, we set `ownsLayers` to `!model`.  But now, we only have to consider the case where the version is the newest (since we are removing reverse compatibility) and thus we don't need the `if` anymore. :+1:"", 'comment_created': datetime.datetime(2020, 9, 16, 22, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489783234, 'comment_body': 'Yeah, like we saw this morning, removing all the `try`/`catch` blocks gives way better output.  So I think we should adjust the code accordingly. :+1:', 'comment_created': datetime.datetime(2020, 9, 16, 22, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 489784704, 'comment_body': ""It doesn't: https://github.com/USCiLab/cereal/tree/v1.1.2/include/cereal/details\r\n\r\nSo we should be able to reorder the check here and everything should be fine. :+1:"", 'comment_created': datetime.datetime(2020, 9, 16, 22, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 490337247, 'comment_body': 'It is used later to resize the table but I totally agree with you, everything related to `tables` can be removed since cereal, handle the serialization of `std::map`', 'comment_created': datetime.datetime(2020, 9, 17, 15, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 491463541, 'comment_body': ""We should probably keep the comment but remove the `Boost_SERIALIZATION_LIBRARY` line.  Anyway let's see if it works. :smile:"", 'comment_created': datetime.datetime(2020, 9, 19, 15, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 491463708, 'comment_body': 'Agreed.\r\n', 'comment_created': datetime.datetime(2020, 9, 19, 15, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 492708293, 'comment_body': 'I think you have to remove the `/m` too.  Honestly I think you could remove the whole line.', 'comment_created': datetime.datetime(2020, 9, 22, 12, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 494649290, 'comment_body': 'Maybe adding `msbuildArguments: /Zm10` solves the issue?', 'comment_created': datetime.datetime(2020, 9, 24, 22, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 494649859, 'comment_body': 'See https://docs.microsoft.com/en-us/cpp/build/reference/zm-specify-precompiled-header-memory-allocation-limit?view=vs-2019 for more information, I guess you can also directly go for `/Zm200`.', 'comment_created': datetime.datetime(2020, 9, 24, 22, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 495038052, 'comment_body': 'I will try this one too.', 'comment_created': datetime.datetime(2020, 9, 25, 14, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 495987792, 'comment_body': ""Building Armadillo in parallel would probably be fine, so maybe we can uncomment this?  But I don't think it matters much."", 'comment_created': datetime.datetime(2020, 9, 28, 14, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 495988551, 'comment_body': '@shrit want to try the `/Zm10` or `/Zm200` options and see if they fix the remaining C1060 errors?  We are getting close---only `feedforward_network_test.cpp` and `recurrent_network_test.cpp` have problems now, and I know those particular files have very large RAM usage on Linux too.', 'comment_created': datetime.datetime(2020, 9, 28, 14, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 495989247, 'comment_body': 'In the worst case, we could perhaps split those two files into multiple files, in the hopes that smaller files would have smaller RAM usage.', 'comment_created': datetime.datetime(2020, 9, 28, 14, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 495994979, 'comment_body': 'Yes, of course, it was only for precaution:+1: ', 'comment_created': datetime.datetime(2020, 9, 28, 14, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 499139802, 'comment_body': '```suggestion\r\n```\r\nI guess you can remove these lines.', 'comment_created': datetime.datetime(2020, 10, 3, 11, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 499139827, 'comment_body': '```suggestion\r\n````\r\nSame here.', 'comment_created': datetime.datetime(2020, 10, 3, 11, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 499140013, 'comment_body': 'What if we add `${CEREAL_INCLUDE_DIR}` after finding cereal(`find_package(cereal)`).', 'comment_created': datetime.datetime(2020, 10, 3, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 499140459, 'comment_body': 'I guess we can remove this file too, and alter the changes accordingly for setup.py.in, just an idea may be I am missing something here. ', 'comment_created': datetime.datetime(2020, 10, 3, 11, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 503914907, 'comment_body': ""We should probably add a comment indicating why we commented things out here (i.e. mlpack currently causes 'compiler out of heap space' issues with VS15, but not VS16)."", 'comment_created': datetime.datetime(2020, 10, 13, 12, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 503966380, 'comment_body': '@Yashwants19 Thanks for your comment, I am very far to be a Python expert, I have removed this file, but I am not sure if there are any modifications to do in `setup.py.in`', 'comment_created': datetime.datetime(2020, 10, 13, 13, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 504075325, 'comment_body': 'May be we can\'t remove this file directly, but we can use other file here.\r\n\r\nhttps://github.com/mlpack/mlpack/blob/11f60ee7be17225d350622bb3c0dd65ac8558882/src/mlpack/bindings/python/CMakeLists.txt#L31\r\n\r\nWe can use:\r\n```cmake\r\n-P ""${CMAKE_SOURCE_DIR}/CMake/ConfigureGenerate.cmake""\r\n```\r\nand here.\r\nhttps://github.com/mlpack/mlpack/blob/11f60ee7be17225d350622bb3c0dd65ac8558882/src/mlpack/bindings/python/CMakeLists.txt#L18-L19\r\n\r\n```CMake\r\n-D GENERATE_CPP_IN=${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/setup.py.in\r\n-D GENERATE_CPP_OUT=${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/setup.py\r\n```', 'comment_created': datetime.datetime(2020, 10, 13, 16, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 504268933, 'comment_body': '@Yashwants19 Perfect I understand. I have already removed the file, so do I need to bring this file back or not?', 'comment_created': datetime.datetime(2020, 10, 13, 21, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 504835233, 'comment_body': ""This doesn't preserve the existing directories that are already in `MLPACK_INCLUDE_DIRS`."", 'comment_created': datetime.datetime(2020, 10, 14, 17, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 504836863, 'comment_body': 'True, you are right, a small mistake, sorry\r\n', 'comment_created': datetime.datetime(2020, 10, 14, 17, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 505623498, 'comment_body': '```suggestion\r\n            -D GENERATE_CPP_IN=${CMAKE_SOURCE_DIR}/src/mlpack/bindings/python/setup.py.in\r\n            -D GENERATE_CPP_OUT=${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/setup.py\r\n```\r\nI guess this must be.', 'comment_created': datetime.datetime(2020, 10, 15, 15, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 505734105, 'comment_body': ""Did this somehow break the `HoeffdingTree` serialization test on OS X?  If so I guess we should revert the suggestion. :'(  It did seem to work okay before."", 'comment_created': datetime.datetime(2020, 10, 15, 17, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 505760385, 'comment_body': 'ok, I will bring back the old temporary pointer for this one.', 'comment_created': datetime.datetime(2020, 10, 15, 18, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 506999449, 'comment_body': ""I agree with @Yashwants19 here; now there's no need for special handling.  I think we should remove `ConfigureSetup.cmake`, and then *also* rename `ConfigureGenerate.cmake` to `ConfigureFile.cmake` and rename the arguments accordingly (since it is no longer specific to configuring C++ files), and then change all uses of `ConfigureGenerate.cmake` to `ConfigureFile.cmake`. :+1:"", 'comment_created': datetime.datetime(2020, 10, 18, 0, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507000397, 'comment_body': ""I don't see any comment; would you mind adding one?  Thanks! :+1:"", 'comment_created': datetime.datetime(2020, 10, 18, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507000776, 'comment_body': 'Wait, sorry!  I was looking at not all of the commits, so I saw an old version.  It looks just fine, thank you!', 'comment_created': datetime.datetime(2020, 10, 18, 0, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507001082, 'comment_body': 'Sorry, I was looking at the wrong diff again, so it looks like `ConfigureSetup.cmake` is already gone, which is great, so my only additional suggestion would be to fix the name and comments inside of `ConfigureGenerate.cmake` so that it is `ConfigureFile.cmake`. :+1:', 'comment_created': datetime.datetime(2020, 10, 18, 0, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507856291, 'comment_body': 'Are you sure `$PWD` is right here?  It looks like you are in `build/`, so maybe `../cereal-1.3.0/include/`?', 'comment_created': datetime.datetime(2020, 10, 19, 15, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507859038, 'comment_body': 'It seems the latest revision shows a bug with this script.  When an incorrect `CEREAL_INCLUDE_DIR` is given, here is the output:\r\n\r\n```\r\nCMake Error at /usr/local/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake:164 (message):\r\n  Could NOT find cereal: Found unsuitable version ""1.1.1"", but required is at\r\n  least ""1.1.2"" (found /home/vsts/work/1/s/build/cereal-1.3.0/include)\r\n```\r\n\r\nBut in this case, no version is found at all.  So I think we should check that any cereal file at all is available.  So perhaps this:\r\n\r\n```suggestion\r\nelseif(EXISTS ""${CEREAL_INCLUDE_DIR}/cereal/cereal.hpp"")\r\n\r\n  set(CEREAL_VERSION_MAJOR 1)\r\n  set(CEREAL_VERSION_MINOR 1)\r\n  set(CEREAL_VERSION_PATCH 1)\r\nelse()\r\n\r\n  set(CEREAL_FOUND NO)\r\n```', 'comment_created': datetime.datetime(2020, 10, 19, 15, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 507875540, 'comment_body': 'Thanks, I did not know where I am,', 'comment_created': datetime.datetime(2020, 10, 19, 16, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shrit', 'type': 'User'}, {'comment_id': 507876426, 'comment_body': ""I'm just guessing, I'm not totally sure.  If that fails too just try doing `ls` and other commands in the build to try and figure out what is going on. :)"", 'comment_created': datetime.datetime(2020, 10, 19, 16, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': 'f361b8c36a36605f8104396af5e08d76156097d2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e142f5846059d790ddf5a964e756f8660b1999d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6712872fd46b66188606a6c107715b462ddeea9b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453db70e714a94e56802c433ba8661450ea358de', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc3e49880be78be0b73a71fad024c236cbdc872', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c0270f9bb6c0cd47e1194f5d373ee920362848', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cdd20506e2b5e16968db4da9c8c1f4c89236aff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6513cc0cc75d2e25a428f655b8a12ea7bb61e6cb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada11ac75ce25c287d7e04262f66743555b99a21', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27a6f75d2468baaef381e3ac711a3bd739e79791', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6914fb80830ea06b3a7d877540fc6f354265a678', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fa4ec7217a4130186f874d17a36f7d94846284', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6729fa427d2150b7818789379d246b2f201642', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7503728bfa551f5a322c2275f1ef4ef864c20424', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a745815acaf868f6e7f86fc9f7608d1e646e1aaa', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf03c45270bf5be580b85f258723f487567f3b50', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e88346892d846faef31400326c2ae553c564b66', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1166c2e84bc695d944583a72d0d5d29a0949cc60', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef773488dfbbb601b2ff62d3b76bdddfc3456fea', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e95f7cab9244fd8c75e1e69b0795e0477db0328', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87a890b75940d901216d5fd48b6061d18639b586', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f3e94dd03f8f4e55160db848dc0a73fa237cd66', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03251db791db319a049e8af5d2d508fe250ac776', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab1e900c9b74905a11c9bdbf696f256e0f1676e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1ae15bbff9a68fd90444b8fc851a89a1990543', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9923ba4e7a7ab3e723368afa8f1fce7250fb13', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '424a8ff85e99b919d380a63c20fb37ed174f7f93', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ce3e9930d0450ed4ff42f49e4c3810b4e2887ec', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa037f17057b79ffcc72d84c5cd2e2ece836e216', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a092e03b8551a6f682e87f151f5fdb6f806fe68', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd84c14a241e744f949046d4c35e451626d738776', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a83d497b215076aa071618a8a807dba0329fd2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69b6e2acbc24c66a4b67106ab31c157418ef7a2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd60188ec254cbb1d6b333b3b29097d931128dccc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc99c714c1f7d2cc8f41897cf72baeac32e4632a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8514374c40d5b61e59a4051b300ea5e0226c86c9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f99bd8db3d2cd2fa9d0c013d9347b2c030762a3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03cee034832f24ff927f82b4e5d311c64cb90b78', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e0ef895ff81f3f9d69c3506dd9fc569d22dfea', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63036a60acb90de402b079c9c5e27e157b5c6c6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be3681f1af8af65015adaa20ac677b570cab6c37', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f89a02969b0ef3f8a666597598a6e371024f73d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd53d7b76d8aaa06e1176da4214280893aa57f25d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b46cffdf1ff1141dc9fcf654e04ccfc63449237', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e1dc4ab9c2349afac44294b8b2b54f2e02e344', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8ea550998ba32535f67aeb5330fdb1b6381095', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ad085370bf0989cb3a51f46ef7a16c141bf6b2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf69b1184a4c3d996a73f08d9bf03a18f01bf83', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82138407c5b8cb917e3e33dcc47cfbc605cf266', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c67692a77d1689ff596ee5330295cce629ae22', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d1543110a833238ccd234e219bf8d109a5e6b43', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b532b184a00ad2ad1c6f1986d89640e30d2fb53', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b33a593bce66ed2584b86c3262dbc9b52e20528', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bacfbe94a4068e359421da91f076c497f1c263f0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c5c89a705b4b1cbbf68955cbf80a2b760329ac1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdd49186f5263b44ea7be8c3b5a37b59cfb84642', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c98fc353ec7a0f45fcac69109e984cb101073a20', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df86e1cfdb4b2aede1c6ac83d7bb8082219f629', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fb311443553f4698e13a5c65d19c226e2bf93f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0d91720a4922e4a81c92696db38bc8bcd79666', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '650e3618ac9992d7360f98345d389bd32afaf124', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69f669d81cfd6408c3cc7526cdc93f64e8f8d2f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bba4d90ac035dd58dbf8f27cab06a112f60c57', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96fd655b9a9cf6513a57e24c111bcfff666c355c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9122ec59df2ec6550d2e07df070e84edf907a924', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dedf9e4c9285d117d8a5ed3757acdce7ac285144', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feb27be42ca521828067c5030da40d3ec687b9e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873e80b47fe410d9d97eaaa39bfef1047cb6cbe1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '116677cfcfe055ffeb531e28f69c820c0e222186', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '987a6646e22acbe0e489a9fb45db8e2ea139132c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c25a17b3db1c181387d57156fe0b9c954b8e93', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab9bc50e1d29eec9ccd359f89404d27cdf8d5f4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf610bcef9ae743c7201929750eb3e953cb43eff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddf65c6acb6af098a611921a280b46db24c49dce', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69baeabaf7f050bfae14e581d75ecfa3e0492381', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8073d4864f630ff7cdf0673f82238217693aed09', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2696363e1b028799ce8e2189f653dd365e63590', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd1967c6dce5d0624aec7652f6143edc5c2be2a1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb7bf857114b465260a0b23c03d4bcd846c5f83f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37de2902f30f4f151e03b9768e976d1d6488c93', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f57fc9317fcb732cb7c2824b1ce038318984784', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16b4a90e5b9dcc734c608f6ac661bb436a48cc23', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e537a282c49597a573433ad08b4adf996feab51f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '089595ace63e5cb28a90033f08867ca09602597e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d05739394624e9501b709296e9f3a37b3b5c75', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea009cb5f4b8e868cee17c92ffaca40441862c8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48700016a5e4809bda3128e546a60cdead46d19f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90e21bcabf1c2874b60f1d75ecaa2d304b978f81', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '549169d232783f5f3be8b8b62180a4cb66138047', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01bc6ea8bd7295eed7eeb729112cf40b5cc5826d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c60bbbf8b4b51d0e3ccc13e8c80c9e4c4930a06', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7248899cc422d6f2ba0badec5cce1239a659dd7e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423c0cf6edac9e69a7ae9d607a33be9bb13de307', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1329b25861df6831d7e9e0fe979d16a31361beb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36a154595c204e2cb099c5915521d036b1c58111', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07f4fcacfdf2c1ee69b276978c9dc3cbc389d07f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b53b94bde8d4b03c1db3386e459c8c040e4482', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184eb471453abe59380094da714009277bc6a1c0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5ad89476fce1708e6f9d39d30ef8f9ba013220b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de6c7120b021bb51fcfdbbd8435bdaa869bdad0f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a65b5646218d54b19e088e2650ffa80da689901c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56d3bca447d81ebbc0088dadd8361cf4a3421c39', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c934903b200db6cc03530adfcb4d51a7514d76cd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726c49e688d2851867071f419546a90ba1560bdd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2590bd29d06297dc0e9eaa37842b91948fa702', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bdf7deb36047216824629a67b490801782c0728', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f2f46c7f5b69f3f29ff7cd8557a740404a214e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e323bc12d8fa31c05dfc4ffc8b48cf50d21dbff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '473a3ec804a27f48550ef2cfe76efa428ae15775', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '511a2bb9ead69844bdefe8cd8b50cfadb17b9378', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '475e9de7c172852bfaf1214bcf08318dd37dbe62', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346d3fe19060853157a59d8cd4e165e4548f884f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04eac58295d92ce2adf58faa0e3425ebc50ad0e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4667c8adc8a28a7a09f3abdd613fa9792ccb322', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c612a94f7a14e453865a87a2b5c951cadbcd35f7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297ad4b9fef15cdff68f59ec43e7f5f3fcbb88fa', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ef68f597f56ddc7fbf254e505c6e642b67b673', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8326d2b0646a2ee2509864dff409dfc64017674d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d2ff164a65e90a46dcd107269cc3236d75970f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be50215b798b93b76f05e03685450daeca1b76b3', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d023aba0ef73ee9258db47c53c2e09d67cc8286', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10489a4dc5e7d5c6310e5877273c822302fd471f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6d6565a73f4dd5d7186e0d06e466e73dde3279', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c8b6c8be4544abb079161d70dbf5fb1df90b5d6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5555748040d8e61b7c86bd5b4897c3a66facd3f6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3d4421f27940421bbbf9a47cf575b511e34060', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9399ba82463ac0f6b9e14d4da709283f380806', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '723359e300e544628ccf9217fb536d1bbbde545d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6b6bbd228fbc6f446b499984b92d2f212a4b9c0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1170fee29dd3c83f724e429f85e205e863e0dead', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afeacd43c431a5e2c927995b4a3ad7763a7d0ddb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff7ddca83cf150fe2e65fe5a375d560d5835f9ab', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13774bf3e3ab5e7f19d0d372d88ec35ddcec4db8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '106def9a9e42b4af6e2cedb9623584b1c346119c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cad613b2e9fb88500a75d5ac8320131de565414', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7101d82eea254ebdbdaaed24f59489c97ffd02e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863a7ac6394eda2f9bf567fdc1642f747448d484', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b2d9ba77bcd528393332645deec72ba1966fe1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e47c1376917e53c14c39d2061569a6b31ffee9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '631f1cdb1853da16ea579336492ddadcb6a448d8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d1ee81ad2e5715649ace4ee5b24db9af1fa4898', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e595545a016f98389d8ade4db8e78c0dd3e5df8e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d1106829f44b57d1e3d152b0e95ce8ea8d67c6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e0c97a1d70f4c4545d7e9b78aadfdf10ac1dff', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b0570abe8f94b533981fa34bda0a0dd5f01913a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '667b8075d700406cf258adaac6aa9fcadd16b6a4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb7e876799acede2104eb65a2a9118b5ed0f32ac', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ad44a023a95faff87204aa2cf961feac5875dd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7559441b3536871e854a22fd79d87d3b6d4b83d4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b335ff0510a5add20cab4e1eb4ba6ab6c1dc007b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae050dbb6ecdfee479f1ea9de3797c99ffa3c587', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21865dd1474fe9946d2202134eaf53a82b3f24d1', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1cfaa30b458c757be794e40180b6a9483e17783', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d8a3535763f1366473cc5284aa19bfd7d7fbcf8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0b95dbea5a9f2f53ad6731cccaba378bc3a3ee', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c690444089d03ea7c70e7c0c58321a627b1d92b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90b1204570d0470da09d12df2aa18fc85cca92d8', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c49615cd0843a1270ec6162c38cf4a701f6ca7d5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0481b92ce7ba838a5c46b77915e5e9c04c4565b2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee9f72ab9922ad66b16e47dd65c9098b6cbb78e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fafda54dd961460f99cfcd815476e1f89514094', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52096b9dafb777f4c81ed74d74b81a33a26e9d7e', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e73043295e9d9636097f4adf7e8d27354a7bf5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b20a55d903512582a590bc10eceeb601192eba18', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0373f5762307cf393585f04791202c90761e273f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac50a2b3d5cc1235bef1dbd12717788539647c38', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd131b07753b1ec388db3a8b67620de8ad9e282e4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c750df7328857f99ce79ae4ba582635e29123071', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f19a90731890af82ce1156c00f40117e0a3660', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07588c1a59fb14ec91ab7849333652bb90e02d5b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98d1fdfb2ee26fa77e4d83b680b36d7f085d628a', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39af001aa24cbbf97abd03d7e2f6d909c38c7a09', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d3371958340ea9c709609a9a8afb0d2e5883cba', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829c0221b716d21c292d9b6c2e70de2d7f81f5b0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc43004045d89f423bada4b97e15868e480b8168', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4aead47e13130eb00852e85c65db981d7b0fa37', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd623952684968ba6ef45e262a4b8f74a38a8f7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea876203fea1ddc66df8f39b86a73a7286be7ef6', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b59dad745c216512544418d98628e7e73e1926', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8504446354fbe7ed324d79d81f61e1f53456abbf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f6cfaffdf89806e7d60e7e20b42937e13cd8e40', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f30b3f71a163e3edc33135474b2db81ab77c675e', 'committer_username': 'Yashwants19', 'committer_name': 'Yashwant Singh Parihar', 'committer_email': 'Yashwantsingh.sngh@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 13, 54, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68394ed1c8d16b3357c5b0100432673e55cfd9da', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2468395ec6009e0640cccc184709272377405d4', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3bb66aedd11a964ebc9db60002dd5114e60ce9c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b69d9e483f1ac4283cd6692d9dc93e05bb9a6e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2df27d16cd25117ae674afe1511b581507cd35', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4084845e2389b2f1257cd9cc4b34fe382322a2c7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8085cb0621458afc2ae9051cd9ed384ee2083d52', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6212c58a5d4d584bbaa2e2a37541221ecec4ede', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea0f14c2c0bb92c16960621f0bd0a8d17ac5b8b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee3592032f0410c2debae416893f382abe839a91', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b49c9615c40f8099b7d585f6adf1f66cdda2782', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54c79bbaae19a134922c5aa9269df865482df719', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffe81a34286413a28fd6136953ce299804d605d7', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e16d8592521d35797e2ebd278071a34b968d3b5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfdc94977fb7bbd21a020b84279a01346eb88f67', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8210f9e3fbee852f7f654cf33d7289776973b3e2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cae18611d6214aa5879dae7fad7ddfdecb2697', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4d833144c9526b4e578f3723becfbc36038925f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0902a61e6e1c0f727c888ce4e27e6f73c10b46b9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f4a934d0fe227e0bfa074add030fca6561fbdd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8de0d4841c1931c1bf0ad254cedbda9749a02e6c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba3429f80b1adabbfd0026c421e1dc35fd32a1b', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384b5d29e2337f46fdb9e5636fd5080be14e9dd0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '629c01f44514b6f6a74ca09fce25b83b9e64b508', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc44b2f54de82eb9c530b6821c23983174ead72', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d598cd79ea90551d3f87f319b265d88a13420e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cee2441d6e9d147dfcd7b8ab005d9cf65b916403', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda610506155b66dda55e57446a84525200c9171', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea02d87285d6befcc545fce6e1e36a738fc5359', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948555b20f3c2d8bfa39863b4df03abc5416c51e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6406f45462179933b0e35282e90cf02481ee997', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9fdfd8c66ca150cc7a5dfea2d6082715ffd92c', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09a71e10844e3bc9d71b09f4ac87e2c5bd3130e0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e524d1ec0f65e626469d2f0afa1f058267cbc900', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a887308b867e8e9f06c98ea45ab7cd836dbce2cf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c8f93f4268b5f08010a140ebdce63051c57acd', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184efcf9d3ac1d01ff6ef64bec80192660427046', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0361c9cf4087d60760798c45fc1cdecf6ee1a9be', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bacb3e5c3b6a1e564bf690898d6d300e87a18d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3b93834f79020890ccfb5dd67936ca2fdc0e60', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c618b9141fc8a05775fc90f25cdce9a2f394a01', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5abf1c454a959531f9a28ac4cb6b20c72db4a471', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6786fb1e0609e4c0d75a78bcc2409865e691e9e5', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6fbac7a51e86b0ffa1451fb0408366755f77ba2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0bf9ab8f50518e6b8233ee06e81007de9f0de9', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeb0ea36acd4d0e2d9e52144f0fcac2018ca17cf', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd234a9804b4c664db04ab3a2dde05706a4deaf24', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd354faaa30b76c78fd8d478d5b20d798e0cd4e2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3351b143b1375d6f98cbc0310602984a6c74ce1f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e6492015a0cd856d47575750691d2b71b79e72', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f60ee7be17225d350622bb3c0dd65ac8558882', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50a6c26e568afa2f72ee68021a7f996f846ed70f', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf60ec9086e823f0a00e46ba29b36118836f96b2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '257c08bcbb3f921b403b2f624bcc163eed439408', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13a03277ea57a865cc844fd66614320707af2309', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '445a4200897efa6088ab70dfff8b1f918265141d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '249ebbfa1dc183c22039321737130ce1a86e3e13', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d36398dd558e08b7aefda7f9d34585ff9cef852', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aebb7af71488750d62969a755c16e51e033c2a7e', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07b26d3277d0119c3e44496ce9f4d746f8ef9c4d', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5893a83022ffb6b9900e6d1a96419e0bea8fe2', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '231bd5b073eb193b56cf6d570f5849401af9e0a0', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '681f792eba82e134f9e9e7c9f83bf9fd979c3416', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76b3f65b008775ecb83831ba323cf826fa8a02bb', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79a685ad27966e5089f061b9a89e0535dfa22e29', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b569c82caed17240126df3c386e09ecc7557866', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df84e83ebfa0f1c380b12c7717294d630e5557fc', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9a0f0b106a7baeb0f5aa8a8c2a39424cbb11976', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}]",Omar Shrit,15039782,omar@shrit.me,User,,38,,79,34

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1592,4989,183,321,30207,27,11,16,"[{'id': 1990961661, 'number': 3778, 'closed': None, 'created': datetime.datetime(2024, 7, 28, 15, 33, 42, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 39, 'deletions': 0, 'state': 'open'}, {'id': 1986220450, 'number': 3774, 'closed': None, 'created': datetime.datetime(2024, 7, 24, 20, 53, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 168, 'deletions': 0, 'state': 'open'}, {'id': 1912066021, 'number': 3733, 'closed': datetime.datetime(2024, 6, 10, 13, 9, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 10, 12, 5, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3890.0, 'time_delta': '1:04:50', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1910370050, 'number': 3731, 'closed': datetime.datetime(2024, 7, 15, 13, 33, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 8, 18, 19, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3179609.0, 'time_delta': '36 days, 19:13:29', 'additions': 55, 'deletions': 27, 'state': 'closed'}, {'id': 1868695743, 'number': 3704, 'closed': datetime.datetime(2024, 5, 24, 0, 49, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 14, 11, 1, 34, tzinfo=datetime.timezone.utc), 'time_taken': 827253.0, 'time_delta': '9 days, 13:47:33', 'additions': 329, 'deletions': 6422, 'state': 'closed'}, {'id': 1832193550, 'number': 3693, 'closed': datetime.datetime(2024, 5, 16, 10, 14, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 19, 18, 33, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2302812.0, 'time_delta': '26 days, 15:40:12', 'additions': 295, 'deletions': 332, 'state': 'closed'}, {'id': 1825827702, 'number': 3690, 'closed': datetime.datetime(2024, 4, 19, 11, 2, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 16, 16, 48, 15, tzinfo=datetime.timezone.utc), 'time_taken': 238482.0, 'time_delta': '2 days, 18:14:42', 'additions': 34, 'deletions': 32, 'state': 'closed'}, {'id': 1818331026, 'number': 3687, 'closed': datetime.datetime(2024, 7, 25, 19, 39, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 11, 16, 19, 42, tzinfo=datetime.timezone.utc), 'time_taken': 9083996.0, 'time_delta': '105 days, 3:19:56', 'additions': 205, 'deletions': 184, 'state': 'closed'}, {'id': 1815827030, 'number': 3683, 'closed': datetime.datetime(2024, 4, 14, 10, 14, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 10, 11, 1, 24, tzinfo=datetime.timezone.utc), 'time_taken': 342815.0, 'time_delta': '3 days, 23:13:35', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 1812433419, 'number': 3680, 'closed': datetime.datetime(2024, 4, 14, 10, 24, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 8, 15, 44, 21, tzinfo=datetime.timezone.utc), 'time_taken': 499229.0, 'time_delta': '5 days, 18:40:29', 'additions': 137, 'deletions': 127, 'state': 'closed'}, {'id': 1760999325, 'number': 3651, 'closed': datetime.datetime(2024, 3, 13, 22, 11, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 7, 13, 4, 30, tzinfo=datetime.timezone.utc), 'time_taken': 551243.0, 'time_delta': '6 days, 9:07:23', 'additions': 34, 'deletions': 32, 'state': 'closed'}, {'id': 1749766174, 'number': 3643, 'closed': datetime.datetime(2024, 3, 21, 20, 5, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 29, 13, 26, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1838297.0, 'time_delta': '21 days, 6:38:17', 'additions': 45, 'deletions': 49, 'state': 'closed'}, {'id': 1739486408, 'number': 3629, 'closed': datetime.datetime(2024, 2, 24, 12, 29, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 22, 18, 34, 44, tzinfo=datetime.timezone.utc), 'time_taken': 150905.0, 'time_delta': '1 day, 17:55:05', 'additions': 222, 'deletions': 130, 'state': 'closed'}, {'id': 1722524411, 'number': 3619, 'closed': datetime.datetime(2024, 2, 29, 11, 12, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 12, 19, 10, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1440094.0, 'time_delta': '16 days, 16:01:34', 'additions': 458, 'deletions': 530, 'state': 'closed'}, {'id': 1720512873, 'number': 3617, 'closed': datetime.datetime(2024, 2, 28, 11, 21, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 10, 13, 43, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1546680.0, 'time_delta': '17 days, 21:38:00', 'additions': 46, 'deletions': 42, 'state': 'closed'}, {'id': 1701927567, 'number': 3614, 'closed': datetime.datetime(2024, 2, 12, 11, 38, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 30, 12, 5, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1121568.0, 'time_delta': '12 days, 23:32:48', 'additions': 164, 'deletions': 103, 'state': 'closed'}, {'id': 1686901421, 'number': 3610, 'closed': datetime.datetime(2024, 1, 28, 14, 6, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 19, 13, 13, 59, tzinfo=datetime.timezone.utc), 'time_taken': 780751.0, 'time_delta': '9 days, 0:52:31', 'additions': 394, 'deletions': 423, 'state': 'closed'}, {'id': 1685204701, 'number': 3609, 'closed': datetime.datetime(2024, 1, 25, 22, 35, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 18, 16, 47, 18, tzinfo=datetime.timezone.utc), 'time_taken': 625711.0, 'time_delta': '7 days, 5:48:31', 'additions': 68, 'deletions': 53, 'state': 'closed'}, {'id': 1685023428, 'number': 3608, 'closed': datetime.datetime(2024, 1, 26, 11, 14, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 18, 15, 3, 55, tzinfo=datetime.timezone.utc), 'time_taken': 677431.0, 'time_delta': '7 days, 20:10:31', 'additions': 117, 'deletions': 101, 'state': 'closed'}, {'id': 1682789145, 'number': 3607, 'closed': datetime.datetime(2024, 1, 19, 9, 36, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 17, 11, 23, 32, tzinfo=datetime.timezone.utc), 'time_taken': 166354.0, 'time_delta': '1 day, 22:12:34', 'additions': 106, 'deletions': 84, 'state': 'closed'}, {'id': 1678225604, 'number': 3605, 'closed': datetime.datetime(2024, 1, 18, 9, 3, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 14, 19, 38, 1, tzinfo=datetime.timezone.utc), 'time_taken': 307528.0, 'time_delta': '3 days, 13:25:28', 'additions': 278, 'deletions': 291, 'state': 'closed'}, {'id': 1674452922, 'number': 3602, 'closed': datetime.datetime(2024, 1, 17, 9, 25, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 11, 13, 10, 52, tzinfo=datetime.timezone.utc), 'time_taken': 504873.0, 'time_delta': '5 days, 20:14:33', 'additions': 59, 'deletions': 30, 'state': 'closed'}, {'id': 1673298476, 'number': 3600, 'closed': datetime.datetime(2024, 1, 13, 17, 48, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 10, 22, 38, 3, tzinfo=datetime.timezone.utc), 'time_taken': 241812.0, 'time_delta': '2 days, 19:10:12', 'additions': 73, 'deletions': 89, 'state': 'closed'}, {'id': 1666810265, 'number': 3596, 'closed': datetime.datetime(2024, 7, 1, 10, 27, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 5, 21, 5, 39, tzinfo=datetime.timezone.utc), 'time_taken': 15340915.0, 'time_delta': '177 days, 13:21:55', 'additions': 256, 'deletions': 151, 'state': 'closed'}, {'id': 1652852280, 'number': 3585, 'closed': datetime.datetime(2024, 1, 5, 18, 47, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 20, 22, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1368070.0, 'time_delta': '15 days, 20:01:10', 'additions': 61, 'deletions': 18, 'state': 'closed'}, {'id': 1627166250, 'number': 3568, 'closed': datetime.datetime(2023, 12, 18, 18, 28, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 3, 15, 17, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1307512.0, 'time_delta': '15 days, 3:11:52', 'additions': 129, 'deletions': 79, 'state': 'closed'}, {'id': 1627152908, 'number': 3567, 'closed': datetime.datetime(2023, 12, 13, 17, 13, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 3, 14, 58, 49, tzinfo=datetime.timezone.utc), 'time_taken': 872055.0, 'time_delta': '10 days, 2:14:15', 'additions': 80, 'deletions': 21, 'state': 'closed'}, {'id': 1520009889, 'number': 3534, 'closed': datetime.datetime(2023, 9, 20, 15, 5, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 18, 18, 20, 59, tzinfo=datetime.timezone.utc), 'time_taken': 161086.0, 'time_delta': '1 day, 20:44:46', 'additions': 19, 'deletions': 18, 'state': 'closed'}, {'id': 1306830361, 'number': 3467, 'closed': datetime.datetime(2023, 4, 12, 2, 47, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 9, 19, 39, 30, tzinfo=datetime.timezone.utc), 'time_taken': 198474.0, 'time_delta': '2 days, 7:07:54', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1066267393, 'number': 3281, 'closed': datetime.datetime(2022, 10, 6, 1, 9, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 25, 11, 5, 28, tzinfo=datetime.timezone.utc), 'time_taken': 914669.0, 'time_delta': '10 days, 14:04:29', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 781993619, 'number': 3096, 'closed': datetime.datetime(2021, 11, 18, 3, 38, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 16, 19, 24, 57, tzinfo=datetime.timezone.utc), 'time_taken': 116025.0, 'time_delta': '1 day, 8:13:45', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 781918874, 'number': 3094, 'closed': datetime.datetime(2022, 10, 21, 14, 16, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 16, 17, 41, 5, tzinfo=datetime.timezone.utc), 'time_taken': 29277349.0, 'time_delta': '338 days, 20:35:49', 'additions': 13, 'deletions': 1, 'state': 'closed'}, {'id': 779954457, 'number': 3091, 'closed': datetime.datetime(2022, 4, 17, 10, 13, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 13, 20, 0, 55, tzinfo=datetime.timezone.utc), 'time_taken': 13356726.0, 'time_delta': '154 days, 14:12:06', 'additions': 1079, 'deletions': 974, 'state': 'closed'}, {'id': 778663803, 'number': 3089, 'closed': datetime.datetime(2021, 11, 20, 16, 36, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 11, 15, 12, 23, tzinfo=datetime.timezone.utc), 'time_taken': 782619.0, 'time_delta': '9 days, 1:23:39', 'additions': 40, 'deletions': 0, 'state': 'closed'}, {'id': 748386136, 'number': 3068, 'closed': datetime.datetime(2021, 10, 4, 16, 48, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 3, 19, 19, 12, tzinfo=datetime.timezone.utc), 'time_taken': 77329.0, 'time_delta': '21:28:49', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 742952114, 'number': 3062, 'closed': datetime.datetime(2021, 9, 28, 15, 8, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 26, 21, 34, 57, tzinfo=datetime.timezone.utc), 'time_taken': 149599.0, 'time_delta': '1 day, 17:33:19', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 741769438, 'number': 3061, 'closed': datetime.datetime(2021, 9, 26, 4, 27, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 23, 22, 23, 5, tzinfo=datetime.timezone.utc), 'time_taken': 194684.0, 'time_delta': '2 days, 6:04:44', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 730857875, 'number': 3056, 'closed': datetime.datetime(2021, 9, 10, 0, 53, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 9, 19, 7, 16, tzinfo=datetime.timezone.utc), 'time_taken': 20788.0, 'time_delta': '5:46:28', 'additions': 0, 'deletions': 27, 'state': 'closed'}, {'id': 717217282, 'number': 3040, 'closed': datetime.datetime(2021, 9, 14, 13, 34, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 21, 22, 31, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2041364.0, 'time_delta': '23 days, 15:02:44', 'additions': 78, 'deletions': 52, 'state': 'closed'}, {'id': 715389767, 'number': 3037, 'closed': datetime.datetime(2021, 8, 21, 18, 53, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 19, 26, tzinfo=datetime.timezone.utc), 'time_taken': 254024.0, 'time_delta': '2 days, 22:33:44', 'additions': 145, 'deletions': 126, 'state': 'closed'}, {'id': 682808656, 'number': 3006, 'closed': datetime.datetime(2021, 10, 21, 15, 44, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 18, 31, 15, tzinfo=datetime.timezone.utc), 'time_taken': 9580415.0, 'time_delta': '110 days, 21:13:35', 'additions': 5730, 'deletions': 1023, 'state': 'closed'}, {'id': 682604138, 'number': 3005, 'closed': datetime.datetime(2021, 7, 8, 21, 53, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 12, 51, 44, tzinfo=datetime.timezone.utc), 'time_taken': 550901.0, 'time_delta': '6 days, 9:01:41', 'additions': 0, 'deletions': 13, 'state': 'closed'}, {'id': 678535395, 'number': 2998, 'closed': datetime.datetime(2021, 7, 3, 20, 35, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 15, 28, 6, tzinfo=datetime.timezone.utc), 'time_taken': 536841.0, 'time_delta': '6 days, 5:07:21', 'additions': 1055, 'deletions': 1009, 'state': 'closed'}, {'id': 675367836, 'number': 2994, 'closed': datetime.datetime(2021, 6, 28, 21, 19, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 12, 17, 56, tzinfo=datetime.timezone.utc), 'time_taken': 550906.0, 'time_delta': '6 days, 9:01:46', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 675365025, 'number': 2993, 'closed': datetime.datetime(2021, 6, 25, 22, 1, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 12, 14, 4, tzinfo=datetime.timezone.utc), 'time_taken': 294441.0, 'time_delta': '3 days, 9:47:21', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 670583462, 'number': 2983, 'closed': datetime.datetime(2021, 6, 17, 23, 34, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 16, 51, 17, tzinfo=datetime.timezone.utc), 'time_taken': 196981.0, 'time_delta': '2 days, 6:43:01', 'additions': 4, 'deletions': 9, 'state': 'closed'}, {'id': 655089802, 'number': 2960, 'closed': datetime.datetime(2021, 5, 28, 13, 28, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 14, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 81291.0, 'time_delta': '22:34:51', 'additions': 0, 'deletions': 7, 'state': 'closed'}, {'id': 651459953, 'number': 2954, 'closed': datetime.datetime(2021, 6, 28, 21, 20, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 16, 19, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3042025.0, 'time_delta': '35 days, 5:00:25', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 651459575, 'number': 2953, 'closed': datetime.datetime(2021, 9, 22, 17, 35, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 16, 19, 21, tzinfo=datetime.timezone.utc), 'time_taken': 10458989.0, 'time_delta': '121 days, 1:16:29', 'additions': 37, 'deletions': 15, 'state': 'closed'}, {'id': 651459471, 'number': 2952, 'closed': datetime.datetime(2021, 7, 2, 22, 23, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 16, 19, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3391464.0, 'time_delta': '39 days, 6:04:24', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 634911907, 'number': 2940, 'closed': datetime.datetime(2021, 5, 19, 19, 44, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 21, 7, 49, tzinfo=datetime.timezone.utc), 'time_taken': 945396.0, 'time_delta': '10 days, 22:36:36', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 628424520, 'number': 2938, 'closed': datetime.datetime(2021, 5, 6, 13, 13, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 12, 26, 41, tzinfo=datetime.timezone.utc), 'time_taken': 434780.0, 'time_delta': '5 days, 0:46:20', 'additions': 164, 'deletions': 1, 'state': 'closed'}, {'id': 622619570, 'number': 2931, 'closed': datetime.datetime(2021, 4, 30, 22, 21, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 17, 26, 4, tzinfo=datetime.timezone.utc), 'time_taken': 536117.0, 'time_delta': '6 days, 4:55:17', 'additions': 49, 'deletions': 15, 'state': 'closed'}, {'id': 622617105, 'number': 2930, 'closed': datetime.datetime(2021, 4, 27, 17, 57, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 17, 9, 25, tzinfo=datetime.timezone.utc), 'time_taken': 262108.0, 'time_delta': '3 days, 0:48:28', 'additions': 58, 'deletions': 53, 'state': 'closed'}, {'id': 622613263, 'number': 2929, 'closed': datetime.datetime(2021, 4, 26, 12, 3, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 16, 43, 33, tzinfo=datetime.timezone.utc), 'time_taken': 155996.0, 'time_delta': '1 day, 19:19:56', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 622578662, 'number': 2928, 'closed': datetime.datetime(2021, 4, 26, 0, 57, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 12, 49, 23, tzinfo=datetime.timezone.utc), 'time_taken': 130069.0, 'time_delta': '1 day, 12:07:49', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 622576643, 'number': 2927, 'closed': datetime.datetime(2021, 4, 26, 12, 2, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 12, 33, 23, tzinfo=datetime.timezone.utc), 'time_taken': 170958.0, 'time_delta': '1 day, 23:29:18', 'additions': 140, 'deletions': 135, 'state': 'closed'}, {'id': 591545829, 'number': 2870, 'closed': datetime.datetime(2021, 3, 12, 13, 48, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 10, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 12822.0, 'time_delta': '3:33:42', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 588415997, 'number': 2866, 'closed': datetime.datetime(2021, 3, 12, 13, 50, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 9, 18, 18, 20, tzinfo=datetime.timezone.utc), 'time_taken': 243134.0, 'time_delta': '2 days, 19:32:14', 'additions': 0, 'deletions': 391, 'state': 'closed'}, {'id': 573161419, 'number': 2837, 'closed': datetime.datetime(2021, 2, 15, 21, 28, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 14, 21, 54, 57, tzinfo=datetime.timezone.utc), 'time_taken': 84818.0, 'time_delta': '23:33:38', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 560230357, 'number': 2815, 'closed': datetime.datetime(2021, 1, 24, 16, 30, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 21, 50, 25, tzinfo=datetime.timezone.utc), 'time_taken': 153598.0, 'time_delta': '1 day, 18:39:58', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 545838298, 'number': 2785, 'closed': datetime.datetime(2020, 12, 28, 2, 33, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 27, 17, 49, 56, tzinfo=datetime.timezone.utc), 'time_taken': 31389.0, 'time_delta': '8:43:09', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 527717202, 'number': 2737, 'closed': datetime.datetime(2020, 11, 28, 17, 13, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 25, 22, 16, 24, tzinfo=datetime.timezone.utc), 'time_taken': 241055.0, 'time_delta': '2 days, 18:57:35', 'additions': 421, 'deletions': 421, 'state': 'closed'}, {'id': 499332993, 'number': 2663, 'closed': datetime.datetime(2022, 12, 29, 18, 4, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 15, 23, 15, tzinfo=datetime.timezone.utc), 'time_taken': 70252883.0, 'time_delta': '813 days, 2:41:23', 'additions': 240, 'deletions': 35, 'state': 'closed'}, {'id': 453705936, 'number': 2531, 'closed': datetime.datetime(2021, 5, 1, 12, 38, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 18, 17, 28, tzinfo=datetime.timezone.utc), 'time_taken': 24603681.0, 'time_delta': '284 days, 18:21:21', 'additions': 393, 'deletions': 205, 'state': 'closed'}, {'id': 438819098, 'number': 2473, 'closed': datetime.datetime(2020, 6, 24, 4, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 21, 0, 38, tzinfo=datetime.timezone.utc), 'time_taken': 26631.0, 'time_delta': '7:23:51', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 437423713, 'number': 2467, 'closed': datetime.datetime(2020, 6, 26, 2, 24, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 15, 12, 54, tzinfo=datetime.timezone.utc), 'time_taken': 472314.0, 'time_delta': '5 days, 11:11:54', 'additions': 11, 'deletions': 94, 'state': 'closed'}, {'id': 437217033, 'number': 2465, 'closed': datetime.datetime(2020, 6, 22, 15, 16, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 17, 19, 42, tzinfo=datetime.timezone.utc), 'time_taken': 251828.0, 'time_delta': '2 days, 21:57:08', 'additions': 8789, 'deletions': 0, 'state': 'closed'}, {'id': 437206199, 'number': 2464, 'closed': datetime.datetime(2020, 6, 30, 14, 48, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 16, 53, 15, tzinfo=datetime.timezone.utc), 'time_taken': 942937.0, 'time_delta': '10 days, 21:55:37', 'additions': 1244, 'deletions': 1226, 'state': 'closed'}, {'id': 434896137, 'number': 2459, 'closed': datetime.datetime(2020, 7, 14, 23, 50, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 0, 13, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2504231.0, 'time_delta': '28 days, 23:37:11', 'additions': 13233, 'deletions': 4416, 'state': 'closed'}, {'id': 434879119, 'number': 2458, 'closed': datetime.datetime(2020, 10, 29, 14, 52, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 23, 32, 4, tzinfo=datetime.timezone.utc), 'time_taken': 11719234.0, 'time_delta': '135 days, 15:20:34', 'additions': 4346, 'deletions': 7552, 'state': 'closed'}, {'id': 419797841, 'number': 2415, 'closed': datetime.datetime(2020, 10, 11, 23, 5, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 23, 47, 28, tzinfo=datetime.timezone.utc), 'time_taken': 12611862.0, 'time_delta': '145 days, 23:17:42', 'additions': 7584, 'deletions': 6859, 'state': 'closed'}, {'id': 372764999, 'number': 2189, 'closed': datetime.datetime(2020, 2, 9, 19, 50, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 8, 22, 24, 20, tzinfo=datetime.timezone.utc), 'time_taken': 77179.0, 'time_delta': '21:26:19', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
