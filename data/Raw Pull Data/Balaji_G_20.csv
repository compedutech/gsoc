pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
713164536,Feature/dataTypes,"With this Pull Request I would like to add new feature for the DataFrame project, `dataTypes` , which helps statisticians and data scientists perform some _data type oriented analysis_ to any dataset.
In Statistics, Data Types play a very crucial and important role, which needs to be understood, to apply suitable statistical measurements to any data so that we can correctly conclude certain assumptions about the data. 
The following methods have been added:
| Method Name | Description |
| --- | --- |
| DataSeries `calculateDataType` | Returns the type of a series of value |
| DataFrame `calculateDataTypes` | Identifies the type of each column in a DataFrame |
| DataFrame `dataTypes` | Returns a dictionary of column names and it's corresponding type |
| DataFrame `dataTypeOfColumn: aColumnName` | Returns the type of `aColumnName` |
| DataFrame `dataTypeOfColumnAt: anIndex` | Returns the type of column at given Index |  

Apart from these methods , there's also `dataTypeOfColumn: put: ` and `dataTypeOfColumnAt: put:` which enables us to modify the types. There's also `calculateDataTypeOfColumn:` and `calculateDataTypeOfColumnAt:` inorder to know the type of individual columns.
Consider the below example:  
```  
df := DataFrame withRows: #(
		('Barcelona' 1.609 true nil 4 nil)  
   		('Dubai' 2.789 true nil 5 1)  
   		('London' 8.788 false nil 6 4.666)).  
df columnNames: #( 'City' 'Population' 'BeenThere' 'Medals' 'Position' 'FinalScore').
```
`df dataTypes.` returns the following Dictionary. 
| Key | Value |
| --- | --- | 
| City | ByteString |
| Population | SmallFloat64 |
| BeenThere | Boolean |
| Medals | UndefinedObject |
| Position | SmallInteger |
| FinalScore | Object |

More brief examples could be found at: [Introducing dataTypes](https://balaji612141526.wordpress.com/2021/08/06/introducing-new-feature-in-dataframe-project-datatypes/)",True,155,https://api.github.com/repos/PolyMathOrg/DataFrame/pulls/155,https://github.com/PolyMathOrg/DataFrame/pull/155,closed,367,41,6,34,3,0,0,0,[],2021-08-16 06:50:24+00:00,2023-02-14 00:19:05+00:00,47237321.0,"546 days, 17:28:41",[],"[{'commit_sha': 'a339750adb083019ae5f6b06be2e0f15bf2f4972', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '237437ea088b5c625d6cd273350557aa99a5df5c', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ffce30f66f8626c64efda6f89bf331fdc3781a0', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f11cc6123afceab27d3f64a1e79bf1f124f895', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fceb315916a4ea2725781eb645fec71866a8281', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd9602e2ec2b6e6dd4fe5d2362a202f4a377bbdd', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edf4fce3a462a6705b1127422872578eb767796b', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c649a9e39b41fed660fc8d4a8575a11a3ddb90', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d48afa0a9a040da58d8b62f90dfb99cbacc4afd', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69894689b7bea950f5efe9c0aaf0e6471bac04f5', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d7d4525c32d27b561699ff97e305e331f83137', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563f22a5621b253f1a0c589e2120394cdfe736fe', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8173e5b688a7cfdc21116c61d6f4a3467dabe58', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b25b012e9a964f93360c34175c5a419c82b582c', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6904af7c53875da0373dbfca7d9cda4222ed3d', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba296c4bb5d4305b14f3370fe73443fd26494c59', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbe031746828aa61d2ec7b7604262c8099b8f9c7', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3860b439fa65000871830971082b16ae24077c66', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81298ce10623871409194110ffcaea6aed12c3d', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c90a0db329ed8393c094ee1b68315633d17b5553', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd20634e095dc7863632ff305118ad5a7089976cf', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982ca267a8908a987f547ee8fd3dc29b7a3c7780', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa35e82c327445d1164616fa9a8699f4cb19ada0', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae87f3a9963f34b01b0f893a701bcd7d0e778984', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56ead42c59fec3f7c935cba550711f63990c3604', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ffc0ae6829d0f90d9b6d5850642137ba966d52f', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cfc27fa8e40e1089478918e34426ea0f97971c', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c66a691675f3662767be7979c2c5d086d2a6c3cc', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52cbfffbc693bf8d08f927e94bedbe53a82d8307', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69982effc245e449417c703b7d5159a6ad56e88', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9aa190ca1cf50b11eac5389887aa9dea0ba6644', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c173d2428989aadc49111e9253928a36664a9c39', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab23f941a4212564c27a41933d3f79bf2a8a051', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b90f9a00c05ea208eb3f0de5c425c93f44c6bf', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}]",Balaji G,47055982,gbalaji20002000@gmail.com,User,,40,,7,16
705858021,Feature handling empty values,"In real world data, there are some instances where a particular element is absent because of various reasons, such as, corrupt data, failure to load the information, or incomplete extraction. Handling those missing values is one of the greatest challenges faced by analysts, because making the right decision on how to handle it generates robust data models. 
This Pull request provides the ability to handle empty values to the DataFrame project.
Consider the below example : 
`df := DataFrame withRows: #( `
`#( Barcelona 1.609 nil 3 ) 
#( nil nil true 4 )
#( London 8.788 false 1 ) 
#( Tokyo 5.785 nil 5 ) 
#( Beijing nil false 6 ) ).`
`df rowNames: #( A B C D E ).`
`df columnNames: #( City Population BeenThere Position ).`

Methods like `replaceNils: anObject` , `replaceNilsWithZero` , `replaceNilsWithMean` , `replaceNilsWithMedian` , `replaceNilsWithMode`  are self explanatory. Below are some examples for remaining methods.
- - - -
`df numberOfNils.`
Returns a Dictionary which shows the total number of Nil values in each column.
| Key | Value |
| ---- | ---- |
| #City | 1 |
| #Population | 2 |
| #BeenThere | 2 |
| #Position | 0 |



`df hasNilsByColumn.`
Returns a Dictionary which shows whether each column contains nil values.
| Key | Value |
| ---- | ---- |
| #City | true |
| #Population | true |
| #BeenThere | true |
| #Position | false |  

`df hasNils.`  
returns `true` when a nil value is present anywhere in dataFrame, retrurns `false` otherwise.

`df removeRowsWithNils.`
returns a modified dataFrame after removing all rows which had nils.

`df replaceNilsWithPreviousRowValue.`
This will propagate last valid observation forward. Much similar to [ffill()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.ffill.html) in Pandas.",True,152,https://api.github.com/repos/PolyMathOrg/DataFrame/pulls/152,https://github.com/PolyMathOrg/DataFrame/pull/152,closed,429,46,6,9,2,8,0,0,[],2021-08-07 08:30:09+00:00,2023-02-13 16:02:04+00:00,47979115.0,"555 days, 7:31:55","[{'comment_id': 685011074, 'comment_body': 'I would prefer to call this `numberOfNils` which I think is more in line with Pharo naming conventions.', 'comment_created': datetime.datetime(2021, 8, 9, 8, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 685013593, 'comment_body': 'Typo: that should be `removeRowsOfColumnElementsSatisfying:`. (I know this is defined elsewhere, I am just lazily commenting here rather than opening an issue.)', 'comment_created': datetime.datetime(2021, 8, 9, 8, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 685017157, 'comment_body': 'Typo: dictionary\r\nTypo: indicates', 'comment_created': datetime.datetime(2021, 8, 9, 8, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 685018891, 'comment_body': ""I'd expect a method called `hasNils` to return a boolean indicating the presence of nils anywhere in the data frame. This one should be named something else - perhaps `hasNilsByColumn`?"", 'comment_created': datetime.datetime(2021, 8, 9, 8, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'khinsen', 'type': 'User'}, {'comment_id': 685149213, 'comment_body': 'Hi Konrad, Thanks for the suggestion. A _method which returns a boolean indicating the presence of nils anywhere in the data frame_ is nice to have. I have rewrote `hasNils`  that way and I have renamed this method body as `hasNilsByColumn`', 'comment_created': datetime.datetime(2021, 8, 9, 12, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BalajiG2000', 'type': 'User'}, {'comment_id': 685151024, 'comment_body': 'Hi Konrad, I have renamed this method. `numberOfNils` sounds more of a Pharo way. Thanks for noticing this.', 'comment_created': datetime.datetime(2021, 8, 9, 12, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BalajiG2000', 'type': 'User'}, {'comment_id': 685158335, 'comment_body': 'Fixed these Typos. Sorry about that carelessness.', 'comment_created': datetime.datetime(2021, 8, 9, 12, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BalajiG2000', 'type': 'User'}, {'comment_id': 687039170, 'comment_body': 'Fixed typos: `satisfing` to `satisfying`', 'comment_created': datetime.datetime(2021, 8, 11, 17, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BalajiG2000', 'type': 'User'}]","[{'commit_sha': '5edcb3d23ad35a5751a344cfc3fea40bc9f180be', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d829a2a4a7568f365868644a823eb2574ee8b99', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da25816e059af8341ccd951c8bc74f2343f47d8f', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5de1f2b846825a530ccf9b85222dc5d3a2c3eb57', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81e3b27604234f314d219031f1d05b7d90a73e4', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf225e357b43a44794a806e28d2729027bd0792', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d88ac9c85fe3b0fcaec85111e0fc943c4285d6b', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8343760fbba6f3ba97f0124d5a74cae1d3c3ac98', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84b5e45a9b1849d5731cbbe040c3441a87813b74', 'committer_username': 'jecisc', 'committer_name': 'CyrilFerlicot', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 2, 22, 18, 56, tzinfo=datetime.timezone.utc)}]",Balaji G,47055982,gbalaji20002000@gmail.com,User,,40,,7,16
705539871,Added cumulativeSum method (tested!),"Cumulative Sum in Statistics is used to show the summation of data as it grows with time (updated when every new number is added to the sequence).  It's significance is used to measure total contribution so far of a measure against time, majorly used in 
Statistical Anaysis.
`DataSeries >> cumulativeSum`
`Category : statistics`
Example : 
`series := DataSeries withValues: #( nil 1 2 3 nil 4 5 0 6 nil 7 8 ).`
`series cumulativeSum.`
Returns a DataSeries as below:
| Key | Value |
| --- | --- |
| 1 | 0 |
| 2 | 1 |
| 3 | 3 |
| 4 | 6 |
| 5 | 6 |
| 6 | 10 |
| 7 | 15 |
| 8 | 15 |
| 9 | 21 |
| 10 | 21 |
| 11 | 28 |
| 12 | 36 |


",True,150,https://api.github.com/repos/PolyMathOrg/DataFrame/pulls/150,https://github.com/PolyMathOrg/DataFrame/pull/150,closed,30,0,2,2,0,0,0,0,[],2021-08-06 14:44:11+00:00,2021-08-11 15:07:42+00:00,433411.0,"5 days, 0:23:31",[],"[{'commit_sha': '7f76c10ba109b41b09ef41ceb4cd252540664b12', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9bb3a6324cb7c4f8a366f70a7225943d0c2b98e', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}]",Balaji G,47055982,gbalaji20002000@gmail.com,User,,40,,7,16
705623499,implemented columns method,"Returns a collection of all columns. 
`df := DataFrame withRows: #( #('Alice' 24 'F') #('Bob' 30 'M') #('David' 22 'M').`
`df columns.`
This returns a collection as below.
`#( #('Alice' 'Bob' 'David') #(24 30 22) #('M' 'F' 'M') ).`
",True,151,https://api.github.com/repos/PolyMathOrg/DataFrame/pulls/151,https://github.com/PolyMathOrg/DataFrame/pull/151,closed,35,14,2,3,0,0,0,0,[],2021-08-06 16:57:28+00:00,2021-08-11 14:40:04+00:00,423756.0,"4 days, 21:42:36",[],"[{'commit_sha': 'ec347c2b644af79d7b6d9956d1e51d1b5d9eda8d', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e5a9db89620923b546c5b6cd141823a09a47f57', 'committer_username': 'BalajiG2000', 'committer_name': 'Balaji G', 'committer_email': 'gbalaji20002000@gmail.com', 'commit_date': datetime.datetime(2019, 1, 26, 11, 30, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0400f7108d9c3bb567cef4bbd1f6928c7e71e84b', 'committer_username': 'olekscode', 'committer_name': 'Oleksandr Zaitsev', 'committer_email': 'olk.zaytsev@gmail.com', 'commit_date': datetime.datetime(2014, 7, 25, 23, 10, 45, tzinfo=datetime.timezone.utc)}]",Balaji G,47055982,gbalaji20002000@gmail.com,User,,40,,7,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
90879489,DataFrame,PolyMathOrg/DataFrame,Smalltalk,26,73,17,16,831,36,5,2,"[{'id': 713164536, 'number': 155, 'closed': datetime.datetime(2023, 2, 14, 0, 19, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 6, 50, 24, tzinfo=datetime.timezone.utc), 'time_taken': 47237321.0, 'time_delta': '546 days, 17:28:41', 'additions': 367, 'deletions': 41, 'state': 'closed'}, {'id': 707508726, 'number': 153, 'closed': datetime.datetime(2021, 8, 11, 15, 23, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 17, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 79369.0, 'time_delta': '22:02:49', 'additions': 0, 'deletions': 32, 'state': 'closed'}, {'id': 705858021, 'number': 152, 'closed': datetime.datetime(2023, 2, 13, 16, 2, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 8, 30, 9, tzinfo=datetime.timezone.utc), 'time_taken': 47979115.0, 'time_delta': '555 days, 7:31:55', 'additions': 429, 'deletions': 46, 'state': 'closed'}, {'id': 705623499, 'number': 151, 'closed': datetime.datetime(2021, 8, 11, 14, 40, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 16, 57, 28, tzinfo=datetime.timezone.utc), 'time_taken': 423756.0, 'time_delta': '4 days, 21:42:36', 'additions': 35, 'deletions': 14, 'state': 'closed'}, {'id': 705539871, 'number': 150, 'closed': datetime.datetime(2021, 8, 11, 15, 7, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 6, 14, 44, 11, tzinfo=datetime.timezone.utc), 'time_taken': 433411.0, 'time_delta': '5 days, 0:23:31', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 696994176, 'number': 145, 'closed': datetime.datetime(2022, 2, 3, 20, 29, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 12, 43, 41, tzinfo=datetime.timezone.utc), 'time_taken': 16616740.0, 'time_delta': '192 days, 7:45:40', 'additions': 29, 'deletions': 0, 'state': 'closed'}, {'id': 678391092, 'number': 143, 'closed': datetime.datetime(2021, 7, 26, 10, 45, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 17, 58, 40, tzinfo=datetime.timezone.utc), 'time_taken': 2566012.0, 'time_delta': '29 days, 16:46:52', 'additions': 7842, 'deletions': 7821, 'state': 'closed'}, {'id': 671548072, 'number': 142, 'closed': datetime.datetime(2021, 7, 26, 14, 54, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 14, 39, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3456875.0, 'time_delta': '40 days, 0:14:35', 'additions': 10984, 'deletions': 10963, 'state': 'closed'}, {'id': 670637932, 'number': 141, 'closed': datetime.datetime(2021, 7, 22, 13, 25, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 18, 11, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3179635.0, 'time_delta': '36 days, 19:13:55', 'additions': 3194, 'deletions': 3194, 'state': 'closed'}]"
