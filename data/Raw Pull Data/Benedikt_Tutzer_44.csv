pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668291379,CLI option to write XMP metadata to pdfs,"JabRef can write XMP-metadata pdf-files linked to bib-entries.
This can be used to enrich a publication of one's own with a complete bib-entry so people receiving the pdf can easily include it in their library.
To make it possible to integrate that in a latex workflow, I made that feature available from the command line.
Users can specify the keyword 'all', a set of citekeys or pdf-files (or a mix of them) using the new '-w' CLI-option and JabRef will write XMP metadata to the relevant entries.
pdf-files can be specified by:
- a valid path to the pdf file, either relative or absolute
- any path that would be valid in the .bib file

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [X] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [X] Tests created for changes (if applicable)
- [X] Manually tested changed features in running JabRef (always required)
- [] Screenshots added in PR description (for UI changes)
- [X] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository. (JabRef/user-documentation/pull/358)",True,7814,https://api.github.com/repos/JabRef/jabref/pulls/7814,https://github.com/JabRef/jabref/pull/7814,closed,350,0,5,15,0,33,0,0,[],2021-06-11 15:49:02+00:00,2021-06-21 21:04:52+00:00,882950.0,"10 days, 5:15:50","[{'comment_id': 650904610, 'comment_body': 'Is the logger not available in CLI?', 'comment_created': datetime.datetime(2021, 6, 14, 12, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 650905851, 'comment_body': 'I know, in the CLI extraction of Globals is far from done. Could you please take a quick look, of it does make any sense to try to extract Globals or would this blow this PR too much up?', 'comment_created': datetime.datetime(2021, 6, 14, 12, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 650907016, 'comment_body': 'We love streams. We love foreach. 😅 ', 'comment_created': datetime.datetime(2021, 6, 14, 12, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 650939418, 'comment_body': 'The plan was to try it out using Globals and removing it later, but the removal is harder than I thought. There are lots of dependencies that need to be fixed.\r\nI was working on implementing unit tests this afternoon and noticed that the dependency on globals is a problem there as well (because Globals.prefs is null when running them and initializing it is forbidden).', 'comment_created': datetime.datetime(2021, 6, 14, 13, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 650939588, 'comment_body': 'Good Idea', 'comment_created': datetime.datetime(2021, 6, 14, 13, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 650942005, 'comment_body': 'It is, but many other options use System.err so I tried to keep it the same.\r\nWill change everything to Logger.error if that is the more appropriate way of printing errors.', 'comment_created': datetime.datetime(2021, 6, 14, 13, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 650948935, 'comment_body': ""The part I am most struggling with is the MessageHandler. I need to extend it's interface so I can pass a preferences object, but that breaks many tests where I don't have a preferences object that I can pass"", 'comment_created': datetime.datetime(2021, 6, 14, 13, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 650985059, 'comment_body': ""All but not foreach, because it's hard to debug"", 'comment_created': datetime.datetime(2021, 6, 14, 14, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 651150064, 'comment_body': 'Then forget about Globals extraction for and concentrate on integrating the feature. This is more important now. We need sometime in the future a solution, but not right now for this.', 'comment_created': datetime.datetime(2021, 6, 14, 17, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 651151224, 'comment_body': ""Let's talk about this with @koppor , since refactoring the logging is not the focus of your work, so I would suggest to postpone it."", 'comment_created': datetime.datetime(2021, 6, 14, 17, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 651715539, 'comment_body': 'With everything I only meant in my code. Will do that for now and we can discuss about refactoring the rest.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 651717391, 'comment_body': 'The thing is if I keep using Globals.prefs, I cannot implement any tests, as the read-access to Globals.prefs fails since Globals.prefs is null.', 'comment_created': datetime.datetime(2021, 6, 15, 11, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 651783689, 'comment_body': ""Hm. I played around with all the loops I introduced and can't figure out a way to replace them with streams while avoiding forEach without suppressing the warning messages I am printing currently.\r\nFor the example snippet you highlighted, I could change it to something like\r\n`citeKeys.stream().map(citeKey -> dataBase.getEntryByCitationKey(citeKey)).filter(Optional<>::isPresent).map(Optional<>::get).forEach(bibEntry -> writeXMPtoPDFsOfEntry(...))`\r\nBut:\r\n- that still uses forEach (I guess such a use would be ok, how else would one do this?)\r\n- I cannot print an exception to alert the user that an invalid cite key was given (not found in library).\r\n- \r\nAlso, I need to catch some exceptions (i.e. the one thrown by the XmpPdfExporter's export method) so for that I would also need forEach (AFAIK).\r\n\r\nCan you give me some pointers how to clean up these loops?"", 'comment_created': datetime.datetime(2021, 6, 15, 13, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 651907615, 'comment_body': ""I would not really use streams if it doesn't make sense or you have exception handling"", 'comment_created': datetime.datetime(2021, 6, 15, 15, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 651993249, 'comment_body': 'Seems like @Siedlerchr does not like streams. 😉 ', 'comment_created': datetime.datetime(2021, 6, 15, 17, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 652027977, 'comment_body': 'Streams are fine, but if you need exception handling its not always ideal ', 'comment_created': datetime.datetime(2021, 6, 15, 17, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 652805545, 'comment_body': 'You are using\r\n\r\n```\r\ndataBase.getEntryByCitationKey()\r\n```\r\n\r\nwould\r\n\r\n```\r\ndataBase.getEntriesByCitationKey()\r\n```\r\n\r\nbe more ""complete""?\r\n\r\n(citation keys should be unique but aren\'t always)', 'comment_created': datetime.datetime(2021, 6, 16, 15, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 652806285, 'comment_body': 'Do you want to return at this point?\r\n```suggestion\r\n                continue;\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 15, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 652829816, 'comment_body': 'Yay! one more loop! :)', 'comment_created': datetime.datetime(2021, 6, 16, 15, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 653820697, 'comment_body': '```suggestion\r\n        if (""all"".equals(filesAndCitekeys)) {\r\n```\r\nThis prevents NPEs in case filesAndCiteKeys are somehow null', 'comment_created': datetime.datetime(2021, 6, 17, 18, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 653832280, 'comment_body': '`if (!loaded.isEmpty()) ` ? (like ArgumentProcessor::exportFile)', 'comment_created': datetime.datetime(2021, 6, 17, 18, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 653855380, 'comment_body': 'Smart. I like it.', 'comment_created': datetime.datetime(2021, 6, 17, 18, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 653859938, 'comment_body': 'Not a suggestion, but a question: What about using `preferences::getWorkingDirectory` too? Would this make sense?', 'comment_created': datetime.datetime(2021, 6, 17, 19, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 653874687, 'comment_body': '```suggestion\r\n                if (filePath.isPresent()) {\r\n                    export(databaseContext, filePath.get(), encoding, entriesToWrite);\r\n                    writtenToAFile = true;\r\n                }\r\n```\r\n?', 'comment_created': datetime.datetime(2021, 6, 17, 19, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 653883215, 'comment_body': ""```suggestion\r\n        xmpPrefereces = new XmpPreferences(false, Collections.emptySet(), ',');\r\n```"", 'comment_created': datetime.datetime(2021, 6, 17, 19, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 653896111, 'comment_body': ""For just a single test object, I don't think that you'll have to make a parameterized test."", 'comment_created': datetime.datetime(2021, 6, 17, 20, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 654145505, 'comment_body': 'That\'s probably the nicer way to do it, but would that be different from Path.of("""")?', 'comment_created': datetime.datetime(2021, 6, 18, 5, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 654146493, 'comment_body': ""I agree, but it does not hurt having it parameterized (does it?) and this way it's easier to add tests in the future."", 'comment_created': datetime.datetime(2021, 6, 18, 5, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 654170356, 'comment_body': ""Makes a lot of sense. I also thought of noting this in the documentation, but the other commands relying on loaded being present don't state that either so I did not add it. Should be obvious anyhow and if not the user is alerted with an appropriate error message."", 'comment_created': datetime.datetime(2021, 6, 18, 6, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 654400081, 'comment_body': 'The working directory is the last directory JabRef stored something in. Path.of("""") is probably the directory the JabRef executable is in.', 'comment_created': datetime.datetime(2021, 6, 18, 12, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 654410324, 'comment_body': 'In that case, I don\'t see a benefit of using it. I think it would have been enough to allow only valid paths in the filesystem (so absolute or relative to Path.of("""") ). The possibility of using the exact same path that is given in the linked file is already something that I would not expect a CLI tool to be capable of.\r\nThis is even more true for the working directory, because that would mean subsequent calls could result in different outcomes which is frowned upon.\r\nThis is kind of related to the discussion we had with @koppor on wednesday, that it is unusual to have changes in the gui (preferences) affect the behaviour of the CLI.', 'comment_created': datetime.datetime(2021, 6, 18, 13, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 654483117, 'comment_body': ""Yes, that's a good point. It would provoke a major wtf moment for the user in that case."", 'comment_created': datetime.datetime(2021, 6, 18, 14, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 654483832, 'comment_body': ""Won't hurt. 👍 "", 'comment_created': datetime.datetime(2021, 6, 18, 14, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}]","[{'commit_sha': '0de0c6d7cc7ab9fb1ffc67cfa2e4af60b14c7d47', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca545d80a6c360f3309a9035753ef1d3d6ec600', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4bbedc2b226bffcc67ae2f7e897b51efa78573', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55a4099eacb552404719d2f8f64c45986c8ae7dc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdff99f2af08835fc17bf68c2f8187abcd7890b2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '869beecf0e252e8471969e28178c6f0969f8e570', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '054a6732c1a8c70344e923d11a7b5caddea05677', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f946e9d8cc1d62e4ab2ee2e207170b39ab4b9fc5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28354a432a0f56070a1f7b48dd35fc53290af757', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc4732ae2a08fe80238f24ff3b62e3a055d1318', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb4d1832b568c01177dd27279d41c730cbcae7c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8762fe24a4f9914ad8ed050693d2620ca08dedd', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b2eb1000f6fa74a5d2b24d28a89cdd1b3e691d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cd025101f5d53d36119b8ab737eb6c22f7efdc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '971efb5309abd6e260dc6bcf957c945cb201299a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
120358453,Search in PDF Files,"This implements a fulltext-search feature for linked PDF files.

![search](https://user-images.githubusercontent.com/10479048/124926907-5541e080-dffe-11eb-9ae5-299d0d140b2b.gif)

All linked pdf files are indexed using [Apache Lucene](https://lucene.apache.org/). Search-results are displayed in a google-esque fashion in an additional tab in the entry editor (visible only if a fulltext search is active).
Users can enable/disable fulltext-search with a toggle-button in the search-bar.

- [x] Change in CHANGELOG.md described
- [x] Tests created for changes
- [x] Screenshots added (for bigger UI changes)
- [x] Manually tested changed features in running JabRef
- [ ] Check documentation status (Issue created for outdated help page at [help.jabref.org](https://github.com/JabRef/help.jabref.org/issues)?)
- [ ] If you changed the localization: Did you run `gradle localizationUpdate`?
",True,2838,https://api.github.com/repos/JabRef/jabref/pulls/2838,https://github.com/JabRef/jabref/pull/2838,closed,1894,291,65,122,22,110,3,1,"[{'name': 'type: feature'}, {'name': 'external files'}, {'name': 'project: GSoC'}]",2017-05-12 16:20:04+00:00,2021-07-14 19:49:31+00:00,131686167.0,"1524 days, 3:29:27","[{'comment_id': 116368286, 'comment_body': '@koppor what is your opinion about these code style related changes?', 'comment_created': datetime.datetime(2017, 5, 13, 22, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 116368299, 'comment_body': ""I think we changed it to `-bin` on purpose...don't remember the details through. What is the reason for this change?"", 'comment_created': datetime.datetime(2017, 5, 13, 22, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 116368382, 'comment_body': 'In my opinion the `readPdfContents` should just return an empty document (maybe `Optional<Document>`?) if the file field is not present. Makes the class a bit easier to use and there might be more reasons why a straightforward reading of the file is not possible (encrypted, not found, permission error etc). ', 'comment_created': datetime.datetime(2017, 5, 13, 22, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 116368413, 'comment_body': 'The format of the files field is more complicated than a simple file path. In the end it contains a list of [linked files](https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/entry/LinkedFile.java). You can get the list of linked files using `BibEntry.getFiles()`.', 'comment_created': datetime.datetime(2017, 5, 13, 22, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 116368447, 'comment_body': 'Maybe we should use the metadata from the BibEntry? Not sure what the purpose of these information is. ', 'comment_created': datetime.datetime(2017, 5, 13, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 116368460, 'comment_body': 'There is a method in StringUtils for this (isNotBlank I think).', 'comment_created': datetime.datetime(2017, 5, 13, 22, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 116374506, 'comment_body': 'If not already done, please also add it to the libraries.txt', 'comment_created': datetime.datetime(2017, 5, 14, 7, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 116374539, 'comment_body': 'This is a bit weird, with the isEmpty \r\nThe Objects.requireNonNull will throw an NPE if the field is null. And you can omit the second parameter.\r\nThis is a breaking condition. So afterwards you can safely assume that searchString is not null', 'comment_created': datetime.datetime(2017, 5, 14, 7, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 116374574, 'comment_body': ""I think you don't need to mock the BibEntry class, you can normally use it and then just call addField(...) or similar"", 'comment_created': datetime.datetime(2017, 5, 14, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 116374589, 'comment_body': ""Wouldn't it make sense to compare two Document-objects? (Needs an equals method then)\r\ne.g. Document expected = new Document(....)"", 'comment_created': datetime.datetime(2017, 5, 14, 7, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 116374600, 'comment_body': ""Same as above, you don't need to mock them\r\nYou only need to mock classes which operate on preferences "", 'comment_created': datetime.datetime(2017, 5, 14, 7, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 116375510, 'comment_body': 'My IntellJ keeps reverting this to `all` all the time. Seems like in one commit I forgot to disable it. :/', 'comment_created': datetime.datetime(2017, 5, 14, 8, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LinusDietz', 'type': 'User'}, {'comment_id': 116376340, 'comment_body': 'I would argue against that. After all indexing is a background task and if the reading the PDF fails it is worth throwing an exception instead of returning any useless value which will not be used anywhere.', 'comment_created': datetime.datetime(2017, 5, 14, 9, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'LinusDietz', 'type': 'User'}, {'comment_id': 116376673, 'comment_body': 'Well, I think the keywords field can be very useful. The others are probably redundant with the bibEntry. Generally, I will think about if it makes sense to incorporate bibtex fields into the lucene search.', 'comment_created': datetime.datetime(2017, 5, 14, 9, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'LinusDietz', 'type': 'User'}, {'comment_id': 116376982, 'comment_body': 'Well, the question is if this is supposed to be a unit or an integration test.\r\nI have decided to write a unit test here to test the DocumentReader and ONLY the DocumentReader.\r\n\r\nOf course in this test the difference to a small integration test is not much. Would propose to keep it like that and add further integration tests soon.', 'comment_created': datetime.datetime(2017, 5, 14, 9, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'LinusDietz', 'type': 'User'}, {'comment_id': 116377022, 'comment_body': 'The Document is a Lucene class.', 'comment_created': datetime.datetime(2017, 5, 14, 9, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'LinusDietz', 'type': 'User'}, {'comment_id': 116377411, 'comment_body': 'Uhm yes. Will change that and write some integration tests.', 'comment_created': datetime.datetime(2017, 5, 14, 10, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LinusDietz', 'type': 'User'}, {'comment_id': 116393731, 'comment_body': 'done', 'comment_created': datetime.datetime(2017, 5, 14, 23, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'LinusDietz', 'type': 'User'}, {'comment_id': 657070082, 'comment_body': 'Must be \r\n```\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 12, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 657076213, 'comment_body': 'Thanks! Thats what you get for trusting Itellij to autoguess imports...', 'comment_created': datetime.datetime(2021, 6, 23, 13, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 659798167, 'comment_body': 'I think you could use an enum here for all modes and combine them? Like an EnumSet, then you can get rid of the booleans https://eddmann.com/posts/using-bit-flags-and-enumsets-in-java/', 'comment_created': datetime.datetime(2021, 6, 28, 13, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 660422903, 'comment_body': ""The values for caseSensitive and fulltext mainly comes from the state of the respective toggle button (a boolean). If we change to an EnumSet, you would have to construct the EnumSet from the booleans. I don't think that would make the code any better."", 'comment_created': datetime.datetime(2021, 6, 29, 9, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 660442410, 'comment_body': 'I will remove most metadata from the index as the search in the metadata will be kept as-is. I will create an ADR on why.', 'comment_created': datetime.datetime(2021, 6, 29, 9, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 664662142, 'comment_body': ""Although we agreed to use the Globals here, I would  nonetheless add it to the constructor \r\ne.g. this.stateManager = Globals.stateManager so it's easier to spot for future refactorings and not  hidden somehwere in a method down below"", 'comment_created': datetime.datetime(2021, 7, 6, 15, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 665924089, 'comment_body': 'Done in 85beb5c ', 'comment_created': datetime.datetime(2021, 7, 8, 7, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 665934324, 'comment_body': ""This shows how changes in indexing should happen. If Fields or Tokenizers change, the index needs to be rebuilt. Changing the version changes the path the index is stored at. If JabRef is opened after such an update, the index is rebuilt at the new location.\r\n\r\nWhat we need is a mechanism to handle out-of-date indices to make sure they don't fill up users file systems.\r\n\r\nI would suggest: At startup, silently delete all indices that were built with a different version than what is currently running.\r\nThis would probably be the best solution for most users. For people running multiple versions of JabRef at the same time (and if there was an index-update between them) JabRef would rebuild the index each time they switch versions. I think this is acceptable and probably a nieche use-case."", 'comment_created': datetime.datetime(2021, 7, 8, 7, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 666344266, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 16, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666345027, 'comment_body': 'Localize ', 'comment_created': datetime.datetime(2021, 7, 8, 16, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666347012, 'comment_body': 'I would also log the original exception, as an IOException can have many reasons it\'s otherwise hard to debug.\r\nAnd then  dialogService.notify(Localization.lang(""Failed to access fulltext search index."" See error log for details.));\r\n', 'comment_created': datetime.datetime(2021, 7, 8, 16, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666350976, 'comment_body': ""Shouldn't this be LOGGER.error?"", 'comment_created': datetime.datetime(2021, 7, 8, 16, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666357523, 'comment_body': 'See http://www.slf4j.org/faq.html#paramException,the last parameter must be exception then\r\n                LOGGER.info(""Could not read pdf file {}!"",pdf.getLInk() e);\r\n```suggestion\r\n                LOGGER.info(""Could not read pdf file {}!"", pdf.getLink(), e);\r\n```', 'comment_created': datetime.datetime(2021, 7, 8, 16, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666358128, 'comment_body': 'Same as above ', 'comment_created': datetime.datetime(2021, 7, 8, 16, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666358326, 'comment_body': 'can also be paramterized', 'comment_created': datetime.datetime(2021, 7, 8, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666362118, 'comment_body': 'Yep, I think this is fine.\r\nWhat about portable versions? ', 'comment_created': datetime.datetime(2021, 7, 8, 16, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666364208, 'comment_body': 'Can be simplified: entry.getFiles().stream().anyMatch(file-> ...)\r\n', 'comment_created': datetime.datetime(2021, 7, 8, 16, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666364540, 'comment_body': 'LOGGER.error(...)', 'comment_created': datetime.datetime(2021, 7, 8, 16, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666364663, 'comment_body': 'Logger.error', 'comment_created': datetime.datetime(2021, 7, 8, 16, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666366118, 'comment_body': 'Better is to use the @TempDir , this ensure that anything inside is deleted after the test\r\nhttps://www.baeldung.com/junit-5-temporary-directory', 'comment_created': datetime.datetime(2021, 7, 8, 16, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666366785, 'comment_body': 'Does the test still work? I remember that iat some point I had problems with the formatting ', 'comment_created': datetime.datetime(2021, 7, 8, 16, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 666691092, 'comment_body': 'Good point, I need to try what the AppDirs library returns in such a case.', 'comment_created': datetime.datetime(2021, 7, 9, 5, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667155777, 'comment_body': 'Do we need this? / Is the build process automated for new releases of the lucene libs?', 'comment_created': datetime.datetime(2021, 7, 9, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667167724, 'comment_body': 'SimpleFSDirectory is deprecated. See https://lucene.apache.org/core/8_9_0/core/org/apache/lucene/store/SimpleFSDirectory.html\r\n\r\nThis could be some kind of problem?', 'comment_created': datetime.datetime(2021, 7, 9, 19, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667173029, 'comment_body': '1. Strange\r\n2. Never called\r\n3. --> delete?', 'comment_created': datetime.datetime(2021, 7, 9, 19, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667173409, 'comment_body': ""```suggestion\r\n        // the task itself is a nop, but it's progress property will be updated by the child-tasks it creates that actually interact with the index\r\n```"", 'comment_created': datetime.datetime(2021, 7, 9, 19, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667175220, 'comment_body': 'Is there a reason here for the placeholder ""Void""? This is something I did not yet understand in java 🤔... ', 'comment_created': datetime.datetime(2021, 7, 9, 19, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667176179, 'comment_body': 'Never called according to IntelliJ', 'comment_created': datetime.datetime(2021, 7, 9, 19, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667177346, 'comment_body': 'Never called according to IntelliJ', 'comment_created': datetime.datetime(2021, 7, 9, 19, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667177661, 'comment_body': 'Never called according to IntelliJ', 'comment_created': datetime.datetime(2021, 7, 9, 19, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667180369, 'comment_body': 'Thinking hard on this one. What if more than one waiting task?\r\n\r\nWhy not use a real Queue (see https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html) to manage multiple tasks?', 'comment_created': datetime.datetime(2021, 7, 9, 19, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667181702, 'comment_body': 'Can be local variable, is never used else but in createIndex', 'comment_created': datetime.datetime(2021, 7, 9, 19, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667182451, 'comment_body': '```suggestion\r\n        entries.stream().filter(entry -> !entry.getFiles().isEmpty()).forEach(this::writeToIndex);\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 19, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667183149, 'comment_body': 'Remove return. Last thing in method anyway.', 'comment_created': datetime.datetime(2021, 7, 9, 19, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667184148, 'comment_body': '```suggestion\r\n                    long indexModificationTime = Long.parseLong(doc.getField(SearchFieldConstants.MODIFIED).stringValue());\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 20, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667184394, 'comment_body': 'IOException is never thrown', 'comment_created': datetime.datetime(2021, 7, 9, 20, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667184704, 'comment_body': 'SimpleFSDirectory is deprecated. See above.', 'comment_created': datetime.datetime(2021, 7, 9, 20, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667185426, 'comment_body': ""I know, they weren't enums before, but as the SearchQuery is used a few times, would it be possible to quickly make enums of the bools?"", 'comment_created': datetime.datetime(2021, 7, 9, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667187048, 'comment_body': 'JabRefFrame is totally a GUI thing, something we need to totally rework sometime in the future too. This is very bad in the model module. We need somehow a more generic solution here. @koppor ', 'comment_created': datetime.datetime(2021, 7, 9, 20, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667188246, 'comment_body': 'Looks strange. Maybe rename to stopFiler, decimalDigitFilter, porterStomFilter. Not really sure, what is easier to read.', 'comment_created': datetime.datetime(2021, 7, 9, 20, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667189560, 'comment_body': 'Collections.emptyList() already is unmodifiable. Wrapper is without use.', 'comment_created': datetime.datetime(2021, 7, 9, 20, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667189965, 'comment_body': 'Whats the plan here?', 'comment_created': datetime.datetime(2021, 7, 9, 20, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667190589, 'comment_body': '```suggestion\r\n        sortedList.sort((searchResult, t1) -> Float.compare(searchResult.getLuceneScore(), t1.getLuceneScore()));\r\n```\r\n\r\nSuggested by IntelliJ 👀 ', 'comment_created': datetime.datetime(2021, 7, 9, 20, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667191945, 'comment_body': 'But not multiple versions of JabRef but of the Indexer? Since users can turn of the listening to the port and run two instances of JabRef of the same version on the same time...', 'comment_created': datetime.datetime(2021, 7, 9, 20, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667192285, 'comment_body': '```suggestion\r\n        this.modified = Long.parseLong(getFieldContents(searcher, scoreDoc, MODIFIED));\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 20, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667200022, 'comment_body': ""The whole tokenization of Lucene seems to be reworked and TokenSources.getTokenStream is marked deprecated. In the lates api documentation of lucene this doesn't even appear anymore. So this needs somehow to be redone.\r\nMaybe you'll find some resources here (https://lucene.apache.org/core/8_9_0/core/org/apache/lucene/analysis/package-summary.html) or some hints here (https://stackoverflow.com/a/50785820)."", 'comment_created': datetime.datetime(2021, 7, 9, 20, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667201009, 'comment_body': 'enums instead of booleans could be shared with SearchQuery. See above.', 'comment_created': datetime.datetime(2021, 7, 9, 20, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667202306, 'comment_body': 'Depends. Readability is the leading concern...\r\nSee SearchQuery etc. above and below', 'comment_created': datetime.datetime(2021, 7, 9, 20, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667203694, 'comment_body': 'enums instead of bools could be used here too', 'comment_created': datetime.datetime(2021, 7, 9, 20, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667215571, 'comment_body': 'I thought it was necessary to build the shadow-jar but apparently, the whole file is unnecessary.\r\nThe build process cannot be automated, one needs to regenerate the jar file when updating lucene.\r\nHowever, starting from release 9, this workaround should not be necessary anymore and the shadow-jar can be removed.', 'comment_created': datetime.datetime(2021, 7, 9, 21, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667216257, 'comment_body': ""Must be leftover from when there was only one index. Don't know how the endless recursion came to happen^^. Good catch!"", 'comment_created': datetime.datetime(2021, 7, 9, 21, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667217458, 'comment_body': ""I think I saw an event bus subscriber earlier, this could be the reason why intellj says it's not called "", 'comment_created': datetime.datetime(2021, 7, 9, 21, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 667218997, 'comment_body': 'Yes, I introduced a new version number here because I assume the indexing to be updated much less frequently than JabRef. So if the fields stay the same between JabRef 5.4 and 5.5, users can keep the same index and could even run 5.4 and 5.5 at the same time.\r\nHaving two instances of JabRef running simultaneously with the same library open could lead to issues where one of them holds the lock on the index. Is this a scenario we have to consider?', 'comment_created': datetime.datetime(2021, 7, 9, 21, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667220782, 'comment_body': ""The subscribers don't call these either I think. They only call the versions of the methods that add/remove single entries or files.\r\nThe signatures were already defined in @LinusDietz' code, I just updated the code where necessary.\r\nI think they are safe to remove, but could be helpful sometime in the future. Is the policy to not have any dead (uncalled) code at all?"", 'comment_created': datetime.datetime(2021, 7, 9, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667222279, 'comment_body': ""Yes this is kind of hacky.\r\nAt the very least we need to change the name of the runningTask variable. It's not actually the running task, but the last task that was added.\r\nTherefore, if more than one is in the queue, we make the new task run after the one that was last finished is done (onFinished).\r\nI'll have a look at the Queue implementation, I'll just need to figure out how that can be connected to the BackgroundTask."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667225445, 'comment_body': ""Well, we could just use a literal 'JabRef'..."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667226296, 'comment_body': 'This is how people seem to do it. You basically chain them.\r\nIf you find it hard to read, instead of introducing a variable I would rather nest the calls.\r\n`filter = new PorterStemFilter(new DecimalDigitFilter(new StopFilter(...)))`', 'comment_created': datetime.datetime(2021, 7, 9, 21, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667226803, 'comment_body': ""Leftover from @LinusDietz. I guess it was just an idea, I don't see a usecase for it right now and would vote to remove it."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667227089, 'comment_body': ""Meh... don't really have an opinion on this. maybe just leave it as it is."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667227162, 'comment_body': 'Wow. good catch, IntelliJ.', 'comment_created': datetime.datetime(2021, 7, 9, 21, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667228157, 'comment_body': 'No, no magic strings. Maybe olly got an idea.', 'comment_created': datetime.datetime(2021, 7, 9, 21, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667229639, 'comment_body': ""Ah ok, it's already a linked list. that way.\r\nA java Queue is just a FIFO list"", 'comment_created': datetime.datetime(2021, 7, 9, 21, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667229797, 'comment_body': ""TBH, I don't think enum-sets are easier to read than booleans. If I look at a signature and see it expects an EnumSet, I need to check that set to understand what the options are. There is no need to do that with (named) booleans.\r\nFor my argument that I would need to convert them from the toggle-buttons, we could do that like described [here](https://stackoverflow.com/a/35851125/5401297)."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667320335, 'comment_body': 'For the portable versions: I can only check linux and windows. I now log the location of the index when opening a database, @Siedlerchr could you check on mac please?', 'comment_created': datetime.datetime(2021, 7, 10, 10, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667320660, 'comment_body': 'I noticed that some classes use apache commons logging (outside of this PR only CleanupUrlFormatter) while most use slf4j. Was there a migration to slf4j from when this PR was originally started?\r\nThe thing is, what you are suggesting only works in slf4j, so if this is the case I would migrate the classes in this PR to slf4j.', 'comment_created': datetime.datetime(2021, 7, 10, 10, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667322086, 'comment_body': 'I noticed that in code-howtos.md, it says to use slf4j, but the given code is for apache (LogFactory.getLog instead of LoggerFactory.getLogger). Shall I fix that in a separate PR?', 'comment_created': datetime.datetime(2021, 7, 10, 10, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667322460, 'comment_body': 'I misunderstood your original comment. I thought the Queue you were suggesting was already tailored for tasks, but its just the regular java.util.Queue. In that case it would not change much in terms of functionality, but it would be easier to read I think.', 'comment_created': datetime.datetime(2021, 7, 10, 10, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667323754, 'comment_body': ""I can't tell which test this is associated to. I would guess the MsBibImporterTest (which passes for me - just as all other tests), but can't find any reference there to this file."", 'comment_created': datetime.datetime(2021, 7, 10, 10, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667324304, 'comment_body': ""void cannot be used as a type parameter since it's not a class, therefore you need to use Void. This is so it is clear that the return value is not used."", 'comment_created': datetime.datetime(2021, 7, 10, 10, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667337085, 'comment_body': ""Ah ok.  Special behavior of void. I'm probably thinking to formalistic."", 'comment_created': datetime.datetime(2021, 7, 10, 13, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667337318, 'comment_body': ""Choose what's easier to read / clean code."", 'comment_created': datetime.datetime(2021, 7, 10, 13, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 667339012, 'comment_body': '(talking about getSortedByAlphabet only, getSortedByScore is already used to put the most prominent search-results on top in the search results tab)', 'comment_created': datetime.datetime(2021, 7, 10, 13, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667359871, 'comment_body': 'I converted to EnumSets in 44c975f6a.\r\nI stopped at SearchPreferences not to mess with peoples preferences.', 'comment_created': datetime.datetime(2021, 7, 10, 16, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667362459, 'comment_body': 'Deletion of the out-of-date indices is in cb1c3935f', 'comment_created': datetime.datetime(2021, 7, 10, 17, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667363002, 'comment_body': ""I kept it here because I don't want to mess with peoples Search-Preferences (stored). How do you usually handle such updates?"", 'comment_created': datetime.datetime(2021, 7, 10, 17, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667364802, 'comment_body': ""I think an actual queue is more understandable. I love recursion, but in this case it's not necessary and an actual queue is better.\r\nImplemented in 82b9d69"", 'comment_created': datetime.datetime(2021, 7, 10, 17, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 667366668, 'comment_body': ""I don't know when exactly the migration was, but you should use the slf4j. Slf4j is a facade for the underlying logging implementation (log4j in this case)\r\n"", 'comment_created': datetime.datetime(2021, 7, 10, 17, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 667366805, 'comment_body': 'MsBibImporterTestFiles, it is a parameterized test for grab all bib and xml files in the folder', 'comment_created': datetime.datetime(2021, 7, 10, 17, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 667366857, 'comment_body': 'Have a look at the PreferencesMigration ', 'comment_created': datetime.datetime(2021, 7, 10, 17, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 669074872, 'comment_body': '```suggestion\r\n            LOGGER.error(""Could not access app-directory at {}"", appData, e);\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 20, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 669075014, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 20, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 669077535, 'comment_body': 'This refs https://github.com/JabRef/jabref/issues/5475#issuecomment-858083303.', 'comment_created': datetime.datetime(2021, 7, 13, 20, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 669078061, 'comment_body': '```suggestion\r\n            LOGGER.error(""Could not read timestamp for {}"", resolvedPdfPath, e);\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 20, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 669085010, 'comment_body': '```suggestion\r\n            LOGGER.warn(""Could not find {}"", linkedFile.getLink());\r\n```', 'comment_created': datetime.datetime(2021, 7, 13, 20, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 669088608, 'comment_body': 'This appears twice here in the PR. Can it be factored out to another method? Just use `jabref` as string, no `FRAME_TITLE`.', 'comment_created': datetime.datetime(2021, 7, 13, 20, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 669088984, 'comment_body': 'I checked the documentation at https://github.com/harawata/appdirs. Magic string `jabref` is OK for me here.', 'comment_created': datetime.datetime(2021, 7, 13, 20, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 669543251, 'comment_body': 'All tests in MsBibImporterTestFiles pass for me.', 'comment_created': datetime.datetime(2021, 7, 14, 11, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 669614000, 'comment_body': '[ADR](https://adr.github.io/adr-manager/#/manager/JabRef/jabref/main/0022-search-metadata-directly,-without-indexing.md)', 'comment_created': datetime.datetime(2021, 7, 14, 13, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 669619233, 'comment_body': 'Works well with the portable versions, index locations are as expected.', 'comment_created': datetime.datetime(2021, 7, 14, 13, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 669632739, 'comment_body': 'I removed references to apache commons logging in #7907', 'comment_created': datetime.datetime(2021, 7, 14, 13, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 669634996, 'comment_body': 'LOGGER', 'comment_created': datetime.datetime(2021, 7, 14, 13, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 669641690, 'comment_body': 'When will I learn... sorry.\r\nInstead of logging the exception here I let it fall through to the other catch-block. Since it acesses the same file, the IO should happen on the earlier call anyways (at pdfTextStripper.getText).', 'comment_created': datetime.datetime(2021, 7, 14, 13, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': '321a0f03324b5fed019a6311c913ae4b019e07c3', 'committer_username': 'Braunch', 'committer_name': None, 'committer_email': 'braunch.dev@gmail.com', 'commit_date': datetime.datetime(2015, 10, 27, 8, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2580757c93a1d12941e670a34787525ae7999e0c', 'committer_username': 'Braunch', 'committer_name': None, 'committer_email': 'braunch.dev@gmail.com', 'commit_date': datetime.datetime(2015, 10, 27, 8, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d85dca54c0c3a9390097d1999c10a7244e0ca5', 'committer_username': 'Braunch', 'committer_name': None, 'committer_email': 'braunch.dev@gmail.com', 'commit_date': datetime.datetime(2015, 10, 27, 8, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753c25dd350e913bcf6968b52d005fa87bc38dae', 'committer_username': 'Braunch', 'committer_name': None, 'committer_email': 'braunch.dev@gmail.com', 'commit_date': datetime.datetime(2015, 10, 27, 8, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1cb446984ad4f6e7b1349dc4885ba613c178a0', 'committer_username': 'Braunch', 'committer_name': None, 'committer_email': 'braunch.dev@gmail.com', 'commit_date': datetime.datetime(2015, 10, 27, 8, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af3f1a9520f6c13c80d32f631267bbba9dac212', 'committer_username': 'Braunch', 'committer_name': None, 'committer_email': 'braunch.dev@gmail.com', 'commit_date': datetime.datetime(2015, 10, 27, 8, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40609ad1eac846e5762df09203e8b0bc4aeb477b', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8787bcd415729a56bdef820582693bb26c9f5cfd', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd51919e120a96d34180a88b46df06dc08feb10b1', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '692316b6ffe95e0391f18cb26c5c4173e2bc9da8', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dacbc3c3c8469d023e3b483e2acfa1972bf828d7', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266379829dd97d44dc795ae165c9fc1d1dc78cef', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7086a8fa3ce3ccea2b210bcf8f9664878e8ba1f5', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '444bd396a795b6caf2dfae49aaf0ba9e15a48cf4', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8547873e97b1199f5c256aa6d059c5754ce60e9b', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9cf8937bc32bfd0892f8ab4016aaeeb26d9c5d2', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eaa390059ea1e9d411700c2ee5b4ed71c709f2e', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83255b4122c9dfc1580a54fbe6de569b8a2ea2d', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25cdaffb477a895cb1813bc3a3ec2b2f43c9a868', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7bfc9aad7cdd76509fda949d96b38afa9825f87', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a71caccaa65ab57edfc342ff896d5a36796fb37', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa76b727d8c14a72dec5a3b2b31879d0f5a98c11', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed867d73b822dd7dc9120a69273135a7f1a4a1d', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9a948649274e1114456f62e8da8c6cfb03b0f97', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32af3c224e95945775cc0422d5c20e9fb4f2c97', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64c3da90bdf784b288ff06308cba237bbb79bb7', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cd3df32a2e50ec3078f4abbe02d153d0542b81a', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a12555ab71317bb5a0c409d7293f5daa1c6746eb', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2662cd6d1b4fa0c8cd93182eadd965efb2a3a5b', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '650c050aea9178b281d35ef5b0b3c25e9c9f3dfb', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6fad309f1c0188900f19318cbe3d6b3722d8270', 'committer_username': 'LinusDietz', 'committer_name': 'Linus Dietz', 'committer_email': None, 'commit_date': datetime.datetime(2011, 12, 10, 12, 20, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74c90bd9aaacc38a591e636a660799ca68b9f7f1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d9ba0bdf3458bd66bf877bedf7541e380470f47', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a53c470dc8dbfd54514343ee98741f101c15cda', 'committer_username': 'koppor', 'committer_name': 'Oliver Kopp', 'committer_email': 'kopp.dev@gmail.com', 'commit_date': datetime.datetime(2012, 1, 22, 9, 56, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a9cb0a520aba75887b8b3b661b4dd3a87e2680', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4125ee8aed445b3fcffa7006263a08eadd6171cf', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd698ffa17c905d30e678ed383aac6e3a5311665', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2475401e462e7b615d057e5c0d4156f3cafc9ae', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c2abfdd5fb5f7c6a5decf11cb2e572158aec1b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e2058a95ba24652e3d99a0f33e6da8a0e55c21', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba53bed174bc96a70444324c5b15eadd7ef0d4b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f5c8edd414334242a173e88180ff513894c990c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '596525fe68a3e4ec246bfb77ac45144e56262a0b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '516d1ca9fb22a47cf823d1a67650c5a9b679a534', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de4dbe5e4d1d1afb023d184dd6e0837029422be', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83ae36ea7198b8a1a487870d2f10a70b3e391e0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a32bec7c56b01161c02160142b44005db681c539', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'addf51e2e6b654371e7309d1037f10cf994188cc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a3d3c83f19dfe738f7f86e2c03e90758893c27b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb30b3ba9635b65af357dade218f6ded1df6b7d9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c9bf3c0318d57dc80e3a7a566a769e7123ef7ec', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651ef23fe62abc5f0a00059faa51e3628ab65753', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7804060b78f2aab78f806f49feda941fd575a08d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c7dc2579d204da1e3275ffa73cdb6d2279ed84e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148b4f63d4a31d03ea20de5feb7efd2ce6f6d6f5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edc6fe416bda329d2789a660ac10cc16ce60a45c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2557fee05c0093b1ec46f4cd0cb0baa011dcc6a0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4a9c7a37a54336ee9325fca6dbfb9b76c57ef14', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786828dbeeda98b119fbf8c120d72ccaaac0b7a0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c3a400a2d22fe7cab67aa553fe5adef53316ab', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4646ab4636cbe1104232e45d25dd328c57d5d693', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a7d0a732b35ee3a1a9646e38b84b32a66590d9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ee4540fdd04b7443924bf218754b8c297cfbc0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '181e382fa70968a80af6ecc689eae76d64aec069', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d73d0fda403a9d911e6af4c94d0ea99b5ad72b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8781aed80741ad0a8ade22c2de1e3878fa06d3d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85beb5c77f9aee091949ae417e77948d66b1e2e9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f3bc8152f0f737835038e794a08a0b55d6374a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e511cbd1b2ea6d80e16278d1ef0547dfcf941d5e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b61e14fb3e385df4644fc681413ccb929cb30c74', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebd931336b73fccc54b256dc921bf02bd5c8e5d0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cffe5b5a5ab11609ae8facd99f65bc76e82239ca', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f546d133941211dd7864a84435baad65c520445', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c3e76c8a3447ba0fd4645a54bb9f8838d74ba7c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85a048bf7a2baf56666b8a7198e1beeafb38a332', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030d5b3c185adcfb0ac1e9e2c37dedd6f516845f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acea590c6b41e8b8a770e6464d202123a1ec9661', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18aac31391d45acbdf6d33e94c97d8bdffaaa2b0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d40f7a48dc1174025b3a1cb4865aeb6cdb92a34', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da3ed1e4cb30c0dac662d0bee17569212e7ee5c7', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99decc115cdf4f7e254d72b86b9a5497df881957', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bde996d31ed147962ef8cb53ed7ff12607babaf', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4cd102f81917b75411dec78394f415a09acb3bc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856e20feb49290e260fd6e589fa62cc6fc844ca4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33e6c4aa82bdac09cf33facfb7b21ab8b111809e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27f201d6d3a4a92e948b524dc4e70da6c8967d74', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc5869f79639a167bc221579f97626ce0687d14', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'effbfdc636f3f8f5b2f7cb55a10bc64e919306c6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e5818b27e09f34ee5964a9b895f47b8db9981f1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb195e79885d2f445e0aa6feb774ade71768f45', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e10107a54d568330f611704923b96a09fd19002', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a8ac9c3dee6e16467e28a0a02b7b0a0b1fbfdf1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf636af05cc810ca69004beea82549ca8fb87f4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '989e266e5ce131d1a96390cf3ed43ba5945a22fc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f093d7d599e20321e8171d997551088b7f12b46', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '298a0d99cced020a15278c9609742f8d19c6bd2a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d711d4a7e65c07c352ade42d8ce3298f0db8869', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b879fad42790b0021a050fb747fc5c3b04d6493', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afa0130d1be21318e60c1a4e2d3ec681dba4037', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9684833d08eaa7159b970711455688afd41a868', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63eb1a1b7497e65c2fe29dc66efb9a421de1b3c4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b500ba2a9f8d8af2749f581af135311678f6007b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a554a3693abda4f71b735ebec672f4ed0c176658', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36099a80a5fc6f04e675a8c3298931f04b34a684', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c975f6a063928b0aa95dce0865d7952996f98c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb1c3935f12026177416297d75e48cfed2ae6313', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e723eb28d0e77cde7e639961331ae31a7f6236', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b9d6919e806847c314f7a6ff6a526208d10d90', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cec2089c14821fa84656b5e4fd4f139f0cd42013', 'committer_username': 'koppor', 'committer_name': 'Oliver Kopp', 'committer_email': 'kopp.dev@gmail.com', 'commit_date': datetime.datetime(2012, 1, 22, 9, 56, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69219b454015d5d6a9ed784b20233e178d8c9e1', 'committer_username': 'koppor', 'committer_name': 'Oliver Kopp', 'committer_email': 'kopp.dev@gmail.com', 'commit_date': datetime.datetime(2012, 1, 22, 9, 56, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '533331a99d79a390746334780f169393c60b10ec', 'committer_username': 'koppor', 'committer_name': 'Oliver Kopp', 'committer_email': 'kopp.dev@gmail.com', 'commit_date': datetime.datetime(2012, 1, 22, 9, 56, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd2582bab673b6bc98ea4af31c1c5f73ce986a0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46517ff70eb433442f945cb6e4bd80b377baf247', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c887a376ab33cfc5b65bb6b0c0b99af20eeb98b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc9f53dee5f9b34d0d7728f34fdc0844763868b2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7601ce662a447eaf17b1d09914882045b5018c42', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dc38521cc00d941efc8bbd4cabff36e1b994397', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '110601cf5e067d8de88fb66169094a9c7bec1709', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '964aa1ff260c683fddd89c0c933c9cf970b4039f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25d57337b7f83f592ac8ee7836c5814575fff86c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ae32b537c685a394fabbc037c78f7570ca84cc', 'committer_username': 'koppor', 'committer_name': 'Oliver Kopp', 'committer_email': 'kopp.dev@gmail.com', 'commit_date': datetime.datetime(2012, 1, 22, 9, 56, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6055fc5bdd5ec5d6a76ce9a9676ab78357bd751', 'committer_username': 'koppor', 'committer_name': 'Oliver Kopp', 'committer_email': 'kopp.dev@gmail.com', 'commit_date': datetime.datetime(2012, 1, 22, 9, 56, 44, tzinfo=datetime.timezone.utc)}]",Linus Dietz,1254003,,User,,25,,40,45
694446645,Fix broken GroupDialog,"Fixes #7912 and fixes #7930 (duplicate)

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [] Screenshots added in PR description (for UI changes)
- [] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7931,https://api.github.com/repos/JabRef/jabref/pulls/7931,https://github.com/JabRef/jabref/pull/7931,closed,2,1,2,3,1,0,0,0,[],2021-07-21 14:44:49+00:00,2021-07-21 16:10:04+00:00,5115.0,1:25:15,[],"[{'commit_sha': '699ee665144c42d90effe54960bcf31293c16687', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c1bb6ae094ed8133b5b66a2c9865c5bd14fcd5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ec6dfc83d380ba65dcf298e84ff18a781204046', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
708268900,Fulltext Index: Only index local pdf files,"Filter for locally-stored PDF files when adding to the fulltext search index.

First attempt at fixing #7942.
<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [ ] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [x] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [ ] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7980,https://api.github.com/repos/JabRef/jabref/pulls/7980,https://github.com/JabRef/jabref/pull/7980,closed,36,0,2,2,0,0,1,0,[{'name': 'project: GSoC'}],2021-08-11 05:52:53+00:00,2021-08-12 15:29:59+00:00,121026.0,"1 day, 9:37:06",[],"[{'commit_sha': 'd0099ba3ec5f650e0a8a1ea16b4906ead011ee8c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '314caa8b26a9de6642287bbb1a75b7cc37af376f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
708473923,Improved progress indication for fulltext-index operations,"Operations on the full-text index are now more fine-grained. Instead of adding a whole database at once, files are added individually so we can display a more sensible progress in the background-task menu. The progress is now also counted towards the average progress of background processes and therefore shown by the progress indicator at the top right corner.

![Peek 2021-08-18 12-04](https://user-images.githubusercontent.com/10479048/129880266-eaab86c0-1126-446d-8a22-3606487f90a6.gif)


Fixes #7961.

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [ ] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [x] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [x] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7981,https://api.github.com/repos/JabRef/jabref/pulls/7981,https://github.com/JabRef/jabref/pull/7981,closed,77,93,6,7,11,6,3,0,"[{'name': 'type: enhancement'}, {'name': 'status: ready-for-review'}, {'name': 'project: GSoC'}]",2021-08-11 08:18:58+00:00,2021-08-19 18:31:21+00:00,727943.0,"8 days, 10:12:23","[{'comment_id': 686645638, 'comment_body': ""I currently don't have the time to dive deeper into this, but one question that popup up while going over the code was: why do you need this addToIndex for an entry to be it's own background task? Each entry only has a couple of files so getting the paths of all files should be very quick, and you are not doing more in this task here if I'm not mistaken (the actual indexing is yet another task). It just adds quite a bit of overhead to have this as a separate task in my opinion."", 'comment_created': datetime.datetime(2021, 8, 11, 9, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 686652905, 'comment_body': ""It looks like you are reimplementing your own task queue system here. Why not reuse the one that is already in place? \r\nhttps://github.com/JabRef/jabref/blob/a7bd8b750395fa641e491368c59f8d438b589aaa/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java#L33\r\nI think you can simply replace `enqueueTask(task)` by `task.executeWith(taskExecutor)`. The default task executor should already take care that not too many tasks run in parallel. If you are afraid to block other tasks that are submitted to the task executor, I would propose to add a `executeInBackgroundWith` method to the task executor, that uses it's own executor as in \r\n```\r\nprivate final ExecutorService backgroundExecutor = Executors.newFixedThreadPool(2); \r\n```\r\nThe fixed thread pool executor already implements the queing system, so you don't have to do that."", 'comment_created': datetime.datetime(2021, 8, 11, 9, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 686662663, 'comment_body': ""> I think you can simply replace enqueueTask(task) by task.executeWith(taskExecutor)\r\n\r\nI guess this connects to the discussion we are having in #7961 about having one or more tasks per database. I think the placeholder-task strategy would no longer work with this approach because the scheduling is done by the ExecutorService so I cannot bind the progress and message properties when starting a task. Of course, we could do that when actually starting/finishing an operation.\r\n\r\n> The default task executor should already take care that not too many tasks run in parallel.\r\n\r\nThe index should only be modified by one thread at a time, so I would choose a pool size of 1.\r\n\r\n> If you are afraid to block other tasks that are submitted to the task executor, I would propose to add a executeInBackgroundWith method to the task executor, that uses it's own executor\r\n\r\nWould having a local executor in IndexingTaskManager be acceptable?"", 'comment_created': datetime.datetime(2021, 8, 11, 9, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 686667591, 'comment_body': '> the actual indexing is yet another task\r\n\r\nNo. The indexer here is the actual indexer, not the IndexingTaskManager. So the call below:\r\n`indexer.addToIndex(entry, file, databaseContext)`\r\nactually adds the file to the index. The\r\n`public void addToIndex(PdfIndexer indexer, BibEntry entry, BibDatabaseContext databaseContext)` creates one task that adds all files of the given entry to the index and updates the progress in between files.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 686668054, 'comment_body': '> The index should only be modified by one thread at a time, so I would choose a pool size of 1.\r\n\r\nIn this case, why not have one big background task that iterates over all entries and their files and index them synchronously (in the task)? If you only want to index one file at the time, then why do you need this complicated structure with the queue? \r\n\r\n> Would having a local executor in IndexingTaskManager be acceptable?\r\n\r\nThen you would have to deal with notifying the indexing manager about shutdown of jabref, because otherwise the executor keeps running.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 686689631, 'comment_body': ""> In this case, why not have one big background task that iterates over all entries and their files and index them synchronously (in the task)?\r\n\r\nThat's what I am doing on startup, but while JabRef is running users may add or remove files and the index needs to be updated accordingly.\r\n\r\n> Then you would have to deal with notifying the indexing manager about shutdown of jabref, because otherwise the executor keeps running.\r\n\r\nI'll keep that in mind, thanks!"", 'comment_created': datetime.datetime(2021, 8, 11, 10, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': 'b3822930558fabbd7680e43d9a61a2cc7de1151c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab2aa6fe5a610350e6556fefcf1da931a8ee5bd9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e8b67d158f4cecb8824faf68743365a9c8a2c9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd229eee9c4e954f365f8ee7687467fa9b5d40048', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5811f87368bdc1c55d588d6f3b355859b593d1be', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55da073a3a908a2287f4a09a34d15145c6f73fd', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b31bc26c36992850dae8cf4658359c1b545c58c5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
713448414,Improve presentation of fulltext search results,"Improve the visual presentation of fulltext search results according to the suggestions in #7962.

New:
- No more duplication of header
- Update search results if query changes
- Show page numbers for results
- Jump directly to page of result in PDF (internal PDF viewer)
- Change view to a TextFlow instead of a WebView
- File context menu (open file or folder)
- Try to merge broken lines while indexing
- Display results in annotations

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->

![image](https://user-images.githubusercontent.com/10479048/130264338-a4d69a72-56b9-4a04-b109-0421b2584edb.png)


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [ ] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [x] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [x] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.

Fixes #7962.",True,7989,https://api.github.com/repos/JabRef/jabref/pulls/7989,https://github.com/JabRef/jabref/pull/7989,closed,347,125,17,26,9,12,4,1,"[{'name': 'type: enhancement'}, {'name': 'status: ready-for-review'}, {'name': 'search'}, {'name': 'project: GSoC'}]",2021-08-16 13:39:00+00:00,2021-08-21 19:51:23+00:00,454343.0,"5 days, 6:12:23","[{'comment_id': 692387620, 'comment_body': 'Please stay at `FilePreferences` if possible', 'comment_created': datetime.datetime(2021, 8, 19, 18, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 692972210, 'comment_body': 'What about the StandardAction.OPEN_FOLDER and OPEN_EXTERNAL_FILE? They need the PreferencesService.', 'comment_created': datetime.datetime(2021, 8, 20, 14, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 693094233, 'comment_body': ""Doesn't it make more sense for first check if the entry is null?"", 'comment_created': datetime.datetime(2021, 8, 20, 17, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693111167, 'comment_body': 'Think so too. Java would then not even try to run shouldShow if entry is null. But the other question is, if javac is not automatically refactoring this...', 'comment_created': datetime.datetime(2021, 8, 20, 17, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 693345010, 'comment_body': ""Haha yes of course. Such stupid mistakes. In this case it would not matter that much since shouldShow does not actually read the entry. It's just passed as shouldShow is inherited with that parameter."", 'comment_created': datetime.datetime(2021, 8, 21, 11, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 693367021, 'comment_body': 'I think I added an overload a while ago where integer.toString should no be longer necessary as param', 'comment_created': datetime.datetime(2021, 8, 21, 15, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693367202, 'comment_body': 'Maybe stream().filter(entry-> entry!=null).forEach(...)', 'comment_created': datetime.datetime(2021, 8, 21, 15, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693367551, 'comment_body': 'extract to a Pattern and call Pattern.compile()...\r\n\r\nregex_PATTERN.matcher(str).replaceAll(repl)\r\n', 'comment_created': datetime.datetime(2021, 8, 21, 15, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693368179, 'comment_body': 'This whole structure looks a bit complicated. \r\nA HashMap containing another hashMap which contains a List? o.O\r\nI wonder if this could be somehow extracted to class or simplified\r\n', 'comment_created': datetime.datetime(2021, 8, 21, 15, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693368692, 'comment_body': 'Wrap the TokenStream in a try with resources ( ) block, it implements AutoCloseable , otherwise you will leak the stream \r\nhttps://lucene.apache.org/core/7_3_0/core/org/apache/lucene/analysis/TokenStream.html', 'comment_created': datetime.datetime(2021, 8, 21, 15, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693386295, 'comment_body': 'Indeed', 'comment_created': datetime.datetime(2021, 8, 21, 18, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 693386724, 'comment_body': ""I don't think introducing classes that only wrap java.util classes helps readability.\r\nAs per @tobiasdiez's suggestion we don't actually need to have the results by page any more, so we could remove one level of HashMaps."", 'comment_created': datetime.datetime(2021, 8, 21, 18, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': 'f468b97afcccb489aa7b65f6bc6ab80c4e346e04', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0eb6a1ef59fcbc1fec8e21a7eb34c7df6fadd74', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43467b0cea83d8290db53b911d43a7653f2a45f6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a198e6541a9f195d3cfa8989e454d54be3887db', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d606a458ffc5225c80ef39c11672a29c08d0acd', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf2df45674cd383e7a80b870864ec10a2faaa1c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5321dd3da24cfb7b5f60a52cf230a9489ddab906', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a3d9d8bf1da1ff615e2f4deba6591900b2651b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82866351a5138f26fba86fba090b5883883d113b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936681ec758649a60355449e768ebe84878bea3b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cef1bfb08c44ff04f74cf40f87e9871592851ebf', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8f35c8fb063b139cfb8edbfe13bd30da84bcf9c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84c5a47ca0f6e1a8994b0210549fe8bba334b83c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5980db28090a1c46ec8f715fd768afed5bd62947', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e3c58f3d911dff362e423fba3c27eddf525588', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee4bb42e9e9c9f3e2f0bae192688cc97646e918', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82035d684d4aaece963a76daa1d67c6a6b980d2e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00762c5190a5ae6b0de2330cd7bcab9fbf943ade', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc01188034bcac56bd5df6e652562b9813edc627', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4f26cddd6438997ea8c99802d6de39d513c89', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f677ea8a0d7b38b3465b68a3f1f2263134edd1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d30821cfdd89f0c4ed0d0475f27b706b8bea8f4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb652a973af7ac2a9ee25d2edd864ec89a1f4780', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7939b7d5545e6707e396ed89040c1c6088f9aa69', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ebdad80dd88736839bf8ccba42432998b2961c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce2e96d8d2f04bd0905f745101a35defc40cfa4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
700242208,Implement more pdf importers,"This PR aims to implement more pdf importers.
Currently, pdfs can be imported using the PdfContentImporter that is tailored to some IEEE and Springer formats. We want to add:
- PdfGrobidImporter.java: Query grobid.jabref.org [Grobid](https://github.com/kermitt2/grobid/) (Commits cherry-picked from #7929)
- PdfEmbeddedBibFileImporter.java: Support for pdfs that have a BibTeX file embedded into them (e.g. generated using the [authorarchive package](https://ctan.org/pkg/authorarchive?lang=en))
- PdfVerbatimBibTextImporter.java: Support for pdfs that have their own BibTeX entry on the first page (e.g. generated using the [coverpage package](https://ctan.org/pkg/coverpage))
- PdfMergeMetadataImporter.java: An Importer that:
  - Calls a list of other pdf importers
  - Merges the result (importers with higher priority have the highest credibility, fields from lower-priority importers are only used if the higher-priority importers did not deduct that field)
  - In case a DOI or ISBN was found by any of the used importers, call the DOI / ISBN fetcher to improve the entry even more

The PdfMergeMetadataImporter will be used when users import PDFs into JabRef.

- <!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->

<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [x] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [x] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [ ] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7947,https://api.github.com/repos/JabRef/jabref/pulls/7947,https://github.com/JabRef/jabref/pull/7947,closed,993,47,21,51,4,6,1,1,[{'name': 'project: GSoC'}],2021-07-30 12:07:25+00:00,2021-08-18 16:22:49+00:00,1656924.0,"19 days, 4:15:24","[{'comment_id': 679899370, 'comment_body': '```suggestion\r\n- We improved the deduction of bib-entries from imported fulltext pdfs. [#7947](https://github.com/JabRef/jabref/pull/7947)\r\n```\r\nhttps://theoatmeal.com/comics/apostrophe ;)', 'comment_created': datetime.datetime(2021, 7, 30, 12, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 679912596, 'comment_body': 'I know, still WIP but would be better to compare a bib entry here instead of the sze', 'comment_created': datetime.datetime(2021, 7, 30, 13, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 679994879, 'comment_body': 'True', 'comment_created': datetime.datetime(2021, 7, 30, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 687839279, 'comment_body': 'In URLDownload we have some logic about bypassing SSL certifications. Something to think about here with Jsoup?', 'comment_created': datetime.datetime(2021, 8, 12, 15, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 688571545, 'comment_body': ""I don't think it's necessary as the Grobid Server is controlled by JabRef and there is no SSL certificate in place."", 'comment_created': datetime.datetime(2021, 8, 13, 14, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 689334178, 'comment_body': "">GROBID (or Grobid, but not GroBid nor GroBiD) means GeneRation Of BIbliographic Data.\r\n\r\nThis is an acronym which doesn't need translation. "", 'comment_created': datetime.datetime(2021, 8, 16, 8, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}]","[{'commit_sha': '8a7b80f853a5e1d5ccdcc843521ae9d9639aa4f5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fe2a236f4cbffe584986b0f3957cd4bc394e910', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f99bc52d2f11176a2f170b687c844860ef938d13', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d64d8086995eafc83b11d25df8925a64d1a997c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f591bfc2be642da499b9d3b0ca04d582f3032117', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2bd36505851a1734f1682aa6341403bbf5e7a5a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e458c777aef29b3fec25ad24e70874347c971364', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5478585683958fe63e0ff937208b706f48313c66', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cc6637a4337a13eda25ac81baf20f6057d0cba', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd78fc356767f5da198e618813d5bca57b76ef9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb22157838461e4b436de1cb0004ced14405b249', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac0094eefb522d036e8166cf019cb87842cc067', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87ed4e9ba6d979fad77428f9d948913c84de66f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8c4da8d3edac0c24e9196c3a4cba9930878a25', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168b8669d76f77f4fb87b709efaf0c32c4c5cee2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42adea9dd91ef2f2b26dcda51b78a129ff41e442', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73dc505069f6e4fab9579f93941f4ceba5decaa8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce710557fa7b3103559b75012c55651296a804d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d8e9a6d9e8c1c62077bf2fd4d8d96fe65cb36b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9080f142cb338f1c5959ae96fe38c2a2425dc700', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2757be65ea156f2dd6c4cf833fde30cafc203451', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a05c3e3aaf5d77081313c1b66fda8bbca0cf484', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c488ec3d56704d3c3bee41acb0f412020e95526', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02057f005daa2538ac457d6e7cf910b27d107985', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d66855416dd70d6e3d606d1ecb1a527ccc084b8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8918bc9d9d79e9f4de5c35800ffd837a87ac9c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56868f539bbfb02318d522cec0a08f9f8e7bccd0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479a0bc87b4558fb4a0d741709b214572c11b99e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6a910b51da2a34bf1781ef317fa883b23836ad', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e18eabd6a4f1fef2198f61861ad7692ab37be10e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf6409c4f76ddfcd1c727a1e056e216ef8d2714', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787e040e441f19d58542445abb076b47a3be40ba', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cdff9159f019c26ccca60b0efcba75ad2d8d85', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564988ace5eae3ce0ac6fe166dd0d7b88aee49c1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d279ae51681435c996e19842f99d35a115a7f0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04eecaf16c87f2cf07e1a13df0c348be259515ae', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e5b6251afc519dd3fa57538708ebdbffa43e33', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cbf9190488662536805d5598c43a265e5ab2e5a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb4dfcdcdc3ec56eb7a9a4b8343280f5b84af8b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab8ebb9d26dd281cb258b980922d08442a88f31', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba8b401b094bf6333a1b15b8dd8d4c1477748b3', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18dbb67b98d40cac30506e1a8095272bdbaaccf5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d46df470b77d393ffffa9e6651a7b70679c3ca6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b27598081d7c9eaf98a84347bfd6789fa8703e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6324cf2fda844d3bb4479522df848a9242bc4820', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf2af7783cbb7805ecfe0101f75684f3ad7ac57', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b555adafc9633a63aee601671717ed8c7a75b266', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7604b6e4af214ba786f6224a1fc4b7ec15d1ec2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cff87c7a08530ba474da461cedcdbe4b3b62c92', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ac20022ea0886a2cfd96732b3f94fb19069479a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e22b735939c8078028ebfa9e9178df5511289f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
704604468,Remove DOI lookup from PdfContentImporter,"Identifiers found in PDFs will be fetched by the PdfMergeMetadataImporter (7947).
This way, we can fetch identifiers found by the other Pdf-Importers as well (Grobid, embedded-bib, XMP...)
<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [] Tests created for changes (if applicable)
- [] Manually tested changed features in running JabRef (always required)
- [] Screenshots added in PR description (for UI changes)
- [] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7963,https://api.github.com/repos/JabRef/jabref/pulls/7963,https://github.com/JabRef/jabref/pull/7963,closed,1,14,1,1,0,0,0,0,[],2021-08-05 11:04:43+00:00,2021-08-08 17:58:35+00:00,284032.0,"3 days, 6:53:52",[],"[{'commit_sha': '47de7e7c6cabcf0c412ed244b156ffb29025d254', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
693283743,"Implement an interface to import PDF metadata from multiple sources (XMP, Grobid, ...)","We want to be able to import PDFs into JabRef and infer all Bib-data from the file itself.
This is done by using multiple importers. If they disagree about the metadata, we need a way to merge the conflicting data. As of #7947, this is done by prioritization of importers.
For pro-users, we want to have the option to do the merge manually using an n-way merge dialog. It can be triggered by clicking a button next to a linked (offline, pdf) file.
![Screenshot from 2021-08-16 12-34-56](https://user-images.githubusercontent.com/10479048/129550992-23229134-b6b0-4d8b-8bd0-8a1cec76e912.png)

The dialog looks like a table. Each source will be represented by a column, each field by a row. There will be an additional, editable, column that represents the final entry.

![Peek 2021-08-17 14-00](https://user-images.githubusercontent.com/10479048/129721955-c88db0e5-f4d3-4467-a71b-d6fb43253b28.gif)


Users can:
- Enter the information manually in the final entry column
- Select one source to copy all it's fields to the final entry column
- Select a field to copy it's content to the corresponding row in the final entry column

Sources will be the existing PDF importers and the importers implemented in #7947.

In a second step, we want to use this functionality to clean-up bib entries. Users may select an existing bib-entry and 'enhance' it by analyzing linked pdf files. In that case, the original entry will be displayed by an additional source-column.

TODO:
- GUI glitches (text moves vertically sometimes when selecting a text)

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [x] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [ ] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [x] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7929,https://api.github.com/repos/JabRef/jabref/pulls/7929,https://github.com/JabRef/jabref/pull/7929,closed,924,69,17,128,17,25,3,1,"[{'name': 'type: enhancement'}, {'name': 'ui'}, {'name': 'project: GSoC'}]",2021-07-20 08:51:19+00:00,2021-08-21 18:47:23+00:00,2800564.0,"32 days, 9:56:04","[{'comment_id': 672934859, 'comment_body': 'This is ugly.\r\nShould we implement multipart functionality (sending a file) in URLDownload? I did not because that would require some research to make that safe to use in a general scenario.', 'comment_created': datetime.datetime(2021, 7, 20, 8, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 672935967, 'comment_body': 'With such a minimal example, I think it is quite safe to compare the Grobid-result with literal strings, but in general the output may change if Grobid changes and break this test.', 'comment_created': datetime.datetime(2021, 7, 20, 8, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 672936529, 'comment_body': 'For now, this test is expected to fail until:\r\n- kermitt2/grobid#800 is merged\r\n- grobid.jabref.org is updated to reflect that merge\r\nIt works with a local instance of Grobid with the required change already implemented.', 'comment_created': datetime.datetime(2021, 7, 20, 8, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 672937516, 'comment_body': ""I guess this is safe. Any preferences for a boundary?\r\nFirefox uses a randomly generated number after the '-' sequence, that would also be an option."", 'comment_created': datetime.datetime(2021, 7, 20, 8, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 672939273, 'comment_body': 'This is now accessed for the Importer as well. I left it here for the start, but I think it would make more sense to move it to a preference. This would give users the option to use local instances of Grobid. This is a requirement when working with confidential data that should not be shared.', 'comment_created': datetime.datetime(2021, 7, 20, 8, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 672976845, 'comment_body': 'Really ugly. Better use Jsoup: https://stackoverflow.com/a/34576290', 'comment_created': datetime.datetime(2021, 7, 20, 9, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 673184521, 'comment_body': 'If I understand grobid correctly, it is basically a machine-learning search algorithm. I think the more general the search query, the more vague the result may be, as long as grobid is not yet so well trained. On the other hand, the more specific the search query, the more specific the result should be - or am I wrong?', 'comment_created': datetime.datetime(2021, 7, 20, 14, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 673189401, 'comment_body': ""not necessarily, only if you want to make this string really customizable by the user. Working with confidential data is i think an edge case. But on the other hand, why not be prepared for edge cases, if they don't hurt to implement."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 673195372, 'comment_body': 'Whole URLDownload class should probably be refactored to a fluid design too someday, but not in this PR.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 673207046, 'comment_body': ""So in this case the 'search query' would be the pdf. It's quite minimalistic so I expect Grobid to detect this information. I think the tests are ok, but maybe I should add a note (as a comment) so that if it breaks in the future, people know what to do."", 'comment_created': datetime.datetime(2021, 7, 20, 15, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 673210486, 'comment_body': ""I myself would rather not send my bibliography to a third-party service (it's not even encrypted).\r\nIf we opt not to have this configurable, I already know I'll have a hosts-file entry redirecting grobid.jabref.org to my local instance ;)"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 673387714, 'comment_body': ""Shouldn't be a problem to put this in a PreferencesTab, but I would implement this at the very end, when everything else is working, so it wont pullute the PR for now and it should be straightforward."", 'comment_created': datetime.datetime(2021, 7, 20, 18, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 678301258, 'comment_body': 'Finally looked into Jsoup. Thanks, @Siedlerchr, for the recommendation, this is so much better.', 'comment_created': datetime.datetime(2021, 7, 28, 13, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 683173329, 'comment_body': 'I would suggest adding a  short comment on why this is necessary here at this point', 'comment_created': datetime.datetime(2021, 8, 5, 6, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 683262405, 'comment_body': ""I'm still not entirely sure why it is necessary. Would giving the effect that we avoid be enough?\r\n\r\n(Also, I'm sorry for not mentioning you as co-author of 4c74d51)"", 'comment_created': datetime.datetime(2021, 8, 5, 8, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 691428249, 'comment_body': 'modern style switch expression ?\r\n`final List<Text> hightlightedText = switch (diffMode.getValue()) ... yield List.of(text); ...` ?', 'comment_created': datetime.datetime(2021, 8, 18, 16, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 691566280, 'comment_body': ""I don't like this assertTrue stuff here.\r\nIsn't there any way to have an assertEquals?\r\n I would propose a List.of(first line text, secondlinetext) and then compare it to  the response"", 'comment_created': datetime.datetime(2021, 8, 18, 20, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 692385451, 'comment_body': 'Why was this change necessary? We should focus the preferences passed around - and not enlarge the scope.', 'comment_created': datetime.datetime(2021, 8, 19, 18, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 692707766, 'comment_body': '@koppor this is why I need the big preferences object.', 'comment_created': datetime.datetime(2021, 8, 20, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 692713599, 'comment_body': 'True, but not exactly related to this PR, so I opened #8003.', 'comment_created': datetime.datetime(2021, 8, 20, 6, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 693320181, 'comment_body': '@DominikVoigt and me are looking into reworking preferences handling. Should be merged anyways to move forward and leave the preferences problem to a more general solution.', 'comment_created': datetime.datetime(2021, 8, 21, 7, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 693347037, 'comment_body': ""JabRef's online metadata extraction (Grobid) service usage"", 'comment_created': datetime.datetime(2021, 8, 21, 12, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693347912, 'comment_body': 'Fixed in #8002 and merged into this PR.', 'comment_created': datetime.datetime(2021, 8, 21, 12, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 693348336, 'comment_body': ""Maybe rename to MergeEntry, because otherwise it's confusing with BibEntry and Entry"", 'comment_created': datetime.datetime(2021, 8, 21, 12, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693355653, 'comment_body': 'Makes sense, but I chose EntrySource instead because it is one option for the merge, not the merged entry.', 'comment_created': datetime.datetime(2021, 8, 21, 13, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': '22f02412112e57ddd071fd105fb594e38856e14f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8effaa9155c714f4db1cc5a1c001b74b1b6f9998', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d487d2eabe2fd5c7e854fe19eb3c094fb8a5955', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96cd5cff7dfeb1368b4b2d85ef908c75dbbb71ac', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b5510e05a3c1375f3acc2e9395a14d813b1f8f2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4a01a07059bbd449ee30175901f19eb4ab9ff0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8314855db8ecded5c12e369768002d5cc6ca8ecc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05964bc57136ecc446f7089f160a1413634bb733', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f64b1cf659b63969b2a646c4d0a394092f3dad3', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1260cf9a3a397241eeb36d06dead3afa1067239e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97fb43df33a70fe7a199523d61175112e5c29f2e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '733415f9b6c0679d6263b29bf9656f55b7834b4b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '620424cfdae94b0b15acc698d6d701d4e6ddfdc7', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bf75ab4ca55082cc82530ce97296b93c07c5a4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f036112435be7c4abd3500caa516fc99934543eb', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5d216c317967abaa85558a84f5ace1f72a7e31b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9dc84e8968f25055121d59d1694bf1bd708b927', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6b5bc1396c5ff48a4830383b37cc559373c904', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35467159dffc3815447e42610daf1024e9fba26e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6906d111c63129df687ece80048084bfeac0611f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9e4c06d560f5ca38f65d71c7f127061e8d07a95', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f319fc796b09d8de7a77eda96903c13f39bef335', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993ad84ed8325bea8c606ecc74dfeaca7691e38f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a7b80f853a5e1d5ccdcc843521ae9d9639aa4f5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fe2a236f4cbffe584986b0f3957cd4bc394e910', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f99bc52d2f11176a2f170b687c844860ef938d13', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d64d8086995eafc83b11d25df8925a64d1a997c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f591bfc2be642da499b9d3b0ca04d582f3032117', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2bd36505851a1734f1682aa6341403bbf5e7a5a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e458c777aef29b3fec25ad24e70874347c971364', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5478585683958fe63e0ff937208b706f48313c66', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0cc6637a4337a13eda25ac81baf20f6057d0cba', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd78fc356767f5da198e618813d5bca57b76ef9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb22157838461e4b436de1cb0004ced14405b249', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac0094eefb522d036e8166cf019cb87842cc067', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87ed4e9ba6d979fad77428f9d948913c84de66f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8c4da8d3edac0c24e9196c3a4cba9930878a25', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168b8669d76f77f4fb87b709efaf0c32c4c5cee2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42adea9dd91ef2f2b26dcda51b78a129ff41e442', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '980af839b90b34c007c10988ce23655a961618e7', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73dc505069f6e4fab9579f93941f4ceba5decaa8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33cbc958dde9cd55ec67306c5e6e5d9d3559e791', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8412071b03a38cea8b113cc6062c7992a002456', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '616e73d273462a527194aa375429b1f5b3fa0fcf', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2a215e61de9ec5fcf8e619f37df5fc676ba87d0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44dfebdcd9b17f7e14f7d8d7f48879b694504853', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1841cdf30f3ca41f0f23184caac6b3348741d8f6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce710557fa7b3103559b75012c55651296a804d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d8e9a6d9e8c1c62077bf2fd4d8d96fe65cb36b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9080f142cb338f1c5959ae96fe38c2a2425dc700', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c74d519ee756c420bc76c395fe44787924c2063', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2757be65ea156f2dd6c4cf833fde30cafc203451', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a05c3e3aaf5d77081313c1b66fda8bbca0cf484', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c488ec3d56704d3c3bee41acb0f412020e95526', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02057f005daa2538ac457d6e7cf910b27d107985', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d66855416dd70d6e3d606d1ecb1a527ccc084b8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd8918bc9d9d79e9f4de5c35800ffd837a87ac9c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56868f539bbfb02318d522cec0a08f9f8e7bccd0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479a0bc87b4558fb4a0d741709b214572c11b99e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb6a910b51da2a34bf1781ef317fa883b23836ad', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b64ebd1a93daaf3830f9744418c24c0c724e9c4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '649049c12a194603380f968c37d280dca1c21f4e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e3aaaf3e683663d97ab4571cd537bbb82d6f79', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f78c9ecda299724c64473bb130c1857c7997333', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e18eabd6a4f1fef2198f61861ad7692ab37be10e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bf6409c4f76ddfcd1c727a1e056e216ef8d2714', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787e040e441f19d58542445abb076b47a3be40ba', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cdff9159f019c26ccca60b0efcba75ad2d8d85', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564988ace5eae3ce0ac6fe166dd0d7b88aee49c1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db14f4d6578c015f2fd83fd9a4399792dc9ff09', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba139712616e769ad54c5daf49d257ab9312d651', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3d279ae51681435c996e19842f99d35a115a7f0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25e7b2ec59e40799098237211d81a787c5a1e96a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04eecaf16c87f2cf07e1a13df0c348be259515ae', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e5b6251afc519dd3fa57538708ebdbffa43e33', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cbf9190488662536805d5598c43a265e5ab2e5a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb4dfcdcdc3ec56eb7a9a4b8343280f5b84af8b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab8ebb9d26dd281cb258b980922d08442a88f31', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ba8b401b094bf6333a1b15b8dd8d4c1477748b3', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eadbf674225f44cb6f3026076570fd9005a32d49', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b00f4798039630779947188e4418dacb5f2742a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18dbb67b98d40cac30506e1a8095272bdbaaccf5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a138b6cd368ee5d7b6a88159cd654bd54b530d2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41de0d023c9ce50efe24a94f5978be8cc4413760', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fdd850fa9a1568e1a3b7f9710a197f15ad6f872', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd954439a7690fc1dd98463956c0986119f3c9d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f4bf8440a6bac08ba43ab1d7595569dd37056b8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0468e67e436cc25e3ebdbde51a9a9b07816c0983', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d46df470b77d393ffffa9e6651a7b70679c3ca6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b27598081d7c9eaf98a84347bfd6789fa8703e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6324cf2fda844d3bb4479522df848a9242bc4820', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54274be156987296980bee4a01edbc9df141b090', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '089b025cda44b27c2fe285a2fd4b360345189e95', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf2af7783cbb7805ecfe0101f75684f3ad7ac57', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b555adafc9633a63aee601671717ed8c7a75b266', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a956a375b13d407c9c59e262d5f0540a07825e9f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5994a5ddbc395630f77f1e3a38ca9733c539fea8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44fee74862022b757641aed5b11c17634f80b710', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a98c8a9d947266606327177fce802552f90702b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb186e31aff0556dc6da45d6bd52b029d5008eec', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63272bbadcc24ad3aaf16a40e5d8f13107daa558', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9db104566155af9c0e6bd7f5ef8ab795450c1509', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1974c4ad727a52f865445b82bcf4c46d825b7a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f69569bb6b68bef3bd0a0123e612169c542d121', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31b62a00c2881a5caa69509e45d72d1375ee9b61', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdc9fb1754aabf179485072800529442a0adeaf7', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdb5a4de7c288a63a0d260e356a1e31efb9707f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e918a3cc2dd32e0a5fb3c2956f7db8f7c2acff6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3440b3246dd2ba1d1ad7db2208b74b30f185b77e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5222ce0c1cc3ddbbe1c26a7cb600dbfb6bf9c36', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef5444a12f4b8169b3ba042b7ed33cc24952f1af', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffaeec51703709e66b9f1f67e5792caa0dd902da', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f4f398e54a3ad283bc7463195b88ddd022fc4d4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ef2e34428bd16b7acdb6411bbb7eb0d4e91dc2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae32a401a378ba73a46f43a77e93fae7b86211fd', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6c8e4a688571448b291531ffa2916b22fb8f38', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a2e3e9d3c3f1307ea4cb46501f7e5e637077de', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51eb15d4897c1f4c3b1d2ad0243dbe70d7aa0cda', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b3b5bebd391c6b170090efd72d8f4cc5bbb154', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dbafbe0311b12ffc00b1c40cf21a95e08505dbd', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69af12524dc1a44181d7bc186913f6c852b65632', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f676003bd3e557b2bec35c7c3a406f6dba45d08a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e97104981117f81213ee80571f17d9a3f0b75cb', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43aaa05d933be8c80f1d9ae6ec6600436530bc2d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55a4653e2d3a50f147364f9b3faa94322de099bc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0afe0c17be38b68fdd5522cccf1a3ab46b6acf6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87eded9f7bbe702d1479748764651c34d90468c9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c0a3d9df886827db6db343520e8dbd65bbff68', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
715367543,Reordered Pdf-Importer priorities,"Changed the list, that implies priority, of PdfImporters in the PdfMergeMetadataImporter.

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->

Fixes https://github.com/koppor/jabref/issues/169

<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [ ] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [x] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [ ] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,8001,https://api.github.com/repos/JabRef/jabref/pulls/8001,https://github.com/JabRef/jabref/pull/8001,closed,7,8,2,2,0,0,0,1,[],2021-08-18 19:43:16+00:00,2021-08-18 20:17:19+00:00,2043.0,0:34:03,[],"[{'commit_sha': '9cd04c98f9bedd32459c46fd6ef55269d588cb7b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f1ce3c5fa1a376076ada7c69b54648852cbb349', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
715807680,Preferences for Grobid,"Implements two new preferences in ImportSettingsPreferences:
- grobidEnabled
- grobidURL

The preferences are used in the Fetchers and Importers that use Grobid. Creating a GrobidService while grobidEnabled is false will result in an UnsupportedOperationException.

Fixes #8000

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->
![image](https://user-images.githubusercontent.com/10479048/130053320-1203cb06-4e37-4291-a4d1-e888ebf6b114.png)


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [x] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [x] Screenshots added in PR description (for UI changes)
- [] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,8002,https://api.github.com/repos/JabRef/jabref/pulls/8002,https://github.com/JabRef/jabref/pull/8002,closed,259,57,30,14,6,12,2,1,"[{'name': 'status: ready-for-review'}, {'name': 'project: GSoC'}]",2021-08-19 10:27:48+00:00,2021-08-21 12:43:47+00:00,180959.0,"2 days, 2:15:59","[{'comment_id': 692303174, 'comment_body': '                        ""Allow sending PDF files and raw citation strings to a JabRef online service (Grobid) to determine Metadata. Usually provides better results"",\r\n\r\n\r\nI would add this produces better results.\r\nUse JabRef\'s heuristic parser. Results might be worse.\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 692304221, 'comment_body': 'I would extract this to a kind of helper method and class so you can reuse it in several places\r\ne..g GrobidChoiceDialog -> showConfirmationDialog\r\n', 'comment_created': datetime.datetime(2021, 8, 19, 16, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 692334612, 'comment_body': 'So you vote to have it whenever Grobid is used instead of once at startup, right?', 'comment_created': datetime.datetime(2021, 8, 19, 17, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 692344832, 'comment_body': ""Yep. Only when it's needed for the first time."", 'comment_created': datetime.datetime(2021, 8, 19, 17, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 693316777, 'comment_body': ""Could be done in directly in FXML. (`disabled=${grobidEnabled.selected}`) or similar. Lot's of examples elsewhere..."", 'comment_created': datetime.datetime(2021, 8, 21, 7, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 693317721, 'comment_body': 'Maybe extract the ImportSettingsPreferences (I hate that name) to a separate variable, following the typical test scheme:\r\n```\r\n// given\r\n...\r\n// when\r\n...\r\n// then\r\n...\r\n```\r\n\r\nSee https://blog.codecentric.de/en/2017/09/given-when-then-in-junit-tests/ for example\r\n', 'comment_created': datetime.datetime(2021, 8, 21, 7, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 693318214, 'comment_body': 'Maybe extract EntryBasedFetchers in a separate variable before the loop. Gets a bit too crowded here.', 'comment_created': datetime.datetime(2021, 8, 21, 7, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 693318281, 'comment_body': 'Split in multiple lines for easier readability.', 'comment_created': datetime.datetime(2021, 8, 21, 7, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 693318319, 'comment_body': 'Split in multiple lines for easier readability.', 'comment_created': datetime.datetime(2021, 8, 21, 7, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 693343277, 'comment_body': ""I don't think that's possible here because you can't do the negation in fxml. It needs to be disabled if grobidEnabled is NOT selected."", 'comment_created': datetime.datetime(2021, 8, 21, 11, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 693343745, 'comment_body': ""Extracting is easy and I agree it is more readable. For the 'when' clause, since I expect an exception, something like [this](https://stackoverflow.com/a/33933067/5401297) would be necessary. In my opition expectThrows is easier to read though. Is it ok to violate given-when-then in this case?"", 'comment_created': datetime.datetime(2021, 8, 21, 11, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 693350092, 'comment_body': ""This is not a hard law, but a suggestion. Should make reading and understanding tests easier. If in this case it's not, then ok."", 'comment_created': datetime.datetime(2021, 8, 21, 12, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}]","[{'commit_sha': '31b62a00c2881a5caa69509e45d72d1375ee9b61', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdc9fb1754aabf179485072800529442a0adeaf7', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdb5a4de7c288a63a0d260e356a1e31efb9707f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3440b3246dd2ba1d1ad7db2208b74b30f185b77e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5222ce0c1cc3ddbbe1c26a7cb600dbfb6bf9c36', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef5444a12f4b8169b3ba042b7ed33cc24952f1af', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffaeec51703709e66b9f1f67e5792caa0dd902da', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f4f398e54a3ad283bc7463195b88ddd022fc4d4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a2e3e9d3c3f1307ea4cb46501f7e5e637077de', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b3b5bebd391c6b170090efd72d8f4cc5bbb154', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69af12524dc1a44181d7bc186913f6c852b65632', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f676003bd3e557b2bec35c7c3a406f6dba45d08a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e97104981117f81213ee80571f17d9a3f0b75cb', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55a4653e2d3a50f147364f9b3faa94322de099bc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
716492476,Refactor processCitation in GrobidService to match processPdf,"GrobidService.processCitation now returns an Optional<BibEntry> to match the signature of processPDF.
This also makes the tests more expressive, as we can compare the BibEntry to an expected BibEntry instead of comparing Strings.
<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [x] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [] Screenshots added in PR description (for UI changes)
- [] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,8003,https://api.github.com/repos/JabRef/jabref/pulls/8003,https://github.com/JabRef/jabref/pull/8003,closed,33,43,4,6,2,2,2,1,"[{'name': 'status: ready-for-review'}, {'name': 'project: GSoC'}]",2021-08-20 06:58:51+00:00,2021-08-20 10:58:32+00:00,14381.0,3:59:41,"[{'comment_id': 692784278, 'comment_body': 'assertEquals(Optiona.empty(), response)', 'comment_created': datetime.datetime(2021, 8, 20, 8, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 692809504, 'comment_body': 'You have the wrong junit, it. must be import static org.junit.jupiter.api.Assertions.assertTrue;', 'comment_created': datetime.datetime(2021, 8, 20, 9, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}]","[{'commit_sha': '4f86ab46183afaaae1f3dee2598eee715325d90f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78fe5fa7bda26a4a993070487d9e2aaf47ab5f90', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd435cefff2652cbaf186448a9ee0b84e7fc0ad99', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e60ff44fd4179ce1c5216cf519f0b2d0dd43052', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e3b119a6d1aa6fc45168043353275fe380ca98', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef68a21d91b3786c46d5da8a2dc34dee66ee0ab4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
662367123,Added auto-key-generation task to task-progress,"Auto-key-generation tasks are now shown in the list of background tasks,
together with a progress representing entries done / entries.
Fixes #7267

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. If a task has been completed, mark it done by using `[x]`.
- Please don't remove any items, just leave them unchecked if they are not applicable.
-->

- [x] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [ ] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [x] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
![Screenshot from 2021-06-05 11-20-37](https://user-images.githubusercontent.com/10479048/120887475-69578400-c5f3-11eb-9e6d-9650fdae16a2.png)
",True,7797,https://api.github.com/repos/JabRef/jabref/pulls/7797,https://github.com/JabRef/jabref/pull/7797,closed,74,33,5,14,2,31,1,0,[{'name': 'status: ready-for-review'}],2021-06-05 09:45:06+00:00,2021-06-10 21:14:11+00:00,473345.0,"5 days, 11:29:05","[{'comment_id': 645976617, 'comment_body': 'I think this will lead to problem since you are updating a property that is eventually displayed in the ui from a background task. This is not allowed in JavaFX. \r\n\r\nInstead one should create a class extending `BackgroundTask` and use the `updateProgress` method, which takes care of that the events are propagated in the right thread. See https://github.com/JabRef/jabref/blob/bb011c9313367a28990ae213b3920fe6cd10d1dc/src/main/java/org/jabref/gui/externalfiles/FileDownloadTask.java#L30 for an example.', 'comment_created': datetime.datetime(2021, 6, 5, 10, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 645977384, 'comment_body': 'Have a look at the  method     public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\r\n\r\nin ImportHandler\r\nit has an updateProgress method', 'comment_created': datetime.datetime(2021, 6, 5, 11, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 645977460, 'comment_body': 'Yep, a good example is in ImportHandler. Needs to be wrapped on the FX thread though\r\n```\r\n    DefaultTaskExecutor.runInJavaFXThread(() -> {\r\n                        updateMessage(Localization.lang(""Processing file %0"", file.getFileName()));\r\n                        updateProgress(counter, files.size() - 1);\r\n                    });\r\n```', 'comment_created': datetime.datetime(2021, 6, 5, 11, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 645978099, 'comment_body': 'I tried to avoid introducing a new Task for each BackgroundTask that is to be displayed in the GUI.\r\nWhat do you think of introducing a _trackProgress_ method in BackgroundTask that takes a BackgroundProgress property and Binds it to updateProgress? Would that solve that issue? If so, would it be preferable or do you prefer having an additional class?', 'comment_created': datetime.datetime(2021, 6, 5, 11, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 645980902, 'comment_body': 'Is it enough to run the update on the JavaFX Thread using the DefaultTaskExecutor (20530a2) or would it be better (cleaner) to mimic ImportHandler entirely by Inheriting from BackgroundTask?', 'comment_created': datetime.datetime(2021, 6, 5, 11, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646007909, 'comment_body': ""I would implement it similar to the import Handler method This way it's cleaner.\r\nSo you just introdue a new method which creates and retunrs the backround task.\r\n"", 'comment_created': datetime.datetime(2021, 6, 5, 16, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 646014602, 'comment_body': ""I think it's a good idea to simplify the creation of tasks that track progress.\r\n\r\n> What do you think of introducing a trackProgress method in BackgroundTask that takes a BackgroundProgress property and Binds it to updateProgress?\r\n\r\nSo the code would somewhat like the following?\r\n```java\r\nProperty<...> progress = new ...\r\ntask = BackgroundTask.wrap(() => { do stuff; progress.set(100) }).trackProgress(progress)\r\n```\r\nThis can work, but you still need to handle all the thread synchronization in the trackProgress method.\r\n\r\nAlternatively, one could pass all the update* methods to the `wrap` function:\r\n```java\r\ntask = BackgroundTask.wrap((updateProgress, updateMessage) => { do stuff; updateProgress(100) })\r\n```\r\n\r\nBut to be honest, I'm not sure if it's worth all the trouble. It's not much shorter/clearer than using anonymous classes:\r\n```java\r\ntask = new BackgroundTask<V>() {\r\n            @Override\r\n            protected V call() throws Exception {\r\n                do stuff;\r\n                updateProgress(100)\r\n            }\r\n        };\r\n```\r\n\r\n(But I agree that most instances of our background tasks can be converted to these anonymous classes instead of defining them in a new file). "", 'comment_created': datetime.datetime(2021, 6, 5, 17, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646108715, 'comment_body': ""Anonymous classes seem to be the consensus. Let's do it that way."", 'comment_created': datetime.datetime(2021, 6, 6, 10, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646117984, 'comment_body': ""There is this golden rule of concurrency in JavaFX, that you shouldn't update any UI-facing properties in background tasks (or only using `updateProgress` and `updateMessage`), see for example https://docs.oracle.com/javafx/2/api/javafx/concurrent/Task.html.\r\n\r\nThus, setting title and message should happen in the constructor and not in the call method."", 'comment_created': datetime.datetime(2021, 6, 6, 11, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646118032, 'comment_body': ""The runInJavaFXThread shouldn't be necessary as this is handled by updateProgress."", 'comment_created': datetime.datetime(2021, 6, 6, 11, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646118118, 'comment_body': 'This is also better be moved to the success caller.', 'comment_created': datetime.datetime(2021, 6, 6, 11, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646119901, 'comment_body': 'I wondered about that, but it is done in ImportHandler as well. Shall I remove it there as well (in an additional PR)?', 'comment_created': datetime.datetime(2021, 6, 6, 11, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646120503, 'comment_body': 'For some reason it is not working in this context, see https://github.com/JabRef/jabref/pull/7209/files#r551271470. Maybe @Siedlerchr still remembers where the problem was.', 'comment_created': datetime.datetime(2021, 6, 6, 11, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646122465, 'comment_body': ""The relevant code is https://github.com/JabRef/jabref/blob/fa8cc829727ffddd97a9056fd466e7098577f4d7/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java#L146-L155, but I don't see any problem with this."", 'comment_created': datetime.datetime(2021, 6, 6, 12, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646122709, 'comment_body': 'The progress updating is not happening in the fx thread by the BackgroundTask. This will leead to an exception.\r\n', 'comment_created': datetime.datetime(2021, 6, 6, 12, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 646123010, 'comment_body': 'So the problem is that the properties on the BackgroundTask are updating on the background thread? Why is this a problem? Who is consuming these properties?', 'comment_created': datetime.datetime(2021, 6, 6, 12, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646124857, 'comment_body': 'So shall we explicitly make updating the progress variable run on the fx thread in updateProgress?\r\n`\r\nprotected void updateProgress(BackgroundProgress newProgress) {\r\n\r\n    DefaultTaskExecutor.runInJavaFXThread(() -> {\r\n\r\n        progress.setValue(newProgress);\r\n\r\n    });\r\n\r\n}\r\n`', 'comment_created': datetime.datetime(2021, 6, 6, 12, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646132941, 'comment_body': 'Ideally yes it would happend in the BackgroundTask itself, but I am unsure if this has any side effects on existing tasks', 'comment_created': datetime.datetime(2021, 6, 6, 13, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 646133240, 'comment_body': ""would nesting DefaultTaskExecutor.runInJavaFXThread() be problematic (in addition to being ugly)?\r\nI don't think there are many tasks that use updateProgress right now, let me investigate."", 'comment_created': datetime.datetime(2021, 6, 6, 13, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646135338, 'comment_body': 'As far as I (and Intellij) can tell, updateProgress is only used by GenerateCitationKeyAction, FileDownloadTask and ImportHandler.\r\nFileDownloadTask uses EasyBind to update the progress. Does EasyBind already take care of running on the JavaFX thread?\r\nhttps://github.com/JabRef/jabref/blob/fa8cc829727ffddd97a9056fd466e7098577f4d7/src/main/java/org/jabref/gui/externalfiles/FileDownloadTask.java#L24-L39', 'comment_created': datetime.datetime(2021, 6, 6, 13, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646135640, 'comment_body': ""I'm not sure... then using `setValue` on `progress` still leads to the same problems (i.e. you cannot bind something to the progress property). Personally, I would leave the whole what happens on which thread hidden as long as possible, i.e. only the DefaultTaskExecutor cares about these things when converting a background task to a JavaFX task. \r\n\r\nI guess these problems we are discussing can be easily fixed by not using the progress/message properties of the background task anywhere outside of the task itself. So here for the citation generation there shouldn't be any problem. "", 'comment_created': datetime.datetime(2021, 6, 6, 13, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646807525, 'comment_body': 'This can be revereted again?', 'comment_created': datetime.datetime(2021, 6, 7, 17, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 646962672, 'comment_body': '```suggestion\r\n            backgroundTask.messageProperty().set(Localization.lang(""%0 entries"", entires.size()));\r\n```\r\n\r\nSee https://devdocs.jabref.org/getting-into-the-code/code-howtos#using-localization-correctly 😇 \r\n\r\nLonger: In some languages, the position of the counter is after the word.', 'comment_created': datetime.datetime(2021, 6, 7, 21, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'koppor', 'type': 'User'}, {'comment_id': 647147006, 'comment_body': 'Yes it can!', 'comment_created': datetime.datetime(2021, 6, 8, 6, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647148072, 'comment_body': 'Ah, I understand. Should have read your whole message before starting to \'fix\' it. I now put ""%0/%1 entries"" so the progress is reflected there as well, but then this would be messed up in other languages I guess. I\'ll revert that part.', 'comment_created': datetime.datetime(2021, 6, 8, 6, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647150279, 'comment_body': ""Also, I think I did it wrong anyways, as '%0/%1 entries' is not a localization key."", 'comment_created': datetime.datetime(2021, 6, 8, 6, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647157803, 'comment_body': 'Just one minor thing, would be nice if you could pass the dependency to the taskExecutor through the constructor. We are trying to pass dependencies through the constructor. You can simply pass it from JabRefFrame.', 'comment_created': datetime.datetime(2021, 6, 8, 6, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 647239802, 'comment_body': ""As @Siedlerchr pointed out, neither is '%0 entries'. Don't know why but I was sure it was there... I added '%0/%1 entries' in \r\n3b0dfed."", 'comment_created': datetime.datetime(2021, 6, 8, 8, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647992936, 'comment_body': 'Can you extract the call to Globals somehow?', 'comment_created': datetime.datetime(2021, 6, 9, 6, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 648000637, 'comment_body': 'Should be possibel to pass it as constructor argument', 'comment_created': datetime.datetime(2021, 6, 9, 6, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 648059225, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2021, 6, 9, 7, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': 'c58fcddb46e4d35cfe682b91af8f98a88fbf65d7', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20530a283b1fb205d994d92319a9614fbfc88051', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09a9cdf60429b35b0133dd068d92eb7dac5056f4', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e1334cabc2b508788c95425a36dcfa4a60f652', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '258b26ae81e0850c6f516e11e4cd931499d9c2de', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db726408005b8d3ad679aa1a015c9b7170760b94', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '357219d08abdd811134d8419d0f020e27e0a2ec6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99709662956a214847247ca1bec6b6013ab31e68', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '721a9f1c9db1431d8f19a99e3f1d74065345f475', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18581e4d3e5af11d4ab176bb4e588ae11fb7f8fd', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e67b18951a239a4b3b4676811762c08046234c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b0dfed26ee6d257224c387a4c9cc1fa78259d35', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff6e55fbd6e335f3e2dcd489293ca90627b0fe1b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cae32f48a984bd486455b3adce1469455c5d01', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
663615869,JournalAbbreviation search feature,"I Implemented a string filter for the journal abbreviations tab.
This is not working as of yet. Performing a search currently cleares a list of filtered
abbreviations and fills it back up with abbreviations that contain the
search string. Right now the clearing not only cleares the filtered list
but also the list of all abbreviations and I don't unterstand why.

Fixes #7751

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. If a task has been completed, mark it done by using `[x]`.
- Please don't remove any items, just leave them unchecked if they are not applicable.
-->

- [X] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [X] Tests created for changes (if applicable)
- [X] Manually tested changed features in running JabRef (always required)
- [X] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
![image](https://user-images.githubusercontent.com/10479048/121139055-a06aa700-c838-11eb-96ee-80bb87771711.png)
",True,7804,https://api.github.com/repos/JabRef/jabref/pulls/7804,https://github.com/JabRef/jabref/pull/7804,closed,169,9,7,22,18,38,1,0,[{'name': 'status: ready-for-review'}],2021-06-07 14:27:27+00:00,2021-06-15 11:43:41+00:00,681374.0,"7 days, 21:16:14","[{'comment_id': 646643723, 'comment_body': ""I don't understand why this is not working.\r\nBasically I keep two lists, one of all abbreviations and one of the search result. The search result is bound to the view.\r\nWhen not performing a search, I want to display all abbreviations and therefore bind them together. When searching, I remove that binding, clear the search result (filteredAbbreviations) and iterate over all abbreviations and only add abbreviations that contain the search string.\r\nWhat happens is that when I clear filteredAbbreviations, abbreviations is cleared as well and the list is empty."", 'comment_created': datetime.datetime(2021, 6, 7, 14, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646669530, 'comment_body': 'A bit unrelated to you question, but isn’t this easier with a [FilteredList](https://openjfx.io/javadoc/16/javafx.base/javafx/collections/transformation/FilteredList.html#%3Cinit%3E(javafx.collections.ObservableList,java.util.function.Predicate))?', 'comment_created': datetime.datetime(2021, 6, 7, 14, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 646772043, 'comment_body': ""Hi @k3KAW8Pnf7mkmdSMPHz27 \r\nIt's certainly easier using FilteredList, provided one knows about it's existence :) Thanks for the suggestion!\r\nUsing FilteredList works, but I'm not completely happy about how I update the view now. As far as I can tell, there is no property in FilteredList that one could bind to the TableView. Therefore I had to use listeners to update the view each time the list of abbreviations or the search term changes. Is there a better way I am not seeing?"", 'comment_created': datetime.datetime(2021, 6, 7, 16, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 646805427, 'comment_body': 'You simply call tableView.setItems(filteredList) https://code.makery.ch/blog/javafx-8-tableview-sorting-filtering/\r\n\r\nFor setting the predicate of the FilteredLIst you can also use some EasyBInd foo magic, see for example in PreferencesFilterDialog', 'comment_created': datetime.datetime(2021, 6, 7, 17, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 646807994, 'comment_body': ""Gah, GitHub on iOS is terrible 😜 \n\n~I am looking at this on a cellphone so perhaps I am missing something.~\n\n~[`setItems`](https://openjfx.io/javadoc/16/javafx.controls/javafx/scene/control/TableView.html#setItems(javafx.collections.ObservableList)) should accept a FilteredList, and since it is an ObservableList, you shouldn't need to update it at all (the one call in setupbindings should be enough).~\n\n~You'll probably need to bind to the `predicateProperty` of the filtered list, instead of using the constructor with a predicate that I linked (sorry X) )~"", 'comment_created': datetime.datetime(2021, 6, 7, 17, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 647172299, 'comment_body': ""Thanks for your suggestions.\r\nI did not change the predicate setting to EasyBind, since I see no major benefit in readability or functionality, I hope that's ok."", 'comment_created': datetime.datetime(2021, 6, 8, 7, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647321995, 'comment_body': '```suggestion\r\n        s = s.toLowerCase(Locale.ROOT));\r\n```\r\nFor case insenstive strings you should use it with Locale.ROOT\r\n', 'comment_created': datetime.datetime(2021, 6, 8, 10, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 647323011, 'comment_body': 'You can simplify this: \r\n```suggestion\r\n       return this.abbreviation.get().toLowerCase(Locale.ROOT).contains(s)) || this.name.get().toLowerCase(Locale.ROOT).contains(s)) || this.shortestUniqueAbbreviation.get().toLowerCase(Locale.ROOT).contains(s))  {\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 10, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 647323220, 'comment_body': 'Mabye a better name for the variable: journalAbbrev? ', 'comment_created': datetime.datetime(2021, 6, 8, 10, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 647325309, 'comment_body': '```suggestion\r\n                filteredAbbreviations.setPredicate(Boolean::True);\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 10, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 647366672, 'comment_body': 'Is this easier to read though?', 'comment_created': datetime.datetime(2021, 6, 8, 11, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647397759, 'comment_body': 'Does not necessarily have to be an abbreviation though, as we also search in the full name. What do you think about searchTerm?', 'comment_created': datetime.datetime(2021, 6, 8, 12, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647404721, 'comment_body': 'Hm, Boolean::True does not seem to exist. The closest thing I found that you might have meant is BooleanSupplier::TRUE_SUPPLIER, but that is a supplier, not a predicate. What did you mean?', 'comment_created': datetime.datetime(2021, 6, 8, 12, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647406961, 'comment_body': ""I was just thinking of the Method reference, but didn't know if it existed, seems like it doesn't exist, so you can ignore my suggestion https://stackoverflow.com/a/26553481"", 'comment_created': datetime.datetime(2021, 6, 8, 12, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 647441962, 'comment_body': ""Hm. I got an e-mail that said @k3KAW8Pnf7mkmdSMPHz27 commented on this, but can't find it anywhere here on github. Basically he proposed to just not define the predicate in the constructor / setting the predicate to null.\r\nI think keeping it as 's -> true' is easier to read and immediately clear, don't you agree?"", 'comment_created': datetime.datetime(2021, 6, 8, 13, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 647499933, 'comment_body': 'Yup. Sorry about that, I was using the aggravating iOS GitHub again, I really should stop doing that X).\r\nI thought that GitHub preserved deleted comments for 24 hours before permanently removing them but I was incorrect.', 'comment_created': datetime.datetime(2021, 6, 8, 14, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 647774067, 'comment_body': 'Why are you modifying the selection?', 'comment_created': datetime.datetime(2021, 6, 8, 20, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 647776486, 'comment_body': '```suggestion\r\n        filteredAbbreviations = new FilteredList<>(viewModel.abbreviationsProperty());\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 20, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 647776595, 'comment_body': ""Nitpick: In my opinion\r\n\r\n```java\r\nfilteredAbbreviations.setPredicate(abbreviation -> searchTerm.isEmpty() || abbreviation.containsCaseIndependent(searchTerm))\r\n```\r\n\r\nis a readable alternative that highlights that you aren't changing the predicate, but the search term."", 'comment_created': datetime.datetime(2021, 6, 8, 20, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 647779093, 'comment_body': ""Nitpick: I'd suggest moving it to `setBindings`."", 'comment_created': datetime.datetime(2021, 6, 8, 20, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 647794138, 'comment_body': 'Nitpick: Parametrized tests are always welcome 😇 ', 'comment_created': datetime.datetime(2021, 6, 8, 21, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 647794441, 'comment_body': 'Nitpick: equivalent statements', 'comment_created': datetime.datetime(2021, 6, 8, 21, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 648008195, 'comment_body': 'I think there was an issue before changing to the FilteredList. But FilteredList seems to be able to handle this fine, so I removed it.', 'comment_created': datetime.datetime(2021, 6, 9, 6, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 648021480, 'comment_body': ""Done in 1c4dce3\r\nI have to admit I don't exactly see the benefit of having it as a parameterized test (did I do it wrong?), but I took the opportunity to get acquainted with the concept and JUnit's implementation and implemented it anyway."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 648024249, 'comment_body': 'Looking over it again I agree with you and changed it.', 'comment_created': datetime.datetime(2021, 6, 9, 7, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 648429957, 'comment_body': 'Agreed, (and thank you for updating them anyway!) it doesn\'t add all that much here (which is partly why I considered it a nitpick, I\'d have accepted the old code as well). My thoughts were\r\n\r\n1. We generally prefer [one thing tested in each test](https://devdocs.jabref.org/getting-into-the-code/code-howtos#general-hints-on-tests). That might be interpreted as splitting the test into ""long"", ""abbreviation"" and ""shortest unique abbreviation"" tests. Making the test parameterized makes this point moot\r\n2. All the other tests in the file seem like they can be transformed into parameterized tests, if someone decides to update the old test, it\'ll be easier for them if your tests are already parameterized. As it appears like we are moving more towards parameterized tests I believe it is a reasonable chance it will happen. I\'ll probably try doing those kind of rewrites (where I think it makes some sense) with my future PRs (in case I end up being the person doing the rewriting, thank you in advance 😛 )\r\n3. It will be easier for someone else to add/remove/modify test cases (thank you for adding the empty tests as well)\r\n\r\n---\r\n\r\nLooking through the tests again, shouldn\'t these be in a new test file? `AbbreviationViewModelTest.java`? You are testing a method of the ViewModel, not `Abbreviation.java`.\r\n\r\n---\r\n\r\nI\'d probably consider splitting the test method into two, perhaps,\r\n\r\n* `containsCaseIndependentDoesNotContain`\r\n* `containsCaseIndependentContains`\r\n\r\nBut that might be in deep nitpicking territory and probably more a matter of taste. A note about the naming, we are trying to avoid prefixing tests with \'test...\', despite all other tests in that file having that naming convention.', 'comment_created': datetime.datetime(2021, 6, 9, 15, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 648497794, 'comment_body': 'Thanks for the clarification!\r\nMoving AbbreviationViewModelTest.java makes sense. Since we are testing on the view model, I guess it would make even more sense to move that to the gui package, maybe in org.jabref.gui.journals?', 'comment_created': datetime.datetime(2021, 6, 9, 16, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 648589109, 'comment_body': 'I am not completely sure that I understand you,\r\n\r\n1. create `src/test/java/org/jabref/gui/preferences/journals/AbbreviationViewModelTest.java`\r\n2. copy the tests you created to the new file\r\n\r\nhave I understood you correctly?\r\n\r\n(on a side note, if you are using IntelliJ and viewing `AbbreviationViewModel` you can use the [code | generate](https://www.jetbrains.com/help/idea/generating-code.html) -> `Test...` and the default settings should generate it in the right place)', 'comment_created': datetime.datetime(2021, 6, 9, 18, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 648627732, 'comment_body': ""I was just hesistant since there was no gui/preferences directory. But obviously, that would be the best path.\r\nI used IntelliJ's code generator now, thanks for the hint!"", 'comment_created': datetime.datetime(2021, 6, 9, 19, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 649891430, 'comment_body': 'Use ColorUtil.ToRGB()  from org.jabref.gui.util;', 'comment_created': datetime.datetime(2021, 6, 11, 11, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 649915071, 'comment_body': ""That does not include opacity. I could change it to include the opacity, but wouldn't know how to start making sure that nothing else breaks.\r\nShall I move the method 'setColorStringFromColor' I created to ColorUtil and rename it to 'toRGBACode'?"", 'comment_created': datetime.datetime(2021, 6, 11, 11, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 649949155, 'comment_body': 'Yeah, just add a second there ', 'comment_created': datetime.datetime(2021, 6, 11, 12, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 650061869, 'comment_body': ""Done. Also added some tests for the new ColorUtil Method. Don't know how much benefit there is in having them, as some of the string needs to be made-up by String.format so they partially do the same thing the method does. This is so the floating point numbers are represented the same, since I think they may be different on other systems (precision-wise)."", 'comment_created': datetime.datetime(2021, 6, 11, 15, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 650099640, 'comment_body': 'Thank you 😃 ', 'comment_created': datetime.datetime(2021, 6, 11, 16, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 650101303, 'comment_body': 'Nice', 'comment_created': datetime.datetime(2021, 6, 11, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 650206672, 'comment_body': ""Don't ask, because I don't know, [but use `-fx-control-inner-background`](https://stackoverflow.com/questions/27700006/how-do-you-change-the-background-color-of-a-textfield-without-changing-the-borde). Right now you are setting the border to transparent as well."", 'comment_created': datetime.datetime(2021, 6, 11, 19, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 650365434, 'comment_body': 'good catch!', 'comment_created': datetime.datetime(2021, 6, 12, 8, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 650380348, 'comment_body': 'Done in 66c7b12. Looks even better now.\r\n![Peek 2021-06-12 13-09](https://user-images.githubusercontent.com/10479048/121773934-8655ff00-cb7f-11eb-88ff-033470a85181.gif)\r\n', 'comment_created': datetime.datetime(2021, 6, 12, 11, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': '90cbc2f66adecf356b1963f84e41e0c20895ceca', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18a5a3cb703117a76b5c4cc438e1ef9fac254fbb', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca95022c1c892322c4e1fd8f76d7b6808492a0a1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb2f9230b0b8a8aae6d881bdf4f5764f85e7800', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f97d036322e9eb3ecf16c927d43a266c36b7e8f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c981e29742f95d31692a1ef69cf20cf59decf5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e4179bc3484028b7c8b0e030102e12521d7fc47', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1606d2d8fb0c1cab2d4bc31c8eb65a8470396ed', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e7112b27f1d1afd044b4d9308190011db7d357f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c4dce328a1509872bbab5fe0d11a08f14fbf535', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a8f01f75ea485b7770a753d8c0848f7948eebc9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f921255179777fd74a78e2c4dd204b06b5fa2e9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52ec371cb9bf1087603ac124630151a4135ba663', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24846d08bc4d4de8137e187e7d378332f89c4af9', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94561f0be49c853bf972150b75b1c93ed530564e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e0c4c1946bacc962367b811a0cea9522452534a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03bbb364e90d2df9471905211bdd2c60a4d50bca', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68481d53b3172b944e0b9f47864228afd37339f0', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ab6676ed4357dd83254afeae53aa10fa542c9e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66c7b127bf4b8a052aac6ea13be837cc028fd00e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'add2d44859e653bd06114f3b1ae18038b36dd90f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf14b778419d8fdbbc7644b3fbaa6dd25ad43e8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
689930817,Removed references to apache commons logging,"code-howtos and build.gradle still referenced apache commons, but slf4j
should be used instead.
CleanupUrlFormatter was the only class still using it, but never
actually used the logger, so it was removed.

- [] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [] Tests created for changes (if applicable)
- [X] Manually tested changed features in running JabRef (always required)
- [] Screenshots added in PR description (for UI changes)
- [X] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7907,https://api.github.com/repos/JabRef/jabref/pulls/7907,https://github.com/JabRef/jabref/pull/7907,closed,1,6,3,1,0,0,0,0,[],2021-07-14 13:48:00+00:00,2021-07-14 14:56:55+00:00,4135.0,1:08:55,[],"[{'commit_sha': '53692a76340617ac4583102e546a87c405cecfa2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
716817672,[PoC] Introduced read/write interface for preferences,"We want to avoid to pass the big JabRefPreferences Object around. This is mostly done by just passing the smaller PreferencesObjects, but this approach has two problems:
- The preferences cannot be written to disk
- Changes to the preferences are only visible locally or wherever that same object was passed to
- Changes by other classes are missed if they were not passed the sampe preferences-object (multiple calls to JabRefPreferences.get*Preferences).

We want to fix that.
The interfaces I propose here basically gives classes the possibility to load an up-to-date preference object whenever they need it. The ReadWriteInterface adds the possibility to store the preferences to disk.

I show a possible use case on hand of the ImportSettingsPreferences. I chose that class because it is small and not used very often, so the change was quick.

Advantages:
- Avoid passing around the big JabRefPreferencesObject
- Always have an up-to-date preferences object
- With the distinction between Read- and Read-Write interface, it is immediately clear to the caller if a class/method alters the preferences or not.

<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->


<!-- 
- Go through the list below. Please don't remove any items.
- [x] done; [ ] not done / not applicable
-->

- [] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [] Tests created for changes (if applicable)
- [] Manually tested changed features in running JabRef (always required)
- [] Screenshots added in PR description (for UI changes)
- [] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",False,8006,https://api.github.com/repos/JabRef/jabref/pulls/8006,https://github.com/JabRef/jabref/pull/8006,closed,171,117,30,10,18,0,0,0,[],2021-08-20 15:18:53+00:00,2021-08-31 12:08:24+00:00,938971.0,"10 days, 20:49:31",[],"[{'commit_sha': 'd031092c888572ce69b9a1e3c97af94c4f80ef5e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8830ffce0452f36df40e12ecaa3ba3967e1f656', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2951de576c1b51dd7dd37aecc21e275f17889e63', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f7345ec8e83e35b50a692d9f34ebed3fadfe950', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81aad019810799da70e16dbe5ef9dd5d03b0879', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3267a9b3215788bec848a45c7d963263a7760fb', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '443e3eec5703a2e6464eb2443cad98f1e2340f08', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb68066e4ad546a912ce6f986f7b4ce0f841bdf', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8720e9d67d74c251299c03a0ba0e32b6b27afc40', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e7a26c92506b8ae96c76a81489fd14c85e44b89', 'committer_username': 'calixtus', 'committer_name': 'Carl Christian Snethlage', 'committer_email': None, 'commit_date': datetime.datetime(2019, 5, 10, 14, 13, 56, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3

416590781,Fix bracket collisions,"<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->
Brackets in regular expressions were interpreted as brackets for fields. This change allows users to define regular expressions that contain brackets. This led to an exception before.

<!-- 
- Go through the list below. If a task has been completed, mark it done by using `[x]`.
- Please don't remove any items, just leave them unchecked if they are not applicable.
-->

- [X] Change in CHANGELOG.md described (if applicable)
- [X] Tests created for changes (if applicable)
- [X] Manually tested changed features in running JabRef (always required)
- [ ] Screenshots added in PR description (for UI changes)
- [X] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,6469,https://api.github.com/repos/JabRef/jabref/pulls/6469,https://github.com/JabRef/jabref/pull/6469,closed,70,25,3,4,2,4,1,0,[{'name': 'status: ready-for-review'}],2020-05-12 09:07:53+00:00,2020-05-12 12:28:08+00:00,12015.0,3:20:15,"[{'comment_id': 423651823, 'comment_body': 'Question: you fetch the next token above in line 131, and then here the subtoken. So this moves the stream forward twice, right? What happens if the user adds an empty brace, i.e `[]`. Is the closing bracket still found? Can you please add a test for this case as well. Thanks!', 'comment_created': datetime.datetime(2020, 5, 12, 11, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 423656214, 'comment_body': 'Good catch! But what should ""[]"" expand to? Inside a quote, the parsing should work fine. but what does ""[]"" mean in terms of JabRef fields? Should it just do nothing and print an appropriate warning?', 'comment_created': datetime.datetime(2020, 5, 12, 11, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423659198, 'comment_body': ""Yes, I would say it should do nothing and log a warning. I don't really see a use case for the empty bracket, it should just not break the parser."", 'comment_created': datetime.datetime(2020, 5, 12, 11, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 423668051, 'comment_body': 'Done https://github.com/JabRef/jabref/pull/6469/commits/230fef2a16cd09ec3bd50647b7499ae943608e80', 'comment_created': datetime.datetime(2020, 5, 12, 11, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': '65d05ed4d2f31092d1034aa725992f004ca3c658', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4c7ce7cd525bea20a0cfd148fad87d9a7586e1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5861685e11ba8e1539c35e6c40be9ed6ecf80fc7', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230fef2a16cd09ec3bd50647b7499ae943608e80', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
414894706,Implement task progress indicator (and dialog) in the toolbar,"<!-- 
Describe the changes you have made here: what, why, ... 
Link issues that are fixed, e.g. ""Fixes #333"".
If you fixed a koppor issue, link it, e.g. ""Fixes https://github.com/koppor/jabref/issues/47"".
The title of the PR must not reference an issue, because GitHub does not support autolinking there.
-->
Implements a background-task progress indicator in JabRefs toolbar as first discussed in https://github.com/JabRef/jabref/pull/6381#discussion_r420043521.
![Screenshot from 2020-05-10 14-08-47](https://user-images.githubusercontent.com/10479048/81502520-bd077900-92de-11ea-8272-ec8859272a92.png)

The indicator is located at the right-most position in the toolbar. Clicking it opens a pop-over that lists the background tasks with an icon, title, message and progress.

In order not to overwhelm the user with background tasks, only interesting ones are shown. To make a background task show, it needs to have the showToUser property set. For it to have a meaningful entry, one should set the title and message to appropriate values. If progress can be tracked, that should be done as well. If not, an indeterminate indicator / progress bar is shown.
To set the icon of the task, add a mapping from the task-title to an icon to the iconMap in BackgroundTask.java

<!-- 
- Go through the list below. If a task has been completed, mark it done by using `[x]`.
- Please don't remove any items, just leave them unchecked if they are not applicable.
-->

- [X] Change in CHANGELOG.md described (if applicable)
- [ ] Tests created for changes (if applicable)
- [X] Manually tested changed features in running JabRef (always required)
- [X] Screenshots added in PR description (for UI changes)
- [X] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,6443,https://api.github.com/repos/JabRef/jabref/pulls/6443,https://github.com/JabRef/jabref/pull/6443,closed,254,12,12,42,34,53,1,0,[{'name': 'status: ready-for-review'}],2020-05-07 20:09:32+00:00,2020-05-12 12:23:06+00:00,404014.0,"4 days, 16:13:34","[{'comment_id': 421984906, 'comment_body': 'For the bindings to update, you need to add the list as a dependency (second argument of the `createXBinding` method). In the case of lists, however, its easier to use `EasyBind.combine`: https://github.com/TomasMikula/EasyBind#combine-list', 'comment_created': datetime.datetime(2020, 5, 8, 7, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 421986808, 'comment_body': ""Instead of using a real dialog, what about using a collapse overlay similar to how it's done in firefox?\r\nhttps://github.com/controlsfx/controlsfx/wiki/ControlsFX-Features#popover "", 'comment_created': datetime.datetime(2020, 5, 8, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422016766, 'comment_body': 'Aha, that looks useful.\r\nHowever, I think I am running into some typing issues which I am struggling to resolve.\r\n\r\nWith the library you pointed me to, I wound up with the following:\r\n\r\n`\r\n    public Binding<Boolean> anyTaskRunningBinding = EasyBind.combine(\r\n            backgroundTasks,\r\n            stream -> stream.anyMatch(Task::getProgress)\r\n    );\r\n`\r\n\r\nThis gives me an error that it expects a Binding<Boolean>, but gets a MonadicBinding<R>.\r\nIf I just cast it, I get the following:\r\n\r\n`no instance(s) of type variable(s) T exist so that Task conforms to ObservableValue<? extends T>`\r\n\r\nI think this is the issue I need to resolve first. As the example in the library works fine, I guess the conversion from MonadicBinding<R> to Binding<Boolean> is then done implicitly, is that correct?\r\n\r\nI struggle solving this because I dont know the type parameter of the tasks I am storing.\r\nWhen storing, the Task has type V:\r\n\r\nhttps://github.com/btut/jabref/blob/b8834914e5e735abaa7a710216888abe6bf54277/src/main/java/org/jabref/gui/util/DefaultTaskExecutor.java#L99-L104\r\n\r\nBut in the list I just use Task:\r\n\r\nhttps://github.com/btut/jabref/blob/b8834914e5e735abaa7a710216888abe6bf54277/src/main/java/org/jabref/gui/StateManager.java#L49\r\n\r\nHow do I need to change the list in order for it to work?', 'comment_created': datetime.datetime(2020, 5, 8, 8, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422016960, 'comment_body': ""Uh fancy! I'll look into it!"", 'comment_created': datetime.datetime(2020, 5, 8, 8, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422021253, 'comment_body': 'Add the generics to the Task as welll:\r\n`    private final UiThreadObservableList<Task<V>> backgroundTasks = new UiThreadObservableList(FXCollections.observableArrayList());`', 'comment_created': datetime.datetime(2020, 5, 8, 8, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 422022977, 'comment_body': ""But where would I get the V from in this case?\r\n`Cannot resolve symbol 'V'`"", 'comment_created': datetime.datetime(2020, 5, 8, 8, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422036162, 'comment_body': 'I changed it to Task<?> now and now the progress, title and message properties make their way through to the dialogue.\r\nI still cannot create the bindings for the progress indicator though.', 'comment_created': datetime.datetime(2020, 5, 8, 9, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422037673, 'comment_body': ""That change also allows me to use EasyBind's listBind to bind the task list in the view to the task list in StateManager."", 'comment_created': datetime.datetime(2020, 5, 8, 9, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422040825, 'comment_body': ""![image](https://user-images.githubusercontent.com/10479048/81391853-14aab680-911e-11ea-98a6-b63c1935a3df.png)\r\nHere is the first peak at a download in the dialogue (which will probably be changed to a popover later). As you can see, the download task has it's title and message set and progress is updated fine. However, there are still a lot of tasks that do not have any details."", 'comment_created': datetime.datetime(2020, 5, 8, 9, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422061602, 'comment_body': ""Looks good already!\r\nThere are a lot of tasks which don't concern file downloads and just perform some operations in the background. If you search for all references from backgrond task you probably have to adjust each one to add a meaningful description"", 'comment_created': datetime.datetime(2020, 5, 8, 10, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 422088219, 'comment_body': 'I think that should be doable. But before I do that: is it a good idea to have all background tasks listed? Or should we just show downloads? If we go with the first option, I suggest turning off the retain-tasks feature of the task view. Then, all completed tasks will automatically disappear. This way we have less tasks that only ran for a very little time filling up the view.\r\n\r\nI got the bindings to work by storing a list of Property<Task<?>> Instead of Task<?>. That does the trick for the progress indicator. It now is indeterminate when one of the tasks has an indeterminate progress and shows the average progress otherwise (100% if no tasks are running).\r\nFor some reason, this breaks the task view. Since I now store a list of properties, and not a list of tasks, I cannot bind them directly to the view, so I went back to doing it manually, but that does not seem to work.\r\n\r\nhttps://github.com/btut/jabref/blob/38dd89dce28b72d195de18b848b011532ef1f868/src/main/java/org/jabref/gui/taskprogressmanager/TaskProgressDialog.java#L34-L47', 'comment_created': datetime.datetime(2020, 5, 8, 11, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422095169, 'comment_body': 'Now I just converted the list of properties back into a list of tasks using EasyBind and the bind that list to the list of tasks in the view (again using EasyBind). Now both the indicator and the dialogue work fine and are updated with the running tasks!', 'comment_created': datetime.datetime(2020, 5, 8, 11, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422136123, 'comment_body': '![Screenshot from 2020-05-08 15-12-50](https://user-images.githubusercontent.com/10479048/81409085-c1952b80-913e-11ea-9935-36c17d30931d.png)\r\nThat looks much better! Great idea!', 'comment_created': datetime.datetime(2020, 5, 8, 13, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422519262, 'comment_body': 'What\'s the reason to wrap the tasks around in a `ObjectProperty`? It should also work without this wrapper. If there were problems with the updates, you might need to add an ""extractor"" to the `observableArrayList` which specifies that the list should update if the underlying data changes (in this case probably the progress of the task).', 'comment_created': datetime.datetime(2020, 5, 9, 16, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422522584, 'comment_body': ""I'm confused. I though EasyBind's combineList takes care of updating the observable when the progress updates? From the doc:\r\n\r\n> Turns an observable list of observable values into a single observable value. The resulting observable value is updated when elements are added or removed to or from the list, as well as when element values change.\r\n\r\nI had to turn it into a list of ObjectProperty because that's what EasyBind's combineList expects, but I guess it then only registers changes of the ObjectProperty, not the task.\r\n\r\nSo to update upon progress changes, I need to tell the list that I am interested in the progress by defining an extractor. I found some code online working with extractors, so I think I should be able to implement that."", 'comment_created': datetime.datetime(2020, 5, 9, 17, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422524271, 'comment_body': 'Yes, combineList takes updates into account but for this the elements have to observable themselves. For example, if `ObservableList<ObservableDoubleValue>` is a list containing the `progress` property of each task.\r\n', 'comment_created': datetime.datetime(2020, 5, 9, 17, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422524710, 'comment_body': 'Thanks for the hints. This works!\r\n![Screenshot from 2020-05-09 19-37-23](https://user-images.githubusercontent.com/10479048/81480977-4f4f4480-922d-11ea-8f57-658fc11430ed.png)\r\n', 'comment_created': datetime.datetime(2020, 5, 9, 17, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422529201, 'comment_body': 'About the ObjectProperty wrapping issue. I tried changing it back just to see what happens, and I still get the same error for the bindings:\r\n\r\n> no instance(s) of type variable(s) T exist so that Task<?> conforms to ObservableValue<? extends T>\r\n\r\nI think that the combine method only works on lists of observables.\r\nIf I create the binding with Bindings.createDoubleBinding, it does not update.', 'comment_created': datetime.datetime(2020, 5, 9, 18, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422531444, 'comment_body': ""So\r\n```java\r\npublic Binding<Double> tasksProgressBinding = Bindings.createDoubleBinding(\r\n            backgroundTasks.filter(Task::isRunning).mapToDouble(Task::getProgress).average().orElse(1), backgroundTasks);`\r\n```\r\ndoesn't work?"", 'comment_created': datetime.datetime(2020, 5, 9, 18, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422534091, 'comment_body': 'Actually, it does (except for some minor mistakes in your code).\r\nI did not put the list name (backgroundTasks) as a second argument. Does that mean that the binding would have worked ONLY on the extractor? So adding and removing does not update the value, but a change in the progress would have? Or why else do we need to pass the list as a second argument?', 'comment_created': datetime.datetime(2020, 5, 9, 19, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422542921, 'comment_body': ""The second argument specifies the observables that the function (the first argument) depends on. That is, every time these observables change, the function is called and the binding is updated with the new value. If you don't specify any observables in the second argument, then the binding is never updated."", 'comment_created': datetime.datetime(2020, 5, 9, 20, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422543126, 'comment_body': 'Oh that makes sense! Thanks for explaining!', 'comment_created': datetime.datetime(2020, 5, 9, 20, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422551019, 'comment_body': 'Just a wild guess, could it be that actually all tasks are finished, because the `TaskExectutor` is already shutdown?', 'comment_created': datetime.datetime(2020, 5, 9, 21, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422551089, 'comment_body': 'Add a log statement here as well to make sure that the progress dialog does indeed wait?', 'comment_created': datetime.datetime(2020, 5, 9, 21, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422551834, 'comment_body': ""I added some logs in JabRefMain's stop method, it is run after the dialogue is already gone."", 'comment_created': datetime.datetime(2020, 5, 9, 22, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422552008, 'comment_body': 'I currently have a log message after the loop to see whether the isCancelled property or my tasks-running property caused the stop. I now also put a log message where you suggested, just after the wait. They are exectued in the correct order. So yes, the wait does work, but the task exits too early.', 'comment_created': datetime.datetime(2020, 5, 9, 22, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422552643, 'comment_body': 'I now also get a warning about the binding:\r\n\r\n> May 10, 2020 12:02:50 AM javafx.beans.binding.Bindings$1 computeValue\r\nWARNING: Exception while evaluating binding\r\njava.lang.IllegalStateException: Task must only be used from the FX Application Thread\r\n        at javafx.graphics/javafx.concurrent.Task.checkThread(Task.java:1220)\r\n        at javafx.graphics/javafx.concurrent.Task.isRunning(Task.java:987)\r\n        at java.base/java.util.stream.MatchOps$1MatchSink.accept(MatchOps.java:90)\r\n        at java.base/java.util.AbstractList$RandomAccessSpliterator.tryAdvance(AbstractList.java:706)\r\n        at java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:127)\r\n        at java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:502)\r\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:488)\r\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n        at java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)\r\n        at java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)\r\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.base/java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:528)\r\n        at org.jabref/org.jabref.gui.StateManager.lambda$new$1(StateManager.java:132)\r\n        at javafx.base/javafx.beans.binding.Bindings$1.computeValue(Bindings.java:157)\r\n        at javafx.base/javafx.beans.binding.BooleanBinding.get(BooleanBinding.java:155)\r\n        at org.jabref/org.jabref.gui.WaitForBackgroundtasksFinishedDialog$1.call(WaitForBackgroundtasksFinishedDialog.java:28)\r\n        at org.jabref/org.jabref.gui.WaitForBackgroundtasksFinishedDialog$1.call(WaitForBackgroundtasksFinishedDialog.java:24)\r\n        at javafx.graphics/javafx.concurrent.Task$TaskCallable.call(Task.java:1425)\r\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n        at java.base/java.lang.Thread.run(Thread.java:832)\r\n\r\nI tried to run the task on the Javafx thread by using:\r\n\r\n`DefaultTaskExecutor.runInJavaFXThread(waitForBackgroundtasksFinished);`\r\n\r\nThe loop is then run more often (I guess until the download is finished), but the gui is frozen because of the task.', 'comment_created': datetime.datetime(2020, 5, 9, 22, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422632219, 'comment_body': 'The problem was that the extractor I added to the task list in StateManager did not include the isRunning property. It still did not run perfectly and was not pretty, therefore I moved to a custom dialog which works fine.', 'comment_created': datetime.datetime(2020, 5, 10, 11, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422971198, 'comment_body': 'The progress indicator is also used at other places. Since this definition here is global, it changes also the style of these other indicators, is this desired? I would guess some of the changes are ok globally (e.g the color) but others like the padding or no percentage are probably specific to the toolbar, right?', 'comment_created': datetime.datetime(2020, 5, 11, 11, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422973356, 'comment_body': 'Also add `Background Tasks` as tooltip (if supported)?', 'comment_created': datetime.datetime(2020, 5, 11, 11, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422975104, 'comment_body': 'Please make this fields private and add a public getter method (otherwise code from the outside can change these bindings, which is not what we want). (Maybe also remove the suffix ""Binding"" from the name, but that\'s a matter of taste).', 'comment_created': datetime.datetime(2020, 5, 11, 11, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422977336, 'comment_body': 'https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/DialogService.java#L179 (or the other overload) cannot be used here? I think it would be slightly cleaner to make `WaitForBackgroundtasksFinishedDialog` a ""real"" dialog (i.e. inherit from `Dialog`) or even convert it to a proper fxml-based dialog similar to most dialogs.', 'comment_created': datetime.datetime(2020, 5, 11, 11, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422980468, 'comment_body': 'Why do you prefer a map here instead of adding a new property `icon` to the BackgroundTask class (so that `downloadTask.setIcon(IconTheme.JabRefIcons.DOWNLOAD)` works)?', 'comment_created': datetime.datetime(2020, 5, 11, 11, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422981410, 'comment_body': 'We try to remove the `Globals` class. Is it possible to insert the `stateManager` via a constructor parameter? ', 'comment_created': datetime.datetime(2020, 5, 11, 11, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 422987628, 'comment_body': ""Make sense, I didn't see it anywhere else. I'll see to it."", 'comment_created': datetime.datetime(2020, 5, 11, 11, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422987798, 'comment_body': 'I actually wanted to do that already, but forgot.', 'comment_created': datetime.datetime(2020, 5, 11, 11, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422987905, 'comment_body': 'Sure thing!', 'comment_created': datetime.datetime(2020, 5, 11, 11, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422991180, 'comment_body': ""I did use the custom dialogue at the beginning, but it gives no access to the actual javafx dialogue, meaning I cannot hide it on an event. The thing with the JabRef dialogues created by the show*AndWait is that they create the actual javafx dialogue in the method, so they can't be accessed later. I just found the createDialog method which would probably be the best to use here. It creates the dialog and takes care of some styling and such, and then returns the actual dialog which can then be shown and waited for. I'll do that!"", 'comment_created': datetime.datetime(2020, 5, 11, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422993000, 'comment_body': ""That's because the TaskProgressView works on a list of tasks. Tasks have no icon property, therefore one must provide a callback that gets an icon from a task.\r\nIf BackgroundTask were derived from Task, we could add a property to BackgroundTask. The callback could then check if we have a BackgroundTask at hand and if so, provide the icon stored in a property in BackgroundTask. But BackgroundTask is not derived from Task so this is not possible.\r\nWe need a key to map from a Task to an Icon.\r\nI used the title of the task as a key property to map to the icon, so an immutable map seemed like the best way to go."", 'comment_created': datetime.datetime(2020, 5, 11, 12, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422993888, 'comment_body': 'Yes, that should be easy.', 'comment_created': datetime.datetime(2020, 5, 11, 12, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422997446, 'comment_body': 'Fixed in https://github.com/JabRef/jabref/pull/6443/commits/2c9ccea66fef2bcc6e68d0fadfdf407b1a0b6262', 'comment_created': datetime.datetime(2020, 5, 11, 12, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 422998327, 'comment_body': ""Ok, I see. It's a bit unfortunate but your solution makes sense. I would propose to change the `Callback` below to a normal method (`public static Node getIcon(Task<?> task)` which you then use as a callback using `BackgroundTask::getIcon`) and replace the `iconMap` by a normal switch statement."", 'comment_created': datetime.datetime(2020, 5, 11, 12, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 423061905, 'comment_body': 'Change to method is easy, but I cannot use a switch, because I would need a constant expression. As I use the title of the task, and there is localization on that, it is not constant.\r\nhttps://github.com/JabRef/jabref/pull/6443/commits/396411a68cf3a2583cbe367b716d6195f0773cf2', 'comment_created': datetime.datetime(2020, 5, 11, 14, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423063233, 'comment_body': ""Sounded easy, somehow doesn't work. I am not familiar with javafx, can you spot any mistakes in https://github.com/JabRef/jabref/pull/6443/commits/fcb1d0cc0ec3af744485b4d9321e3a3215c532f1? I tried to copy the style of icon-button which also has multiple styles.\r\nThe indicator is invisible now and can only be seen by the changing background color when hovering over it. The area that is then seen is very tiny."", 'comment_created': datetime.datetime(2020, 5, 11, 14, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423063939, 'comment_body': 'https://github.com/JabRef/jabref/pull/6443/commits/cf10859542c790e170866698f57a6fc8a704f7df', 'comment_created': datetime.datetime(2020, 5, 11, 14, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423064333, 'comment_body': 'https://github.com/JabRef/jabref/pull/6443/commits/d56138bbb629dcd5ffdad9d29d9c7b87d80ba7c2', 'comment_created': datetime.datetime(2020, 5, 11, 14, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423065254, 'comment_body': 'Is this ok? I tried to follow how showProgressDialogAndWait is implemented.\r\nhttps://github.com/JabRef/jabref/pull/6443/commits/ff9ce0068d6b80e131826a9138aab3b1f981b00e', 'comment_created': datetime.datetime(2020, 5, 11, 14, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423166687, 'comment_body': 'Because you use `getStyleClass().setAll`, the default javafx style is completely removed. It should work if you use ""add"" instead. Then you can also simplify the double statements `.progress-indicatorToolbar, .progress-indicator` to `.progress-indicator` because the progress indicator in the toolbar is still matched by the later.', 'comment_created': datetime.datetime(2020, 5, 11, 16, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 423486282, 'comment_body': 'I knew you would spot that mistake immediately, thanks! Works like a charm.\r\nhttps://github.com/JabRef/jabref/pull/6443/commits/e24c1418564a9304b9c5172573e9edc9d1036a54', 'comment_created': datetime.datetime(2020, 5, 12, 6, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423649148, 'comment_body': 'This looks odd to me', 'comment_created': datetime.datetime(2020, 5, 12, 11, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 423651784, 'comment_body': 'Could you please elaborate?\r\nIf you mean the condition at the end, I just want to make sure that JabRef only exists if the user pressed yes. So if the optional is empty I just put ButtonType.CANCEL so the comparison to YES returns false.\r\nDo you want me to change this or add a comment? Maybe it would be clearer to store the result in a variable and check for (result.isPresent() && result.get() == ButtonType.YES).', 'comment_created': datetime.datetime(2020, 5, 12, 11, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 423656149, 'comment_body': 'Yes, I think this is more readable.\r\n', 'comment_created': datetime.datetime(2020, 5, 12, 11, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 423658817, 'comment_body': 'Done https://github.com/JabRef/jabref/pull/6443/commits/3db399741b0ce098cd930005870bc745cd719c70', 'comment_created': datetime.datetime(2020, 5, 12, 11, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}]","[{'commit_sha': 'fdfe0741dc5884a56ab98b1f545b5d37a8f49dfa', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fd181130c8d6d4e7f848cb2aebddb4c41e9baf5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8834914e5e735abaa7a710216888abe6bf54277', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255a6e491c7ad7da26c5fa761395e9f448aa671b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38dd89dce28b72d195de18b848b011532ef1f868', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2aaa6cbe51571c83bc5b65e5a9c99047b03ba5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf9bd0e7d55de96a74d1dbc12df604a4ef5c997', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a8febeeff1e5f8aa760144ac7ec514dabe16f2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cac989b24af0df0e18f35063d9866a94fbe47623', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f525b8a2956070f1cb92ed2848df6ea776db342', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c877431d429a2436316912568ef154e10dad65cb', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad95986b8e081369939e920e1a219eb1d76627b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd4e38e8b41e90960cac721da22a18b4ce942c3a', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23f8cf053f8203a9785b8beecde015d51c6b98aa', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4628c3dcb0b234025046ecfad6acd3d4aceddd2b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ff19e47b4a7182e7a159471f097d4fc19d0350', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d7c142724573bdc5e65b1187c72f37ee401d7d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008d55e652d04a4d73b40df19098d66abfebd4b5', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f4493ac5ff446be297570667ed88f18b0562b0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ac31675dc099ba793ec7450f7d6dc85b25068d', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a717693827c6ceb8c9d2ad9f30cfdf8d107c44', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7442cc2247772b6e54bcb68cea947a5a2a604bc', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5defe3e467f83c2ce86407fd998c093f78a7a519', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fba9c70bec3813d8684e79ae21c29b770625a734', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a62e6fea391b2845943b976152c634f3cbc5750', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a97af13c93b3cd32fef6242af5622332765a8727', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ee457171da21a039a29756f37f66c480a132f3c', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d9ca8f0fe2c322d30352a98676851b83649857', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd2eefd21e6e83b168d324635179b2cca4f18405', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41efc047ee0cb7bb8bdd3389ff384f5d53ca6c8f', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c9ccea66fef2bcc6e68d0fadfdf407b1a0b6262', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff9ce0068d6b80e131826a9138aab3b1f981b00e', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd56138bbb629dcd5ffdad9d29d9c7b87d80ba7c2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf10859542c790e170866698f57a6fc8a704f7df', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb1d0cc0ec3af744485b4d9321e3a3215c532f1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396411a68cf3a2583cbe367b716d6195f0773cf2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e24c1418564a9304b9c5172573e9edc9d1036a54', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '478ee059e5606251361d663b939284f19bc834e4', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0557c678a657e6315dcb2c2c1c98d90b45a76e08', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23b7e6947549c1e44488e72c6a55429f55d63032', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ae7963d447e5fad4dc5af0b27384e63d2b82d1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db399741b0ce098cd930005870bc745cd719c70', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
414476954,Fixed entry duplication on file download,"This fixes an issue introduced in #6381 that resulted in two identical fulltext-file entries when downloading a fulltext file via the context menu of an online link.
Now both the online link and the fulltext file are present in their BibEntry after the download.

- [ ] Change in CHANGELOG.md described (if applicable)
- [ ] Tests created for changes (if applicable)
- [X] Manually tested changed features in running JabRef (always required)
- [ ] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,6437,https://api.github.com/repos/JabRef/jabref/pulls/6437,https://github.com/JabRef/jabref/pull/6437,closed,0,2,1,1,0,0,0,0,[],2020-05-07 05:59:05+00:00,2020-05-07 06:51:34+00:00,3149.0,0:52:29,[],"[{'commit_sha': 'bb187d4251ce5a40aa84fb49c898d5a810004534', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
414472222,Cleanup dead code,"Cleaned some LOCs left from JabRef 3.x (found during #6381)

- [ ] Change in CHANGELOG.md described (if applicable)
- [ ] Tests created for changes (if applicable)
- [X] Manually tested changed features in running JabRef (always required)
- [ ] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.",True,6436,https://api.github.com/repos/JabRef/jabref/pulls/6436,https://github.com/JabRef/jabref/pull/6436,closed,0,19,1,2,0,0,0,0,[],2020-05-07 05:43:34+00:00,2020-05-07 06:52:23+00:00,4129.0,1:08:49,[],"[{'commit_sha': 'c9116fbecf7b6b70f33b15752bfc119949f749f6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd87c6c894d6e99a9abdf2a0a30ee47c709071a67', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3
411706287,Added a download checkbox to the import dialog,"When importing entries, users now have a checkbox available to download
files linked via url.

I am not a GUI expert and am wondering whether my fix is appropriate and is considered clean in the MVC-concept. Since the functionality was already implemented in the LinkedFileViewModel, I just created an instance and let it handle the download. Is that ok? If not, copying the code over (and resolving some dependencies) would be the easiest, but also the dirtiest solution to this problem. Is there an appropriate place the code in LinkedFileViewModel could be moved, so it is callable in ImportEntriesViewModel?

Fixes #5662

![image](https://user-images.githubusercontent.com/10479048/80735472-04d51600-8b11-11ea-9d20-969e8d1dd974.png)

<!-- 
- Go through the list below. If a task has been completed, mark it done by using `[x]`.
- Please don't remove any items, just leave them unchecked if they are not applicable.
-->

- [ ] Change in CHANGELOG.md described (if applicable)
- [ ] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [x] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,6381,https://api.github.com/repos/JabRef/jabref/pulls/6381,https://github.com/JabRef/jabref/pull/6381,closed,58,6,12,12,17,20,1,0,[{'name': 'status: ready-for-review'}],2020-04-30 16:37:49+00:00,2020-05-04 14:12:29+00:00,336880.0,"3 days, 21:34:40","[{'comment_id': 418161900, 'comment_body': ""As JabRef uses the MVVM approach, the ideal solution would be to add a property for the checkbox in the viewmodel and bind that to the checkbox's selected item property. That should have ideally also be already the case for the checkedItems.. Don't know why it's not done.\r\n\r\nhttps://devdocs.jabref.org/readings-on-coding/javafx"", 'comment_created': datetime.datetime(2020, 4, 30, 17, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 418675092, 'comment_body': 'If you like, you could also inject PreferencesService by the constructor. We are currently trying to get rid of the singleton pattern whereever possible.', 'comment_created': datetime.datetime(2020, 5, 1, 18, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'calixtus', 'type': 'User'}, {'comment_id': 419284983, 'comment_body': 'Sounds very reasonable, especially considered the service was already injected.\r\nI resolved it in 50d2731', 'comment_created': datetime.datetime(2020, 5, 4, 8, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 419544508, 'comment_body': '@btut Thanks for your implementation. I fear this addition here now duplicates the file if you right-click an online link and select ""Download"". Can you please double check this.\r\n(In case this is really an issue, one option would be to use `prepareDownloadTask` below in the importer. Then you can also display a nice progress window for the downloads.)', 'comment_created': datetime.datetime(2020, 5, 4, 15, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 419943519, 'comment_body': ""Good point @tobiasdiez. I checked, and this does indeed duplicate the entry.\r\nthe progress-bar next to the link entry does look very nice indeed and would probably be good to have when working with large files or slow connections. I can imagine people thinking it didn't work because the file doesn't show up immediately.\r\n\r\nI don't understand your suggestion of using prepareDownloadTask, though. Isn't that implicitly used by the download() method anyway?\r\n\r\nAs far as I can tell the right-click -> download menu item just calls the download-function of the LinkedFileViewModel. In that case, the LInkedFileViewModel is the one that is actually displayed. Therefore the progress bar can be shown. However; I have no access to that object, correct? I have the LinkedFileViewModel that I use for the download, but I cannot add it to any LinkedFilesEditorViewModel to be displayed.\r\n\r\nOne quick fix I could think of would be to keep the online-link even for right-click->download actions or delete the link for both methods. There would still be no progress bar for the imported files, but at least it stops duplication.\r\n\r\nThe best fix (IMO) would be to gain somehow access to the actual LinkedFileViewModel of the online link after the import and call download from there, basically imitating a user right-clicking the item and selecting download. I would need some pointers on how to get that access though."", 'comment_created': datetime.datetime(2020, 5, 5, 8, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420001709, 'comment_body': 'I guess it would work if I moved the downloadProgressProperty from LinkedFileViewModel to LinkedFile. That object lives in the BibEntry and (AFAICT) and would be the same both for the importer and the LinkedFileViewModel.\r\nWould moving that property be an acceptable option?', 'comment_created': datetime.datetime(2020, 5, 5, 10, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420034233, 'comment_body': '@btut Have a look at the method `addLinkedFileFromURL` in DownloadFullTextAction, that solves a similar case \r\nIn the importer you would create a progressbar/dialog and bind it to the prepareDownloadTask.progressProperty\r\n', 'comment_created': datetime.datetime(2020, 5, 5, 11, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 420043521, 'comment_body': ""That method just notifies the user after a successful download. I see no progress bar. My issue is not in getting the progress of the download, but where to display the progress bar. Just popping up a dialogue with a bar is no viable solution in my opinion. When I import an entry I don't want to watch a progress bar while most of the entry is already there, I want to start working with the entry.\r\n\r\nAs I said, a progress bar would be very helpful, but I don't think popping a dialogue (or remaining in the import dialogue as long as the files are not ready, if that is what you mean) would be a good idea. I like how the right-click -> download action puts a small progress bar in the file entry itself. I can work with the bib entry, and if I try to open up the file, I see the progress bar.\r\n\r\nHowever, since there is no access to the linked files editor from the importer, I cannot add the progress bar there. I think moving the download-related properties to LinkedFile would work quite well; I just don't know if it is compliant with how JabRef is developed.\r\n\r\nOne more thought on that addLinkedFileFromURL method you mentioned. It seems to share a lot of code with the download method of LinkedFileViewModel. If we move the properties I was talking about to the LinkedFile class; the LinkedFilesEditorViewModel would always correctly display the progress no matter where the download() method of LinkedFileViewModel would be called from. In that case, I would suggest calling the download Method from addLinkedFileFromURL to reduce code duplication and have a unique way of handling file downloads and showing it's progress."", 'comment_created': datetime.datetime(2020, 5, 5, 11, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420062269, 'comment_body': 'Because it is a small change I just wanted to try it out and unfortunately it does not seem to work. You can check it out in [my fork](https://github.com/btut/jabref/tree/feature/downloadFilesOnImport), I guess once this pull request is reopened due to the file-duplication issue this would show up here as well.\r\n\r\nThe right-click -> download action still works fine and shows the progress. The file is now not duplicated, but the original online link is kept.\r\n\r\nAs I said, the progress for the imported files still does not show. I added some log messages in the LinkedFile constructor and noticed that after clicking import, it is called twice. I guess the one showed is not the one I bind the download-properties and therefore the progress is not shown. Why are there multiple LinkedFile objects for the same file?', 'comment_created': datetime.datetime(2020, 5, 5, 12, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420072945, 'comment_body': 'To me this looks like the LinkedFile object from the Import Dialogue is not the same LinkedFile object that is then displayed, can somebody confirm?', 'comment_created': datetime.datetime(2020, 5, 5, 12, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420102135, 'comment_body': 'I will take a look at it later', 'comment_created': datetime.datetime(2020, 5, 5, 13, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 420103144, 'comment_body': 'The latest commit in my branch now deletes the online file after the download. As @Siedlerchr said removing the online link is not a good idea but the right-click -> download action did that all along, I guess it is best to create a preference for this after all.\r\n\r\nThis also works only when downloaded using the right-click -> download action. If the file is downloaded using the import dialogue, the online link is not deleted.', 'comment_created': datetime.datetime(2020, 5, 5, 13, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420113469, 'comment_body': '@Siedlerchr thank you!\r\nI guess the progress bar is not really that important though. We can go the addLinkedFileFromURL way and just display a message once done.\r\nI just found the progress bar very neat.', 'comment_created': datetime.datetime(2020, 5, 5, 13, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420333809, 'comment_body': 'Thanks @btut for having a second look at this problem. \r\n\r\nMoving the download progress properties to the `LinkedFile` class feels a bit inconvenient. This class should represent a real linked file (or web link) while the download action is something related to an UI action which is better placed in the `LinkedFileViewModel`  (which is the UI-wrapper of `LinkedFile`).\r\n\r\nAs Christoph said, I would do it similar to the following:\r\nhttps://github.com/JabRef/jabref/blob/3d24714deb07978972b921025551d5328faff039/src/main/java/org/jabref/gui/externalfiles/DownloadFullTextAction.java#L159-L168\r\nThe progress can be displayed by disabling the ""Import"" button but not yet closing the dialog as in the \r\nhttps://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/EntryTypeView.java#L76\r\nYou said you don\'t like to use the dialag to show the progress. Why is this? If the dialog is closed but the download is still going on in the background, than we have to handle a couple of situations that are complex. E.g. user closes JabRef before all downloads are done, user removes online link before they are downloaded, etc. ', 'comment_created': datetime.datetime(2020, 5, 5, 18, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 420556932, 'comment_body': ""Hi,\r\n\r\n> This class should represent a real linked file (or web link) while the download action is something related to a UI action which is better placed in the LinkedFileViewModel (which is the UI-wrapper of LinkedFile).\r\n\r\nAs I said, I am not very familiar with GUI programming so I have no idea how such things are usually done. From an outsiders view though it seems logical to me to place the download-progress properties in the linked files. As I see it, they are more related to the status of the actual file than with the UI action and therefore belong with the model. Just my thoughts though and since it does not fix anything I don't really care at all.\r\n\r\n> You said you don't like to use the dialogue to show the progress. Why is this?\r\n\r\nIt just seems disruptive to me. If I had to choose between waiting in the import dialogue and having no progress bar, I would definitely choose the second option. I like how these background tasks are handled in JabRef and I think it would be a shame to have a background task which blocks the UI.\r\n\r\n> If the dialogue is closed but the download is still going on in the background then we have to handle a couple of situations that are complex.\r\n\r\nIsn't that already the case with the right-click -> download action though?\r\n\r\n> E.g. user closes JabRef before all downloads are done\r\n\r\nI didn't try this out, but I think the current implementation would then leave the bib-entry as it was, as it is only changed after the download is finished. The file would be corrupt but still there and the user might link it manually the next time as it already has the correct name and JabRef would pick it up easily. This could be a problem.\r\n\r\n> user removes online link before they are downloaded, etc\r\n\r\nI think this would be fine. The download would still go on and when it's done the new entry is added (as my code does not overwrite the online-link entry but add a new one). If one would then close JabRef during the download, the next time there would be neither an online-link nor a file entry, which I guess would be fine as the user explicitly deleted the link.\r\n\r\nI noticed in the code (never while running JabRef and I cannot find any piece of code where it is actually used and even setting it's visibility to true does not show anything, maybe it's just dead code) that there is a progress bar in the right end of the status line at the bottom of the frame. What about using that one? The user is not disrupted in his flow and upon closing, we could pop a dialogue warning about ongoing downloads.\r\n\r\nIf that progress bar is dead code, I guess there was one at some point which was then removed, so you probably didn't like it. In that case, what do you think about having a small loading circle or a download icon in the top right, next to the menu bar? It could be turning/greyed out while downloading and a tooltip could display the progress of single files."", 'comment_created': datetime.datetime(2020, 5, 6, 5, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 420935546, 'comment_body': ""Ok, you convinced me, let's continue trying to do it in the background. If users experience problems, then we can investigate of how to best solve them and maybe go back to the blocking-ui strategy if nothing else works.\r\n\r\n> I noticed in the code (never while running JabRef and I cannot find any piece of code where it is actually used and even setting it's visibility to true does not show anything, maybe it's just dead code) that there is a progress bar in the right end of the status line\r\n\r\nThe old JabRef 3.x contained a status bar, which was removed since it wasn't used that much. So if there is still code related to this in the code base, then it is definitely dead code and can safely be removed. May I ask you to open a PR removing it? Thanks!\r\n\r\n> If that progress bar is dead code, I guess there was one at some point which was then removed, so you probably didn't like it. In that case, what do you think about having a small loading circle or a download icon in the top right, next to the menu bar? It could be turning/greyed out while downloading and a tooltip could display the progress of single files.\r\n\r\nI like it! Very good idea. Might also be helpful to show progress for other actions as well (e.g. cleanup). One possibility to implement this would be adding an ObservableList of open tasks (including their progress) in `StatusManager`.\r\n\r\nI guess the most pressing thing would be to fix the download right-click, and then afterwards worry about a nice progress display."", 'comment_created': datetime.datetime(2020, 5, 6, 16, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 421441514, 'comment_body': '> I like it! Very good idea. Might also be helpful to show progress for other actions as well (e.g. cleanup). One possibility to implement this would be adding an ObservableList of open tasks (including their progress) in StatusManager.\r\n\r\nThat was the basic idea. BackgroundTask already has a workDonePercentageProperty, so all thats left to do is build a list of them and display it.\r\nI have a couple of questions though:\r\n\r\n- The list of tasks would consist of a text label and a progress bar. BackgroundTask has a StringProperty message, I would use that one for the label. Unfortunately, the message does not seem to be set by the file downloaders. It is only set by the UnlinkedFilesCrawler. Did I miss something? If not, I would add a message (something like ""Downloading file from <url>""). For other tasks that use BackgroundTask we could either add a message parameter to the Background-Task constructor to force users to provide a sensible message, or we could set the default message to ""<class name> in progress"", so at the very least it says ""BackgroundTask"" in progress, for child-classes it would take the child\'s name and produce a somewhat usable label.\r\n\r\n- I can\'t seem to find the fxml file for the main JabRef frame where I would add the status wheel. Could you please help me out here?', 'comment_created': datetime.datetime(2020, 5, 7, 11, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 421470714, 'comment_body': '@btut  The StringProperty is as the name implies a property that you can set for the task.In the File Download task you can simply set it to (calling setValue) on it with a text. e.g. ""Downloading files"".\r\nAs this property is exposed you can bind a label to it. \r\nFor a quick understanding what those properties are and how they work:\r\nhttps://www.dummies.com/programming/java/javafx-binding-properties/\r\n\r\nJabRefFrame has no fxml. Have a look at the init/ initLayout Method().\r\nYou can always add', 'comment_created': datetime.datetime(2020, 5, 7, 12, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 421563568, 'comment_body': ""Thanks for the input. I already started drafting some code and came by the properties and did some reading.\r\nI implemented a simple dialog using the TaskProgressView from javafx control. That looks pretty nice IMO. Unfortunately (and quite obviously) it works on a list of javafx tasks, not JabRef BackgroundTasks.\r\nI noticed that BackgroundTasks are converted to javafx tasks anyways, so when that is done I enlist them in an ObservableList I created in StateManager. The tasks show up, but the bindings do not seem to work, I still have to figure out why. So right now, one can see a list of tasks, but the tasks have no title, no message and an infinite progress bar.\r\n\r\nIf you don't mind I would like to open a WIP PR and if I need some help I would start a discussion there. Is that ok?"", 'comment_created': datetime.datetime(2020, 5, 7, 14, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'btut', 'type': 'User'}, {'comment_id': 421671004, 'comment_body': 'Yes, go ahead with a PR, makes it easier to help for specific questions ', 'comment_created': datetime.datetime(2020, 5, 7, 17, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}]","[{'commit_sha': '526099e2117f6bef2494c3f087908a2403d3fe08', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09a0ff98edf6197f820c70650f4874425856088', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1854e8ddb95de230887ea3a846918bf0903391e6', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18ac7940298e411dee33d66d0b43dcf211c3f4ca', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a4b1b718580eacf6e6117ecbe3f258cbc8002b', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb743f0f6f5b6302772d60c0c0ac9fe2df4d4aa2', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d27319f2e92ba8eeb25566c0c5f792cbe9beb0', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e00bf03c83e3f2a8302b574e41b993a84a4f454', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091d4a2853c213e18f1c7cc5260ce51d53f4d684', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2bfb8972e4276f50e390417a2066f8ef2cee7f1', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01ca6e440e8abce3c836e4269817fa4cf18d3f70', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2f3c6999bb037e4e5665bc4fe5515776b6432e8', 'committer_username': 'btut', 'committer_name': 'Benedikt Tutzer', 'committer_email': None, 'commit_date': datetime.datetime(2015, 1, 10, 19, 4, 36, tzinfo=datetime.timezone.utc)}]",Benedikt Tutzer,10479048,,User,,10,,1,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
17634071,jabref,JabRef/jabref,Java,2468,3519,112,708,20656,471,28,17,"[{'id': 1061914283, 'number': 9166, 'closed': datetime.datetime(2022, 9, 21, 20, 11, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 20, 18, 4, 45, tzinfo=datetime.timezone.utc), 'time_taken': 93981.0, 'time_delta': '1 day, 2:06:21', 'additions': 38, 'deletions': 44, 'state': 'closed'}, {'id': 1045730099, 'number': 9132, 'closed': datetime.datetime(2022, 9, 4, 15, 52, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 15, 25, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1609.0, 'time_delta': '0:26:49', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 992271160, 'number': 8963, 'closed': None, 'created': datetime.datetime(2022, 7, 9, 16, 58, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1589, 'deletions': 2501, 'state': 'open'}, {'id': 992196253, 'number': 8962, 'closed': datetime.datetime(2022, 7, 9, 21, 52, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 9, 9, 40, 3, tzinfo=datetime.timezone.utc), 'time_taken': 43921.0, 'time_delta': '12:12:01', 'additions': 41, 'deletions': 12, 'state': 'closed'}, {'id': 944839604, 'number': 8844, 'closed': datetime.datetime(2022, 5, 23, 19, 51, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 23, 19, 42, 19, tzinfo=datetime.timezone.utc), 'time_taken': 524.0, 'time_delta': '0:08:44', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 902580553, 'number': 8651, 'closed': datetime.datetime(2022, 4, 8, 18, 17, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 7, 10, 38, 48, tzinfo=datetime.timezone.utc), 'time_taken': 113899.0, 'time_delta': '1 day, 7:38:19', 'additions': 27, 'deletions': 9, 'state': 'closed'}, {'id': 835991191, 'number': 8478, 'closed': datetime.datetime(2022, 1, 31, 20, 15, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 31, 10, 42, 28, tzinfo=datetime.timezone.utc), 'time_taken': 34391.0, 'time_delta': '9:33:11', 'additions': 78, 'deletions': 31, 'state': 'closed'}, {'id': 801352938, 'number': 8334, 'closed': datetime.datetime(2021, 12, 17, 19, 40, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 13, 14, 53, 5, tzinfo=datetime.timezone.utc), 'time_taken': 362838.0, 'time_delta': '4 days, 4:47:18', 'additions': 112, 'deletions': 39, 'state': 'closed'}, {'id': 801203521, 'number': 8332, 'closed': datetime.datetime(2021, 12, 19, 19, 3, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 13, 12, 10, 46, tzinfo=datetime.timezone.utc), 'time_taken': 543181.0, 'time_delta': '6 days, 6:53:01', 'additions': 18, 'deletions': 3, 'state': 'closed'}, {'id': 796275955, 'number': 8307, 'closed': datetime.datetime(2021, 12, 7, 19, 55, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 6, 20, 57, 25, tzinfo=datetime.timezone.utc), 'time_taken': 82671.0, 'time_delta': '22:57:51', 'additions': 14, 'deletions': 8, 'state': 'closed'}, {'id': 796198531, 'number': 8304, 'closed': datetime.datetime(2023, 8, 18, 14, 37, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 6, 19, 17, tzinfo=datetime.timezone.utc), 'time_taken': 53551251.0, 'time_delta': '619 days, 19:20:51', 'additions': 93, 'deletions': 23, 'state': 'closed'}, {'id': 757267154, 'number': 8144, 'closed': datetime.datetime(2021, 10, 13, 22, 19, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 13, 10, 43, 59, tzinfo=datetime.timezone.utc), 'time_taken': 41720.0, 'time_delta': '11:35:20', 'additions': 10, 'deletions': 12, 'state': 'closed'}, {'id': 725652890, 'number': 8052, 'closed': datetime.datetime(2021, 10, 30, 14, 42, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 2, 9, 30, 13, tzinfo=datetime.timezone.utc), 'time_taken': 5029910.0, 'time_delta': '58 days, 5:11:50', 'additions': 223, 'deletions': 229, 'state': 'closed'}, {'id': 724608421, 'number': 8050, 'closed': datetime.datetime(2021, 11, 22, 21, 13, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 1, 15, 22, 57, tzinfo=datetime.timezone.utc), 'time_taken': 7105853.0, 'time_delta': '82 days, 5:50:53', 'additions': 413, 'deletions': 195, 'state': 'closed'}, {'id': 723756768, 'number': 8047, 'closed': datetime.datetime(2021, 9, 1, 15, 47, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 20, 51, 12, tzinfo=datetime.timezone.utc), 'time_taken': 68158.0, 'time_delta': '18:55:58', 'additions': 261, 'deletions': 148, 'state': 'closed'}, {'id': 723410069, 'number': 8042, 'closed': datetime.datetime(2021, 8, 31, 15, 7, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 14, 6, 17, tzinfo=datetime.timezone.utc), 'time_taken': 3670.0, 'time_delta': '1:01:10', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 723356046, 'number': 8040, 'closed': datetime.datetime(2021, 8, 31, 15, 7, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 13, 6, 35, tzinfo=datetime.timezone.utc), 'time_taken': 7276.0, 'time_delta': '2:01:16', 'additions': 9, 'deletions': 30, 'state': 'closed'}, {'id': 723324915, 'number': 8039, 'closed': datetime.datetime(2021, 8, 31, 12, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 12, 27, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1545.0, 'time_delta': '0:25:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 723204787, 'number': 8038, 'closed': datetime.datetime(2021, 8, 31, 10, 0, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 9, 49, 57, tzinfo=datetime.timezone.utc), 'time_taken': 632.0, 'time_delta': '0:10:32', 'additions': 9, 'deletions': 8, 'state': 'closed'}, {'id': 723185505, 'number': 8037, 'closed': datetime.datetime(2021, 8, 31, 12, 52, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 9, 24, 18, tzinfo=datetime.timezone.utc), 'time_taken': 12495.0, 'time_delta': '3:28:15', 'additions': 499, 'deletions': 77, 'state': 'closed'}, {'id': 716817672, 'number': 8006, 'closed': datetime.datetime(2021, 8, 31, 12, 8, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 15, 18, 53, tzinfo=datetime.timezone.utc), 'time_taken': 938971.0, 'time_delta': '10 days, 20:49:31', 'additions': 171, 'deletions': 117, 'state': 'closed'}, {'id': 716492476, 'number': 8003, 'closed': datetime.datetime(2021, 8, 20, 10, 58, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 6, 58, 51, tzinfo=datetime.timezone.utc), 'time_taken': 14381.0, 'time_delta': '3:59:41', 'additions': 33, 'deletions': 43, 'state': 'closed'}, {'id': 715807680, 'number': 8002, 'closed': datetime.datetime(2021, 8, 21, 12, 43, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 19, 10, 27, 48, tzinfo=datetime.timezone.utc), 'time_taken': 180959.0, 'time_delta': '2 days, 2:15:59', 'additions': 259, 'deletions': 57, 'state': 'closed'}, {'id': 715367543, 'number': 8001, 'closed': datetime.datetime(2021, 8, 18, 20, 17, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 19, 43, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2043.0, 'time_delta': '0:34:03', 'additions': 7, 'deletions': 8, 'state': 'closed'}, {'id': 713448414, 'number': 7989, 'closed': datetime.datetime(2021, 8, 21, 19, 51, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 13, 39, tzinfo=datetime.timezone.utc), 'time_taken': 454343.0, 'time_delta': '5 days, 6:12:23', 'additions': 347, 'deletions': 125, 'state': 'closed'}, {'id': 708473923, 'number': 7981, 'closed': datetime.datetime(2021, 8, 19, 18, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 8, 18, 58, tzinfo=datetime.timezone.utc), 'time_taken': 727943.0, 'time_delta': '8 days, 10:12:23', 'additions': 77, 'deletions': 93, 'state': 'closed'}, {'id': 708268900, 'number': 7980, 'closed': datetime.datetime(2021, 8, 12, 15, 29, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 5, 52, 53, tzinfo=datetime.timezone.utc), 'time_taken': 121026.0, 'time_delta': '1 day, 9:37:06', 'additions': 36, 'deletions': 0, 'state': 'closed'}, {'id': 704604468, 'number': 7963, 'closed': datetime.datetime(2021, 8, 8, 17, 58, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 11, 4, 43, tzinfo=datetime.timezone.utc), 'time_taken': 284032.0, 'time_delta': '3 days, 6:53:52', 'additions': 1, 'deletions': 14, 'state': 'closed'}, {'id': 700242208, 'number': 7947, 'closed': datetime.datetime(2021, 8, 18, 16, 22, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 12, 7, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1656924.0, 'time_delta': '19 days, 4:15:24', 'additions': 993, 'deletions': 47, 'state': 'closed'}, {'id': 694446645, 'number': 7931, 'closed': datetime.datetime(2021, 7, 21, 16, 10, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 14, 44, 49, tzinfo=datetime.timezone.utc), 'time_taken': 5115.0, 'time_delta': '1:25:15', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 693283743, 'number': 7929, 'closed': datetime.datetime(2021, 8, 21, 18, 47, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 8, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2800564.0, 'time_delta': '32 days, 9:56:04', 'additions': 924, 'deletions': 69, 'state': 'closed'}, {'id': 689930817, 'number': 7907, 'closed': datetime.datetime(2021, 7, 14, 14, 56, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 13, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4135.0, 'time_delta': '1:08:55', 'additions': 1, 'deletions': 6, 'state': 'closed'}, {'id': 668291379, 'number': 7814, 'closed': datetime.datetime(2021, 6, 21, 21, 4, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 15, 49, 2, tzinfo=datetime.timezone.utc), 'time_taken': 882950.0, 'time_delta': '10 days, 5:15:50', 'additions': 350, 'deletions': 0, 'state': 'closed'}, {'id': 663615869, 'number': 7804, 'closed': datetime.datetime(2021, 6, 15, 11, 43, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 14, 27, 27, tzinfo=datetime.timezone.utc), 'time_taken': 681374.0, 'time_delta': '7 days, 21:16:14', 'additions': 169, 'deletions': 9, 'state': 'closed'}, {'id': 662367123, 'number': 7797, 'closed': datetime.datetime(2021, 6, 10, 21, 14, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 5, 9, 45, 6, tzinfo=datetime.timezone.utc), 'time_taken': 473345.0, 'time_delta': '5 days, 11:29:05', 'additions': 74, 'deletions': 33, 'state': 'closed'}, {'id': 416590781, 'number': 6469, 'closed': datetime.datetime(2020, 5, 12, 12, 28, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 9, 7, 53, tzinfo=datetime.timezone.utc), 'time_taken': 12015.0, 'time_delta': '3:20:15', 'additions': 70, 'deletions': 25, 'state': 'closed'}, {'id': 416582405, 'number': 6468, 'closed': datetime.datetime(2020, 5, 12, 9, 2, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 8, 52, 2, tzinfo=datetime.timezone.utc), 'time_taken': 616.0, 'time_delta': '0:10:16', 'additions': 253, 'deletions': 12, 'state': 'closed'}, {'id': 414894706, 'number': 6443, 'closed': datetime.datetime(2020, 5, 12, 12, 23, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 7, 20, 9, 32, tzinfo=datetime.timezone.utc), 'time_taken': 404014.0, 'time_delta': '4 days, 16:13:34', 'additions': 254, 'deletions': 12, 'state': 'closed'}, {'id': 414476954, 'number': 6437, 'closed': datetime.datetime(2020, 5, 7, 6, 51, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 7, 5, 59, 5, tzinfo=datetime.timezone.utc), 'time_taken': 3149.0, 'time_delta': '0:52:29', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 414472222, 'number': 6436, 'closed': datetime.datetime(2020, 5, 7, 6, 52, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 7, 5, 43, 34, tzinfo=datetime.timezone.utc), 'time_taken': 4129.0, 'time_delta': '1:08:49', 'additions': 0, 'deletions': 19, 'state': 'closed'}, {'id': 411706287, 'number': 6381, 'closed': datetime.datetime(2020, 5, 4, 14, 12, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 30, 16, 37, 49, tzinfo=datetime.timezone.utc), 'time_taken': 336880.0, 'time_delta': '3 days, 21:34:40', 'additions': 58, 'deletions': 6, 'state': 'closed'}]"
5797013,grobid,kermitt2/grobid,Java,443,3380,96,58,3370,416,97,26,"[{'id': 710522699, 'number': 814, 'closed': datetime.datetime(2021, 8, 18, 7, 7, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 9, 6, tzinfo=datetime.timezone.utc), 'time_taken': 511291.0, 'time_delta': '5 days, 22:01:31', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 692428042, 'number': 800, 'closed': datetime.datetime(2021, 8, 1, 15, 2, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 9, 16, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1143928.0, 'time_delta': '13 days, 5:45:28', 'additions': 60, 'deletions': 13, 'state': 'closed'}]"
