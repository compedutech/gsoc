pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
674750873,[GSoC] [Design] Go-Style Channels API review," This PR is intended for the design review of the **Go-Style Channels** module

Signed-off-by: Yudhishthira1406 <divyen1406@gmail.com>",False,17954,https://api.github.com/repos/chapel-lang/chapel/pulls/17954,https://github.com/chapel-lang/chapel/pull/17954,closed,125,0,1,10,2,52,1,0,[{'name': 'post-release'}],2021-06-21 17:38:30+00:00,2022-01-13 21:01:34+00:00,17810584.0,"206 days, 3:23:04","[{'comment_id': 656161861, 'comment_body': 'to answer this question we need to know what the semantic differences between the existing `select` statement in Chapel and the operation on Channels.', 'comment_created': datetime.datetime(2021, 6, 22, 12, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 656163801, 'comment_body': ""since we already have `channel` for a file object - https://chapel-lang.org/docs/modules/standard/IO.html#IO.channel - having the name of this be `Channel` seems a bit too subtle to me assuming they are both in the same standard library. \r\n\r\nI think it's interesting to consider if a single `channel` type could support both use cases, but I think that's probably a stretch. @Yudhishthira1406 - have you thought about this question?\r\n\r\nIf they are two different types then we probably need a different term for one or the other."", 'comment_created': datetime.datetime(2021, 6, 22, 12, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 656320673, 'comment_body': 'I think the main differences between select statements in Chapel and the ones used for channel operations are:\r\n\r\n- Select in channels is like if any channel is ready for communication then execute the operation and other instructions associated with it, whereas the `select` statement in Chapel is a conditional statement.\r\n- Select in channels block the execution if none of the specified channels are ready, whereas the `select` statement continues the program execution if none of the cases match.', 'comment_created': datetime.datetime(2021, 6, 22, 15, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 657869902, 'comment_body': '@Yudhishthira1406  You may add these points to the pr itself.', 'comment_created': datetime.datetime(2021, 6, 24, 11, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 657875822, 'comment_body': ""> I think it's interesting to consider if a single `channel` type could support both use cases\r\n\r\nSounds like an interesting approach to me. I think it might make sense if our newly implemented `channels` module somehow also incorporates the functionality of `channel` for a file object.  "", 'comment_created': datetime.datetime(2021, 6, 24, 11, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 662300741, 'comment_body': ""Let's mention that the Go-style select statement provides atomicity and a randomized ordering. Also, can you describe to what extent it is common (or not) for Go programs to use the select statement?"", 'comment_created': datetime.datetime(2021, 7, 1, 13, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 662354812, 'comment_body': ""Also Rust's crossbeam package supports the same ideas, right? How do they manage `select` statements?\r\n\r\nLooks like they provide the Go operation with a macro:\r\n\r\nhttps://docs.rs/crossbeam-channel/0.5.1/crossbeam_channel/macro.select.html\r\nhttps://docs.rs/crossbeam-channel/0.5.1/crossbeam_channel/struct.Select.html"", 'comment_created': datetime.datetime(2021, 7, 1, 14, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 663124858, 'comment_body': '> Also, can you describe to what extent it is common (or not) for Go programs to use the select statement?\r\n\r\n`select` is a powerful way to deal with multiple channel operations, but I cannot find any articles related to the use of `select` in Go.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 663127284, 'comment_body': 'Is it common in example code from your favorite Go learning materials?', 'comment_created': datetime.datetime(2021, 7, 2, 16, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 663131624, 'comment_body': 'Yeah, select statements are described along with channels in most of the cases.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 663191828, 'comment_body': ""So that's something you can mention in the document."", 'comment_created': datetime.datetime(2021, 7, 2, 18, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 663941431, 'comment_body': '@mppf I have made the changes\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 13, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 664578251, 'comment_body': ""Thanks - can you add to the key points about select that it's commonly used in Go code working with channels?"", 'comment_created': datetime.datetime(2021, 7, 6, 13, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 664580107, 'comment_body': ""My understanding is that we're thinking that we wouldn't want them to be the same at least because having typed elements is important for Go channels but besides there are other functionality differences."", 'comment_created': datetime.datetime(2021, 7, 6, 13, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 671613426, 'comment_body': 'I personally feel `crossbeam` might distinguish it from being confused with IO Channels.', 'comment_created': datetime.datetime(2021, 7, 17, 5, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671614100, 'comment_body': 'They certainly can be distinguished this way, but this `select` is more aligned with the `select` system call, whereas the other one we have right now is a conditional statement. So the idea behind using `select` as a conditional statement, I think, is the one that needs further deliberation because the first thought when someone familiar with system calls hears `select` he probably thinks about the system call one and not the conditional. Maybe deprecate the previous syntax to avoid future confusion?', 'comment_created': datetime.datetime(2021, 7, 17, 5, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671735096, 'comment_body': '@mppf and I discussed this a bit a few weeks ago, and actually liked the juxtaposition of using the same keyword for both contexts, as they seemed similar ""do this when this happens"" and not likely to conflict directly in practice (one requires an expression that will be evaluated and matched against cases; the other has nothing to evaluate, and simply matches).  So I wouldn\'t shy away from it outright any more than we shied away from using `if` for both compiler-folded and normal conditionals; or mixing static type/param information with execution-time value information in argument lists.  But I agree that it\'s definitely a bit subtle, and that we should keep an eye on it to see whether it leads to confusion or has a greater potential for confusion than Michael or I are giving it credit for.', 'comment_created': datetime.datetime(2021, 7, 17, 19, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671735346, 'comment_body': ""~A classic question here:  Are we likely to end up similar enough to Go's channels that it makes sense to lean on Go's documentation outright here, rather than describing Chapel's channels outright?  (in which case we might link to the Go channels as a strong source of inspiration rather than suggesting that the best way to learn about Chapel channels is to go read Go's documentation)?~  [edit: oh wait, never mind.  I was reading this document as though it was the documentation to the end-user about the Chapel Channel module rather than what I now understand it to be intended as: a document for Chapel developers to review and debate.  Sorry for my misunderstanding].\r\n\r\nAlso, there's a missing period at the end of this hyperlink (which seems more problematic in the rendered documents than in these ones."", 'comment_created': datetime.datetime(2021, 7, 17, 19, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671735453, 'comment_body': 'Grammar:  ""it enables sending"" or ""it enables the user to send""', 'comment_created': datetime.datetime(2021, 7, 17, 19, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671735690, 'comment_body': 'What sorts of conditions would result in the operation not being successful?', 'comment_created': datetime.datetime(2021, 7, 17, 19, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671735938, 'comment_body': '""arranged"" in a random order (suggesting to me that their order in the source code is random)? or ""evaluated""/""selected from"" in a random order (and: just among those that can execute?  or is the randomness applied to all of them to see whether they can execute or not?)\r\n\r\ngrammar: ""anyone"" -> ""any one""', 'comment_created': datetime.datetime(2021, 7, 17, 19, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671736151, 'comment_body': ""I tend to think that all modules should start out as packages until they reach a certain level of maturity / number of use cases / reliance that might suggest it should be promoted to a standard module.  That said, the interaction with language syntax through the select statement _might_ make it more appropriate as a standard module than the typical module unless the expanded notion of select statement isn't specific to channels and channels just happen to have the property that it relies upon to get the systems-y definition."", 'comment_created': datetime.datetime(2021, 7, 17, 19, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671736411, 'comment_body': ""Would we want to unify IO channels with these channels in some way?  (probably a question for @mppf).  If not, how would we describe their differences.\r\n\r\nWhatever we call it, we should use an initial-capital name.  If we used a term more like Channels, I'd spell out the word rather than using `chan` (which feels like an unnecessary abbreviation to me, and maybe an unfortunate one in the era of 4chan and the like).  If we decided to make this a standard module, we might think about whether it should be merged with some other module (like I/O, e.g.)\r\n\r\nI'd start by focusing more on the semantics, behavior, implementation, and type and procedure names than the module name in any case, since it's easy enough to rename modules or move code between modules, particularly when they're just starting out.\r\n\r\n[edit: Oh, and I meant to say, but crossbeam sounds very special / non-standard / near-proprietary to me somehow, so unless that's a term that is taking off more broadly, it gives me a bit of a pause.  If I wanted to use a term that suggested more than 1:1 communication, I'd probably use crossbar instead]."", 'comment_created': datetime.datetime(2021, 7, 17, 19, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671736665, 'comment_body': ""I'd be inclined to make it a record or a record-wrapped class (note that records are passed by reference by default, so passing them isn't problematic, but assigning between them may be, depending on what you'd like the semantics to be).\r\n\r\nI don't have an opinion on the name yet, and would like to hear more from Michael about the ability / inability to combine these with I/O channels or distinguish them better before weighing in."", 'comment_created': datetime.datetime(2021, 7, 17, 19, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671736830, 'comment_body': 'Should this have said ""blocking""?  (I\'m having trouble describing Chapel\'s current `select` statement as ""non-blocking"" if that\'s what we\'re talking about).', 'comment_created': datetime.datetime(2021, 7, 17, 19, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671737088, 'comment_body': ""I feel slightly nervous about introducing new operators and don't immediately find these notations obvious putting myself in the shoes of someone who's never seen this before (e.g., how does `:=` differ from `=`?  What does `<-` mean?).  For that reason, I might start by seeing what a method-based syntax would look like in part to understand what other options we have, and in part to ease people into understanding the semantics (since methods will have names and argument names that may make meaning clearer).  Then, as we get the design right in that approach, we can decide whether introducing operators would make the methods even clearer, and what those operators should look like / how they should relate to current Chapel operators."", 'comment_created': datetime.datetime(2021, 7, 17, 19, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671737735, 'comment_body': 'Continuing with the above comment now that I\'ve read the whole document:  For me a big question is ""in the no-expression `select` statement [this new systems-y one we\'re talking about], what is the quality/property of the expressions that follow each of the `case` statements that makes them legal / reasonable?""  For example, in a normal `select` statement, I might say that the property is ""each of the case statements has an expression whose type matches the type of the expression that followed the `select` keyword.""  My intuition in this new case (as someone who hasn\'t done much of this event-driven systems programming before) is that perhaps each one has some sort of ""system event"" property (or type?  or ...?)?  Or is it even simpler than that—does each simply evaluate to true or false (or something similarly simple and primitive) and the evaluator just chooses a random case that evaluates to `true` to execute it?\r\n\r\nThe reason I ask this is that I\'m curious whether there are other uses for this systems-y select statement that would cause us to want to use it apart from for these Go-like channels.  And if so, what a type or capability would have to do in order to be a legal condition.\r\n\r\nOne other thought on this general topic is that I find myself wondering about the role of asynchrony in this select statement given that Chapel also has a very strong story for asynchronous execution.  E.g., should the asynchrony be explicit in the statement somehow, either in or around the `select` keyword, or perhaps in the `when` clauses themselves?  Or is the synchronous vs. asynchronous behavior important enough that we should call it out with some sort of new keyword like `coselect` or `select begin` or ...?', 'comment_created': datetime.datetime(2021, 7, 17, 20, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 672091270, 'comment_body': '> what is the quality/property of the expressions that follow each of the `case` statements that makes them legal / reasonable?\r\n\r\nI think the select statement could be extended to handle events (apart from channels), like a file read/write, operations on atomic/sync/single variables, etc. \r\n\r\n\r\n\r\n\r\n> does each simply evaluate to true or false (or something similarly simple and primitive) and the evaluator just chooses a random case that evaluates to `true` to execute it?\r\n\r\nSuppose we are thinking like each case to be evaluated to `true` or `false`. It would be better described as the case which first evaluates to true gets executed. If there are more than one `true` cases, then yes, one of them is chosen randomly and gets executed.', 'comment_created': datetime.datetime(2021, 7, 19, 8, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 672091912, 'comment_body': 'Yeah, I think the ""evaluated"" would be a more appropriate word here. In the implementation, the cases are first checked in a random order if they are ready or not (if ready, then that case is executed). It is done because if we run a particular `select` block multiple times, it should not happen that at each iteration, only one case is getting executed each time.', 'comment_created': datetime.datetime(2021, 7, 19, 8, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 672092220, 'comment_body': 'If the channel is closed and its buffer is also empty, `recv` will return `false` instead of waiting for data.', 'comment_created': datetime.datetime(2021, 7, 19, 8, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 672102623, 'comment_body': 'I think the term ""blocking"" would have a slightly different meaning here. Channel\'s select statement can be termed as non-blocking when it exits without waiting to execute any of the cases(i.e., they are not ready). Chapel\'s select statement will also behave the same way if none of the cases match.', 'comment_created': datetime.datetime(2021, 7, 19, 8, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 672367315, 'comment_body': '> should the asynchrony be explicit in the statement somehow, either in or around the `select` keyword, or perhaps in the `when` clauses themselves? Or is the synchronous vs. asynchronous behavior important enough that we should call it out with some sort of new keyword like `coselect` or `select begin` or ...?\r\n\r\nIf we use the existing `select` syntax, the statement would block or not will be decided by the `otherwise` case.   I like the idea of using different keywords for two cases 😃. I think the `coselect` and `select begin` keywords align with the differences between `cobegin` and `begin` keywords.', 'comment_created': datetime.datetime(2021, 7, 19, 14, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 672381028, 'comment_body': 'Using them as a record-wrapped class seems a better choice to me. Though copy-initialization would be rare in the case of channels, but ideally, assigning between them should not create new copies.', 'comment_created': datetime.datetime(2021, 7, 19, 15, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 673152482, 'comment_body': ""I would think that `coselect` / `select begin` would be creating tasks though? And they don't (they just block). (In the straightforward migration of the Go design, when there is an `otherwise`, it won't block, but if there isn't one, it will. But neither of these create new tasks).\r\n\r\nAdditionally it was my understanding that the atomicity guarantee of the Go-style `select` would present challenges if the interface is just to evaluate each case to `true` or `false`. I wonder if it would be better to think about each of these `select` statements as something more like a context manager (see #17965) . What I see in common there is that the return type of the expression (i.e. the type of `myResource` in `manage myResource in createSomeContex()`) isn't necessarily the type of the thing managing the context.\r\n\r\nThat leads me to thinking that the type of `a <~ b` (when used outside of a select) isn't necessarily the same as the type of the thing that the implementation of `select` is working with."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673160965, 'comment_body': ""The I/O channels and these Go channels seem pretty different, on the surface, in terms of several key properties:\r\n * Go-style channels will be both readable and writable but I/O channels are either reading or writing but not both\r\n * The normal use case for the Go-style channel is to moved typed data (e.g. ints or strings or whatever) but the I/O channel moves bytes (i.e. everything is serialized). In this way they would be more similar to ItemReader / ItemWriter that is in the library today.\r\n  * Go-style channels have some important concurrency / atomicity properties that might be difficult to retrofit on to the I/O channels\r\n\r\nWhile the names are related (and I did imagine we might use a `channel` for cross-locale communication, say), to me the part about moving typed data makes them different enough to justify a different name. Of course, we could try to make all `channel`s have an `eltType` and then try to expand `channel` to have the properties needed for Go-style channels but - Why? Is it just because we couldn't come up with a better name? It seems to me that these two types have pretty different use cases.\r\n\r\nSo it's my position that these should be different types and we need to find a solution to the name collision. I would personally be fine with `crossbeam` or `crossbar` especially if those terms are used to mean this in other projects. We can update the documentation for `channel` to point to the new type in case there is anybody searching and ending up in the wrong place."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673162620, 'comment_body': ""I'd also lean towards making them records, FWIW, mostly because it fits in better with other types in the standard library."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673165306, 'comment_body': ""I agree starting with named functions sounds reasonable. If we need operators, I'd lean towards creating one-sided versions of the I/O operator `<~>` so it would be `val <~ chan` to `recv`.\r\n\r\nTo me, I think whether or not we need operators has to do with how the `select` statement is going to work. Will it be possible to implement clearly with named functions? I think we will learn more as we get further in designing and implementing it."", 'comment_created': datetime.datetime(2021, 7, 20, 14, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673758868, 'comment_body': ""I also think unifying them with the IO module would create more confusion, as they don't perform any IO. \r\nI also like the names `CrossBeam` or `CrossBar` (given that module names would start with a capital letter)."", 'comment_created': datetime.datetime(2021, 7, 21, 8, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 674899966, 'comment_body': 'The `cross` names don\'t work for me because they imply structural complexity rather than just something that allows moving a substance from once place to another. (And because a ""crossbar"" is an actual thing: in hardware, a kind of multiplexed switch.) I\'m not fond of `channel` (however capitalized) for the module or type or even concept here, because it implies a similarity with IO channels which isn\'t present. But it\'s the right sort of idea, so some similar word might work. `Pipe` is close, because these do have certain similarities with POSIX pipes though obviously they\'re also not identical. Do any of `conduit` (probably out because of potential confusion with the GASNet use of that term), `hose`, `duct`, or `tube` work for folks?', 'comment_created': datetime.datetime(2021, 7, 22, 15, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 674920552, 'comment_body': 'I\'d start with procs also. To me this doesn\'t (yet) seem ""core"" enough to justify syntactic changes. (I think I can envision implementing this entirely in terms of sync vars and procs, though the result would be clunky in some ways.)', 'comment_created': datetime.datetime(2021, 7, 22, 15, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 676811691, 'comment_body': 'It occurs to me that we might be able to rename the I/O `channel` to `reader` / `writer` - I bring this up in issue #18112. Interested in feedback.\r\n\r\nRegarding `pipe` / `conduit` / `hose` / `duct` / `tube` - I find `conduit` relatively appealing of these.', 'comment_created': datetime.datetime(2021, 7, 26, 17, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 676812772, 'comment_body': '@gbtitus - we might need syntactic changes to have the select feature on the new channels work reasonably well. Previously I had thought we could implement it with sync variables but there are some tricky pieces about ordering and @Yudhishthira1406 convinced me that it was more complicated.', 'comment_created': datetime.datetime(2021, 7, 26, 17, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679176286, 'comment_body': 'Yeah, `Pipe`  seems like an interesting choice to me, but if we could rename the I/O `channel`, that would be best.', 'comment_created': datetime.datetime(2021, 7, 29, 13, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 683609824, 'comment_body': 'Since the terms `Pipe`([link](https://gobyexample.com/channels)) and `Conduit`([link](https://tour.golang.org/concurrency/2)) are used for describing channels in Go official docs, I think both would work. But if `Pipe` would create confusion with POSIX pipes, I think `Conduit` would be more suitable in that case.', 'comment_created': datetime.datetime(2021, 8, 5, 16, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 683620731, 'comment_body': ""It occurred to me last night that `channel` is what the conveyances are called in [Communicating Sequential Processes](https://en.wikipedia.org/wiki/Communicating_sequential_processes), so I've changed my mind and that's now my favorite, assuming our I/O `channel` can be renamed. `Conduit` has the conflict I noted, in that GASNet (our most-portable communication configuration) uses that for the embodiments of its abstract communication model."", 'comment_created': datetime.datetime(2021, 8, 5, 16, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 684470771, 'comment_body': ""@mppf / @Yudhishthira1406 : Sorry for the delayed response due to vacation.  To make sure I'm understanding:\r\n\r\n* upon reaching a `select` statement, only one case at most will be executed, synchronously\r\n  * if no cases apply and an `otherwise` exists, the `otherwise` will run; otherwise, the statement will block until a case does apply\r\n  * if multiple cases apply, one is chosen randomly\r\n* after that case is executed, execution will continue with the next statement after the `select` statement\r\n* if the programmer wants multiple cases to be handled, they'd need to put the `select` within a loop\r\n* if the programmer wanted asynchrony, they'd need to express that explicitly (e.g., prefixing the `select` with a `begin` or possibly within the resulting action, if that's legal?)\r\n\r\nHave I got all that right?\r\n"", 'comment_created': datetime.datetime(2021, 8, 6, 19, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 684798887, 'comment_body': ""Yeah, that's right. :v:\r\nMoreover, I have made a [document](https://github.com/Yudhishthira1406/Chapel-Channel/blob/select-deq/SELECT.md) demonstrating how the compiler would understand the select statement (if we used a variation of Chapel's select statement). I thought it was worth posting here."", 'comment_created': datetime.datetime(2021, 8, 8, 16, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 697131870, 'comment_body': 'I think record or class is a question worth clarifying here. Managing the lifetime of internal objects and the behaviour of copied objects would be interesting.', 'comment_created': datetime.datetime(2021, 8, 27, 3, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 697466208, 'comment_body': 'Yeah AFAIK we are planning to make it a record (that might contain a class) see https://github.com/chapel-lang/chapel/pull/17954#discussion_r671736665', 'comment_created': datetime.datetime(2021, 8, 27, 14, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 717002459, 'comment_body': '>  ""in the no-expression select statement [this new systems-y one we\'re talking about], what is the quality/property of the expressions that follow each of the case statements that makes them legal / reasonable?""\r\n\r\nI think this quality/property is\r\n 1. The function called is some sort of blocking operation waiting for an external event\r\n 2. The implementation of that function and/or of `select` supports that function.\r\n \r\nAt a high level, it seems fairly clear to me that `accept` / `send` and `recv` in Socket programming would make sense as select statements\r\n\r\n``` chpl\r\nselect {\r\n  when myTcpSock.accept() {\r\n  }\r\n  when myUdpSock.send(x1) {\r\n  }\r\n  when myUdpSock.recv(x2) {\r\n  }\r\n}\r\n```\r\n\r\nHere I would imagine that we use some sort of strategy like the Context Manager to get the `select` implementation able to work with various types/functions defined in the library.', 'comment_created': datetime.datetime(2021, 9, 27, 19, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 717006577, 'comment_body': 'Since this function returns `false` if the channel is closed and the buffer is empty, we need to be able to default-initialize the returned type. But, some types, such as `owned C` for a class C, do not support default initialization.\r\n\r\nWe can support channels that store values that cannot be default initialized if we make this `throw` instead of returning `false`. At that rate, you could make this function just be `proc recv(): eltType throws`.\r\n\r\n@Yudhishthira1406 - I would like to know if the returning from `recv` is important in cases you have seen/written and if a try/catch for these cases would be awkward. I think we should consider supporting a no-parens `proc recv()` in addition to or instead of the `recv(out value): bool` version.', 'comment_created': datetime.datetime(2021, 9, 27, 20, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 717013923, 'comment_body': 'I suppose that one way to handle the plugability would be for these functions to `throw` if the operation is not handled. The `select` implementation will try them in a random order and execute the body of the first one that succeeds. I think the compiler could generate some kind of class / function object / etc to handle running these expressions.', 'comment_created': datetime.datetime(2021, 9, 27, 20, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}]","[{'commit_sha': 'd25df462458394babe8ce3aa6d4834292c7910f5', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698d77ac93c7913786352436232fa56cd8872d5e', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63f6e6a278bc7c99dc2a93608513d6ba0e866d06', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '169660d198ea632df5e825399f532ef9084f652b', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ae0d908b3d241e05f9494ddc59f3260888dd29', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c7f45b58fba22cb9ea1ab0e7ae91d9ddc9ae15', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13c814d6a916d1c7272b00bac03691e24a9dac7c', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab90fe65938440d6d03a204a867c8de5a799f094', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2780012c986c7f239a07d27162e1e7cee4336d2a', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7c1115b04832df344793911ef1f4f64cfd1742a', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}]",Divye Nayyar,55523247,,User,,15,,2,4
704921377,[GSoC] Go-Style Channels,"This PR contains the implementation and tests for Go-style Channels.
It also contains implementation and tests for `select` runtime functions.

- [x] Performance testing-- see #18432

NOTE : The source location and module name may change subject to design discussions in #17954 ",True,18168,https://api.github.com/repos/chapel-lang/chapel/pulls/18168,https://github.com/chapel-lang/chapel/pull/18168,closed,998,0,35,16,11,82,1,0,[{'name': 'post-release'}],2021-08-05 18:12:50+00:00,2022-01-13 18:02:27+00:00,13909777.0,"160 days, 23:49:37","[{'comment_id': 690998942, 'comment_body': 'I think this comment should be inside the class. Explanatory comments with `no doc` pragma should go inside the class/method. For example ->\r\n\r\n```chpl\r\npragma ""no doc""\r\nclass Waiter {\r\n    /*\r\n    A class used to maintain the properties of suspended tasks.\r\n    */\r\n   or \r\n   // A class used to maintain the properties of suspended tasks.\r\n}\r\n```\r\nIf it is a single line comment just for developer info, u can use `//` instead of `/* */`', 'comment_created': datetime.datetime(2021, 8, 18, 8, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691000120, 'comment_body': 'This goes for all other  explanatory comments below.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691011814, 'comment_body': 'Can we make it `selectId` instead of `selID`? The `D` in `ID` should be small following the camel case. ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691011949, 'comment_body': 'This goes for all other explanatory comments below.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691013384, 'comment_body': '`selDone` -> `selectDone`, `caseID` -> `caseId`', 'comment_created': datetime.datetime(2021, 8, 18, 8, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691017500, 'comment_body': ""Shouldn't it be `val = c_ptrTo(value)` like in the other initializer? Variable`val` is a pointer right?  Do the type of `val` change in the overloaded initializer? "", 'comment_created': datetime.datetime(2021, 8, 18, 8, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691022427, 'comment_body': 'Can we use the `isEmpty` method here?', 'comment_created': datetime.datetime(2021, 8, 18, 8, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691022984, 'comment_body': 'Can we use the `isEmpty` method here?', 'comment_created': datetime.datetime(2021, 8, 18, 8, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691028598, 'comment_body': 'You can remove this comment, rather I would suggest you to add `throws` to this method and write a meaningful error message with a suitable runtime error type. For example ->\r\n\r\n```chpl\r\n        proc deque() : unmanaged Waiter(eltType) throws {\r\n            var waiter : unmanaged Waiter(eltType)?;\r\n            if isEmpty() {\r\n                throw new owned SomeRuntimeErrorType(""Cannot deque an empty queue"");\r\n            }\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 8, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691031881, 'comment_body': ""We can use a simple `else` here because it is the only case possible. But I like you being extra safe :P, so let's keep it like this."", 'comment_created': datetime.datetime(2021, 8, 18, 8, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691033623, 'comment_body': 'Reviewed this by presuming that we are only interested in dequeuing waiters from the front.  ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691034289, 'comment_body': 'We have to finalize a name for this class right?', 'comment_created': datetime.datetime(2021, 8, 18, 8, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691035152, 'comment_body': 'What is the purpose of using `no doc` pragma with these variables? I am not getting it.', 'comment_created': datetime.datetime(2021, 8, 18, 8, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691036492, 'comment_body': 'Can we change `sendidx` to `sendIdx` and `recvidx` to `recvIdx`?', 'comment_created': datetime.datetime(2021, 8, 18, 8, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691044697, 'comment_body': 'Do we need this method? This method is simply calling the overloaded method when the user calls `recv(val)`. You can achieve this functionality using a single `recv` making `selected` default to `false`. For example ->\r\n\r\n```chpl\r\n        proc recv(out val : eltType, selected : bool = false) : bool {\r\n            if !selected then lock();\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691046880, 'comment_body': 'Same goes for the `send` method below.', 'comment_created': datetime.datetime(2021, 8, 18, 9, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691049561, 'comment_body': 'Can you briefly explain the functionality of this method? It would be helpful if you can explanatory comments.\r\n\r\nPS - We can discuss this function in the meeting tomorrow.', 'comment_created': datetime.datetime(2021, 8, 18, 9, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691051281, 'comment_body': 'Can we rephrase this error message to something better -> like `Trying to close a closed channel` or something even more better you can think of?', 'comment_created': datetime.datetime(2021, 8, 18, 9, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691052868, 'comment_body': '`SelBaseClass` -> `SelectBaseClass` ', 'comment_created': datetime.datetime(2021, 8, 18, 9, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 691054032, 'comment_body': 'U can make this change everywhere. Like `Select` is more explanatory so ... :P ', 'comment_created': datetime.datetime(2021, 8, 18, 9, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 693095469, 'comment_body': 'Remove extra comments.', 'comment_created': datetime.datetime(2021, 8, 20, 17, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 693096587, 'comment_body': 'Add new line.', 'comment_created': datetime.datetime(2021, 8, 20, 17, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 694562943, 'comment_body': 'Yes, the second initializer is used by select statements which passes the pointer to the variable.\r\n', 'comment_created': datetime.datetime(2021, 8, 24, 7, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 694565667, 'comment_body': ""This function is also used specifically by select statements. It may happen that the waiter is already dequed from the queue. In that case we don't have to do anything."", 'comment_created': datetime.datetime(2021, 8, 24, 7, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 694566322, 'comment_body': 'Yes, and another thing is that we might use a record which would be a wrapper around the `chan` class.\r\n', 'comment_created': datetime.datetime(2021, 8, 24, 7, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 694567510, 'comment_body': 'I think we can discuss whether to keep them in the documentation or not, keeping in mind that the user should not change these variables.', 'comment_created': datetime.datetime(2021, 8, 24, 7, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 694569807, 'comment_body': 'This was done because there is no role of `selected` parameter for the user, so I thought that it would be better not to include it in the documentation.', 'comment_created': datetime.datetime(2021, 8, 24, 7, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 694586945, 'comment_body': ""I think it would be better to remove this `if` because this situation doesn't occur."", 'comment_created': datetime.datetime(2021, 8, 24, 7, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 694993132, 'comment_body': 'Cools', 'comment_created': datetime.datetime(2021, 8, 24, 16, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 697149186, 'comment_body': '`selected` seems to determine whether this function is blocking. Maybe `blocking` is a more descriptive name for this parameter as well as ones in other functions. WDYT? @Aniket21mathur @Yudhishthira1406 ', 'comment_created': datetime.datetime(2021, 8, 27, 4, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 697153810, 'comment_body': ""Can we test chan with other types of classes, like `shared`, and some nested classes? I wonder how pointers and refs work with this. If you think of any situation that chan can't handle, considering performing compile-time or runtime checks to prevent users fall into that."", 'comment_created': datetime.datetime(2021, 8, 27, 5, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 699543084, 'comment_body': 'Thanks for pointing that out! I also think that there would be some changes because of this. I would make sure to add these tests.', 'comment_created': datetime.datetime(2021, 8, 31, 17, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 701025648, 'comment_body': 'I chose `selected` because it is only used internally by the `select` statement, but yeah, `blocking` would also be right here. We could change it if all others agree on the same.', 'comment_created': datetime.datetime(2021, 9, 2, 12, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 701102102, 'comment_body': 'I agree with @rapiz1 here, `blocking` will be a better fit here.', 'comment_created': datetime.datetime(2021, 9, 2, 13, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aniket21mathur', 'type': 'User'}, {'comment_id': 709144563, 'comment_body': 'I think that `notify` might be a better name for this method', 'comment_created': datetime.datetime(2021, 9, 15, 12, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709144972, 'comment_body': 'Is the use of `c_ptr` here a workaround for not having `ref` fields? If so, can you add a comment saying that?', 'comment_created': datetime.datetime(2021, 9, 15, 12, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709146774, 'comment_body': 'Can we name it WaiterQueue ?', 'comment_created': datetime.datetime(2021, 9, 15, 12, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709146945, 'comment_body': 'Can we name it `enqueue` ?', 'comment_created': datetime.datetime(2021, 9, 15, 12, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709147053, 'comment_body': 'Can we name it `dequeue` ?', 'comment_created': datetime.datetime(2021, 9, 15, 12, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709147156, 'comment_body': 'Can we name it `dequeue` ?', 'comment_created': datetime.datetime(2021, 9, 15, 12, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709148441, 'comment_body': 'This sets waiter.next to nil, but waiter.prev might be left with a value. Additionally, if clearing these prev/next pointers is important, should it be also done in the other cases of the following function to dequeue a specific entry?', 'comment_created': datetime.datetime(2021, 9, 15, 12, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709152032, 'comment_body': 'It seemed clear enough to me that we want a record-wrapped class per the discussion in https://github.com/chapel-lang/chapel/pull/17954#discussion_r671736665 . One thing that might not be clear is - what happens when you assign one of these records? I suppose that if we want it to behave like `owned` then using a class here is better. But if having them be reference counted is OK, we can easily make a record wrapper that contains a `shared chan`.', 'comment_created': datetime.datetime(2021, 9, 15, 12, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709156443, 'comment_body': 'Probably best to write `var channel : borrowed chan(eltType)` here', 'comment_created': datetime.datetime(2021, 9, 15, 12, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709159289, 'comment_body': ""At this point it would be good to put a block comment that explains a bit about the select statement & how it is implemented here. I'd like to request that you also include the contents of https://github.com/Yudhishthira1406/Chapel-Channel/blob/select-deq/SELECT.md in that comment so that we have the details here next to the implementation."", 'comment_created': datetime.datetime(2021, 9, 15, 12, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709431230, 'comment_body': 'In this case, the waiter.prev would already be `nil` because the waiter is at the front of the queue. Clearing the pointers is important in this function because when calling the `dequeue` with parameters, the specified waiter may be already dequeued from the queue. In that case, the function would not do anything.', 'comment_created': datetime.datetime(2021, 9, 15, 17, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 709508321, 'comment_body': ""Right, in that case, shouldn't the `dequeue` with parameters also clear these fields?"", 'comment_created': datetime.datetime(2021, 9, 15, 19, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 709509094, 'comment_body': 'I.e. `proc dequeue(waiter)` could end with `waiter.prev = nil; waiter.next = nil;`', 'comment_created': datetime.datetime(2021, 9, 15, 19, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 717004052, 'comment_body': ""You should use the `in` intent on `val`. In that case, you don't need the `var value = val` below."", 'comment_created': datetime.datetime(2021, 9, 27, 20, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 717004169, 'comment_body': ""Let's use `in` intent instead of `ref` for `val`."", 'comment_created': datetime.datetime(2021, 9, 27, 20, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 726504791, 'comment_body': '""a channel""', 'comment_created': datetime.datetime(2021, 10, 11, 18, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726505044, 'comment_body': '""no other values/data""', 'comment_created': datetime.datetime(2021, 10, 11, 18, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726511064, 'comment_body': ""Then, I'd find it clearer if the argument was `value: c_ptr`."", 'comment_created': datetime.datetime(2021, 10, 11, 19, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726512208, 'comment_body': 'space after `bool`', 'comment_created': datetime.datetime(2021, 10, 11, 19, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726513107, 'comment_body': ""Can you add a comment explaining that?\r\n\r\nI would just add an\r\n\r\n```chapel\r\nelse {\r\n  // This function is also used specifically by select statements.\r\n  // It may happen that the waiter is already dequed from the queue.\r\n  // In that case we don't have to do anything.\r\n}\r\n```"", 'comment_created': datetime.datetime(2021, 10, 11, 19, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726513415, 'comment_body': 'I very much prefer if the docs were indented like\r\n\r\n```chapel\r\n/*\r\n  Comment here\r\n*/\r\n```', 'comment_created': datetime.datetime(2021, 10, 11, 19, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726513604, 'comment_body': 'Drop empty line', 'comment_created': datetime.datetime(2021, 10, 11, 19, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726514248, 'comment_body': 'drop empty line', 'comment_created': datetime.datetime(2021, 10, 11, 19, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726516590, 'comment_body': ""I don't recall how much these `recv` and `send` interfaces were discussed, but I'll just note that they kind of feel similar to discussions we've had about IO module's `read` here: https://github.com/chapel-lang/chapel/issues/18496\r\n\r\nIn other words, I questioned for a bit whether we need `recv([ref] val: eltType)` and/or `recv() throws: eltType`"", 'comment_created': datetime.datetime(2021, 10, 11, 19, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726517081, 'comment_body': ""The `in` intent here has similar implications as above. If the data is large we're copying it into the method. Which maybe the right thing given the concurrent nature of the interface here. But should there be a way to pass things by reference?"", 'comment_created': datetime.datetime(2021, 10, 11, 19, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726517799, 'comment_body': 'Why?', 'comment_created': datetime.datetime(2021, 10, 11, 19, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726518868, 'comment_body': 'Can all this be a method on `Waiter`?', 'comment_created': datetime.datetime(2021, 10, 11, 19, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726519179, 'comment_body': 'why `unmanaged`?', 'comment_created': datetime.datetime(2021, 10, 11, 19, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726519514, 'comment_body': 'Can you put this in a `{ }` for symmetry?', 'comment_created': datetime.datetime(2021, 10, 11, 19, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726519590, 'comment_body': 'drop empty lines', 'comment_created': datetime.datetime(2021, 10, 11, 19, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726520099, 'comment_body': 'Similarly, I imagine a helper here can help make this line `if recvWaiters.front!.update() {` or something', 'comment_created': datetime.datetime(2021, 10, 11, 19, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726520342, 'comment_body': 'again, why `unmanaged?`', 'comment_created': datetime.datetime(2021, 10, 11, 19, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726520763, 'comment_body': ""I was thinking it had something to do with `Waiter`'s deinitializer, but that doesn't seem to be the case..."", 'comment_created': datetime.datetime(2021, 10, 11, 19, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726520948, 'comment_body': 'drop empty line', 'comment_created': datetime.datetime(2021, 10, 11, 19, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726521439, 'comment_body': ""you haven't used `()` for while/ifs so far. make sure that you're consistent.\r\n\r\nMy preference would be no `()` throughout, but I'm OK as long as you're consistent."", 'comment_created': datetime.datetime(2021, 10, 11, 19, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726521659, 'comment_body': 'another case where a helper could help', 'comment_created': datetime.datetime(2021, 10, 11, 19, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726521778, 'comment_body': '... and another', 'comment_created': datetime.datetime(2021, 10, 11, 19, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726522291, 'comment_body': 'add empty line before', 'comment_created': datetime.datetime(2021, 10, 11, 19, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726522871, 'comment_body': 'I prefer this to be a primary method. (defined inside the record definition)', 'comment_created': datetime.datetime(2021, 10, 11, 19, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726524349, 'comment_body': '""channels""', 'comment_created': datetime.datetime(2021, 10, 11, 19, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726525720, 'comment_body': ""Shouldn't you be printing `x` and `ok` here?"", 'comment_created': datetime.datetime(2021, 10, 11, 19, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726526615, 'comment_body': 'break this line\r\n', 'comment_created': datetime.datetime(2021, 10, 11, 19, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 726527627, 'comment_body': 'I find these stress/performance tests useful, but could you add some correctness checks to them?', 'comment_created': datetime.datetime(2021, 10, 11, 19, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 750318827, 'comment_body': ""Regarding the `recv(out)` part, see https://github.com/chapel-lang/chapel/pull/17954/files#r717006577 . However I don't think it should hold up this PR.\r\n\r\nRegarding the `in` intent, I think that using `in` intent here is good because the channel will always (in normal operation) store the argument in the channel. With the `in` intent here, we can avoid copies completely if the argument is e.g. a value returned from a function. In contrast, if we used `const ref` here, the body of `send` would always have to copy in to the channel's buffer."", 'comment_created': datetime.datetime(2021, 11, 16, 14, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 755400957, 'comment_body': '@e-kayrakli It is difficult to add correctness checks to these tests as the operations are performed in random order.', 'comment_created': datetime.datetime(2021, 11, 23, 18, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Yudhishthira1406', 'type': 'User'}, {'comment_id': 755415338, 'comment_body': ""I think it is valuable to add correctness tests for these. But it may be more difficult than I imagined. Random order is an issue, but another is that if you make changes to write stuff out etc, then you won't be getting the same behavior because of the additional synchronization implied by that output.\r\n\r\nUnless the output you get is garbled due to parallelism, we can imagine adding a prediff to `sort` the output first. We have some tests that do that.\r\n\r\n@mppf -- does it worth the effort to add correctness versions of these contention tests in the big picture?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 11, 23, 18, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 755500331, 'comment_body': 'I think we should allow this PR without them & consider adding them in the future. The stress tests are already useful because we can look for memory errors etc. with them.', 'comment_created': datetime.datetime(2021, 11, 23, 21, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 778428855, 'comment_body': ""It probably doesn't matter here, but `value` should not be a ref anymore."", 'comment_created': datetime.datetime(2022, 1, 4, 22, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}]","[{'commit_sha': 'aa45cda7122c12db9cf175c6b58b116c984aeb8f', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b16718584bbbf2860bb4bc1431fb123bae0832', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2beb7b4dd6a2e50e097912064b7c4f13fe302369', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '548fd46f9a98e531375d9fc303faa6ea3b851288', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eae90ca48866f4f0ab5a3938dfb9b61f1fdf27e1', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be3da44198ed8747d85e0f7ee2d489f8db64f45', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a0e3606519a0df4f48268976786ad8024e7b78', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73d711d48c5d3683510c3506ee4fef1c6a7c1094', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '174d30349bdf615aaf652efdf2560a507e279027', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5300f65e0b32a04329e22e51c74bd3e14010ca86', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d9de58e890657537c9af40bc431575eb303ed0', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d00a50a72c02ba79d94e7db29a7cfac8b55c5f', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f357f2c5ab3d69e6edfafc44b5bfdeaecf417f1a', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca76bdb707d7b5332abb93c294bdc9a6c872187b', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e928895af992e473125b3367183bc771b8cc50', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8d47e91e4724843b43490725d741129690f8f4d', 'committer_username': 'Yudhishthira1406', 'committer_name': 'Divye Nayyar', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 19, 3, 48, 17, tzinfo=datetime.timezone.utc)}]",Divye Nayyar,55523247,,User,,15,,2,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21663285,chapel,chapel-lang/chapel,Chapel,415,1765,63,280,102544,2811,46,100,"[{'id': 704921377, 'number': 18168, 'closed': datetime.datetime(2022, 1, 13, 18, 2, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 18, 12, 50, tzinfo=datetime.timezone.utc), 'time_taken': 13909777.0, 'time_delta': '160 days, 23:49:37', 'additions': 998, 'deletions': 0, 'state': 'closed'}, {'id': 674750873, 'number': 17954, 'closed': datetime.datetime(2022, 1, 13, 21, 1, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 17, 38, 30, tzinfo=datetime.timezone.utc), 'time_taken': 17810584.0, 'time_delta': '206 days, 3:23:04', 'additions': 125, 'deletions': 0, 'state': 'closed'}, {'id': 602941571, 'number': 17491, 'closed': datetime.datetime(2021, 9, 8, 17, 38, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 17, 6, 6, tzinfo=datetime.timezone.utc), 'time_taken': 14085151.0, 'time_delta': '163 days, 0:32:31', 'additions': 89, 'deletions': 18, 'state': 'closed'}, {'id': 602766716, 'number': 17490, 'closed': datetime.datetime(2021, 4, 5, 15, 23, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 13, 33, 3, tzinfo=datetime.timezone.utc), 'time_taken': 611441.0, 'time_delta': '7 days, 1:50:41', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 590981252, 'number': 17393, 'closed': None, 'created': datetime.datetime(2021, 3, 11, 16, 5, 33, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 147, 'deletions': 0, 'state': 'open'}, {'id': 583838032, 'number': 17322, 'closed': datetime.datetime(2021, 3, 3, 16, 27, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 3, 10, 20, 55, tzinfo=datetime.timezone.utc), 'time_taken': 21978.0, 'time_delta': '6:06:18', 'additions': 33, 'deletions': 31, 'state': 'closed'}, {'id': 579078976, 'number': 17247, 'closed': datetime.datetime(2021, 3, 1, 22, 42, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 24, 7, 39, 39, tzinfo=datetime.timezone.utc), 'time_taken': 486162.0, 'time_delta': '5 days, 15:02:42', 'additions': 69, 'deletions': 0, 'state': 'closed'}, {'id': 564584770, 'number': 17066, 'closed': datetime.datetime(2022, 2, 10, 15, 24, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 31, 5, 2, 56, tzinfo=datetime.timezone.utc), 'time_taken': 32437323.0, 'time_delta': '375 days, 10:22:03', 'additions': 82, 'deletions': 28, 'state': 'closed'}, {'id': 561190082, 'number': 16996, 'closed': datetime.datetime(2021, 1, 29, 1, 33, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 16, 11, 28, tzinfo=datetime.timezone.utc), 'time_taken': 292931.0, 'time_delta': '3 days, 9:22:11', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 556350955, 'number': 16961, 'closed': datetime.datetime(2021, 1, 24, 16, 42, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 17, 13, 54, 5, tzinfo=datetime.timezone.utc), 'time_taken': 614892.0, 'time_delta': '7 days, 2:48:12', 'additions': 146, 'deletions': 5, 'state': 'closed'}, {'id': 556342287, 'number': 16960, 'closed': datetime.datetime(2021, 1, 17, 12, 55, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 17, 12, 49, 2, tzinfo=datetime.timezone.utc), 'time_taken': 400.0, 'time_delta': '0:06:40', 'additions': 105, 'deletions': 0, 'state': 'closed'}]"
