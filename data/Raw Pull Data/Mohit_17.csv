pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
650129410,Mutations for forgot password,"This PR adds mutations for the forgot-password.

",True,121,https://api.github.com/repos/JabRef/JabRefOnline/pulls/121,https://github.com/JabRef/JabRefOnline/pull/121,closed,348,20,15,43,17,41,0,0,[],2021-05-21 16:33:17+00:00,2021-06-13 10:33:53+00:00,1965636.0,"22 days, 18:00:36","[{'comment_id': 637548233, 'comment_body': 'Rename variable to `user` ?', 'comment_created': datetime.datetime(2021, 5, 23, 13, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 637548582, 'comment_body': ""Please extract the password hashing to a new method and reuse it in `createAccount` as well.\r\n\r\nBackground: It's almost never a good idea to copy-paste code. This works for the moment but may lead to maintenance problems in the future. Here, for example, if we change the way passwords are hashed in `createAccount` but forget to make the same changes in `updatePassword` we may end up with passwords that are hashed in different ways, and users may no longer be able to login."", 'comment_created': datetime.datetime(2021, 5, 23, 13, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 637548753, 'comment_body': 'I think it should be sufficient to use the existing `getUserByEmail`, or not?', 'comment_created': datetime.datetime(2021, 5, 23, 13, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 637549450, 'comment_body': 'I think most of the new code in this method and in `changePassword` below should be moved to methods in `authService`. You can think of the receiver as a data-adaptation layer that converts the graphql input/outputs to the right form to be consumed by the service layer. The latter should include most of what is called business logic. In particular, receivers should ""never"" directly access the database (or redis). For some parts of the code it\'s not so clear if they should go to the receiver or service layer. For example, authorization and authentication is one of these gray areas that I would for now at least mostly leave in the receiver.\r\n\r\nBackground: The layered architecture is more flexible if you want to extend the code in the future. That\'s something you almost always want to do, but it\'s hard to predict in which directions you need extensibility. For example, we may decide to add a REST api. If all the logic is in the service layer, this will be relatively easy; but if a lot of the logic is happening in the receiver this needs to be reimplemented for the REST layer.', 'comment_created': datetime.datetime(2021, 5, 23, 13, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 637550373, 'comment_body': 'What do you think about using [handy-redis](https://github.com/mmkal/handy-redis) for async getter/setter with good typescript support?', 'comment_created': datetime.datetime(2021, 5, 23, 13, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 637553114, 'comment_body': 'This file still needs a bit of cleanup.', 'comment_created': datetime.datetime(2021, 5, 23, 14, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 637597359, 'comment_body': 'I think promise support is coming in their next version(v4).', 'comment_created': datetime.datetime(2021, 5, 23, 20, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 637600203, 'comment_body': 'Sry, You also mentioned it earlier. I will definitely keep it in mind.', 'comment_created': datetime.datetime(2021, 5, 23, 20, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 637601466, 'comment_body': 'Yeah, Email is also unique to the user.', 'comment_created': datetime.datetime(2021, 5, 23, 21, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 639738661, 'comment_body': '`v4 as generateToken` for readability? ', 'comment_created': datetime.datetime(2021, 5, 26, 13, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639756059, 'comment_body': 'For security reasons, I would suggest that the caller needs to provide the token and *the email* (and the code checks that they are a valid pair). Otherwise an attacker can just call the `updatePassword` with random tokens and wait until he finally gets access to it. By coupling it to the email, the probability of a hit is somewhat reduced (namely by the amount of people that have password resets open).\r\n\r\nAnother advantage of this is that you can store the reset token with key `forget-password-{email}`. This can be used to make sure that each user only has one active ""password reset"" in progress.', 'comment_created': datetime.datetime(2021, 5, 26, 14, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639759664, 'comment_body': 'Please store a hashed version of the token. Otherwise, an attacker that gets access to the redis client can change passwords for everyone.', 'comment_created': datetime.datetime(2021, 5, 26, 14, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639760390, 'comment_body': 'Maybe rename to `resetPassword`? Creating a token and sending it as an email is an implementation detail.', 'comment_created': datetime.datetime(2021, 5, 26, 14, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639769207, 'comment_body': 'This warning occurs if the method is not fully annotated. Here, the return type is missing: `resetPasswordTemplate(token: string): string`', 'comment_created': datetime.datetime(2021, 5, 26, 14, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639770986, 'comment_body': 'Same as above, `:Promise<void>` missing.', 'comment_created': datetime.datetime(2021, 5, 26, 14, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639774186, 'comment_body': '@koppor Do we have an email account that we can use to send welcome and password reset mails? If not, could you please configure one? `noreply@jabref.org`  or `info@jabref.org` seem to be standard.', 'comment_created': datetime.datetime(2021, 5, 26, 14, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639776375, 'comment_body': 'This needs to be the passed token, right?', 'comment_created': datetime.datetime(2021, 5, 26, 14, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639843728, 'comment_body': 'Yes, I\'m trying to figure out how to get it from the URL. Bc setup method doesn\'t have access to ""this.$route""', 'comment_created': datetime.datetime(2021, 5, 26, 15, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 639873500, 'comment_body': '`useRoute` should work https://next.router.vuejs.org/api/#useroute', 'comment_created': datetime.datetime(2021, 5, 26, 16, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 639946119, 'comment_body': 'And here is the corresponding command from nuxt: https://composition-api.nuxtjs.org/packages/routes/', 'comment_created': datetime.datetime(2021, 5, 26, 17, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 642407365, 'comment_body': '```suggestion\r\ncontainer.register<RedisClient>(RedisClient, {\r\n  useFactory: instanceCachingFactory<RedisClient>(() => createClient({\r\n    host: process.env.REDIS_HOST,\r\n    port: process.env.REDIS_PORT  \r\n  })),\r\n})\r\n```\r\nor something like this maybe?', 'comment_created': datetime.datetime(2021, 5, 31, 11, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 642419317, 'comment_body': 'Thanks and sorry for spamming ', 'comment_created': datetime.datetime(2021, 5, 31, 11, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 642423309, 'comment_body': 'I\'m not getting this error on my local machine \r\n<img width=""822"" alt=""image"" src=""https://user-images.githubusercontent.com/62339705/120187375-554a0600-c232-11eb-8538-46638c387917.png"">', 'comment_created': datetime.datetime(2021, 5, 31, 11, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 642424688, 'comment_body': ""I had this too, it comes from the recent update to apollo server. Make sure to run `yarn install`. I also had to restart VS for some reason. If that also doesn't work you can try to run `yarn upgrade`."", 'comment_created': datetime.datetime(2021, 5, 31, 11, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646166878, 'comment_body': 'Yarn has a nice feature that it merges lock files automatically. So my strategy is usually the following: pull changes, get warning about merge conflicts, fix merge conflicts to files myself and run `yarn install` which takes care of the conflicts in the lock file, then commit merge.', 'comment_created': datetime.datetime(2021, 6, 6, 18, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 646818344, 'comment_body': 'Change to more meaningful names=?', 'comment_created': datetime.datetime(2021, 6, 7, 17, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Siedlerchr', 'type': 'User'}, {'comment_id': 647806422, 'comment_body': ""Isn't EX seconds?"", 'comment_created': datetime.datetime(2021, 6, 8, 21, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 650218932, 'comment_body': ""```suggestion\r\n          # Maps port 6379 on service container to port 6380 on host\r\n          - 6380:6379\r\n```\r\nSince I decided for some reason that 6380 is the better port ;-) (it's azure's default and I thought it doesn't hurt to choose a non-standard port as default)"", 'comment_created': datetime.datetime(2021, 6, 11, 19, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 650219257, 'comment_body': 'With the recent changes on main, this is is the default so not necessary.', 'comment_created': datetime.datetime(2021, 6, 11, 19, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 650219410, 'comment_body': 'Alternatively, set REDIS_PORT below to 6380', 'comment_created': datetime.datetime(2021, 6, 11, 19, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 650220010, 'comment_body': '@koppor any updates?', 'comment_created': datetime.datetime(2021, 6, 11, 19, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 650220400, 'comment_body': 'Please remove the console log statements. They will only unnecessarily clog the logger in the production environment.', 'comment_created': datetime.datetime(2021, 6, 11, 19, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 650220809, 'comment_body': 'As we discussed, it was a not so intelligent idea of mine to put the email here as well. Could you please revert this? Thanks!', 'comment_created': datetime.datetime(2021, 6, 11, 19, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 650319056, 'comment_body': 'Right 😅', 'comment_created': datetime.datetime(2021, 6, 12, 0, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 650321668, 'comment_body': ""Sorry, I miscommunicated. I meant isn't this 1 000 days?"", 'comment_created': datetime.datetime(2021, 6, 12, 0, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'k3KAW8Pnf7mkmdSMPHz27', 'type': 'User'}, {'comment_id': 650323144, 'comment_body': 'Oh!, It is in milliseconds.', 'comment_created': datetime.datetime(2021, 6, 12, 0, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 650323404, 'comment_body': ""Also, that 'ex' should be in caps.\r\nThanks for pointing it out."", 'comment_created': datetime.datetime(2021, 6, 12, 0, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 650339738, 'comment_body': ""Earlier implementation has some downsides \r\n1. Users can have multiple windows open to reset the password.\r\n2. Hashing token is not possible because it is being used as a key.\r\n\r\nTo address the first issue, I'd suggest asking users for the email and not sending it in the link. Which also fixes the second issue. \r\n\r\nAnother solution would be to use a secret prefix(random string) for the token, store it as a key, use email as value, and store another key-value pair with key as email and value as isWindowOpen to keep track of the open windows.\r\n"", 'comment_created': datetime.datetime(2021, 6, 12, 3, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 650363382, 'comment_body': 'These are good points. What about using the userId instead of the email? Then we should get both approaches, but someone stealing the link still cannot login unless he knows the corresponding email? I guess it should be even possible to use a hashed version of the userid, so that even if one gets the ""userid"" from the query, one still cannot guess the identity of the user.\r\n\r\nI went through some of the reset-password emails I got in the past, and most of them use either a simple token (discourse) or userid + token (twitter, facebook [not sure, they send `u` and `n` params], pinterest, skype). ', 'comment_created': datetime.datetime(2021, 6, 12, 8, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 650423727, 'comment_body': ""Userid is a good option. But the issue with userid is that it can't be hashed if we use it as a key. \r\nI think there shouldn't be an issue in exposing userid."", 'comment_created': datetime.datetime(2021, 6, 12, 18, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 650425674, 'comment_body': ""I guess you could add an additional hashed userid <-> userid mapping in redis, but I agree that's not worth the overhead."", 'comment_created': datetime.datetime(2021, 6, 12, 19, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}]","[{'commit_sha': 'b674f571941643b392af3d267698940f230e4696', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8296e9cfbd81e5637a1575b03957400f1452992b', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e3bb8ba8894e03762c5b9a9f8ef2b3936b9f93', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeea098c5ce48d7e3cd59105ab62aa217c13d3d8', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d72c71a2acf38842400bceae269b2272157b32', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bece05a03212eb005e67e1125dfbd7dd2b5790a1', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bd010e226cbb1b5042dc56efc7a5a9e7006b213', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a007ff2336ee10558c8035ee6e25dae39a7a7d', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ee79cdea6a6ef564a376bc51ae8b2c44f0e313', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '137199d49ccd0fc3ed19402fcb23a5280166ccfd', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5c9de364f2a4d784a626f2cc859798ddf5945ab', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f59a5a2076e1dc149cbbeb46cbbc6f9a35bc25af', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fda49caba2fc582bde13a64d37f5337c7b17680', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9182d5a5d8a7a0a63c94e31a4507fd423671ba60', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ccd1c3b0d6b3bed3faaa8dc13a96c73706d9f62', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac98dfd2443c0c1c547d624d66e44715d891729', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcacbbfe136ae8e45dedc884438bb591bfdeeb45', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '424a1c4b168f335f57576c79b3ba55e38680a1d8', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad2dfd394a20dc6539e6da6d54a4fa4604d5d252', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc22ceb32703c3c79e86c144fd3bcce58abcc5f', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b7189247c9cf8a9c22e4de3edf07488b72e0e62', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '588ebf0cb9e5e0ebd9425ed6e35a13278c1ee5af', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f44e83b72b2b5e83cb173fae5d7c1bb4af23b2', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ebd0af422947308535c613f8d570c265ef3247', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009a4b28be5e934f17356eced7018a5c021b51e3', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46018b3063e58b4d7865a9ce77027b7235e3b4fe', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a418f72b2fca2eefbbd3d47b098cf29ff438e0', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c8283a949f989b22a1cbfaf7a160daeea46ad35', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '275d0cee86f4843a4828ba2f5c1f01a5795f2858', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57253c4732d22a93007db3d8f74e53292b538597', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95e148961bdc572f22c928ba73411217c61aec8', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f69ac147d31a062945226f6cdd4eaf685351f892', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '174bb2c7495b6eefbe650e6a518e55c095dfab11', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '267fb82f8981e73d5042591021e497cd3af74206', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f88dca0d57cdb4df09b5a832a379b386fb14090', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157414e85a7cabd4869ce2aed140c7d66f1024f9', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd000e77ae19eb429e0c1b3ccd5ed17e30d792fe', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d2a3ae2079ef6faaf5c33bda18556170fedf3f5', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c1b8068eddb3b38cf64fd3c0dc1a2dcccb99b80', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8df8b88b0d0578c17a4f345c91225f22812957ae', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '723d04ae44e8f2f76dc82667541b46fb81a45eb0', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba5403876910f3b14ef9484df7bca3433a21e81', 'committer_username': 'mohit038-zz', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 18, 13, 3, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be23dd4bcfdd9aaece03f5779cedba5ca6a68455', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}]",Mohit,62339705,,User,,16,,5,5
649909643,Add session-store to express,"#104 

This PR adds Redis as a session store for express.
",True,120,https://api.github.com/repos/JabRef/JabRefOnline/pulls/120,https://github.com/JabRef/JabRefOnline/pull/120,closed,96,3,7,7,1,3,0,0,[],2021-05-21 12:03:22+00:00,2021-06-11 18:58:22+00:00,1839300.0,"21 days, 6:55:00","[{'comment_id': 636891393, 'comment_body': 'Why did you disabled touch, i.e that session are kept alive when the user interacts with the service without changing the session in itself?', 'comment_created': datetime.datetime(2021, 5, 21, 12, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 636962773, 'comment_body': ""In Redis, we can store data with a timer, and then later, whenever we interact with that data, Touch will update the timer. Here we aren't setting any timer. We want to store sessions forever. So no need to keep updating it.\r\nIt reduces the number of requests to Redis. \r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 14, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}, {'comment_id': 636970730, 'comment_body': ""Okay, I understood the documentation\r\n> ttl\r\nIf the session cookie has a expires date, connect-redis will use it as the TTL.\r\nOtherwise, it will expire the session using the ttl option (default: 86400 seconds or one day).\r\n\r\nthat it normally expires after 1day. If `disableTouch: false` then actions reset the ttl, so that session expire 1 day after the last interaction; otherwise 1 day after creation of the session. Anyway, since maxAge is set rather high, this shouldn't be much of a problem and can easily be changed later."", 'comment_created': datetime.datetime(2021, 5, 21, 14, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}]","[{'commit_sha': 'e248098482a057fb5c8ba09a43d39a468f13cb62', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2489c5a2f14e53aca28e378838fd0a67724cb366', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6857be17ba04bace6b991af599ac8d28aec43a34', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff1c909466ae119e7f92dc481cd21dbd2d1aded9', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36bb78d206eaacbf0283aa4597e624a56916c88d', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70772c2cfaee9099dd2ed043cea905de479ded71', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae1e0f75660bd7608734466f25bc49f1e4d7196', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}]",Mohit,62339705,,User,,16,,5,5
592337829,Fix double-click onto file in file list to just open the file,"Fixes #7465

Now double click onto the file just open the file and edit prompt can be accessed through a new right-click > Edit option.



- [x] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [ ] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [ ] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7523,https://api.github.com/repos/JabRef/jabref/pulls/7523,https://github.com/JabRef/jabref/pull/7523,closed,3,2,2,2,0,0,1,0,[{'name': 'status: ready-for-review'}],2021-03-13 10:16:08+00:00,2021-03-13 16:15:55+00:00,21587.0,5:59:47,[],"[{'commit_sha': '36caaa33902277d8b13fdafb5ddc1daab5d226fe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f376234cdba061ff55d10b68a5e4ae6533c8689e', 'committer_username': 'tobiasdiez', 'committer_name': 'Tobias Diez', 'committer_email': None, 'commit_date': datetime.datetime(2013, 7, 18, 8, 18, 49, tzinfo=datetime.timezone.utc)}]",Mohit,62339705,,User,,16,,5,5
594004466,Fix for issue 5522 and some UI changes.,"Fixes #5522 

1. Adding patterns to the entries background in dark theme.
<img width=""1440"" alt=""Screenshot 2021-03-16 at 8 39 32 PM"" src=""https://user-images.githubusercontent.com/62339705/111332392-c0565880-8697-11eb-9bac-1236aa7f44c3.png"">

2. Visibility issue with the group item number coloration when an item is assigned to a new group as mentioned in https://github.com/JabRef/jabref/issues/5522#issuecomment-643632385
<img width=""640"" alt=""Screenshot 2021-03-16 at 8 52 01 PM"" src=""https://user-images.githubusercontent.com/62339705/111334434-900fb980-8699-11eb-8cdc-ee7602ffc7a9.png"">




- [ ] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)
- [ ] Tests created for changes (if applicable)
- [x] Manually tested changed features in running JabRef (always required)
- [x] Screenshots added in PR description (for UI changes)
- [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at <https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
",True,7547,https://api.github.com/repos/JabRef/jabref/pulls/7547,https://github.com/JabRef/jabref/pull/7547,closed,14,1,1,3,1,2,1,0,[{'name': 'status: ready-for-review'}],2021-03-16 15:26:21+00:00,2021-03-17 11:50:21+00:00,73440.0,20:24:00,"[{'comment_id': 595592688, 'comment_body': ""I think the insets and padding don't need to be set here again, as they are controlled by the light theme, right?"", 'comment_created': datetime.datetime(2021, 3, 16, 22, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tobiasdiez', 'type': 'User'}, {'comment_id': 595842006, 'comment_body': ""Yes, you are right. I'll change it."", 'comment_created': datetime.datetime(2021, 3, 17, 9, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mohit038-zz', 'type': 'User'}]","[{'commit_sha': '49de6fce386dab82248ade31f76558b74855bdf1', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22118f6ef0555cc1f33fba3477c7aa58d8d5fb89', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac7823beaba79c04958e47b4a70513cdf6109a6', 'committer_username': 'mohit038', 'committer_name': 'Mohit', 'committer_email': None, 'commit_date': datetime.datetime(2022, 9, 6, 14, 7, 12, tzinfo=datetime.timezone.utc)}]",Mohit,62339705,,User,,16,,5,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
344841169,JabRefOnline,JabRef/JabRefOnline,TypeScript,9,30,7,38,3143,63,15,8,"[{'id': 942131059, 'number': 1081, 'closed': datetime.datetime(2022, 5, 20, 20, 14, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 20, 0, 25, 13, tzinfo=datetime.timezone.utc), 'time_taken': 71331.0, 'time_delta': '19:48:51', 'additions': 320, 'deletions': 0, 'state': 'closed'}, {'id': 858799446, 'number': 874, 'closed': datetime.datetime(2022, 10, 23, 16, 38, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 20, 11, 19, 31, tzinfo=datetime.timezone.utc), 'time_taken': 21187157.0, 'time_delta': '245 days, 5:19:17', 'additions': 335, 'deletions': 348, 'state': 'closed'}, {'id': 733725750, 'number': 476, 'closed': datetime.datetime(2021, 10, 31, 16, 6, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 14, 14, 15, 16, tzinfo=datetime.timezone.utc), 'time_taken': 4067484.0, 'time_delta': '47 days, 1:51:24', 'additions': 253, 'deletions': 63, 'state': 'closed'}, {'id': 679523544, 'number': 226, 'closed': datetime.datetime(2021, 9, 13, 19, 40, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 1, 59, 9, tzinfo=datetime.timezone.utc), 'time_taken': 6630080.0, 'time_delta': '76 days, 17:41:20', 'additions': 265, 'deletions': 78, 'state': 'closed'}, {'id': 650129410, 'number': 121, 'closed': datetime.datetime(2021, 6, 13, 10, 33, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 16, 33, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1965636.0, 'time_delta': '22 days, 18:00:36', 'additions': 348, 'deletions': 20, 'state': 'closed'}, {'id': 649909643, 'number': 120, 'closed': datetime.datetime(2021, 6, 11, 18, 58, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 12, 3, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1839300.0, 'time_delta': '21 days, 6:55:00', 'additions': 96, 'deletions': 3, 'state': 'closed'}, {'id': 646622047, 'number': 118, 'closed': datetime.datetime(2021, 5, 18, 12, 40, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 18, 10, 26, 4, tzinfo=datetime.timezone.utc), 'time_taken': 8085.0, 'time_delta': '2:14:45', 'additions': 402, 'deletions': 52, 'state': 'closed'}, {'id': 646581136, 'number': 117, 'closed': datetime.datetime(2021, 5, 18, 10, 18, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 18, 9, 32, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2774.0, 'time_delta': '0:46:14', 'additions': 402, 'deletions': 52, 'state': 'closed'}]"
17634071,jabref,JabRef/jabref,Java,2468,3519,112,708,20656,470,27,16,"[{'id': 597260059, 'number': 7552, 'closed': datetime.datetime(2021, 3, 20, 23, 36, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 20, 10, 57, 11, tzinfo=datetime.timezone.utc), 'time_taken': 45552.0, 'time_delta': '12:39:12', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 594004466, 'number': 7547, 'closed': datetime.datetime(2021, 3, 17, 11, 50, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 15, 26, 21, tzinfo=datetime.timezone.utc), 'time_taken': 73440.0, 'time_delta': '20:24:00', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 593907973, 'number': 7546, 'closed': datetime.datetime(2021, 3, 16, 13, 45, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 13, 35, 15, tzinfo=datetime.timezone.utc), 'time_taken': 586.0, 'time_delta': '0:09:46', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 592337829, 'number': 7523, 'closed': datetime.datetime(2021, 3, 13, 16, 15, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 10, 16, 8, tzinfo=datetime.timezone.utc), 'time_taken': 21587.0, 'time_delta': '5:59:47', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 592296614, 'number': 7521, 'closed': datetime.datetime(2021, 3, 13, 9, 9, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 5, 14, 29, tzinfo=datetime.timezone.utc), 'time_taken': 14093.0, 'time_delta': '3:54:53', 'additions': 3, 'deletions': 3, 'state': 'closed'}]"
