pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
665385394,Introduce the `@PyBracketAccess` annotation for using bracket syntax in facades,,True,194,https://api.github.com/repos/scalapy/scalapy/pulls/194,https://github.com/scalapy/scalapy/pull/194,closed,77,7,4,11,1,17,0,0,[],2021-06-08 22:14:02+00:00,2021-06-29 03:19:26+00:00,1746324.0,"20 days, 5:05:24","[{'comment_id': 648043358, 'comment_body': ""`List` clashes with the Scala's standard `List`. I think it's a good idea to name it differently, something like `TestList`, so that people who read the code understand at once that this is a custom list."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'anatoliykmetyuk', 'type': 'User'}, {'comment_id': 648043511, 'comment_body': 'Why so many newlines?', 'comment_created': datetime.datetime(2021, 6, 9, 7, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'anatoliykmetyuk', 'type': 'User'}, {'comment_id': 648044477, 'comment_body': ""Don't forget to remove debug statements once this is ready for merge."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'anatoliykmetyuk', 'type': 'User'}, {'comment_id': 648427596, 'comment_body': 'Looks like this statement does nothing', 'comment_created': datetime.datetime(2021, 6, 9, 15, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'anatoliykmetyuk', 'type': 'User'}, {'comment_id': 659929092, 'comment_body': 'Need backticks around `@PyBracketAccess` to format correctly. Also, please refer to the PR at the end of the line like in earlier changelog items.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659929427, 'comment_body': ""Don't need this comment, since we're testing other syntax too."", 'comment_created': datetime.datetime(2021, 6, 28, 16, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659929781, 'comment_body': 'Nit, need a space between `local` and `{`, and remove the extra space between `val` and `myList`.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659929945, 'comment_body': 'Unnecessary import?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659930180, 'comment_body': '`else` should be on the previous line.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659930393, 'comment_body': 'Nit: extra indent', 'comment_created': datetime.datetime(2021, 6, 28, 16, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659930575, 'comment_body': 'Need backticks around `@PyBracketAccess`', 'comment_created': datetime.datetime(2021, 6, 28, 16, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659931186, 'comment_body': 'Also, can have a better explanation than `representing bracket access on an object`. Perhaps `representing indexing into the Python object using brackets in Python syntax`?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659933092, 'comment_body': 'Also, to make the docs more active, we can reword `So, for example, we have` to `For example, we can create`.', 'comment_created': datetime.datetime(2021, 6, 28, 16, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659933262, 'comment_body': 'Nit: capitalize Python', 'comment_created': datetime.datetime(2021, 6, 28, 16, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659933399, 'comment_body': 'Nit: extra space between `val` and `myList`', 'comment_created': datetime.datetime(2021, 6, 28, 16, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659933540, 'comment_body': 'Nit: capitalize Python', 'comment_created': datetime.datetime(2021, 6, 28, 16, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 659933795, 'comment_body': 'Nit: `element at index 0` instead of `element by index 0`', 'comment_created': datetime.datetime(2021, 6, 28, 16, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}]","[{'commit_sha': '8ac4f7684b374f5d3b208ab02fb9f6a186657371', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e23ff4f2404916216be1ebdfeb9cb947bd13fda1', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2b640d0d5bedbe439e74e4e55348c672b8e2f59', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90aeb630738c45ac9419ca6b2f0c30ff1d983371', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dd00ebe781a6e5a9d95cc5f7bf07991d039d049', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9942b4c0b1647c2b4c16d08748136374dfcf569', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f85c750ac414714ca246fffbe0b21627ae8e0c4', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff20b1e5466b4260538a0442116ede4d6ec8323', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0271c5dc62f43ce28d907cc5bdcb494f69ff549', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25c01cd2f2694c1422fb92bad9c1e961275e458', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c326054f43b6d50ea98dee734afa724fb3870a1', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}]",,25159436,,User,,26,,29,24
535546226,Slightly Improved Varargs Extractor,"A small change to `scala.quoted.Varargs.unapply` to make it apply in more circumstances when inlining is involved, as (as far as I can tell/recall) sometimes varargs end up being encoded as ```Typed(Inlined(EmptyTree, List(), Repeated(elems, _)), _)``` not ```Typed(Repeated(elems, _), _)``` or ```Inlined(EmptyTree, List(), Typed(Repeated(elems, _), _))``` in corner cases, which means the old implementation fails to match in a confusing manner. This improves things substantially in my wacky heavily-inlining macro expansions, and I'm pretty sure it doesn't break anything.",True,10729,https://api.github.com/repos/scala/scala3/pulls/10729,https://github.com/scala/scala3/pull/10729,closed,2,1,1,1,3,0,0,1,[],2020-12-10 00:09:09+00:00,2020-12-24 09:54:34+00:00,1244725.0,"14 days, 9:45:25",[],"[{'commit_sha': '3d0fbef11b924967a1e58961d609b99272152d8e', 'committer_username': 'CiaraOBrien', 'committer_name': ""Ciara O'Brien"", 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 2, 10, 57, 39, tzinfo=datetime.timezone.utc)}]",Ciara O'Brien,64687574,,User,,6,,1,3
726161008,Clean Facades and tests,,True,2,https://api.github.com/repos/Ang9876/scalapy/pulls/2,https://github.com/Ang9876/scalapy/pull/2,closed,83,164,8,39,0,0,0,0,[],2021-09-02 18:06:10+00:00,2021-09-03 12:04:12+00:00,64682.0,17:58:02,[],"[{'commit_sha': 'ca766e586081a3aa5738ee3942aba16f3b040416', 'committer_username': 'Ang9876', 'committer_name': 'AngAng', 'committer_email': 'angzhendong@gmail.com', 'commit_date': datetime.datetime(2019, 8, 25, 1, 56, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '424a9767ff886c40da97869a5b66cd09296b2f6f', 'committer_username': 'Ang9876', 'committer_name': 'AngAng', 'committer_email': 'angzhendong@gmail.com', 'commit_date': datetime.datetime(2019, 8, 25, 1, 56, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaf9e4c59f1b7b61a73b01af1ebad1f245f9e1ad', 'committer_username': 'Ang9876', 'committer_name': 'AngAng', 'committer_email': 'angzhendong@gmail.com', 'commit_date': datetime.datetime(2019, 8, 25, 1, 56, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d242915e446cfeb61fa50ade5b3de878b54bb99', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b556d5085d5b9364ebd41ad53fc055865a69bf', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e7a49866b5930a44a88f6915d0783a0e79276fc', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40068efbaf95efcf689281104682c0d30fccb8d9', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0baf60f72bbed3ac25384dc27892a5cc631a9d', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed19466267d7fc4911f81b4c21d0bb9f43003044', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '737556cffec6cd3dcda4a617cb7efe8a31a80cb1', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '338ee517a883593cf33bb67ae183cca2433df48a', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d4e2195bbe76b845f6b7591e77430ac494bf43', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc9d9225fe23150b83996d41710c94301cfe7b2', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d455c70f349d4126cd6ee99cd151209a2d50979', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08fade6ee0d9550c182dbdd78bffee44273274b1', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b0d8faf931d69724a02b141584f2e68bd70e95', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a90d31f8e68083136c97f431a00e11b88b46b78', 'committer_username': 'Ang9876', 'committer_name': 'AngAng', 'committer_email': 'angzhendong@gmail.com', 'commit_date': datetime.datetime(2019, 8, 25, 1, 56, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e4cbbd6bbd912a5700816ac230d9406fb4cd6fa', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b6494348072d90b9fe0eedb8af44769b72fabdd', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fd4fe9559837d4cb059f3425e770218fdb86a5a', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '905bfbb92ea10a11736c3c4586c0ec9ac4adbccf', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1318ef55c0844055fa7cd98ad1ac483f7b89786a', 'committer_username': 'kiendang', 'committer_name': 'Kien Dang', 'committer_email': None, 'commit_date': datetime.datetime(2014, 1, 28, 3, 36, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bdc46c4b09dcef84ca6efcb46645630858375d2', 'committer_username': 'kiendang', 'committer_name': 'Kien Dang', 'committer_email': None, 'commit_date': datetime.datetime(2014, 1, 28, 3, 36, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c184ed7371cd12c1458cb1a826291d6a7b7b81', 'committer_username': 'scala-steward', 'committer_name': 'Scala Steward', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 19, 35, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffdffdf0d3fd7e77e6a969732f2d26ae0ac6eb6f', 'committer_username': 'scala-steward', 'committer_name': 'Scala Steward', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 19, 35, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfd9e8a5e99b98287c0dc2412c735bbc8dcc22cc', 'committer_username': 'scala-steward', 'committer_name': 'Scala Steward', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 6, 19, 35, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cded225276b8e83cd5573ecc0f007ad549b8cf18', 'committer_username': 'Ang9876', 'committer_name': 'AngAng', 'committer_email': 'angzhendong@gmail.com', 'commit_date': datetime.datetime(2019, 8, 25, 1, 56, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6098242df7eb9b58ed03ebda33466b157cf70931', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9466c50b0b422d7bb6909fb2e22e46533c6e7f88', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e19947ab3d54ded9d1efd19299fedc441415d7d', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd47e3c56f9411513b642ec1db6b4ad4cbce57a86', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e5f6181d3e0650ef7e2a746eb0a93dba7661af', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad853dc43812689f008ee6b39fe458bb480264c3', 'committer_username': 'Ang9876', 'committer_name': 'AngAng', 'committer_email': 'angzhendong@gmail.com', 'commit_date': datetime.datetime(2019, 8, 25, 1, 56, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9db4273f6937bede4b587c13f7f0276ce247f3b', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb1b9e90528f584f43086526e8ac955842c47e2', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3efadcb29ed0ca4aabec47729b9e2fc440c828e6', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3711b06fc73c80a3f74f93c36bf7588183c55d', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb5a959b44f58717014a8ee8851dff6d688b177', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fa4de3d23f5cf85d8de974327e8758e0bb06650', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}]",,25159436,,User,,26,,29,24
665859977,Add initial support for Scala 3,"WIP
#186 

### Changes:  
1. Modify build.sbt: add seperate sbt versions for jvm and native, add scala-2 and scala-3 folders into unmanagedsources, add exclude filter in jvm for macros used in native.
2. Add explicit types for implicit values.
3. Deprecated view bound: use implict conversion (https://docs.scala-lang.org/scala3/guides/migration/incompat-contextual-abstractions.html#implicit-views)
4. Implement FacadeCreator Macros for Scala 3 and make it compatible with both versions (`trait` and `class`)
5. Implement Native and NativeNamed Macros for Scala 3.",True,195,https://api.github.com/repos/scalapy/scalapy/pulls/195,https://github.com/scalapy/scalapy/pull/195,closed,471,106,39,1,6,49,0,0,[],2021-06-09 12:28:17+00:00,2021-09-22 21:28:08+00:00,9104391.0,"105 days, 8:59:51","[{'comment_id': 697625758, 'comment_body': 'Since the only difference is `trait` vs `class`, we could move these facades to an object which has two different versions across Scala 2/3, and then just import from that object in the tests (which would then be in shared code).', 'comment_created': datetime.datetime(2021, 8, 27, 18, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 697625961, 'comment_body': 'Duplicated from earlier in the file, should use shared logic.', 'comment_created': datetime.datetime(2021, 8, 27, 18, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 697626764, 'comment_body': ""Can be removed since we don't use it."", 'comment_created': datetime.datetime(2021, 8, 27, 18, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 697627037, 'comment_body': 'Indentation seems off.', 'comment_created': datetime.datetime(2021, 8, 27, 18, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 698078732, 'comment_body': 'I tried to remove duplication and the only way that I found out at the moment is to rewrite in this way:\r\n```\r\nobject SharedValues {\r\n  def classDynamicSymbol(using Quotes) = {\r\n    import quotes.reflect.*\r\n    Symbol.requiredClass(""me.shadaj.scalapy.py.Dynamic"")\r\n  } \r\n\r\n  def classReaderSymbol(using Quotes) = {\r\n    import quotes.reflect.*\r\n    Symbol.requiredClass(""me.shadaj.scalapy.readwrite.Reader"")\r\n  }\r\n }\r\n ```\r\n But we still have duplication of `import quotes.reflect.*`, `(using Quotes)` and I am not sure if it is okay\r\n \r\n I also tried to write like this: \r\n ```\r\n class Share(using Quotes) {\r\n  import quotes.reflect.*\r\n  val classDynamicSymbol = quotes.reflect.Symbol.requiredClass(""me.shadaj.scalapy.py.Dynamic"")\r\n}\r\n ```\r\n But when I tried to compile it I received this error:\r\n ```\r\nnon-private value classDynamicSymbol in class Share refers to private given instance x$1\r\n[error]    |in its type signature Share.this.x$1.reflect.Symbol\r\n ```\r\n ', 'comment_created': datetime.datetime(2021, 8, 29, 22, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 698767772, 'comment_body': ""Ah interesting, I'm not sure what the syntax in Scala 3 is supposed to be, but it seems that you would need something like `val using Quotes` to  make the implicit parameter public. The compiler error is likely showing up because the type of `classDynamicSymbol` depends on the implicit `Quotes`."", 'comment_created': datetime.datetime(2021, 8, 30, 19, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 699616541, 'comment_body': 'I tried to find how to combine `val`s with `using Quotes` in the documentation and in the code samples on github but I didn\'t find any example of how to do this and the most typical construction still is `def someMethod(using Quotes)`. In addition, we can reduce the lines of code (and remove imports) in `def`s by rewriting in this way:\r\n```\r\n  def classDynamicSymbol(using quoted: Quotes) = \r\n    quoted.reflect.Symbol.requiredClass(""me.shadaj.scalapy.py.Dynamic"")\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 19, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 700078521, 'comment_body': 'Oh, I guess at the first time I didn\'t understand you completly with this `val using Quotes` but now I found the way how we can rewrite it cleaner. So here is how we can do:\r\n```\r\nclass Helper[Q <: Quotes, T: Type](using val q: Q) {\r\n   import q.reflect.*\r\n   val classDynamicSymbol = Symbol.requiredClass(""me.shadaj.scalapy.py.Dynamic"")\r\n}\r\n```\r\nBut in the `native_impl` and `native_named_impl` in this case we will create the class object (don\'t know if it matters for us or no) during every `native_impl` and `native_named_impl` call. This is the creation of an object of class Helper in `native_impl`: \r\n```\r\n  def native_impl[T: Type](using q: Quotes): Expr[T] = {\r\n    import q.reflect.*\r\n    val helper = new Helper[q.type, T]\r\n```', 'comment_created': datetime.datetime(2021, 9, 1, 10, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 702329685, 'comment_body': 'Nit: extra indentation (should be 2 spaces)', 'comment_created': datetime.datetime(2021, 9, 4, 21, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702329722, 'comment_body': 'Nit: should have an extra line at the end of the file', 'comment_created': datetime.datetime(2021, 9, 4, 21, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702329751, 'comment_body': 'Nit: needs extra line at end of file', 'comment_created': datetime.datetime(2021, 9, 4, 21, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702329853, 'comment_body': 'This companion object seems to be duplicated with Scala 2, we should use shared code.', 'comment_created': datetime.datetime(2021, 9, 4, 21, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702329887, 'comment_body': 'Nit: needs additional line', 'comment_created': datetime.datetime(2021, 9, 4, 21, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702329971, 'comment_body': ""Let's stick to curly-brace syntax for now, so that things are more uniform across Scala 2/3"", 'comment_created': datetime.datetime(2021, 9, 4, 21, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702329979, 'comment_body': 'Nit: needs extra line', 'comment_created': datetime.datetime(2021, 9, 4, 21, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702329991, 'comment_body': 'Companion object can be shared with Scala 2', 'comment_created': datetime.datetime(2021, 9, 4, 21, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330005, 'comment_body': 'Static `None` value can be shared between Scala 2/3', 'comment_created': datetime.datetime(2021, 9, 4, 21, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330014, 'comment_body': 'Nit: needs extra line at end of file', 'comment_created': datetime.datetime(2021, 9, 4, 21, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330070, 'comment_body': 'Should not need a separate Scala 3 version for this test', 'comment_created': datetime.datetime(2021, 9, 4, 21, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330079, 'comment_body': 'Nit: keep the extra line at the end of the file', 'comment_created': datetime.datetime(2021, 9, 4, 21, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330084, 'comment_body': 'Nit: extra line', 'comment_created': datetime.datetime(2021, 9, 4, 21, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330110, 'comment_body': 'Nit: should have a blank line between imports and types', 'comment_created': datetime.datetime(2021, 9, 4, 21, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330150, 'comment_body': 'Do we need this and the `Any` declaration below?', 'comment_created': datetime.datetime(2021, 9, 4, 21, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330160, 'comment_body': 'Nit: unnecessary blank line', 'comment_created': datetime.datetime(2021, 9, 4, 21, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330183, 'comment_body': 'Nit: need a blank line at the end of the file', 'comment_created': datetime.datetime(2021, 9, 4, 21, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702330234, 'comment_body': 'Rewording suggestion: start with ""If you are using Scala 3, ..."" so that it\'s clear what this note is for from the beginning.', 'comment_created': datetime.datetime(2021, 9, 4, 21, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 702437758, 'comment_body': ""Is `@native class Dynamic` facade? If yes then can we add it to `core/shared/src/main/scala-2/me/shadaj/scalapy/py/Facades.scala` ? Or is it better to create a new file like `DynamicFacade`. The same questions are also to `core/shared/src/main/scala-3/me/shadaj/scalapy/py/Module.scala` problem. The third option here can be to create a new file for `@native class Dynamic` and `@native class Module extends Dynamic`, but I don't know how we can name it if they are not facades (because if they are facades then we can return to the first option and place those facades in `Facades.scala` or we can create new file `HelperFacades.scala` for example)"", 'comment_created': datetime.datetime(2021, 9, 5, 15, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 703101025, 'comment_body': 'Yep, the `Dynamic` trait/class is just a facade like everything else!', 'comment_created': datetime.datetime(2021, 9, 7, 0, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 703575980, 'comment_body': ""I guess we can't split `Dynamic` `class` and `object`, because Scala requires that companion object mus be defined in the same source file"", 'comment_created': datetime.datetime(2021, 9, 7, 14, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 703698699, 'comment_body': ""> I guess we can't split `Dynamic` `class` and `object`, because Scala requires that companion object mus be defined in the same source file\r\n\r\nI think so. I also tried it before and such an error was thrown."", 'comment_created': datetime.datetime(2021, 9, 7, 17, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ang9876', 'type': 'User'}, {'comment_id': 703737062, 'comment_body': '<details>\r\n  <summary>Got compile errors if sharing the code:</summary>\r\n\r\n```\r\n[error] -- [E007] Type Mismatch Error: ../scalapy/core/shared/src/main/scala/me/shadaj/scalapy/py/package.scala:18:13 \r\n[error] 18 |  val None = Any.populateWith(CPythonInterpreter.noneValue).as[None]\r\n[error]    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n[error]    |             Found:    me.shadaj.scalapy.py.None\r\n[error]    |             Required: object me.shadaj.scalapy.py.package.None\r\n[error] -- [E007] Type Mismatch Error: ../scalapy/core/shared/src/main/scala/me/shadaj/scalapy/py/package.scala:27:31 \r\n[error] 27 |      ref.as[Dynamic].__exit__(None, None, None)\r\n[error]    |                               ^^^^\r\n[error]    |Found:    (me.shadaj.scalapy.py.None : object me.shadaj.scalapy.py.package.None²)\r\n[error]    |Required: me.shadaj.scalapy.py.Any\r\n[error]    |\r\n[error]    |where:    None  is a value in package object py\r\n[error]    |          None² is a object in trait PyNone\r\n[error] -- [E007] Type Mismatch Error: ../scalapy/core/shared/src/main/scala/me/shadaj/scalapy/py/package.scala:27:37 \r\n[error] 27 |      ref.as[Dynamic].__exit__(None, None, None)\r\n[error]    |                                     ^^^^\r\n[error]    |Found:    (me.shadaj.scalapy.py.None : object me.shadaj.scalapy.py.package.None²)\r\n[error]    |Required: me.shadaj.scalapy.py.Any\r\n[error]    |\r\n[error]    |where:    None  is a value in package object py\r\n[error]    |          None² is a object in trait PyNone\r\n[error] -- [E007] Type Mismatch Error: ../scalapy/core/shared/src/main/scala/me/shadaj/scalapy/py/package.scala:27:43 \r\n[error] 27 |      ref.as[Dynamic].__exit__(None, None, None)\r\n[error]    |                                           ^^^^\r\n[error]    |Found:    (me.shadaj.scalapy.py.None : object me.shadaj.scalapy.py.package.None²)\r\n[error]    |Required: me.shadaj.scalapy.py.Any\r\n[error]    |\r\n[error]    |where:    None  is a value in package object py\r\n[error]    |          None² is a object in trait PyNone\r\n```\r\n</details>\r\nVery confused about this case. And it only occurs in Scala 3 when `class` is used.', 'comment_created': datetime.datetime(2021, 9, 7, 18, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ang9876', 'type': 'User'}, {'comment_id': 703742727, 'comment_body': 'Otherwise we will get `[info]   java.lang.NoClassDefFoundError: Could not initialize class me.shadaj.scalapy.py.package$` error in the tests. Also confused why it happens.', 'comment_created': datetime.datetime(2021, 9, 7, 18, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ang9876', 'type': 'User'}, {'comment_id': 703744620, 'comment_body': 'Ah, okay, in that case we can just have the companion object for both Scala versions mix in a common trait?', 'comment_created': datetime.datetime(2021, 9, 7, 18, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 704092236, 'comment_body': 'We can share the code in this way: \r\n```\r\nobject NoneFacade {\r\n  @native class None extends Any\r\n}\r\n```\r\nand then:\r\n```\r\ntrait PyNone {\r\n  val None = Any.populateWith(CPythonInterpreter.noneValue).as[NoneFacade.None]\r\n}\r\n```\r\nand in the package py:\r\n```\r\npackage object py extends PyMacros with PyNone {\r\n  def module(name: String) = Module(name)\r\n  def module(name: String, subname: String) = Module(name, subname)\r\n\r\n  type NoneOr[T] = NoneFacade.None | T\r\n\r\n```', 'comment_created': datetime.datetime(2021, 9, 8, 6, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 704208700, 'comment_body': '> Ah, okay, in that case we can just have the companion object for both Scala versions mix in a common trait?\r\n\r\nOK!', 'comment_created': datetime.datetime(2021, 9, 8, 9, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ang9876', 'type': 'User'}, {'comment_id': 704216735, 'comment_body': ""It seems that @jlareck 's idea works and furthermore we can simply put `val None = Any.populateWith(CPythonInterpreter.noneValue).as[NoneFacade.None]`into `package object py` without defining a trait."", 'comment_created': datetime.datetime(2021, 9, 8, 9, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Ang9876', 'type': 'User'}, {'comment_id': 704468713, 'comment_body': 'So here should we share this test between two versions? If yes, then we have problems with it, because SpecialSyntaxTest in scala 2 version contains `Can access and update the list elements using brackets` test which is related to bracket syntax (`PyBracketAccess`) and bracketSyntax is not supported in scala 3 at the moment. I can try separate it when I will implement handling annotations in Scala 3, but this separation can be like in the next update', 'comment_created': datetime.datetime(2021, 9, 8, 14, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 706741000, 'comment_body': 'I think we should be able to handle this by having two different implementations of a `SpecialSyntaxTestScala2` trait. In Scala 2 it can have `PyBracketAccess` tests and in Scala 3 it would be empty.', 'comment_created': datetime.datetime(2021, 9, 12, 3, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709549610, 'comment_body': 'Nit: no need for empty brackets', 'comment_created': datetime.datetime(2021, 9, 15, 20, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709549649, 'comment_body': 'Nit: no need for empty brackets', 'comment_created': datetime.datetime(2021, 9, 15, 20, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709549780, 'comment_body': 'Extra import?', 'comment_created': datetime.datetime(2021, 9, 15, 20, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709550005, 'comment_body': 'Nit: no need for empty brackets', 'comment_created': datetime.datetime(2021, 9, 15, 20, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709550077, 'comment_body': 'Nit: no need for empty brackets', 'comment_created': datetime.datetime(2021, 9, 15, 20, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709550238, 'comment_body': ""bump? we can create a trait with the `apply` methods that's mixed into the companion object in Scala 2/3"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709550992, 'comment_body': 'Nit: no need for empty brackets', 'comment_created': datetime.datetime(2021, 9, 15, 20, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}, {'comment_id': 709557770, 'comment_body': ""I think we also don't need this trait in `scala-3` folder because we have something specific (bracket syntax) only for Scala 2 version at the moment. But in the future if we would like to test something specific in Scala 3 we can create `trait SpecialSyntaxTestScala3`"", 'comment_created': datetime.datetime(2021, 9, 15, 20, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 710188759, 'comment_body': 'Maybe we can rename it into something else like for a specific version. But I cannot think of a good one. ', 'comment_created': datetime.datetime(2021, 9, 16, 14, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ang9876', 'type': 'User'}, {'comment_id': 711351096, 'comment_body': ""Oh, at first I didn't understand it correctly. So, I was thinking that we could create another SpecialSyntaxTest class just for Scala 2 and Scala 3 versions and not to extend them (like separate test class). But if we want to put tests for specific version to the trait and extend it, then I think it would be better to rename this trait to make it more general (maybe for example `SpecificVersionSpecialSyntaxTest`). What do you think @shadaj ?"", 'comment_created': datetime.datetime(2021, 9, 17, 21, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jlareck', 'type': 'User'}, {'comment_id': 714212394, 'comment_body': 'I have removed this trait since it can be merged into the shared part after defining a polymorphic `create`. I forgot to do it before.', 'comment_created': datetime.datetime(2021, 9, 22, 18, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ang9876', 'type': 'User'}]","[{'commit_sha': '4db68c610199cd6407b010472c809848a49916d0', 'committer_username': 'Ang9876', 'committer_name': 'AngAng', 'committer_email': 'angzhendong@gmail.com', 'commit_date': datetime.datetime(2019, 8, 25, 1, 56, 10, tzinfo=datetime.timezone.utc)}]",AngAng,54489100,angzhendong@gmail.com,User,,16,,5,4
745962314,Implement support for bracket syntax in Scala 3 version,,True,225,https://api.github.com/repos/scalapy/scalapy/pulls/225,https://github.com/scalapy/scalapy/pull/225,closed,84,52,7,2,1,1,0,0,[],2021-09-29 17:29:12+00:00,2021-10-02 19:09:29+00:00,265217.0,"3 days, 1:40:17","[{'comment_id': 720556251, 'comment_body': ""Rather than having a full item for this, let's just drop the `@PyBracketAccess` caveat from the original Scala 3 item and link to both this and the main PR in that item"", 'comment_created': datetime.datetime(2021, 10, 1, 21, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shadaj', 'type': 'User'}]","[{'commit_sha': 'c30a8512d318e9168d2adb0414aeeff6ebbec56c', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38a07398787f7fa6176cf817be2d91f65ca94898', 'committer_username': 'jlareck', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 1, 16, 19, 48, 24, tzinfo=datetime.timezone.utc)}]",,25159436,,User,,26,,29,24

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
77757916,scalapy,scalapy/scalapy,Scala,42,546,23,16,226,39,1,17,"[{'id': 792147193, 'number': 237, 'closed': datetime.datetime(2021, 12, 1, 5, 29, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 30, 23, 15, 38, tzinfo=datetime.timezone.utc), 'time_taken': 22449.0, 'time_delta': '6:14:09', 'additions': 24, 'deletions': 7, 'state': 'closed'}, {'id': 745962314, 'number': 225, 'closed': datetime.datetime(2021, 10, 2, 19, 9, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 29, 17, 29, 12, tzinfo=datetime.timezone.utc), 'time_taken': 265217.0, 'time_delta': '3 days, 1:40:17', 'additions': 84, 'deletions': 52, 'state': 'closed'}, {'id': 714742393, 'number': 209, 'closed': datetime.datetime(2021, 8, 27, 18, 7, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 4, 55, 11, tzinfo=datetime.timezone.utc), 'time_taken': 825110.0, 'time_delta': '9 days, 13:11:50', 'additions': 529, 'deletions': 85, 'state': 'closed'}, {'id': 665385394, 'number': 194, 'closed': datetime.datetime(2021, 6, 29, 3, 19, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 22, 14, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1746324.0, 'time_delta': '20 days, 5:05:24', 'additions': 77, 'deletions': 7, 'state': 'closed'}]"
7035651,scala3,scala/scala3,Scala,1039,5780,210,519,38955,1559,75,168,[]
375324951,scalapy,Ang9876/scalapy,Scala,0,0,0,14,185,1,5,1,"[{'id': 780182960, 'number': 5, 'closed': None, 'created': datetime.datetime(2021, 11, 14, 23, 13, 56, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 48, 'deletions': 19, 'state': 'open'}, {'id': 726161008, 'number': 2, 'closed': datetime.datetime(2021, 9, 3, 12, 4, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 2, 18, 6, 10, tzinfo=datetime.timezone.utc), 'time_taken': 64682.0, 'time_delta': '17:58:02', 'additions': 83, 'deletions': 164, 'state': 'closed'}, {'id': 717358575, 'number': 1, 'closed': datetime.datetime(2021, 8, 23, 17, 9, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 19, 6, 40, tzinfo=datetime.timezone.utc), 'time_taken': 79368.0, 'time_delta': '22:02:48', 'additions': 303, 'deletions': 8, 'state': 'closed'}]"
