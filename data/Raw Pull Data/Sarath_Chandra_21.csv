pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
406886796,Deep-learning-based registration example,"A simple example of deep-learning-based non-rigid image registration with the MNIST dataset, taking ideas from

- [An Unsupervised Learning Model for Deformable Medical Image Registration](http://openaccess.thecvf.com/content_cvpr_2018/papers/Balakrishnan_An_Unsupervised_Learning_CVPR_2018_paper.pdf)
- [Non-rigid image registration using fully convolutional networks with deep self-supervision](https://arxiv.org/pdf/1709.00799.pdf)

#### Framework
![framework](https://user-images.githubusercontent.com/17726755/79909835-44c63a00-843b-11ea-92cf-000249fc1afd.png)


An encoder-decoder network is trained to output a dense displacement field that is used to warp the moving image to align with the fixed image. I've used MNIST images of one class, same as that of the fixed image, for training and testing.

#### Sample results 
<img src=""https://user-images.githubusercontent.com/17726755/79903818-5efb1a80-8431-11ea-939f-96ef6a8af1bd.png"" width=200>  <img src=""https://user-images.githubusercontent.com/17726755/79905184-7dfaac00-8433-11ea-8bff-25cff72eba7c.png"" width=200> <img src=""https://user-images.githubusercontent.com/17726755/79906264-1ba2ab00-8435-11ea-97be-f9743024701d.png"" width=200>

#### Colab notebook
https://colab.research.google.com/drive/1fTzz1aT2sb8oAXRO1-dr6O_IR6dof36e

Training takes about 5 minutes on GPU.",False,2137,https://api.github.com/repos/dipy/dipy/pulls/2137,https://github.com/dipy/dipy/pull/2137,open,1017,1,11,17,13,13,2,0,"[{'name': 'state: work-in-progress'}, {'name': 'gsod2020'}]",2020-04-21 20:19:00+00:00,,0.0,,"[{'comment_id': 431471199, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471274, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471588, 'comment_body': 'All functions in this class missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 446165356, 'comment_body': 'What does ""FCN"" stand for? Could we spell this out in the class name?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446166737, 'comment_body': 'Please add back a newline at the end of the file:\r\n\r\n```suggestion\r\n        self.model.load_weights(filepath)\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 12, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446167672, 'comment_body': 'Is this something that would be worth implementing as library code?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446168670, 'comment_body': 'Would this little block of code be useful to implement as module code?', 'comment_created': datetime.datetime(2020, 6, 26, 13, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236110, 'comment_body': 'This figure is empty for me when I run this.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236524, 'comment_body': 'Maybe use `fig.savefig` instead?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446237359, 'comment_body': 'It looks like performance converges after much fewer epochs. Maybe set this to 25 for the purpose of the example and then add a comment that this could be increased to a larger number for more accurate results?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 559198651, 'comment_body': 'Really sorry for the late reply. I can be active from now on.\r\n\r\nThis was some custom architecture that I wrote for the POC. I’ve added a standard model ([U-Net](https://arxiv.org/abs/1505.04597)) and will be removing fcn.py.\r\n\r\n[dipy/nn/registration/unet.py](https://github.com/dipy/dipy/pull/2137/files#diff-b90df81deaadaf5daab47f409163c79c13ac6e03cd04a7f7622b030a89f2947c)', 'comment_created': datetime.datetime(2021, 1, 17, 15, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198826, 'comment_body': 'It’s definitely useful, but we need to handle several cases if we are planning to have this in the library. \r\nCurrent location of the class [dipy/nn/registration/dataloader.py\r\n](https://github.com/dipy/dipy/pull/2137/files#diff-71543d23c03c8f0a98683495f26868a66696e78cb0a61b8b4b922028bb8ca91c)\r\nThe function of the dataloader object is to feed batches of processed data to the model. The user needs to pass the entire dataset as input either as arrays (shape (num_images, H, W, …, num_channels))  or as a list of file paths, and the dataloader object performs some preprocessing (data transformations, adding dimensions, changing data types) on batches of data and feeds it to the model. Currently, this code only supports NumPy arrays as input, which will work for small datasets that can be loaded into the memory, but a general use case would be file paths as input.\r\n\r\nSome cases that we need to handle:\r\n1. NumPy arrays as input\r\n    1. Single static image and multiple moving images - All the moving images will be registered to this static image (moving shape (N, H, W, ..., C), static shape (H, W, ..., C))\r\n    2. Multiple static and moving images - every moving image has a different static image (moving shape (N, H, W, C), static shape (N, H, W, C))\r\n2. Lists of file paths as input\r\n    1. Single static image and multiple moving images\r\n    2. Multiple static and moving images\r\n    3. Different file extensions .npy, .h5, .nii, …', 'comment_created': datetime.datetime(2021, 1, 17, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198848, 'comment_body': 'This is only needed for single-channel images. Since most images are single-channel I also think it is useful to implement as library code. Do you mean something like this? Add the squeeze option in the predict method\r\n\r\n```python\r\nmoved = model.predict(data, squeeze=True)\r\n```', 'comment_created': datetime.datetime(2021, 1, 17, 15, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}]","[{'commit_sha': '96fbaf483a8e232e208d62fdb99bbaca62209ce5', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7587acd921c41bcff16f2600e10b4861a8c28e3b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc1f23d75ea9637ba35e5b67ea492e99dc056a2', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68722d13c129861ab7f5fab8a315f2844e7416cd', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328983d80e6741b6dd6449445f17aae8c4a2de80', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24cf40cf94a94eb2e68c04a346af0acc3921d82e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '568038d024fd94546ede34db705d60a11f95ac04', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fea652429fce2898e5111f2c22501d667fabbcb', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42664a3e25c97fa62718009a9d6b311e3b5983e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd404f64c286ff153059b2e3c95f743c8ba93119', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0d3fe6db9d244918aab02baa7a73776066588d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b66a6e7159a94140fa6aa71a10da420ccc46d0', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2429eab7068fa5ef7e35fa6920671bc15855375d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bfbe5357ba02eddcc54711c69b49ac4397bdd0d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5483c74a836e28a18a3008fe47d5b3e53005a30b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8550c6fdbae129f921a829c3519b0f898b3206', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a57ce9758756c1069af6f383111dfb960cdbff2d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}]",Sarath Chandra Kothapalli,17726755,sarathchandra.knv31@gmail.com,User,,145,,60,24
406886796,Deep-learning-based registration example,"A simple example of deep-learning-based non-rigid image registration with the MNIST dataset, taking ideas from

- [An Unsupervised Learning Model for Deformable Medical Image Registration](http://openaccess.thecvf.com/content_cvpr_2018/papers/Balakrishnan_An_Unsupervised_Learning_CVPR_2018_paper.pdf)
- [Non-rigid image registration using fully convolutional networks with deep self-supervision](https://arxiv.org/pdf/1709.00799.pdf)

#### Framework
![framework](https://user-images.githubusercontent.com/17726755/79909835-44c63a00-843b-11ea-92cf-000249fc1afd.png)


An encoder-decoder network is trained to output a dense displacement field that is used to warp the moving image to align with the fixed image. I've used MNIST images of one class, same as that of the fixed image, for training and testing.

#### Sample results 
<img src=""https://user-images.githubusercontent.com/17726755/79903818-5efb1a80-8431-11ea-939f-96ef6a8af1bd.png"" width=200>  <img src=""https://user-images.githubusercontent.com/17726755/79905184-7dfaac00-8433-11ea-8bff-25cff72eba7c.png"" width=200> <img src=""https://user-images.githubusercontent.com/17726755/79906264-1ba2ab00-8435-11ea-97be-f9743024701d.png"" width=200>

#### Colab notebook
https://colab.research.google.com/drive/1fTzz1aT2sb8oAXRO1-dr6O_IR6dof36e

Training takes about 5 minutes on GPU.",False,2137,https://api.github.com/repos/dipy/dipy/pulls/2137,https://github.com/dipy/dipy/pull/2137,open,1017,1,11,17,13,13,2,0,"[{'name': 'state: work-in-progress'}, {'name': 'gsod2020'}]",2020-04-21 20:19:00+00:00,,0.0,,"[{'comment_id': 431471199, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471274, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471588, 'comment_body': 'All functions in this class missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 446165356, 'comment_body': 'What does ""FCN"" stand for? Could we spell this out in the class name?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446166737, 'comment_body': 'Please add back a newline at the end of the file:\r\n\r\n```suggestion\r\n        self.model.load_weights(filepath)\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 12, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446167672, 'comment_body': 'Is this something that would be worth implementing as library code?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446168670, 'comment_body': 'Would this little block of code be useful to implement as module code?', 'comment_created': datetime.datetime(2020, 6, 26, 13, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236110, 'comment_body': 'This figure is empty for me when I run this.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236524, 'comment_body': 'Maybe use `fig.savefig` instead?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446237359, 'comment_body': 'It looks like performance converges after much fewer epochs. Maybe set this to 25 for the purpose of the example and then add a comment that this could be increased to a larger number for more accurate results?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 559198651, 'comment_body': 'Really sorry for the late reply. I can be active from now on.\r\n\r\nThis was some custom architecture that I wrote for the POC. I’ve added a standard model ([U-Net](https://arxiv.org/abs/1505.04597)) and will be removing fcn.py.\r\n\r\n[dipy/nn/registration/unet.py](https://github.com/dipy/dipy/pull/2137/files#diff-b90df81deaadaf5daab47f409163c79c13ac6e03cd04a7f7622b030a89f2947c)', 'comment_created': datetime.datetime(2021, 1, 17, 15, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198826, 'comment_body': 'It’s definitely useful, but we need to handle several cases if we are planning to have this in the library. \r\nCurrent location of the class [dipy/nn/registration/dataloader.py\r\n](https://github.com/dipy/dipy/pull/2137/files#diff-71543d23c03c8f0a98683495f26868a66696e78cb0a61b8b4b922028bb8ca91c)\r\nThe function of the dataloader object is to feed batches of processed data to the model. The user needs to pass the entire dataset as input either as arrays (shape (num_images, H, W, …, num_channels))  or as a list of file paths, and the dataloader object performs some preprocessing (data transformations, adding dimensions, changing data types) on batches of data and feeds it to the model. Currently, this code only supports NumPy arrays as input, which will work for small datasets that can be loaded into the memory, but a general use case would be file paths as input.\r\n\r\nSome cases that we need to handle:\r\n1. NumPy arrays as input\r\n    1. Single static image and multiple moving images - All the moving images will be registered to this static image (moving shape (N, H, W, ..., C), static shape (H, W, ..., C))\r\n    2. Multiple static and moving images - every moving image has a different static image (moving shape (N, H, W, C), static shape (N, H, W, C))\r\n2. Lists of file paths as input\r\n    1. Single static image and multiple moving images\r\n    2. Multiple static and moving images\r\n    3. Different file extensions .npy, .h5, .nii, …', 'comment_created': datetime.datetime(2021, 1, 17, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198848, 'comment_body': 'This is only needed for single-channel images. Since most images are single-channel I also think it is useful to implement as library code. Do you mean something like this? Add the squeeze option in the predict method\r\n\r\n```python\r\nmoved = model.predict(data, squeeze=True)\r\n```', 'comment_created': datetime.datetime(2021, 1, 17, 15, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}]","[{'commit_sha': '96fbaf483a8e232e208d62fdb99bbaca62209ce5', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7587acd921c41bcff16f2600e10b4861a8c28e3b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc1f23d75ea9637ba35e5b67ea492e99dc056a2', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68722d13c129861ab7f5fab8a315f2844e7416cd', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328983d80e6741b6dd6449445f17aae8c4a2de80', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24cf40cf94a94eb2e68c04a346af0acc3921d82e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '568038d024fd94546ede34db705d60a11f95ac04', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fea652429fce2898e5111f2c22501d667fabbcb', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42664a3e25c97fa62718009a9d6b311e3b5983e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd404f64c286ff153059b2e3c95f743c8ba93119', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0d3fe6db9d244918aab02baa7a73776066588d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b66a6e7159a94140fa6aa71a10da420ccc46d0', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2429eab7068fa5ef7e35fa6920671bc15855375d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bfbe5357ba02eddcc54711c69b49ac4397bdd0d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5483c74a836e28a18a3008fe47d5b3e53005a30b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8550c6fdbae129f921a829c3519b0f898b3206', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a57ce9758756c1069af6f383111dfb960cdbff2d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}]",Sarath Chandra Kothapalli,17726755,sarathchandra.knv31@gmail.com,User,,145,,60,24
406886796,Deep-learning-based registration example,"A simple example of deep-learning-based non-rigid image registration with the MNIST dataset, taking ideas from

- [An Unsupervised Learning Model for Deformable Medical Image Registration](http://openaccess.thecvf.com/content_cvpr_2018/papers/Balakrishnan_An_Unsupervised_Learning_CVPR_2018_paper.pdf)
- [Non-rigid image registration using fully convolutional networks with deep self-supervision](https://arxiv.org/pdf/1709.00799.pdf)

#### Framework
![framework](https://user-images.githubusercontent.com/17726755/79909835-44c63a00-843b-11ea-92cf-000249fc1afd.png)


An encoder-decoder network is trained to output a dense displacement field that is used to warp the moving image to align with the fixed image. I've used MNIST images of one class, same as that of the fixed image, for training and testing.

#### Sample results 
<img src=""https://user-images.githubusercontent.com/17726755/79903818-5efb1a80-8431-11ea-939f-96ef6a8af1bd.png"" width=200>  <img src=""https://user-images.githubusercontent.com/17726755/79905184-7dfaac00-8433-11ea-8bff-25cff72eba7c.png"" width=200> <img src=""https://user-images.githubusercontent.com/17726755/79906264-1ba2ab00-8435-11ea-97be-f9743024701d.png"" width=200>

#### Colab notebook
https://colab.research.google.com/drive/1fTzz1aT2sb8oAXRO1-dr6O_IR6dof36e

Training takes about 5 minutes on GPU.",False,2137,https://api.github.com/repos/dipy/dipy/pulls/2137,https://github.com/dipy/dipy/pull/2137,open,1017,1,11,17,13,13,2,0,"[{'name': 'state: work-in-progress'}, {'name': 'gsod2020'}]",2020-04-21 20:19:00+00:00,,0.0,,"[{'comment_id': 431471199, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471274, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471588, 'comment_body': 'All functions in this class missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 446165356, 'comment_body': 'What does ""FCN"" stand for? Could we spell this out in the class name?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446166737, 'comment_body': 'Please add back a newline at the end of the file:\r\n\r\n```suggestion\r\n        self.model.load_weights(filepath)\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 12, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446167672, 'comment_body': 'Is this something that would be worth implementing as library code?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446168670, 'comment_body': 'Would this little block of code be useful to implement as module code?', 'comment_created': datetime.datetime(2020, 6, 26, 13, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236110, 'comment_body': 'This figure is empty for me when I run this.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236524, 'comment_body': 'Maybe use `fig.savefig` instead?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446237359, 'comment_body': 'It looks like performance converges after much fewer epochs. Maybe set this to 25 for the purpose of the example and then add a comment that this could be increased to a larger number for more accurate results?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 559198651, 'comment_body': 'Really sorry for the late reply. I can be active from now on.\r\n\r\nThis was some custom architecture that I wrote for the POC. I’ve added a standard model ([U-Net](https://arxiv.org/abs/1505.04597)) and will be removing fcn.py.\r\n\r\n[dipy/nn/registration/unet.py](https://github.com/dipy/dipy/pull/2137/files#diff-b90df81deaadaf5daab47f409163c79c13ac6e03cd04a7f7622b030a89f2947c)', 'comment_created': datetime.datetime(2021, 1, 17, 15, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198826, 'comment_body': 'It’s definitely useful, but we need to handle several cases if we are planning to have this in the library. \r\nCurrent location of the class [dipy/nn/registration/dataloader.py\r\n](https://github.com/dipy/dipy/pull/2137/files#diff-71543d23c03c8f0a98683495f26868a66696e78cb0a61b8b4b922028bb8ca91c)\r\nThe function of the dataloader object is to feed batches of processed data to the model. The user needs to pass the entire dataset as input either as arrays (shape (num_images, H, W, …, num_channels))  or as a list of file paths, and the dataloader object performs some preprocessing (data transformations, adding dimensions, changing data types) on batches of data and feeds it to the model. Currently, this code only supports NumPy arrays as input, which will work for small datasets that can be loaded into the memory, but a general use case would be file paths as input.\r\n\r\nSome cases that we need to handle:\r\n1. NumPy arrays as input\r\n    1. Single static image and multiple moving images - All the moving images will be registered to this static image (moving shape (N, H, W, ..., C), static shape (H, W, ..., C))\r\n    2. Multiple static and moving images - every moving image has a different static image (moving shape (N, H, W, C), static shape (N, H, W, C))\r\n2. Lists of file paths as input\r\n    1. Single static image and multiple moving images\r\n    2. Multiple static and moving images\r\n    3. Different file extensions .npy, .h5, .nii, …', 'comment_created': datetime.datetime(2021, 1, 17, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198848, 'comment_body': 'This is only needed for single-channel images. Since most images are single-channel I also think it is useful to implement as library code. Do you mean something like this? Add the squeeze option in the predict method\r\n\r\n```python\r\nmoved = model.predict(data, squeeze=True)\r\n```', 'comment_created': datetime.datetime(2021, 1, 17, 15, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}]","[{'commit_sha': '96fbaf483a8e232e208d62fdb99bbaca62209ce5', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7587acd921c41bcff16f2600e10b4861a8c28e3b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc1f23d75ea9637ba35e5b67ea492e99dc056a2', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68722d13c129861ab7f5fab8a315f2844e7416cd', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328983d80e6741b6dd6449445f17aae8c4a2de80', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24cf40cf94a94eb2e68c04a346af0acc3921d82e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '568038d024fd94546ede34db705d60a11f95ac04', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fea652429fce2898e5111f2c22501d667fabbcb', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42664a3e25c97fa62718009a9d6b311e3b5983e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd404f64c286ff153059b2e3c95f743c8ba93119', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0d3fe6db9d244918aab02baa7a73776066588d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b66a6e7159a94140fa6aa71a10da420ccc46d0', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2429eab7068fa5ef7e35fa6920671bc15855375d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bfbe5357ba02eddcc54711c69b49ac4397bdd0d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5483c74a836e28a18a3008fe47d5b3e53005a30b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8550c6fdbae129f921a829c3519b0f898b3206', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a57ce9758756c1069af6f383111dfb960cdbff2d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}]",Sarath Chandra Kothapalli,17726755,sarathchandra.knv31@gmail.com,User,,145,,60,24
406886796,Deep-learning-based registration example,"A simple example of deep-learning-based non-rigid image registration with the MNIST dataset, taking ideas from

- [An Unsupervised Learning Model for Deformable Medical Image Registration](http://openaccess.thecvf.com/content_cvpr_2018/papers/Balakrishnan_An_Unsupervised_Learning_CVPR_2018_paper.pdf)
- [Non-rigid image registration using fully convolutional networks with deep self-supervision](https://arxiv.org/pdf/1709.00799.pdf)

#### Framework
![framework](https://user-images.githubusercontent.com/17726755/79909835-44c63a00-843b-11ea-92cf-000249fc1afd.png)


An encoder-decoder network is trained to output a dense displacement field that is used to warp the moving image to align with the fixed image. I've used MNIST images of one class, same as that of the fixed image, for training and testing.

#### Sample results 
<img src=""https://user-images.githubusercontent.com/17726755/79903818-5efb1a80-8431-11ea-939f-96ef6a8af1bd.png"" width=200>  <img src=""https://user-images.githubusercontent.com/17726755/79905184-7dfaac00-8433-11ea-8bff-25cff72eba7c.png"" width=200> <img src=""https://user-images.githubusercontent.com/17726755/79906264-1ba2ab00-8435-11ea-97be-f9743024701d.png"" width=200>

#### Colab notebook
https://colab.research.google.com/drive/1fTzz1aT2sb8oAXRO1-dr6O_IR6dof36e

Training takes about 5 minutes on GPU.",False,2137,https://api.github.com/repos/dipy/dipy/pulls/2137,https://github.com/dipy/dipy/pull/2137,open,1017,1,11,17,13,13,2,0,"[{'name': 'state: work-in-progress'}, {'name': 'gsod2020'}]",2020-04-21 20:19:00+00:00,,0.0,,"[{'comment_id': 431471199, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471274, 'comment_body': 'Missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 431471588, 'comment_body': 'All functions in this class missing docstring ', 'comment_created': datetime.datetime(2020, 5, 27, 22, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BramshQamar', 'type': 'User'}, {'comment_id': 446165356, 'comment_body': 'What does ""FCN"" stand for? Could we spell this out in the class name?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446166737, 'comment_body': 'Please add back a newline at the end of the file:\r\n\r\n```suggestion\r\n        self.model.load_weights(filepath)\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 12, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446167672, 'comment_body': 'Is this something that would be worth implementing as library code?', 'comment_created': datetime.datetime(2020, 6, 26, 12, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446168670, 'comment_body': 'Would this little block of code be useful to implement as module code?', 'comment_created': datetime.datetime(2020, 6, 26, 13, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236110, 'comment_body': 'This figure is empty for me when I run this.', 'comment_created': datetime.datetime(2020, 6, 26, 14, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446236524, 'comment_body': 'Maybe use `fig.savefig` instead?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 446237359, 'comment_body': 'It looks like performance converges after much fewer epochs. Maybe set this to 25 for the purpose of the example and then add a comment that this could be increased to a larger number for more accurate results?', 'comment_created': datetime.datetime(2020, 6, 26, 14, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'arokem', 'type': 'User'}, {'comment_id': 559198651, 'comment_body': 'Really sorry for the late reply. I can be active from now on.\r\n\r\nThis was some custom architecture that I wrote for the POC. I’ve added a standard model ([U-Net](https://arxiv.org/abs/1505.04597)) and will be removing fcn.py.\r\n\r\n[dipy/nn/registration/unet.py](https://github.com/dipy/dipy/pull/2137/files#diff-b90df81deaadaf5daab47f409163c79c13ac6e03cd04a7f7622b030a89f2947c)', 'comment_created': datetime.datetime(2021, 1, 17, 15, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198826, 'comment_body': 'It’s definitely useful, but we need to handle several cases if we are planning to have this in the library. \r\nCurrent location of the class [dipy/nn/registration/dataloader.py\r\n](https://github.com/dipy/dipy/pull/2137/files#diff-71543d23c03c8f0a98683495f26868a66696e78cb0a61b8b4b922028bb8ca91c)\r\nThe function of the dataloader object is to feed batches of processed data to the model. The user needs to pass the entire dataset as input either as arrays (shape (num_images, H, W, …, num_channels))  or as a list of file paths, and the dataloader object performs some preprocessing (data transformations, adding dimensions, changing data types) on batches of data and feeds it to the model. Currently, this code only supports NumPy arrays as input, which will work for small datasets that can be loaded into the memory, but a general use case would be file paths as input.\r\n\r\nSome cases that we need to handle:\r\n1. NumPy arrays as input\r\n    1. Single static image and multiple moving images - All the moving images will be registered to this static image (moving shape (N, H, W, ..., C), static shape (H, W, ..., C))\r\n    2. Multiple static and moving images - every moving image has a different static image (moving shape (N, H, W, C), static shape (N, H, W, C))\r\n2. Lists of file paths as input\r\n    1. Single static image and multiple moving images\r\n    2. Multiple static and moving images\r\n    3. Different file extensions .npy, .h5, .nii, …', 'comment_created': datetime.datetime(2021, 1, 17, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}, {'comment_id': 559198848, 'comment_body': 'This is only needed for single-channel images. Since most images are single-channel I also think it is useful to implement as library code. Do you mean something like this? Add the squeeze option in the predict method\r\n\r\n```python\r\nmoved = model.predict(data, squeeze=True)\r\n```', 'comment_created': datetime.datetime(2021, 1, 17, 15, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sarathknv', 'type': 'User'}]","[{'commit_sha': '96fbaf483a8e232e208d62fdb99bbaca62209ce5', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7587acd921c41bcff16f2600e10b4861a8c28e3b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc1f23d75ea9637ba35e5b67ea492e99dc056a2', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68722d13c129861ab7f5fab8a315f2844e7416cd', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328983d80e6741b6dd6449445f17aae8c4a2de80', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24cf40cf94a94eb2e68c04a346af0acc3921d82e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '568038d024fd94546ede34db705d60a11f95ac04', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fea652429fce2898e5111f2c22501d667fabbcb', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42664a3e25c97fa62718009a9d6b311e3b5983e', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd404f64c286ff153059b2e3c95f743c8ba93119', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0d3fe6db9d244918aab02baa7a73776066588d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b66a6e7159a94140fa6aa71a10da420ccc46d0', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2429eab7068fa5ef7e35fa6920671bc15855375d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bfbe5357ba02eddcc54711c69b49ac4397bdd0d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5483c74a836e28a18a3008fe47d5b3e53005a30b', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8550c6fdbae129f921a829c3519b0f898b3206', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a57ce9758756c1069af6f383111dfb960cdbff2d', 'committer_username': 'sarathknv', 'committer_name': 'Sarath Chandra Kothapalli', 'committer_email': 'sarathchandra.knv31@gmail.com', 'commit_date': datetime.datetime(2016, 3, 8, 15, 34, 17, tzinfo=datetime.timezone.utc)}]",Sarath Chandra Kothapalli,17726755,sarathchandra.knv31@gmail.com,User,,145,,60,24

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
505209,dipy,dipy/dipy,Python,434,697,54,163,14311,186,25,52,"[{'id': 406886796, 'number': 2137, 'closed': None, 'created': datetime.datetime(2020, 4, 21, 20, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1017, 'deletions': 1, 'state': 'open'}, {'id': 385764287, 'number': 2077, 'closed': datetime.datetime(2020, 3, 19, 15, 53, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 19, 0, 48, tzinfo=datetime.timezone.utc), 'time_taken': 852744.0, 'time_delta': '9 days, 20:52:24', 'additions': 15, 'deletions': 15, 'state': 'closed'}]"
