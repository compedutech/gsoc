pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
669680039,Renamed fields in `dbvalue`,"Fixes https://github.com/kanidm/kanidm/issues/473

- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)

How do I check that the shortened names are actually what's getting serialized, and not the variant names directly? Also, There are some fields that I still can't infer the meaning of, help appreciated :)",True,477,https://api.github.com/repos/kanidm/kanidm/pulls/477,https://github.com/kanidm/kanidm/pull/477,closed,141,107,4,2,3,15,0,0,[],2021-06-14 15:48:09+00:00,2021-06-15 22:07:43+00:00,109174.0,"1 day, 6:19:34","[{'comment_id': 651356671, 'comment_body': 'Domain ID, Server ID, TimeStamp', 'comment_created': datetime.datetime(2021, 6, 15, 0, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651356865, 'comment_body': ""Because we may need to change the on disk format - it doesn't matter if they are equivalent, we need them seperate so we have the flexibility to change these in the future if they diverge and we need to perform transformations. "", 'comment_created': datetime.datetime(2021, 6, 15, 0, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651356895, 'comment_body': 'label', 'comment_created': datetime.datetime(2021, 6, 15, 0, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651356959, 'comment_body': 'key or secret', 'comment_created': datetime.datetime(2021, 6, 15, 0, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651356978, 'comment_body': 'label', 'comment_created': datetime.datetime(2021, 6, 15, 0, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357043, 'comment_body': 'id rather than cred id maybe', 'comment_created': datetime.datetime(2021, 6, 15, 0, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357129, 'comment_body': 'verified rather than is_verified I think ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357291, 'comment_body': 'd for data here I think, email address is already clear from the struct name.', 'comment_created': datetime.datetime(2021, 6, 15, 0, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357342, 'comment_body': 'SyntaxType', 'comment_created': datetime.datetime(2021, 6, 15, 0, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357377, 'comment_body': 'IndexType', 'comment_created': datetime.datetime(2021, 6, 15, 0, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357400, 'comment_body': 'Reference', 'comment_created': datetime.datetime(2021, 6, 15, 0, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357439, 'comment_body': 'Credential', 'comment_created': datetime.datetime(2021, 6, 15, 0, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651357589, 'comment_body': 'I\'m about to rename this to ""SecretValue"" in my oauth2 pr, so change RadiusCred to SecretValue, but leave it as RU on the db format. ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651898972, 'comment_body': ""I'm going to use `key` because `s` is already used for `step`."", 'comment_created': datetime.datetime(2021, 6, 15, 15, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}, {'comment_id': 651901660, 'comment_body': ""Why not use a tuple struct then? (I'm not sure how this would effect serialization though.)\r\n\r\nEDIT: [Tuple structs aren't `serde` compatible](https://stackoverflow.com/questions/42051216/how-to-use-serde-to-deserialize-a-tuple-struct-from-json-named-values-instead). I'll revert it to `d`."", 'comment_created': datetime.datetime(2021, 6, 15, 15, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}]","[{'commit_sha': '2c1db7e738f6a9f9d02ea05ae288507b18a052b9', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5485cb353d79074ba04bc486f90f46eb9e6e1ff2', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}]",Quinn,57224050,,User,,27,,18,22
669943564,`kanidm_client` bool/return values,"Fixes https://github.com/kanidm/kanidm/issues/472

- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [ ] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)

My changes were able to satisfy the type checker but I'm having trouble with some JSON somewhere getting deserialized where it expects a `unit` and finds a `bool`. I need help with finding the cause of this and how to fix it. Thanks!",True,479,https://api.github.com/repos/kanidm/kanidm/pulls/479,https://github.com/kanidm/kanidm/pull/479,closed,102,132,4,4,4,3,0,0,[],2021-06-14 23:37:03+00:00,2021-06-17 02:59:34+00:00,184951.0,"2 days, 3:22:31","[{'comment_id': 651360209, 'comment_body': ""As much as I love the cleanups, maybe we should all get better at cleaning them in seperate PR's so it's clearer to review. I'm as much guilty, so I need to improve too :) "", 'comment_created': datetime.datetime(2021, 6, 15, 0, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651360406, 'comment_body': 'It may be worth another ticket to remove OperationResponse as I think it does nothing. ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 652001346, 'comment_body': 'Agreed, I can open a ticket once this gets merged to avoid conflicts', 'comment_created': datetime.datetime(2021, 6, 15, 17, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}]","[{'commit_sha': 'aedf77d4b267ea170d9c16f5e2fa4b0d3b388cfc', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c5cc00a3e55db1b04a50b8acc7e1779eeca797a', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff846a7d448cb91f2af868cd4b62f4900ec0b736', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9884e69860c0ef9ae266151c69c08a4c8c66006', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}]",Quinn,57224050,,User,,27,,18,22
671788075,`kanidm_tools` cleanup,"Fixes #my desire to have clean code

- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)

I realize this is not a very fun PR to review, but I wanted an excuse to dig through the code and clean up things. 

90% of the changes are:
* Changing basic closures in `map`s like `|s: &str| s.to_string()` to `str::to_string`.
* Adding in `unwrap_or_else` statements where appropriate.
* Removing type hints that were guaranteed unnecessary.

This passes all tests and clippy, and I also made sure to not wrap any `return`, `continue`, or `break` statements in closures.",True,482,https://api.github.com/repos/kanidm/kanidm/pulls/482,https://github.com/kanidm/kanidm/pull/482,closed,102,167,8,1,1,0,0,0,[],2021-06-16 18:55:47+00:00,2021-06-17 00:03:48+00:00,18481.0,5:08:01,[],"[{'commit_sha': '79a0e99faf7f29b64be81225a1d7f8430e389b97', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}]",Quinn,57224050,,User,,27,,18,22
673690420,Removed `OperationResponse`,"Fixes #484 

- [x] cargo fmt has been run
- [x] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)

This is going to have some minor conflicts with https://github.com/kanidm/kanidm/pull/485, just a heads up.",True,489,https://api.github.com/repos/kanidm/kanidm/pulls/489,https://github.com/kanidm/kanidm/pull/489,closed,15,46,3,1,1,0,0,0,[],2021-06-18 19:48:08+00:00,2021-06-21 02:32:40+00:00,197072.0,"2 days, 6:44:32",[],"[{'commit_sha': 'c5f043fe011cdf6ae73c2d563be37b988562acfe', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}]",Quinn,57224050,,User,,27,,18,22
699852471,Customized `tracing` for `tide::Middleware` logging,"Fixes #453 

- [x] cargo fmt has been run
- [ ] cargo clippy has been run
- [ ] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)

Started the process of integrating my custom `tracing` subscriber into `kanidmd`, specifically with `tide` requests and collecting logs from request all the way to response.

I need help figuring out how to run it in a way that would produce logs. I tried running this command from awhile back, but it doesn't actually produce logs so I don't know if I'm initializing the subscriber in the right place.
```
cargo run -- recover_account -c ./server.toml -n admin
```",True,544,https://api.github.com/repos/kanidm/kanidm/pulls/544,https://github.com/kanidm/kanidm/pull/544,closed,3491,2019,46,15,13,20,0,0,[],2021-07-29 21:26:27+00:00,2021-08-19 01:04:24+00:00,1741077.0,"20 days, 3:37:57","[{'comment_id': 679588092, 'comment_body': ""Needs more '🚨 ' emoji. "", 'comment_created': datetime.datetime(2021, 7, 30, 1, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 679588193, 'comment_body': 'Probably needs a better name than just middleware. ', 'comment_created': datetime.datetime(2021, 7, 30, 1, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 679590002, 'comment_body': ""What type is writer here? I'm curious how this works :) "", 'comment_created': datetime.datetime(2021, 7, 30, 1, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 679620883, 'comment_body': '^ This, given that other middlewares might happen in the future.', 'comment_created': datetime.datetime(2021, 7, 30, 3, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 679621777, 'comment_body': ""Is there reason you're reimplementing LogTag in `src/lib/audit.rs` which seems to have very similar values?"", 'comment_created': datetime.datetime(2021, 7, 30, 3, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 679623151, 'comment_body': ""Const's should probably be in that place where @Firstyear documents past decisions about numbers, and I'm not sure the default should be all-0's - isn't that the Anonymous user uuid?"", 'comment_created': datetime.datetime(2021, 7, 30, 3, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 679632547, 'comment_body': ""I'm not sure here, the all 0000 is pretty clear, but it is also likely to cause confusion if someone is grepping for anonymous. https://github.com/kanidm/kanidm/tree/master/kanidmd/src/lib/constants "", 'comment_created': datetime.datetime(2021, 7, 30, 4, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 679632649, 'comment_body': ""i think he plans to drop the content of audit.rs, which I'm okay with. "", 'comment_created': datetime.datetime(2021, 7, 30, 4, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 679962739, 'comment_body': ""It's just a `String`, I did it like that since `to_rfc3339` returns a `String` and I would've appended it to an empty `String` anyways. I'm going to make this clearer in the next commit, though."", 'comment_created': datetime.datetime(2021, 7, 30, 14, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}, {'comment_id': 679967643, 'comment_body': ""I did it so I could have similar tags on my test branch, but either this or the `LogTag` type is going to go. What's important is we have some `enum` type that implements `tracing_tree::subscriber::EventTagSet`"", 'comment_created': datetime.datetime(2021, 7, 30, 14, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}, {'comment_id': 680286008, 'comment_body': 'I assume this is a testing thing? (also all the double-ups of `admin_error` and `ladmin_error`)', 'comment_created': datetime.datetime(2021, 7, 31, 1, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 680286951, 'comment_body': ""I'm trying to understand why `trace_span!()` is used throughout instead of `span!()` - using `trace_span!()` requires specifying the target whereas `span!()` just the level and it automagically identifies the module it's in. Have I missed something obvious?  That's the most likely outcome... 😄 "", 'comment_created': datetime.datetime(2021, 7, 31, 1, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 685395327, 'comment_body': ""> I assume this is a testing thing? (also all the double-ups of `admin_error` and `ladmin_error`)\r\n\r\nYeah, I omitted `res` for testing purposes because it was polluting the look of the log which is what I'm trying to get a sense for right now.\r\n\r\nThe double ups are because I'm just adding my logs in parallel right now, the `ladmin_error`'s will be removed at a later time :)"", 'comment_created': datetime.datetime(2021, 8, 9, 17, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}, {'comment_id': 685401073, 'comment_body': ""`trace_span!()` doesn't require specifying the target, it only requires a name for the span,. I just happened to arbitrarily chose to be the the name of the function because I thought it was the most descriptive."", 'comment_created': datetime.datetime(2021, 8, 9, 17, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}, {'comment_id': 685527557, 'comment_body': ""So, what's the functional difference between `trace_span` and `span`, when we're using it to trace the function the same way span does? 😄"", 'comment_created': datetime.datetime(2021, 8, 9, 21, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 686190143, 'comment_body': 'With `span`, you have the specify the level, and `trace_span` is just shorthand for specifying `span` at the trace level.\r\n\r\nhttps://docs.rs/tracing/0.1.26/tracing/index.html#shorthand-macros', 'comment_created': datetime.datetime(2021, 8, 10, 17, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'QnnOkabayashi', 'type': 'User'}, {'comment_id': 686361937, 'comment_body': 'Thanks 😄 ', 'comment_created': datetime.datetime(2021, 8, 10, 22, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yaleman', 'type': 'User'}, {'comment_id': 690800929, 'comment_body': ""We need to set the eventid in a header, so that's probably a different piece of middleware that needs to be written, but that's not for this PR I think. "", 'comment_created': datetime.datetime(2021, 8, 17, 23, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 690802031, 'comment_body': ""You should consider adding these to prelude instead so you don't need to import them everywhere. :) "", 'comment_created': datetime.datetime(2021, 8, 18, 0, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 690802762, 'comment_body': ""It doesn't XD\r\n\r\nI'm going to fix it this week, I have 4 clippy lints left that need fixing and this is one. "", 'comment_created': datetime.datetime(2021, 8, 18, 0, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}]","[{'commit_sha': 'b37e9912a334c5533d7fda330cc99f9b52e89a24', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f6611b5d42d0fb50b7908f26fc250dcbc2c2c98', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569e7d28b873edffab0c7c6fd8bf77db7608d152', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7ad7a42149d07ce86799a0134405a038a25208d', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25b63aaad2a3e4c5b3c474eddf530f5a5547b977', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c5d4b1722605306a63ce2c207b625e12abc5e0', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de655048ea33c4fe5cff0a79899bf99a04cd7303', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7476a8a0506433f029544f15f4fe196b72a763d6', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ec2539ce842fba7a100773092857ec49fba194', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184e83efcb71fca91f2094ba19cd7f578000bb18', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ccaa19f69923228909d8909f293a0465e8a1dad', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e216a7c56b3573c393797f31f3834bec0cc3ec2b', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8b4df0ff87166aa09e03cf17ac8cba0092ddcf6', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3cc01dd01326d8324b5bda94d1769651696da75', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0a00e8938b89c822a12920a012333bc882ab796', 'committer_username': 'QnnOkabayashi', 'committer_name': 'Quinn', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 31, 13, 40, 32, tzinfo=datetime.timezone.utc)}]",Quinn,57224050,,User,,27,,18,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
168782501,kanidm,kanidm/kanidm,Rust,172,2532,22,87,2020,201,13,8,"[{'id': 762754689, 'number': 605, 'closed': datetime.datetime(2023, 3, 28, 5, 34, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 20, 22, 25, 41, tzinfo=datetime.timezone.utc), 'time_taken': 45212904.0, 'time_delta': '523 days, 7:08:24', 'additions': 93, 'deletions': 16, 'state': 'closed'}, {'id': 754772671, 'number': 593, 'closed': datetime.datetime(2021, 10, 11, 4, 49, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 10, 20, 6, tzinfo=datetime.timezone.utc), 'time_taken': 31413.0, 'time_delta': '8:43:33', 'additions': 279, 'deletions': 376, 'state': 'closed'}, {'id': 747976317, 'number': 585, 'closed': datetime.datetime(2021, 10, 1, 23, 2, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 22, 16, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2749.0, 'time_delta': '0:45:49', 'additions': 50, 'deletions': 53, 'state': 'closed'}, {'id': 716367246, 'number': 569, 'closed': datetime.datetime(2021, 8, 21, 4, 20, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 1, 25, 3, tzinfo=datetime.timezone.utc), 'time_taken': 96943.0, 'time_delta': '1 day, 2:55:43', 'additions': 476, 'deletions': 641, 'state': 'closed'}, {'id': 699852471, 'number': 544, 'closed': datetime.datetime(2021, 8, 19, 1, 4, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 21, 26, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1741077.0, 'time_delta': '20 days, 3:37:57', 'additions': 3491, 'deletions': 2019, 'state': 'closed'}, {'id': 678244796, 'number': 497, 'closed': datetime.datetime(2021, 7, 28, 18, 9, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 0, 40, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2827698.0, 'time_delta': '32 days, 17:28:18', 'additions': 425, 'deletions': 43, 'state': 'closed'}, {'id': 673690420, 'number': 489, 'closed': datetime.datetime(2021, 6, 21, 2, 32, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 19, 48, 8, tzinfo=datetime.timezone.utc), 'time_taken': 197072.0, 'time_delta': '2 days, 6:44:32', 'additions': 15, 'deletions': 46, 'state': 'closed'}, {'id': 671788075, 'number': 482, 'closed': datetime.datetime(2021, 6, 17, 0, 3, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 18, 55, 47, tzinfo=datetime.timezone.utc), 'time_taken': 18481.0, 'time_delta': '5:08:01', 'additions': 102, 'deletions': 167, 'state': 'closed'}, {'id': 669943564, 'number': 479, 'closed': datetime.datetime(2021, 6, 17, 2, 59, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 23, 37, 3, tzinfo=datetime.timezone.utc), 'time_taken': 184951.0, 'time_delta': '2 days, 3:22:31', 'additions': 102, 'deletions': 132, 'state': 'closed'}, {'id': 669680039, 'number': 477, 'closed': datetime.datetime(2021, 6, 15, 22, 7, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 15, 48, 9, tzinfo=datetime.timezone.utc), 'time_taken': 109174.0, 'time_delta': '1 day, 6:19:34', 'additions': 141, 'deletions': 107, 'state': 'closed'}, {'id': 661148711, 'number': 467, 'closed': datetime.datetime(2021, 8, 19, 16, 53, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 19, 6, 27, tzinfo=datetime.timezone.utc), 'time_taken': 6644805.0, 'time_delta': '76 days, 21:46:45', 'additions': 395, 'deletions': 220, 'state': 'closed'}, {'id': 606811157, 'number': 399, 'closed': datetime.datetime(2021, 10, 10, 15, 40, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 1, 3, 27, 46, tzinfo=datetime.timezone.utc), 'time_taken': 16632762.0, 'time_delta': '192 days, 12:12:42', 'additions': 98, 'deletions': 0, 'state': 'closed'}]"
