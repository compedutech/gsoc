pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
418659691,Initial PR,Writing basic web app.,True,1,https://api.github.com/repos/shogun-toolbox/applications/pulls/1,https://github.com/shogun-toolbox/applications/pull/1,closed,158776,0,97,27,28,142,0,0,[],2020-05-15 15:33:45+00:00,2020-08-13 10:46:02+00:00,7758737.0,"89 days, 19:12:17","[{'comment_id': 426051309, 'comment_body': 'See also https://github.com/shogun-toolbox/shogun/blob/develop/.gitignore', 'comment_created': datetime.datetime(2020, 5, 15, 21, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426051559, 'comment_body': 'could you slight change the folder structure, and create a folder `gsoc_application_projects/2020/influenza` ?', 'comment_created': datetime.datetime(2020, 5, 15, 21, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426051841, 'comment_body': 'where do these come from?', 'comment_created': datetime.datetime(2020, 5, 15, 21, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426052053, 'comment_body': 'Id suggest to not have these....all this stuff is kind of unrelated', 'comment_created': datetime.datetime(2020, 5, 15, 21, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426052174, 'comment_body': 'do you need all of those or is this copy pasted?', 'comment_created': datetime.datetime(2020, 5, 15, 21, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426052714, 'comment_body': 'ah sorry I realise now that these are the wiki search queries?', 'comment_created': datetime.datetime(2020, 5, 15, 21, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426052949, 'comment_body': 'maybe respect the 80 char limit', 'comment_created': datetime.datetime(2020, 5, 15, 21, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426053373, 'comment_body': 'I suggest for PRs ... just dont commit code that you dont need instead of submitting commented out code', 'comment_created': datetime.datetime(2020, 5, 15, 21, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 426106682, 'comment_body': 'Yes, sure.\r\n', 'comment_created': datetime.datetime(2020, 5, 16, 1, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 426106734, 'comment_body': ""I'll add these too?\r\n"", 'comment_created': datetime.datetime(2020, 5, 16, 1, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 426106859, 'comment_body': ""Yes, these are the keywords(names of articles) who's pageviews we will be using as features in the regression."", 'comment_created': datetime.datetime(2020, 5, 16, 2, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 426107053, 'comment_body': ""No, this wasn't copy-pasted. After installing all the dependencies as and when I needed them while writing the code, I did a simple\r\n```\r\npip freeze > requirements.txt\r\n```\r\nto generate this file.\r\nDo some of them appear to not be useful?"", 'comment_created': datetime.datetime(2020, 5, 16, 2, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 426107088, 'comment_body': ""Yes, okay. I'll wrap the line."", 'comment_created': datetime.datetime(2020, 5, 16, 2, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 426107182, 'comment_body': ""Okay, I'll have this removed.\r\n"", 'comment_created': datetime.datetime(2020, 5, 16, 2, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 426124361, 'comment_body': 'I guess you can just do a round of pep8 if that is what we are aiming for as a standard?', 'comment_created': datetime.datetime(2020, 5, 16, 6, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 426124486, 'comment_body': 'Btw, it might have changed, but isn’t the pythonic thing to do with open(filename, “r”) as file?', 'comment_created': datetime.datetime(2020, 5, 16, 6, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 426124633, 'comment_body': 'Austria  is probably not de, i think it’s at?That’s Germany no? Or is it the same? Same with Belgium (be)', 'comment_created': datetime.datetime(2020, 5, 16, 6, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 426124874, 'comment_body': 'They all seem pretty standard to me. I guess they can be a bit restrictive. Some of these are probably just Flask direct dependencies and you can probably get away with a lower version? Then again you would deploy this in a docker env, so it doesn’t matter if the versions are super restrictive', 'comment_created': datetime.datetime(2020, 5, 16, 6, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 426133294, 'comment_body': ""@gf712 these variables are used to access Wikipedia's websites (e.g. `de.wikipedia.org`). The prefix refers to the language spoken. "", 'comment_created': datetime.datetime(2020, 5, 16, 8, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 426136200, 'comment_body': 'Yes,\n`de` refers to German\n`nl` is Dutch\nAnd `it` is Italian', 'comment_created': datetime.datetime(2020, 5, 16, 9, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 426137786, 'comment_body': 'Ok, should I do it that way? .open()  is a function of the pathlib Path class.', 'comment_created': datetime.datetime(2020, 5, 16, 9, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427147990, 'comment_body': 'what is this notebook for?', 'comment_created': datetime.datetime(2020, 5, 19, 9, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427148269, 'comment_body': '`import shogun as sg`', 'comment_created': datetime.datetime(2020, 5, 19, 9, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427148511, 'comment_body': 'it would be better if you used the new API here, so this import can be removed', 'comment_created': datetime.datetime(2020, 5, 19, 9, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427148685, 'comment_body': '`sg.create_features` ....', 'comment_created': datetime.datetime(2020, 5, 19, 9, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427148837, 'comment_body': '`g.create_machine`  ... check the meta examples on how it all works', 'comment_created': datetime.datetime(2020, 5, 19, 9, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427149011, 'comment_body': 'Please don do things like this. Either put a docstring or not, but no empty ones pls', 'comment_created': datetime.datetime(2020, 5, 19, 9, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427168543, 'comment_body': ""may be worth re-writing/re-nameing such that that's immediately obvious"", 'comment_created': datetime.datetime(2020, 5, 19, 9, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 427168737, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 5, 19, 9, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 427172309, 'comment_body': '**e**xploratory **d**ata **a**nalysis ... I suggest you rename to make that obvious', 'comment_created': datetime.datetime(2020, 5, 19, 9, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 427178427, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 19, 9, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427186536, 'comment_body': ""Oh okay, should I make another dictionary storing the language names and codes? Unfortunately, the codes will need to remain de, nl and it since that is what wikipedia uses in its API.\r\n\r\nThere is something I can do though:\r\n```\r\nlanguage = {'austria':'german',\r\n\t'belgium':'dutch',\r\n\t'germany':'german',\r\n\t'italy':'italian',\r\n\t'netherlands':'dutch'}\r\n\r\nprefix = {'german':'de'\r\n\t'dutch':'nl'\r\n\t'italian':'it'}\r\n```\r\nHowever, then to access the prefix, I'll need to use `prefix[language[country]]`. I thought that might get a little cumbersome. Should I implement it that way?\r\n"", 'comment_created': datetime.datetime(2020, 5, 19, 10, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427186963, 'comment_body': ""Okay, I'll do that."", 'comment_created': datetime.datetime(2020, 5, 19, 10, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427187473, 'comment_body': 'Okay will do that.\r\n', 'comment_created': datetime.datetime(2020, 5, 19, 10, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427188147, 'comment_body': 'That was left blank by mistake, I am supposed to fill it with basic data about the file. Sorry.', 'comment_created': datetime.datetime(2020, 5, 19, 10, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427195659, 'comment_body': ""Should I use `read_csv()` to read the files? Or is what I'm doing with pandas fine?\r\nAsking because I remember reading somewhere that the file reading implementation in shogun is a little slow/buggy and so it is advised to use some external library for that."", 'comment_created': datetime.datetime(2020, 5, 19, 10, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427196647, 'comment_body': 'imo pandas is fine, in particular if you want to later on move from csv to sql', 'comment_created': datetime.datetime(2020, 5, 19, 10, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427218389, 'comment_body': ""I'm a little stuck, I am using `python 3.5` and have the `shogun 6.1.3` installed from conda-forge using conda.\r\nHowever when I replace the old API with a new one, I get the following error:\r\n```\r\nfeatures_train = sg.create_features(util.load_features(file_path).T)\r\nAttributeError: module 'shogun' has no attribute 'create_features'\r\n```\r\nIs there something I am missing?"", 'comment_created': datetime.datetime(2020, 5, 19, 11, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427223777, 'comment_body': 'I see, the suggestion is only compatible with the latest develop. ', 'comment_created': datetime.datetime(2020, 5, 19, 11, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427227600, 'comment_body': ""So, it's not possible to use conda to install shogun? What should I do?"", 'comment_created': datetime.datetime(2020, 5, 19, 11, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427239577, 'comment_body': 'You could compile shogun? Is there a reason why you are using the version from conda?', 'comment_created': datetime.datetime(2020, 5, 19, 11, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427278256, 'comment_body': 'I will need to upload the model to the web tool, so on the virtual environment of the server, I guess the only way to install shogun is conda or pip right?\r\n(I will need to import shogun there too to use the model when I un-pickle it)\r\nWill it be possible to upload the entire source code and compile it on the server?\r\n', 'comment_created': datetime.datetime(2020, 5, 19, 12, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427283617, 'comment_body': 'Yes. I assume you will be using docker for the environment? You can just build it in the docker image. Btw for serialisation you mention pickle, but I think using shoguns JSON serialiser is safer', 'comment_created': datetime.datetime(2020, 5, 19, 13, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427286394, 'comment_body': ""Oh okay fine.\r\nI'll compile and install shogun.\r\n"", 'comment_created': datetime.datetime(2020, 5, 19, 13, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 427460544, 'comment_body': 'You will definitely need to compile the dev version, as you want to use your added model ...\r\nMake sure to re-use the docker image and scripts we have, it compiles out of the box on there ...', 'comment_created': datetime.datetime(2020, 5, 19, 17, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427460706, 'comment_body': 'no problem at all, I am just nitpicking a bit to keep things tidy :)', 'comment_created': datetime.datetime(2020, 5, 19, 17, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 430437530, 'comment_body': 'Could it be possible to fetch this information from like a configuration file rather than keeping everything hard-coded?', 'comment_created': datetime.datetime(2020, 5, 26, 14, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 430437900, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 5, 26, 14, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 430439453, 'comment_body': 'Just a quick question here, are these files really needed? Would it be possible to fetch them from the dataset submodule rather than copying them?', 'comment_created': datetime.datetime(2020, 5, 26, 14, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 431021427, 'comment_body': 'Yes, that sounds like a better idea.\r\n', 'comment_created': datetime.datetime(2020, 5, 27, 10, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 431022112, 'comment_body': 'Yes, we can fetch it from there for now. But it will have to be uploaded to the web(only the web directory will be uploaded) So then later it may be a problem?', 'comment_created': datetime.datetime(2020, 5, 27, 10, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 431030226, 'comment_body': ""I'm sorry, should I use this [docker image](https://hub.docker.com/r/shogun/shogun-dev) or compile manually as mentioned [here](https://www.shogun-toolbox.org/install#manual)?"", 'comment_created': datetime.datetime(2020, 5, 27, 10, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 431032977, 'comment_body': 'I think you should create a Dockerfile that uses `FROM shogun-dev:latest` and then yes, clone shogun as per docs and compile with those commands', 'comment_created': datetime.datetime(2020, 5, 27, 11, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435280298, 'comment_body': ""These things here must also come from a config file imo. I've seen that there are other of these entries in the code below which would need to be updated. "", 'comment_created': datetime.datetime(2020, 6, 4, 13, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 435281316, 'comment_body': 'Also these should go into the config file (it will become easier to extend this to there countries). ', 'comment_created': datetime.datetime(2020, 6, 4, 14, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 435282884, 'comment_body': 'These are interesting! :) It would be better to document them a bit such to better understand what they should return. ', 'comment_created': datetime.datetime(2020, 6, 4, 14, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 435283597, 'comment_body': 'Not sure if adding polynomial features could be worth it. @lgoetz any opinions?', 'comment_created': datetime.datetime(2020, 6, 4, 14, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 435910749, 'comment_body': 'Like I said before, I would keep it simple, so no. But happy to be convinced otherwise if they give you an improvement', 'comment_created': datetime.datetime(2020, 6, 5, 13, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 435914541, 'comment_body': ""I'm confused, you've given up on the ridge regression now?"", 'comment_created': datetime.datetime(2020, 6, 5, 13, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 435918078, 'comment_body': ""as we've discussed (email/meeting), you shouldn't really have to do a manual feature selection. By how much do your polynomial features improve the model?"", 'comment_created': datetime.datetime(2020, 6, 5, 13, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 435921481, 'comment_body': 'why is this called sample.py?', 'comment_created': datetime.datetime(2020, 6, 5, 13, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 435923456, 'comment_body': 'If you copy-paste content from PyPA, you need to reference it!', 'comment_created': datetime.datetime(2020, 6, 5, 13, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 435924442, 'comment_body': 'I agree with Giovanni here 100%', 'comment_created': datetime.datetime(2020, 6, 5, 13, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 435931181, 'comment_body': ""Yes, I have to remove this. I'm sorry this isn't the final push for today, I'll have it removed, just that I was testing something out and so had to push once. It shall be rectified.\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 13, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 435931828, 'comment_body': ""Yes , I'll do this.\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 13, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 435932240, 'comment_body': ""Yes. I'll add some documentation related to the API.\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 13, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 435932555, 'comment_body': ""Yes, I'll have that section removed."", 'comment_created': datetime.datetime(2020, 6, 5, 13, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 435935136, 'comment_body': 'I had taken that decision on the basis of the consistently lower MSE I got. However, I am yet to find out how their performances compare when using the pearson correlation coefficient.', 'comment_created': datetime.datetime(2020, 6, 5, 13, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 435935866, 'comment_body': 'This was the code I had used to check if shogun was working fine. Its playing the role of a trivial example here. Should I delete it now?', 'comment_created': datetime.datetime(2020, 6, 5, 13, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 435936145, 'comment_body': ""Yes, I forgot to do that, I'll make that change."", 'comment_created': datetime.datetime(2020, 6, 5, 13, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 436049318, 'comment_body': 'does this actually work? This class has shogun models as members ....', 'comment_created': datetime.datetime(2020, 6, 5, 17, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436049557, 'comment_body': 'just `apply`', 'comment_created': datetime.datetime(2020, 6, 5, 17, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436049783, 'comment_body': '(should work and is compatible with new api, `apply_regression` is not', 'comment_created': datetime.datetime(2020, 6, 5, 17, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436050527, 'comment_body': 'this could technically be done with shogun as well ... (though not necessary of course)', 'comment_created': datetime.datetime(2020, 6, 5, 17, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436050880, 'comment_body': 'why not make a python test from it?', 'comment_created': datetime.datetime(2020, 6, 5, 17, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436051169, 'comment_body': '(or just call it `shogun_hello_world` or so)', 'comment_created': datetime.datetime(2020, 6, 5, 17, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436051403, 'comment_body': 'this doesnt need to be here (actually you can delete the whole file if it is not needed anymore)', 'comment_created': datetime.datetime(2020, 6, 5, 17, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436051762, 'comment_body': 'polynomial features up to order 2-3 but not more\r\nAlso, this should be checked, what works best?', 'comment_created': datetime.datetime(2020, 6, 5, 17, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436051990, 'comment_body': ""I'd remove such print statements"", 'comment_created': datetime.datetime(2020, 6, 5, 17, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436052278, 'comment_body': 'and otherwise? return None? Throw an error might be better  no?', 'comment_created': datetime.datetime(2020, 6, 5, 17, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436052698, 'comment_body': 'no need to have this section, keep it to the stuff that cannot be found online', 'comment_created': datetime.datetime(2020, 6, 5, 17, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436052780, 'comment_body': 'no need', 'comment_created': datetime.datetime(2020, 6, 5, 17, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436052969, 'comment_body': 'imo this file should contain a one liner to install/run the tool, not an intro to what the different python tools do', 'comment_created': datetime.datetime(2020, 6, 5, 17, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436053321, 'comment_body': '++', 'comment_created': datetime.datetime(2020, 6, 5, 17, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436053489, 'comment_body': 'what does this do?', 'comment_created': datetime.datetime(2020, 6, 5, 17, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436161563, 'comment_body': 'you mean the R^2? see my email ;)', 'comment_created': datetime.datetime(2020, 6, 5, 20, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436162010, 'comment_body': 'Cool, just checking', 'comment_created': datetime.datetime(2020, 6, 5, 21, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436162824, 'comment_body': ""... and probably check they're/their license is OK with it"", 'comment_created': datetime.datetime(2020, 6, 5, 21, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436163392, 'comment_body': ""I kind of like the idea of having everything you need to know in one place. But since it's literally just a copy-paste, I agree, a link would probably do"", 'comment_created': datetime.datetime(2020, 6, 5, 21, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436350325, 'comment_body': 'You are referring to comments? Or like a file explaining how to use the API?', 'comment_created': datetime.datetime(2020, 6, 7, 10, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 436350763, 'comment_body': 'Okay, However, when I use apply(), I get an error that the regression lables are not compatible with multiclass or something on those lines...', 'comment_created': datetime.datetime(2020, 6, 7, 11, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 436353971, 'comment_body': 'Added. check[ here.](https://github.com/Hephaestus12/applications/tree/master/gsoc_application_projects/2020/influenza/web#influenza-api-guide)', 'comment_created': datetime.datetime(2020, 6, 7, 11, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 436354121, 'comment_body': ""For now, I've removed it completely and replaced it with a link to Giovanni's blog. ;) I think the user be able to install Shogun correctly before running our web app is more important."", 'comment_created': datetime.datetime(2020, 6, 7, 11, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 436354274, 'comment_body': ""Can I just make sure that my model completely works first, I'm currently a little stuck with the serialization issue. I'll surely remove it later. Is that okay?"", 'comment_created': datetime.datetime(2020, 6, 7, 11, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 436354314, 'comment_body': 'You mean like an exception? Or simply print an error message?', 'comment_created': datetime.datetime(2020, 6, 7, 11, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 436385543, 'comment_body': ""Sure, as long as you don't forget ;P"", 'comment_created': datetime.datetime(2020, 6, 7, 17, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436385739, 'comment_body': 'it\'s a bit confusing: what is meant by ""older"" influenza incidence/estimate etc?', 'comment_created': datetime.datetime(2020, 6, 7, 17, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436386185, 'comment_body': ""Thanks for adding it, just make sure it's really useful ;)"", 'comment_created': datetime.datetime(2020, 6, 7, 17, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436386474, 'comment_body': ""sure, that's a good idea. You could add a link to the relevant page of the PyPA documentation for what you've now dropped."", 'comment_created': datetime.datetime(2020, 6, 7, 17, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 436513608, 'comment_body': '@karlnapf shogun-toolbox/shogun#5061', 'comment_created': datetime.datetime(2020, 6, 8, 7, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 437187420, 'comment_body': ""ok here's a radical crazy thought: why do we tie this thing to be a specific model? why isn't it just model, that follows a specific interface (say in case of shogun train/apply, or in sklearn-style fit/predict) and then this becomes totally interchangable for model type..."", 'comment_created': datetime.datetime(2020, 6, 9, 7, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 437190387, 'comment_body': ""here's another crazy idea: why the model is actually here not an onnx model? so that this project could actually could use any type of model trained *anywhere* by *anything*. since here the model class is actually coupled with train, that kind of enforces you to have the model trained here by this class.... wouldn't it be better that if i know how to train a crazy model with the right pipeline outside of this thing just be able to plug it in here for prediction?\r\n\r\ni guess i'm saying is that there should be a PredictMixin, that holds a general model that does model.apply/predict with the input features.... and in that case PredictMixin actually can simply be a wrapper around onnxruntime, so that totally decouples the whole SDK dependency of an ML library for deploying this for predicting things...."", 'comment_created': datetime.datetime(2020, 6, 9, 7, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 437614648, 'comment_body': 'I like this idea, but imo for now we should focus on getting everything up and running with a simple regression first, then finish the Poisson regression (this PR is also still in progress) and *then* we can make the model interchangeable', 'comment_created': datetime.datetime(2020, 6, 9, 17, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lgoetz', 'type': 'User'}, {'comment_id': 437949387, 'comment_body': 'These `print` statements must be gone to merge this. They are useful if you need to manual debug what you are doing, but you should not add them to the committed files :)', 'comment_created': datetime.datetime(2020, 6, 10, 8, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 437950647, 'comment_body': 'what about instead of removing start using logging https://flask.palletsprojects.com/en/1.1.x/logging/', 'comment_created': datetime.datetime(2020, 6, 10, 8, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 437952589, 'comment_body': ""> what about instead of removing start using logging https://flask.palletsprojects.com/en/1.1.x/logging/\r\n\r\nThat's even better!\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 10, 8, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 440061102, 'comment_body': 'I have implemented this.\r\n', 'comment_created': datetime.datetime(2020, 6, 15, 9, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 442066155, 'comment_body': 'Do we need this commented code? Otherwise, it would be better to remove it.', 'comment_created': datetime.datetime(2020, 6, 18, 8, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442067312, 'comment_body': 'It would be nice to add a small paragraph about the Docker image and how to pull/run it. ', 'comment_created': datetime.datetime(2020, 6, 18, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442069243, 'comment_body': 'Also here it should be nice to have some kind of brief description of what the project is about. ', 'comment_created': datetime.datetime(2020, 6, 18, 8, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442071553, 'comment_body': ""Replace with\r\n`ENV PYTHONPATH=/installed/shogun-install/lib/python3.5/site-packages/`\r\n\r\nIt won't work if you leave it as it is now. \r\n"", 'comment_created': datetime.datetime(2020, 6, 18, 8, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442075034, 'comment_body': 'Just a quick question here, what happens if we are not able to reach Wikipedia (e.g., because maybe the website is down or the docker container cannot access to the internet)? Will the execution be caught or will the application fail? \r\n\r\nI guess there should be some kind of safeguard/error which tells the user that we were not able to reach the website for whatever reason (or at least it should be logged somewhere). ', 'comment_created': datetime.datetime(2020, 6, 18, 8, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442075512, 'comment_body': 'Besides catching the exception, we should write to the logs that something like this happened. ', 'comment_created': datetime.datetime(2020, 6, 18, 8, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442076026, 'comment_body': 'Are the log information saved somewhere or are they just printed on screen?', 'comment_created': datetime.datetime(2020, 6, 18, 8, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442079695, 'comment_body': ""When the web application starts, we should disable shogun's custom signal handler. It could be possible to do it by calling\r\n```python\r\nsg.env().signal().enable_handler(False)\r\n```\r\nIdeally, it should be done somewhere within the web code."", 'comment_created': datetime.datetime(2020, 6, 18, 9, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 442646271, 'comment_body': ""Yes, I'll add that.\r\n"", 'comment_created': datetime.datetime(2020, 6, 19, 5, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 442646497, 'comment_body': ""Not really, now that everything else is running, I'll remove it."", 'comment_created': datetime.datetime(2020, 6, 19, 6, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 442646572, 'comment_body': 'Okay fine.', 'comment_created': datetime.datetime(2020, 6, 19, 6, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 442646790, 'comment_body': 'Oh yes, I had forgotten to push the updated Dockerfile.', 'comment_created': datetime.datetime(2020, 6, 19, 6, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 442647058, 'comment_body': ""Hmm, yes, this makes sense. I'll check which exception is thrown when that happens and log it."", 'comment_created': datetime.datetime(2020, 6, 19, 6, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 442647394, 'comment_body': ""Oh okay, I'll add this."", 'comment_created': datetime.datetime(2020, 6, 19, 6, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 442982440, 'comment_body': ""It'll happen inside a file called `information.log`"", 'comment_created': datetime.datetime(2020, 6, 19, 18, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 443134091, 'comment_body': '```suggestion\r\nSeasonal influenza epidemics result in about three to five million cases of severe illness and about \u200b 250,000 to 500,000 deaths worldwide each year. This is of utmost significance for public health agencies to reduce the effects of natural pandemics and epidemics such as H1N1 influenza. Results have demonstrated that protective steps can be taken to suppress epidemics where there is early warning during outbreak germination. Monitoring and forecasting the occurrence and spread of flu in the community is critical.\r\n```', 'comment_created': datetime.datetime(2020, 6, 20, 14, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443134176, 'comment_body': '```suggestion\r\nIn the EU, there are several government institutions which track incidents of influenza-like disease (ILI)\u200b by gathering statistics from sentinel care activities that provide virological statistics as well as clinical details, such as physicians reporting on the number of patients observed presenting influenza-like disease, obtaining and releasing information on a weekly basis.\r\n```', 'comment_created': datetime.datetime(2020, 6, 20, 14, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443134378, 'comment_body': 'You should add a link to the original paper for reference (e.g., https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003581)', 'comment_created': datetime.datetime(2020, 6, 20, 14, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443134416, 'comment_body': 'You should add link references for each of these services.', 'comment_created': datetime.datetime(2020, 6, 20, 14, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443134437, 'comment_body': 'Missing link to zenodo?', 'comment_created': datetime.datetime(2020, 6, 20, 14, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443134800, 'comment_body': 'Do we still need this file here? Otherwise it could be wise to remove it. ', 'comment_created': datetime.datetime(2020, 6, 20, 14, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443134858, 'comment_body': 'What is the purpose of this file? Is it testing all the methods you wrote so far?', 'comment_created': datetime.datetime(2020, 6, 20, 14, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443135060, 'comment_body': 'I would just return `None` if the file is not found and check the result when we call this method. I guess this is applicable to all the methods in this file. ', 'comment_created': datetime.datetime(2020, 6, 20, 14, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443135297, 'comment_body': 'If I try to pull the docker image I get the following error:\r\n```\r\nUsing default tag: latest\r\nError response from daemon: manifest for tejsukhatme/influenza_estimator:latest not found: manifest unknown: manifest unknown\r\n```\r\nI guess you meant to write `docker pull tejsukhatme/influenza_estimator:random_forest` instead, right? :) It could be better to tag the docker image as `latest` so it will be downloaded automatically without the need to specify each time the tag. ', 'comment_created': datetime.datetime(2020, 6, 20, 14, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443135394, 'comment_body': '```suggestion\r\ndocker run -it -p 5000:5000 tejsukhatme/influenza_estimator\r\n```', 'comment_created': datetime.datetime(2020, 6, 20, 14, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443629510, 'comment_body': 'No no, it is the code that split the data into training and testing datasets for judging which model is better.', 'comment_created': datetime.datetime(2020, 6, 22, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 443636405, 'comment_body': 'I was thinking of adding different models in the future so this nomenclature would help.', 'comment_created': datetime.datetime(2020, 6, 22, 15, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 443640537, 'comment_body': 'Ah okay, I was confused by the name of the file :)', 'comment_created': datetime.datetime(2020, 6, 22, 15, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443640983, 'comment_body': ""mmh then I would update at least the pull command, since the current one doesn't work."", 'comment_created': datetime.datetime(2020, 6, 22, 15, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 443779116, 'comment_body': 'Good! However, since these methods can return `None`, what does happen where these methods are called? Are you throwing an error if they return `None`? Are there any checks?', 'comment_created': datetime.datetime(2020, 6, 22, 19, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 444174389, 'comment_body': ""No, I haven't implemented any such checks. Also, for now this code isn't being used as we are doing everything(training and applying) in the web directory. Should I throw the errors and make checks?\r\n\r\nI don't think we need to train the model separately and put the serialized version as training on the go takes negligible time, right?\r\n"", 'comment_created': datetime.datetime(2020, 6, 23, 12, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 444196453, 'comment_body': ""I would suggest you to update the model's code to do some checks when loading the features (e.g., if ``load_features`` returns `None` then print an error to the user and exit). \r\n\r\nIn general, it would be better to provide already serialized models for many good reasons. However, since we had problems with that, let's skip it for now. We could do it later on. "", 'comment_created': datetime.datetime(2020, 6, 23, 12, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 469769531, 'comment_body': 'What is the difference between these methods and the ones in `src/utils.py`?', 'comment_created': datetime.datetime(2020, 8, 13, 8, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 469804333, 'comment_body': ""utils.py are the utility functions for the web app, this is just for the model. However, I've refactored the code a little and removed this for now.\r\n"", 'comment_created': datetime.datetime(2020, 8, 13, 9, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 469809975, 'comment_body': 'okay! ', 'comment_created': datetime.datetime(2020, 8, 13, 9, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}]","[{'commit_sha': 'b2df4def4b15f298ece11715462bf37683092962', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c29dd8654a151a5364f6c608d9b2fcff4b098574', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70c0a25e2e7c4d022acef3a0d4b4a6bc01483eb', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a03203eb0c047be78d35a7fdb54094d5b9eaffdd', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bb270575dbd804d01e8437b4788e477cd560270', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b8cc794de4dc0a64152731a50c2630510280632', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fbb67d5d9f4c727407df2c3412aa8122f94a5d', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc698cb05dafcefd88b9eb732193b08159c08af', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8eb0ac6f1c6f7e796fc00c338e98ade17185ef8', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ad054da1ca11a381b22aba7bcf7b8bd5cb520c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1695dc5cd1e2599904d722c00f2078567207e134', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '135c494fe02bd78213a75a60fe655e858b5ece4f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e67824406cae42a6fb366eb57cda88ef282460', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '429aa26b23c9311238606004618f79e34d38523c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dbdb9c4a9d91cccbfa5f4e6861f25f04087e14c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dd972cfe62cf0d38029a9d3bed6bd36259222ff', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1a46d9228e2b6bc305e94826b8615211c90a753', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c057a9c198f7bebe7bd041532928fe9e709aae62', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '570dd8d17403948659cd05cb4a34b0aaf2591c2c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6906ab5c6f788e9bdfdb978fed61fa9cb5e146d6', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ef63d20bc8ce1e389c8dcab9accd0bbfc6826f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbe87067f760ff2a407d906e4f998287f0a20bd7', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80eef4c0d1b1ca96ae146d647ae0ace649d20517', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc180db47126e83d38e1ac7243507b03ed9ed0e5', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc35fc34543ad8f540a37a5d265659ea44491753', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59fffd779c339f850ea72e52c3e790c048a4cd1c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7c875ef92324bee32a715ae364a49b1695d8f66', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
403100319,WIP Write Generalized Linear Machine class,"#5005 #5000
This is the basic framework for the Generalized Linear Machine class.
This class is supposed to implement the following distributions
BINOMIAL,
GAMMA,
SOFTPLUS,
PROBIT,
POISSON

The code has been written keeping in mind this reference: [PyGLMNet library](https://github.com/glm-tools/pyglmnet)
However, I have only written code for the Poisson distribution till now.

THIS IS A WORK IN PROGRESS

This PR is so that a discussion can be held about the implementation of the GLM and so that Some feedback can be obtained for my code. 
@lgoetz 
@geektoni 

TODO
- [x] Write code.
- [x] Add basic test.
- [x] Add gradient test.
- [X] Link github gists for generating data.
- [X] Check why the `SGObject` test is failing.
- [ ] Use `FeatureDispatchCRTP`.


",True,5006,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5006,https://github.com/shogun-toolbox/shogun/pull/5006,closed,581,10,10,31,47,354,0,0,[],2020-04-14 10:28:29+00:00,2020-08-04 10:20:53+00:00,9676344.0,"111 days, 23:52:24","[{'comment_id': 408033215, 'comment_body': 'its a LinearMachine... that will have both w and bias....', 'comment_created': datetime.datetime(2020, 4, 14, 10, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408033566, 'comment_body': 'noup, this is protected if you check Machine interface', 'comment_created': datetime.datetime(2020, 4, 14, 10, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408033960, 'comment_body': ""use `override` keyword that way you'll know if the function actually is properly overriding a method..."", 'comment_created': datetime.datetime(2020, 4, 14, 10, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408034308, 'comment_body': 'fit? i mean plz try to follow the way things are actually named in shogun... this will definitely help when we do a major refactor of interfaces...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408034432, 'comment_body': 'LinearMachine...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408034647, 'comment_body': '```suggestion\r\n\t\tfloat64_t m_alpha = 0.5;\r\n```', 'comment_created': datetime.datetime(2020, 4, 14, 10, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408034704, 'comment_body': 'you can actually set it here to the default value', 'comment_created': datetime.datetime(2020, 4, 14, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408035157, 'comment_body': 'if you just do GeneralizedLinearMachine() instead of Machine() then you dont have to repeat the code (i.e. no need for init()', 'comment_created': datetime.datetime(2020, 4, 14, 10, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408035718, 'comment_body': 'do we really need this? you can just .clone() any SGObject.... ', 'comment_created': datetime.datetime(2020, 4, 14, 10, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408037256, 'comment_body': 'you should really look into FeatureDispatchCRTP... of course that can be done later...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408038585, 'comment_body': 'predict? same as below...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408038746, 'comment_body': 'do all these methods should be really protected?', 'comment_created': datetime.datetime(2020, 4, 14, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408038894, 'comment_body': 'yeah this is apply_....', 'comment_created': datetime.datetime(2020, 4, 14, 10, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408038964, 'comment_body': 'yeah this should be in train_machine...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408039142, 'comment_body': 'not at all. Check how to use RandomMixin', 'comment_created': datetime.datetime(2020, 4, 14, 10, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408039509, 'comment_body': 'mmm noup... use our internal NormalDistribution... the reason because of this is that the distr is not uniform across various stdc++ implementations.', 'comment_created': datetime.datetime(2020, 4, 14, 10, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408039603, 'comment_body': 'these things could be auto...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408039739, 'comment_body': 'why zero it if SGVector has no size?', 'comment_created': datetime.datetime(2020, 4, 14, 10, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040027, 'comment_body': 'm_w should be used... and just resized here..', 'comment_created': datetime.datetime(2020, 4, 14, 10, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040159, 'comment_body': 'IterativeMachine...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040503, 'comment_body': 'error message plz... coz this just swallows up that nothing is happening...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040619, 'comment_body': 'error?', 'comment_created': datetime.datetime(2020, 4, 14, 10, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040696, 'comment_body': 'error?', 'comment_created': datetime.datetime(2020, 4, 14, 10, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040782, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 14, 10, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040935, 'comment_body': 'error', 'comment_created': datetime.datetime(2020, 4, 14, 10, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408040997, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 14, 10, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408041609, 'comment_body': 'no need to put this here...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408041718, 'comment_body': 'never...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 408042399, 'comment_body': 'you can set these at declaration time...', 'comment_created': datetime.datetime(2020, 4, 14, 10, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 409710706, 'comment_body': 'i think it might be a good idea to parametrize the gradient descent method, using methods in shogun (which would then store the learning rate)', 'comment_created': datetime.datetime(2020, 4, 16, 17, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409710914, 'comment_body': 'and generally the optimization variables', 'comment_created': datetime.datetime(2020, 4, 16, 17, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409711198, 'comment_body': 'also takes in features, not a matrix, see the base class', 'comment_created': datetime.datetime(2020, 4, 16, 17, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409712183, 'comment_body': 'i wonder whether we can move this into another class? to separate inference from the model as done in other places in shogun? See the optimization classes', 'comment_created': datetime.datetime(2020, 4, 16, 17, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409712384, 'comment_body': 'you would update model parameters in every iteration to make this observable @geektoni can give tips', 'comment_created': datetime.datetime(2020, 4, 16, 17, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409712776, 'comment_body': 'this could be done using linalg, then there would be not so many loops in here', 'comment_created': datetime.datetime(2020, 4, 16, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409713285, 'comment_body': 'I think since nonlinearity and its gradient have to match, why not implement them in a (potentially local) class. Then it also can be unit tested more easily', 'comment_created': datetime.datetime(2020, 4, 16, 17, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409713520, 'comment_body': 'NULL is not good', 'comment_created': datetime.datetime(2020, 4, 16, 17, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409713769, 'comment_body': 'numerically it rately makes sense to create an identity matrix, instead use functions that add stuff to the diagonal of other matrices', 'comment_created': datetime.datetime(2020, 4, 16, 17, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409714033, 'comment_body': 'this could also be grouped with the class I mentioned above, so that everything related to poisson is in one place', 'comment_created': datetime.datetime(2020, 4, 16, 17, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409714233, 'comment_body': 'where is this code coming from?', 'comment_created': datetime.datetime(2020, 4, 16, 17, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409714722, 'comment_body': ""where is this coming from? I don't see anything credited. You can't just copy paste code from somewhere else (not even docs). Always state the source, and also under what license the source had it"", 'comment_created': datetime.datetime(2020, 4, 16, 17, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 409839198, 'comment_body': 'What I planned to do was call these protected methods like `fit()` and `predict()` in the overridden `train_machine()` and `apply_regression()` methods after processing the features and type checking and all the other checks to make sure the input is of the right format, length, etc which would make the code cleaner as there are supposed to be several different types of Distributions in this GLM class.\r\nShould I just rename these functions to something else and continue in this way? Or should I move all the code to the `train_machine()` and `apply_regression()` method?', 'comment_created': datetime.datetime(2020, 4, 16, 20, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 409842045, 'comment_body': 'Should I replace it with cmath instead?\r\nor with shogun/mathematics/Math.h?', 'comment_created': datetime.datetime(2020, 4, 16, 20, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 409844564, 'comment_body': 'As I mentioned in the previous comment, I planned to call these methods from the overridden `train_machine()` and `apply_regression()` methods after converting the features to matrices and vectors and type checking and all the other checks to make sure the input is of the right format, length, etc which would make the code cleaner as there are supposed to be several different types of Distributions in this GLM class.\r\nShould I continue in this way? Or should I move all the code to the `train_machine()` and the `apply_regression()` method?', 'comment_created': datetime.datetime(2020, 4, 16, 20, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 409863878, 'comment_body': ""So, you're suggesting I should make separate sub-classes of the GeneralizedLinearMachine class like Poisson Regression, etc which will have methods override these methods?\r\n\r\nAnd move all this calculation related code to those classes?"", 'comment_created': datetime.datetime(2020, 4, 16, 21, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 409864615, 'comment_body': 'I should directly change `m_w` in every iteration instead of finding a `w` and setting `m_w` only after the training is complete?', 'comment_created': datetime.datetime(2020, 4, 16, 21, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 409865223, 'comment_body': 'How do I check if the Matrix has been initialized?', 'comment_created': datetime.datetime(2020, 4, 16, 21, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 409867735, 'comment_body': 'This code is written in C++ by me entirely but the calculations are based on a python repository [PyGLMNet](https://github.com/glm-tools/pyglmnet/blob/master/pyglmnet/pyglmnet.py) which has The MIT License (MIT). Is that a problem?', 'comment_created': datetime.datetime(2020, 4, 16, 21, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 409868715, 'comment_body': 'Yes sure, even the docs are based on the [pyGLMnet](https://github.com/glm-tools/pyglmnet/blob/master/pyglmnet/pyglmnet.py) code (again, MIT license). However it has not been directly copy pasted.\r\nHow do I give credit? As in what is the format and where do I mention it?', 'comment_created': datetime.datetime(2020, 4, 16, 21, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410220452, 'comment_body': 'Or we can do something similar to how the implementation of the KNN classes is done?\r\n\r\nBasically to create a pure virtual `GLMdistribution` class derives from LinearMachine and then to create `PoissonGLMdistribution`, `BinomialGLMdistribution` `GammaGLMdistribution`, etc classes as sub-classes of the `GLMdistribution` class.\r\nThese will just have the implementations of the calculation related functions like `non_linearity()`, `gradient_non_linearity()`, `compute_grad_L2_loss()` etc.\r\n\r\nThen to call these, we will create an instance `distribution` of type `GLMdistribution` and call these methods from there depending on the distribution type(`distribution->non_linearity()`).\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 4, 17, 13, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410365629, 'comment_body': ""ok let's see how it plays out. Though I think this is still a bit messy/confusing as it is right now"", 'comment_created': datetime.datetime(2020, 4, 17, 17, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410366421, 'comment_body': 'As said above, I think these extra methods just increase the noise level. Extracting the matrix/labels of the feaures are one liners each', 'comment_created': datetime.datetime(2020, 4, 17, 17, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410366697, 'comment_body': 'these methods here can of course say in terms of matrices. I think they should all have const references in the parameters though', 'comment_created': datetime.datetime(2020, 4, 17, 17, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410366840, 'comment_body': 'this this is also in linear machine', 'comment_created': datetime.datetime(2020, 4, 17, 17, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410367081, 'comment_body': 'please dont state default values in comments, the code speaks for itself', 'comment_created': datetime.datetime(2020, 4, 17, 17, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410368958, 'comment_body': 'no calculations are fine, no need to reference those (all the math is pretty standard). It just came as a surprise to me that this huge blob of code appears out of nowhere. Especially this proximal operator. Could you explain what it does, how it fits into the rest of the code?', 'comment_created': datetime.datetime(2020, 4, 17, 17, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410369788, 'comment_body': 'whenever you copy paste stuff, you need to reference that. And even if you first copy paste and then adapt it you should do that. Note that those docs are not necessarily appropriate here. Do we really want group lasso /elastic net style penalties? I think we just want a poisson regression', 'comment_created': datetime.datetime(2020, 4, 17, 17, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410371571, 'comment_body': ""no need to create new visible classes for every distribution.\r\nWe can do that with enums, it would just be nice to have all the code related to one distribution in one place, and then the enums simply call that.\r\nBut what I meant above is that you don't implement gradient descent yourself but call an existing solver instead"", 'comment_created': datetime.datetime(2020, 4, 17, 17, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410372031, 'comment_body': 'I think NULL is not a good value for SGVector', 'comment_created': datetime.datetime(2020, 4, 17, 17, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410372820, 'comment_body': '!m_tau.data() ?\r\nBut I think doing this initialization lazily is not good style, just initialise it by default', 'comment_created': datetime.datetime(2020, 4, 17, 17, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410373115, 'comment_body': '/=  ?', 'comment_created': datetime.datetime(2020, 4, 17, 17, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410373597, 'comment_body': '> whenever you copy paste stuff, you need to reference that. And even if you first copy paste and then adapt it you should do that. Note that those docs are not necessarily appropriate here. Do we really want group lasso /elastic net style penalties? I think we just want a poisson regression\r\n\r\nIt would be better to have at least the LASSO regularization term imo. It is also kind of needed for the influenza project.', 'comment_created': datetime.datetime(2020, 4, 17, 17, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 410373647, 'comment_body': 'these shouldnt be necessary iirc?', 'comment_created': datetime.datetime(2020, 4, 17, 17, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410373989, 'comment_body': 'you could say in the license part of the file that both code and docs are heavily inspired by pyGLMnet', 'comment_created': datetime.datetime(2020, 4, 17, 17, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410375045, 'comment_body': ""thanks @geektoni I didn't know that. \r\nL1 is not group lasso though ..."", 'comment_created': datetime.datetime(2020, 4, 17, 17, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410405232, 'comment_body': 'You should default initialise and here check the size, like in the stl you check std::vector::empty', 'comment_created': datetime.datetime(2020, 4, 17, 18, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 410700458, 'comment_body': 'I am getting this error message?\r\n```\r\nclass ""shogun::LinearMachine"" has no member ""m_compute_bias""\r\n```\r\nAlso I was unable to find any protected member variable `m_compute_bias` in `LinearMachine.h` as mentioned in the docs', 'comment_created': datetime.datetime(2020, 4, 18, 13, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410703342, 'comment_body': 'I did that so that I could then successfully make the InvCov matrix by multiplying it by its transpose whether or not the m_tau matrix is used.\r\nWhat else can I do?', 'comment_created': datetime.datetime(2020, 4, 18, 14, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410704031, 'comment_body': ""> But what I meant above is that you don't implement gradient descent yourself but call an existing solver instead\r\n\r\nOh okay, Can you please give an example of another method where this has been done? I'm slightly confused."", 'comment_created': datetime.datetime(2020, 4, 18, 14, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410704692, 'comment_body': ""Okay. By local class you mean a class inside a function right?\r\n\r\nWhere should I implement that? I'm slightly confused.\r\n\r\nI should make separate classes for Poisson, Gamma, etc right? And implement `non_linearity()`, `gradient_non_linearity()` etc in those classes right?"", 'comment_created': datetime.datetime(2020, 4, 18, 14, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410712485, 'comment_body': ""I don't understand what you mean. But numerically, you don't do things like multiplying by an identity matrix....just extend the if-then-else and fill the inv covariance matrix in there. But then you again store an identity matrix. It is better to write code that branches for those cases"", 'comment_created': datetime.datetime(2020, 4, 18, 15, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410712664, 'comment_body': 'i.e. here you can branch based on whether the tau matrix is used', 'comment_created': datetime.datetime(2020, 4, 18, 15, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410712801, 'comment_body': 'you could do that in classes or functions, but the point is to *not* do it inside the training method, because that creates hard to read code. Keep it modular.', 'comment_created': datetime.datetime(2020, 4, 18, 15, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410713126, 'comment_body': 'there is a lot of stuff in `optimization`. Check how that is used.', 'comment_created': datetime.datetime(2020, 4, 18, 15, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410731690, 'comment_body': ""Here the proximal operator applies a soft thresholding step for k≠0 after every update iteration:(There is a tiny error in the if statement, I'll fix it)\r\nBasically, if the weight is smaller than a particular threshold, we equate it's value to zero. This helps to reduce the number of variables according to the elastic-net penalty.\r\n\r\nThe elastic net interpolates between two extremes. When α=0 the penalized model is known as ridge regression and when α=1 it is known as LASSO."", 'comment_created': datetime.datetime(2020, 4, 18, 18, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410894108, 'comment_body': 'ok! Good', 'comment_created': datetime.datetime(2020, 4, 19, 12, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 410904833, 'comment_body': 'Yes, I was looking for a way to do this using `linalg` but was unable to find a way. Here the value of the `result` vector depends on whether the corresponding value of `z` is more or less than `m_eta`. Is this possible using `linalg`?\r\n\r\nThis is the python code off which is this based:\r\n```\r\nresult[z > m_eta] = z[z > m_eta] * np.exp(m_eta) + l_bias\r\nresult[z <= m_eta] = np.exp(z[z <= m_eta])\r\n```', 'comment_created': datetime.datetime(2020, 4, 19, 13, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 410905509, 'comment_body': 'dont think so.\r\n@gf712 it is another thing we should have in a linear algebra structure: views for writing / reading. At least for reading, in jax, vetors are not mutable like this (not sure why, but one has to call a special assign function)', 'comment_created': datetime.datetime(2020, 4, 19, 13, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 411767282, 'comment_body': ""@karlnapf this is what you meant right?\r\nI guess all I have to do now is make a new class that derives from `FirstOrderCostFunction` and then make an object of that class which I will have to pass on to the `minimizer` object so that it can minimize the custom cost function.\r\n\r\nWhere should I make this class(as in where should it fit in the file structure)?\r\n\r\nAnd should there be different classes for different distributions or just one which gives has a switch-case like structure inside which decides the course of action depending on the `distribution`(`GLMDistribution` enum).\r\n\r\np.s. I will remove all the extra code related to the `IterativeMacine` when I'm completely done implementing this `SGDMinimizer`."", 'comment_created': datetime.datetime(2020, 4, 20, 23, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 412122852, 'comment_body': 'What is this function supposed to do? I am confused.\r\nIt is called in the `minimize()` function defined in the `SGDMinimizer` class.', 'comment_created': datetime.datetime(2020, 4, 21, 12, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 412123128, 'comment_body': 'This one too, what is it supposed to?', 'comment_created': datetime.datetime(2020, 4, 21, 12, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415036251, 'comment_body': ""you can initialise in the declaration of the variables, then you don't need the init method and just call the std ctor in all other ctors"", 'comment_created': datetime.datetime(2020, 4, 25, 10, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415036503, 'comment_body': 'could this code pls leave in another class/structure. A local one is fine, but we want to shorten these type of methods', 'comment_created': datetime.datetime(2020, 4, 25, 10, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415036532, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 4, 25, 10, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415036717, 'comment_body': 'is this still an open question?\r\nI am thinking that maybe this full blown approach for the optimization might be overkill. Although it is nice to offer users to parametrise this. Did you get it to work?', 'comment_created': datetime.datetime(2020, 4, 25, 10, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415036791, 'comment_body': 'the error msg doesnt make sense', 'comment_created': datetime.datetime(2020, 4, 25, 10, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415036999, 'comment_body': '""Distribution type %s not implemented.""', 'comment_created': datetime.datetime(2020, 4, 25, 10, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415037104, 'comment_body': 'check how it is used in the various optimizers, might have to do with more advanced optimization methods\r\n@yorkerlin might be able to help?', 'comment_created': datetime.datetime(2020, 4, 25, 10, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415039590, 'comment_body': ""Okay, I'll remove it.\r\n"", 'comment_created': datetime.datetime(2020, 4, 25, 11, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415039898, 'comment_body': ""I couldn't find the `FirstOrderStochasticCostFunction` class being inherited in any other class which is why I was unable to figure out. This method, `begin_sample()` belongs to the `FirstOrderStochasticCostFunction` class"", 'comment_created': datetime.datetime(2020, 4, 25, 11, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415041445, 'comment_body': 'Okay, I will remove this.\r\n', 'comment_created': datetime.datetime(2020, 4, 25, 11, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415042127, 'comment_body': ""No, It isn't working as yet. The issue I am facing is that in the `SGDMinimizer` class, it only minimizes one variable. So how should I deal with the weights and gradient separately?\r\nOr should I call the `minimize()` twice, although I am not sure how optimal that would be?\r\n\r\nOr otherwise, I can go back to the old `IterativeMachine` approach"", 'comment_created': datetime.datetime(2020, 4, 25, 11, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415055658, 'comment_body': 'For random cost functions there might be some initialization needed. And sample just samples the cost function', 'comment_created': datetime.datetime(2020, 4, 25, 12, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415056660, 'comment_body': 'What do you mean it minimizes only one variable?', 'comment_created': datetime.datetime(2020, 4, 25, 12, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415056999, 'comment_body': 'btw there is also https://github.com/shogun-toolbox/shogun-gpl/blob/master/shogun/optimization/NLOPTMinimizer.h', 'comment_created': datetime.datetime(2020, 4, 25, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415059733, 'comment_body': '> What do you mean it minimizes only one variable?\r\n\r\nI meant it minimizes the cost by changing only one variable, (ie the vector of weights, `m_w`). My bad for the confusion\r\n\r\nThis is the code for the minimize() function as defined in the `SGDMinimizer` class:\r\n```\r\nfloat64_t SGDMinimizer::minimize()\r\n{\r\n\tinit_minimization();\r\n\r\n\tSGVector<float64_t> variable_reference=m_fun->obtain_variable_reference();\r\n\tauto fun= m_fun->as<FirstOrderStochasticCostFunction>();\r\n\trequire(fun,""the cost function must be a stochastic cost function"");\r\n\tfor(;m_cur_passes<m_num_passes;m_cur_passes++)\r\n\t{\r\n\t\tfun->begin_sample();\r\n\t\twhile(fun->next_sample())\r\n\t\t{\r\n\t\t\tm_iter_counter++;\r\n\t\t\tfloat64_t learning_rate=1.0;\r\n\t\t\tif(m_learning_rate)\r\n\t\t\t\tlearning_rate=m_learning_rate->get_learning_rate(m_iter_counter);\r\n\t\t\tSGVector<float64_t> grad=m_fun->get_gradient();\r\n\t\t\tupdate_gradient(grad,variable_reference);\r\n\t\t\tm_gradient_updater->update_variable(variable_reference,grad,learning_rate);\r\n\r\n\t\t\tdo_proximal_operation(variable_reference);\r\n\t\t}\r\n\t}\r\n\tfloat64_t cost=m_fun->get_cost();\r\n\treturn cost+get_penalty(variable_reference);\r\n}\r\n```\r\nwhat this does is minimize cost by changing the SGVector `variable_reference`(here `m_w` the vector of weights) using gradient descend. (by calling the `update_gradient()` method)\r\n\r\nWhat do I do if I want it to change the `bias` as well?\r\nThe cost function for the bias and the weights are different as we don\'t apply the elastic net penalty to the bias', 'comment_created': datetime.datetime(2020, 4, 25, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415069922, 'comment_body': 'ah I see now.\r\nThat is a problem indeed. You would need to write some code that combines the cost/variables into one to use the framework (or refactor it).\r\nIs that tricky? If so, then we might go back to the old way of doing this?', 'comment_created': datetime.datetime(2020, 4, 25, 14, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415243356, 'comment_body': ""Yes I'll do this"", 'comment_created': datetime.datetime(2020, 4, 26, 7, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415243449, 'comment_body': ""I think that refactoring will make the code hard to read as the variables will become a little ambiguous.\r\n\r\nWhat I think I'll do is use the `IterativeMachine` class to run the iterations but I will still be using the following optimization classes:\r\n`GradientDescendUpdater`\r\n`ConstLearningRate`\r\n`ElasticNetPenalty`\r\n\r\nI think in this way the code will remain readable and cleaner. Is this okay?"", 'comment_created': datetime.datetime(2020, 4, 26, 7, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415256137, 'comment_body': 'And then have two instances of those updaters?\r\nI am not sure I agree about it being hard to read, if you keep the code as is and only add a bridge to pass it to the optimizer. But OK, go ahead with what you think is best and then we can look at the code and discuss.', 'comment_created': datetime.datetime(2020, 4, 26, 8, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 415630890, 'comment_body': 'the problem with multi-inheritance is that this is not exposeable to JVM.... as multi-inheritance is not supported :(', 'comment_created': datetime.datetime(2020, 4, 27, 8, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415631256, 'comment_body': 'use override instead of virtual', 'comment_created': datetime.datetime(2020, 4, 27, 8, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415631435, 'comment_body': 'imo u can omit `virtual`', 'comment_created': datetime.datetime(2020, 4, 27, 8, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415631528, 'comment_body': 'use `override` instead of virtual', 'comment_created': datetime.datetime(2020, 4, 27, 8, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415631696, 'comment_body': 'does this need to be virtual?', 'comment_created': datetime.datetime(2020, 4, 27, 8, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415631776, 'comment_body': 'does this need to virtual?', 'comment_created': datetime.datetime(2020, 4, 27, 8, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415631931, 'comment_body': '`override` should be enough', 'comment_created': datetime.datetime(2020, 4, 27, 8, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415632034, 'comment_body': '`override` should be enough', 'comment_created': datetime.datetime(2020, 4, 27, 8, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415632148, 'comment_body': 'do all these parameters need to be protected?', 'comment_created': datetime.datetime(2020, 4, 27, 8, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415632662, 'comment_body': 'btw what is the `Distribution` interface that is being used in this class (GLM) that requires RandomMixin...?', 'comment_created': datetime.datetime(2020, 4, 27, 8, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415633467, 'comment_body': 'a default `GLM()` ctor is missing along with the properties registration with `SG_ADD`', 'comment_created': datetime.datetime(2020, 4, 27, 8, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415634474, 'comment_body': '```suggestion\r\n\t\tvoid init_model(const std::shared_ptr<Features>& data) override;\r\n```', 'comment_created': datetime.datetime(2020, 4, 27, 8, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415635379, 'comment_body': 'you need to check the type of `data` to make sure that that cast is successful otherwise throw a meaningful error (possibly with `require`)', 'comment_created': datetime.datetime(2020, 4, 27, 8, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415635941, 'comment_body': 'this is not really intuitive... could you please check for size? ', 'comment_created': datetime.datetime(2020, 4, 27, 8, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415636894, 'comment_body': 'imo you could use range expression...', 'comment_created': datetime.datetime(2020, 4, 27, 9, 0, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415636981, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415637040, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415637102, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415637288, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415637378, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415637725, 'comment_body': '```suggestion\r\n\t\tbias -= learning_rate * gradient_bias;\r\n```', 'comment_created': datetime.datetime(2020, 4, 27, 9, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415637908, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638090, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638164, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638260, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638332, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638388, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638646, 'comment_body': 'you could use linalg to scale...', 'comment_created': datetime.datetime(2020, 4, 27, 9, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638725, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638763, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638824, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638906, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415638962, 'comment_body': 'auto', 'comment_created': datetime.datetime(2020, 4, 27, 9, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415639640, 'comment_body': 'you can just return the linalg expression', 'comment_created': datetime.datetime(2020, 4, 27, 9, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415640011, 'comment_body': 'whitespace', 'comment_created': datetime.datetime(2020, 4, 27, 9, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415868580, 'comment_body': ""> the problem with multi-inheritance is that this is not exposeable to JVM.... as multi-inheritance is not supported :(\r\n\r\nOh okay, so, what's the alternative? I need the `IterativeMachine` to run the several Iterations and I need the `RandomMixin` to initialize the parameters with random values accoring to a normal distribution in the `init_model()` function"", 'comment_created': datetime.datetime(2020, 4, 27, 14, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415869333, 'comment_body': '@vigsterkr This is where I use `m_prng` from the `RandomMixin` class', 'comment_created': datetime.datetime(2020, 4, 27, 14, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415912122, 'comment_body': ""Not really, I'll remove it"", 'comment_created': datetime.datetime(2020, 4, 27, 15, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415912371, 'comment_body': ""No, I'll remove it"", 'comment_created': datetime.datetime(2020, 4, 27, 15, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415917025, 'comment_body': ""```\r\nmember function declared with 'override' does not override a base class member\r\n```\r\n\r\nThis is the error I get when I make the proposed change. Originally in `IterativeMachine`, the function has been defined without the `const`"", 'comment_created': datetime.datetime(2020, 4, 27, 15, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415918717, 'comment_body': ""Not really, I don't plan to make any classes that derive from `GLM`.\r\nShould I make them all private members?"", 'comment_created': datetime.datetime(2020, 4, 27, 15, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 415937701, 'comment_body': 'then that should be fixed there.... if this is a function in IterativeMachine', 'comment_created': datetime.datetime(2020, 4, 27, 15, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415937997, 'comment_body': 'But why `RandomMixin<Distribution>`?', 'comment_created': datetime.datetime(2020, 4, 27, 15, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 415997452, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 4, 27, 17, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 416077547, 'comment_body': 'I always thought that if a class is not exposed to swig, then there are no problems with multi inheritance?', 'comment_created': datetime.datetime(2020, 4, 27, 19, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 416086587, 'comment_body': ""but i guess for the time being this will be exposed.\r\nstill i'm not so sure if i get why the Distribution interface required here..."", 'comment_created': datetime.datetime(2020, 4, 27, 19, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 416094907, 'comment_body': ""Sorry, that's an error. Only the second line should be there."", 'comment_created': datetime.datetime(2020, 4, 27, 19, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 416372085, 'comment_body': 'note i believe that this should be `RandomMixin<IterativeMachine<LinearMachine>>` since i really dont see how GLM is a distribution itself...', 'comment_created': datetime.datetime(2020, 4, 28, 6, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 416372398, 'comment_body': 'yeah but GLM is not implementing any Distribution interface...', 'comment_created': datetime.datetime(2020, 4, 28, 6, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 417202036, 'comment_body': ""I used the `Distribution` interface as I had seen it get used elsewhere.\r\n\r\nYes, I had tried that before but It was throwing a few errors I wasn't able to figure out then. Since multi inheritance is a problem, I will be implementing it using `RandomMixin<IterativeMachine<LinearMachine>>` \r\n"", 'comment_created': datetime.datetime(2020, 4, 29, 10, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 417323500, 'comment_body': 'There is no `m_compute_bias` defined in `LinearMachine`.\r\nref: [LinearMachine.h](https://github.com/shogun-toolbox/shogun/blob/develop/src/shogun/machine/LinearMachine.h)\r\nShould I add it there or add it to just the `GLM` class?', 'comment_created': datetime.datetime(2020, 4, 29, 13, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 417390425, 'comment_body': '++ on removing distribution. IMO the multiple inheritance is not a problem, but that should be resolved anyways with your change', 'comment_created': datetime.datetime(2020, 4, 29, 15, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 417391465, 'comment_body': 'Think the way it is done atm is leaving this decision to the sub-classes, so GLM', 'comment_created': datetime.datetime(2020, 4, 29, 15, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 417394352, 'comment_body': 'Yes, I have removed it.', 'comment_created': datetime.datetime(2020, 4, 29, 15, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 418978797, 'comment_body': ""yes, if you don't think anyone will ever inherit from this and need these parameters"", 'comment_created': datetime.datetime(2020, 5, 2, 16, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 418978989, 'comment_body': ""I think in this case it wouldn't hurt to break up this line into several lines (you won't miss out on any performance) and the code will be more readable"", 'comment_created': datetime.datetime(2020, 5, 2, 16, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 418992107, 'comment_body': ""Yes, I'll rectify that."", 'comment_created': datetime.datetime(2020, 5, 2, 18, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451037041, 'comment_body': 'Anyhow, I guess the segmentation fault could be caused by these guys here. They are not initialized anywhere in the code. Therefore, if you try to access one of their methods, the program will segfault. ', 'comment_created': datetime.datetime(2020, 7, 7, 17, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 451037350, 'comment_body': 'Missing constructor', 'comment_created': datetime.datetime(2020, 7, 7, 17, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 451350772, 'comment_body': 'Do I need to explicitly define one? There is a default constructor which is called otherwise right.\r\n', 'comment_created': datetime.datetime(2020, 7, 8, 7, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451352101, 'comment_body': ""I tried initializing them in the `GLM()` default constructor, but as it seems program control isn't entering the `GLM()` constructor(As much as I could deduce from logs using cout). And I still get the segfault."", 'comment_created': datetime.datetime(2020, 7, 8, 7, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451363948, 'comment_body': ""If you don't initialise then it will just point to some memory location. That memory location may be valid, but will be garbage because the object at that location has not been initialised. You have something like this https://godbolt.org/z/sLbM9o, and the return value is a result of undefined behaviour."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451364925, 'comment_body': ""I see that you have `set_target` but wouldn't it be possible to have constructor with `std::shared_ptr<GLM>&` argument instead? You should look into [RAII](https://en.cppreference.com/w/cpp/language/raii), as this is best practice."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451543046, 'comment_body': ""Here you should also call the default constructor. If you don't do that, the various `m_gradient_updater`, `m_learning_rate` won't be initialized. \r\n\r\n```c++\r\nGLM::GLM(GLM_DISTRIBUTION distr, float64_t alpha, float64_t lambda, float64_t learning_rate, int32_t max_iterations, float64_t tolerance, float64_t eta): GLM()\r\n\r\n```"", 'comment_created': datetime.datetime(2020, 7, 8, 13, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 451543439, 'comment_body': 'This should fix your segfaults. ', 'comment_created': datetime.datetime(2020, 7, 8, 13, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 451548941, 'comment_body': 'Please remove all of these statements. Usually, when you push code on the PR, it should be free of these `std::cout` methods. If you want to keep them to make it easier for you to check things, you can replace them with calls to `SG_DEBUG` which are allowed:\r\n\r\n```c++\r\nSG_DEBUG(""Entering GLM constructor."")\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 13, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 451551006, 'comment_body': ""Is it normal that the labels values are all the same? Shouldn't be kind of different from each other? Plus, I think these data points might be too few to test everything correctly... however, let's keep it like this for now. \r\n\r\nI would suggest also to change the variable naming to more standard words (e.g., `labels` and `features`). "", 'comment_created': datetime.datetime(2020, 7, 8, 13, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 451552864, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 451562026, 'comment_body': 'Yes, that was silly of me, sorry.\r\n', 'comment_created': datetime.datetime(2020, 7, 8, 13, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451562189, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451562384, 'comment_body': ""Yes, I'll do this."", 'comment_created': datetime.datetime(2020, 7, 8, 13, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451570979, 'comment_body': 'How do you get SG_DEBUG() messages to be displayed on the console when you run the test?', 'comment_created': datetime.datetime(2020, 7, 8, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451577691, 'comment_body': 'Hi, How will I implement this here though?\r\nFor there to be no segmentation fault, I\'ll need to call the constructor for `GLMCostFunction` in the constructor of `GLM`.\r\nBut I can\'t initialize `GLMCostFunction` in `GLM`\'s constructor as I need to pass a `shared_pointer` to the `GLMCostFunction` which is not possible until the object is actually created.\r\n\r\nhttps://stackoverflow.com/questions/31924396/why-shared-from-this-cant-be-used-in-constructor-from-technical-standpoint\r\n\r\nIs there any workaround to prevent getting the ""bad_weak_pointer"" exception.', 'comment_created': datetime.datetime(2020, 7, 8, 14, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451610550, 'comment_body': ""Oh I see. In that case what I would do is have a constructor with a raw pointer, `GLMCostFunction(GLM*)`, and store that in `GLMCostFunction`. And to make sure you don't have some weird behaviour later on, I would replace `std::shared_ptr<GLMCostFunction> m_cost_function;` with `std::unique_ptr<GLMCostFunction> m_cost_function;`, so now you know there is only one reference to the pointer that points to `GLM`, so you won't have a memory leak or segfault when `GLM` is destructed :)"", 'comment_created': datetime.datetime(2020, 7, 8, 14, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451611581, 'comment_body': 'this won\'t print anything meaningful, it will just write out the enum value (which will be an int). What you need here is a map from enum value to a meaningful string, e.g. {POISSON: ""Poisson""} that you can get here', 'comment_created': datetime.datetime(2020, 7, 8, 14, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451612381, 'comment_body': 'here you are allocating memory, and then in the function you are just reallocating memory..', 'comment_created': datetime.datetime(2020, 7, 8, 14, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451613490, 'comment_body': 'it would be nicer if you returned something like `std::tuple<SGMatrix<float64_t>, SGVector<float64_t>>` and then in the function call just have `const auto& [Xtrain, ytrain] = generate_train_data();`', 'comment_created': datetime.datetime(2020, 7, 8, 15, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451617710, 'comment_body': 'you need to compile in debug mode, and then it should appear automatically, because default logging level should be debug', 'comment_created': datetime.datetime(2020, 7, 8, 15, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451621659, 'comment_body': ""Yes, okay, I'll do this."", 'comment_created': datetime.datetime(2020, 7, 8, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451947419, 'comment_body': 'This `normal_dist(m_prng)` is always returning Zero. Why might that be happening? Is there any workaround?', 'comment_created': datetime.datetime(2020, 7, 9, 3, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 451993711, 'comment_body': 'You are dividing 1, an int, by an int larger than 1. You are expecting a double but you’re getting a fraction as an int, in this case will always be 0. You need to write 1. for it to be a double', 'comment_created': datetime.datetime(2020, 7, 9, 6, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 452468724, 'comment_body': 'Thanks.', 'comment_created': datetime.datetime(2020, 7, 9, 20, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456119669, 'comment_body': 'Can someone confirm if this is the correct way to randomly initialize the weights and bias? This is the corresponding python code:\r\n```\r\nfrom sklearn.utils import check_random_state\r\nrandom_state_ = check_random_state(0)\r\n\r\nweights = 1 / (n_features + 1) * random_state_.normal(0.0, 1.0, (n_features, ))\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 22, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456199278, 'comment_body': 'you should rebase this PR over latest develop and remove these changes....', 'comment_created': datetime.datetime(2020, 7, 17, 3, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456199397, 'comment_body': 'rebase and keep the override part', 'comment_created': datetime.datetime(2020, 7, 17, 3, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456199486, 'comment_body': 'unrelated change... plz dont change these', 'comment_created': datetime.datetime(2020, 7, 17, 3, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456200080, 'comment_body': '```suggestion\r\n\tauto features_train = std::make_shared<DenseFeatures<float64_t>>(Xtrain);\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 3, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456200149, 'comment_body': '```suggestion\r\n\tauto features_test = std::make_shared<DenseFeatures<float64_t>>(Xtest);\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 3, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456200556, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 3, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456200705, 'comment_body': 'i.e not required to have that many empty lines...', 'comment_created': datetime.datetime(2020, 7, 17, 3, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456200832, 'comment_body': 'unrelated to this effort... ', 'comment_created': datetime.datetime(2020, 7, 17, 3, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 456301440, 'comment_body': 'I had to do this as I had made a change in IterativeMachine as you had said: https://github.com/shogun-toolbox/shogun/pull/5006#discussion_r415634474\r\n\r\nAnd then AveragedPerceptron, Perceptron, and NewtonSVM are derived from IterativeMachine and so had to make corresponding changes there to prevent compile-time errors.', 'comment_created': datetime.datetime(2020, 7, 17, 8, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456338931, 'comment_body': 'yes that is semantically correct (you didnt post the bias init here).\r\n\r\nCould you rewrite the loops using more c++ style expressions?', 'comment_created': datetime.datetime(2020, 7, 17, 9, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456340064, 'comment_body': 'https://en.cppreference.com/w/cpp/algorithm/generate', 'comment_created': datetime.datetime(2020, 7, 17, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456340273, 'comment_body': 'you can copy the whole memory block at once using e.g. sg_memcpy', 'comment_created': datetime.datetime(2020, 7, 17, 9, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456341011, 'comment_body': ""we don't use `int`, use `auto i : range(m_w.len)`"", 'comment_created': datetime.datetime(2020, 7, 17, 9, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456341172, 'comment_body': 'nit: whitespace missing', 'comment_created': datetime.datetime(2020, 7, 17, 9, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456341317, 'comment_body': ""just remove the todo's in the code and place a todo list in the github thread"", 'comment_created': datetime.datetime(2020, 7, 17, 9, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456341432, 'comment_body': 'nit: line too long', 'comment_created': datetime.datetime(2020, 7, 17, 9, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456341660, 'comment_body': 'isnt that part of LinearMachine already?', 'comment_created': datetime.datetime(2020, 7, 17, 9, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456341952, 'comment_body': 'initialise them down here, and all should be good', 'comment_created': datetime.datetime(2020, 7, 17, 9, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456342261, 'comment_body': '++', 'comment_created': datetime.datetime(2020, 7, 17, 9, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456342461, 'comment_body': 'vectorize pls! :)', 'comment_created': datetime.datetime(2020, 7, 17, 9, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456343179, 'comment_body': 'cool does this pass? If so great! :)\r\nNext should be a few tests of the individual elements, e.g. the gradient', 'comment_created': datetime.datetime(2020, 7, 17, 9, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456343347, 'comment_body': '1e-7', 'comment_created': datetime.datetime(2020, 7, 17, 9, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456346171, 'comment_body': 'I would say use `clone` no? It will handle allocation + copying', 'comment_created': datetime.datetime(2020, 7, 17, 10, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 456357300, 'comment_body': 'ah yes `SGVector::clone`', 'comment_created': datetime.datetime(2020, 7, 17, 10, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 456707423, 'comment_body': 'Since get_gradient() is not a public function, I should do it in this way right?\r\n```\r\nclass Foo\r\n{\r\n    friend class FooTest;\r\nprivate:\r\n    int bar(...);\r\n}\r\n\r\nclass FooTest : public ::testing::Test\r\n{\r\nprotected:\r\n    int bar(...) { foo.bar(...); }\r\nprivate:\r\n    Foo foo;\r\n}\r\n\r\nTEST_F(FooTest, barReturnsZero)\r\n{\r\n    EXPECT_EQ(bar(...), 0);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 22, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456709014, 'comment_body': ""You had mentined earlier to implement it here as LinearMachine doesn't seem to have m_compute_bias\r\nhttps://github.com/shogun-toolbox/shogun/pull/5006#discussion_r417323500"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456769767, 'comment_body': ""I just realized this. Does this class really need to keep a pointer to a `GLM` object? Wouldn't be possible to change its design such to have something like\r\n```c++\r\nvirtual SGVector<float64_t> get_gradient(const Features &X, const Labels &y, const SGVector& weights, const float64_t bias)\r\n```\r\nThen, inside the GLM object, you will just call\r\n```c++\r\nget_gradient(m_features->get_computed_dot_feature_matrix(), labels, m_weigths, m_bias)\r\n```\r\nWe will be able to decouple the `GLMCostFunction` from the GLM object and, as a bonus, you will be able to write a unit test for the gradients more easily (since `get_gradient()` is public here). \r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 9, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 456769920, 'comment_body': 'The same comment I left above applies here as well.', 'comment_created': datetime.datetime(2020, 7, 18, 9, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 456770079, 'comment_body': 'Oh okay, so I should pass all the variables as parameters. Should I make the functions static?\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 9, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456770404, 'comment_body': 'I would say no. I would like to have in the future multiple classes which stem from `GLMCostFunction` which represents single distributions (e.g., `GLMPoisson`, `GLMBinomial`, etc.) and each of them will have to override `get_gradient()` to implement its own gradient. \r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 9, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 456770784, 'comment_body': ""Hmm right, this makes sense, So I should implement get_gradient the way I have implemented `compute_z(const SGMatrix<float64_t> X, const SGVector<float64_t> w, const float64_t bias)` or `non_linearity(const SGVector<float64_t> z)`.\r\n\r\nAnd I should make this get_gradient() public as well so that we can test it directly using a unit test.\r\nI'm on it."", 'comment_created': datetime.datetime(2020, 7, 18, 9, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456771024, 'comment_body': ""Yes! Focus just on changing `GLMCostFunction`'s methods for now. We will refactor into several different classes later. "", 'comment_created': datetime.datetime(2020, 7, 18, 9, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 456776145, 'comment_body': 'Should I pass features and lables as parameters? Or SGMatrix and SGVector?\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 10, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456776353, 'comment_body': 'Your choice. Try to keep it consistent with the other methods though. ', 'comment_created': datetime.datetime(2020, 7, 18, 10, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 456781594, 'comment_body': ""Okay so I figured out why i hadn't done this in the first place.\r\nGLMCostFunction is derived from FirstOrderCostFunction which has the pure virtual function `virtual SGVector<float64_t> get_gradient()=0;`\r\nSo, I can't add parameters.\r\nbut there is an option to skip the inheritance all together and just write GLMCostFunction as an independent class. Is that okay?"", 'comment_created': datetime.datetime(2020, 7, 18, 11, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 456786088, 'comment_body': 'Yes, do it. ', 'comment_created': datetime.datetime(2020, 7, 18, 12, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 457274729, 'comment_body': 'excellent. I guess you should name the test GLM_POSSON_gradient_test', 'comment_created': datetime.datetime(2020, 7, 20, 10, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457275266, 'comment_body': 'I realise the naming is a bit strange here\r\nWhat about\r\n* get_gradient_weights\r\n* get_gradient_bias', 'comment_created': datetime.datetime(2020, 7, 20, 10, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457457215, 'comment_body': '@vigsterkr , is this `FeatureDispatchCRTP` still relevant? What does it do?', 'comment_created': datetime.datetime(2020, 7, 20, 14, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457464531, 'comment_body': ""wouldn't it be `get_weights_gradient` and `get_bias_gradient`?"", 'comment_created': datetime.datetime(2020, 7, 20, 14, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457464922, 'comment_body': '@karlnapf The way I am doing it right now is correct, right? since, as I mentioned, there is no m_compute_bias in the LinearMachine class. https://github.com/shogun-toolbox/shogun/pull/5006#discussion_r417323500', 'comment_created': datetime.datetime(2020, 7, 20, 14, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457465668, 'comment_body': 'To do that it would have to protected rather than private no?', 'comment_created': datetime.datetime(2020, 7, 20, 14, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457466397, 'comment_body': 'you should do a round of `clang-format` to fix all these indentation/spacing issues', 'comment_created': datetime.datetime(2020, 7, 20, 14, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457466633, 'comment_body': '```suggestion\r\n\tconst char* get_name() const override { return ""GLMCostFunction""; }\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 14, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457467154, 'comment_body': 'both branches do the same thing?', 'comment_created': datetime.datetime(2020, 7, 20, 14, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457467483, 'comment_body': 'use `linalg`', 'comment_created': datetime.datetime(2020, 7, 20, 14, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457468211, 'comment_body': 'is this not needed to get the algorithm working? I guess this would be something you log in each iteration?', 'comment_created': datetime.datetime(2020, 7, 20, 15, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457469349, 'comment_body': ""@karlnapf woudn't it be better to also write the one line formula for this as a comment?"", 'comment_created': datetime.datetime(2020, 7, 20, 15, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457471040, 'comment_body': 'the shared_ptr have to be initialise in the constructor, as they allocate memory on the heap (compiler cannot allocate this memory as part of object initialisation on the stack afaik)', 'comment_created': datetime.datetime(2020, 7, 20, 15, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457472792, 'comment_body': 'You would need it to be derived from `FirstOrderCostFunction` so that it can be exposed to the interfaces (not sure that is necessary)?', 'comment_created': datetime.datetime(2020, 7, 20, 15, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 457536250, 'comment_body': 'Check out a class where it is used, it allows to train the machine on a number of different feature template types...float32, float64 etc\r\nBut I think this should be done in a next PR (but you should definitely do this! put it on the todo list just after this here is merged)', 'comment_created': datetime.datetime(2020, 7, 20, 16, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457536878, 'comment_body': 'i read this ""get gradient wrt weights"" so I prefer what I wrote ... whatever it is, it should be consistent (which it currently is not)', 'comment_created': datetime.datetime(2020, 7, 20, 16, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457537487, 'comment_body': ""sorry, what do you mean? I don't understand the question"", 'comment_created': datetime.datetime(2020, 7, 20, 16, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457537704, 'comment_body': 'see comment by @geektoni on this', 'comment_created': datetime.datetime(2020, 7, 20, 16, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457538007, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 7, 20, 16, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457539081, 'comment_body': 'btw, could you pls put a comment with a link to a gist of a standalone python script / notebook where these numbers are computed?\r\nYou should do this for all tests where you test against another lib, as then somebody else can reproduce the numbers without too much work', 'comment_created': datetime.datetime(2020, 7, 20, 16, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 457554136, 'comment_body': ""Yes, okay. I'll do that.\r\n"", 'comment_created': datetime.datetime(2020, 7, 20, 16, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457574928, 'comment_body': 'Can I resolve this?', 'comment_created': datetime.datetime(2020, 7, 20, 17, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457576162, 'comment_body': ""Thanks, yes, I'll do that."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457580815, 'comment_body': 'I have fixed this, however, is the 80 character limit rule supposed to be followed strictly? https://github.com/shogun-toolbox/shogun/wiki/Code-style#other-general-rules\r\nAs many other lines of mine are crossing the 80 character limit.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457600782, 'comment_body': 'Can I resolve this?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457604882, 'comment_body': ""No, I don't really need the cost anytime, I just need the gradient of the cost as well as the penalty."", 'comment_created': datetime.datetime(2020, 7, 20, 18, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457605689, 'comment_body': 'But, then how do we separately add a unit test for the get_gradient() function if it is supposed to be protected in the `FirstOrderCostFunction`', 'comment_created': datetime.datetime(2020, 7, 20, 18, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457610456, 'comment_body': ""Ok, I'll do this."", 'comment_created': datetime.datetime(2020, 7, 20, 18, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457611719, 'comment_body': 'Yes thanks, I have done this now, and it works.', 'comment_created': datetime.datetime(2020, 7, 20, 18, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457617512, 'comment_body': ""Yes, I've done it the way you proposed earlier with the tuple."", 'comment_created': datetime.datetime(2020, 7, 20, 18, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457618105, 'comment_body': ""Okay, Ill remove it, I thought it was good practice as it shouldn't be mistaken by the compiler to be the `>>` operator"", 'comment_created': datetime.datetime(2020, 7, 20, 18, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457621221, 'comment_body': ""Right, yes, Sorry I overlooked this, actually they were different back when I was still using the inverse covariance matrix. I'll remove the if statement."", 'comment_created': datetime.datetime(2020, 7, 20, 18, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457621897, 'comment_body': ""Yes, I'll do this."", 'comment_created': datetime.datetime(2020, 7, 20, 18, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457623295, 'comment_body': ""Yes, I'll make the change. Actually back when `GLMCostFunction` was derived from `FirstOrderCostFunction`, `get_gradient()` was a pure virtual function I had to use.\r\nI'll rename them to `get_gradient_weights()` and `get_gradient_bias()`."", 'comment_created': datetime.datetime(2020, 7, 20, 18, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457623791, 'comment_body': ""Okay, I'll do this."", 'comment_created': datetime.datetime(2020, 7, 20, 18, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 457642711, 'comment_body': 'In order to fix the code style all at once, you can use the script called `check_format.sh` inside the `scripts` directory. You can call it this way\r\n```bash\r\n./check_format.sh feature/implementGLM develop\r\n```\r\nIt will give you all the info needed to fix the style automatically. You need to have installed `clang-format` to do use it. ', 'comment_created': datetime.datetime(2020, 7, 20, 19, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 457643532, 'comment_body': 'I think `FirstOrderCostFunction` was written for a different purpose. I would keep `GLMCostFunction` as a separate class. It is not needed to expose it through the interfaces.', 'comment_created': datetime.datetime(2020, 7, 20, 19, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 457846213, 'comment_body': 'Yes, okay.\r\n', 'comment_created': datetime.datetime(2020, 7, 21, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 458180611, 'comment_body': 'you can but pls use a range based loop and no `int`', 'comment_created': datetime.datetime(2020, 7, 21, 15, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 458180805, 'comment_body': 'any needed help just ask :)', 'comment_created': datetime.datetime(2020, 7, 21, 15, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 458181357, 'comment_body': 'this seems to be a rebase issue ... the compiler errors should have been fixed by others', 'comment_created': datetime.datetime(2020, 7, 21, 15, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 458181783, 'comment_body': 'it is also very simple to do this by hand btw (at least for the 80 char limit)', 'comment_created': datetime.datetime(2020, 7, 21, 15, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 458182533, 'comment_body': 'ah I see. ok for the rename, but pls dont rename anything in the base class (there the gradient would need to be wrt everything)', 'comment_created': datetime.datetime(2020, 7, 21, 15, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 458184246, 'comment_body': 'remove it then? Or implement it for debugging purposes...but not an empty one pls :)', 'comment_created': datetime.datetime(2020, 7, 21, 15, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 458195191, 'comment_body': ""Okay, I'll add this."", 'comment_created': datetime.datetime(2020, 7, 21, 15, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 458223081, 'comment_body': ""I could only do this for the second unit test, as pyGLMnet always generates new random weights, the answer is different every time, so it won't be possible."", 'comment_created': datetime.datetime(2020, 7, 21, 16, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 458296525, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 21, 18, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 458384372, 'comment_body': '+1 for this meta example. I am not so sure it will give meaningful results with these datasets... we might need to add one to run it correctly. ', 'comment_created': datetime.datetime(2020, 7, 21, 20, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 458764053, 'comment_body': 'Oh okay, should I generate it using pyGLMnet? using the simulate_glm method like I did for the unit test?', 'comment_created': datetime.datetime(2020, 7, 22, 12, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 458789979, 'comment_body': ""Yes, that would be better. It shouldn't be too big. Take a look at https://github.com/shogun-toolbox/shogun-data/tree/master/toy for some examples. Once done,  you would need to open a PR also in shogun-data to add this new data file and follow the same procedure as you usually do to add a meta-example. "", 'comment_created': datetime.datetime(2020, 7, 22, 13, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 459079192, 'comment_body': ""Yes, I've done that, this is on an older commit so it isn't showing I guess."", 'comment_created': datetime.datetime(2020, 7, 22, 20, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 459276896, 'comment_body': ""@Hephaestus12 how's going with this one? This is one of the last few things left before merging :)"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 459281342, 'comment_body': 'I have rewritten the loops using range based for loops as @karlnapf suggested;\r\nHowever, is it possible to vectorize the random number generation using `normal_dist(m_prng)`?\r\nOr will I have to initialize each weight one at a time', 'comment_created': datetime.datetime(2020, 7, 23, 8, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 459286300, 'comment_body': 'here you can optimize more with [std::generate](https://en.cppreference.com/w/cpp/algorithm/generate). You should replace the loop with that method. Have a look at the documentation to understand how to use it.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 8, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 459328387, 'comment_body': '@Hephaestus12 can you not fix the seed in glmnet?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459329622, 'comment_body': 'these two lines can just be `require(features)`, I think that is how other algorithms do this', 'comment_created': datetime.datetime(2020, 7, 23, 9, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459330434, 'comment_body': '```suggestion\r\n\t\tset_features(\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459330559, 'comment_body': '```suggestion\r\n\tfeatures->dense_dot_range(\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459330709, 'comment_body': '```suggestion\r\n\tconst auto& n_features = features->get_dim_feature_space();\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459331425, 'comment_body': 'why `bias == 0`?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459331981, 'comment_body': 'can be removed?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459332557, 'comment_body': 'imo more readable if you write:\r\n```suggestion\r\n\t\t\t\tm_w[i] -= (m_lambda * m_alpha);\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459332678, 'comment_body': '```suggestion\r\n\t\t\t\tm_w[i] += (m_lambda * m_alpha);\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459332791, 'comment_body': '```suggestion\r\n\t\tif (std::abs(m_w[i]) < (m_lambda * m_alpha))\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459333101, 'comment_body': '```suggestion\r\n\t                        : std::abs(norm_update / linalg::norm(m_w));\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459333415, 'comment_body': '```suggestion\r\n\t\t~GLM() override = default;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459333939, 'comment_body': '```suggestion\r\n\t\tconstexpr std::string_view glm_enum_to_string(GLM_DISTRIBUTION distribution)\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459334525, 'comment_body': '```suggestion\r\n\t\tEProblemType get_machine_problem_type() const override\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459334680, 'comment_body': '```suggestion\r\n\t\tvoid init_model(const std::shared_ptr<Features>& data);\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459334875, 'comment_body': 'can be removed?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459334976, 'comment_body': '```suggestion\r\n\t\tGLMCostFunction() = default;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459335142, 'comment_body': '```suggestion\r\n\t\t    const SGMatrix<float64_t>& X, const SGVector<float64_t>& y,\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459335219, 'comment_body': '```suggestion\r\n\t\t    const SGVector<float64_t>& w, const float64_t bias,\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459335791, 'comment_body': '```suggestion\r\n\t\t    const SGMatrix<float64_t>& X, const SGVector<float64_t>& y,\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459335879, 'comment_body': '```suggestion\r\n\t\t    const SGVector<float64_t>& w, const float64_t bias,\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459336496, 'comment_body': 'why virtual?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459336613, 'comment_body': '```suggestion\r\n\t\t    const SGMatrix<float64_t>& X, const SGVector<float64_t>& w,\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459337025, 'comment_body': 'If this class is hidden from the user you might as well just declare it in the cpp file', 'comment_created': datetime.datetime(2020, 7, 23, 9, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459337160, 'comment_body': '```suggestion\r\n\t\t    const SGVector<float64_t>& z, const bool compute_bias,\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459337700, 'comment_body': 'why are all labels the same?', 'comment_created': datetime.datetime(2020, 7, 23, 9, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459338286, 'comment_body': '```suggestion\r\n\treturn {features, labels};\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459338461, 'comment_body': '```suggestion\r\n\treturn {features, labels};\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 9, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459338859, 'comment_body': 'ah nvm my comment from above, you need `GLMCostFunction` in the header file so you can test it here ', 'comment_created': datetime.datetime(2020, 7, 23, 9, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460414401, 'comment_body': ""The serialization issue is caused by this `enum` here. Apparently, RapidJSON does not like it. I don't even know if this is a bug of the serialization library or something else. "", 'comment_created': datetime.datetime(2020, 7, 25, 15, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 460414812, 'comment_body': 'in what way? Is it not serialising it properly? or is not deserialising it?', 'comment_created': datetime.datetime(2020, 7, 25, 15, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460415094, 'comment_body': ""It triggers a RapidJSON's assertion and the program crashes. Therefore, nothing is serialized. "", 'comment_created': datetime.datetime(2020, 7, 25, 15, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 460415341, 'comment_body': 'that is odd, because there are other classes with `enum`s that do not have issues.. Could you show the assertion? Is this in debug mode?', 'comment_created': datetime.datetime(2020, 7, 25, 15, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460415779, 'comment_body': ""```native_example: /usr/include/rapidjson/writer.h:448: void rapidjson::Writer<OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags>::Prefix(rapidjson::Type) [with OutputStream = OutputStreamAdapter; SourceEncoding = rapidjson::UTF8<>; TargetEncoding = rapidjson::UTF8<>; StackAllocator = rapidjson::CrtAllocator; unsigned int writeFlags = 2]: Assertion `type == kStringType' failed.```\r\n\r\nThe failing assertion is this one.  "", 'comment_created': datetime.datetime(2020, 7, 25, 15, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 460416645, 'comment_body': '@geektoni this is has to be casted to `machine_int_t`, i.e. `(machine_int_t*)&m_distribution`. We do not support serialisation with `enum` type itself', 'comment_created': datetime.datetime(2020, 7, 25, 15, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460416691, 'comment_body': 'this will allow users to specify the enum as a string when using put/get\r\n```suggestion\r\n\t    ParameterProperties::HYPER, SG_OPTIONS(POISSON));\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 15, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460416850, 'comment_body': 'see https://github.com/shogun-toolbox/shogun/pull/5006/files/57d2e69ee4b1028fc3bc987b7f62d4562e88f49d#diff-c0b6c5016f5b119725c762901ee7142f', 'comment_created': datetime.datetime(2020, 7, 25, 15, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460417779, 'comment_body': ""ahh I see. I didn't know that. Thank you again :)"", 'comment_created': datetime.datetime(2020, 7, 25, 15, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 460498460, 'comment_body': 'why not `ParameterProperties::HYPER`?', 'comment_created': datetime.datetime(2020, 7, 26, 8, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460498550, 'comment_body': 'is this static cast safe?', 'comment_created': datetime.datetime(2020, 7, 26, 8, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460682334, 'comment_body': ""That was the way it was done in KNN so I made it NONE, I'll make it HYPER, I think that makes more sense."", 'comment_created': datetime.datetime(2020, 7, 27, 6, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460684711, 'comment_body': 'Should I replace it with this:\r\n```\r\nif (data)\r\n{\r\n\tif (!data->has_property(FP_DOT))\r\n\t        error(""Specified features are not of type CDotFeatures"");\r\n\tLinearMachine::set_features(std::static_pointer_cast<DotFeatures>(data));\r\n}\r\nASSERT(features)\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 7, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460688601, 'comment_body': 'Only the functions which will be reimlemented should be virtual. right.\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 7, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460691394, 'comment_body': ""This happened as the beta is supposed to be a sparse vector and so this happens I guess:\r\n```\r\nimport numpy as np\r\nimport scipy.sparse as sps\r\n\r\nfrom pyglmnet import simulate_glm\r\n\r\n# sample a sparse model\r\nnp.random.seed(42)\r\nbeta0 = np.random.rand()\r\nbeta = sps.random(1, n_features, density=0.2).toarray()[0]\r\n\r\n# simulate data\r\nXtrain = np.random.normal(0.0, 1.0, [n_samples, n_features])\r\nytrain = simulate_glm('poisson', beta0, beta, Xtrain)\r\nXtest = np.random.normal(0.0, 1.0, [n_samples, n_features])\r\nytest = simulate_glm('poisson', beta0, beta, Xtest)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 27, 7, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460692057, 'comment_body': ""yes, except the `ASSERT(features)`, that shouldn't be needed"", 'comment_created': datetime.datetime(2020, 7, 27, 7, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460693645, 'comment_body': 'There is no inheritance here right? Or would you expect a developer to inherit from `GLMCostFunction`?', 'comment_created': datetime.datetime(2020, 7, 27, 7, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460695389, 'comment_body': 'Yes okay :)', 'comment_created': datetime.datetime(2020, 7, 27, 7, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460696487, 'comment_body': '`simulate_glm` misses the argument `sample=True`. You need that in order to simulate correctly the y labels.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 460696997, 'comment_body': 'Yes, that is a plan for the future: When one wants to implement something else like probit or gamma one will have to inherit from this and make a class called GLMGammaCostFunction. This is to prevent all the switch case clutter.\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 7, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460701412, 'comment_body': 'Oh I see, that makes sense. But the linear term is always computed as `Xw + b`?', 'comment_created': datetime.datetime(2020, 7, 27, 7, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460702488, 'comment_body': 'Yes.\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 7, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460829472, 'comment_body': 'Should I work on this right now? Or a separate PR to add a meta example for GLM after merging this?', 'comment_created': datetime.datetime(2020, 7, 27, 11, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460839099, 'comment_body': 'I did it this way as it is done this way here: \r\nhttps://github.com/shogun-toolbox/shogun/blob/ec557d8604b7bf5c2f4ce411aaa2dc0970839d8d/src/shogun/machine/LinearMachine.cpp#L78-L79\r\nshould I just use `require` instead?', 'comment_created': datetime.datetime(2020, 7, 27, 11, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460841872, 'comment_body': ""How should I check if bias has been set already? using something like put, so that I don't over-write that"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460844600, 'comment_body': ""I can't do this, this overrides the init_model() from iterative machine and it is done this way there"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460845638, 'comment_body': 'if this method is overriding something you should mark it `override`', 'comment_created': datetime.datetime(2020, 7, 27, 12, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460845921, 'comment_body': ""if it is always the same it doesn't make sense for this to be virtual then?"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460846007, 'comment_body': 'Oh okay, should I go ahead and change the unit test data?\r\nOr implement this in the meta example test?', 'comment_created': datetime.datetime(2020, 7, 27, 12, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460846729, 'comment_body': ""why do you need to check it? Isn't this only called once when training is started, when you initialise the model parameters?"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460847248, 'comment_body': 'imo an error explaining the issue is better than an empty result', 'comment_created': datetime.datetime(2020, 7, 27, 12, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 460847415, 'comment_body': ""Because this test doesn't exactly check if the GLM works properly, it checks if the GLM gives the exact same answer as the pyGLMnet code.\r\nAs in, the numbers don't matter as much as long as the final predictions match right?"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460883806, 'comment_body': 'Yes, I have made it non-virtual :)', 'comment_created': datetime.datetime(2020, 7, 27, 13, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460888770, 'comment_body': ""Right, I'll do that."", 'comment_created': datetime.datetime(2020, 7, 27, 13, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460889561, 'comment_body': 'Yes, but someone may want to set the initial weights and bias themselves before training the model right? Like how I do in the GLM basic unit test.', 'comment_created': datetime.datetime(2020, 7, 27, 13, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460890267, 'comment_body': ""Yes I'll do that"", 'comment_created': datetime.datetime(2020, 7, 27, 13, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 460891542, 'comment_body': 'oh I see, is that meant to be a prior? I guess it makes sense then!', 'comment_created': datetime.datetime(2020, 7, 27, 13, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461024319, 'comment_body': '> Oh okay, should I go ahead and change the unit test data?\r\n> Or implement this in the meta example test?\r\n\r\nI think you should change it such to have a meaningful unit test. It is true that they need to give the same results, but we have to try to use meaningful data. ', 'comment_created': datetime.datetime(2020, 7, 27, 16, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 462651200, 'comment_body': 'Fixed.\r\n', 'comment_created': datetime.datetime(2020, 7, 29, 23, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 462651276, 'comment_body': 'Datasets added.', 'comment_created': datetime.datetime(2020, 7, 29, 23, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 463451449, 'comment_body': 'This is not needed anymore, right?', 'comment_created': datetime.datetime(2020, 7, 31, 7, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 463463021, 'comment_body': 'is there a reason why the features are added to the state here?', 'comment_created': datetime.datetime(2020, 7, 31, 7, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 463463932, 'comment_body': 'this should be fixed at some point. I guess when we have the LabelEncoder in Machine, otherwise you are performing a potentially expensive operation in each iteration ', 'comment_created': datetime.datetime(2020, 7, 31, 8, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 463465812, 'comment_body': 'it seems like that `RegressionLabels` is what LabelEncoder lacks, currently, LabelEncoder only support MulticlassLabels and BinaryLabels.', 'comment_created': datetime.datetime(2020, 7, 31, 8, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 463466293, 'comment_body': 'True, but it should be possible to add it?', 'comment_created': datetime.datetime(2020, 7, 31, 8, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 463591445, 'comment_body': ""I'll have to make another function public but yes, we can remove the friend class."", 'comment_created': datetime.datetime(2020, 7, 31, 12, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 463594124, 'comment_body': 'No particular reason, I did it this way as it was done like this in LinearMachine:\r\nhttps://github.com/shogun-toolbox/shogun/blob/ec557d8604b7bf5c2f4ce411aaa2dc0970839d8d/src/shogun/machine/LinearMachine.cpp#L70-L76', 'comment_created': datetime.datetime(2020, 7, 31, 12, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 463607417, 'comment_body': 'Should I remove it?\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 13, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 463859440, 'comment_body': 'If you want to remove code, just remove it. Don’t just comment it out. Please don’t commit this kind of changes.', 'comment_created': datetime.datetime(2020, 7, 31, 21, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 464064865, 'comment_body': 'Is the way I have done it now okay?', 'comment_created': datetime.datetime(2020, 8, 2, 11, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 464064906, 'comment_body': 'Comment removed', 'comment_created': datetime.datetime(2020, 8, 2, 11, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 464391878, 'comment_body': ""I am not sure, you'll have to see if this has side effects that you rely on. @LiuYuHui do you know if this is required? Because you had to refactor this code recently in the feature branch"", 'comment_created': datetime.datetime(2020, 8, 3, 12, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': '0bbdb9bd9b81cab1f3b5696944a3371be559cb15', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a65fa05f460c04de4734eafaddd4d37668bdf37', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d91213bcfbdf299ff44db8a9a4eb7adb797e883', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2faedbf249fa0cfac2481a12abc9a05027d20ed', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e439de7b1acf64be9458cf80c1beed32a08b2afe', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2a6cbaf576f34117fada88502731ab233a6fba', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad67ed029a5d6eb0bf6c13c55eade1416bc63c95', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73d726b4423cf5e88325955b2f08eb4bfc0d3410', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e57b55ea2afaa26f8efe518423e17d276d609d', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ec5e6ebf5727e4ab49b6e106a7b2c766cbb7d2', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07d262f4e79832cf370c208e0d548943c4d483bc', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bc2c16a08f1b8cbcd5bbf5256d3d532c99ec16f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bfe4aa4de8ec5ebaccb92f2cc720e735af2b8b9', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23e22320fc64d5228221fe51bc442e1fca15bac0', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff9c4bdbee39a89c9d55ea143049f7890fea6dc0', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10bbee871ab771724e4f593a90e2718c00a62e5c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9da84eefd9353d782ebe1f905c435a04b50279', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd07cfdb3860843bdef552d6a790c5f99c91c2cd7', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '551d1346e89b191e0af0e99fbebce02e5121c976', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74cb247103f420a82786c81cc4901fff89c103f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b43658eaf5bf6b64772b917b224c95464c6cc90', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a7a537bfa4a5b93ebc880f8871af2d513e36ba', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '474e1411d9f1c9b9ec49b2024baf416192eecd9a', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '582341c5c5ebe496eabd5aee1684ea34baedb935', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d2e69ee4b1028fc3bc987b7f62d4562e88f49d', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1670896cba6d9a4f2fbcf515b6b91d0a82b5b6f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763c7f681cf4023599fcc1a7d58a98cbbd833300', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c9f375ab498dca104d321ef43d6c5db4a8d3ed', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a224d30f7b254cbdf81c4563ff6f7c52724c13', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a27efc73ea4411756fdf5ae0bdabaeebcfd6d9', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '437e90b290fe4a1bbeb0e6dc623536f235490e2c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
473197972,Add Dashboard using Plotly Dash.,,False,4,https://api.github.com/repos/shogun-toolbox/applications/pulls/4,https://github.com/shogun-toolbox/applications/pull/4,open,2924,621,58,13,9,19,0,0,[],2020-08-25 13:17:27+00:00,,0.0,,"[{'comment_id': 477083723, 'comment_body': 'These comments should be deleted. You could also keep them by logging their output somewhere if you need them for debug purposes. ', 'comment_created': datetime.datetime(2020, 8, 26, 7, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477083910, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 26, 7, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477084477, 'comment_body': 'It would be nice to add a couple of lines that explain what do these methods do. ', 'comment_created': datetime.datetime(2020, 8, 26, 7, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477085592, 'comment_body': 'If you took this code from somewhere, you should cite the source. Not super important since there is no proper copyright on it (i think) but it is just to acknowledge the person which wrote it. ', 'comment_created': datetime.datetime(2020, 8, 26, 7, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477087471, 'comment_body': ""I reckon that you initially wrote a different piece of code to instantiate a model (`model/src/model.py`), why did you write another one here? Couldn't you use the previous one?"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477088753, 'comment_body': ""Again here, why did you copy code around and you didn't use the one you wrote during the previous iteration? Did you need to add new functionalities or was it not performing the way we wanted? "", 'comment_created': datetime.datetime(2020, 8, 26, 7, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477358988, 'comment_body': ""Here, I've made the `web` and `dash` as standalone applications, when I make the docker container, I'll just be copying the dash folder to that and it'll work. That's why this file had to be transferred here. Also, the old and new web tools are basically two entirely different python flask web applications.\r\nAbout the `model` directly, it is simply the notebooks and scripts which were used to process the data and develop the models.\r\nBasically, the three directories are all independent."", 'comment_created': datetime.datetime(2020, 8, 26, 14, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 477360864, 'comment_body': ""> Here, I've made the `web` and `dash` as standalone applications, when I make the docker container, I'll just be copying the dash folder to that and it'll work. That's why this file had to be transferred here. Also, the old and new web tools are basically two entirely different python flask web applications.\r\n> About the `model` directly, it is simply the notebooks and scripts which were used to process the data and develop the models.\r\n> Basically, the three directories are all independent.\r\n\r\nIs this okay? Or should I make any changes?"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 478641916, 'comment_body': '```suggestion\r\n# Controls What is displayed on the main map\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 19, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 478663326, 'comment_body': 'mmmh I am not sure if I understand how the things are structured now. Why do we have two separate applications and not just the one made with dash? or is it just one? Is there any reason why you kept also the old version of the interface? I am asking because, generally, you should avoid code duplication. Here, it seems that you have basically copy-pasted files around instead of reusing the ones you already wrote.   ', 'comment_created': datetime.datetime(2020, 8, 27, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 479663317, 'comment_body': 'Done.\r\n', 'comment_created': datetime.datetime(2020, 8, 29, 16, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 479752621, 'comment_body': '```suggestion\r\n# Controls What is displayed on the main map\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 10, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 479752648, 'comment_body': 'remove\r\n', 'comment_created': datetime.datetime(2020, 8, 30, 10, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480118890, 'comment_body': 'What is the purpose of these flags (`-h` and `-p`)? I think they are not used by `app.py`. ', 'comment_created': datetime.datetime(2020, 8, 31, 13, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480119506, 'comment_body': ""Ahh I see, you hardcoded the various information here. Wouldn't it be possible to let the user specify the address/port so that he/she won't need to touch directly the source code?"", 'comment_created': datetime.datetime(2020, 8, 31, 13, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480120668, 'comment_body': 'You forgot this `print` statement :)', 'comment_created': datetime.datetime(2020, 8, 31, 13, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480284834, 'comment_body': ""I can remove it from here, but it'll have to be specified in some particular config file. I don't believe it's possible to set these at runtime."", 'comment_created': datetime.datetime(2020, 8, 31, 17, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 481051115, 'comment_body': ""mmh I don't think it is mandatory. You can provide this information as command-line arguments. See https://docs.python.org/3/library/argparse.html#module-argparse"", 'comment_created': datetime.datetime(2020, 9, 1, 10, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 481077492, 'comment_body': ""Ohh right, this is so cool. I'll implement this. :D"", 'comment_created': datetime.datetime(2020, 9, 1, 11, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}]","[{'commit_sha': '82403c6e8a1b87db0870e65fe9f6c1f6db2f66e4', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '067fac1905268946cebc7daf48fa71bc8583c925', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1364c0e9df40310a98b241198b1722422613104', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fcdb28e3299a0dd031cc0b06bc4572a4d45b3e9', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67fc6d3634ae4d468941cc8a9aa02d35808fdac8', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbce4752aec03ee1dc8df5fc1946b02a90c9a255', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74db4a9e1ce044f4a6395b18f5506a186db9b33a', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f13972bd42de133817aeac7c369c5d563008ff55', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23a5ec1afffd5ebea213f200338cdc9f2f7facb3', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c3b60e796169ad488de4316efeae803d3f1cc7', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8f72189910fd73c9701b0245a8d85cccf34743', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2a6f29019610d010cec06bc17e77e10e7292dd', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3058b0db4358b111cddbad609e7fc1c671619cb', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
473197972,Add Dashboard using Plotly Dash.,,False,4,https://api.github.com/repos/shogun-toolbox/applications/pulls/4,https://github.com/shogun-toolbox/applications/pull/4,open,2924,621,58,13,9,19,0,0,[],2020-08-25 13:17:27+00:00,,0.0,,"[{'comment_id': 477083723, 'comment_body': 'These comments should be deleted. You could also keep them by logging their output somewhere if you need them for debug purposes. ', 'comment_created': datetime.datetime(2020, 8, 26, 7, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477083910, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 26, 7, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477084477, 'comment_body': 'It would be nice to add a couple of lines that explain what do these methods do. ', 'comment_created': datetime.datetime(2020, 8, 26, 7, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477085592, 'comment_body': 'If you took this code from somewhere, you should cite the source. Not super important since there is no proper copyright on it (i think) but it is just to acknowledge the person which wrote it. ', 'comment_created': datetime.datetime(2020, 8, 26, 7, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477087471, 'comment_body': ""I reckon that you initially wrote a different piece of code to instantiate a model (`model/src/model.py`), why did you write another one here? Couldn't you use the previous one?"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477088753, 'comment_body': ""Again here, why did you copy code around and you didn't use the one you wrote during the previous iteration? Did you need to add new functionalities or was it not performing the way we wanted? "", 'comment_created': datetime.datetime(2020, 8, 26, 7, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 477358988, 'comment_body': ""Here, I've made the `web` and `dash` as standalone applications, when I make the docker container, I'll just be copying the dash folder to that and it'll work. That's why this file had to be transferred here. Also, the old and new web tools are basically two entirely different python flask web applications.\r\nAbout the `model` directly, it is simply the notebooks and scripts which were used to process the data and develop the models.\r\nBasically, the three directories are all independent."", 'comment_created': datetime.datetime(2020, 8, 26, 14, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 477360864, 'comment_body': ""> Here, I've made the `web` and `dash` as standalone applications, when I make the docker container, I'll just be copying the dash folder to that and it'll work. That's why this file had to be transferred here. Also, the old and new web tools are basically two entirely different python flask web applications.\r\n> About the `model` directly, it is simply the notebooks and scripts which were used to process the data and develop the models.\r\n> Basically, the three directories are all independent.\r\n\r\nIs this okay? Or should I make any changes?"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 478641916, 'comment_body': '```suggestion\r\n# Controls What is displayed on the main map\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 19, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 478663326, 'comment_body': 'mmmh I am not sure if I understand how the things are structured now. Why do we have two separate applications and not just the one made with dash? or is it just one? Is there any reason why you kept also the old version of the interface? I am asking because, generally, you should avoid code duplication. Here, it seems that you have basically copy-pasted files around instead of reusing the ones you already wrote.   ', 'comment_created': datetime.datetime(2020, 8, 27, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 479663317, 'comment_body': 'Done.\r\n', 'comment_created': datetime.datetime(2020, 8, 29, 16, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 479752621, 'comment_body': '```suggestion\r\n# Controls What is displayed on the main map\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 10, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 479752648, 'comment_body': 'remove\r\n', 'comment_created': datetime.datetime(2020, 8, 30, 10, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480118890, 'comment_body': 'What is the purpose of these flags (`-h` and `-p`)? I think they are not used by `app.py`. ', 'comment_created': datetime.datetime(2020, 8, 31, 13, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480119506, 'comment_body': ""Ahh I see, you hardcoded the various information here. Wouldn't it be possible to let the user specify the address/port so that he/she won't need to touch directly the source code?"", 'comment_created': datetime.datetime(2020, 8, 31, 13, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480120668, 'comment_body': 'You forgot this `print` statement :)', 'comment_created': datetime.datetime(2020, 8, 31, 13, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 480284834, 'comment_body': ""I can remove it from here, but it'll have to be specified in some particular config file. I don't believe it's possible to set these at runtime."", 'comment_created': datetime.datetime(2020, 8, 31, 17, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 481051115, 'comment_body': ""mmh I don't think it is mandatory. You can provide this information as command-line arguments. See https://docs.python.org/3/library/argparse.html#module-argparse"", 'comment_created': datetime.datetime(2020, 9, 1, 10, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 481077492, 'comment_body': ""Ohh right, this is so cool. I'll implement this. :D"", 'comment_created': datetime.datetime(2020, 9, 1, 11, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}]","[{'commit_sha': '82403c6e8a1b87db0870e65fe9f6c1f6db2f66e4', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '067fac1905268946cebc7daf48fa71bc8583c925', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1364c0e9df40310a98b241198b1722422613104', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fcdb28e3299a0dd031cc0b06bc4572a4d45b3e9', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67fc6d3634ae4d468941cc8a9aa02d35808fdac8', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbce4752aec03ee1dc8df5fc1946b02a90c9a255', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74db4a9e1ce044f4a6395b18f5506a186db9b33a', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f13972bd42de133817aeac7c369c5d563008ff55', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23a5ec1afffd5ebea213f200338cdc9f2f7facb3', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c3b60e796169ad488de4316efeae803d3f1cc7', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8f72189910fd73c9701b0245a8d85cccf34743', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2a6f29019610d010cec06bc17e77e10e7292dd', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3058b0db4358b111cddbad609e7fc1c671619cb', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
390800277,Replacing undocumented python example for Sparse Euclidian Distance with a meta-example,"Removed `.py` file.
Added `.sg.in` file.
Compiled successfully on local machine.
#3555 #3000 #4942 
Sorry for creating a new PR, had deleted the old branch by mistake.",True,4945,https://api.github.com/repos/shogun-toolbox/shogun/pulls/4945,https://github.com/shogun-toolbox/shogun/pull/4945,closed,65,44,3,5,14,12,0,0,[],2020-03-19 05:09:19+00:00,2020-04-03 15:06:03+00:00,1331804.0,"15 days, 9:56:44","[{'comment_id': 394802314, 'comment_body': 'as the documentation stats SparseEuclideanDistance is expecting SparseFeatures.... imo the features you are reading above are not SparseFeatures but DenseFeatures.\r\n\r\nplz make sure that you compile and test your changes before sending in a PR', 'comment_created': datetime.datetime(2020, 3, 19, 5, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 395197545, 'comment_body': 'In all the other examples(`.sg.in` files), `features_a` and `features_b` are defined as variables of the `Features` class, and they directly become DenseFeatures by calling the constructor of the `CDenseFeatures` class. \r\nHow should we ensure that the features are sparse and the constructor of the `CSparseFeatures` class is called?', 'comment_created': datetime.datetime(2020, 3, 19, 17, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 395200775, 'comment_body': ""none of the examples are actually using methods that requires SparseFeatures... for that actually you'll need to patch factory.h to be able to read sparse format (say libsvmfile) and create a SparseFeature from it."", 'comment_created': datetime.datetime(2020, 3, 19, 17, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 395255202, 'comment_body': 'That might be a bit beyond an entrance task so might be worth starting an issue and then rebase this when it’s done?', 'comment_created': datetime.datetime(2020, 3, 19, 19, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 395257739, 'comment_body': 'Ah nvm! Does it work? :)', 'comment_created': datetime.datetime(2020, 3, 19, 19, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 395291939, 'comment_body': 'Started new issue #4947', 'comment_created': datetime.datetime(2020, 3, 19, 20, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 395314579, 'comment_body': 'Why don’t you use this parser and files?', 'comment_created': datetime.datetime(2020, 3, 19, 20, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 395320061, 'comment_body': ""Won't I have to add functions to the `factory.h` file nevertheless? so that it can be translated?\r\n"", 'comment_created': datetime.datetime(2020, 3, 19, 21, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 395451535, 'comment_body': 'exposing the SparseMatrix<T> ctor would be good as well, but as for factory we would like to have this under one common function, namely `features`.', 'comment_created': datetime.datetime(2020, 3, 20, 6, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 395451945, 'comment_body': ""again as said above this should be within features factory function.\r\nfor that to be able to work you'll have to do a bit of dispatching, i.e. to detect the type of File object being passed (csv or libsvmfile) and based on that create the right feature type object (dense or sparse). i'd use type_index(typeid()) to detect the type of file that has been passed over, but you can even use get_name() and do a string comparison."", 'comment_created': datetime.datetime(2020, 3, 20, 6, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 396066293, 'comment_body': '@vigsterkr I guess this works, just not very maintainable... What are the other sparse data file format available?', 'comment_created': datetime.datetime(2020, 3, 22, 8, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 396583382, 'comment_body': 'could you do something like `std::type_index(typeid(*file)) == std::type_index(typeid(LibSVMFile))`?', 'comment_created': datetime.datetime(2020, 3, 23, 16, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': '6a6586096f1b11af25b5bbd8cd94f3f08f940d6c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730583a51e596771b7c0823eb964a32574dcee69', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8103a134baf10bf443ee6eb07e31f8a42573dde', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f4845ca8f9e26470ab8e6e10cc470af929b9ff', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e0f2d069a2d37078f6826f73fa49dc9072df06c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
393304387,remove add and operator+ from SGVector and replace with linalg::add calls,"remove `add` from SGVector
remove operator`+` from SGVector
remove operator`+=` from SGVector
refactor code to call `linalg::add` method
#2747
#1139
#2582

Code compiles successfully
While running `make test`, a few unit tests failed but they were failing on the original code(before making these changes) as well.",True,4958,https://api.github.com/repos/shogun-toolbox/shogun/pulls/4958,https://github.com/shogun-toolbox/shogun/pull/4958,closed,37,99,11,7,22,31,0,0,[],2020-03-24 23:23:57+00:00,2020-04-01 06:23:41+00:00,629984.0,"7 days, 6:59:44","[{'comment_id': 398156433, 'comment_body': 'btw is this defined in linalg?', 'comment_created': datetime.datetime(2020, 3, 25, 20, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 398454240, 'comment_body': 'good point. There is no specialisation for SGSparseVector in linalg..', 'comment_created': datetime.datetime(2020, 3, 26, 10, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 398464656, 'comment_body': 'Should I let this remain as it was then? And only replace the SGVector calls?', 'comment_created': datetime.datetime(2020, 3, 26, 10, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 398467522, 'comment_body': 'I think so', 'comment_created': datetime.datetime(2020, 3, 26, 10, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 398547951, 'comment_body': '@gf712 If no compiler errors happen, I would just remove as unused?', 'comment_created': datetime.datetime(2020, 3, 26, 12, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 398551072, 'comment_body': 'I guess so. Just thinking if there is something hiding behind a `#ifdef`.. ', 'comment_created': datetime.datetime(2020, 3, 26, 12, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 398923636, 'comment_body': 'I say remove and fix the errors when they appear :) We want to clean up these classes in any case ... ', 'comment_created': datetime.datetime(2020, 3, 26, 22, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 399065750, 'comment_body': 'OK, in that case can merge once the CI is fixed, just to be sure', 'comment_created': datetime.datetime(2020, 3, 27, 6, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 399200238, 'comment_body': 'one thing I am always concerned about is changing code that is not covered by any tests (at least integration) .... but in this case I think we can justify it?', 'comment_created': datetime.datetime(2020, 3, 27, 11, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 400047328, 'comment_body': 'The issue is that you only added this to the declaration. You have to add this to the implementation too, which is in `BasicOps.cpp`', 'comment_created': datetime.datetime(2020, 3, 30, 9, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400047821, 'comment_body': ""And then let's see if Eigen let's you add complex numbers..."", 'comment_created': datetime.datetime(2020, 3, 30, 9, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400146249, 'comment_body': ""you need to replace the call here right? `a=a+b` should be `a=linalg::add(a,b)`, otherwise you won't be getting the same results below..."", 'comment_created': datetime.datetime(2020, 3, 30, 12, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400214046, 'comment_body': ""Since this is a test for the + operator, isn't it better to just remove the code?"", 'comment_created': datetime.datetime(2020, 3, 30, 13, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 400216191, 'comment_body': 'I think this might be the only place left where we test complex numbers though... But yes ideally remove this and add complex128_t add test in linalg unittests', 'comment_created': datetime.datetime(2020, 3, 30, 14, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400376142, 'comment_body': 'i think we would just remove the addition tests of SGVector ... linalg::add is tested already', 'comment_created': datetime.datetime(2020, 3, 30, 17, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 400380146, 'comment_body': 'But not for complex numbers though?', 'comment_created': datetime.datetime(2020, 3, 30, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400386625, 'comment_body': 'sure, but then we would have a test for linalg, and not sgvector, this is not testing sgvector::operator+ anymore, or am I wrong?', 'comment_created': datetime.datetime(2020, 3, 30, 17, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 400403376, 'comment_body': 'Indeed, that’s the other option I suggested above', 'comment_created': datetime.datetime(2020, 3, 30, 18, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400771376, 'comment_body': 'So what do you suggest we do here?\r\nShould I simply remove the test and open another issue?', 'comment_created': datetime.datetime(2020, 3, 31, 9, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 400779766, 'comment_body': 'Can you go to `Eigen3_operations_unittest.cc`, create a new class inheriting from ::testing::Test, then pass it to `SG_TYPED_TEST_CASE(..., sg_all_primitive_types, bool);` and use that new class in `TYPED_TEST` where we test for `add`. Then you can delete this SGVector test :)  ', 'comment_created': datetime.datetime(2020, 3, 31, 9, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400780383, 'comment_body': 'And give that class a meaningful name like the other ones in `Eigen3_operations_unittest.cc` please!', 'comment_created': datetime.datetime(2020, 3, 31, 9, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400789803, 'comment_body': 'see my comment [here](https://github.com/shogun-toolbox/shogun/pull/4958/files/daf8ae841f6bda16a2dd0732fa05398f3cab59ba#diff-c6e86f9deed123416d12ab100ec0c9e6), it explains all you need to do', 'comment_created': datetime.datetime(2020, 3, 31, 10, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400831712, 'comment_body': ""Yes I will do that. However, I have a doubt, Doesn't the existing code to that currently as well? reference\r\nline 26 \r\n```\r\ntemplate <typename T>\r\nclass LinalgBackendEigenAllTypesTest : public ::testing::Test\r\n{\r\n};\r\n```\r\n\r\nline 43\r\n```\r\nSG_TYPED_TEST_CASE(\r\n    LinalgBackendEigenAllTypesTest, sg_all_primitive_types, bool, complex128_t);\r\n```\r\nline 50\r\n```\r\nTYPED_TEST(LinalgBackendEigenAllTypesTest, SGVector_add)\r\n{\r\n```"", 'comment_created': datetime.datetime(2020, 3, 31, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 400832802, 'comment_body': ""Unfortunately it doesn't do all the types like it says... You can see on line 43 that bool and complex128_t are excluded from the types being test"", 'comment_created': datetime.datetime(2020, 3, 31, 11, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400911217, 'comment_body': '@karlnapf is this OK with you?', 'comment_created': datetime.datetime(2020, 3, 31, 13, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400955327, 'comment_body': 'You have to remove the code below as it depends on the add you remove here. Either that or adapt the results.', 'comment_created': datetime.datetime(2020, 3, 31, 14, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 400967819, 'comment_body': ""I'll replace the 10.0 and 12.0 with 5.0 and 6.0 respectively."", 'comment_created': datetime.datetime(2020, 3, 31, 14, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 400968658, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2020, 3, 31, 14, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 401106255, 'comment_body': 'yes lgtm', 'comment_created': datetime.datetime(2020, 3, 31, 17, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 401106675, 'comment_body': 'future note: the norm should also be removed :)', 'comment_created': datetime.datetime(2020, 3, 31, 17, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 401109984, 'comment_body': 'Yes, @karlnapf  I shall get to that asap once this PR gets merged :)', 'comment_created': datetime.datetime(2020, 3, 31, 18, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}]","[{'commit_sha': 'cb9f12aa6c4cd379dc3123d71a28ef50eaeca599', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab255f4db59916d2114e15cc15d900e7fdb2d37', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e92eb9e8fec61b9d872862d150e0de92bf47d2f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45918f10cd2e022d85af0226f8816624a428c872', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4c88ffefd84b94d44f2286606c3fb78bcaa7750', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e91ebf3a37812424c637263d6b868d3e74900fd', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e3ee8d54173a31e54eeb0cf30aa4f7bd27989f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
397845286,Remove addition related code from SGVector,"The first commit passes all tests.
However for the second commit, some unit tests are failing and I am unable to find out why.",False,4991,https://api.github.com/repos/shogun-toolbox/shogun/pulls/4991,https://github.com/shogun-toolbox/shogun/pull/4991,closed,26,74,9,2,9,7,1,0,[{'name': 'stale'}],2020-04-02 22:45:58+00:00,2021-06-12 14:47:02+00:00,37641664.0,"435 days, 16:01:04","[{'comment_id': 402680822, 'comment_body': '@gf712 @karlnapf Since there is no specialization for SGSparseVector in linalg, What should I replace these calls with? \r\nOr can you guide me as to how I can write the add function for Sparse Vectors and add it to linalg?', 'comment_created': datetime.datetime(2020, 4, 3, 1, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 407044994, 'comment_body': 'I think for now you can leave this', 'comment_created': datetime.datetime(2020, 4, 11, 10, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 407045045, 'comment_body': 'is it used anywhere?', 'comment_created': datetime.datetime(2020, 4, 11, 10, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 433378094, 'comment_body': 'did you check what the copy ctor does?', 'comment_created': datetime.datetime(2020, 6, 1, 17, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 433378189, 'comment_body': 'It might not allocate new memory as the line that you are replacing?', 'comment_created': datetime.datetime(2020, 6, 1, 17, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 433378658, 'comment_body': 'great line! :)', 'comment_created': datetime.datetime(2020, 6, 1, 17, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 433486860, 'comment_body': 'Why do you need the cast here?', 'comment_created': datetime.datetime(2020, 6, 1, 20, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'ce17fba7709a7d1b2ff1441b9860c01eb6a135c0', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b24b8fb01bc4a411d483a1d93f2e7a21719bcb2', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
433850239,add metaexample for CHAIDTree Regression,Also removed Random forest regression undocumented example as it is already ported.,True,5065,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5065,https://github.com/shogun-toolbox/shogun/pull/5065,closed,51,120,8,11,29,20,0,0,[],2020-06-12 19:30:08+00:00,2020-06-25 17:34:17+00:00,1116249.0,"12 days, 22:04:09","[{'comment_id': 439635262, 'comment_body': 'Could you pass labels either to the constructor or use put instead please?', 'comment_created': datetime.datetime(2020, 6, 12, 20, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439641622, 'comment_body': ""Okay, I'll do that.\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 21, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 439720589, 'comment_body': 'actually the error is here: if you have a look at the parameter registration they all have a `m_` prefix. You should remove that `m_` for the parameter name\r\nhttps://github.com/shogun-toolbox/shogun/blob/7483101c9ec1f18b6dcee5af5fad099349f4a78a/src/shogun/multiclass/tree/CHAIDTree.cpp#L1395-L1404', 'comment_created': datetime.datetime(2020, 6, 13, 8, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439733553, 'comment_body': ""Oh okay, I'll do that.\r\n"", 'comment_created': datetime.datetime(2020, 6, 13, 11, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 443260389, 'comment_body': ""these are set by the user so I think this doesn't need to be extracted as discussed in the data PR.\r\nOnce you have removed this, you have to regenerate the data, and update the data PR, then update this PR (including the submodule)"", 'comment_created': datetime.datetime(2020, 6, 21, 21, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444145869, 'comment_body': 'the weights are still extracted here, you will need to remove that', 'comment_created': datetime.datetime(2020, 6, 23, 11, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444146366, 'comment_body': 'This causes the notebooks to fail:\r\nhttps://dev.azure.com/shogunml/shogun/_build/results?buildId=3629&view=logs&j=089c709a-44eb-5f6e-96e7-15e9ee1ff5bf&t=2da3e16b-a2b2-5f01-2cbe-a20d9528195b&l=1849\r\n\r\nShould be simple to fix: open the notebook and edit the name in there as well :)', 'comment_created': datetime.datetime(2020, 6, 23, 11, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444164718, 'comment_body': 'How do I run test the notebooks on my local machine? Does `make test` do that?', 'comment_created': datetime.datetime(2020, 6, 23, 11, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 444203559, 'comment_body': 'There is a script for doing that https://github.com/shogun-toolbox/shogun/blob/develop/scripts/test_notebooks.sh.\r\n\r\nThe link Heiko pasted here above will show also how to use it. ', 'comment_created': datetime.datetime(2020, 6, 23, 12, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 444205222, 'comment_body': 'It doesnt. You would have to compile shogun with the python interface, make sure you can load it from python, and then open the notebook in jupyter notebook.\r\n\r\nHowever, you might be able to do a simple hack here:\r\n1. Open the notebook in a texteditor\r\n2. Search for `m_`\r\n3. If it is one of the varnames, change it to the values you updated them to\r\n4. Save the file in the texteditor and submit\r\n\r\nAs this is such a simple change, that should do it without the need for you running it locally', 'comment_created': datetime.datetime(2020, 6, 23, 13, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444210819, 'comment_body': 'Yes, I have already pushed the code after making those changes. :) ', 'comment_created': datetime.datetime(2020, 6, 23, 13, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 444217049, 'comment_body': 'perfect!', 'comment_created': datetime.datetime(2020, 6, 23, 13, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444217444, 'comment_body': 'I think you forgot some, I remember seeing one name in a ""get"" call...double check', 'comment_created': datetime.datetime(2020, 6, 23, 13, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444304499, 'comment_body': ""Are you referring to this:\r\nhttps://github.com/shogun-toolbox/shogun/blob/123f5124b731751e079ab8f138c0808361a3bea6/doc/ipython-notebooks/multiclass/Tree/DecisionTrees.ipynb#L613\r\n\r\nI don't think we should change this right? As it isn't related to CHAID tree? As then we will have to make some other change in the source code related to `C45ClassifierTree`\r\n\r\nAlso, the other one is :\r\nhttps://github.com/shogun-toolbox/shogun/blob/123f5124b731751e079ab8f138c0808361a3bea6/doc/ipython-notebooks/multiclass/Tree/DecisionTrees.ipynb#L643\r\n\r\nThis one too, is an instance of `C45ClassifierTree`. Should I change these two instances too?"", 'comment_created': datetime.datetime(2020, 6, 23, 15, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 444318441, 'comment_body': 'ah sorry. of course you are right!\r\nWe will see it in the CI for the notebooks', 'comment_created': datetime.datetime(2020, 6, 23, 15, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 445527415, 'comment_body': ""@karlnapf this is causing issues. In octave this becomes a scalar value :( I wrote a fix for this but it's in another branch, not yet merged.. Also this throws an error in the meta example, but ctest doesn't pick this up (I had this issue before) and I am not sure why. The test only fails when comparing the serialised outputs in the integration test, because this will not have serialised anything because of the exception thrown when you put `ft`"", 'comment_created': datetime.datetime(2020, 6, 25, 12, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 445580601, 'comment_body': 'So, unless we merge your fix this meta example will fail only in Octave, right? Could it be possible to merge this PR anyway, but somehow excluding it from testing with Octave (since it is broken atm)? Just to not have to put this on hold indefinitely...', 'comment_created': datetime.datetime(2020, 6, 25, 13, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'geektoni', 'type': 'User'}, {'comment_id': 445589383, 'comment_body': 'Maybe @Hephaestus12 can just fix it here? All you need to do is replace \r\nhttps://github.com/shogun-toolbox/shogun/blob/3041ea049e9a9a2e67e32ccfa648ceab5dbad5e5/src/interfaces/swig/shogun.i#L199\r\n\r\nwith `#if defined(SWIGR) || defined(SWIGOCTAVE)`', 'comment_created': datetime.datetime(2020, 6, 25, 14, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 445602319, 'comment_body': ""Yes, I'll do this.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 25, 14, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 445608990, 'comment_body': 'I hope this works :D', 'comment_created': datetime.datetime(2020, 6, 25, 14, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'a3dcdfda260bc2be9ec90439f97ddedf6287f0a8', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b89ba4c3a71cc4e35331963050b9b657c2732a8d', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f9edbc19cf218c5e7d8f41d589fa267cf89f9ef', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95a2af788f0a92ae6d520123988cff01c6046606', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40613e8df2df5538e2d9a267db9d6f25015db9ee', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c843e2e303a3ab8ba0248f623cc9e3153122163', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d666acfbe964b35c6727d58e9a15f0914fec622', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f735ae1fa982fa242eb063dc1a0169d531daaaeb', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5a1441a6105dcb1bdfa177def5732fe1e2c65a', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66ca9a3d129fc4f444ded06cb03dcee56307259', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad7341f66ccafa3bec0c74cd558aa0cd8c29f402', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
440312110,Example/kernel oligo string,,True,5081,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5081,https://github.com/shogun-toolbox/shogun/pull/5081,closed,19,27,3,2,5,0,0,0,[],2020-06-25 23:51:58+00:00,2020-06-26 09:06:30+00:00,33272.0,9:14:32,[],"[{'commit_sha': '975acb15ac3d211a0e70d90ce78b15e86296c8b3', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66417d0dee2d0da7a3fc8c41f98d5dc3da7d483', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
441047016,Example/multiclass ecoc,,True,5084,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5084,https://github.com/shogun-toolbox/shogun/pull/5084,closed,1134,133,33,6,17,6,0,0,[],2020-06-28 12:05:16+00:00,2020-07-07 09:42:27+00:00,769031.0,"8 days, 21:37:11","[{'comment_id': 446654338, 'comment_body': 'you added a new file for chaid tree. need to sort that out', 'comment_created': datetime.datetime(2020, 6, 28, 13, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 450256503, 'comment_body': 'could you use `apply`', 'comment_created': datetime.datetime(2020, 7, 6, 14, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 450256677, 'comment_body': 'could you use `get` ? (also in all other cases)', 'comment_created': datetime.datetime(2020, 7, 6, 14, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 450640862, 'comment_body': '`CSVFile` has now been removed from the interfaces, you now need to use `File` and `read_csv` instead. Have a look at the other examples', 'comment_created': datetime.datetime(2020, 7, 7, 6, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 450642298, 'comment_body': ""Yes okay, I'll do that. Are there any other changes to be made as well?"", 'comment_created': datetime.datetime(2020, 7, 7, 6, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 450649159, 'comment_body': ""You'll have to see!"", 'comment_created': datetime.datetime(2020, 7, 7, 6, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': '4c638293ac7c21d3cafb3426ff8bf851314e0e2f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac90b9ac8082e3cd14d31a6658ab69ed71e4897b', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63628e7c9f15a795f4f5204989bd7bba58bc51cb', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f0dfb23b4bd607bc43bc1546958b1c2406e400b', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb7e18edce7770eaf33f43ead827ffe2b416624', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc32c6843fd941c418cced5b54a16ba15b34dae', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
455273240,Add Factor Analysis meta example.,For Factor Analysis converter,False,5100,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5100,https://github.com/shogun-toolbox/shogun/pull/5100,closed,18,26,3,3,15,4,1,0,[{'name': 'stale'}],2020-07-22 18:06:11+00:00,2021-02-16 01:23:17+00:00,17997426.0,"208 days, 7:17:06","[{'comment_id': 461044888, 'comment_body': 'looks good to me, not sure why there would be an error?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 463566321, 'comment_body': 'can print `fa` in octave and share the output. I suspect that epsilon value might not be passed properly.', 'comment_created': datetime.datetime(2020, 7, 31, 11, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 463587678, 'comment_body': 'How should I do this? As in should I make the change in the generated octave file?', 'comment_created': datetime.datetime(2020, 7, 31, 12, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}, {'comment_id': 463588647, 'comment_body': 'Simplest would be to run the octave code in the octave shell, or yes, modify the octave script', 'comment_created': datetime.datetime(2020, 7, 31, 12, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'dca1b05614fadd2ead8e6f65a424655226416dae', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea0a2e6d8186e8f27d75a2afaed6ae3521c2fe5', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff48ac5b8490dbba3f3c85df5bedf3c46bcabd5', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
462435331,Add meta example for hessian locally linear embedding converter.,,False,5105,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5105,https://github.com/shogun-toolbox/shogun/pull/5105,closed,18,1,2,2,6,0,1,0,[{'name': 'stale'}],2020-08-03 22:54:42+00:00,2021-02-23 11:04:47+00:00,17583005.0,"203 days, 12:10:05",[],"[{'commit_sha': '75eb19c222ec0648f374736879f7ecf00c184d7e', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96094a220965e39436bb87444c74e87324190b2f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
462437347,Add meta example for isomap converter.,,False,5106,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5106,https://github.com/shogun-toolbox/shogun/pull/5106,closed,18,22,3,1,7,0,1,0,[{'name': 'stale'}],2020-08-03 23:02:11+00:00,2021-02-25 20:07:05+00:00,17787894.0,"205 days, 21:04:54",[],"[{'commit_sha': 'e87784bfc393817b521cfd3744774269b8e37ab4', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
437361416,add data for CHAID tree regression,,True,198,https://api.github.com/repos/shogun-toolbox/shogun-data/pulls/198,https://github.com/shogun-toolbox/shogun-data/pull/198,closed,1,0,1,1,24,0,0,0,[],2020-06-20 04:06:09+00:00,2020-06-25 17:34:24+00:00,480495.0,"5 days, 13:28:15",[],"[{'commit_sha': '288f4e48250b9ab080180fbc1f83e5819e17498c', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
440312068,Add data for oligo string kernel meta example.,,True,203,https://api.github.com/repos/shogun-toolbox/shogun-data/pulls/203,https://github.com/shogun-toolbox/shogun-data/pull/203,closed,1,0,1,1,0,0,0,0,[],2020-06-25 23:51:46+00:00,2020-06-26 09:07:30+00:00,33344.0,9:15:44,[],"[{'commit_sha': '102ed1def7d43f7397148689f0c8f713a2510913', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
441045609,Example/multiclass ecoc,,True,205,https://api.github.com/repos/shogun-toolbox/shogun-data/pulls/205,https://github.com/shogun-toolbox/shogun-data/pull/205,closed,29,0,30,5,2,1,0,0,[],2020-06-28 11:53:24+00:00,2020-07-07 09:43:02+00:00,769778.0,"8 days, 21:49:38","[{'comment_id': 446663445, 'comment_body': 'Why is it showing this diff? Can we still merge it with it this way?', 'comment_created': datetime.datetime(2020, 6, 28, 15, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hephaestus12', 'type': 'User'}]","[{'commit_sha': '846e8c8c82a2b34fa8a25dec9f40489138e83b53', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '310aa06b852a7151b8fe19d60ea4777a2fa62481', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2d5b6f0e848cf9f743c7a2690ac7c6a891f6c5f', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58cc179da252584657d159769055e72aabac73be', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d337bea877226b77bf3abd1c6622415915d9ab0', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
455341245,Add data file for factor analysis meta example.,,False,208,https://api.github.com/repos/shogun-toolbox/shogun-data/pulls/208,https://github.com/shogun-toolbox/shogun-data/pull/208,open,1,0,1,1,0,0,0,0,[],2020-07-22 20:34:57+00:00,,0.0,,[],"[{'commit_sha': '29dcdcc78731f21193d5ab69bba6c38d3edf7c06', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
470138595,Add datafile for hessian locally linear embedding converter.,,False,210,https://api.github.com/repos/shogun-toolbox/shogun-data/pulls/210,https://github.com/shogun-toolbox/shogun-data/pull/210,open,1,0,1,1,0,0,0,0,[],2020-08-19 12:41:49+00:00,,0.0,,[],"[{'commit_sha': '2a22fa5e60a410714e734c45a431e20fd2a13b17', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1
470484197,Add datafile for isomap converter.,,False,211,https://api.github.com/repos/shogun-toolbox/shogun-data/pulls/211,https://github.com/shogun-toolbox/shogun-data/pull/211,open,1,0,1,1,0,0,0,0,[],2020-08-19 22:08:01+00:00,,0.0,,[],"[{'commit_sha': '02f762ade14bb8806a9b35db3110106581a06c05', 'committer_username': 'Hephaestus12', 'committer_name': 'Tej Sukhatme', 'committer_email': 'f20180020@hyderabad.bits-pilani.ac.in', 'commit_date': datetime.datetime(2018, 12, 20, 18, 34, 50, tzinfo=datetime.timezone.utc)}]",Tej Sukhatme,46032108,f20180020@hyderabad.bits-pilani.ac.in,User,,19,,4,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
263709359,applications,shogun-toolbox/applications,Jupyter Notebook,2,2,11,2,2,12,11,11,"[{'id': 473197972, 'number': 4, 'closed': None, 'created': datetime.datetime(2020, 8, 25, 13, 17, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2924, 'deletions': 621, 'state': 'open'}, {'id': 472178045, 'number': 3, 'closed': datetime.datetime(2020, 8, 25, 13, 18, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 21, 8, 49, tzinfo=datetime.timezone.utc), 'time_taken': 144563.0, 'time_delta': '1 day, 16:09:23', 'additions': 9354, 'deletions': 38, 'state': 'closed'}, {'id': 418659691, 'number': 1, 'closed': datetime.datetime(2020, 8, 13, 10, 46, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 15, 33, 45, tzinfo=datetime.timezone.utc), 'time_taken': 7758737.0, 'time_delta': '89 days, 19:12:17', 'additions': 158776, 'deletions': 0, 'state': 'closed'}]"
1555094,shogun,shogun-toolbox/shogun,C++,1038,3024,216,248,17589,427,60,10,"[{'id': 462443341, 'number': 5109, 'closed': datetime.datetime(2020, 8, 20, 7, 45, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 23, 22, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1412573.0, 'time_delta': '16 days, 8:22:53', 'additions': 18, 'deletions': 29, 'state': 'closed'}, {'id': 462441114, 'number': 5108, 'closed': datetime.datetime(2021, 2, 23, 0, 4, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 23, 15, 31, tzinfo=datetime.timezone.utc), 'time_taken': 17542156.0, 'time_delta': '203 days, 0:49:16', 'additions': 18, 'deletions': 30, 'state': 'closed'}, {'id': 462438943, 'number': 5107, 'closed': datetime.datetime(2020, 8, 27, 19, 18, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 23, 7, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2059821.0, 'time_delta': '23 days, 20:10:21', 'additions': 19, 'deletions': 32, 'state': 'closed'}, {'id': 462437347, 'number': 5106, 'closed': datetime.datetime(2021, 2, 25, 20, 7, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 23, 2, 11, tzinfo=datetime.timezone.utc), 'time_taken': 17787894.0, 'time_delta': '205 days, 21:04:54', 'additions': 18, 'deletions': 22, 'state': 'closed'}, {'id': 462435331, 'number': 5105, 'closed': datetime.datetime(2021, 2, 23, 11, 4, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 22, 54, 42, tzinfo=datetime.timezone.utc), 'time_taken': 17583005.0, 'time_delta': '203 days, 12:10:05', 'additions': 18, 'deletions': 1, 'state': 'closed'}, {'id': 455273240, 'number': 5100, 'closed': datetime.datetime(2021, 2, 16, 1, 23, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 18, 6, 11, tzinfo=datetime.timezone.utc), 'time_taken': 17997426.0, 'time_delta': '208 days, 7:17:06', 'additions': 18, 'deletions': 26, 'state': 'closed'}, {'id': 441047016, 'number': 5084, 'closed': datetime.datetime(2020, 7, 7, 9, 42, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 12, 5, 16, tzinfo=datetime.timezone.utc), 'time_taken': 769031.0, 'time_delta': '8 days, 21:37:11', 'additions': 1134, 'deletions': 133, 'state': 'closed'}, {'id': 440312110, 'number': 5081, 'closed': datetime.datetime(2020, 6, 26, 9, 6, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 23, 51, 58, tzinfo=datetime.timezone.utc), 'time_taken': 33272.0, 'time_delta': '9:14:32', 'additions': 19, 'deletions': 27, 'state': 'closed'}, {'id': 433850239, 'number': 5065, 'closed': datetime.datetime(2020, 6, 25, 17, 34, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 19, 30, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1116249.0, 'time_delta': '12 days, 22:04:09', 'additions': 51, 'deletions': 120, 'state': 'closed'}, {'id': 403100319, 'number': 5006, 'closed': datetime.datetime(2020, 8, 4, 10, 20, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 10, 28, 29, tzinfo=datetime.timezone.utc), 'time_taken': 9676344.0, 'time_delta': '111 days, 23:52:24', 'additions': 581, 'deletions': 10, 'state': 'closed'}, {'id': 398427159, 'number': 4994, 'closed': datetime.datetime(2020, 10, 22, 1, 39, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 23, 28, 27, tzinfo=datetime.timezone.utc), 'time_taken': 17374257.0, 'time_delta': '201 days, 2:10:57', 'additions': 298, 'deletions': 86, 'state': 'closed'}, {'id': 397845286, 'number': 4991, 'closed': datetime.datetime(2021, 6, 12, 14, 47, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 2, 22, 45, 58, tzinfo=datetime.timezone.utc), 'time_taken': 37641664.0, 'time_delta': '435 days, 16:01:04', 'additions': 26, 'deletions': 74, 'state': 'closed'}, {'id': 393304387, 'number': 4958, 'closed': datetime.datetime(2020, 4, 1, 6, 23, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 23, 23, 57, tzinfo=datetime.timezone.utc), 'time_taken': 629984.0, 'time_delta': '7 days, 6:59:44', 'additions': 37, 'deletions': 99, 'state': 'closed'}, {'id': 390800277, 'number': 4945, 'closed': datetime.datetime(2020, 4, 3, 15, 6, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 5, 9, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1331804.0, 'time_delta': '15 days, 9:56:44', 'additions': 65, 'deletions': 44, 'state': 'closed'}, {'id': 390665562, 'number': 4944, 'closed': datetime.datetime(2020, 3, 18, 21, 9, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 21, 9, 14, tzinfo=datetime.timezone.utc), 'time_taken': 11.0, 'time_delta': '0:00:11', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 390293584, 'number': 4942, 'closed': datetime.datetime(2020, 3, 18, 21, 16, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 8, 34, 12, tzinfo=datetime.timezone.utc), 'time_taken': 45767.0, 'time_delta': '12:42:47', 'additions': 20, 'deletions': 26, 'state': 'closed'}]"
1526544,shogun-data,shogun-toolbox/shogun-data,Objective-C,80,47,16,56,561,9,4,7,"[{'id': 470506109, 'number': 214, 'closed': datetime.datetime(2020, 8, 20, 7, 41, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 23, 5, 58, tzinfo=datetime.timezone.utc), 'time_taken': 30946.0, 'time_delta': '8:35:46', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 470503063, 'number': 213, 'closed': None, 'created': datetime.datetime(2020, 8, 19, 22, 56, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 0, 'state': 'open'}, {'id': 470496909, 'number': 212, 'closed': datetime.datetime(2020, 8, 27, 19, 14, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 22, 39, 20, tzinfo=datetime.timezone.utc), 'time_taken': 678900.0, 'time_delta': '7 days, 20:35:00', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 470484197, 'number': 211, 'closed': None, 'created': datetime.datetime(2020, 8, 19, 22, 8, 1, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 0, 'state': 'open'}, {'id': 470138595, 'number': 210, 'closed': None, 'created': datetime.datetime(2020, 8, 19, 12, 41, 49, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 0, 'state': 'open'}, {'id': 458768213, 'number': 209, 'closed': None, 'created': datetime.datetime(2020, 7, 29, 23, 36, 29, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 20, 'deletions': 0, 'state': 'open'}, {'id': 455341245, 'number': 208, 'closed': None, 'created': datetime.datetime(2020, 7, 22, 20, 34, 57, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 0, 'state': 'open'}, {'id': 441045609, 'number': 205, 'closed': datetime.datetime(2020, 7, 7, 9, 43, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 11, 53, 24, tzinfo=datetime.timezone.utc), 'time_taken': 769778.0, 'time_delta': '8 days, 21:49:38', 'additions': 29, 'deletions': 0, 'state': 'closed'}, {'id': 440312068, 'number': 203, 'closed': datetime.datetime(2020, 6, 26, 9, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 23, 51, 46, tzinfo=datetime.timezone.utc), 'time_taken': 33344.0, 'time_delta': '9:15:44', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 437361416, 'number': 198, 'closed': datetime.datetime(2020, 6, 25, 17, 34, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 4, 6, 9, tzinfo=datetime.timezone.utc), 'time_taken': 480495.0, 'time_delta': '5 days, 13:28:15', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
