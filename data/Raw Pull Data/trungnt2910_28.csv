pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1354422491,Haiku: Configuration support,"Added more support for configuration for Haiku cross-compile builds.

This commit adds recognition for Haiku as a supported platform in various build and configuration files.

For CMake files, this change adds additional guards for non-POSIX headers, functions, and struct members, most notably the `<ucontext.h>` header. (According to the latest POSIX standard, `ucontext_t` should be defined in `<signal.h>`, while `<ucontext.h>` is no longer mandated). `-ldl` is also replaced with `${CMAKE_DL_LIBS}` since Haiku does not have `libdl`.

Part of #55803.",True,86391,https://api.github.com/repos/dotnet/runtime/pulls/86391,https://github.com/dotnet/runtime/pull/86391,closed,205,63,43,1,5,37,3,0,"[{'name': 'area-Infrastructure-coreclr'}, {'name': 'community-contribution'}, {'name': 'os-haiku'}]",2023-05-17 15:38:08+00:00,2023-10-24 04:10:54+00:00,13782766.0,"159 days, 12:32:46","[{'comment_id': 1247869065, 'comment_body': '@agocke and @elinor-fung Are we creating new RIDs?', 'comment_created': datetime.datetime(2023, 6, 30, 13, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AaronRobinsonMSFT', 'type': 'User'}, {'comment_id': 1299217145, 'comment_body': ""Without creating a separate RID for Haiku, builds would fail.\r\n\r\n[This](https://github.com/trungnt2910/dotnet-builds/actions/runs/5901050884/job/16010024691) is a result of #90695, which makes certain build components unable to recognize the Haiku RID and therefore cannot resolve some references properly when cross-compiled from an official SDK:\r\n\r\n```\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(6,88): error CS0234: The type or namespace name 'ZLibException' does not exist in the namespace 'System.IO.Compression' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n##vso[task.logissue type=error;sourcepath=/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs;linenumber=6;columnnumber=88;code=CS0234;](NETCORE_ENGINEERING_TELEMETRY=Build) The type or namespace name 'ZLibException' does not exist in the namespace 'System.IO.Compression' (are you missing an assembly reference?)\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(7,77): error CS0234: The type or namespace name 'CookieVariant' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n##vso[task.logissue type=error;sourcepath=/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs;linenumber=7;columnnumber=77;code=CS0234;](NETCORE_ENGINEERING_TELEMETRY=Build) The type or namespace name 'CookieVariant' does not exist in the namespace 'System.Net' (are you missing an assembly reference?)\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(8,77): error CS0234: The type or namespace name 'PathList' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n##vso[task.logissue type=error;sourcepath=/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs;linenumber=8;columnnumber=77;code=CS0234;](NETCORE_ENGINEERING_TELEMETRY=Build) The type or namespace name 'PathList' does not exist in the namespace 'System.Net' (are you missing an assembly reference?)\r\n  System.Net.Http -> /home/runner/work/dotnet-builds/dotnet-builds/runtime/artifacts/bin/System.Net.Http/Debug/net8.0-haiku/System.Net.Http.dll\r\n  netstandard -> /home/runner/work/dotnet-builds/dotnet-builds/runtime/artifacts/bin/netstandard/Debug/net8.0-haiku/netstandard.dll\r\n\r\nBuild FAILED.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 19, 16, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1299399123, 'comment_body': '> Are we creating new RIDs?\r\n\r\nYes - for the new base OSes: https://github.com/dotnet/designs/pull/260#issuecomment-1685202292', 'comment_created': datetime.datetime(2023, 8, 20, 15, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1300516536, 'comment_body': ""The new base OSes would be added to the trimmed down 'portable' RID graph (https://github.com/dotnet/sdk/pull/34279) that is in sdk now: https://github.com/dotnet/sdk/blob/main/src/Layout/redist/PortableRuntimeIdentifierGraph.json\r\n\r\nThe idea is that the sdk is the source of truth for the RID graph that gets used for build / nuget restore and the large runtime.json file in runtime is frozen / no longer updated."", 'comment_created': datetime.datetime(2023, 8, 21, 18, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'elinor-fung', 'type': 'User'}, {'comment_id': 1317510978, 'comment_body': 'so the process for adding a new OS now is updating the RID graph in dotnet/sdk and then waiting until we pick it up in dotnet/runtime?', 'comment_created': datetime.datetime(2023, 9, 6, 15, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'akoeplinger', 'type': 'User'}, {'comment_id': 1317548068, 'comment_body': 'Yes, the changes in `src/libraries/Microsoft.NETCore.Platforms` are no longer needed for new platforms.\r\n\r\nIMO, if we move `PortableRuntimeIdentifierGraph.json` from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in `eng/common` near `eng/common/native/init-distro-rid.sh`), that would provide a better, more reasonable, codeflow.', 'comment_created': datetime.datetime(2023, 9, 6, 16, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1317554712, 'comment_body': '> IMO, if we move `PortableRuntimeIdentifierGraph.json` from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in `eng/common` near `eng/common/native/init-distro-rid.sh`), that would provide a better, more reasonable, codeflow.\r\n\r\nThat would certainly fix a lot of issues with Haiku builds and remove the current requirement of a Haiku-aware SDK to even build the `dotnet/runtime` repo on Linux.\r\n\r\nAfter #90695 for all Haiku builds I had to manually pass the path to a modified RID graph (See this [commit](https://github.com/trungnt2910/dotnet-builds/commit/363e1db61a80b8ad576cd3ddf0c8d34d3857b634)).', 'comment_created': datetime.datetime(2023, 9, 6, 16, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1317876361, 'comment_body': '> IMO, if we move `PortableRuntimeIdentifierGraph.json` from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in eng/common near eng/common/native/init-distro-rid.sh), that would provide a better, more reasonable, codeflow.\r\n\r\n@dsplaisted @ViktorHofer thoughts?', 'comment_created': datetime.datetime(2023, 9, 6, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'elinor-fung', 'type': 'User'}, {'comment_id': 1318138628, 'comment_body': 'Usually, we don\'t put shipping assets into dotnet/arcade... But I agree that the described code flow doesn\'t make sense. I was under the impression that we don\'t need to touch the portable RID graph often but it looks like when we do, we would need to consume a newer SDK which doesn\'t make sense from a build perspective.\r\n\r\nWhat about moving the Portable RID graph ""back"" into runtime instead? Do other repositories need it as well? Alternatively, what if the SDK would expose a task and target that we could invoke to mutate the portable RID graph so that we can just in time add the haiku RID, similar how source build distros add their entry to the build?', 'comment_created': datetime.datetime(2023, 9, 7, 6, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318139848, 'comment_body': 'Wow this is really getting out of hand. We should standardize on a common Unix build or even on a common single build and then use platform conditions.', 'comment_created': datetime.datetime(2023, 9, 7, 6, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318142378, 'comment_body': 'cc @tmds ', 'comment_created': datetime.datetime(2023, 9, 7, 6, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318202855, 'comment_body': ""The difference between Haiku and Linux is that the Linux has a base rid that is understood by the host and is present in `PortableRuntimeIdentifierGraph.json`.\r\n\r\n> if we move PortableRuntimeIdentifierGraph.json from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in eng/common near eng/common/native/init-distro-rid.sh), that would provide a better, more reasonable, codeflow.\r\n\r\nI think we may run into issues in the future which will require an updated `PortableRuntimeIdentifierGraph.json` while building runtime (also on Linux). We can solve those when they arise.\r\n\r\nIn this case (bootstraping a new Unix flavor), imo, we can 'manually' update `PortableRuntimeIdentifierGraph.json` in the sdk repo as part of the onboarding.\r\n\r\nThen a bootstrap SDK for Haiku can be built."", 'comment_created': datetime.datetime(2023, 9, 7, 7, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318245412, 'comment_body': 'Either arcade or runtime makes sense for root definitions require to build runtime and its libraries, on which rest of the stack sits. Assuming `PortableRuntimeIdentifierGraph.json` is (an absolutely) necessary artifact, we can derive it from a script or a list out of one of two upstream repos, which anyway require other similar definitions in the porting process.', 'comment_created': datetime.datetime(2023, 9, 7, 8, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1318359155, 'comment_body': '> Assuming PortableRuntimeIdentifierGraph.json is (an absolutely) necessary artifact\r\n\r\nAs it is now, it is not necessary.\r\n\r\n(Honestly, to my surprise) source-build Linux works fine without the (non-portable) rid being built, to be in `PortableRuntimeIdentifierGraph.json`.\r\n\r\nIf the `runtime` host, and the `sdk` `PortableRuntimeIdentifierGraph.json` know `haiku` (the same way they know `linux`), that should be enough.', 'comment_created': datetime.datetime(2023, 9, 7, 9, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318366686, 'comment_body': ""I don't know the exact differences between the various different portable or non-portable runtime graphs, but building .NET for Haiku requires a Haiku-aware RID graph.\r\n\r\nOtherwise, the build would fail (See [this CI run](https://github.com/trungnt2910/dotnet-builds/actions/runs/5914555471/job/16039990875) for the full logs):\r\n```\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(6,88): error CS0234: The type or namespace name 'ZLibException' does not exist in the namespace 'System.IO.Compression' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(7,77): error CS0234: The type or namespace name 'CookieVariant' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n```\r\n\r\nThe problem here is that the build fails to recognize `haiku-x64` as an instance of `unix-x64`, and therefore references generic libraries (`net8.0`) instead of UNIX-specific ones (`net8.0-unix`), therefore missing some UNIX-specific classes."", 'comment_created': datetime.datetime(2023, 9, 7, 9, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1318431496, 'comment_body': ""We have a few libraries that don't offer a Unix compatible implementation and you had to add a `net8.0-haiku` TFM for them. Ideally, that wouldn't be necessary and those libs would just offer a Unix compatible implementation with runtime checks. From the changes in this PR it doesn't look like there are a lot of these. System.IO.Ports is a great example of a library that would benefit from runtime over build-time checks.\r\n\r\nThe (portable) RID graph change is necessary as otherwise as @trungnt2910 mentioned, haiku wouldn't be recognized as a child of unix."", 'comment_created': datetime.datetime(2023, 9, 7, 10, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318457826, 'comment_body': ""> I don't know the exact differences between the various different portable or non-portable runtime graphs\r\n\r\nThe legacy graph is called the non-portable graph. It is stored in the runtime repo. It is bloated with non-portable rids. It will probably disappear in .NET 9.\r\n\r\nWith .NET 8, there's a new graph, named `PortableRuntimeIdentifierGraph.json`. It is stored in the sdk repo. We still add a non-portable rid to it during source-build. .NET 8 uses this one by default.\r\n\r\n> Otherwise, the build would fail (See [this CI run](https://github.com/trungnt2910/dotnet-builds/actions/runs/5914555471/job/16039990875) for the full logs):\r\n\r\nFor this we need to patch portable graph. And until it moves somewhere else, I think you can make a PR against the sdk repo that adds `haiku` to it.\r\n\r\nYou can try this change locally by patching the file in the SDK you are using for the `runtime` build.\r\n\r\nWhen it is added to the sdk repo, it will (after some time) become part of the SDK used by the runtime repo, and the CI leg may turn green.\r\n\r\nAlthough it sounds slow, it may happen faster than moving the rid graph around.\r\nIt took until .NET 7 until source-build was capable of building on unknown Linux rids. :sweat_smile: "", 'comment_created': datetime.datetime(2023, 9, 7, 11, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318504566, 'comment_body': ""> For this we need to patch portable graph. And until it moves somewhere else, I think you can make a PR against the sdk repo that adds haiku to it.\r\n\r\nSo, what you're suggesting is that I should revert the changes to the non-portable RID in this PR, and then open a separate PR to `dotnet/sdk` to add Haiku support to the portable RID graph?\r\n\r\n> You can try this change locally by patching the file in the SDK you are using for the runtime build.\r\n\r\nI have also had this theory, however, at the time I had that red CI, the SDK version declared in this repo's `global.json` was still `pre.7` instead of `rc.1` when the portable RID graph was added. I will try this later for my `dotnet-builds` repo. "", 'comment_created': datetime.datetime(2023, 9, 7, 12, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1318538026, 'comment_body': ""> So, what you're suggesting is that I should revert the changes to the non-portable RID in this PR, and then open a separate PR to dotnet/sdk to add Haiku support to the portable RID graph?\r\n\r\nYes. The graph that is used for .NET8+ is currently in the sdk repo, so you can make a PR against that.\r\nIf it moves some place else later, your changes will still be included."", 'comment_created': datetime.datetime(2023, 9, 7, 12, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318569902, 'comment_body': ""Note that the libraries build system currently doesn't use the portable RID graph. I just submitted https://github.com/dotnet/arcade/pull/14017 to fix that."", 'comment_created': datetime.datetime(2023, 9, 7, 13, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1319083423, 'comment_body': 'I am fine with moving the portable RID graph back to the runtime repo (or dotnet/arcade, but to me runtime makes more sense).', 'comment_created': datetime.datetime(2023, 9, 7, 20, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dsplaisted', 'type': 'User'}, {'comment_id': 1319514403, 'comment_body': '> Yes. The graph that is used for .NET8+ is currently in the sdk repo, so you can make a PR against that.\r\n\r\nhttps://github.com/dotnet/sdk/pull/35231\r\n\r\nMade a PR for it.\r\n\r\nAfter that is merged, I will remove the changes to `src/libraries/Microsoft.NETCore.Platforms` on this branch.', 'comment_created': datetime.datetime(2023, 9, 8, 8, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1319653325, 'comment_body': 'This will unblock source building runtime for haiku but you won\'t be able to add new ""haiku"" Target Platform Identifiers without source build conditions until the updated portable RID graph is available in the non source built SDK.\r\n\r\nWe should probably just move the portable RID graph into runtime and keep the Platforms package as a transport package for the sdk repo.', 'comment_created': datetime.datetime(2023, 9, 8, 10, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1320208777, 'comment_body': '@ViktorHofer, just curious, how would it work if we only move the graph file over to runtime repo to transport? The `UpdatePortableRuntimeIdentifierGraph` task in SDK takes that graph file as input and generates the final graph (with same filename). In order to do a live build for a new platform, would we need additional infra to specify the in-tree graph for runtime builds?', 'comment_created': datetime.datetime(2023, 9, 8, 18, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1321285233, 'comment_body': 'Same as with the old non-portable RID graph. We would keep both graphs in runtime and have a build task that allows us to add a RID to the graph on-the-fly. That updated portable RID graph would then flow together with the old non-portable RID graph into dotnet/sdk as a transport package. dotnet/sdk would then pick both graphs up and add them to the shipping SDK folder.', 'comment_created': datetime.datetime(2023, 9, 11, 9, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1328489922, 'comment_body': 'Submitted https://github.com/dotnet/runtime/pull/92211 targeting main to bring the portable RID graph over into runtime.', 'comment_created': datetime.datetime(2023, 9, 18, 9, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1335086306, 'comment_body': ""I've rebased this branch to match the upstream main branch (which contains #92211).\r\n\r\nI've also removed the version-specific Haiku RIDs from `runtime.json`. Should I remove all Haiku RIDs from that graph altogether though?"", 'comment_created': datetime.datetime(2023, 9, 24, 1, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335132388, 'comment_body': ""The old graph is probably staying around for .NET 9 (https://github.com/dotnet/runtime/pull/92211#issuecomment-1725943953) so it's best to keep `haiku` in it."", 'comment_created': datetime.datetime(2023, 9, 24, 6, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1335135939, 'comment_body': ""> it's best to keep haiku in it.\r\n\r\nJust `haiku`, or also the versioned one (`haiku.1` for Haiku R1)?"", 'comment_created': datetime.datetime(2023, 9, 24, 7, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335142679, 'comment_body': 'Just `haiku`. During a non-portable build, `haiku.1` will be automatically added to both graphs.', 'comment_created': datetime.datetime(2023, 9, 24, 8, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1335143228, 'comment_body': 'Update [PortableRuntimeIdentifierGraph.json](https://github.com/dotnet/runtime/commit/3b9b4fd5fcd3ff9ed0ea1622ff42f98a1068316b#diff-588ddddd3493c7445abeb05129392c25b9d03a30133085f6ec4b78d2b1adbe49) as well, which was recently moved in the repo?', 'comment_created': datetime.datetime(2023, 9, 24, 8, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1335145247, 'comment_body': '> Update [PortableRuntimeIdentifierGraph.json](https://github.com/dotnet/runtime/commit/3b9b4fd5fcd3ff9ed0ea1622ff42f98a1068316b#diff-588ddddd3493c7445abeb05129392c25b9d03a30133085f6ec4b78d2b1adbe49) as well, which was recently moved in the repo?\r\n\r\nProbably not, because before it moved here, https://github.com/dotnet/sdk/pull/35231 containing the changes for Haiku in the portable graph has already been merged.', 'comment_created': datetime.datetime(2023, 9, 24, 8, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335145457, 'comment_body': 'See also: https://github.com/dotnet/runtime/blob/bbe5c66c50201816c14149fd3f259db86bc1f493/src/libraries/Microsoft.NETCore.Platforms/src/PortableRuntimeIdentifierGraph.json#L67-L77', 'comment_created': datetime.datetime(2023, 9, 24, 8, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335145498, 'comment_body': 'This PR still keeps `haiku`, so I guess things should work.', 'comment_created': datetime.datetime(2023, 9, 24, 8, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1342023064, 'comment_body': 'Rebased on `main` and removed the changed adding `haiku` to this list in favor of a unified `unix` build.', 'comment_created': datetime.datetime(2023, 10, 1, 0, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1342076617, 'comment_body': '```suggestion\r\n```\r\nThis does not appear to be used anywhere. Delete it instead?', 'comment_created': datetime.datetime(2023, 10, 1, 5, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1368046249, 'comment_body': ""Done. Let's see if it breaks any builds."", 'comment_created': datetime.datetime(2023, 10, 23, 1, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}]","[{'commit_sha': '7338ea4d956abddaabaf107a75f82e5d68da74ea', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1351948171,Initial build configuration for Haiku,"Add support for Haiku in build configuration files in `eng/native/**`

Part of #55803.

",True,86303,https://api.github.com/repos/dotnet/runtime/pulls/86303,https://github.com/dotnet/runtime/pull/86303,closed,41,119,11,3,2,21,2,0,"[{'name': 'area-Infrastructure'}, {'name': 'community-contribution'}]",2023-05-16 07:10:23+00:00,2023-05-17 15:10:40+00:00,115217.0,"1 day, 8:00:17","[{'comment_id': 1194731915, 'comment_body': ""This shouldn't be needed as we don't plan on enabling managed libraries targeting haiku. Basically, we don't want to enable the following: `net8.0-haiku`. "", 'comment_created': datetime.datetime(2023, 5, 16, 7, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1194743835, 'comment_body': 'Not in this pull request, but I intend to open a PR in the future with the implementation of managed libraries for Haiku: https://github.com/trungnt2910/dotnet-runtime/tree/dev/trungnt2910/haiku-lib\r\n\r\nDoes it actually break CI and/or any internal conventions?', 'comment_created': datetime.datetime(2023, 5, 16, 7, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1194798580, 'comment_body': 'nit: would be nice to extract this list in a variable to dedup it here and line 33. (line 33 one is more complete)', 'comment_created': datetime.datetime(2023, 5, 16, 8, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1194885174, 'comment_body': ""For https://github.com/trungnt2910/dotnet-runtime/commit/59942abba4ec988a45016c3f18bf3d41fbd6f4d1, we don't need the code above. System.Private.CoreLib and doesn't use `TargetPlatformIdentifier`. Any other library under src/libraries would require haiku to be part of the runtime.json RID graph and have the above `SupportedPlatform` attribute.\r\n\r\nBut as mentioned, I doubt that we want managed components to target haiku. We should try to make them use the existing Unix/Linux implementations and if needed use runtime checks to differentiate for haiku. Adding a new platform to src/libraries isn't trivial and bloats the entire build graph for everyone.\r\n\r\n> Does it actually break CI and/or any internal conventions?\r\n\r\nNo it doesn't break CI but adding the haiku as a build platform to our managed libraries slows down the build. Unfortunately we don't have written guidance for adding new platforms to the managed part of dotnet/runtime."", 'comment_created': datetime.datetime(2023, 5, 16, 9, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1194886402, 'comment_body': 'To the best of my knowledge joining it with a comma and the and/or word would result in some quite messy bash. ', 'comment_created': datetime.datetime(2023, 5, 16, 9, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1194895252, 'comment_body': 'Something like\r\n\r\n```sh\r\nsupportedPlatforms=""windows, linux, freebsd, osx, maccatalyst, tvos, tvossimulator, ios, iossimulator, android, browser, wasi, netbsd, illumos, solaris, linux-musl, linux-bionic or haiku""\r\n\r\n# usage 1\r\necho ""  --os                            Target operating system: $supportedPlatforms""\r\n\r\n# usage 2\r\necho ""The allowed values are $supportedPlatforms.""\r\n```', 'comment_created': datetime.datetime(2023, 5, 16, 9, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1194949595, 'comment_body': 'In the original script, the first usage uses `or`, while the second one uses `and`. Is it OK to make both of them use `and`?', 'comment_created': datetime.datetime(2023, 5, 16, 10, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1194965804, 'comment_body': ""> would require haiku to be part of the runtime.json RID graph\r\n\r\nIf by `runtime.json` you mean `src/libraries/Microsoft.NETCore.Platforms/src/runtime.json`, then I intend to have it come over in [another pull request](https://github.com/trungnt2910/dotnet-runtime/commit/624bad0fd79e95bdc460ad7bbd6017240ad15310#diff-4cae40f80b790c66e01955edbd41e3ea51cec84088d1cbf6b461a5be8daee777).\r\n\r\n> use the existing Unix/Linux implementations\r\n\r\nThis is nearly impossible. Unix/Linux implementations seem to use much more features than what POSIX specifies. Haiku is strict about what it adds to its API surface. It would only accept functions that are either specified in POSIX or too popular to not include. Other functionality should be added by extending its own unique API based on BeOS, such as this [patch](https://review.haiku-os.org/c/haiku/+/6390) which would add some functionality required for `System.Diagnostics.Process`.\r\n\r\nThe difference between the implementation for Haiku and other UNIXes is visible in this [commit](https://github.com/trungnt2910/dotnet-runtime/commit/a5ce586adb0c5a9de1c54a4a64d9f42cec1260e9) providing support for building .NET's native components on Haiku, which is intended to be included in a future pull request.\r\n\r\n> and if needed use runtime checks to differentiate for haiku.\r\n\r\nThis would just bloat up the IL footprint for everyone.\r\n\r\n> bloats the entire build graph for everyone.\r\n\r\nI thought that only a few platforms listed in `src/installer/pkg/projects/netcoreappRIDs.props` are officially built? As for local builds I don't think that all libraries are built, just the one for the OS passed in `./build.sh`?\r\n"", 'comment_created': datetime.datetime(2023, 5, 16, 10, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1194976453, 'comment_body': 'Alternatively, we can deduplicate it like this:\r\n```suggestion\r\n          echo ""Try \'build.sh --help\' for values supported by \'--os\'.""\r\n```\r\n\r\n(following how we simplified lists in similar error message in https://github.com/dotnet/runtime/commit/53bb518ea482a5960577b151c11cc1297e5dea6d and few other places)', 'comment_created': datetime.datetime(2023, 5, 16, 10, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1194979516, 'comment_body': ""> This would just bloat up the IL footprint for everyone.\r\n\r\nIt wouldn't as we invoke the linker on our inbox assemblies (which are part of the Microsoft.NETCore.App shared framework) so that non OS applicable code gets removed. For assemblies that ship via nuget packages (i.e. `System.Formats.Cbor`) we don't want to introduce new build configurations as the cost of these is higher than the benefit (i.e. package size, build complexity, etc.).\r\n\r\nSelf-contained customer apps use the linker as well which results in unnecessary IL being removed.\r\n\r\n> I thought that only a few platforms listed in src/installer/pkg/projects/netcoreappRIDs.props are officially built? As for local builds I don't think that all libraries are built, just the one for the OS passed in ./build.sh?\r\n\r\nThis only applies to shared framework and native packages. For out-of-band packages, anything under src/libraries is included in the produced packages. With every additional managed build platform we pay that cost in CI and locally when invoking the `-allconfigurations` build."", 'comment_created': datetime.datetime(2023, 5, 16, 10, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1194980158, 'comment_body': 'cc @ericstj @jkotas', 'comment_created': datetime.datetime(2023, 5, 16, 10, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1194980688, 'comment_body': ""> we don't need the code above. System.Private.CoreLib and doesn't use `TargetPlatformIdentifier`.\r\n\r\nI intend to add implementations for other managed libraries in the near future, such as the `System.Diagnostic.Process` (currently having some WIP code for that on a local repo) required to get `dotnet/sdk` running on Haiku (otherwise it would just throw a `PlatformNotSupportedException` on startup)."", 'comment_created': datetime.datetime(2023, 5, 16, 10, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1195462143, 'comment_body': ""> we don't want to introduce new build configurations as the cost of these is higher than the benefit (i.e. package size, build complexity, etc.).\r\n\r\nI agree with you that it would be nice to refactor libraries to have one configuration, shared by all Unix flavors. It would be independent project from the Haiku port.\r\n\r\nThis PR is following what we do for all other Unix flavors today. I do not see a problem with it."", 'comment_created': datetime.datetime(2023, 5, 16, 17, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1195467709, 'comment_body': 'Does Haiku support building on x64 host only?', 'comment_created': datetime.datetime(2023, 5, 16, 17, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1195471200, 'comment_body': 'We do not set `CMAKE_SYSTEM_NAME` for other OSes (except FreeBSD). Why do we need to set it for Haiku? Does it need to be set for FreeBSD?', 'comment_created': datetime.datetime(2023, 5, 16, 17, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1195474803, 'comment_body': '`SSCANF_CANNOT_HANDLE_MISSING_EXPONENT` and some others of these config values are no longer used by the repo. \r\n\r\nBonus points for cleaning them up from everywhere.', 'comment_created': datetime.datetime(2023, 5, 16, 17, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1195763940, 'comment_body': 'For the purpose of this PR and the ones by me in the near future, yes.', 'comment_created': datetime.datetime(2023, 5, 16, 22, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1195772600, 'comment_body': 'I see that the checks are still available in the `configure.cmake` files, such as [here](https://github.com/dotnet/runtime/blob/d83506d6880a8a420ccf7b951bd8c7e430251734/src/coreclr/pal/src/configure.cmake#LL212C1-L226C42). Should they be removed as well?', 'comment_created': datetime.datetime(2023, 5, 16, 23, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1195773273, 'comment_body': 'Along with `SSCANF_CANNOT_HANDLE_MISSING_EXPONENT`, I can see that among the values used on Haiku:\r\n- `GETPWUID_R_SETS_ERRNO`\r\n- `HAVE_PROCFS_MAPS`\r\n- `HAVE_PROCFS_STATUS`\r\nalso do not appear anywhere else other than `configure.cmake`.\r\n\r\nThose values are remnants of prior work on the .NET 6/7 port to Haiku.', 'comment_created': datetime.datetime(2023, 5, 16, 23, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1195811402, 'comment_body': 'Removing it for Haiku seems to not break anything, so I removed it.', 'comment_created': datetime.datetime(2023, 5, 17, 0, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1195814857, 'comment_body': ""> Bonus points for cleaning them up from everywhere.\r\n\r\nI've removed all of the above values from `eng/native/tryrun**.cmake`. It does not break compilation for Haiku, hopefully not for all the other platforms."", 'comment_created': datetime.datetime(2023, 5, 17, 0, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}]","[{'commit_sha': 'cdccbc3da42ef007d3eac0768465f2eb6fe7153a', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea3c7c1c4194a74a40e1e47ef870a3088d3b0a38', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c1fbea8d5f33e00a9b2ba577d1cd1a33ef5d798', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1349541184,[VM] Fix potential double free,"Use a raw char `NewArrayHolder` instead of a `NewHolder` to store the `StackingAllocator` to prevent its destructor from being called twice since `StackingAllocatorHolder` has already taken care of the destruction.

This fixes a double free error when `ACQUIRE_STACKING_ALLOCATOR` is called in environments/OSes with smaller per-thread stack sizes, such as in [this port](https://github.com/dotnet/runtime/issues/55803#issuecomment-1545730293).",True,86207,https://api.github.com/repos/dotnet/runtime/pulls/86207,https://github.com/dotnet/runtime/pull/86207,closed,5,4,1,1,1,0,2,0,"[{'name': 'area-VM-coreclr'}, {'name': 'community-contribution'}]",2023-05-13 13:57:40+00:00,2023-06-05 14:39:49+00:00,1989729.0,"23 days, 0:42:09",[],"[{'commit_sha': '2b58324fead7b041242cc2900252144508fbc853', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1367953934,[libs] Fix poll events conversion,"- Use bitwise and to check for all flags instead of using a switch statement for poll events flags conversion.
- Convert poll events before comparison in assert statement.",True,86843,https://api.github.com/repos/dotnet/runtime/pulls/86843,https://github.com/dotnet/runtime/pull/86843,closed,74,57,1,1,6,0,2,1,"[{'name': 'area-System.Net.Sockets'}, {'name': 'community-contribution'}]",2023-05-28 12:30:58+00:00,2023-06-30 16:05:41+00:00,2864083.0,"33 days, 3:34:43",[],"[{'commit_sha': '095615bca6b9bedd907f8d849e5e76be82c94160', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1378290167,[VM] Fix potential undefined behavior,"Use pointer arithmetic instead of direct array access to avoid compilers, specifically GCC, to discover undefined behavior and generate unintended code when optimization is turned on.

The array involved is `pSeries->val_serie`, which is declared as a fixed sized array of size 1. However, `index` is always a non-negative integer, and we want to access the memory at `-index`, which is either zero or negative.

This fixes some bugs that occur only in Release mode such as [this one](https://github.com/dotnet/runtime/issues/55803#issuecomment-1547175040).",True,87119,https://api.github.com/repos/dotnet/runtime/pulls/87119,https://github.com/dotnet/runtime/pull/87119,closed,24,21,4,1,1,1,2,0,"[{'name': 'area-VM-coreclr'}, {'name': 'community-contribution'}]",2023-06-05 05:20:24+00:00,2023-06-07 22:26:37+00:00,234373.0,"2 days, 17:06:13","[{'comment_id': 1218376595, 'comment_body': 'There are number of other places that access `val_serie` using negative indices. The fix should be applied to all of them.', 'comment_created': datetime.datetime(2023, 6, 5, 17, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}]","[{'commit_sha': '58005e4049eb61b7b2dd586cf9531b74bd98565d', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1354422491,Haiku: Configuration support,"Added more support for configuration for Haiku cross-compile builds.

This commit adds recognition for Haiku as a supported platform in various build and configuration files.

For CMake files, this change adds additional guards for non-POSIX headers, functions, and struct members, most notably the `<ucontext.h>` header. (According to the latest POSIX standard, `ucontext_t` should be defined in `<signal.h>`, while `<ucontext.h>` is no longer mandated). `-ldl` is also replaced with `${CMAKE_DL_LIBS}` since Haiku does not have `libdl`.

Part of #55803.",True,86391,https://api.github.com/repos/dotnet/runtime/pulls/86391,https://github.com/dotnet/runtime/pull/86391,closed,205,63,43,1,5,37,3,0,"[{'name': 'area-Infrastructure-coreclr'}, {'name': 'community-contribution'}, {'name': 'os-haiku'}]",2023-05-17 15:38:08+00:00,2023-10-24 04:10:54+00:00,13782766.0,"159 days, 12:32:46","[{'comment_id': 1247869065, 'comment_body': '@agocke and @elinor-fung Are we creating new RIDs?', 'comment_created': datetime.datetime(2023, 6, 30, 13, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AaronRobinsonMSFT', 'type': 'User'}, {'comment_id': 1299217145, 'comment_body': ""Without creating a separate RID for Haiku, builds would fail.\r\n\r\n[This](https://github.com/trungnt2910/dotnet-builds/actions/runs/5901050884/job/16010024691) is a result of #90695, which makes certain build components unable to recognize the Haiku RID and therefore cannot resolve some references properly when cross-compiled from an official SDK:\r\n\r\n```\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(6,88): error CS0234: The type or namespace name 'ZLibException' does not exist in the namespace 'System.IO.Compression' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n##vso[task.logissue type=error;sourcepath=/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs;linenumber=6;columnnumber=88;code=CS0234;](NETCORE_ENGINEERING_TELEMETRY=Build) The type or namespace name 'ZLibException' does not exist in the namespace 'System.IO.Compression' (are you missing an assembly reference?)\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(7,77): error CS0234: The type or namespace name 'CookieVariant' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n##vso[task.logissue type=error;sourcepath=/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs;linenumber=7;columnnumber=77;code=CS0234;](NETCORE_ENGINEERING_TELEMETRY=Build) The type or namespace name 'CookieVariant' does not exist in the namespace 'System.Net' (are you missing an assembly reference?)\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(8,77): error CS0234: The type or namespace name 'PathList' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n##vso[task.logissue type=error;sourcepath=/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs;linenumber=8;columnnumber=77;code=CS0234;](NETCORE_ENGINEERING_TELEMETRY=Build) The type or namespace name 'PathList' does not exist in the namespace 'System.Net' (are you missing an assembly reference?)\r\n  System.Net.Http -> /home/runner/work/dotnet-builds/dotnet-builds/runtime/artifacts/bin/System.Net.Http/Debug/net8.0-haiku/System.Net.Http.dll\r\n  netstandard -> /home/runner/work/dotnet-builds/dotnet-builds/runtime/artifacts/bin/netstandard/Debug/net8.0-haiku/netstandard.dll\r\n\r\nBuild FAILED.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 19, 16, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1299399123, 'comment_body': '> Are we creating new RIDs?\r\n\r\nYes - for the new base OSes: https://github.com/dotnet/designs/pull/260#issuecomment-1685202292', 'comment_created': datetime.datetime(2023, 8, 20, 15, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1300516536, 'comment_body': ""The new base OSes would be added to the trimmed down 'portable' RID graph (https://github.com/dotnet/sdk/pull/34279) that is in sdk now: https://github.com/dotnet/sdk/blob/main/src/Layout/redist/PortableRuntimeIdentifierGraph.json\r\n\r\nThe idea is that the sdk is the source of truth for the RID graph that gets used for build / nuget restore and the large runtime.json file in runtime is frozen / no longer updated."", 'comment_created': datetime.datetime(2023, 8, 21, 18, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'elinor-fung', 'type': 'User'}, {'comment_id': 1317510978, 'comment_body': 'so the process for adding a new OS now is updating the RID graph in dotnet/sdk and then waiting until we pick it up in dotnet/runtime?', 'comment_created': datetime.datetime(2023, 9, 6, 15, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'akoeplinger', 'type': 'User'}, {'comment_id': 1317548068, 'comment_body': 'Yes, the changes in `src/libraries/Microsoft.NETCore.Platforms` are no longer needed for new platforms.\r\n\r\nIMO, if we move `PortableRuntimeIdentifierGraph.json` from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in `eng/common` near `eng/common/native/init-distro-rid.sh`), that would provide a better, more reasonable, codeflow.', 'comment_created': datetime.datetime(2023, 9, 6, 16, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1317554712, 'comment_body': '> IMO, if we move `PortableRuntimeIdentifierGraph.json` from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in `eng/common` near `eng/common/native/init-distro-rid.sh`), that would provide a better, more reasonable, codeflow.\r\n\r\nThat would certainly fix a lot of issues with Haiku builds and remove the current requirement of a Haiku-aware SDK to even build the `dotnet/runtime` repo on Linux.\r\n\r\nAfter #90695 for all Haiku builds I had to manually pass the path to a modified RID graph (See this [commit](https://github.com/trungnt2910/dotnet-builds/commit/363e1db61a80b8ad576cd3ddf0c8d34d3857b634)).', 'comment_created': datetime.datetime(2023, 9, 6, 16, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1317876361, 'comment_body': '> IMO, if we move `PortableRuntimeIdentifierGraph.json` from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in eng/common near eng/common/native/init-distro-rid.sh), that would provide a better, more reasonable, codeflow.\r\n\r\n@dsplaisted @ViktorHofer thoughts?', 'comment_created': datetime.datetime(2023, 9, 6, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'elinor-fung', 'type': 'User'}, {'comment_id': 1318138628, 'comment_body': 'Usually, we don\'t put shipping assets into dotnet/arcade... But I agree that the described code flow doesn\'t make sense. I was under the impression that we don\'t need to touch the portable RID graph often but it looks like when we do, we would need to consume a newer SDK which doesn\'t make sense from a build perspective.\r\n\r\nWhat about moving the Portable RID graph ""back"" into runtime instead? Do other repositories need it as well? Alternatively, what if the SDK would expose a task and target that we could invoke to mutate the portable RID graph so that we can just in time add the haiku RID, similar how source build distros add their entry to the build?', 'comment_created': datetime.datetime(2023, 9, 7, 6, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318139848, 'comment_body': 'Wow this is really getting out of hand. We should standardize on a common Unix build or even on a common single build and then use platform conditions.', 'comment_created': datetime.datetime(2023, 9, 7, 6, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318142378, 'comment_body': 'cc @tmds ', 'comment_created': datetime.datetime(2023, 9, 7, 6, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318202855, 'comment_body': ""The difference between Haiku and Linux is that the Linux has a base rid that is understood by the host and is present in `PortableRuntimeIdentifierGraph.json`.\r\n\r\n> if we move PortableRuntimeIdentifierGraph.json from dotnet/sdk to dotnet/arcade and make that the source-of-truth (in eng/common near eng/common/native/init-distro-rid.sh), that would provide a better, more reasonable, codeflow.\r\n\r\nI think we may run into issues in the future which will require an updated `PortableRuntimeIdentifierGraph.json` while building runtime (also on Linux). We can solve those when they arise.\r\n\r\nIn this case (bootstraping a new Unix flavor), imo, we can 'manually' update `PortableRuntimeIdentifierGraph.json` in the sdk repo as part of the onboarding.\r\n\r\nThen a bootstrap SDK for Haiku can be built."", 'comment_created': datetime.datetime(2023, 9, 7, 7, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318245412, 'comment_body': 'Either arcade or runtime makes sense for root definitions require to build runtime and its libraries, on which rest of the stack sits. Assuming `PortableRuntimeIdentifierGraph.json` is (an absolutely) necessary artifact, we can derive it from a script or a list out of one of two upstream repos, which anyway require other similar definitions in the porting process.', 'comment_created': datetime.datetime(2023, 9, 7, 8, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1318359155, 'comment_body': '> Assuming PortableRuntimeIdentifierGraph.json is (an absolutely) necessary artifact\r\n\r\nAs it is now, it is not necessary.\r\n\r\n(Honestly, to my surprise) source-build Linux works fine without the (non-portable) rid being built, to be in `PortableRuntimeIdentifierGraph.json`.\r\n\r\nIf the `runtime` host, and the `sdk` `PortableRuntimeIdentifierGraph.json` know `haiku` (the same way they know `linux`), that should be enough.', 'comment_created': datetime.datetime(2023, 9, 7, 9, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318366686, 'comment_body': ""I don't know the exact differences between the various different portable or non-portable runtime graphs, but building .NET for Haiku requires a Haiku-aware RID graph.\r\n\r\nOtherwise, the build would fail (See [this CI run](https://github.com/trungnt2910/dotnet-builds/actions/runs/5914555471/job/16039990875) for the full logs):\r\n```\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(6,88): error CS0234: The type or namespace name 'ZLibException' does not exist in the namespace 'System.IO.Compression' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.cs(7,77): error CS0234: The type or namespace name 'CookieVariant' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [/home/runner/work/dotnet-builds/dotnet-builds/runtime/src/libraries/shims/System/src/System.csproj]\r\n```\r\n\r\nThe problem here is that the build fails to recognize `haiku-x64` as an instance of `unix-x64`, and therefore references generic libraries (`net8.0`) instead of UNIX-specific ones (`net8.0-unix`), therefore missing some UNIX-specific classes."", 'comment_created': datetime.datetime(2023, 9, 7, 9, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1318431496, 'comment_body': ""We have a few libraries that don't offer a Unix compatible implementation and you had to add a `net8.0-haiku` TFM for them. Ideally, that wouldn't be necessary and those libs would just offer a Unix compatible implementation with runtime checks. From the changes in this PR it doesn't look like there are a lot of these. System.IO.Ports is a great example of a library that would benefit from runtime over build-time checks.\r\n\r\nThe (portable) RID graph change is necessary as otherwise as @trungnt2910 mentioned, haiku wouldn't be recognized as a child of unix."", 'comment_created': datetime.datetime(2023, 9, 7, 10, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1318457826, 'comment_body': ""> I don't know the exact differences between the various different portable or non-portable runtime graphs\r\n\r\nThe legacy graph is called the non-portable graph. It is stored in the runtime repo. It is bloated with non-portable rids. It will probably disappear in .NET 9.\r\n\r\nWith .NET 8, there's a new graph, named `PortableRuntimeIdentifierGraph.json`. It is stored in the sdk repo. We still add a non-portable rid to it during source-build. .NET 8 uses this one by default.\r\n\r\n> Otherwise, the build would fail (See [this CI run](https://github.com/trungnt2910/dotnet-builds/actions/runs/5914555471/job/16039990875) for the full logs):\r\n\r\nFor this we need to patch portable graph. And until it moves somewhere else, I think you can make a PR against the sdk repo that adds `haiku` to it.\r\n\r\nYou can try this change locally by patching the file in the SDK you are using for the `runtime` build.\r\n\r\nWhen it is added to the sdk repo, it will (after some time) become part of the SDK used by the runtime repo, and the CI leg may turn green.\r\n\r\nAlthough it sounds slow, it may happen faster than moving the rid graph around.\r\nIt took until .NET 7 until source-build was capable of building on unknown Linux rids. :sweat_smile: "", 'comment_created': datetime.datetime(2023, 9, 7, 11, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318504566, 'comment_body': ""> For this we need to patch portable graph. And until it moves somewhere else, I think you can make a PR against the sdk repo that adds haiku to it.\r\n\r\nSo, what you're suggesting is that I should revert the changes to the non-portable RID in this PR, and then open a separate PR to `dotnet/sdk` to add Haiku support to the portable RID graph?\r\n\r\n> You can try this change locally by patching the file in the SDK you are using for the runtime build.\r\n\r\nI have also had this theory, however, at the time I had that red CI, the SDK version declared in this repo's `global.json` was still `pre.7` instead of `rc.1` when the portable RID graph was added. I will try this later for my `dotnet-builds` repo. "", 'comment_created': datetime.datetime(2023, 9, 7, 12, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1318538026, 'comment_body': ""> So, what you're suggesting is that I should revert the changes to the non-portable RID in this PR, and then open a separate PR to dotnet/sdk to add Haiku support to the portable RID graph?\r\n\r\nYes. The graph that is used for .NET8+ is currently in the sdk repo, so you can make a PR against that.\r\nIf it moves some place else later, your changes will still be included."", 'comment_created': datetime.datetime(2023, 9, 7, 12, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1318569902, 'comment_body': ""Note that the libraries build system currently doesn't use the portable RID graph. I just submitted https://github.com/dotnet/arcade/pull/14017 to fix that."", 'comment_created': datetime.datetime(2023, 9, 7, 13, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1319083423, 'comment_body': 'I am fine with moving the portable RID graph back to the runtime repo (or dotnet/arcade, but to me runtime makes more sense).', 'comment_created': datetime.datetime(2023, 9, 7, 20, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dsplaisted', 'type': 'User'}, {'comment_id': 1319514403, 'comment_body': '> Yes. The graph that is used for .NET8+ is currently in the sdk repo, so you can make a PR against that.\r\n\r\nhttps://github.com/dotnet/sdk/pull/35231\r\n\r\nMade a PR for it.\r\n\r\nAfter that is merged, I will remove the changes to `src/libraries/Microsoft.NETCore.Platforms` on this branch.', 'comment_created': datetime.datetime(2023, 9, 8, 8, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1319653325, 'comment_body': 'This will unblock source building runtime for haiku but you won\'t be able to add new ""haiku"" Target Platform Identifiers without source build conditions until the updated portable RID graph is available in the non source built SDK.\r\n\r\nWe should probably just move the portable RID graph into runtime and keep the Platforms package as a transport package for the sdk repo.', 'comment_created': datetime.datetime(2023, 9, 8, 10, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1320208777, 'comment_body': '@ViktorHofer, just curious, how would it work if we only move the graph file over to runtime repo to transport? The `UpdatePortableRuntimeIdentifierGraph` task in SDK takes that graph file as input and generates the final graph (with same filename). In order to do a live build for a new platform, would we need additional infra to specify the in-tree graph for runtime builds?', 'comment_created': datetime.datetime(2023, 9, 8, 18, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1321285233, 'comment_body': 'Same as with the old non-portable RID graph. We would keep both graphs in runtime and have a build task that allows us to add a RID to the graph on-the-fly. That updated portable RID graph would then flow together with the old non-portable RID graph into dotnet/sdk as a transport package. dotnet/sdk would then pick both graphs up and add them to the shipping SDK folder.', 'comment_created': datetime.datetime(2023, 9, 11, 9, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1328489922, 'comment_body': 'Submitted https://github.com/dotnet/runtime/pull/92211 targeting main to bring the portable RID graph over into runtime.', 'comment_created': datetime.datetime(2023, 9, 18, 9, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ViktorHofer', 'type': 'User'}, {'comment_id': 1335086306, 'comment_body': ""I've rebased this branch to match the upstream main branch (which contains #92211).\r\n\r\nI've also removed the version-specific Haiku RIDs from `runtime.json`. Should I remove all Haiku RIDs from that graph altogether though?"", 'comment_created': datetime.datetime(2023, 9, 24, 1, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335132388, 'comment_body': ""The old graph is probably staying around for .NET 9 (https://github.com/dotnet/runtime/pull/92211#issuecomment-1725943953) so it's best to keep `haiku` in it."", 'comment_created': datetime.datetime(2023, 9, 24, 6, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1335135939, 'comment_body': ""> it's best to keep haiku in it.\r\n\r\nJust `haiku`, or also the versioned one (`haiku.1` for Haiku R1)?"", 'comment_created': datetime.datetime(2023, 9, 24, 7, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335142679, 'comment_body': 'Just `haiku`. During a non-portable build, `haiku.1` will be automatically added to both graphs.', 'comment_created': datetime.datetime(2023, 9, 24, 8, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tmds', 'type': 'User'}, {'comment_id': 1335143228, 'comment_body': 'Update [PortableRuntimeIdentifierGraph.json](https://github.com/dotnet/runtime/commit/3b9b4fd5fcd3ff9ed0ea1622ff42f98a1068316b#diff-588ddddd3493c7445abeb05129392c25b9d03a30133085f6ec4b78d2b1adbe49) as well, which was recently moved in the repo?', 'comment_created': datetime.datetime(2023, 9, 24, 8, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1335145247, 'comment_body': '> Update [PortableRuntimeIdentifierGraph.json](https://github.com/dotnet/runtime/commit/3b9b4fd5fcd3ff9ed0ea1622ff42f98a1068316b#diff-588ddddd3493c7445abeb05129392c25b9d03a30133085f6ec4b78d2b1adbe49) as well, which was recently moved in the repo?\r\n\r\nProbably not, because before it moved here, https://github.com/dotnet/sdk/pull/35231 containing the changes for Haiku in the portable graph has already been merged.', 'comment_created': datetime.datetime(2023, 9, 24, 8, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335145457, 'comment_body': 'See also: https://github.com/dotnet/runtime/blob/bbe5c66c50201816c14149fd3f259db86bc1f493/src/libraries/Microsoft.NETCore.Platforms/src/PortableRuntimeIdentifierGraph.json#L67-L77', 'comment_created': datetime.datetime(2023, 9, 24, 8, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1335145498, 'comment_body': 'This PR still keeps `haiku`, so I guess things should work.', 'comment_created': datetime.datetime(2023, 9, 24, 8, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1342023064, 'comment_body': 'Rebased on `main` and removed the changed adding `haiku` to this list in favor of a unified `unix` build.', 'comment_created': datetime.datetime(2023, 10, 1, 0, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1342076617, 'comment_body': '```suggestion\r\n```\r\nThis does not appear to be used anywhere. Delete it instead?', 'comment_created': datetime.datetime(2023, 10, 1, 5, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jkotas', 'type': 'User'}, {'comment_id': 1368046249, 'comment_body': ""Done. Let's see if it breaks any builds."", 'comment_created': datetime.datetime(2023, 10, 23, 1, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}]","[{'commit_sha': '7338ea4d956abddaabaf107a75f82e5d68da74ea', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1340571557,Haiku: Fix infrastructure support,"Updated and fixed support for Haiku in dotnet-arcade.

This is a part of https://github.com/dotnet/runtime/issues/55803.

This configuration has been tested by building dotnet/runtime and passes the CMake step.

### To double check:

* [x] The right tests are in and and the right validation has happened.  Guidance:  https://github.com/dotnet/arcade/tree/main/Documentation/Validation
",True,13437,https://api.github.com/repos/dotnet/arcade/pulls/13437,https://github.com/dotnet/arcade/pull/13437,closed,53,54,2,1,4,8,0,0,[],2023-05-06 02:46:34+00:00,2023-05-12 08:48:55+00:00,540141.0,"6 days, 6:02:21","[{'comment_id': 1186609722, 'comment_body': ""These shouldn't be needed, we set them in runtime, e.g. https://github.com/dotnet/runtime/blob/e61e022b3c3aabab29dc3a8d0fa2cb19563f9bb6/eng/native/configureplatform.cmake#L486-L489"", 'comment_created': datetime.datetime(2023, 5, 6, 3, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1186611870, 'comment_body': 'Do we need these `__HaikuPackages+=XXX` when `__HaikuPackages+=XXX_devel` is in the list? On other systems, we only need devel packages for build.', 'comment_created': datetime.datetime(2023, 5, 6, 3, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}, {'comment_id': 1186614283, 'comment_body': 'As far as I know about C library linking, the compiler requires header files (which are included in `_devel` packages) while the linker requires the library itself (which is present in the main package).\r\n\r\nIf `dotnet` does static linking only then probably only the `_devel` packages are needed, but there is a trend among the Haiku packages maintainers to abolish static libraries.', 'comment_created': datetime.datetime(2023, 5, 6, 4, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1186664962, 'comment_body': '> there is a trend among the Haiku packages maintainers to abolish static libraries.\r\n\r\nTake `gmp` for example: https://github.com/haikuports/haikuports/commit/e1f94f667456425c2c7acc5e432f468954a6185c\r\n', 'comment_created': datetime.datetime(2023, 5, 6, 8, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1186671499, 'comment_body': 'For building, only the `_devel` package is needed, it contains a version of the library for linking against (most of the time a symlink to the main library in `$developLibDir`). Also, `_devel` packages usually depend on the main one.', 'comment_created': datetime.datetime(2023, 5, 6, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jmairboeck', 'type': 'User'}, {'comment_id': 1186671917, 'comment_body': ""> most of the time a symlink to the main library in `$developLibDir`\r\n\r\nI don't think the linker can build with a symlink alone.\r\n\r\n> Also, _devel packages usually depend on the main one.\r\n\r\nThe problem is the script in question does not install packages and resolve dependencies like what `pkgman` does. It simply reads a list of package names, fetches `.hpkg` files from HaikuDepot, and extracts them as if they were simple archives (it does not handle any metadata)."", 'comment_created': datetime.datetime(2023, 5, 6, 9, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1191828545, 'comment_body': 'Instead of relying on theory and speculation, here are some errors occurred when removing some non-`devel` packages:\r\n\r\n## Removing `gcc_syslibs`\r\n```\r\n  [  1%] Building CXX object inc/CMakeFiles/corguids_obj.dir/__/pal/prebuilt/idl/xcordebug_i.cpp.o\r\n  [  1%] Linking CXX static library libgcinfo_unix_x64.a\r\n  /home/trung/dotnet-rootfs/cross-tools-x86_64/bin/../lib/gcc/x86_64-unknown-haiku/11.3.0/../../../../x86_64-unknown-haiku/bin/ld: cannot find -lstdc++\r\n  collect2: error: ld returned 1 exit status\r\n  make[3]: *** [tools/aot/jitinterface/CMakeFiles/jitinterface_x64.dir/build.make:161: tools/aot/jitinterface/libjitinterface_x64.so] Error 1\r\n  make[2]: *** [CMakeFiles/Makefile2:2557: tools/aot/jitinterface/CMakeFiles/jitinterface_x64.dir/all] Error 2\r\n  make[2]: *** Waiting for unfinished jobs....\r\n```\r\n\r\n## Removing `llvm12_libunwind`\r\n```\r\n  make[3]: *** No rule to make target \'/home/trung/dotnet-rootfs/boot/system/develop/lib/libunwind.so\', needed by \'tools/StressLogAnalyzer/StressLogAnalyzer\'.  Stop.\r\n  make[3]: *** Waiting for unfinished jobs....\r\n  [ 30%] Building CXX object md/compiler/CMakeFiles/mdcompiler_dac.dir/importhelper.cpp.o\r\n  [ 30%] Building CXX object tools/StressLogAnalyzer/CMakeFiles/StressLogAnalyzer.dir/StressLogPlugin.cpp.o\r\n  [ 30%] Building CXX object jit/static/CMakeFiles/clrjit_obj.dir/__/buildstring.cpp.o\r\n  [ 30%] Built target mddatasource_dbi\r\n  [ 30%] Built target eventing_headers\r\n  -- Install configuration: ""DEBUG""\r\n  -- Installing: /home/trung/dotnet-runtime/artifacts/bin/coreclr/haiku.x64.Debug/lib/libcoreclrpal.a\r\n  -- Installing: /home/trung/dotnet-runtime/artifacts/bin/coreclr/haiku.x64.Debug/lib/libeventprovider.a\r\n  -- Installing: /home/trung/dotnet-runtime/artifacts/bin/coreclr/haiku.x64.Debug/lib/libnativeresourcestring.a\r\n  -- Installing: /home/trung/dotnet-runtime/artifacts/bin/coreclr/haiku.x64.Debug/inc/corhdr.h\r\n  make[2]: *** [CMakeFiles/Makefile2:4892: tools/StressLogAnalyzer/CMakeFiles/StressLogAnalyzer.dir/all] Error 2\r\n  make[2]: *** Waiting for unfinished jobs....\r\n  -- Installing: /home/trung/dotnet-runtime/artifacts/bin/coreclr/haiku.x64.Debug/lib/libpalrt.a\r\n```\r\n\r\n## Removing `zlib`\r\n```\r\n  [ 96%] Built target runtimeinfo\r\n  make[3]: *** No rule to make target \'/home/trung/dotnet-rootfs/boot/system/develop/lib/libz.so\', needed by \'Corehost.Static/singlefilehost\'.  Stop.\r\n  make[2]: *** [CMakeFiles/Makefile2:1953: Corehost.Static/CMakeFiles/singlefilehost.dir/all] Error 2\r\n  make[1]: *** [CMakeFiles/Makefile2:1725: CMakeFiles/runtime.dir/rule] Error 2\r\n  make: *** [Makefile:208: runtime] Error 2\r\n  ~/dotnet-runtime/src/coreclr\r\n  Failed to build ""CoreCLR component"".\r\n```\r\n\r\n## Removing `krb5`\r\n```\r\n  [ 96%] Built target runtimeinfo\r\n  make[3]: *** No rule to make target \'/home/trung/dotnet-rootfs/boot/system/develop/lib/libgssapi_krb5.so\', needed by \'Corehost.Static/singlefilehost\'.  Stop.\r\n  make[2]: *** [CMakeFiles/Makefile2:1953: Corehost.Static/CMakeFiles/singlefilehost.dir/all] Error 2\r\n  make[1]: *** [CMakeFiles/Makefile2:1725: CMakeFiles/runtime.dir/rule] Error 2\r\n  make: *** [Makefile:208: runtime] Error 2\r\n  ~/dotnet-runtime/src/coreclr\r\n  Failed to build ""CoreCLR component"".\r\n```', 'comment_created': datetime.datetime(2023, 5, 12, 1, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}, {'comment_id': 1191830249, 'comment_body': '> On other systems, we only need devel packages for build.\r\n\r\nFurthermore, if you look at the package fetching code for the systems that only need devel packages (basically, only Alpine and Ubuntu):\r\n\r\n```sh\r\n    # install all packages in one go\r\n    ""$__ApkToolsDir/apk.static"" \\\r\n        -X ""http://dl-cdn.alpinelinux.org/alpine/$version/main"" \\\r\n        -X ""http://dl-cdn.alpinelinux.org/alpine/$version/community"" \\\r\n        -U $__ApkSignatureArg --root ""$__RootfsDir"" --arch ""$__AlpineArch"" \\\r\n        add $__AlpinePackages\r\n```\r\n\r\n```sh\r\n    cp ""$__CrossDir/$__BuildArch/sources.list.$__CodeName"" ""$__RootfsDir/etc/apt/sources.list""\r\n    chroot ""$__RootfsDir"" apt-get update\r\n    chroot ""$__RootfsDir"" apt-get -f -y install\r\n    chroot ""$__RootfsDir"" apt-get -y install $__UbuntuPackages\r\n    chroot ""$__RootfsDir"" symlinks -cr /usr\r\n    chroot ""$__RootfsDir"" apt-get clean\r\n```\r\n\r\nThey\'re installed using native package _managers_, which means all dependencies (usually the non-devel packages) will be resolved. However, the Haiku rootfs build uses a simple package _extractor_ that cannot resolve dependencies.', 'comment_created': datetime.datetime(2023, 5, 12, 1, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}]","[{'commit_sha': '002ae9fa8ec2a8f2d2acf9ee49048e159a918111', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1375984694,Haiku: Update arcade support,"- Fix Haiku toolchain detection code.
- Register Haiku to XUnit test platforms as mentioned in [this comment](https://github.com/dotnet/arcade/pull/13437#issuecomment-1549589332).

### To double check:

* [x] The right tests are in and and the right validation has happened.  Guidance:  https://github.com/dotnet/arcade/tree/main/Documentation/Validation
",True,13755,https://api.github.com/repos/dotnet/arcade/pulls/13755,https://github.com/dotnet/arcade/pull/13755,closed,5,3,3,1,0,1,0,0,[],2023-06-02 15:45:23+00:00,2023-08-31 08:22:41+00:00,7749438.0,"89 days, 16:37:18","[{'comment_id': 1310924572, 'comment_body': 'We could hoist this function out of this if-else block and reuse it for both Haiku and illumos. (perhaps as a separate PR)', 'comment_created': datetime.datetime(2023, 8, 30, 23, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'am11', 'type': 'User'}]","[{'commit_sha': '6d1d15d1deeae25362358820e1eca995ae1c5f63', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1426298330,CSharpExpressionPrinter: Wrap expression in parenthesis,"Wrap default parameter expressions in parentheses to ensure whole expressions are casted instead of only the first operand.

This fixes the case when the C++ source contains `enum` flags `or`ed with each other as default parameters.

For example, [this code](https://github.com/haiku/haiku/blob/9aa43979f8a972fb20ac16e88d230f4ccd3401ae/headers/os/app/Roster.h#L93C1-L96C36
)
```cpp
			status_t			StartWatching(BMessenger target,
									uint32 eventMask
										= B_REQUEST_LAUNCHED
											| B_REQUEST_QUIT) const;
```

gets incorrectly translated to:
```cs
        public int StartWatching(global::Haiku.App.BMessenger target, uint eventMask = (uint) global::Haiku.App.WatchingRequestFlags.B_REQUEST_LAUNCHED | global::Haiku.App.WatchingRequestFlags.B_REQUEST_QUIT)
```

which causes an error:
```
/home/trung/cppsharp/generated/App.cs(9986,88): error CS0019: Operator '|' cannot be applied to operands of type 'uint' and 'WatchingRequestFlags' [/home/trung/cppsharp/HaikuApiGenerator.csproj]
```

Wrapping with a pair of parentheses should fix this issue:
```cs
        public int StartWatching(global::Haiku.App.BMessenger target, uint eventMask = (uint) (global::Haiku.App.WatchingRequestFlags.B_REQUEST_LAUNCHED | global::Haiku.App.WatchingRequestFlags.B_REQUEST_QUIT))
``` ",True,1741,https://api.github.com/repos/mono/CppSharp/pulls/1741,https://github.com/mono/CppSharp/pull/1741,closed,10,4,3,1,2,0,0,0,[],2023-07-09 12:55:23+00:00,2023-07-09 14:25:54+00:00,5431.0,1:30:31,[],"[{'commit_sha': '355c22219ae19010d7289e44af8f8fa29dc97618', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1430776135,CSharpExpressionPrinter: Recurse into operands,Recursively call `VisitExpression` on the LHS and RHS of a binary operator expression. This fixes the generation for complex default parameters involving things other than two enumeration members.,True,1745,https://api.github.com/repos/mono/CppSharp/pulls/1745,https://github.com/mono/CppSharp/pull/1745,closed,39,26,4,2,1,2,0,0,[],2023-07-12 08:02:56+00:00,2023-07-12 18:30:37+00:00,37661.0,10:27:41,"[{'comment_id': 1261467458, 'comment_body': 'Could you use https://github.com/mono/CppSharp/blob/main/src/AST/TypeExtensions.cs#L385 maybe? ', 'comment_created': datetime.datetime(2023, 7, 12, 17, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tritao', 'type': 'User'}, {'comment_id': 1261581799, 'comment_body': 'I think your version might be better actually since it will take type maps into account.', 'comment_created': datetime.datetime(2023, 7, 12, 18, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tritao', 'type': 'User'}]","[{'commit_sha': '1c8a1b36f7a7f44472c73721a612ffb3b3d3f1b1', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81823c62e9f02510765fe84a08a60b996f0a28c5', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1432383719,CSharp: More default parameter fixes,"- Expression generation for `ConstructorReference` now also recursively calls `VisitExpression` for the argument if only one argument is detected. This allows correct overload generation for functions taking a variable as the default parameter value.
- Default parameters of pointer-to-enumeration types are now correctly generated similar to primitive types.",True,1747,https://api.github.com/repos/mono/CppSharp/pulls/1747,https://github.com/mono/CppSharp/pull/1747,closed,80,39,8,1,3,1,0,0,[],2023-07-13 05:28:37+00:00,2023-07-14 10:11:51+00:00,103394.0,"1 day, 4:43:14","[{'comment_id': 1262120858, 'comment_body': 'I am blocking `StatementClass.Any` here since such statements will be generated without any kind of modification and may contain code that is invalid in C#.\r\n\r\nOtherwise, `defaultMappedToEnumAssignedWithCtor` fails because `nullptr` is not valid C#.\r\n\r\nIt would be better if CppSharp is aware that `Arguments[0]` has been defaulted away and instead report 0 arguments to avoid this mess altogether.', 'comment_created': datetime.datetime(2023, 7, 13, 7, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'trungnt2910', 'type': 'User'}]","[{'commit_sha': 'fdfc68f0c73d6e677bec3761633456aca7472a3a', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1434489586,Array marshalling,Contains some fixes/features for marshalling of some array types.,True,1748,https://api.github.com/repos/mono/CppSharp/pulls/1748,https://github.com/mono/CppSharp/pull/1748,closed,25,8,6,3,0,0,0,0,[],2023-07-14 09:35:05+00:00,2023-07-14 18:45:46+00:00,33041.0,9:10:41,[],"[{'commit_sha': 'fbdfa37c9a61488cfe37615ac649378e67440fb4', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d9e5cc4de7b48af2da0cef30eaea6d7d2fd2a4e', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4989994dfd3f9e6903825e4739c56837ba9fede1', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1441011573,SymbolResolver: Use filename when path cannot be found,Uses bare filename to pass to `dlopen` when the full path cannot be detected. This helps on systems where library paths are not the same as $PATH.,True,1752,https://api.github.com/repos/mono/CppSharp/pulls/1752,https://github.com/mono/CppSharp/pull/1752,closed,5,5,1,1,0,0,0,0,[],2023-07-19 13:14:20+00:00,2023-07-19 14:04:51+00:00,3031.0,0:50:31,[],"[{'commit_sha': 'ddbfd64ba894faad6cb4c07fa014958ebd1814cc', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85
1443061051,CSharpSources: Dereference pointer variables,"Dereference pointers when generating getters for pointer variables. Otherwise, the managed instance would point to the pointer itself rather than the native instance's address.",True,1753,https://api.github.com/repos/mono/CppSharp/pulls/1753,https://github.com/mono/CppSharp/pull/1753,closed,48,0,4,1,2,0,0,0,[],2023-07-20 14:55:37+00:00,2023-07-21 00:41:19+00:00,35142.0,9:45:42,[],"[{'commit_sha': '199a73bc6ea4120ff760ef356f8d367c0976ea7d', 'committer_username': 'trungnt2910', 'committer_name': 'Trung Nguyen', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 9, 17, 4, tzinfo=datetime.timezone.utc)}]",Trung Nguyen,57174311,,User,,116,,17,85

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
210716005,runtime,dotnet/runtime,C#,4609,14803,458,3089,135562,8840,41,283,"[{'id': 1760537455, 'number': 99399, 'closed': datetime.datetime(2024, 3, 7, 17, 39, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 7, 8, 46, 38, tzinfo=datetime.timezone.utc), 'time_taken': 31984.0, 'time_delta': '8:53:04', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1570364843, 'number': 93907, 'closed': None, 'created': datetime.datetime(2023, 10, 24, 4, 40, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 147, 'deletions': 59, 'state': 'open'}, {'id': 1378290167, 'number': 87119, 'closed': datetime.datetime(2023, 6, 7, 22, 26, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 5, 20, 24, tzinfo=datetime.timezone.utc), 'time_taken': 234373.0, 'time_delta': '2 days, 17:06:13', 'additions': 24, 'deletions': 21, 'state': 'closed'}, {'id': 1367953934, 'number': 86843, 'closed': datetime.datetime(2023, 6, 30, 16, 5, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 12, 30, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2864083.0, 'time_delta': '33 days, 3:34:43', 'additions': 74, 'deletions': 57, 'state': 'closed'}, {'id': 1354422491, 'number': 86391, 'closed': datetime.datetime(2023, 10, 24, 4, 10, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 17, 15, 38, 8, tzinfo=datetime.timezone.utc), 'time_taken': 13782766.0, 'time_delta': '159 days, 12:32:46', 'additions': 205, 'deletions': 63, 'state': 'closed'}, {'id': 1351948171, 'number': 86303, 'closed': datetime.datetime(2023, 5, 17, 15, 10, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 16, 7, 10, 23, tzinfo=datetime.timezone.utc), 'time_taken': 115217.0, 'time_delta': '1 day, 8:00:17', 'additions': 41, 'deletions': 119, 'state': 'closed'}, {'id': 1349541184, 'number': 86207, 'closed': datetime.datetime(2023, 6, 5, 14, 39, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 13, 13, 57, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1989729.0, 'time_delta': '23 days, 0:42:09', 'additions': 5, 'deletions': 4, 'state': 'closed'}]"
121444325,arcade,dotnet/arcade,C#,335,660,263,276,7408,395,84,31,"[{'id': 1375984694, 'number': 13755, 'closed': datetime.datetime(2023, 8, 31, 8, 22, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 2, 15, 45, 23, tzinfo=datetime.timezone.utc), 'time_taken': 7749438.0, 'time_delta': '89 days, 16:37:18', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1340571557, 'number': 13437, 'closed': datetime.datetime(2023, 5, 12, 8, 48, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 6, 2, 46, 34, tzinfo=datetime.timezone.utc), 'time_taken': 540141.0, 'time_delta': '6 days, 6:02:21', 'additions': 53, 'deletions': 54, 'state': 'closed'}]"
9988318,CppSharp,mono/CppSharp,C#,501,3062,156,90,5504,318,92,21,"[{'id': 1443061051, 'number': 1753, 'closed': datetime.datetime(2023, 7, 21, 0, 41, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 14, 55, 37, tzinfo=datetime.timezone.utc), 'time_taken': 35142.0, 'time_delta': '9:45:42', 'additions': 48, 'deletions': 0, 'state': 'closed'}, {'id': 1441011573, 'number': 1752, 'closed': datetime.datetime(2023, 7, 19, 14, 4, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 13, 14, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3031.0, 'time_delta': '0:50:31', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1434489586, 'number': 1748, 'closed': datetime.datetime(2023, 7, 14, 18, 45, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 9, 35, 5, tzinfo=datetime.timezone.utc), 'time_taken': 33041.0, 'time_delta': '9:10:41', 'additions': 25, 'deletions': 8, 'state': 'closed'}, {'id': 1432383719, 'number': 1747, 'closed': datetime.datetime(2023, 7, 14, 10, 11, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 13, 5, 28, 37, tzinfo=datetime.timezone.utc), 'time_taken': 103394.0, 'time_delta': '1 day, 4:43:14', 'additions': 80, 'deletions': 39, 'state': 'closed'}, {'id': 1430776135, 'number': 1745, 'closed': datetime.datetime(2023, 7, 12, 18, 30, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 8, 2, 56, tzinfo=datetime.timezone.utc), 'time_taken': 37661.0, 'time_delta': '10:27:41', 'additions': 39, 'deletions': 26, 'state': 'closed'}, {'id': 1426298330, 'number': 1741, 'closed': datetime.datetime(2023, 7, 9, 14, 25, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 9, 12, 55, 23, tzinfo=datetime.timezone.utc), 'time_taken': 5431.0, 'time_delta': '1:30:31', 'additions': 10, 'deletions': 4, 'state': 'closed'}]"
