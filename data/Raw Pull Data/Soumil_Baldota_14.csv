pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
949943820,Replace obj_needs_destructor by more general concept,"BEGINRELEASENOTES
- Replace the `obj_needs_destructor` flag in the generator code and templates with the `is_trivial_type` flag, since that is the more appropriate name. (Fixes #288)

ENDRELEASENOTES",True,291,https://api.github.com/repos/AIDASoft/podio/pulls/291,https://github.com/AIDASoft/podio/pull/291,closed,5,5,4,4,0,2,0,0,[],2022-05-28 06:21:47+00:00,2022-05-30 09:49:44+00:00,185277.0,"2 days, 3:27:57","[{'comment_id': 884566364, 'comment_body': '```suggestion\r\n```\r\n\r\nThis has been removed from the code, so we can also remove it from the documentation.', 'comment_created': datetime.datetime(2022, 5, 30, 8, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 884568293, 'comment_body': '```suggestion\r\n| `is_trivial_type`        | Flag that indicates that this is a *trivial* data type, i.e. one without relations or vector members.                            |\r\n```\r\nJust to clarify that this is a boolean value. ', 'comment_created': datetime.datetime(2022, 5, 30, 8, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}]","[{'commit_sha': 'd1bbba00fe43c08327f1ec9e4fd0844f72398a1a', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de0d39d16b1b079600b5d92a6ce5e47ea69197e', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ada0a07f7f07d71c74787c6e7e0e22eb750f758', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '956413851884985f120ce182380d419fe036eff7', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}]",,71919921,,User,,31,,11,11
952018943,Review generator python code,"BEGINRELEASENOTES

- Removing python2 compatibility imports
- Removing ordered loading (obsolete) function

ENDRELEASENOTES

Fixes #292 ",True,293,https://api.github.com/repos/AIDASoft/podio/pulls/293,https://github.com/AIDASoft/podio/pull/293,closed,7,39,6,7,1,1,0,0,[],2022-05-31 14:06:31+00:00,2022-06-02 08:56:38+00:00,154207.0,"1 day, 18:50:07","[{'comment_id': 885756882, 'comment_body': '```suggestion\r\n\r\n\r\n```\r\n\r\nSee: https://github.com/AIDASoft/podio/runs/6672607205?check_suite_focus=true#step:4:272', 'comment_created': datetime.datetime(2022, 5, 31, 15, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}]","[{'commit_sha': 'ef04a3c3f67a667b173bb48bf14b3136135fb649', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43bd9b8512b0d46c882b3d1ee2704f4b190face0', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae9341026361e79a2012f262e3e18e66ce9aeb2c', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f32760b5e3733482df87ec967c2ef809c6c1a902', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '518642a5c4817dc1043e281223d26cedbdf8acc1', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ba89bf42276b8a136a7270018162240fa2742a', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6ce6010eeb81c8d8d351f76bc861311b116151e', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}]",,71919921,,User,,31,,11,11
957036690,running pre-commit locally,"BEGINRELEASENOTES
- Add instructions on how to run pre-commit locally to the documentation

ENDRELEASENOTES",True,296,https://api.github.com/repos/AIDASoft/podio/pulls/296,https://github.com/AIDASoft/podio/pull/296,closed,10,0,1,3,1,0,0,0,[],2022-06-03 05:10:10+00:00,2022-06-14 09:52:03+00:00,967313.0,"11 days, 4:41:53",[],"[{'commit_sha': '2facaf4eca92f9b7fc6eb888947db3dba8f144fc', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38824d85f19a510c4786e850301b57aa5e482ba1', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14636c62a75c283ad9319afc9d3b861784ccd7c9', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}]",,71919921,,User,,31,,11,11
986768466,Julia preprocessing,"
BEGINRELEASENOTES
- Adding a julia include (include_jl) in the dictionary passed to the fill_templates

ENDRELEASENOTES",True,311,https://api.github.com/repos/AIDASoft/podio/pulls/311,https://github.com/AIDASoft/podio/pull/311,closed,204,12,6,18,7,20,0,0,[],2022-07-04 19:25:52+00:00,2022-08-16 06:51:04+00:00,3669912.0,"42 days, 11:25:12","[{'comment_id': 913466418, 'comment_body': '```suggestion\r\n\t{{ member.name }}::{{ member.julia_type }}\r\n```\r\nThis is not really necessary and also not written down anywhere, but for the other templates we tried to follow this style where we had spaces before/after the `{{`/`}}`. It is slightly more readable, and in languages that use `{}` it makes it slightly easier to spot what is a template replacement and what is not.', 'comment_created': datetime.datetime(2022, 7, 5, 7, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 913473580, 'comment_body': 'Is this necessary? Respectively can you use the generated files with this? I am asking because as far as I can see there is no `XYZCollection.jl` that we generate here(?)', 'comment_created': datetime.datetime(2022, 7, 5, 7, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 913481016, 'comment_body': ""Is this necessary? In the templates I don't see that we use `includes_data_jl`"", 'comment_created': datetime.datetime(2022, 7, 5, 7, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 913481904, 'comment_body': 'Does the `_sort_includes` work as expected with the Julia includes?', 'comment_created': datetime.datetime(2022, 7, 5, 7, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 913490405, 'comment_body': '```suggestion\r\n\t{{relation.name}}::Vector{ {{ relation.julia_type }} }\r\n```\r\nSince we can have an arbitrary number of relations here', 'comment_created': datetime.datetime(2022, 7, 5, 7, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 914214639, 'comment_body': 'I see they are used in the templates now. Is there a reason why they have to go to a different list than the usual `includes_jl`?', 'comment_created': datetime.datetime(2022, 7, 5, 21, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 914627565, 'comment_body': 'I think they can go in the same list. I will change it in the next commit.', 'comment_created': datetime.datetime(2022, 7, 6, 9, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'soumilbaldota', 'type': 'User'}, {'comment_id': 941067260, 'comment_body': '```suggestion\r\n  def _get_julia_params(self, datatype):\r\n```\r\nJust to make it clear that this is necessary for Julia.\r\n\r\nCould you also put a docstring here that very briefly explains what this function does and why it is necessary?', 'comment_created': datetime.datetime(2022, 8, 9, 8, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 941072619, 'comment_body': 'Can we initialize this with another default (that makes sense)?', 'comment_created': datetime.datetime(2022, 8, 9, 8, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 943098024, 'comment_body': 'I have already included the docstring.', 'comment_created': datetime.datetime(2022, 8, 11, 5, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'soumilbaldota', 'type': 'User'}, {'comment_id': 943101369, 'comment_body': 'we can initialize it using other methods but, undef is better due to [better perfmance](https://stackoverflow.com/questions/58430581/julia-what-is-undef-in-array-in-julia) as it just allocates the memory required instead of initializing each variable.', 'comment_created': datetime.datetime(2022, 8, 11, 5, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soumilbaldota', 'type': 'User'}, {'comment_id': 943165672, 'comment_body': ""That is a very good point. I didn't think about that."", 'comment_created': datetime.datetime(2022, 8, 11, 7, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 943167720, 'comment_body': '```suggestion\r\n    """"""Get the relations as parameteric types for MutableStructs""""""\r\n    params = set()\r\n    for relation in datatype[\'OneToManyRelations\'] + datatype[\'OneToOneRelations\']:\r\n```\r\nJust to make the docstring a bit more clear. \r\nAlso I am not sure we actually discussed this during prototyping, but looking at the code now, I just realize that the `VectorMembers` are not needed here, because they can only be builtin types, or components. This means that there should really be no way to end up with a cyclic dependency.', 'comment_created': datetime.datetime(2022, 8, 11, 7, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 943168070, 'comment_body': 'Ah right, Looks like I was just commenting while you were fixing the pre-commit issue for the docstring.', 'comment_created': datetime.datetime(2022, 8, 11, 7, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 943197692, 'comment_body': '```suggestion\r\n                           \'struct\': self._get_member_includes(definition[""Members""], julia=True)}\r\n    data[\'is_pod\'] = self._is_pod_type(definition[\'Members\'])\r\n```\r\nThis should fix the c++ warnings you see, as `is_pod` needs to be available at the top level in the templates', 'comment_created': datetime.datetime(2022, 8, 11, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 944262673, 'comment_body': '```suggestion\r\n  @staticmethod\r\n  def _get_julia_params(datatype):\r\n```\r\nEasy fix for the pre-commit complaint', 'comment_created': datetime.datetime(2022, 8, 12, 9, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 945471375, 'comment_body': '```suggestion\r\n@testset ""Julia Bindings"" begin\r\n```\r\nJust a slightly less generic way', 'comment_created': datetime.datetime(2022, 8, 15, 7, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 945475646, 'comment_body': ""```suggestion\r\n\treturn {{ class.bare_type }}{% if params_jl %}{ {{ params_jl | join(',') }} }{% endif %}(\r\n```\r\nI just realized that this can probably be simplified like suggested. This makes this template slightly more readable and has the additional advantage that we are not left with a trailing comma.\r\n\r\nWe are already using it in a few places, e.g. here, where we even pick out an attribute for each element of the list:\r\nhttps://github.com/AIDASoft/podio/blob/a8efda986f776892e90e7aafa4958aaf18a1e6c7/python/templates/macros/declarations.jinja2#L62"", 'comment_created': datetime.datetime(2022, 8, 15, 7, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 945475902, 'comment_body': ""```suggestion\r\n{{ class.bare_type }}Collection = Vector{ {{ class.bare_type }}{% if params_jl %}{ {{ params_jl | join(',') }} }{% endif %} }\r\n```"", 'comment_created': datetime.datetime(2022, 8, 15, 7, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 945477697, 'comment_body': ""```suggestion\r\nmutable struct {{ class.bare_type }}{% if params_jl %}{ {{ params_jl | join('T, ') }} }{% endif %}\r\n```"", 'comment_created': datetime.datetime(2022, 8, 15, 7, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}]","[{'commit_sha': '3d32f2bcc4ca6fcd937bd299c448fc3383b48094', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff772cc24eff47066312992e5654f4c5401b13a3', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d69a71ef8c421ef99009cd408e13a13d66ab7f', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae66dce1096b1c61bad3b84a12e1678f1593ce3', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c08b5e1ff4da8dfba16d989865b409853b2c3360', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f16b29133219cb76a593187bc90dcf40b0d8c3c4', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a96381aa8a5bb396d94b74ef73fa7f4990dae7ee', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b40167ab71b368fffa032022296afb1ec1af5a77', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114e6079412cb3d6af8ba6817f7e6fc931babf63', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7892d83d4ea7d9ecc8793dfe3fbadd8863ca2ca9', 'committer_username': 'tmadlener', 'committer_name': 'Thomas Madlener', 'committer_email': None, 'commit_date': datetime.datetime(2016, 1, 19, 9, 22, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb7075d141516620aafa1b63e7d0fb210f34a50', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6814d7ede4b0c21a6c2abb9d3af0059fd2be43', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0f0b3d687d288966f3c87b673e3e5e3ffdd1f5', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655030640750dbfdb1736bfef1c3a7eef3458afe', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47706db80b480e6b39bef63be2b770039d3dd243', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45681814c0d14c8c64e7578b3c0765928f5a55c6', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fabd47109f6de9f45c21348e2f15ca94b9def904', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2446ffac6bc729e3ceed170b07a7ff50910853', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}]",,71919921,,User,,31,,11,11
1032097697,adding namespaces ,"
BEGINRELEASENOTES
- adding namespaces to julia code generation
ENDRELEASENOTES",True,325,https://api.github.com/repos/AIDASoft/podio/pulls/325,https://github.com/AIDASoft/podio/pull/325,closed,143,31,9,12,8,9,0,0,[],2022-08-21 18:04:07+00:00,2022-09-01 07:04:06+00:00,910799.0,"10 days, 12:59:59","[{'comment_id': 953485534, 'comment_body': 'If I remember correctly a very similar macro already exists in the `MutableStruct.jl.jinja2` template(?). Is it possible to combine both macros into one and place it into a `macros/julia.jinja2` file and simply import that here? It would probably have to take more arguments to deal with the different pre- and suffixes.', 'comment_created': datetime.datetime(2022, 8, 24, 8, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 953488494, 'comment_body': ""```suggestion\r\n{{ class.bare_type }}Collection = Vector{ {{ class.bare_type }}{% if params_jl %}{ {{ params_jl | join(', ') }} }{% endif %} }\r\n```\r\nFor consistency with how it is done in the constructors"", 'comment_created': datetime.datetime(2022, 8, 24, 8, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 953489329, 'comment_body': 'What is the purpose of this, since there is also a `Collection.jl.jinja2` template now?', 'comment_created': datetime.datetime(2022, 8, 24, 8, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 953490991, 'comment_body': 'Is it possible to bring the `ExampleMCCollection` here via `using .ExampleMCModule: ExampleMC, ExampleMCCollection`?', 'comment_created': datetime.datetime(2022, 8, 24, 8, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 954046136, 'comment_body': 'simply doing  `include(""ExampleMCCollection"")` works as of now which also makes the ExampleMC. We can call both ExampleMCCollection( ) and ExampleMC( ) directly.\r\nSince we are bringing the Module out from its namespace anyway in the Collection, we do not explicitly need to include ExampleMC. so L1 and L2 can be removed.\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 24, 16, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'soumilbaldota', 'type': 'User'}, {'comment_id': 954046450, 'comment_body': '`Collection.jl.jinja2` was a mistake.', 'comment_created': datetime.datetime(2022, 8, 24, 16, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soumilbaldota', 'type': 'User'}, {'comment_id': 954048684, 'comment_body': '`Collection.jl.jinja2` was a mistake.', 'comment_created': datetime.datetime(2022, 8, 24, 16, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'soumilbaldota', 'type': 'User'}, {'comment_id': 954605641, 'comment_body': '```suggestion\r\n{{ class.bare_type }}Collection = Vector{ Main.{{ class.bare_type }}Struct{{ params.julia_parameters(params_jl, prefix=""Main."", suffix=""Struct"") }} }\r\n```\r\nNot strictly necessary, but it just makes it very explicit and slightly more readable without having to go to the macro definition.', 'comment_created': datetime.datetime(2022, 8, 25, 7, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}, {'comment_id': 956194146, 'comment_body': 'The functionality of getting a namespace and the class from the string definition is already handled by `generator_utils._get_namespace_class`. You could either call that directly, like:\r\n```suggestion\r\n     parent_namespace, child  = generator_utils._get_namespace_class(component_name)\r\n```\r\nor even easier potentially, simply convert it to a `DataType` and then query that for the namespace and the bare_type, like:\r\n```suggestion\r\ncomponent = DataType(component_name)\r\nparent_namespace, child = component.namespace, component.bare_type\r\n```\r\nThis way we would only have one place where this functionality is defined.', 'comment_created': datetime.datetime(2022, 8, 26, 16, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tmadlener', 'type': 'User'}]","[{'commit_sha': '0995757e510aebe55facc8ab99414cf6a344a9c2', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4de0893ca69c94ff453524fe218f076f432c3b1', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d89ecd308412b1112ebd74d88d6fae9d19efdb', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367bf50ed29a26b4185e2e6159bf0dbde0fbc6a8', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde25bb55147b28cffc3b10201e5915b84a9bffb', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5674bdccce87da9616dfaf710bbc77127453ead', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1995da5d0625a756f12748ed073a03de0cc6ce18', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8b6b48041f6524e44a636cca96fe4f93875dc10', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e07f68b0ca076ee8497f2849992d5a7954d2ef0', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50c83a5039a915b5de261c16f7276a399e07ca18', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2b230d63f0deaceada8dbf1b728e2d5e7f374bf', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ba97ead14b81b3e37d2ac1ea1037741f259d66', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}]",,71919921,,User,,31,,11,11
1045620494,add documentation,Add Julia documentation,True,329,https://api.github.com/repos/AIDASoft/podio/pulls/329,https://github.com/AIDASoft/podio/pull/329,closed,10,0,1,4,4,0,0,0,[],2022-09-04 04:29:20+00:00,2022-09-26 12:35:05+00:00,1929945.0,"22 days, 8:05:45",[],"[{'commit_sha': '4f831d865361ef35225d7a6db3efec140f258d1d', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5c56a30c0f76c92cc37c5d4f31bfed5e5f1a236', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde1b8b0272d9c9de6d3d2582f479c2efff59576', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a6d8610f7d6990894c47aa6aa83e9c287076cb5', 'committer_username': 'soumilbaldota', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 26, 7, 6, 3, tzinfo=datetime.timezone.utc)}]",,71919921,,User,,31,,11,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
24058163,podio,AIDASoft/podio,C++,57,23,15,31,1109,50,22,14,"[{'id': 1045620494, 'number': 329, 'closed': datetime.datetime(2022, 9, 26, 12, 35, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 4, 29, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1929945.0, 'time_delta': '22 days, 8:05:45', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 1045619733, 'number': 328, 'closed': datetime.datetime(2022, 9, 4, 4, 22, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 4, 21, 40, tzinfo=datetime.timezone.utc), 'time_taken': 21.0, 'time_delta': '0:00:21', 'additions': 152, 'deletions': 31, 'state': 'closed'}, {'id': 1032097697, 'number': 325, 'closed': datetime.datetime(2022, 9, 1, 7, 4, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 21, 18, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 910799.0, 'time_delta': '10 days, 12:59:59', 'additions': 143, 'deletions': 31, 'state': 'closed'}, {'id': 986768466, 'number': 311, 'closed': datetime.datetime(2022, 8, 16, 6, 51, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 4, 19, 25, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3669912.0, 'time_delta': '42 days, 11:25:12', 'additions': 204, 'deletions': 12, 'state': 'closed'}, {'id': 981474632, 'number': 310, 'closed': datetime.datetime(2022, 7, 3, 7, 23, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 14, 16, 32, tzinfo=datetime.timezone.utc), 'time_taken': 407241.0, 'time_delta': '4 days, 17:07:21', 'additions': 52, 'deletions': 1, 'state': 'closed'}, {'id': 957036690, 'number': 296, 'closed': datetime.datetime(2022, 6, 14, 9, 52, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 3, 5, 10, 10, tzinfo=datetime.timezone.utc), 'time_taken': 967313.0, 'time_delta': '11 days, 4:41:53', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 952018943, 'number': 293, 'closed': datetime.datetime(2022, 6, 2, 8, 56, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 31, 14, 6, 31, tzinfo=datetime.timezone.utc), 'time_taken': 154207.0, 'time_delta': '1 day, 18:50:07', 'additions': 7, 'deletions': 39, 'state': 'closed'}, {'id': 949943820, 'number': 291, 'closed': datetime.datetime(2022, 5, 30, 9, 49, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 28, 6, 21, 47, tzinfo=datetime.timezone.utc), 'time_taken': 185277.0, 'time_delta': '2 days, 3:27:57', 'additions': 5, 'deletions': 5, 'state': 'closed'}]"
