pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
869693458,Add correct links in developer guide,"Hello maintainers, I was going through the documentation and found some of the links which pointed to the wrong places. Hopefully, this PR fixes that. 

I have been following CERN for quite some time and kudos to all the superb work that has been done.

Looking forward to contributing more towards phoenix!

Thanks.
",True,409,https://api.github.com/repos/HSF/phoenix/pulls/409,https://github.com/HSF/phoenix/pull/409,closed,4,4,2,1,1,0,0,0,[],2022-03-02 15:39:23+00:00,2022-03-02 18:33:48+00:00,10465.0,2:54:25,[],"[{'commit_sha': '51c4a2157e2e7426281007a39cb0e30718889ae7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
870327723,Add 'start' clipping angle as well as opening angle,"Fixes: https://github.com/HSF/phoenix/issues/248

I have added a `startClippingValue` property which controls the opening angle of the cutaway in the range [0 - 45°]. The existing slider still goes up to a max of 180° and starts at `startClippingValue`.

Please see the GIF below:

![object-clipping-phoenix](https://user-images.githubusercontent.com/62954367/156524366-7918f422-aade-4da9-a0ee-63211afd79db.gif)

Please let me know if something needs to change. Your feedback is highly appreciated.

Thanks.",True,410,https://api.github.com/repos/HSF/phoenix/pulls/410,https://github.com/HSF/phoenix/pull/410,closed,140,40,8,9,22,24,0,0,[],2022-03-03 08:19:27+00:00,2022-03-31 17:20:54+00:00,2451687.0,"28 days, 9:01:27","[{'comment_id': 819789229, 'comment_body': ""Not sure if what you are doing here is correct. With this, you will be doing the same thing as the statement above. `onUpdate` here is a callback, that gives the updated value of `clippingEnabled` when it is updated. And the updated value in this line is `startClippingValue` which is a `boolean`.\r\n\r\nYou might have confused the `clippingValue` above as being the angle value of the clipping while it's just a `boolean` for whether the clipping is enabled or not.\r\n\r\n`clippingEnabled` is an object of `ActiveVariable` as [mentioned here](https://github.com/HSF/phoenix/blob/9fe72146140ec228b1cab60f8e171ee5c7f786e7/packages/phoenix-event-display/src/managers/state-manager.ts#L16) which basically means that it's a variable whose updates can be observed. Which is what we are doing in this case."", 'comment_created': datetime.datetime(2022, 3, 4, 17, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 820236963, 'comment_body': ""> You might have confused the `clippingValue` above as being the angle value of the clipping while it's just a `boolean` for whether the clipping is enabled or not.\r\n\r\nYes, that is right. 😅 \r\n\r\n> `clippingEnabled` is an object of `ActiveVariable` as [mentioned here](https://github.com/HSF/phoenix/blob/9fe72146140ec228b1cab60f8e171ee5c7f786e7/packages/phoenix-event-display/src/managers/state-manager.ts#L16) which basically means that it's a variable whose updates can be observed. Which is what we are doing in this case.\r\n\r\nGot it. 👌Thanks a lot."", 'comment_created': datetime.datetime(2022, 3, 6, 13, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 835298213, 'comment_body': 'NIT: Rename to `changeStartClippingAngle`', 'comment_created': datetime.datetime(2022, 3, 25, 14, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 835421575, 'comment_body': 'Sure, my bad. ', 'comment_created': datetime.datetime(2022, 3, 25, 16, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 838816266, 'comment_body': 'Typo: `setStartClippingAngle`', 'comment_created': datetime.datetime(2022, 3, 30, 17, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 838820707, 'comment_body': 'We should rename this to `setOpeningAngleClipping` for consistency.', 'comment_created': datetime.datetime(2022, 3, 30, 17, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 838820933, 'comment_body': 'We should rename this to `getOpeningAngleClipping` for consistency.', 'comment_created': datetime.datetime(2022, 3, 30, 17, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 838843383, 'comment_body': 'We should rename this variable to `openingAngleSlider` and use `openingAngleSlider.focus()` on line 31.\r\n\r\nSame for the slider above, which should be renamed to `startAngleSlider`.', 'comment_created': datetime.datetime(2022, 3, 30, 18, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 838845258, 'comment_body': 'We should also set the value of `openingClippingAngle` from the state manager.', 'comment_created': datetime.datetime(2022, 3, 30, 18, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 838845455, 'comment_body': 'We should rename this to `openingClippingAngle` for consistency.', 'comment_created': datetime.datetime(2022, 3, 30, 18, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 838850025, 'comment_body': ""We are already adding the start clipping angle's value on line 253 of `packages/phoenix-event-display/src/managers/three-manager/index.ts`. Do we need it here as well?"", 'comment_created': datetime.datetime(2022, 3, 30, 18, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 839247735, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 3, 31, 7, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839247893, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 3, 31, 7, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839248139, 'comment_body': 'sure', 'comment_created': datetime.datetime(2022, 3, 31, 7, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839248394, 'comment_body': 'sure', 'comment_created': datetime.datetime(2022, 3, 31, 7, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839248618, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 3, 31, 7, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839249076, 'comment_body': ""We don't need it now. Removing it."", 'comment_created': datetime.datetime(2022, 3, 31, 7, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839249359, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 3, 31, 7, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839746455, 'comment_body': 'I think this will now become `this.setClipping(0, 180)`.', 'comment_created': datetime.datetime(2022, 3, 31, 15, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 839749766, 'comment_body': ""Sorry, I didn't notice it yesterday. Could you please also add the opening clipping angle to this state?"", 'comment_created': datetime.datetime(2022, 3, 31, 15, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 839752215, 'comment_body': ""We will also need to do the same for the opening clipping angle so the state is properly applied on load.\r\n\r\n```ts\r\nif (jsonData['eventDisplay']?.['openingClippingAngle']) {\r\n  this.eventDisplay\r\n    .getUIManager()\r\n    .rotateOpeningAngleClipping(\r\n      jsonData['eventDisplay']['openingClippingAngle']\r\n    );\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 3, 31, 15, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 839782027, 'comment_body': 'Yes, thanks for pointing it out. ', 'comment_created': datetime.datetime(2022, 3, 31, 16, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839782330, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2022, 3, 31, 16, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 839782888, 'comment_body': 'done ✅', 'comment_created': datetime.datetime(2022, 3, 31, 16, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}]","[{'commit_sha': '21877b6276e2be488e305fb079becabb1936c5bf', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fca7d8a79b963dad5c5d959f843257e0c015b094', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1788560fb3f6a3e2e0862cd7ca12c31779a0c3da', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3255a65a8aa04d6f1a58b7724a10032cdd071e7e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7673435057de21095faa658f618fd1f911238ada', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8336ae568613aa5cc1afc07bf0be5c157940ac2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c5fac913baac2acad09e930274135eea5786a0b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b1754161db803abdf74afcd4d75732f8905503', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc48e0d00e0710cfc58fe3ce3a2f16dd8efc1ca', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
896376143,Fix failing tests for ThreeManager and UIManager for stable CI job,"This PR addresses: https://github.com/HSF/phoenix/runs/5775474777?check_suite_focus=true

Ran checks locally after doing the changes -

![Screenshot 2022-04-01 011840](https://user-images.githubusercontent.com/62954367/161137888-97b8edc2-db94-4565-8925-08d879d33246.jpg)

![Screenshot 2022-04-01 011900](https://user-images.githubusercontent.com/62954367/161137901-2473a4a7-8c5f-4398-8128-fd30db2af8e4.jpg)


Please let me know if something needs to change. 🙂",True,417,https://api.github.com/repos/HSF/phoenix/pulls/417,https://github.com/HSF/phoenix/pull/417,closed,6,5,3,1,1,0,0,0,[],2022-03-31 19:54:51+00:00,2022-03-31 20:06:41+00:00,710.0,0:11:50,[],"[{'commit_sha': '7d8de812d0b4037743bc32679e5e00be4f989385', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
932203165,Update documentation for managers,"Fixes: https://github.com/HSF/phoenix/issues/432  

Please let me know if something else needs to change as well.",True,436,https://api.github.com/repos/HSF/phoenix/pulls/436,https://github.com/HSF/phoenix/pull/436,closed,20,13,1,4,0,16,0,0,[],2022-05-10 09:54:02+00:00,2022-05-11 19:52:18+00:00,122296.0,"1 day, 9:58:16","[{'comment_id': 869570639, 'comment_body': '`event-data` => `event data`', 'comment_created': datetime.datetime(2022, 5, 10, 18, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 869571480, 'comment_body': 'There is no need to specify all these functions. People can take a look at the Phoenix API docs or the code for that.', 'comment_created': datetime.datetime(2022, 5, 10, 18, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 869572815, 'comment_body': ""We don't need to mention this. This is an internal implementation detail. This guide is more of an architectural overview (not entirely but more focused on the higher level)."", 'comment_created': datetime.datetime(2022, 5, 10, 18, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 869574408, 'comment_body': 'I think the added `,` is not needed here.', 'comment_created': datetime.datetime(2022, 5, 10, 18, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 869575750, 'comment_body': ""I don't think there is a need to mention the color options. It is more like a helper for the `PhoenixMenuUI`."", 'comment_created': datetime.datetime(2022, 5, 10, 18, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 869576572, 'comment_body': 'I think `PhoenixUI` should come before mentioning its implementations `DatGUIMenuUI` and `PhoenixMenuUI`.', 'comment_created': datetime.datetime(2022, 5, 10, 18, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 870101523, 'comment_body': 'Grammarly 🤖', 'comment_created': datetime.datetime(2022, 5, 11, 9, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 870102147, 'comment_body': ""I think we are keeping it short and readable. I'll remove these."", 'comment_created': datetime.datetime(2022, 5, 11, 9, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 870102578, 'comment_body': 'Got it. ', 'comment_created': datetime.datetime(2022, 5, 11, 9, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 870103729, 'comment_body': '🤦', 'comment_created': datetime.datetime(2022, 5, 11, 9, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 870104219, 'comment_body': 'Sure, removing it.', 'comment_created': datetime.datetime(2022, 5, 11, 9, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 870104565, 'comment_body': 'done. ✅', 'comment_created': datetime.datetime(2022, 5, 11, 9, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 870326977, 'comment_body': 'This line is out of context now. Instead of this, we can write something like:\r\n\r\n```\r\n`PhoenixUI` currently has the following implementations:\r\n```', 'comment_created': datetime.datetime(2022, 5, 11, 13, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 870328938, 'comment_body': ""`ColorOptions`* is not an implementation of the `PhoenixUI` interface, so we don't need to have it here. We can add it as a sub-heading of `UIManager` or as a sentence at the end of the `UIManager` description."", 'comment_created': datetime.datetime(2022, 5, 11, 13, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 870361523, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 5, 11, 14, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 870361956, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 5, 11, 14, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}]","[{'commit_sha': '989bd91eeed6848dcef0025443ae58ece11a73e2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20580f974845f95b08eefb96ed69c84b133a6aa2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccbd5fc97cbd553f269b7062ed02f6f5fa5632f7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac465e93494bcbcc4f5d81eaaca5a9084c0671a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
932239423,Fix failing tests for ThreeManager,"Context: https://github.com/HSF/phoenix/pull/435#issuecomment-1122124434

Although, that one got fixed. I'm still seeing one more error here in the `phoenix-ng` package:   
`Chrome Headless 101.0.4951.54 (Windows 10) IoOptionsDialogComponent should handle zipped event data FAILED`.  

After this change, full stack trace 👇  

```  
$ lerna run test:coverage
lerna notice cli v4.0.0
lerna info Executing command in 2 packages: ""yarn run test:coverage""
phoenix-ng: $ rimraf ./coverage && ng test phoenix-ui-components --no-watch --code-coverage --no-progress --browsers=ChromeHeadlessCI --source-map=false
phoenix-event-display: $ yarn test
phoenix-event-display: $ karma start configs/karma.conf.js --browsers=ChromeHeadlessCI
phoenix-event-display: DATETIME:INFO [compiler.karma-typescript]: Compiling project using Typescript 4.5.5
phoenix-event-display: DATETIME:INFO [compiler.karma-typescript]: Compiled 61 files in 9589 ms.
phoenix-ng: 10 05 2022 16:28:33.996:INFO [karma-server]: Karma v6.3.16 server started at http://localhost:9877/
phoenix-ng: 10 05 2022 16:28:33.999:INFO [launcher]: Launching browsers ChromeHeadlessCI with concurrency unlimited
phoenix-ng: 10 05 2022 16:28:34.019:INFO [launcher]: Starting browser ChromeHeadless
phoenix-ng: 10 05 2022 16:28:34.739:INFO [Chrome Headless 101.0.4951.54 (Windows 10)]: Connected on socket wwQk2bhiHVbzfv8WAAAB with id 84275633
            Chrome Headless 101.0.4951.54 (Windows 10): Executed 3 of 114 SUCCESS (0 secs / 0.444 secs)
            Chrome Headless 101.0.4951.54 (Windows 10) IoOptionsDialogComponent should handle zipped event data FAILED
phoenix-ng:     Error: Timeout - Async function did not complete within 5000ms (set by jasmine.DEFAULT_TIMEOUT_INTERVAL)
phoenix-ng:         at <Jasmine>
            ERROR: 'Error: Invalid file format!'
            ERROR: 'Error: Invalid file format!'
            LOG: 'Processing JiveXML event data'
            LOG: 'WARNING the track collection InDetTrackParticles_xAOD has no line information. Will rely on Phoenix to extrapolate.'
            LOG: 'WARNING the track collection CombinedMuonTrackParticles_xAOD has no line information. Will rely on Phoenix to extrapolate.'
            LOG: 'WARNING the track collection GSFTrackParticles_xAOD has no line information. Will rely on Phoenix to extrapolate.'
            Chrome Headless 101.0.4951.54 (Windows 10): Executed 22 of 114 (1 FAILED) (0 secs / 6.099 secs)
            Chrome Headless 101.0.4951.54 (Windows 10): Executed 30 of 114 (1 FAILED) (0 secs / 6.302 secs)
            ERROR: 'NG0304: 'mat-menu' is not a known element:
phoenix-ng: 1. If 'mat-menu' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'mat-menu' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0304: 'app-menu-toggle' is not a known element:
phoenix-ng: 1. If 'app-menu-toggle' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-menu-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0303: Can't bind to 'matMenuTriggerFor' since it isn't a known property of 'app-menu-toggle'.'
            ERROR: 'NG0303: Can't bind to 'disabled' since it isn't a known property of 'app-menu-toggle'.'
            ERROR: 'NG0303: Can't bind to 'active' since it isn't a known property of 'app-menu-toggle'.'
            ERROR: 'NG0303: Can't bind to 'tooltip' since it isn't a known property of 'app-menu-toggle'.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            ERROR: 'NG0304: 'app-dark-theme' is not a known element:
phoenix-ng: 1. If 'app-dark-theme' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-dark-theme' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0304: 'app-auto-rotate' is not a known element:
phoenix-ng: 1. If 'app-auto-rotate' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-auto-rotate' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0304: 'app-main-view-toggle' is not a known element:
phoenix-ng: 1. If 'app-main-view-toggle' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-main-view-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0304: 'app-animate-event' is not a known element:
phoenix-ng: 1. If 'app-animate-event' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-animate-event' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0304: 'app-animate-camera' is not a known element:
phoenix-ng: 1. If 'app-animate-camera' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-animate-camera' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0304: 'app-experiment-link' is not a known element:
phoenix-ng: 1. If 'app-experiment-link' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-experiment-link' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            LOG: 'THREE.WebGLRenderer: Context Lost.'
            ERROR: 'NG0304: 'app-menu-toggle' is not a known element:
phoenix-ng: 1. If 'app-menu-toggle' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-menu-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            ERROR: 'NG0304: 'app-menu-toggle' is not a known element:
phoenix-ng: 1. If 'app-menu-toggle' is an Angular component, then verify that it is part of this module.
phoenix-ng: 2. If 'app-menu-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
            LOG: 'hi! it's TestNode'
            LOG: 'hi! it's TestNode'
            Chrome Headless 101.0.4951.54 (Windows 10): Executed 114 of 114 (1 FAILED) (9.087 secs / 8.027 secs)
phoenix-ng: TOTAL: 1 FAILED, 113 SUCCESS
phoenix-ng: =============================== Coverage summary ===============================
phoenix-ng: Statements   : 82.4% ( 534/648 )
phoenix-ng: Branches     : 67.21% ( 82/122 )
phoenix-ng: Functions    : 77.27% ( 187/242 )
phoenix-ng: Lines        : 82.39% ( 496/602 )
phoenix-ng: ================================================================================
phoenix-ng: error Command failed with exit code 1.
phoenix-ng: info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
lerna ERR! yarn run test:coverage exited 1 in 'phoenix-ng'
lerna ERR! yarn run test:coverage stdout:
$ rimraf ./coverage && ng test phoenix-ui-components --no-watch --code-coverage --no-progress --browsers=ChromeHeadlessCI --source-map=false
10 05 2022 16:28:33.996:INFO [karma-server]: Karma v6.3.16 server started at http://localhost:9877/
10 05 2022 16:28:33.999:INFO [launcher]: Launching browsers ChromeHeadlessCI with concurrency unlimited
10 05 2022 16:28:34.019:INFO [launcher]: Starting browser ChromeHeadless
10 05 2022 16:28:34.739:INFO [Chrome Headless 101.0.4951.54 (Windows 10)]: Connected on socket wwQk2bhiHVbzfv8WAAAB with id 84275633
Chrome Headless 101.0.4951.54 (Windows 10) IoOptionsDialogComponent should handle zipped event data FAILED
        Error: Timeout - Async function did not complete within 5000ms (set by jasmine.DEFAULT_TIMEOUT_INTERVAL)
            at <Jasmine>
ERROR: 'Error: Invalid file format!'
ERROR: 'Error: Invalid file format!'
LOG: 'Processing JiveXML event data'
LOG: 'WARNING the track collection InDetTrackParticles_xAOD has no line information. Will rely on Phoenix to extrapolate.'
LOG: 'WARNING the track collection CombinedMuonTrackParticles_xAOD has no line information. Will rely on Phoenix to extrapolate.'
LOG: 'WARNING the track collection GSFTrackParticles_xAOD has no line information. Will rely on Phoenix to extrapolate.'
Chrome Headless 101.0.4951.54 (Windows 10): Executed 30 of 114 (1 FAILED) (0 secs / 6.302 secs)
ERROR: 'NG0304: 'mat-menu' is not a known element:
1. If 'mat-menu' is an Angular component, then verify that it is part of this module.
2. If 'mat-menu' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0304: 'app-menu-toggle' is not a known element:
1. If 'app-menu-toggle' is an Angular component, then verify that it is part of this module.
2. If 'app-menu-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0303: Can't bind to 'matMenuTriggerFor' since it isn't a known property of 'app-menu-toggle'.'
ERROR: 'NG0303: Can't bind to 'disabled' since it isn't a known property of 'app-menu-toggle'.'
ERROR: 'NG0303: Can't bind to 'active' since it isn't a known property of 'app-menu-toggle'.'
ERROR: 'NG0303: Can't bind to 'tooltip' since it isn't a known property of 'app-menu-toggle'.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
ERROR: 'NG0304: 'app-dark-theme' is not a known element:
1. If 'app-dark-theme' is an Angular component, then verify that it is part of this module.
2. If 'app-dark-theme' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0304: 'app-auto-rotate' is not a known element:
1. If 'app-auto-rotate' is an Angular component, then verify that it is part of this module.
2. If 'app-auto-rotate' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0304: 'app-main-view-toggle' is not a known element:
1. If 'app-main-view-toggle' is an Angular component, then verify that it is part of this module.
2. If 'app-main-view-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0304: 'app-animate-event' is not a known element:
1. If 'app-animate-event' is an Angular component, then verify that it is part of this module.
2. If 'app-animate-event' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0304: 'app-animate-camera' is not a known element:
1. If 'app-animate-camera' is an Angular component, then verify that it is part of this module.
2. If 'app-animate-camera' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0304: 'app-experiment-link' is not a known element:
1. If 'app-experiment-link' is an Angular component, then verify that it is part of this module.
2. If 'app-experiment-link' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
LOG: 'THREE.WebGLRenderer: Context Lost.'
ERROR: 'NG0304: 'app-menu-toggle' is not a known element:
1. If 'app-menu-toggle' is an Angular component, then verify that it is part of this module.
2. If 'app-menu-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
ERROR: 'NG0304: 'app-menu-toggle' is not a known element:
1. If 'app-menu-toggle' is an Angular component, then verify that it is part of this module.
2. If 'app-menu-toggle' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.'
LOG: 'hi! it's TestNode'
LOG: 'hi! it's TestNode'
Chrome Headless 101.0.4951.54 (Windows 10): Executed 114 of 114 (1 FAILED) (9.087 secs / 8.027 secs)
TOTAL: 1 FAILED, 113 SUCCESS

=============================== Coverage summary ===============================
Statements   : 82.4% ( 534/648 )
Branches     : 67.21% ( 82/122 )
Functions    : 77.27% ( 187/242 )
Lines        : 82.39% ( 496/602 )
================================================================================
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
lerna ERR! yarn run test:coverage stderr:
error Command failed with exit code 1.
lerna ERR! yarn run test:coverage exited 1 in 'phoenix-ng'
lerna WARN complete Waiting for 1 child process to exit. CTRL-C to exit immediately.
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```

Your thoughts? Is this a priority fix for us? 🤔",True,437,https://api.github.com/repos/HSF/phoenix/pulls/437,https://github.com/HSF/phoenix/pull/437,closed,3,2,1,1,3,0,0,0,[],2022-05-10 10:30:13+00:00,2022-05-10 19:31:02+00:00,32449.0,9:00:49,[],"[{'commit_sha': '854685a6e92060ff3a336e04a7e31752b257c8be', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
974058232,Add unit tests for lib and helpers,"Code coverage would be low as of now and will be improved in due time. Also, I've noticed that testing static methods doesn't increase coverage at all. Need to find a workaround for that as well. ",True,462,https://api.github.com/repos/HSF/phoenix/pulls/462,https://github.com/HSF/phoenix/pull/462,closed,312,111,13,17,4,8,0,0,[],2022-06-21 20:00:48+00:00,2022-06-24 17:14:43+00:00,249235.0,"2 days, 21:13:55","[{'comment_id': 905241314, 'comment_body': 'This is the same as the first test case. Do we need to test something different here?', 'comment_created': datetime.datetime(2022, 6, 23, 16, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 905243015, 'comment_body': ""The values will be reset by default. What we can do here is first assign the values and then reset them.\r\n\r\n```ts\r\nit('should reset the values', () => {\r\n  model.minValue = 10;\r\n  model.maxValue = 20;\r\n\r\n  model.reset();\r\n\r\n  expect(model.minValue).toBe(0);\r\n  expect(model.maxValue).toBe(1);\r\n});\r\n```"", 'comment_created': datetime.datetime(2022, 6, 23, 16, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 905245085, 'comment_body': ""NIT: `it('should get the group containing the camera for XR', () => {});`"", 'comment_created': datetime.datetime(2022, 6, 23, 16, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 905245502, 'comment_body': ""NIT: `it('It should end the current XR session', () => {});`"", 'comment_created': datetime.datetime(2022, 6, 23, 16, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 905252671, 'comment_body': 'missed that. 😅', 'comment_created': datetime.datetime(2022, 6, 23, 16, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 905252820, 'comment_body': 'Sure, changing...', 'comment_created': datetime.datetime(2022, 6, 23, 16, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 905252955, 'comment_body': 'This will be updated along with the unit tests for `managers`.', 'comment_created': datetime.datetime(2022, 6, 23, 16, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 905253134, 'comment_body': 'This will be updated along with the unit tests for `managers`.', 'comment_created': datetime.datetime(2022, 6, 23, 16, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}]","[{'commit_sha': '159d473386e45d7f9ba8da91fc50661c2b57c0aa', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c807fdb4de8730720d9feca3ed3a266f964997bf', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb8c0913d15ee9862a6576e746e9f6205813406', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '740a4bacc9bc9fd0a74b49bedc46893aa81d7050', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b9b04d6634d33bbc147e2e960697c008ea09da', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c04fa37f3d7c4b47ffc395df003638a7d04b33', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35fb726b65e705bf2121565b4fe26af9d2417dd6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e83057f41a230f19747d5df924d3021ab0ef31e2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f28262f69fc1c4b02b1c7a49eba2af072750e49', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeecd11eb6aebf98d4417581e3692319f4b71442', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc51ec29f70a6751578b2a9075b35cd384bfa49', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a652cd77fd1097104c3e89cd655d4741598636', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108e4791ff21ca3670b7c21888b4f89cae5ed249', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d7c95a77b23b945b47ff28521e39d41df4d348c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197e56900de7c32af99d03188c772f36da726d6c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b816295f5cd573bf7c9e5a40234c783fdcec47', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df38724e939fab281249a0701f91c4d380a955a0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
985501295,Add unit tests for loaders and managers,"Please let me know if any test case needs improvement among the ones added in this PR.

This PR will precede a PR that will try and improve unit test cases in individual files for the whole of the `phoenix-event-display` module since the testing suite for `phoenix-event-display` is almost complete. This whole testing suite is written primarily keeping in mind to test behaviors correctly and to be easily maintainable by developers in the future.

Also, `three-manager/index.ts` and `ui-manager/index.ts` have `WebGLRenderer` as one of their dependency so that's messing things in their tests as when I mock these classes, by default, their objects are `undefined`. Need to find a way to test these two.",True,473,https://api.github.com/repos/HSF/phoenix/pulls/473,https://github.com/HSF/phoenix/pull/473,closed,1903,37,22,61,5,92,0,0,[],2022-07-02 10:31:10+00:00,2022-07-15 17:30:10+00:00,1148340.0,"13 days, 6:59:00","[{'comment_id': 912364427, 'comment_body': ""We don't use `npm` but `yarn` instead. So this file is not needed."", 'comment_created': datetime.datetime(2022, 7, 2, 13, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912364780, 'comment_body': '* If the function returns a group, we can check if the correct objects exist inside it. And then check if the objects are instances of the correct class. For example, `expect(object).toBeInstanceOf(Mesh)`\r\n* If the function returns an object, we can check if the objects are instances of the correct class.\r\n\r\nSame comments for `phoenix-objects.test.ts`:', 'comment_created': datetime.datetime(2022, 7, 2, 13, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912365469, 'comment_body': ""NIT: Technically speaking, we don't get them as geometries but as objects. In most cases, it's a `Mesh` and a `Mesh` is created by a combination of geometry and material.\r\n\r\nA more accurate test case would be:\r\n\r\n```\r\nit('should create a Jet from the given parameters and get it as an object')\r\n```"", 'comment_created': datetime.datetime(2022, 7, 2, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912365699, 'comment_body': ""We create different types of hits based on the parameters. So the test should cover that the right hits are being created.\r\n\r\n```ts\r\nswitch (type) {\r\n  case 'Point':\r\n    return PhoenixObjects.hitsToPoints(\r\n      pointPos,\r\n      hitsParams,\r\n      hitsParamsClone\r\n    );\r\n  case 'Line':\r\n    return PhoenixObjects.hitsToLines(\r\n      pointPos,\r\n      hitsParams,\r\n      hitsParamsClone\r\n    );\r\n  case 'Box':\r\n    return PhoenixObjects.hitsToBoxes(\r\n      pointPos,\r\n      hitsParams,\r\n      hitsParamsClone\r\n    );\r\n  default:\r\n    console.log('ERROR: Unknown hit type!');\r\n    return;\r\n}\r\n```\r\n\r\nSee source code for more details."", 'comment_created': datetime.datetime(2022, 7, 2, 13, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366106, 'comment_body': ""I think this assertion is redundant. We are calling the function in the previous statement and just checking here if it's called. We should test if it actually loads the object types specified in the event data."", 'comment_created': datetime.datetime(2022, 7, 2, 14, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366282, 'comment_body': 'I have the same comments for all the other test cases in this suite. We are not testing anything here. We need to assert that the correct methods are called internally in these functions.\r\n\r\nAnd if the functions return anything, that return value should be asserted.', 'comment_created': datetime.datetime(2022, 7, 2, 14, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366412, 'comment_body': 'This also just asserts if the previous statement executed. If you call a function, it is going to be called, there is no need to assert that here.\r\n\r\nWhat we need to assert here is that the script is correctly loaded in the DOM.', 'comment_created': datetime.datetime(2022, 7, 2, 14, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366455, 'comment_body': ""Same comment here. All these test cases don't test anything."", 'comment_created': datetime.datetime(2022, 7, 2, 14, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366734, 'comment_body': 'This is redundant. The correct way to assert that the loading was finished would be to add a load listener (`jest.fn()`) using `addLoadListener` and make sure that the load listener/callback was called.', 'comment_created': datetime.datetime(2022, 7, 2, 14, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366787, 'comment_body': 'Same here. We need to add a callback/progress listener and see if it was called when the progress changed.', 'comment_created': datetime.datetime(2022, 7, 2, 14, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366885, 'comment_body': ""All of the remaining test cases in this suite including this one shouldn't be needed. If you are testing the behavior you check if the listeners were correctly called when the loading of all items was completed. Which I suggested in my previous comments."", 'comment_created': datetime.datetime(2022, 7, 2, 14, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912366969, 'comment_body': 'This is a special case, so we will need a different test case for this where we have the loading manager in a state where all items have loaded and then check if the callback/listener is immediately called even if we add the listener after the items have loaded.', 'comment_created': datetime.datetime(2022, 7, 2, 14, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912367022, 'comment_body': 'This test case is redundant.', 'comment_created': datetime.datetime(2022, 7, 2, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912368059, 'comment_body': ""Here's how I would test it:\r\n\r\n```ts\r\nit('should call the listeners when all items have loaded', () => {\r\n  const callback = jest.fn();\r\n  loadManager.addLoadListener(callback);\r\n  loadingManager.addLoadableItem('item');\r\n  loadingManager.itemLoaded('item');\r\n  expect(callback).toHaveBeenCalled();\r\n});\r\n```"", 'comment_created': datetime.datetime(2022, 7, 2, 14, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 912515231, 'comment_body': 'Thanks! Right ✅', 'comment_created': datetime.datetime(2022, 7, 3, 17, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 912531878, 'comment_body': 'very helpful.', 'comment_created': datetime.datetime(2022, 7, 3, 20, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 913127612, 'comment_body': ""Here are some places in `phoenix-objects.ts` where it's written in the comments - `get it as a geometry`:\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L36\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L132\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L196\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L388\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L491\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L491\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L585\r\n- https://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L585\r\n\r\nShould I change those lines to `get it as the <required> object`?"", 'comment_created': datetime.datetime(2022, 7, 4, 16, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 913222126, 'comment_body': ""I'm trying to use `hitsParams` as -\r\n```\r\nconst hitsParams = {\r\n      pos: [\r\n        [\r\n          -2446.784912109375, -2425.1064453125, 7826.09912109375,\r\n          -2446.784912109375, -1.1222461462020874, 7826.09912109375,\r\n        ],\r\n        [\r\n          -2448.534912109375, -2425.1064453125, 7826.09912109375,\r\n          -2448.534912109375, -1.1222461462020874, 7826.09912109375,\r\n        ],\r\n        [\r\n          -2446.784912109375, -2425.1064453125, 7826.09912109375,\r\n          -2446.784912109375, -1.1222461462020874, 7826.09912109375,\r\n        ],\r\n      ],\r\n    };\r\n```\r\n\r\nbut getting `No hits! Aborting from getHits` in console due to -\r\n```\r\nif (hitsParams.length > 0) {\r\n--- logic ----\r\n} else {\r\n      console.log('No hits! Aborting from getHits.');\r\n      return new Object3D();\r\n}\r\n```\r\n\r\nI took these as `pos` from the FTHits collection here: https://hepsoftwarefoundation.org/phoenix/#/lhcb. Can I please get an example of hits that can be used? "", 'comment_created': datetime.datetime(2022, 7, 4, 18, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 913238058, 'comment_body': 'Yes, please do. LGTM.\r\n', 'comment_created': datetime.datetime(2022, 7, 4, 19, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 913238972, 'comment_body': 'You will find the structure of most of the event data objects here: <https://github.com/HSF/phoenix/tree/master/packages/phoenix-ng/projects/phoenix-app/src/assets/files/event_data>\r\n\r\nThe Phoenix JSON format of event data is also documented here on a higher level (users manual): <https://github.com/HSF/phoenix/blob/master/guides/users.md#event-data>\r\n\r\nHope this helps.', 'comment_created': datetime.datetime(2022, 7, 4, 19, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 913243637, 'comment_body': 'FTHits are of the following format:\r\n\r\n```json\r\n{\r\n  ""EventRun"": {\r\n    ""Hits"": {\r\n      ""HitsCollection/FTHits"": [\r\n        {\r\n          ""type"": ""Line""\r\n          ""pos"": [2, 10, 30, 40]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nYou can check the event data here for the format: <https://github.com/HSF/phoenix/blob/656bcb8e1a98122bd52afcee940a72a14fc8a7c7/packages/phoenix-ng/projects/phoenix-app/src/assets/files/lhcb/LHCbEventData.json>\r\n\r\nThis creates a `Line` type hit as specified in the event data itself. See <https://github.com/HSF/phoenix/blob/656bcb8e1a98122bd52afcee940a72a14fc8a7c7/packages/phoenix-event-display/src/loaders/objects/phoenix-objects.ts#L262>\r\n\r\n> I\'m trying to use hitsParams as\r\n\r\nThe `hitsParams` you are trying to use don\'t have the correct format. `hitsParams` is expected to be an array of objects. The correct format would be:\r\n\r\n```json\r\n{\r\n  ""EventRun"": {\r\n    ""Hits"": {\r\n      ""HitsCollection"": [\r\n        [2, 10, 30],\r\n        [2, 10, 30]\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis has a default type of `Point`.', 'comment_created': datetime.datetime(2022, 7, 4, 19, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 913245933, 'comment_body': 'In general, you can copy paste the simplest data from event data files we have in the assets: <https://github.com/HSF/phoenix/tree/656bcb8e1a98122bd52afcee940a72a14fc8a7c7/packages/phoenix-ng/projects/phoenix-app/src/assets/files>\r\n\r\nSome of them will have the ""Hits"" data type and under it custom named collections (I shared a link to the users manual which should help you understand what I mean). You can check these event data to understand the formats `hitsParams` should be in.', 'comment_created': datetime.datetime(2022, 7, 4, 19, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 913263873, 'comment_body': 'Thanks a lot!', 'comment_created': datetime.datetime(2022, 7, 4, 20, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915012576, 'comment_body': ""I don't think there is any need to assert all these properties. I don't see any value in it.\r\n\r\nJust checking the name of the object and the type should be enough."", 'comment_created': datetime.datetime(2022, 7, 6, 16, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915013186, 'comment_body': 'And I say that for all the tests which have these assertions.', 'comment_created': datetime.datetime(2022, 7, 6, 16, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915016888, 'comment_body': ""Example test case:\r\n\r\n```ts\r\nit('should process the Muon Chamber from the given parameters', () => {\r\n  const muonChamberParams = {\r\n    front_1: [0, 0, 0],\r\n    front_2: [1, 0, 0],\r\n    front_3: [1, 1, 0],\r\n    front_4: [0, 1, 0],\r\n    back_1: [0, 0, 1],\r\n    back_2: [1, 0, 1],\r\n    back_3: [1, 1, 1],\r\n    back_4: [0, 1, 1],\r\n  };\r\n\r\n  const muonChamber = CMSObjects.getMuonChamber(muonChamberParams);\r\n\r\n  expect(muonChamber.children.length).toBe(2);\r\n  expect(muonChamber.children[0].type).toBe('Mesh');\r\n  expect(muonChamber.children[0].name).toBe('MuonChamber');\r\n  expect(muonChamber.children[1].type).toBe('LineSegments');\r\n});\r\n```"", 'comment_created': datetime.datetime(2022, 7, 6, 16, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915019220, 'comment_body': ""The types `Point`, `Line`, `Box` and `Unknown` could have their own test cases.\r\n\r\nFor example: `it('should create Hits of Point type from the given parameters and get it as an object')`"", 'comment_created': datetime.datetime(2022, 7, 6, 16, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915023994, 'comment_body': ""Asserting `userData` is a good idea since we use it on the app side.\r\n\r\nI will suggest to use Jest's [`toMatchObject`](https://jestjs.io/docs/expect#tomatchobjectobject) for checking if the desired object has the necessary properties. Instead of asserting each property separately, we can then use an object."", 'comment_created': datetime.datetime(2022, 7, 6, 16, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915038808, 'comment_body': ""According to the test case description `'should take an object that represents one event and add the different objects to the graphics library and the UI controls'`, the expected behavior is that the relevant methods of graphics library and UI controls are called. But I don't see the assertions for them here.\r\n\r\nI think a better way to test this `buildEventData` function would be to check if the scene has the objects. Just doing basic checks in the scene for collections should be enough. By basic, I mean we should just check if groups of collections we specified in the input event data exist in the scene.\r\n\r\nThe hierarchy of groups and objects (from parent to children) works this way:\r\n\r\n```\r\nMain Three.js Scene > Event Data Group > Event Data Type Group > Collection Group > Event Data Objects\r\n```\r\n\r\nYou can execute code like this in console in a running Phoenix instance to see the hierarchy of objects:\r\n\r\n![image](https://user-images.githubusercontent.com/36920441/177598537-bdb1aaa8-1d84-4062-aa05-ce938543460a.png)\r\n\r\nWe can get the event data in the tests with:\r\n\r\n```ts\r\nconst eventDataGroup = this.graphicsLibrary\r\n  .getSceneManager()\r\n  .getScene()\r\n  .getObjectByName(SceneManager.EVENT_DATA_ID);\r\n```"", 'comment_created': datetime.datetime(2022, 7, 6, 16, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915048741, 'comment_body': 'This doesn\'t seem to be the correct format of event data. It looks more like an event data object parameters.\r\n\r\nWould be great if you could check the event data again to understand the Phoenix format better: [atlaseventdump2.json](https://github.com/HSF/phoenix/blob/master/packages/phoenix-ng/projects/phoenix-app/src/assets/files/event_data/atlaseventdump2.json)\r\n\r\nHere\'s the simplest structure:\r\n\r\n```js\r\n{\r\n  ""Event Name (Could be anything)"": {\r\n    ""event number"": 234,\r\n    ""run number"": 234,\r\n    ""Event Data Type (Tracks, Hits etc.)"": {\r\n      ""Event Data Collection (Could be anything)"": [/* Array of event data object parameters. These are the parameters used in PhoenixObjects functions. */]\r\n    }\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 16, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915050698, 'comment_body': 'This should get the correct list if we create `PhoenixLoader` with the right event data like I mentioned above.', 'comment_created': datetime.datetime(2022, 7, 6, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915051990, 'comment_body': 'Same comment for the functions below. They are testing one condition but not other one which has the main behavior. That is, getting information from the event data.', 'comment_created': datetime.datetime(2022, 7, 6, 16, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915053486, 'comment_body': ""Just use some random script url like `abc` or something. What we need to test is that the script tag is being added to the DOM. Even if the script is not evaluated, it shouldn't matter to us."", 'comment_created': datetime.datetime(2022, 7, 6, 16, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915056315, 'comment_body': ""I am not sure if Jest's `jsdom` environment gives us the ability to query the DOM, but if it does, we can await this promise and ideally check if the script exists in the DOM. `document.querySelector('script[src=abc]');`.\r\n\r\nOtherwise, we can spy on and check if `parentElement.appendChild` was called which is the same as checking if the element was added to the DOM."", 'comment_created': datetime.datetime(2022, 7, 6, 16, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915060881, 'comment_body': ""I don't think there's a need for this if condition (L40 onwards). This `callback` was called at L38. Just moving this assertion at L39 should be enough."", 'comment_created': datetime.datetime(2022, 7, 6, 16, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915062538, 'comment_body': 'Since this uses singleton pattern, we can write a test to make sure we get the same instance each time we create the object.\r\n\r\n```ts\r\nexpect(new StateManager()).toBe(stateManager);\r\nexpect(StateManager.getInstance()).toBe(stateManager);\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 16, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915065578, 'comment_body': 'I think we are missing tests for saving and loading the state which are the most important responsibilities of this module/class.\r\n\r\nJust a hint that for `saveStateAsJSON`, you can use a mock for `saveFile` and check if the mock was called with the right arguments.', 'comment_created': datetime.datetime(2022, 7, 6, 16, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915070373, 'comment_body': ""I don't think there is a need to check all these properties. We just need to assert if the composer contains the outline pass after we add it to the composer."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915072510, 'comment_body': 'This does not test the functionality correctly. We need to make sure that the `cameraLight` has the position of `camera`.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915074381, 'comment_body': ""We need to check here that the clean scene doesn't contain the ignored objects type. No need to check for `up`, `position` and `scale` properties."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915076029, 'comment_body': ""Just this assertion is enough. We are trying to add a group named 'object' into the `EventData` group and this asserts that we do."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915076953, 'comment_body': 'I think we should instead assert there that the scene does not contain the event data group. The assertion right now does not test the intended behavior.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915077451, 'comment_body': 'This does not assert the intended behavior.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915079953, 'comment_body': 'I think this assertion is irrelevant of the behavior to be tested.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915080898, 'comment_body': 'This is defined anyway without calling `getActiveObjectId`. I think this assertion is irrelevant of the behavior to be tested.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915081997, 'comment_body': ""This test case does not assert anything. Which means it doesn't test anything. You can spy on `navigator.xr` to check if the relevant methods were called."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915083465, 'comment_body': 'This does not test anything. It should be tested if `this.currentXRSession?.end()` was called.', 'comment_created': datetime.datetime(2022, 7, 6, 17, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915085597, 'comment_body': ""You are setting the values in the test case and testing the same thing. So this doesn't feel to me like you are testing the source function.\r\n\r\nWhat you need to do is create a camera, pass it down to the function and make sure the returned value has the right properties based on the given input camera.\r\n\r\nTesting needs full understanding of source code."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915087263, 'comment_body': ""Just assert what we expect as we mention it in the test case statement. We don't need to check each property of the object. This is true for all the other tests you wrote as well."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915089020, 'comment_body': ""I think this does not test the intended behavior. We can pass in a mock label node of type `PhoenixMenuNode` and make sure that it's `remove` method was called."", 'comment_created': datetime.datetime(2022, 7, 6, 17, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915091106, 'comment_body': 'There are other main public methods that seem to be not tested?', 'comment_created': datetime.datetime(2022, 7, 6, 17, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915232537, 'comment_body': 'For me, `navigator.xr` is undefined as `WebXR` is not available. I hence, cannot spy on `requestSession()`. \r\n\r\nI also tried using `(navigator as any)?.xr`, but its still `undefined`.\r\n\r\nIs there any other way? 🤔', 'comment_created': datetime.datetime(2022, 7, 6, 20, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915232867, 'comment_body': 'Gotcha! 🙌', 'comment_created': datetime.datetime(2022, 7, 6, 20, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915258274, 'comment_body': 'Sure, done. ✅\r\n\r\nJust this one remains due to `fetch` being unavailable -\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/managers/url-options-manager.ts#L62', 'comment_created': datetime.datetime(2022, 7, 6, 21, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915274681, 'comment_body': 'Right! too many assertions can be an overkill, need to remove them in other files as well. ', 'comment_created': datetime.datetime(2022, 7, 6, 21, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915280827, 'comment_body': 'Try if `window.navigator` works. If not, you can try declaring `navigator` by creating a `global.d.ts` file in `tests/` directory to declare it as a global type.\r\n\r\n```ts\r\ndeclare global {\r\n    interface Window { navigator: any; }\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 21, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915286049, 'comment_body': 'Yes, I tried but due to some reason, this fails -\r\n```\r\n    expect(received).toMatchObject(expected)                                                                                                                         \r\n                                                                                                                                                                     \r\n    - Expected  - 1                                                                                                                                                  \r\n    + Received  + 0                                                                                                                                                  \r\n                                                                                                                                                                     \r\n    @@ -30,8 +30,7 @@\r\n            1,\r\n            1,\r\n            0,\r\n          ],\r\n        ],\r\n    -   ""uuid"": ""8eff2f15-d64f-4167-95a1-f7f936ae5185"",\r\n        ""z0"": 0,\r\n      }\r\n\r\n      60 |     expect(trackObject.children[1].name).toBe(\'Track\');\r\n      61 |\r\n    > 62 |     expect(trackObject.userData).toMatchObject(trackParams);\r\n         |                                  ^\r\n      63 |   });\r\n```\r\npossibly due to addition of uuid\r\n\r\nIndividual ones pass -\r\n\r\n```\r\n    expect(trackObject.userData.pos).toEqual(trackParams.pos);\r\n    expect(trackObject.userData.dparams).toEqual(trackParams.dparams);\r\n    expect(trackObject.userData.extended).toBe(trackParams.extended);\r\n    expect(trackObject.userData.indices).toEqual(trackParams.indices);\r\n    expect(trackObject.userData.phi).toBe(trackParams.phi);\r\n    expect(trackObject.userData.eta).toBe(trackParams.eta);\r\n    expect(trackObject.userData.d0).toBe(trackParams.d0);\r\n    expect(trackObject.userData.z0).toBe(trackParams.z0);\r\n    expect(trackObject.userData.color).toBe(trackParams.color);\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 21, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915312340, 'comment_body': ""Same with `window.navigator`. When I created the file inside /tests with contents -\r\n```\r\nexport {};\r\n\r\ndeclare global {\r\n    interface Window {\r\n      navigator: any;\r\n    }\r\n}\r\n\r\n```\r\n\r\nIt says `All declarations of 'navigator' must have identical modifiers.`"", 'comment_created': datetime.datetime(2022, 7, 6, 22, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915614805, 'comment_body': ""I tried it out and the test can be written this way:\r\n\r\n```ts\r\nit('should set and configure the XR session', () => {\r\n  jest\r\n    .spyOn(xrManager as any, 'onXRSessionStarted')\r\n    .mockImplementation(jest.fn());\r\n  const onSessionStarted = jest.fn();\r\n  const onSessionEnded = jest.fn();\r\n  const requestSessionSpy = jest.fn().mockResolvedValue(Promise.resolve({}));\r\n\r\n  Object.defineProperty(window.navigator, 'xr', {\r\n    value: {\r\n      requestSession: requestSessionSpy,\r\n    },\r\n  });\r\n\r\n  xrManager.setXRSession(renderer, onSessionStarted, onSessionEnded);\r\n  expect(requestSessionSpy).toHaveBeenCalled();\r\n});\r\n```"", 'comment_created': datetime.datetime(2022, 7, 7, 8, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915615897, 'comment_body': 'sure 💯', 'comment_created': datetime.datetime(2022, 7, 7, 8, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915622074, 'comment_body': '`userData` is a subset of `trackParams`. So the order will be reversed.\r\n\r\n```ts\r\nexpect(trackParams).toMatchObject(userData);\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 8, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915625301, 'comment_body': 'Thanks a lot!', 'comment_created': datetime.datetime(2022, 7, 7, 8, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915628568, 'comment_body': 'neat!', 'comment_created': datetime.datetime(2022, 7, 7, 8, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915664801, 'comment_body': ""This is the main issue: `Cannot read properties of undefined (reading 'addLoadableItem')`\r\n\r\nThis method is not callable\r\n\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/managers/url-options-manager.ts#L79"", 'comment_created': datetime.datetime(2022, 7, 7, 9, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 915708299, 'comment_body': ""That's because you are mocking the event display import I think. You can either mock these functions of the event display or use the event display as is (if that works)."", 'comment_created': datetime.datetime(2022, 7, 7, 10, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 915715418, 'comment_body': ""I can't use EventDisplay as it is without mocking due to this dependency hierarchy: `EventDisplay > UIManager > ThreeManager > RendererManager > WebGLRenderer`. By default, `eventDisplay` is undefined due to this."", 'comment_created': datetime.datetime(2022, 7, 7, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 916303757, 'comment_body': '✅ done', 'comment_created': datetime.datetime(2022, 7, 7, 21, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 916883459, 'comment_body': 'Done ✅. Thanks!', 'comment_created': datetime.datetime(2022, 7, 8, 14, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 917129452, 'comment_body': ""Thank you, it's very helpful  ^_^"", 'comment_created': datetime.datetime(2022, 7, 8, 20, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 917129547, 'comment_body': 'Thanks a lot! ^_^', 'comment_created': datetime.datetime(2022, 7, 8, 20, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 917159255, 'comment_body': ""Yes, we can query the DOM but I tried to await for more than 50s, it's not going beyond this callback -\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/loaders/script-loader.ts#L68\r\n\r\nHence, moving on with the latter approach. We can also do check using `document.scripts`."", 'comment_created': datetime.datetime(2022, 7, 8, 21, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 920253043, 'comment_body': ""Isn't this a function?"", 'comment_created': datetime.datetime(2022, 7, 13, 15, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920253511, 'comment_body': ""Isn't this a function?"", 'comment_created': datetime.datetime(2022, 7, 13, 16, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920266443, 'comment_body': 'This constant can be outside of `beforeEach`.', 'comment_created': datetime.datetime(2022, 7, 13, 16, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920268788, 'comment_body': ""You can just use `eventData['Event']['Hits']` instead of defining the object again."", 'comment_created': datetime.datetime(2022, 7, 13, 16, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920274528, 'comment_body': 'I think we can check the metadata as well. It will be:\r\n\r\n```js\r\n[\r\n  {\r\n    label: ""Run / Event"",\r\n    value: ""1 / 1""\r\n  }\r\n]\r\n```\r\n\r\nIf that doesn\'t work, just leave it as it is now.', 'comment_created': datetime.datetime(2022, 7, 13, 16, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920368276, 'comment_body': ""It seems this doesn't check if the collection folder was added or not."", 'comment_created': datetime.datetime(2022, 7, 13, 18, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920372715, 'comment_body': ""This doesn't check if the collection folder/node was added.\r\n\r\nhttps://github.com/HSF/phoenix/blob/master/packages/phoenix-event-display/src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts#L222"", 'comment_created': datetime.datetime(2022, 7, 13, 18, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920500024, 'comment_body': 'Yes ✅', 'comment_created': datetime.datetime(2022, 7, 13, 20, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 920500283, 'comment_body': 'Right now, metadata is just an empty array. 😅', 'comment_created': datetime.datetime(2022, 7, 13, 20, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 920500685, 'comment_body': 'It will be added but yeah this test case is not explicit enough. Removing it.', 'comment_created': datetime.datetime(2022, 7, 13, 20, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 920500846, 'comment_body': ""I wanted to spy on typeFolder.addChild and make sure that it is called but I don't understand why this part does not execute further from here in this function where we find out the collectionNode -   \r\n\r\nhttps://github.com/HSF/phoenix/blob/5ec4ed3fb8818144530e56a5e5fcb4c46ec54557/packages/phoenix-event-display/src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts?rgh-link-date=2022-07-13T18%3A25%3A10Z#L224  \r\n\r\n| >     gets executed\r\n| >> does not get executed\r\n\r\n      >\tconst collectionNode = typeFolder.addChild(\r\n      >\t\t  collectionName,\r\n      >>\t\t  (value: boolean) => {\r\n      >>\t\t    const collectionObject = this.sceneManager\r\n       >>   \t\t   .getObjectByName(SceneManager.EVENT_DATA_ID)\r\n       >>   \t\t   .getObjectByName(collectionName);\r\n       >>\t\t this.sceneManager.objectVisibility(collectionObject, value);\r\n       >>\t    }\r\n   \t\t\t  );\r\nAny idea why? 😅"", 'comment_created': datetime.datetime(2022, 7, 13, 20, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 920586029, 'comment_body': 'Oh, that makes sense. For the piece of code not executed, that is a function which only executes on toggling the node. You can check the `addChild` function docs.\n\nFor checking if the collection node was added, instead of spying on the `addChild`, you could check if the added child is in the tree by using `eventFolder.findInTree`.', 'comment_created': datetime.datetime(2022, 7, 13, 23, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 920846292, 'comment_body': 'cool! 💡', 'comment_created': datetime.datetime(2022, 7, 14, 7, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 921932288, 'comment_body': ""I get it now. It's empty because `buildEventData` accepts a single event not the file which contains multiple events.\r\n\r\nSo I recommend you pass `eventData['Event']` to `phoenixLoader.buildEventData` for this to work."", 'comment_created': datetime.datetime(2022, 7, 15, 8, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 921933841, 'comment_body': ""Once you change the input to `buildEventData` like I suggested in the other comment. This will accept `hitsCollection` and return `eventData['Event']['Hits']['hitsCollection']`.\r\n\r\n```ts\r\nconst expectedCollection = eventData['Event']['Hits']['hitsCollection'];\r\n\r\nconst collection = phoenixLoader.getCollection('hitsCollection');\r\n\r\nexpect(collection).toEqual(expectedCollection);\r\n```"", 'comment_created': datetime.datetime(2022, 7, 15, 8, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 922019397, 'comment_body': 'I pass `eventData[\'Event\']` instead of `eventData` in `buildEventData` which calls `loadObjectTypes`\r\n\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/loaders/phoenix-loader.ts#L65\r\n\r\nwhich calls `addObjectType`\r\n\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/loaders/phoenix-loader.ts#L202\r\n\r\nwhich in turn calls `addCollection` \r\n\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/loaders/phoenix-loader.ts#L443\r\n\r\nand in `addCollection`, I\'m getting an error here at this line -\r\n\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/loaders/phoenix-loader.ts#L503\r\n\r\nwhich says \r\n\r\n```\r\nTypeError: Cannot read properties of undefined (reading \'add\')\r\n\r\n      501 |     }\r\n      502 |\r\n    > 503 |     objectGroup.add(collscene);\r\n          |                 ^\r\n      504 |     // console.log(""-> Adding a threejs group called ""+collscene.name+"" with ""+collscene.children.length+"" children to the group called ""+objectGroup.name);\r\n      505 |   }\r\n      506 |\r\n```\r\n\r\nI do believe this line gets executed\r\n\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/loaders/phoenix-loader.ts#L427\r\n\r\nSo, I\'m not sure why it\'s still `undefined`. Maybe, because `this.graphicsLibrary` is `undefined`.', 'comment_created': datetime.datetime(2022, 7, 15, 10, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 922033701, 'comment_body': ""The constructor doesn't actually initialize the three manager.\r\n\r\nWhat you can do is pass in some basic configuration and initialize the three manager using `ThreeManager.init(config: Configuration)`. That might work."", 'comment_created': datetime.datetime(2022, 7, 15, 10, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 922034550, 'comment_body': 'Or you can pass in an empty object `threeManager.init({})`.', 'comment_created': datetime.datetime(2022, 7, 15, 10, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 922145954, 'comment_body': 'If we use the real `ThreeManager` and initialize it, we know it calls the constructor for the `RendererManager` and this line throws up the error which we have been seeing since the start -\r\n\r\nhttps://github.com/HSF/phoenix/blob/50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8/packages/phoenix-event-display/src/managers/three-manager/renderer-manager.ts#L20\r\n\r\n```\r\nError creating WebGL context.\r\n```\r\n\r\nIn these types of situations, we have to use a mocked ThreeManager (+ its functions) every time we need it in our tests. ', 'comment_created': datetime.datetime(2022, 7, 15, 13, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 922313233, 'comment_body': ""The mock is fine. Looks okay now. But I think one last improvement could be to use the same object but just mock one method.\r\n\r\n```ts\r\nbeforeEach(() => {\r\n  phoenixLoader = new PhoenixLoader();\r\n\r\n  const infoLogger = new InfoLogger();\r\n  const threeManager = new ThreeManager(infoLogger);\r\n  const uiManager = new UIManager(threeManager);\r\n\r\n  jest.spyOn(threeManager, 'addEventDataTypeGroup').mockReturnValue(new Group());\r\n\r\n  phoenixLoader.buildEventData(\r\n    eventData['Event'],\r\n    threeManager,\r\n    uiManager,\r\n    infoLogger\r\n  );\r\n});\r\n```"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 922332072, 'comment_body': 'cool!', 'comment_created': datetime.datetime(2022, 7, 15, 16, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}]","[{'commit_sha': '465eb51fdf3eaf550989d6625a73f5b2bb690a87', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5ab6b847654ec74d5bab47e25ccaf2eb037ce0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9218dda00f14789b57f0e225dfa44ead7c067eb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd5461739fe8f27f4212de23d6ecd9698ec0afb6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6470898fc8d0de342b07bad54d938a425e6f6796', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2fdbec255d3ff2ecf3c67cd5e8d377f0ff512c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81b22c23f4d5d0d7fa83fcf0d23d271dbf85b23', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2885fffde115d43ee1c1511b5611bdbabbc2454b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33dcebd7e67fef3adba53b94ddde7a202612c682', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b163e7c2bfe554bb066811413bcce15afdabb6e8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81bcb404e222bf549cb5fc89871235c676d74b7d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce85609b25b11949c4e538f267127ff7181d7c5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61e1350f14ac709842300facccd96bc20f15b78', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bef4888a4b3fd876639bc3b88e6fd4f4edf08b38', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9721c598705cff44034e3f5c4d6abbfa0b04db7c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed1efdfc4f2469d434d6d2845b4a380a62a3412f', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4f43dec5cf9b463933556ab8c438faa926071ad', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3d1b904cd36159f23635e073805c88cc0dbb400', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e112b225fc43737b48a0006d53a4b59ed63a67f2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81d5f6d7567d9c3f0f90210a25d682ca2e36e664', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '669fbed70d796f0aa07babe5d54c7637ee512f58', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d5c04624108493c655bef9d58117c872b652cf', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddb2bb6140e9308f684ef9b7e212ffb59c369247', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e1d158f724730b5ab9471ef4402a3d3c18f0f3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e62b8fd72a442811887dc252e959e0d4b77a8eb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '607012f8a80ae9d14c4a4c8c4fbbd1a5adc8a4d5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cc03785937fd611883830b05ba664318ac57420', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b54bde0555d616601f06d0c7b283fbe80a1934a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f5548127ea8c5a6e9a31571e8cb7118d3830367', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e96165caab08ad683b7e101697757143ff4c718e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1542558f306f8c81860b788acd0dc1dea45ba0f2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f546e420ecde38a6d26b11743ac11930409d40c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35dd45495948923be47e0ffce83b5ebfe1e26ee6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0732e9c78ce99192c4ca08d35b9ef611bf667d8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb031059e879fc83191350f96c961bf4537589da', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9102bbee3b76a8d373066a2e708dc7bb4fda0604', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49504727a8615f142264ea59bfbfd701005c7e3d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '709654cbb4f779aa784712179d1330655d45500d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0983e77ed871269b24b4f6c645eb4827ab422ff8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f498a77b497a48724bff1a575754cdd27d685a5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5665c4bd28157410b8135fa99c55cef7585c607', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c2a6926d12f4580da261c0a8124a1555f93c1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e7496417742ae07559172b6a86f34a19b7118', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129373be0e97116b9228117c49d44253052b93b4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c2837417f48e5b7cdd827404bc49d37e38bd9b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b73f8cff9f9559d3e4fe53f925cb385befc374b2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ed5356d9ce66403d485fd6a15741b88a357aa5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c688a9da14c2907c1ae87b13f9e8aa47f59757', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a88fde873b176ab160ae9d086d83c15d28f3d9', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c601247dce0be8b3e7c58547a2a751746a3c09b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a647e299ed96b56542b8b922add847ab4a72c997', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a2af316861b04496474b6c44b66ad0e79b688b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d6fb2e6316180bcbdd02c16ea6b12d3ebd7f939', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8119b99cfd087f88b627bd7510a338e60f3e46a3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c10046dcba4daeca7b2621b6c5719c892b9e9a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ff7fe5acaad84555c66a23738eccfd381376899', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe47beb24c1df5f8b3435c8743616e46ff2bb0d0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3832750b556e1b02cf848138d8c080fb077807c0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f3846a147d5d3dd08308ac4d83786f4ded8cdf7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0af34e11da2461a9142c1b54296f7335d2bd7a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b492e11191989c3df3973e2d676d8661fac464', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
1008203706,Use Jest for unit testing in phoenix-ng - I,"As we discussed currently, most of the tests fail due to this:

```
    ../phoenix-event-display/src/managers/three-manager/controls-manager.ts:307:21 - error TS2339: Property 'Tween' does not exist on type '_Group'.  

    307           new TWEEN.Tween(camera.position)
                            ~~~~~
    ../phoenix-event-display/src/managers/three-manager/controls-manager.ts:417:21 - error TS2339: Property 'Tween' does not exist on type '_Group'.  

    417         ? new TWEEN.Tween(camera)
                            ~~~~~
    ../phoenix-event-display/src/managers/three-manager/controls-manager.ts:418:21 - error TS2339: Property 'Tween' does not exist on type '_Group'.  

    418         : new TWEEN.Tween(camera.position);
```

After this gets fixed, we can improve other test cases and fix other problems here.

Was not able to run the tests keeping jest config in root as it gave a lot of ""module not found errors"" and also some weirdos like: 

```
TypeError: pathsToModuleNameMapper is not a function
```
or
```
import { pathsToModuleNameMapper } from 'ts-jest';
^^^^^^

SyntaxError: Cannot use import statement outside a module
```
or
```
$ jest --no-cache --config ../../jest.config.js app.component
● Validation Error:

  Preset jest-preset-angular not found.  <= although it's there!
```

@9inpachi, I liked what you suggested but I think we should use different config files each for `phoenix-event-display` and `phoenix-ng` 
due to the Jest config options specific to Angular setting: `preset`, `globalSetup`, `moduleNameMapper`, `setupFilesAfterEnv`, etc but maybe I'm wrong regarding this and those errors can be fixed anyways, we'll check.",False,491,https://api.github.com/repos/HSF/phoenix/pulls/491,https://github.com/HSF/phoenix/pull/491,closed,1724,796,71,5,8,0,0,0,[],2022-07-26 08:21:08+00:00,2022-07-26 19:55:12+00:00,41644.0,11:34:04,[],"[{'commit_sha': 'b80a7c304e2fcabda94f82906cf310b5dd29279a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69e6b0b984dae2cdc099d673dbfaa0bd6bada11', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142583e429e0bb6bb970d622cf952f696cc60683', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb46ac8a4142e967d910fcaa93119c1df70da37', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c48e2f017e0f45c7e36f448622182e8e4d325a2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
1018270874,Use Jest for unit tests in Phoenix,Closes: https://github.com/HSF/phoenix/issues/457,True,492,https://api.github.com/repos/HSF/phoenix/pulls/492,https://github.com/HSF/phoenix/pull/492,closed,6222,3613,118,224,13,70,0,0,[],2022-08-05 05:35:04+00:00,2022-10-03 16:59:43+00:00,5138679.0,"59 days, 11:24:39","[{'comment_id': 939068693, 'comment_body': 'For testing of components, does Jest require a different configuration?\r\n\r\nFor example here, the component uses a number of other components which are imported by importing the `AppModule` which specifies all these components and services. Is Jest rendering those components as part of this test where we only mock the event display service now?', 'comment_created': datetime.datetime(2022, 8, 5, 18, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939079839, 'comment_body': ""It seems this is removed because we mock the event display now.\r\n\r\nIs there not a way to use the event display service as is? We should ideally be able to test the the component does what it's supposed to do, that is, display a canvas and load an event on it."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939087977, 'comment_body': '`toBeFalsy()` and `toBe(false`/`toBeFalse()` have different behaviors. Here we want to test that the `open` property is definitely `false`, so I think we should use one of the latter. Because `toBeFalsy()` is also true in case of `undefined` and `null` (or even `0`).', 'comment_created': datetime.datetime(2022, 8, 5, 18, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939089406, 'comment_body': 'Same comment for other usages that appear later.', 'comment_created': datetime.datetime(2022, 8, 5, 18, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939092106, 'comment_body': ""I think this is more of a TypeScript thing and there's no logic that can be tested here."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939096829, 'comment_body': 'These two variables seem to not have been used anywhere?', 'comment_created': datetime.datetime(2022, 8, 5, 18, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939101667, 'comment_body': 'Is this not testable now?\r\n\r\nSorry, I just want to understand how Jest is working. It should allow us to test this kind of behavior.', 'comment_created': datetime.datetime(2022, 8, 5, 18, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939102711, 'comment_body': ""Could you please change this to `describe`. It seems like this was set when tests weren't working correctly. It should be reversed now."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939107249, 'comment_body': 'Is there a need for this in the start? If you want to reset the timer, I think there is another function for it.\r\n\r\n`jest.clearAllTimers()`', 'comment_created': datetime.datetime(2022, 8, 5, 18, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939108065, 'comment_body': 'I think we should be able to test component lifecycle hooks. Any idea why does this not work?', 'comment_created': datetime.datetime(2022, 8, 5, 18, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939109306, 'comment_body': 'Can we not use the provider as-is like it was before?', 'comment_created': datetime.datetime(2022, 8, 5, 18, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939110120, 'comment_body': ""We then shouldn't need to mock things in the test case on line 29."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939119650, 'comment_body': ""I think this is just like testing a hard-coded boolean.\r\n\r\n```\r\nconst bool = false;\r\nconst toggledBool = !bool;\r\n\r\nexpect(bool).toBeFalse();\r\nexpect(toggledBool).toBeTrue();\r\n```\r\n\r\nWhich doesn't make sense because we don't test the actual boolean in the component. We can or rather should directly use `component.performanceMode` in assertions."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939123821, 'comment_body': 'Any reason for adding this?', 'comment_created': datetime.datetime(2022, 8, 5, 18, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939136503, 'comment_body': ""Would be great to know what's this needed for."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939528347, 'comment_body': '🤔 I don\'t think any significant difference is there. \r\n\r\n[They say](https://jestjs.io/docs/migration-guide) - ""If you are using Jasmine, or a Jasmine like API (for example [Mocha](https://mochajs.org/)), Jest should be mostly compatible, which makes it less complicated to migrate to.""  \r\n\r\nJest is not rendering those components. Since we only needed a mocked EventDisplayService, I removed this import.', 'comment_created': datetime.datetime(2022, 8, 6, 13, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939528365, 'comment_body': 'My bad, I agree. Changed. ✅', 'comment_created': datetime.datetime(2022, 8, 6, 13, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939528391, 'comment_body': ""If I don't add this, a bit of junk in the console logs\r\n\r\n```\r\nngcc-jest-processor: running ngcc\r\n  console.error\r\n    NG0303: Can't bind to 'matTooltip' since it isn't a known property of 'button'.\r\n\r\n      at logUnknownPropertyError (node_modules/@angular/core/fesm2020/core.mjs:10193:13)\r\n      at elementPropertyInternal (node_modules/@angular/core/fesm2020/core.mjs:10065:17)\r\n      at ɵɵproperty (node_modules/@angular/core/fesm2020/core.mjs:14497:9)\r\n      at UiMenuWrapperComponent_Template (ng:/UiMenuWrapperComponent.js:30:9)\r\n      at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:9647:9)\r\n      at refreshView (node_modules/@angular/core/fesm2020/core.mjs:9510:13)\r\n      at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:10707:13)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 6, 13, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939528422, 'comment_body': 'Not of any importance in our case, removing...', 'comment_created': datetime.datetime(2022, 8, 6, 13, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939528477, 'comment_body': ""If I clear all the timers, it won't call `loadEvent`. But, when I use a fake timer it did."", 'comment_created': datetime.datetime(2022, 8, 6, 13, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939528537, 'comment_body': ""It would have been possible with Jasmine (karma) and Testbed, but IMHO, I don't think we can test Angular services without mocking wrt Jest (jsdom) as we'll get errors. There didn't seem to be another way as I've [seen many people mocking them](https://stackoverflow.com/q/71809333/13616209) in their tests."", 'comment_created': datetime.datetime(2022, 8, 6, 13, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939529011, 'comment_body': 'Right, changing back...', 'comment_created': datetime.datetime(2022, 8, 6, 13, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939529328, 'comment_body': 'It gave errors when I ran those tests using Jest.', 'comment_created': datetime.datetime(2022, 8, 6, 13, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939577055, 'comment_body': 'It does work, not sure why I removed it, maybe before mocking it gave errors.', 'comment_created': datetime.datetime(2022, 8, 6, 21, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939577092, 'comment_body': 'Fixed. ✅ Tysm for pointing this out.', 'comment_created': datetime.datetime(2022, 8, 6, 21, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 939686287, 'comment_body': 'You have to use a fake timer. What I meant was line 45 specifically. My question was if we need this `jest.useRealTimers()` at all. If we are using it for clearing the fake timer, we can use `jest.clearAllTimers()`.', 'comment_created': datetime.datetime(2022, 8, 7, 15, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 939686571, 'comment_body': 'What kind of errors? TBH, the Jest setup should be able to do this otherwise we may be limiting our options in tests.', 'comment_created': datetime.datetime(2022, 8, 7, 15, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 940479146, 'comment_body': ""Rightly said, it's more accurate in terms of the purpose of its usage."", 'comment_created': datetime.datetime(2022, 8, 8, 17, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 940487160, 'comment_body': ""```\r\n    TypeError: Cannot read properties of undefined (reading 'getShaderPrecisionFormat')\r\n\r\n      18 |    */\r\n      19 |   constructor() {\r\n    > 20 |     const renderer: WebGLRenderer = new WebGLRenderer({\r\n         |                                     ^\r\n      21 |       antialias: true,\r\n      22 |       alpha: true,\r\n      23 |       powerPreference: 'high-performance',\r\n\r\n      at new WebGLRenderer (../../node_modules/three/build/three.js:19324:12)\r\n      at new RendererManager (../phoenix-event-display/src/managers/three-manager/renderer-manager.ts:20:37)\r\n      at new ThreeManager (../phoenix-event-display/src/managers/three-manager/index.ts:87:28)\r\n      at new EventDisplay (../phoenix-event-display/src/event-display.ts:55:28)\r\n      at new EventDisplayService (projects/phoenix-ui-components/lib/services/event-display.service.ts:15:5)\r\n      at Object.EventDisplayService_Factory [as factory] (ng:\\EventDisplayService\\ɵfac.js:5:10)\r\n      at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:11509:35)\r\n      at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:11328:33)\r\n      at Object.get (node_modules/@angular/core/fesm2020/core.mjs:21569:44)\r\n      at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3374:39)\r\n      at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3486:12)\r\n      at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:14447:12)\r\n      at NodeInjectorFactory.InfoPanelOverlayComponent_Factory [as factory] (ng:\\InfoPanelOverlayComponent\\ɵfac.js:5:53)\r\n      at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3581:44)\r\n      at instantiateRootComponent (node_modules/@angular/core/fesm2020/core.mjs:10208:23)\r\n      at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12311:23)\r\n      at ComponentFactory.create (node_modules/@angular/core/fesm2020/core.mjs:21668:25)\r\n      at DomPortalOutlet.attachComponentPortal (node_modules/@angular/cdk/fesm2015/portal.mjs:324:45)\r\n      at DomPortalOutlet.attach (node_modules/@angular/cdk/fesm2015/portal.mjs:184:25)\r\n      at OverlayRef.attach (node_modules/@angular/cdk/fesm2015/overlay.mjs:537:49)\r\n      at InfoPanelComponent.ngOnInit (projects/phoenix-ui-components/lib/components/ui-menu/info-panel/info-panel.component.ts:32:37)\r\n      at callHook (node_modules/@angular/core/fesm2020/core.mjs:2558:22)\r\n      at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2527:17)\r\n      at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2478:9)\r\n      at refreshView (node_modules/@angular/core/fesm2020/core.mjs:9525:21)\r\n      at renderComponentOrTemplate (node_modules/@angular/core/fesm2020/core.mjs:9627:9)\r\n      at tickRootContext (node_modules/@angular/core/fesm2020/core.mjs:10881:9)\r\n      at detectChangesInRootView (node_modules/@angular/core/fesm2020/core.mjs:10906:5)\r\n      at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:21519:9)\r\n      at ComponentFixture._tick (node_modules/@angular/core/fesm2015/testing.mjs:140:32)\r\n      at node_modules/@angular/core/fesm2015/testing.mjs:153:22\r\n      at _ZoneDelegate2.invoke (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:409:30)\r\n      at ProxyZoneSpec2.onInvoke (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:3803:43)\r\n      at _ZoneDelegate2.invoke (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:408:56)\r\n      at Object.onInvoke (node_modules/@angular/core/fesm2020/core.mjs:25634:33)\r\n      at _ZoneDelegate2.invoke (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:408:56)\r\n      at Zone3.run (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:169:47)\r\n      at NgZone.run (node_modules/@angular/core/fesm2020/core.mjs:25488:28)\r\n      at ComponentFixture.detectChanges (node_modules/@angular/core/fesm2015/testing.mjs:152:25)\r\n      at projects/phoenix-ui-components/lib/components/ui-menu/info-panel/info-panel.component.test.ts:31:13\r\n      at _ZoneDelegate2.invoke (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:409:30)\r\n      at ProxyZoneSpec2.onInvoke (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:3803:43)\r\n      at _ZoneDelegate2.invoke (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:408:56)\r\n      at Zone3.run (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:169:47)\r\n      at Object.wrappedFunc (../../node_modules/zone.js/bundles/zone-testing-bundle.umd.js:4288:34)\r\n```\r\n\r\nIf we don't mock the service `Overlay`."", 'comment_created': datetime.datetime(2022, 8, 8, 17, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 979218595, 'comment_body': 'This is not needed anymore.', 'comment_created': datetime.datetime(2022, 9, 24, 10, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979227199, 'comment_body': ""It seems this spec doesn't test the statement. This function does a lot of things, so it'd be fine if you decide to skip it.\r\n\r\nIf you want to test it you can use check that the `onAnimationStart` and `onEnd` callbacks are called which isn't ideal but should work."", 'comment_created': datetime.datetime(2022, 9, 24, 11, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979227545, 'comment_body': 'Instead of using `toHaveBeenCalledTimes(1)`, you could just use `toHaveBeenCalled()`.', 'comment_created': datetime.datetime(2022, 9, 24, 11, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979227890, 'comment_body': '`WebGLRenderer` is an unused import.', 'comment_created': datetime.datetime(2022, 9, 24, 11, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979228577, 'comment_body': ""Looks like this method isn't used anywhere. It should be safe to delete and remove the test."", 'comment_created': datetime.datetime(2022, 9, 24, 11, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979369772, 'comment_body': 'I think this does not test the ""removal"" of the label. It just tests that we get the labels group. The proper way would be to add a label to the scene and check afterwards that it\'s removed.\r\n\r\n```ts\r\nconst labelObject = new Object3D();\r\nlabelObject.name = \'label\';\r\nsceneManager.getObjectsGroup(SceneManager.LABELS_ID).add(labelObject);\r\n\r\nsceneManager.removeLabel(\'label\');\r\n\r\nconst labelFromScene = sceneManager.getObjectsGroup(SceneManager.LABELS_ID).getObjectByName(\'label\');\r\nexpect(labelFromScene).toBeFalsy();\r\n```', 'comment_created': datetime.datetime(2022, 9, 25, 7, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979370061, 'comment_body': 'This should actually check if the renderOrder and depthTest of the objects inside the event data group were updated.', 'comment_created': datetime.datetime(2022, 9, 25, 7, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979370364, 'comment_body': 'Just use `toHaveBeenCalled`. No need to check how many times.', 'comment_created': datetime.datetime(2022, 9, 25, 7, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979370501, 'comment_body': ""The spec does not test what's in the statement."", 'comment_created': datetime.datetime(2022, 9, 25, 7, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979370603, 'comment_body': ""The spec does not test what's in the statement. Should check that the scale is actually updated."", 'comment_created': datetime.datetime(2022, 9, 25, 7, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979370900, 'comment_body': ""Can we not mock this for all the tests so we don't have to repeat it across multiple tests? There should be a way to do that."", 'comment_created': datetime.datetime(2022, 9, 25, 7, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979371053, 'comment_body': 'The spec does not test the statement: ""should get the uuid""', 'comment_created': datetime.datetime(2022, 9, 25, 7, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979371240, 'comment_body': 'Already has been mocked.', 'comment_created': datetime.datetime(2022, 9, 25, 7, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979373602, 'comment_body': 'Anything planned here?', 'comment_created': datetime.datetime(2022, 9, 25, 8, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979373608, 'comment_body': 'Anything planned here?', 'comment_created': datetime.datetime(2022, 9, 25, 8, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979375719, 'comment_body': 'Is there a reason we need to mock every event display function? Does calling them through lead to errors?', 'comment_created': datetime.datetime(2022, 9, 25, 8, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979376009, 'comment_body': ""I don't think there is a need to test this. This is only for types which aren't a logical unit."", 'comment_created': datetime.datetime(2022, 9, 25, 8, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979376700, 'comment_body': 'Should be set to true when we are setting the dark theme?', 'comment_created': datetime.datetime(2022, 9, 25, 8, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979376784, 'comment_body': 'Any plan to make this work?', 'comment_created': datetime.datetime(2022, 9, 25, 8, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979377107, 'comment_body': 'Is there any reason to use `mockReturnThis`?', 'comment_created': datetime.datetime(2022, 9, 25, 8, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979377182, 'comment_body': '`toBeTruthy` is different from `toBe(true)`/`toBeTrue()`. I think the latter will be more fitting here.', 'comment_created': datetime.datetime(2022, 9, 25, 8, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979377387, 'comment_body': 'You are trying to fetch a relatively big (in size) event which leads to slower fetch time. Is there is not a way to serve a file locally in jest? If not, then I will recommend using the GitHub URL that points to the test JiveXML file that was being used before.', 'comment_created': datetime.datetime(2022, 9, 25, 8, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 979378501, 'comment_body': 'There are no tests for the event display?', 'comment_created': datetime.datetime(2022, 9, 25, 9, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 980431615, 'comment_body': ""Made it more meaningful. \r\n\r\n```\r\nit('should remove a pass from the effect composer', () => {\r\n    const pass1 = new RenderPass(scene, camera);\r\n    effectsManager.composer.addPass(pass1);\r\n\r\n    const pass2 = new RenderPass(scene, camera);\r\n    effectsManager.composer.addPass(pass2);\r\n\r\n    expect(effectsManager.composer.passes.length).toBe(3);\r\n\r\n    effectsManager.removePass(pass2);\r\n\r\n    expect(effectsManager.composer.passes.length).toBe(2);\r\n  });\r\n```"", 'comment_created': datetime.datetime(2022, 9, 26, 19, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 980432388, 'comment_body': 'Updating these...', 'comment_created': datetime.datetime(2022, 9, 26, 19, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981110258, 'comment_body': '```\r\nTypeError: document.getElementById(...).removeEventListener is not a function\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 27, 11, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981110409, 'comment_body': '🤔', 'comment_created': datetime.datetime(2022, 9, 27, 11, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981112961, 'comment_body': 'I hope to add some along with the `src/managers` one.', 'comment_created': datetime.datetime(2022, 9, 27, 11, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981174428, 'comment_body': 'Yes, the tests for `CMSComponent` and `EventDataExplorerDialogComponent` needs to be fixed inside `phoenix-ng`.', 'comment_created': datetime.datetime(2022, 9, 27, 12, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981178369, 'comment_body': ""Yes, due to this `WebGLRenderer` error -\r\n\r\n```\r\nTypeError: Cannot read properties of undefined (reading 'getShaderPrecisionFormat')\r\n\r\n      18 |    */\r\n      19 |   constructor() {\r\n    > 20 |     const renderer: WebGLRenderer = new WebGLRenderer({\r\n         |                                     ^\r\n      21 |       antialias: true,\r\n      22 |       alpha: true,\r\n      23 |       powerPreference: 'high-performance',\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 12, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981186130, 'comment_body': 'Yes, it was a bit ambiguous. Fixed.', 'comment_created': datetime.datetime(2022, 9, 27, 12, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981187283, 'comment_body': 'Yes, definitely. :D', 'comment_created': datetime.datetime(2022, 9, 27, 12, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981195702, 'comment_body': 'Coverage for the component gets reduced due to this function not being covered.   ', 'comment_created': datetime.datetime(2022, 9, 27, 12, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981200057, 'comment_body': ""Yes, for mocking chained function calls.\r\n\r\n```\r\nTypeError: Cannot read properties of undefined (reading 'attach')\r\n\r\n      30 |     const overlayRef = this.overlay.create();\r\n      31 |     const overlayPortal = new ComponentPortal(InfoPanelOverlayComponent);\r\n    > 32 |     this.overlayWindow = overlayRef.attach(overlayPortal);\r\n         |                                     ^\r\n      33 |     this.overlayWindow.instance.showInfoPanel = this.showInfoPanel;\r\n      34 |\r\n```"", 'comment_created': datetime.datetime(2022, 9, 27, 12, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981348557, 'comment_body': ""```\r\nconst jivexmlData = await fetch('assets/test_data/JiveXML.xml');\r\n```\r\n\r\nWe are using GitHub URL here? 🤔 There is some problem fetching using absolute paths in Jest and since `fetch` is not defined in Node.js, it will require a mock or a polyfill (`whatwg-fetch`, `node-fetch`, `jest-fetch-mock`, to name a few). Still, what can be better?"", 'comment_created': datetime.datetime(2022, 9, 27, 14, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 981649800, 'comment_body': 'The best way would be to use a very simple JiveXML file that contains the most basic event and specify it as a string in the test.\r\n\r\nI think we can request @EdwardMoyse to help us here.\r\n\r\nAnd serving the file as you said is not really an option with jest. I was talking about using the JiveXML file we already have in the assets for tests: <https://github.com/HSF/phoenix/tree/master/packages/phoenix-ng/projects/phoenix-ui-components/lib/assets/test_data>', 'comment_created': datetime.datetime(2022, 9, 27, 19, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 981651249, 'comment_body': ""Oh the `removeEventListener` doesn't exist in the first one. I would recommend to mock both add/removeEventListener on line 75 at the same time."", 'comment_created': datetime.datetime(2022, 9, 27, 19, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 981651681, 'comment_body': 'Could we not mock the three import like we did for the other tests?', 'comment_created': datetime.datetime(2022, 9, 27, 19, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 982731408, 'comment_body': ""Yes, we can and this is an even better way of doing it as we only mock the `WebGLRenderer` and not anything else inside the `event-display` and that's how I planned writing tests for the remaining ones which use `WebGLRenderer` inside `phoenix-event-display`. \r\n\r\nAfter writing those tests, especially the one for `event-display`, I'll remove the mock for `EventDisplayService` inside the `phoenix-ng` tests as we don't need to mock it completely."", 'comment_created': datetime.datetime(2022, 9, 28, 18, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 982732984, 'comment_body': 'Got it. ', 'comment_created': datetime.datetime(2022, 9, 28, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 982738272, 'comment_body': 'Easiest would be to use a new helper file `webgl-mock.ts` and use it every time to import `WebGLRenderer` inside our tests. \r\n\r\n[DRY]  :D', 'comment_created': datetime.datetime(2022, 9, 28, 18, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}]","[{'commit_sha': 'ea3d1f4392cd5f01cf7517b52fd2f032599f1909', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fd4037285bc44c8c17ed36fd4558a5c57b86fb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5395d3d243a7cdbc85a2b305be2cbb3d3709fa85', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '020e327916a5c0d328de152a958ec52836879521', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '159d473386e45d7f9ba8da91fc50661c2b57c0aa', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5da562f86a54d70061125204ece38d3232a9872', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c807fdb4de8730720d9feca3ed3a266f964997bf', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bb8c0913d15ee9862a6576e746e9f6205813406', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '740a4bacc9bc9fd0a74b49bedc46893aa81d7050', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b9b04d6634d33bbc147e2e960697c008ea09da', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c04fa37f3d7c4b47ffc395df003638a7d04b33', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35fb726b65e705bf2121565b4fe26af9d2417dd6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e83057f41a230f19747d5df924d3021ab0ef31e2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f28262f69fc1c4b02b1c7a49eba2af072750e49', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeecd11eb6aebf98d4417581e3692319f4b71442', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc51ec29f70a6751578b2a9075b35cd384bfa49', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a652cd77fd1097104c3e89cd655d4741598636', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108e4791ff21ca3670b7c21888b4f89cae5ed249', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d7c95a77b23b945b47ff28521e39d41df4d348c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197e56900de7c32af99d03188c772f36da726d6c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b816295f5cd573bf7c9e5a40234c783fdcec47', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df38724e939fab281249a0701f91c4d380a955a0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d629e7dbf4432e3f1dd8b9a49466b53ecc0fc8', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465eb51fdf3eaf550989d6625a73f5b2bb690a87', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5ab6b847654ec74d5bab47e25ccaf2eb037ce0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9218dda00f14789b57f0e225dfa44ead7c067eb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd5461739fe8f27f4212de23d6ecd9698ec0afb6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6470898fc8d0de342b07bad54d938a425e6f6796', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2fdbec255d3ff2ecf3c67cd5e8d377f0ff512c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81b22c23f4d5d0d7fa83fcf0d23d271dbf85b23', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2885fffde115d43ee1c1511b5611bdbabbc2454b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33dcebd7e67fef3adba53b94ddde7a202612c682', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b163e7c2bfe554bb066811413bcce15afdabb6e8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81bcb404e222bf549cb5fc89871235c676d74b7d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce85609b25b11949c4e538f267127ff7181d7c5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61e1350f14ac709842300facccd96bc20f15b78', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bef4888a4b3fd876639bc3b88e6fd4f4edf08b38', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9721c598705cff44034e3f5c4d6abbfa0b04db7c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed1efdfc4f2469d434d6d2845b4a380a62a3412f', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4f43dec5cf9b463933556ab8c438faa926071ad', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3d1b904cd36159f23635e073805c88cc0dbb400', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e112b225fc43737b48a0006d53a4b59ed63a67f2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81d5f6d7567d9c3f0f90210a25d682ca2e36e664', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '669fbed70d796f0aa07babe5d54c7637ee512f58', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d5c04624108493c655bef9d58117c872b652cf', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddb2bb6140e9308f684ef9b7e212ffb59c369247', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e1d158f724730b5ab9471ef4402a3d3c18f0f3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e62b8fd72a442811887dc252e959e0d4b77a8eb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '607012f8a80ae9d14c4a4c8c4fbbd1a5adc8a4d5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cc03785937fd611883830b05ba664318ac57420', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b54bde0555d616601f06d0c7b283fbe80a1934a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f5548127ea8c5a6e9a31571e8cb7118d3830367', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e96165caab08ad683b7e101697757143ff4c718e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1542558f306f8c81860b788acd0dc1dea45ba0f2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f546e420ecde38a6d26b11743ac11930409d40c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35dd45495948923be47e0ffce83b5ebfe1e26ee6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0732e9c78ce99192c4ca08d35b9ef611bf667d8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb031059e879fc83191350f96c961bf4537589da', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9102bbee3b76a8d373066a2e708dc7bb4fda0604', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49504727a8615f142264ea59bfbfd701005c7e3d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '709654cbb4f779aa784712179d1330655d45500d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0983e77ed871269b24b4f6c645eb4827ab422ff8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f498a77b497a48724bff1a575754cdd27d685a5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5665c4bd28157410b8135fa99c55cef7585c607', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c2a6926d12f4580da261c0a8124a1555f93c1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b25e7496417742ae07559172b6a86f34a19b7118', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129373be0e97116b9228117c49d44253052b93b4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c2837417f48e5b7cdd827404bc49d37e38bd9b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b73f8cff9f9559d3e4fe53f925cb385befc374b2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ed5356d9ce66403d485fd6a15741b88a357aa5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c688a9da14c2907c1ae87b13f9e8aa47f59757', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a88fde873b176ab160ae9d086d83c15d28f3d9', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c601247dce0be8b3e7c58547a2a751746a3c09b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a647e299ed96b56542b8b922add847ab4a72c997', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a2af316861b04496474b6c44b66ad0e79b688b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d6fb2e6316180bcbdd02c16ea6b12d3ebd7f939', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8119b99cfd087f88b627bd7510a338e60f3e46a3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c10046dcba4daeca7b2621b6c5719c892b9e9a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ff7fe5acaad84555c66a23738eccfd381376899', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe47beb24c1df5f8b3435c8743616e46ff2bb0d0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3832750b556e1b02cf848138d8c080fb077807c0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f3846a147d5d3dd08308ac4d83786f4ded8cdf7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0af34e11da2461a9142c1b54296f7335d2bd7a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b492e11191989c3df3973e2d676d8661fac464', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64cb317051f83d45383137b0720dacd3c9e07603', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '681e9be97954755fe29a13b7c28dc68357ab498d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '077b974926564ceeace8285fba93f47311e5b5be', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d0d335fb8c5da902d859b2b2259901e05907ec', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4973db4481f4e62268134495f78e6b7656916d0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4843be715fcd8199126c30cab6398fd5b122d0f3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58e1645276d12fa95e0cf726ce5b5f16ba2616e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e01fa3eb5940e5bafdcdee809352e3c34300701', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca769e5be753c4d7326f5085032cabf3faf7504', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea7e5aa7d6cbfa3c0668f593045ef475c0f1ee6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd869d053d2b75b9bd158fe09d7d78601f582a13', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a79aa11fdef583b9df77ff9f2d07d0990c0861a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b80a7c304e2fcabda94f82906cf310b5dd29279a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69e6b0b984dae2cdc099d673dbfaa0bd6bada11', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142583e429e0bb6bb970d622cf952f696cc60683', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb46ac8a4142e967d910fcaa93119c1df70da37', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c48e2f017e0f45c7e36f448622182e8e4d325a2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fd47c6533103d1a2e9b06e642654b236ade1863', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '062f714fa57bf8bad602df77f37aa3c6f718e306', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14de840ba4b8a527b6dc73adb9e149544c034404', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206f230c96d8be7abd5f87acdeff45bbaedad7d8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfb4177c818403fac41835ee440721dea15d93be', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad38e74f46480b3cfc8b30e8317db06841332a6f', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97f920c34fdb9568884c406cab627990b0e76848', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426219077e068903f7eb57e05ecf63c258116524', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36f673fef5bf766da202712a883f02db2179734f', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ea8a007c54061445e87766f474fcda91fba996', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1244cb3cd788e74d810e67f042b07b3c932f5019', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a48e95601e48991b91835201286589ba742eafec', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd824989b4061fcb4b18a841eec6b9bf243d4367', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5a30a5746999c0ffe8273745faf57105f11344', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4042cdc10abe1c7ac7ef873df9c4a724465789bf', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b0c8e0d303eaac5728f519aa3c75e6f23161ed0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f2538f2dbc1d577149dd42a0820ba280d8f9fe', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76052d29fa6d5949c9ca3ef9a99f5e18c3386acb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13261acfce8b1b02db6b285f2a83b48aa14fdb51', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4131fc2f65aa90e5c40a76b5856225b6c4a0b0b5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56a13ea2c642d97463b2d18799af79f5c4d56f0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afd22694beda2352e2413f46a727d8379e9e1638', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '826277716d45b7b9f7c521ff11b9f84fcc8308a2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5843efc5e12cc8cdf987fcd9b5a869f8192edf22', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c52093a9e75b2a10e0dd1dc7f8b388b4b628d8bb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a76d5778d548ca440558d378445bfe61096b8692', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da99e3f0122b2e50106d15061ce00647cf693cd8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09555808560fa354700b41c320391d992305a0f1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811c4f18327dc0fc76786bfae38160f73c9d4a5e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e1930d9ede38bb103632e0a1c078e802d7d901a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '162022f0b796b9b18cd1f20d0c1703b6041f3d5e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd646a3b2d4911a47f3506a826a547734553afd6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe2dfd1dc16e6a79b4a1d8b71801d7a103035d92', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb9266b8cfe83e5731a657ece8db07c1e394ce05', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a342d5589c41ec69951f7747c40c247ca9f8a4d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4067bfcd5caae37331edc807dddb235b9a62ec7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19419ff97b8fb17c82b940da3fdf609e8ec490b3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e50d938a59b8b0a41ac607c0e746db2c7bb52d5', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08a9297f8929648b220f7a62b8b580bde213fee9', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf9d10f5355eef94a4c8ff343abcc25abe1fd98', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95dc6f8720a840528ecee51c5d7eea46ea6b5ac7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77307a43b9c9bc3fac1ab9cbc321e1a5671724ba', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c8e8fb2cf0702dc4305fecafdda2468420667d4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b926f3606361e02cefd91873c2163c2717a7d97', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058ad303949602f4389d3b72aefd45693cd29e65', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c975ca6ecfa1ae41a82355c4cc1f073c29aecc', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd24bfa7d729bfa3fbae3b22ed03182eddc4f872', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '219913d7687e543c6a46e4e2b0894729e7a31931', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '357103708054f6cb495800d4582d9e10cc91f15c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0959b5afb9a571e131ebd6c636a143b1de7a77', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c65f3396e0396c67e450bf18d90807f241cf9556', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f9dbdd8d3b91ad4f0ec38cbee804eb0163f0a4a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec466cee7e263a84a586937574c5da10cc1b591b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e43d0d027c74c201a88bba62723a8e27d6c24e1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f465b82f7be3b2b7ea50bdd3d9218a148db40c8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35dac0bacaae2691e7013fdf3ee64671063fe5b9', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a2fcc9724c0e28ed69e0c7b8bb5226506feba95', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f33c531587eec3690e9d8a5931d3e38f9ecc0ec', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e53f76c180a8fd69a5982d1f4b57600fc5622e6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6356bff784a85c326d5af94a691cc0b728acc1a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93604f11080651eb6198bb7dbddba8f889af2eac', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6867f4229878549d48c9bbdeb9c7ad66ef670d3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8738402eacd38565bdccc6cbe1a91f525a56b50', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25fe786d0568fab2cf1c16fc8cb097fd246c3b1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12c23c9187bd3baf10dbf81311c7089e371784e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413565c87b21d9452a1d5cf6c44bca630daf0b88', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f593b1bb581075482207afecdf00f3541133d0', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0224575c721e3b9c28e3eefb5777a4fa9003499c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '780ac44f6b1745439ba62390a9a2e1dcf2c77005', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb0fc759709643925c26bfd5ae04eadc3ed44cf2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad2cb254117ccfc4386c34ce7d7de441d9471c74', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86551e3a253c8e0bcbecd8a133e790e059df9c7d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e4f5d08c6876eb571f32c8640a39c2fc17c7fb7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0ab3cb77980dddeecf683941f5693b527ef274', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9173a60d58ce7513a5a805183153c511e00e1450', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee19f36a2270a1eb99f69b01ca3fe85cf1bdbf25', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e43e0d2b52bf36279aaff3d19bdb25e94499a408', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e2fd11774ab3358b315e7159a45304394a602f3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e21648f2509b4c3cb64971e8de97ce46fa29c34', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a55ae080c47093a7d331a15fc4597f3b3e3087b4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6433ff4fa97c62c061bded52e73c5d2f8f27d9c2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f2f1856d3222708580d32787fcab2cebfb98ca', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63f6746a2206ed293092e99c52243a1d1059cfe', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ad8c0e3e33fcde518cafb309ddfa2646b26b3a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b28b31a5bba06fb8e79019dda22fde826d96d11', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7dfe98aa349cc7742845e3fd0a92dca9538986', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afe328b5e53219488b3c653368c2534047033fe', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45ad1c35b406991bb9fbe46d4eceba9d3b3183e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '160a69cfad97deef89d900f03537b9a4d8e1d9f2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36938a831f2f043eceb2d5e2ad57e9496edc3a18', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdb54e2d210ec47feb30bf9c8f78871a50423e4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f44e6f2baa3fd2997de358d700a6e9119b60c46', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a75e7db558ee5c259deee505eb10cbc1070fc286', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38931ae95928c7c692c840038dc84d4be7dc53cf', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97e6151a14dd9c9bee6af5c11222cc83b573d57', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5f7d00433cb9ead625b8211582f192c34e2ca47', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa39e10e43dde65d352eb21df6bb028f4dcc036b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05e191d6ff9b1d4f01303967ab1d8019dfd46fc3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a18ace8d5600868ee965deefc039778130902d6', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb0f4efae5b2315489d311d5be4a322231c6bbd', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b148422f581230876aac06d458ccc81a1685bb', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93b9bba1b533ef8bdf2abc8e0191132277f3ae30', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e11ba036258af172ef84b2c6574c0ca98c643190', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93bdb1cfb99b6e840544b700092284c21837a3ea', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484d736b4d0032d6086c4c78dc951c371f90701f', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da4fd2678ab9f97bced8dbec810f15bc17a2aabc', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '572e4cde4dadfa76c34d334b4995167cf08bc7a7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6feea36c1a0758c66caefb90da9f70e1e3dd50b4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ecd3deed234ddc87a3a2b7afbf915d06553b5f', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0639cc690653ed5c21808328f0c9a82e9fb084', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '070ae51078aae6a8a6cbc7b0116d1c7c4ebb621a', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3198e8af3f20611abd97b50af3532a0a18140d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3da9cdf5cd89f77fb20e14c011f621a90bb4fdc4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a596303ffb073a3eef5de338ea44858175a8d145', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2894ea4d725aa38157f8ae84273fd6478bf6a0b3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd9e8c341c1086cf60c19a2b88bd594146ffe07', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcb4c8844342cd997d7bd7ba7f9d1d316eb0b602', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '532a87963abd9ccdbedfed9d95f514aaa5a9b97f', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f8abfd0638e8a98d695f85b93acee02798d7f2b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf77536439e32df47bf6311bf02774a2fdb38a84', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4bc844102552feae1f0b9d160586360f8dedb82', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd199e52928b5615a2ee04d2b8cd863cd9d65c791', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d4f4b5c420b79ac1024ebc78995617a4b9a297', 'committer_username': '9inpachi', 'committer_name': 'Fawad Ali', 'committer_email': 'm.fawaadali98@gmail.com', 'commit_date': datetime.datetime(2018, 2, 28, 11, 26, 8, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67
1034057447,Add e2e tests for Phoenix App,"To check, inside `packages/phoenix-ng` type: 
- `yarn cy:open` for interactive browser-based output of the e2e tests.
- `yarn cy:run` for spinning up an electron-based headless browser for CLI output (ref. ss. attached below).

![Screenshot 2022-08-23 165407](https://user-images.githubusercontent.com/62954367/186147336-4d3d9482-52ac-4915-a417-7b2028ecdd83.jpg)

If something needs to be added/changed, please let me know.  ",True,495,https://api.github.com/repos/HSF/phoenix/pulls/495,https://github.com/HSF/phoenix/pull/495,closed,1730,120,45,28,16,34,0,0,[],2022-08-23 11:32:28+00:00,2022-09-06 13:07:28+00:00,1215300.0,"14 days, 1:35:00","[{'comment_id': 954124257, 'comment_body': 'I think you can remove it if nothing has to go here.', 'comment_created': datetime.datetime(2022, 8, 24, 18, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954125051, 'comment_body': ""This is not necessary and it does not test anything. I have already pointed out several times that please don't write redundant tests that don't test anything."", 'comment_created': datetime.datetime(2022, 8, 24, 18, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954154489, 'comment_body': 'This visiting to the ATLAS experiment should be done in the next test.', 'comment_created': datetime.datetime(2022, 8, 24, 18, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954162410, 'comment_body': 'Please remove this file. Looks like it came straight out of a tutorial.', 'comment_created': datetime.datetime(2022, 8, 24, 18, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954167545, 'comment_body': 'You can get the `baseUrl` from config and use that.\r\n\r\n```\r\nCypress.config().baseUrl\r\n```', 'comment_created': datetime.datetime(2022, 8, 24, 18, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954170730, 'comment_body': ""This entire test only tests if elements exist on the page. It's a screenshot test rather than an e2e test. Use [Cypress snapshots plugin](https://github.com/meinaart/cypress-plugin-snapshots) instead here."", 'comment_created': datetime.datetime(2022, 8, 24, 18, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954171236, 'comment_body': 'All the other tests are not needed for this experiment then.', 'comment_created': datetime.datetime(2022, 8, 24, 18, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954173695, 'comment_body': ""Please make sure to take notes of things I have already mentioned earlier. I feel like the previous rounds of reviews (which I think were sufficiently detailed) haven't helped much."", 'comment_created': datetime.datetime(2022, 8, 24, 18, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954177109, 'comment_body': 'I have the same comments for all the other experiments/pages.\r\n\r\n- packages/phoenix-ng/cypress/e2e/cms.cy.ts\r\n- packages/phoenix-ng/cypress/e2e/geometry.cy.ts\r\n- packages/phoenix-ng/cypress/e2e/lhcb.cy.ts\r\n- packages/phoenix-ng/cypress/e2e/playground.cy.ts\r\n- packages/phoenix-ng/cypress/e2e/trackml.cy.ts\r\n', 'comment_created': datetime.datetime(2022, 8, 24, 18, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954178363, 'comment_body': 'Just take a single image snapshot instead of writing all these tests which just check if elements exist.', 'comment_created': datetime.datetime(2022, 8, 24, 18, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954183894, 'comment_body': 'This is the only test I see that tests some behavior/flow. All the other tests are unnecessarily checking if elements exist. Those tests are more screenshot tests than e2e tests.\r\n\r\nPlease see this [VERY BASIC DEFINITION](https://www.browserstack.com/guide/end-to-end-testing#:~:text=End%20to%20end%20testing%20(E2E%20testing)%20refers%20to%20a%20software%20testing%20method%20that%20involves%20testing%20an%20application%E2%80%99s%20workflow%20from%20beginning%20to%20end.%20This%20method%20basically%20aims%20to%20replicate%20real%20user%20scenarios%20so%20that%20the%20system%20can%20be%20validated%20for%20integration%20and%20data%20integrity.) of what e2e tests actually are.\r\n\r\nI again feel like we have totally side tracked from what actual tests should look like.', 'comment_created': datetime.datetime(2022, 8, 24, 18, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 954220533, 'comment_body': 'Sure, I will.', 'comment_created': datetime.datetime(2022, 8, 24, 19, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 954220922, 'comment_body': 'There are 2 options here:\r\n\r\n- adding it inside a `beforeEach` which can be taxing on the amount of time it takes loading the atlas experiment before each `it`.\r\n- take it out of `it` which gives an error: `Cannot call cy.visit() outside a running test`.\r\n\r\nMy motive here is to make sure it loads this page before we test the things.', 'comment_created': datetime.datetime(2022, 8, 24, 19, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 954221918, 'comment_body': ""Sure, I will if we don't need to test any JSON-based input. 🤔"", 'comment_created': datetime.datetime(2022, 8, 24, 19, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 954222168, 'comment_body': ""> unnecessarily checking if elements exist\r\n\r\nRight. Instead of checking for elements in DOM, I should make sure to check whether they are visible or not and use the screenshot plugin.\r\nhttps://docs.cypress.io/guides/tooling/visual-testing#Functional-vs-visual-testing\r\n\r\n> what e2e tests actually are.\r\n\r\nI was not sure earlier up to what extent I should test the workflow. But, I'm adding more scenarios now. 👍"", 'comment_created': datetime.datetime(2022, 8, 24, 19, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 954223443, 'comment_body': ""> Use [Cypress snapshots plugin](https://github.com/meinaart/cypress-plugin-snapshots) instead here.\r\n\r\nSure, I'll use it instead of checking for DOM elements."", 'comment_created': datetime.datetime(2022, 8, 24, 19, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 954239128, 'comment_body': ""It'll be better to put it inside a `before` hook. "", 'comment_created': datetime.datetime(2022, 8, 24, 19, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 957669082, 'comment_body': 'Unfortunately, the order of these buttons could change depending on if the geometry or event data loads first.\r\n\r\nMaybe you can use a selector like this:\r\n\r\n```ts\r\ncy.get(""app-phoenix-menu"").contains(""Event Data"").closest("".item-expand"");\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 18, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957670713, 'comment_body': 'If you can, the best approach would be to add `data-testid`s to Phoenix menu items. But that will need some changing in the Phoenix menu code which could be complex.', 'comment_created': datetime.datetime(2022, 8, 29, 18, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957672015, 'comment_body': 'You can scope this first: `cy.get(""app-phoenix-menu"").contains(\'Tracks\').should(\'exist\');`\r\n\r\nThis is true for the 4 selectors here. Because `Tracks` is a word that could appear somewhere else later if we add something.', 'comment_created': datetime.datetime(2022, 8, 29, 18, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957673738, 'comment_body': 'You could also create a function:\r\n\r\n```ts\r\nconst getPhoenixMenuItem = (itemName: string) => {\r\n  return cy.get(""app-phoenix-menu"").contains(itemName);\r\n}\r\n\r\ngetPhoenixMenuItem(""Event Data"").closest("".item-expand"").click();\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 18, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957674073, 'comment_body': 'The above comments are for all selections in Phoenix menu.', 'comment_created': datetime.datetime(2022, 8, 29, 18, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957675823, 'comment_body': ""Scoping the selector would be better than using the index: `cy.get('app-ui-menu').find('app-dark-theme').`."", 'comment_created': datetime.datetime(2022, 8, 29, 18, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957678167, 'comment_body': '**Try to scope all the selectors that use `contains` or if possible, avoid using `contains` as a selector.** It seems very prone to breaking tests later on.', 'comment_created': datetime.datetime(2022, 8, 29, 18, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957678699, 'comment_body': 'Again, scope the selector.', 'comment_created': datetime.datetime(2022, 8, 29, 18, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957680688, 'comment_body': ""I can't classify which type of test this would be. I don't think we need it. I would recommend removing it."", 'comment_created': datetime.datetime(2022, 8, 29, 18, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 957682858, 'comment_body': ""Does this produce the same result across multiple runs? If it doesn't, I think it's fine to remove it. It's a continuous animation and would be hard to consistently get the same image snapshot."", 'comment_created': datetime.datetime(2022, 8, 29, 18, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 962317346, 'comment_body': ""Does this not work for reaching a phoenix menu item? https://github.com/HSF/phoenix/pull/495#discussion_r957673738\r\n\r\nThe way it is now is still prone to errors since we are looking for any `.mat-slide-toggle` and getting it's first index and then making sure we have the `Event Data` option. This could break because the position of `.mat-slide-toggle` may change.\r\n\r\nPlease let me know if I misunderstand something here."", 'comment_created': datetime.datetime(2022, 9, 4, 13, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 962346356, 'comment_body': 'The problem when using that is - `Event Data` toggle gets triggered as well when we use the toggle for `Detector`. So, I fixed that. Pushing the changes..now it should work as expected.', 'comment_created': datetime.datetime(2022, 9, 4, 17, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 963065532, 'comment_body': 'That doesn\'t happen on my side. I used the following standalone test to check:\r\n\r\n```ts\r\nit(\'should hide detector geometry\', () => {\r\n  cy.get(\'[data-testid=""dropdown""]\').click();\r\n\r\n  getPhoenixMenuItem(\'Detector\').closest(\'.mat-slide-toggle\').click();\r\n\r\n  cy.document().toMatchImageSnapshot();\r\n\r\n  getPhoenixMenuItem(\'Detector\').closest(\'.mat-slide-toggle\').click();\r\n\r\n  cy.get(\'.phoenix-menu-item-right > button\').eq(0).click();\r\n});\r\n```\r\n\r\nThis does not toggle ""Event Data"". Can you please share a screenshot how the ""Event Data"" gets triggered on clicking the ""Detector"" menu item?', 'comment_created': datetime.datetime(2022, 9, 5, 17, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 963187246, 'comment_body': ""Now, I got it why that happened with this line just before the `hide detector geometry` test case - \r\n```\r\ncy.get('app-phoenix-menu-item').eq(1).click();\r\n```\r\n\r\nAnd due to this, the `Event Data` toggle got triggered."", 'comment_created': datetime.datetime(2022, 9, 6, 1, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 963661087, 'comment_body': 'Does it look okay now or I need to change something else?  😅', 'comment_created': datetime.datetime(2022, 9, 6, 12, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}, {'comment_id': 963684376, 'comment_body': ""Is okay now.\r\n\r\nJust note that the snapshots don't work on my Linux because of differences in rendering the canvas. There are subtle differences in how WebGL works on different operating systems. I am not sure if it will work on some other Windows machine either. I will have to check. But just as a heads up, we may need to have a docker setup to make things consistent."", 'comment_created': datetime.datetime(2022, 9, 6, 13, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': '9inpachi', 'type': 'User'}, {'comment_id': 963762523, 'comment_body': '> we may need to have a docker setup to make things consistent.\r\n\r\nFor snapshots, definitely a yes! They have been inconsistent as per my check as well.', 'comment_created': datetime.datetime(2022, 9, 6, 14, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DamianArado', 'type': 'User'}]","[{'commit_sha': '51fbdedc54d29e64cebfc7cb8ac6b25748fb897e', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abaf68fbb73afacf22ae88e6468a5a2e99192ee2', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a5d261b8caff9a10794894231a3fe61306c92b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e41478fc76ce002291ca47f7cd43e139c5f0aa', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe1d2ab1621c050137436e1bb3948a1ab8b434b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15abe61b25482b331326f732c9c10ddcde2db38b', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72218c40f0138565a1b573aa20c9c2ec4eef05d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f179444f50062c71ab6bdb7471de2cb9f410ded', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '219c1e4a9808ea277e761f9983b530687060bc0c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d01106f876ea7d1688d95212e4e7bf7dfe90ff8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59296dd6664b6b9858d7cfda4b9b892316c603db', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07dd2e7f1d6ece107319116cc602589857ec082c', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb206452ab164a93695fe183f66907f707053b3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a35e8d9d55e2a18e59e5bc9d0a0f712c693303', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7777275686b18146c437ec0c55309209334a09', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7dd4999f556f5ea8657d5e517ec974a1b7133e1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '704cd7f252193722c9e872798eb302cd24ed29e1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acdb85943074cc77e8db05a0d1684e16a94c31b3', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b2ff760a7b7b32083365c90786047251c73624', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1b46d7b183e67e0436c977503758bd97458c26f', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fad3e441ae1f41b1dd21acf007f3298ea0eb5b8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '587d4c0b4ca44a945b45e2ffaed01d6690dd94ee', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847515212c8f11150359c0bb674dc6d4fb6d6947', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5133e1814d2bf494f393ab9cfd1d9be50c83d8', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa2e72f47e4d2989301255c122bda68165dff3d', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a0d0c53a4d27db21b9ed6019ffb942ba30605b4', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618383ea38a991dcdca8af9bbb7140457bd63fe1', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf48e1a8fa8ff8d4da63aacf26050cc256a4cde7', 'committer_username': 'DamianArado', 'committer_name': 'Mohammad Humayun Khan', 'committer_email': 'khanhumayun95@gmail.com', 'commit_date': datetime.datetime(2020, 3, 31, 16, 33, 27, tzinfo=datetime.timezone.utc)}]",Mohammad Humayun Khan,62954367,khanhumayun95@gmail.com,User,,113,,20,67

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
135442382,phoenix,HSF/phoenix,TypeScript,53,54,16,26,2625,57,21,4,"[{'id': 1382497863, 'number': 579, 'closed': datetime.datetime(2023, 6, 8, 23, 9, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 11, 39, 23, tzinfo=datetime.timezone.utc), 'time_taken': 127836.0, 'time_delta': '1 day, 11:30:36', 'additions': 268, 'deletions': 3, 'state': 'closed'}, {'id': 1097877120, 'number': 507, 'closed': datetime.datetime(2022, 10, 30, 16, 17, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 24, 19, 4, 35, tzinfo=datetime.timezone.utc), 'time_taken': 508349.0, 'time_delta': '5 days, 21:12:29', 'additions': 78, 'deletions': 0, 'state': 'closed'}, {'id': 1034057447, 'number': 495, 'closed': datetime.datetime(2022, 9, 6, 13, 7, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 11, 32, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1215300.0, 'time_delta': '14 days, 1:35:00', 'additions': 1730, 'deletions': 120, 'state': 'closed'}, {'id': 1018270874, 'number': 492, 'closed': datetime.datetime(2022, 10, 3, 16, 59, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 5, 35, 4, tzinfo=datetime.timezone.utc), 'time_taken': 5138679.0, 'time_delta': '59 days, 11:24:39', 'additions': 6222, 'deletions': 3613, 'state': 'closed'}, {'id': 1008203706, 'number': 491, 'closed': datetime.datetime(2022, 7, 26, 19, 55, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 8, 21, 8, tzinfo=datetime.timezone.utc), 'time_taken': 41644.0, 'time_delta': '11:34:04', 'additions': 1724, 'deletions': 796, 'state': 'closed'}, {'id': 985501295, 'number': 473, 'closed': datetime.datetime(2022, 7, 15, 17, 30, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 2, 10, 31, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1148340.0, 'time_delta': '13 days, 6:59:00', 'additions': 1903, 'deletions': 37, 'state': 'closed'}, {'id': 974058232, 'number': 462, 'closed': datetime.datetime(2022, 6, 24, 17, 14, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 20, 0, 48, tzinfo=datetime.timezone.utc), 'time_taken': 249235.0, 'time_delta': '2 days, 21:13:55', 'additions': 312, 'deletions': 111, 'state': 'closed'}, {'id': 932239423, 'number': 437, 'closed': datetime.datetime(2022, 5, 10, 19, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 10, 10, 30, 13, tzinfo=datetime.timezone.utc), 'time_taken': 32449.0, 'time_delta': '9:00:49', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 932203165, 'number': 436, 'closed': datetime.datetime(2022, 5, 11, 19, 52, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 10, 9, 54, 2, tzinfo=datetime.timezone.utc), 'time_taken': 122296.0, 'time_delta': '1 day, 9:58:16', 'additions': 20, 'deletions': 13, 'state': 'closed'}, {'id': 896376143, 'number': 417, 'closed': datetime.datetime(2022, 3, 31, 20, 6, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 31, 19, 54, 51, tzinfo=datetime.timezone.utc), 'time_taken': 710.0, 'time_delta': '0:11:50', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 870327723, 'number': 410, 'closed': datetime.datetime(2022, 3, 31, 17, 20, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 3, 8, 19, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2451687.0, 'time_delta': '28 days, 9:01:27', 'additions': 140, 'deletions': 40, 'state': 'closed'}, {'id': 869693458, 'number': 409, 'closed': datetime.datetime(2022, 3, 2, 18, 33, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 15, 39, 23, tzinfo=datetime.timezone.utc), 'time_taken': 10465.0, 'time_delta': '2:54:25', 'additions': 4, 'deletions': 4, 'state': 'closed'}]"
