pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1396772856,Add main table for uspto plugin,"Initialize new plugin support of US Patent Grant Bibliographic data. Add _tables_ global variable with the first tables of the data schema.

- Add contents of the main table ""us_patent"" for the uspto plugin.
- Add properties that that have 1 to 1 relationship, with respect to the [DTD](https://en.wikipedia.org/wiki/Document_type_definition) rules of the dataset.



",True,9,https://api.github.com/repos/dspinellis/alexandria3k/pulls/9,https://github.com/dspinellis/alexandria3k/pull/9,closed,88,0,1,1,3,9,0,0,[],2023-06-17 13:11:19+00:00,2023-06-21 10:29:47+00:00,335908.0,"3 days, 21:18:28","[{'comment_id': 1234888386, 'comment_body': '2023', 'comment_created': datetime.datetime(2023, 6, 20, 7, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1234888833, 'comment_body': '`us_patents`: Use plural for table names', 'comment_created': datetime.datetime(2023, 6, 20, 7, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1234889291, 'comment_body': 'Please clarify `Fot`.', 'comment_created': datetime.datetime(2023, 6, 20, 8, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1234889919, 'comment_body': 'its (""it\'s"" is a contraction of ""it is"")', 'comment_created': datetime.datetime(2023, 6, 20, 8, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1234890131, 'comment_body': 'published', 'comment_created': datetime.datetime(2023, 6, 20, 8, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1234891318, 'comment_body': 'Please clarify and recast in passive voice.', 'comment_created': datetime.datetime(2023, 6, 20, 8, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1234892394, 'comment_body': 'Statutory invention registration flag. (to be consistent with the `cpa_flag` below.)', 'comment_created': datetime.datetime(2023, 6, 20, 8, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1234916950, 'comment_body': ""Change to solid '2023' or to '2023-2024'?"", 'comment_created': datetime.datetime(2023, 6, 20, 8, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1235029849, 'comment_body': 'You write the year(s) when you have authored the code, so 2023.', 'comment_created': datetime.datetime(2023, 6, 20, 9, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}]","[{'commit_sha': '5079800351a98039bc54844de7a0db85d0e0c146', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1413731566,Add USPTO data processing,"Add processing of USPTO data files.  

- Add USPTO class containing the metadata, w.r.t. the other plugins.

- Add VTable class for the instantiation of virtual tables (for now only one ""us_patents"").

- Add class ZipFiles for processing the directory of the uspto data source. 

After opening the directory and iterating over the zip files, it appends the weekly uspto zip file a list ""file_path"". Afterwards for every weekly zip counts the concatenated xml files inside, which contains multiple small XML files insides. Each of these concatenated XML files represent one US patent grant. 

Using a generator send on demand a container id variable representative of the US patent. No parsing is taking place.

- Add ItemsCursor class on data_sources.py. Modify Crossref's FileCursor and uspto ChunkCursor's ChunkCursor.

- Add class ChunkCursor, for creating a cursor to iterate through the XML chunks. 

In this class is used the caching. Using the content and the container id the caching takes place, when moving to the next available chunk. Successful or not, returns an element tree. This element tree object is the current row value.

- Create an PatentsElementsCursor successor of ElementsCursror. This class is responsible for the next function that the rest of the USPTO cursors will have. 
 
- Add a PatentsCursor for the population of the table 'us_patents'. Points to every row and uses an extracting function to extract the fields needed for the table out of the etree.

- Add a PatentsIpcrCurcor for the population of the table 'icpr_classifications' similar to the kid cursors of Crossref. There is not an abstract element_name function to extract sprecidic items as in Crossref. In the case of USPTO the extraction is a getter function that returns the  value_extractor on each ColumnMeta object.

- Add a data file containing one compressed xml file into the directory **""path/to/tests/data/April 2023 Patent Grant Bibliographic Data""**. 

- Add complete testing for the uspto, including all similar test cases of Crossref.(+ Add test cases for the Zip decompression caching)

- Add a small dataset (50kB) containing 10 patents. Add patents with different application types.  First two that have the same file name.(+ Update this by adding one smaller file that containes three chunks, one of which contains icpr_classifications. This way testing of Zip file opening, plus testing of Detail tables with conditions can take place.)

- Add caching with file_xml_cache.py. Verifies through the container_id and if true returns the cached data. Otherwise parses the XML chunk.

- Add caching of zip files. Every zip file is being read once and passes the contents of the concatenated XML chunks that contains inside in a list. This way every time the content are being accessed instantly except the first time. Add test cases. 

- Add a helper file xml.py. This files contains helper function for extracting elements and attributes from parsed XML files. 

- Fix orcid.py and uspto.py to utilize the helper function instead of initializing the similar processing functions.

- Add documentation of the xml.py on the plugin API page and the US patent grant dataset.





",True,15,https://api.github.com/repos/dspinellis/alexandria3k/pulls/15,https://github.com/dspinellis/alexandria3k/pull/15,closed,1693,77,16,1,3,56,0,0,[],2023-06-29 17:56:53+00:00,2023-08-08 07:37:11+00:00,3418818.0,"39 days, 13:40:18","[{'comment_id': 1251576779, 'comment_body': 'I see some commonality with orcid.py. Should some common functions be moved to a helper xml.py file, and documented as part of the plugin development API?', 'comment_created': datetime.datetime(2023, 7, 4, 6, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1251578046, 'comment_body': 'Nice detailed commenting!', 'comment_created': datetime.datetime(2023, 7, 4, 6, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1251580179, 'comment_body': 'Cache of read and parsed XML files (I think you already have this in mind).', 'comment_created': datetime.datetime(2023, 7, 4, 6, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1251580592, 'comment_body': 'which', 'comment_created': datetime.datetime(2023, 7, 4, 6, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264621506, 'comment_body': 'This should be None, as there is no sensible default.', 'comment_created': datetime.datetime(2023, 7, 16, 6, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264621671, 'comment_body': 'Please document the file format, or point to its documentation.', 'comment_created': datetime.datetime(2023, 7, 16, 6, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264621802, 'comment_body': 'Is this needed?', 'comment_created': datetime.datetime(2023, 7, 16, 6, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264621902, 'comment_body': 'Remove commented code or enable it through logging or debug functionality.', 'comment_created': datetime.datetime(2023, 7, 16, 6, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264621933, 'comment_body': 'Remove commented code or enable it through logging or debug functionality.', 'comment_created': datetime.datetime(2023, 7, 16, 6, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264622002, 'comment_body': 'Remove commented code or enable it through logging or debug functionality.', 'comment_created': datetime.datetime(2023, 7, 16, 6, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264622073, 'comment_body': 'Define and use a constant, rather than the 200 magic number', 'comment_created': datetime.datetime(2023, 7, 16, 6, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264622771, 'comment_body': 'So here you are decompressing all zip files when the object is constructed?\r\nThis should happen dynamically and on-demand, so that object construction is fast.\r\nPlease try your code on the entire USPTO data set to set that it behaves reasonably, e.g. it responds fast in a `LIMIT 1` query.\r\nNote: It might be OK to simply obtain the file contents, so iterating through the zip files and their contents, without calling `open`.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264622839, 'comment_body': 'Remove commented code or enable it through logging or debug functionality.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264624403, 'comment_body': 'Consider moving the many common elements with CrossRef `FilesCursor` to a parent class in `data_source.py` and subclassing.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264624545, 'comment_body': 'Please comment each `if statement.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264624731, 'comment_body': 'Please remove elements that are the same as those of the parent class.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264624821, 'comment_body': 'Please clarify description', 'comment_created': datetime.datetime(2023, 7, 16, 7, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264625161, 'comment_body': 'Expand USPTO on this first use and follow with the initials in brackets.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264625163, 'comment_body': 'Have you implemented this?  If not add a TODO comment in an appropriate place.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264625397, 'comment_body': 'This fits on a single line.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264625452, 'comment_body': 'Remove debug code or enable it through logging or debug functionality.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264625480, 'comment_body': 'Remove commented code or enable it through logging or debug functionality.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264625573, 'comment_body': 'Remove debug code or enable it through logging or debug functionality.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264625654, 'comment_body': 'represents', 'comment_created': datetime.datetime(2023, 7, 16, 7, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1264626406, 'comment_body': 'Please also add a FileCache test that will show that only a singly file has been read (e.g. with SQL `LIMIT 1`.', 'comment_created': datetime.datetime(2023, 7, 16, 7, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1273961236, 'comment_body': 'I believe so.  Apart from iterating through this, it is also used for path extraction. Let me know if you think I should treat it differently. ', 'comment_created': datetime.datetime(2023, 7, 25, 18, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1273962029, 'comment_body': 'I added a custom explanation on this let me now if it is adequate. ', 'comment_created': datetime.datetime(2023, 7, 25, 18, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1273964648, 'comment_body': ""Created an ItemsCursor class on data_sources.py. I made the corresponding changes on both USPTO and Crossref, plus tested them. I found Filter function to be pretty unique so I didn't include it. Let me know if I could do something better on this."", 'comment_created': datetime.datetime(2023, 7, 25, 18, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1273969820, 'comment_body': 'Added both testing XML parsing and Zip file decompressing on a LIMIT 1 case.', 'comment_created': datetime.datetime(2023, 7, 25, 19, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1274577588, 'comment_body': 'Thanks!  I cannot seem to see the explanation in this class. Maybe you added it somewhere else? Please document in the response where.', 'comment_created': datetime.datetime(2023, 7, 26, 8, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274582359, 'comment_body': 'Please remember: no debug statements in committed code.', 'comment_created': datetime.datetime(2023, 7, 26, 8, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274587963, 'comment_body': ""I'd appreciate a note on how you resolve these comments."", 'comment_created': datetime.datetime(2023, 7, 26, 8, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274594297, 'comment_body': 'Add (USPTO).', 'comment_created': datetime.datetime(2023, 7, 26, 8, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274595443, 'comment_body': 'Marking it as resolved. Make a note to handle all TODOs.', 'comment_created': datetime.datetime(2023, 7, 26, 8, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274599248, 'comment_body': 'Please order import alphabetically', 'comment_created': datetime.datetime(2023, 7, 26, 8, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274599852, 'comment_body': ""Please clarify. Also, can't you do it with a regex?"", 'comment_created': datetime.datetime(2023, 7, 26, 8, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274600678, 'comment_body': 's/solid/complete/', 'comment_created': datetime.datetime(2023, 7, 26, 8, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274603020, 'comment_body': 'Please clarify.', 'comment_created': datetime.datetime(2023, 7, 26, 8, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274603460, 'comment_body': 'Nice check!', 'comment_created': datetime.datetime(2023, 7, 26, 8, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274605882, 'comment_body': 'Please add a description of what this class does and how this class is to be used, perhaps with an example.', 'comment_created': datetime.datetime(2023, 7, 26, 8, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274618175, 'comment_body': 'Layering issue in the comment.  This lower-level class should not have assumptions on how it is used by upper layers. So write the description in a bit more abstract manner.  It is OK to mention special cases as optimizations.', 'comment_created': datetime.datetime(2023, 7, 26, 9, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274622536, 'comment_body': ""Also, please try to express the code in terms of containers, rather than files. Remember we also want to cache XML parsing in addition to zip decompression. Not sure which of the two is happening here. Improve code and comments so that it's clear."", 'comment_created': datetime.datetime(2023, 7, 26, 9, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274627537, 'comment_body': 'Please express this in terms of container, clarifying whether this is a zip file or (much better) a parsed XML chunk.', 'comment_created': datetime.datetime(2023, 7, 26, 9, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274632027, 'comment_body': 'Please document the parameters.', 'comment_created': datetime.datetime(2023, 7, 26, 9, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274647023, 'comment_body': 'Please rename class to `UsptoZipCache` and file to `uspto_zip_cache`.', 'comment_created': datetime.datetime(2023, 7, 26, 9, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274649335, 'comment_body': 'Please write comments in imperative style, i.e. ""Extract filename and decode the XML"" (look also for other instances).', 'comment_created': datetime.datetime(2023, 7, 26, 9, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1274654045, 'comment_body': 'Please use capital case for SQL keywords (throught) and format your queries to avoid them exceeding the line length (use multiline strings for this).', 'comment_created': datetime.datetime(2023, 7, 26, 9, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1284293587, 'comment_body': 'Please clarify the ipgb characters, perhaps with an example in your comment.', 'comment_created': datetime.datetime(2023, 8, 4, 11, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1284296110, 'comment_body': 'Better: ""Access individual patent XML chunks, embedded inside a single XML file, within the zip file."", OK?\r\nOr better give a brief description of the structure of how the patent data are distributed n more sentences.', 'comment_created': datetime.datetime(2023, 8, 4, 11, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1284300728, 'comment_body': 'Still not clear. Please describe it as an API.  What is a typical use pattern? Provide in the comment Python skeletal code.', 'comment_created': datetime.datetime(2023, 8, 4, 11, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1284301967, 'comment_body': 'Compares…\r\nAlso, please try to avoid describing the function\'s API based on the internal state.\r\nA clearer description would be: ""Return the parsed contents of the specified container id in etree form.\r\nRepeated parsing is avoided through caching.""', 'comment_created': datetime.datetime(2023, 8, 4, 11, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1284302308, 'comment_body': 'Not all contents, just the container_id, right?', 'comment_created': datetime.datetime(2023, 8, 4, 11, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1284305778, 'comment_body': 'Remember: write comments in imperative mood.\r\nExample: ""Return a list of XML files in the specified zip file""', 'comment_created': datetime.datetime(2023, 8, 4, 11, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1284309368, 'comment_body': 'Should this be test_cached_data to match the previous case?', 'comment_created': datetime.datetime(2023, 8, 4, 11, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1285212361, 'comment_body': 'Yes\r\n', 'comment_created': datetime.datetime(2023, 8, 6, 12, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1285212514, 'comment_body': 'I hope I elaborated it better. Let me know if anything is vague, or if I should add more explanations.', 'comment_created': datetime.datetime(2023, 8, 6, 12, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}]","[{'commit_sha': '2b1f89ef403525b00cc7593bf0c8a5a6fec30073', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1468925981,Add USPTO sampling,"Add sampling to USPTO to control Zip file and container sampling,  defaults to `lambda n: (""True"", ""True"")`.

 When the first variable of the callable  returns `True` the  Zip file will get processed, when it returns `False`  the container will get skipped. Similarly, when the second variable of the callable returns `True` the container will get processed,   when it returns `False` the container will get skipped.

Zip file sampling is handled in uspto.py, while container sampling is handled in uspto_zip_cache.py

Add changes to caching tests to comply with CI regulations.",True,17,https://api.github.com/repos/dspinellis/alexandria3k/pulls/17,https://github.com/dspinellis/alexandria3k/pull/17,closed,184,82,7,1,1,29,0,0,[],2023-08-09 16:04:00+00:00,2023-09-12 10:30:39+00:00,2917599.0,"33 days, 18:26:39","[{'comment_id': 1293597268, 'comment_body': 'function', 'comment_created': datetime.datetime(2023, 8, 14, 15, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1293599686, 'comment_body': '# Check for EOF', 'comment_created': datetime.datetime(2023, 8, 14, 15, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1293602697, 'comment_body': 'The tuple isn\'t callable, its elements are. So better: ""When the tuple\'s second element returns …""', 'comment_created': datetime.datetime(2023, 8, 14, 15, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1293603070, 'comment_body': 'A tuple of callables…', 'comment_created': datetime.datetime(2023, 8, 14, 15, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1293603957, 'comment_body': 'A tuple of callables to control…\r\nOther than this very nice description!', 'comment_created': datetime.datetime(2023, 8, 14, 15, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1293605756, 'comment_body': 'Consider rewriting this part as a list comprehension.', 'comment_created': datetime.datetime(2023, 8, 14, 15, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1307364849, 'comment_body': 'The default value must be a string, because it is passed to eval, right?', 'comment_created': datetime.datetime(2023, 8, 28, 12, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1307370555, 'comment_body': ""Please clarify in the line 649 comment and adjust the default value if needed, if this is a tuple of callables or a callable returning a tuple. If this is a tuple of callables, shouldn't it be `(lamda n: True, lambda n: True)`? "", 'comment_created': datetime.datetime(2023, 8, 28, 12, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1307635382, 'comment_body': ""Turning it into a a tuple of Booleans still works and passing the argument to eval doesn't raise any error. I decided to make it a tuple of strings w.r.t. its previous form. Would you prefer changing it into a tuple of Booleans?"", 'comment_created': datetime.datetime(2023, 8, 28, 16, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1307659682, 'comment_body': 'You want something that will work as intended (and not almost by accident 😃) in the line `    sample = eval(f""lambda path: {args.sample}"").  What you wrote results in sample returning the **string** `True`, which is also truish in Python, but not what you seem to be intending.  So use a proper string of a tuple of function results `(True, True)`, which is close to what the user would pass.', 'comment_created': datetime.datetime(2023, 8, 28, 16, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1307755096, 'comment_body': ""A 'tuple' object is not callable, thus it is unable to accesses the callable inside the tuple.\r\n\r\nThat's why I have set a sample to be a lambda function that returns the tuple of callables.  Do you think think this should be running differently?\r\n\r\nI will fix my description to fit exactly what is taking place and add a comment to clarify why I access the contents of the tuple this way. \r\n"", 'comment_created': datetime.datetime(2023, 8, 28, 18, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1307916411, 'comment_body': 'I am asking to clarify the wording: ""Is a callable that returns a tuple of callables"", which I think is wrong; see below.\r\n\r\n* Callable returning a tuple of values: `lambda x: (True, True)`\r\n* Tuple of callables: `(lambda x: True, lambda x: True)`\r\n* Callable that returns a tuple of callables: `lambda x: (lambda y: True, lambda y: True)`\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 28, 20, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1307933414, 'comment_body': 'Yes, you are right. \r\n\r\nI uploaded it now in the form of **a callable that returns a tuple with two callable functions inside**.\r\n\r\nSorry for the misunderstanding.  \r\n', 'comment_created': datetime.datetime(2023, 8, 28, 20, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1315053311, 'comment_body': 'the zip file will get skipped', 'comment_created': datetime.datetime(2023, 9, 4, 15, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315055384, 'comment_body': 'Please clarify `container info`, ideally also providing an example.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315057346, 'comment_body': ""There are not two callable elements.  It's just one callable returning a tuple.\r\n\r\nPlease also clarify how the callable can know whether the passed data is a zip file or container info.  Perhaps the arguments should also be a tuple?"", 'comment_created': datetime.datetime(2023, 9, 4, 15, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315058092, 'comment_body': ""The tuple has a value, it doesn't `return`."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315058742, 'comment_body': 'This now also applies to USPTO, right?  Please also adjust the example as needed. ', 'comment_created': datetime.datetime(2023, 9, 4, 15, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315059112, 'comment_body': 'Same here. ', 'comment_created': datetime.datetime(2023, 9, 4, 15, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315101839, 'comment_body': 'In Python 3.* versions it is not allowed to pass a tuple as an argument of a lambda function, see [here](https://peps.python.org/pep-3113/). \r\n\r\nFollowing the lead of the PEP, I can change the sample variable to be:\r\n\r\n`sample=lambda x: (x[0], x[1])`, \r\n\r\nwhich works and I think looks nicer. Let me know your opinion on this and I will change it.\r\n\r\nAlso, I need some help to understand why the callable should know what the passed data is. \r\n\r\nAfter giving the argument to the callable I explicitly ask a value of the two-value tuple it returns, and w.r.t. that sampling will happen or not. \r\n\r\nPerhaps, I should clarify the last step on the initialization of the callable and the calls of it.\r\nThis takes place on the __init__() of the DataFiles() in uspto.py and on the uspto_zip_cache.py, so I think I should add clarifications on these parts as well.\r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 4, 16, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1315119523, 'comment_body': 'I added the changes and pushed it in the form I am describing on my previous comment, so it can be more clear what I want to say.\r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 4, 16, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1315130058, 'comment_body': 'It defaults to `lambda x: (True, True)`. The `x` argument passed to the callable is an array whose first elements contains the path … (e.g. …) and its second element contains … (e.g. …).', 'comment_created': datetime.datetime(2023, 9, 4, 17, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315130306, 'comment_body': ""When the return tuple's first value …\r\n[This has nothing to do with `x`."", 'comment_created': datetime.datetime(2023, 9, 4, 17, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315130643, 'comment_body': 'This should be `(True, True)`, right?', 'comment_created': datetime.datetime(2023, 9, 4, 17, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315130824, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2023, 9, 4, 17, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315130885, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2023, 9, 4, 17, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315131049, 'comment_body': 'Please fix this as well, and review the rest of the file for other needed adjustments.', 'comment_created': datetime.datetime(2023, 9, 4, 17, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1315164182, 'comment_body': ""I saw the other changes and I added them. \r\n\r\nI still can't understand the use of the callable you are proposing. I have added on my description of sampling how it is currently being used by uspto, in a similar way you are proposing in here. \r\n\r\nThe x argument of the callable is either a Zip path or a container, and then the decision of sampling happens, by checking \r\n\r\nWhen sampling a Zip file: \r\n\r\nsampling_function(Zip_file)[0]  => Gets the first value of the tuple that the callable returns, if true pass the zip to be open, else skip it.\r\n\r\nThen it moves to open the Zip files that passed the sampling, to see the containers inside them. Similarly then the containers that pass the sampling campionato are getting processed .\r\n\r\nSampling of a container: \r\n\r\nsampling_function(container)[1]  => Gets the second value of the tuple that the callable returns, if true pass the container to be processed, else skip it.\r\n\r\nWhy should x be an array?"", 'comment_created': datetime.datetime(2023, 9, 4, 18, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1315204404, 'comment_body': 'How can the callee (the callable) know whether it is being called for a zip file or for a container? I now realize the design with the return tuple was wrong all along; sorry!  What is needed is a way to pass more complex data __to__ the callable, not back __from__ the callable.  So for USPTO data the argument passed to the lambda shall be a tuple containing a data designator string (`path` or `container`) and the actual string.  The lambda body will return `True` or `False` by interpreting the tuple\'s value, e.g.\r\n\r\n```python\r\n# Process paths ending in 3.zip\r\nlambda data: data[1].endswith(""3.zip"") if data[0] == ""path"" else True\r\n\r\n# Process 1% of containers\r\nlambda data: random.random() < 0.01 if data[0] == ""container"" else True\r\n\r\n# Process 1% of containers of files ending in 3.zip\r\nlambda data: random.random() < 0.01 if data[0] == ""container"" else data[1].endswith(""3.zip"") \r\n```\r\n\r\nIf you agree with this, please adjust the code and the documentation.  Provide the examples both in the code API (as part of the docstring) and for the CLI (through the help string in the first-appearing case and by reference in the second case).', 'comment_created': datetime.datetime(2023, 9, 4, 21, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}]","[{'commit_sha': '8b1fb5368e4ff5fccadffbd03dd8634057d1de0e', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1520282342,Add USPTO Schema,"Make Alexandria3k fully access all the published US patent bibliographic data from 2005 to now (September 2023). 

- New tables : `usp_cpc_classifications`, `usp_field_of_classification`, `usp_agents`, `usp_applicants`, `usp_inventors`, `usp_assignees`, `usp_patent_family`, `usp_citations`, `usp_related_documents`
 
Add new cursors for tables for some tables that column filling couldn't be done with a simple getter function and had to cope with different versions of DTD.

- New cursors: `PatentsCpcCursor`, `PatentsRelatedDocumentsCursor`, `PatentsAssigneesCursor`

Add new TableMeta object `USPartiesTableMeta` that contains similar columns of tables `usp_inventors`, `usp_applicants`, `usp_agents` to avoid duplicates. These three tables appear in the DTD under the hood of us-parties element and share many properties. Thus, the name the  USPartiesTableMeta.

Changed the file reading of uspto.py to fit how the bulk data are provided. The reading now reads through a folder that represents a whole year and includes inside all the weekly published patents from the US office. 

Respectively changed the test dataset and its reading through the test files.

Change  `PatentsIcprCursor` to `PatentsDetailsCursor` , since it applies to various tables and not only the `icpr_classifications` table, now changed to `ups_icpr_classifications`.

Add one helping function `alternative_path_getter` :  

- `alternative_path_getter` : takes two paths as input and checks if the first yields results if not chooses the second path. Added this function for tables that existed before 2012 with a different name and all the elements under them were the same.

Removed some properties of the us_patents table, after I run a COUNT query over all the dataset and returned 0. Removed columns: microform_number, hague_filing_date, hague_reg_pub_date, hague_reg_date, sir_flag

Updated the relationship of tables under us_patents into the uspto.dot file.

Add tests for the new tables, testing that the record counted both with partition and without are the same as the entries in the sample dataset.

Fixed a double space in orcid.py.
",True,24,https://api.github.com/repos/dspinellis/alexandria3k/pulls/24,https://github.com/dspinellis/alexandria3k/pull/24,closed,1067,75,7,1,2,27,0,0,[],2023-09-18 21:53:56+00:00,2023-09-20 20:59:30+00:00,169534.0,"1 day, 23:05:34","[{'comment_id': 1329894382, 'comment_body': ""* [ ] Please use 0…N for the cases where the details table can have no records.\r\n* [ ] Given that you're not somehow creating N-N records by grouping related entries together, the master side should have cardinality N.  Please see the existing schemata."", 'comment_created': datetime.datetime(2023, 9, 19, 10, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329895071, 'comment_body': 'Well done!', 'comment_created': datetime.datetime(2023, 9, 19, 10, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329898471, 'comment_body': 'Ouch! This may call `findall(path1)` twice. Better: `tree.findall(path1) or tree.findall(path2)`.', 'comment_created': datetime.datetime(2023, 9, 19, 10, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329900925, 'comment_body': 'These should be handled by `get_value_extractor_by_ordinal` through the schema.', 'comment_created': datetime.datetime(2023, 9, 19, 10, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329920764, 'comment_body': 'Remove or log, right?', 'comment_created': datetime.datetime(2023, 9, 19, 10, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329923330, 'comment_body': ""Why not keep the date as yyyymmdd?  Keep it like this if it's for compatibility with another schema version."", 'comment_created': datetime.datetime(2023, 9, 19, 10, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329924060, 'comment_body': 'Expand CPC in the comment.', 'comment_created': datetime.datetime(2023, 9, 19, 10, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329927096, 'comment_body': 'Rather than having ascending numbers, which can get out of sync, in all cases use something like\r\n```\r\ncolumn_contents = {i + 4 value for i, value in enumerate(column_names)}\r\n```', 'comment_created': datetime.datetime(2023, 9, 19, 10, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329927830, 'comment_body': 'These should be handled through `column_contents`.', 'comment_created': datetime.datetime(2023, 9, 19, 10, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329942361, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2023, 9, 19, 11, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329942848, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2023, 9, 19, 11, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329946165, 'comment_body': ""Find a way to remove duplication between the schema definition of agents, applicants, assignees.  See how it's done in ORCID."", 'comment_created': datetime.datetime(2023, 9, 19, 11, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1329946884, 'comment_body': 'Remove unneeded space.', 'comment_created': datetime.datetime(2023, 9, 19, 11, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1330532335, 'comment_body': 'Just for clarifications the list `column_names` will contain the values of the fixed dictionary , right? I mean not the column names as shown inside the tablemeta object.', 'comment_created': datetime.datetime(2023, 9, 19, 18, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1330676531, 'comment_body': 'Exactly!  Try it out on the Python REPL.', 'comment_created': datetime.datetime(2023, 9, 19, 20, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1330701467, 'comment_body': 'I withdrew my changes date remains as yyyymmdd.', 'comment_created': datetime.datetime(2023, 9, 19, 21, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1330701729, 'comment_body': 'Works nice.\r\n', 'comment_created': datetime.datetime(2023, 9, 19, 21, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1330703255, 'comment_body': 'Should the `column_contents` list handle the the values of the first columns as well? I uploaded it just for the rest. Let me know if this is alright. ', 'comment_created': datetime.datetime(2023, 9, 19, 21, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1331077806, 'comment_body': 'No need for the first columns.  See the Crossref implementation.', 'comment_created': datetime.datetime(2023, 9, 20, 6, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1331508803, 'comment_body': ""Excluded the id column on detail tables since they don't have children. Is this okay?"", 'comment_created': datetime.datetime(2023, 9, 20, 11, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1331625857, 'comment_body': 'Yes, we want to avoid 90% of the boilerplate.', 'comment_created': datetime.datetime(2023, 9, 20, 13, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}, {'comment_id': 1331637391, 'comment_body': 'Changed it accordingly.', 'comment_created': datetime.datetime(2023, 9, 20, 13, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1331637602, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 9, 20, 13, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1331638889, 'comment_body': 'Great, I updated it.', 'comment_created': datetime.datetime(2023, 9, 20, 13, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1331641264, 'comment_body': 'Fixed that!\r\n', 'comment_created': datetime.datetime(2023, 9, 20, 13, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}, {'comment_id': 1331643004, 'comment_body': 'Yes, I changed it accordingly. Only to tables have a  1..N relationship with `us_patents` table, the rest  stays as 0..N ', 'comment_created': datetime.datetime(2023, 9, 20, 13, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AggelosMargkas', 'type': 'User'}]","[{'commit_sha': '865c2a9e9390b89dd59043d4fd7e72aad79409fa', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1344500878,Fix grammatical ambiguity.,Clarify a grammatical ambiguity that appeared in the development map page. ,True,5,https://api.github.com/repos/dspinellis/alexandria3k/pulls/5,https://github.com/dspinellis/alexandria3k/pull/5,closed,1,1,1,1,0,0,0,0,[],2023-05-09 23:26:09+00:00,2023-05-15 16:36:47+00:00,493838.0,"5 days, 17:10:38",[],"[{'commit_sha': 'e13618e8630d713f6a418cdde1f8c2349400759b', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1395116042,Fix CI CLI invocation and add missing dot in documentation,"Fix documentation files that remain in the old format of alexandria3k.

- Update two documentation file, by adding a3k wherever was needed.

- Add a missing dot .

",True,8,https://api.github.com/repos/dspinellis/alexandria3k/pulls/8,https://github.com/dspinellis/alexandria3k/pull/8,closed,6,6,3,1,2,0,0,0,[],2023-06-16 05:48:15+00:00,2023-06-16 07:00:11+00:00,4316.0,1:11:56,[],"[{'commit_sha': '76f227a414bcc2bf2306ecb460bb4d50632688d5', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1399369758,Fix typo,Fix typo in the initialization function of the ElementsCursor class,True,10,https://api.github.com/repos/dspinellis/alexandria3k/pulls/10,https://github.com/dspinellis/alexandria3k/pull/10,closed,1,1,1,1,1,0,0,0,[],2023-06-20 07:39:26+00:00,2023-06-20 08:05:14+00:00,1548.0,0:25:48,[],"[{'commit_sha': 'fc9ebe5b73698dedc7190ec88e441b792e232e56', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1401261981,Fix typo,Fix a typo on the definition of query function. ,True,11,https://api.github.com/repos/dspinellis/alexandria3k/pulls/11,https://github.com/dspinellis/alexandria3k/pull/11,closed,1,1,1,1,0,0,0,0,[],2023-06-21 08:55:34+00:00,2023-06-21 10:28:05+00:00,5551.0,1:32:31,[],"[{'commit_sha': '51a9ecd298d76499671bb717cc7f57bbaf82231f', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1402957094,Fix misspelling,Fix misspelling of the word 'argument' observed in other files throughout Alexandria3k ,True,12,https://api.github.com/repos/dspinellis/alexandria3k/pulls/12,https://github.com/dspinellis/alexandria3k/pull/12,closed,5,5,4,1,0,0,0,0,[],2023-06-22 06:51:20+00:00,2023-06-22 08:20:52+00:00,5372.0,1:29:32,[],"[{'commit_sha': '1f593be62a54531defe8114b4e425fef522b9436', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1405337720,Fix name of instance,Fix name of instance 'StreamingTable' on function Create().,True,13,https://api.github.com/repos/dspinellis/alexandria3k/pulls/13,https://github.com/dspinellis/alexandria3k/pull/13,closed,4,2,2,1,0,0,0,0,[],2023-06-23 16:55:16+00:00,2023-06-30 12:10:28+00:00,587712.0,"6 days, 19:15:12",[],"[{'commit_sha': 'ae940548e2f678634db1ebb5c149bea8322f74e5', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1406046112,Fix column name,Fix column name on main table of USPTO plugin.,True,14,https://api.github.com/repos/dspinellis/alexandria3k/pulls/14,https://github.com/dspinellis/alexandria3k/pull/14,closed,1,1,1,1,1,0,0,0,[],2023-06-24 09:31:38+00:00,2023-06-24 12:29:58+00:00,10700.0,2:58:20,[],"[{'commit_sha': '5cfa373fa988d4d6ce6945fdcec7cc80b0a0c9a9', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13
1434917373,Add split point of db_spec and fix typo,"Add the exact point of splitting of the db_spec string. Over the testing process on Windows machine the string of db_spec contains two colons. That way the path to the temporary attached database is similar to ""C://..."" and the splitting operation ends up giving three strings[db_name. 'C', and the rest], thus it returns a destroyed path to the attached database. Putting the regulation of spitting on the first colon focuses on taking firstly the db_name and the rest should be the path.

Fix typo of word corresponding.",True,16,https://api.github.com/repos/dspinellis/alexandria3k/pulls/16,https://github.com/dspinellis/alexandria3k/pull/16,closed,2,2,1,1,0,1,0,0,[],2023-07-14 14:57:30+00:00,2023-07-16 06:45:08+00:00,143258.0,"1 day, 15:47:38","[{'comment_id': 1264620127, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2023, 7, 16, 6, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dspinellis', 'type': 'User'}]","[{'commit_sha': 'e3b78d36c106c1fcab3732ac0d2cf0839fb23c29', 'committer_username': 'AggelosMargkas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 31, 20, 49, 45, tzinfo=datetime.timezone.utc)}]",,39811197,,User,,12,,14,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
559926599,alexandria3k,dspinellis/alexandria3k,Python,14,80,4,7,698,3,11,1,"[{'id': 1567416716, 'number': 30, 'closed': datetime.datetime(2023, 10, 21, 10, 3, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 20, 22, 54, 20, tzinfo=datetime.timezone.utc), 'time_taken': 40162.0, 'time_delta': '11:09:22', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1534187892, 'number': 29, 'closed': datetime.datetime(2023, 9, 28, 13, 10, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 28, 13, 10, 14, tzinfo=datetime.timezone.utc), 'time_taken': 39.0, 'time_delta': '0:00:39', 'additions': 53, 'deletions': 0, 'state': 'closed'}, {'id': 1534092284, 'number': 27, 'closed': datetime.datetime(2023, 9, 28, 12, 45, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 28, 12, 24, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1248.0, 'time_delta': '0:20:48', 'additions': 53, 'deletions': 0, 'state': 'closed'}, {'id': 1534007466, 'number': 26, 'closed': datetime.datetime(2023, 9, 28, 11, 47, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 28, 11, 42, 37, tzinfo=datetime.timezone.utc), 'time_taken': 269.0, 'time_delta': '0:04:29', 'additions': 3415, 'deletions': 426, 'state': 'closed'}, {'id': 1533305261, 'number': 25, 'closed': datetime.datetime(2023, 10, 14, 14, 28, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 28, 0, 47, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1431647.0, 'time_delta': '16 days, 13:40:47', 'additions': 2007, 'deletions': 12, 'state': 'closed'}, {'id': 1520282342, 'number': 24, 'closed': datetime.datetime(2023, 9, 20, 20, 59, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 18, 21, 53, 56, tzinfo=datetime.timezone.utc), 'time_taken': 169534.0, 'time_delta': '1 day, 23:05:34', 'additions': 1067, 'deletions': 75, 'state': 'closed'}, {'id': 1486673995, 'number': 22, 'closed': datetime.datetime(2023, 8, 23, 15, 57, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 15, 54, 7, tzinfo=datetime.timezone.utc), 'time_taken': 193.0, 'time_delta': '0:03:13', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1486640936, 'number': 21, 'closed': datetime.datetime(2023, 8, 23, 15, 48, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 15, 31, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1022.0, 'time_delta': '0:17:02', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 1486590589, 'number': 20, 'closed': datetime.datetime(2023, 8, 23, 15, 2, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 14, 58, 56, tzinfo=datetime.timezone.utc), 'time_taken': 219.0, 'time_delta': '0:03:39', 'additions': 102, 'deletions': 22, 'state': 'closed'}, {'id': 1468925981, 'number': 17, 'closed': datetime.datetime(2023, 9, 12, 10, 30, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 16, 4, tzinfo=datetime.timezone.utc), 'time_taken': 2917599.0, 'time_delta': '33 days, 18:26:39', 'additions': 184, 'deletions': 82, 'state': 'closed'}, {'id': 1434917373, 'number': 16, 'closed': datetime.datetime(2023, 7, 16, 6, 45, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 14, 57, 30, tzinfo=datetime.timezone.utc), 'time_taken': 143258.0, 'time_delta': '1 day, 15:47:38', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1413731566, 'number': 15, 'closed': datetime.datetime(2023, 8, 8, 7, 37, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 17, 56, 53, tzinfo=datetime.timezone.utc), 'time_taken': 3418818.0, 'time_delta': '39 days, 13:40:18', 'additions': 1693, 'deletions': 77, 'state': 'closed'}, {'id': 1406046112, 'number': 14, 'closed': datetime.datetime(2023, 6, 24, 12, 29, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 24, 9, 31, 38, tzinfo=datetime.timezone.utc), 'time_taken': 10700.0, 'time_delta': '2:58:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1405337720, 'number': 13, 'closed': datetime.datetime(2023, 6, 30, 12, 10, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 16, 55, 16, tzinfo=datetime.timezone.utc), 'time_taken': 587712.0, 'time_delta': '6 days, 19:15:12', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1402957094, 'number': 12, 'closed': datetime.datetime(2023, 6, 22, 8, 20, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 6, 51, 20, tzinfo=datetime.timezone.utc), 'time_taken': 5372.0, 'time_delta': '1:29:32', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1401261981, 'number': 11, 'closed': datetime.datetime(2023, 6, 21, 10, 28, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 8, 55, 34, tzinfo=datetime.timezone.utc), 'time_taken': 5551.0, 'time_delta': '1:32:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1399369758, 'number': 10, 'closed': datetime.datetime(2023, 6, 20, 8, 5, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 7, 39, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1548.0, 'time_delta': '0:25:48', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1396772856, 'number': 9, 'closed': datetime.datetime(2023, 6, 21, 10, 29, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 17, 13, 11, 19, tzinfo=datetime.timezone.utc), 'time_taken': 335908.0, 'time_delta': '3 days, 21:18:28', 'additions': 88, 'deletions': 0, 'state': 'closed'}, {'id': 1395116042, 'number': 8, 'closed': datetime.datetime(2023, 6, 16, 7, 0, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 5, 48, 15, tzinfo=datetime.timezone.utc), 'time_taken': 4316.0, 'time_delta': '1:11:56', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1394451711, 'number': 7, 'closed': datetime.datetime(2023, 6, 16, 5, 45, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 15, 16, 34, 9, tzinfo=datetime.timezone.utc), 'time_taken': 47460.0, 'time_delta': '13:11:00', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 1392823574, 'number': 6, 'closed': datetime.datetime(2023, 6, 15, 13, 29, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 14, 17, 31, 37, tzinfo=datetime.timezone.utc), 'time_taken': 71880.0, 'time_delta': '19:58:00', 'additions': 6931, 'deletions': 3777, 'state': 'closed'}, {'id': 1344500878, 'number': 5, 'closed': datetime.datetime(2023, 5, 15, 16, 36, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 9, 23, 26, 9, tzinfo=datetime.timezone.utc), 'time_taken': 493838.0, 'time_delta': '5 days, 17:10:38', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1343661890, 'number': 4, 'closed': datetime.datetime(2023, 5, 9, 23, 26, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 9, 12, 35, 14, tzinfo=datetime.timezone.utc), 'time_taken': 39078.0, 'time_delta': '10:51:18', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
