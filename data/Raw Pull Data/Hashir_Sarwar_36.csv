pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
426693547,Add support for setting counts in iOS push notifications,"This adds a new function `get_apns_badge_count()` to fetch count value for a user push notification and then sends that value with the APNs payload.

Once a message is read from the web app, the count is decremented accordingly and a push notification with `event: remove` is sent to the iOS clients.

Closes #10271",True,15179,https://api.github.com/repos/zulip/zulip/pulls/15179,https://github.com/zulip/zulip/pull/15179,closed,107,14,2,2,12,32,1,0,[{'name': 'size: XL'}],2020-06-02 16:22:30+00:00,2020-06-16 18:26:37+00:00,1217047.0,"14 days, 2:04:07","[{'comment_id': 434849793, 'comment_body': 'Note the comment: this codepath is for data sent by a very old Zulip server (sent to the bouncer, and here the bouncer is modernizing the format before passing it on its way to the device.)\r\n\r\nThose very old Zulip servers are by definition not getting this update. So they will not have a useful `badge` value and we should continue to handle them the way we have.\r\n', 'comment_created': datetime.datetime(2020, 6, 3, 20, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434852172, 'comment_body': 'This can be simplified -- no need to fetch the actual list when we just need the count.\r\n\r\nSee the discussion of `len()` at the top of this doc:\r\nhttps://docs.djangoproject.com/en/3.0/ref/models/querysets/\r\n', 'comment_created': datetime.datetime(2020, 6, 3, 21, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434855483, 'comment_body': 'I think this will double-count the messages in `message_ids`. Note the docstring on the caller, `handle_remove_push_notification`:\r\n\r\n    """"""This should be called when a message that had previously had a\r\n    mobile push executed is read.  [...]\r\n\r\nSo at this point these messages are already read, and should be out of the count in the first place.\r\n', 'comment_created': datetime.datetime(2020, 6, 3, 21, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434856031, 'comment_body': 'No plural -- this returns one badge count.', 'comment_created': datetime.datetime(2020, 6, 3, 21, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 434863689, 'comment_body': ""This `flags=` condition doesn't do the right thing at all.\r\n\r\nTake a look at the one place we currently use this flag, which is in `do_clear_mobile_push_notifications_for_ids`, the function that causes `remove` notification messages to get sent. (This query kind of looks like you already based it on that code, in which case take another look.)\r\n\r\n```python\r\n    filtered_message_ids = list(UserMessage.objects.filter(\r\n        message_id__in=message_ids,\r\n        user_profile=user_profile,\r\n    ).extra(\r\n        where=[UserMessage.where_active_push_notification()],\r\n    ).values_list('message_id', flat=True))\r\n```\r\n\r\nNotice the `where_active_push_notification`.\r\n\r\nThere is a reason it is that way and not this other way. If you take a look at the implementation of that method, and read the comments, they explain why.\r\n\r\nThis is kind of a tricky area and it's perfectly reasonable not to understand it on first look, even after reading those. #backend would be a good place to ask questions about it. What's not a good idea is to change it from one thing to another without understanding and without explaining why.\r\n"", 'comment_created': datetime.datetime(2020, 6, 3, 21, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 435122556, 'comment_body': ""I wonder why the tests passed despite this. That could be an indicator that there's something more we should be verifying in them (or need another test that sets up a different scenario which would make such an error demonstrate), because we'd definitely want to catch using an incorrect query with them."", 'comment_created': datetime.datetime(2020, 6, 4, 9, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 435221342, 'comment_body': '@mateuszmandera +1. The function was giving the correct value for all the test cases and for all other cases that I tested manually.', 'comment_created': datetime.datetime(2020, 6, 4, 12, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 435223948, 'comment_body': ""@gnprice thanks for the review. I didn't understand completely what do you mean here. Can you please elaborate on this?"", 'comment_created': datetime.datetime(2020, 6, 4, 12, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 435507207, 'comment_body': 'Like I said in the top-level review comment, the unit tests in this PR certainly are inadequate.\r\n\r\nAnd that is a problem with this PR, not with the existing code. (Even if there are more tests it\'d be good for the existing code to have, as there probably are.) When you add new functionality, you should expect to add new tests for it. Saying ""but it passed all the existing tests"" is a bad excuse.\r\n\r\n@hashirsarwar The thing Mateusz is suggesting is a thing for *you* to do. :slightly_smiling_face: Please try doing it -- please take a look at the underlying code and try to work out what situation would test that difference, so that you can write a test that exercises that. If you need help understanding it (which, again, would be perfectly reasonable), ask questions in #backend and I or Tim or Steve or others will be glad to answer.\r\n', 'comment_created': datetime.datetime(2020, 6, 4, 19, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 435528345, 'comment_body': ""Looking closer, I think this code has approximately the right behavior. But this is one of the spots where I would have a lot more confidence in the first place if this PR added some appropriate unit tests! In particular:\r\n> tests where [the badge count] gets decreased to a number above 0.\r\n\r\nThe thing I was concerned about is whether the messages in `message_ids` were included in the count made by `get_apns_badge_count`, or whether they'd be already excluded from that count by this point. I thought they might be already excluded, but from looking closer at the whole sequence of how we manage this `active_mobile_push_notification` flag, I see they're still included.\r\n\r\nThere's still a potential race condition here, in the case where for whatever reason we handle the same message ID through this codepath twice. Then the second time through, this subtraction will be inappropriate because the given message ID will not be part of the count on the left. So a better way to write this is to have the count be taken using `.exclude(message_id__in=[message_ids])`. See docs:\r\nhttps://docs.djangoproject.com/en/3.0/topics/db/queries/#retrieving-specific-objects-with-filters\r\nhttps://docs.djangoproject.com/en/3.0/ref/models/querysets/#in\r\n\r\nFor more details, #backend is the best place to ask.\r\n"", 'comment_created': datetime.datetime(2020, 6, 4, 20, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 435532312, 'comment_body': ""Yeah, I know it requires more unit tests. I'll definitely work on it. I didn't say it as an excuse, I just agreed with what @mateuszmandera suggested to me. :slightly_smiling_face: \r\nThanks once again for the feedback @gnprice @mateuszmandera!"", 'comment_created': datetime.datetime(2020, 6, 4, 20, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 435535997, 'comment_body': 'Thanks for the explanation. That was really helpful!', 'comment_created': datetime.datetime(2020, 6, 4, 20, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 436206179, 'comment_body': ""`message_ids` seems like it'd be a more consistent name for this.  Also, what's the thinking around marshalling with a string join, rather than keeping it a list of integers (or if we have to, JSON dumping that?)"", 'comment_created': datetime.datetime(2020, 6, 5, 23, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436206589, 'comment_body': ""This deserves an explanatory comment on why we're excluding `read_message_ids` here."", 'comment_created': datetime.datetime(2020, 6, 5, 23, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436206752, 'comment_body': 'Our tests are going to need to have the badge count go above 1 in order to verify the logic correctly.', 'comment_created': datetime.datetime(2020, 6, 5, 23, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 436210577, 'comment_body': 'For better or worse, `zulip_message_ids` is the name we already use in the Android case. Here\'s the comment about why:\r\n```\r\n        \'zulip_message_id\': message.id,  # message_id is reserved for CCS\r\n```\r\n(And then in the `remove` case we matched that with `zulip_message_id` and later `zulip_message_ids`.)\r\n\r\nI don\'t know what ""CCS"" is. The comment apparently dates to 662edc255, from 2013. I suspect whatever it\'s about is no longer relevant; [in the current docs](https://firebase.google.com/docs/cloud-messaging/concept-options#data_messages) the reserved keys\r\n> include ""from"", ""notification,"" ""message_type"", or any word starting with ""google"" or ""gcm.""\r\n\r\nIt is awkward that, already in the non-`remove` case, we say `message_ids` over APNs but `zulip_message_ids` over FCM.\r\n', 'comment_created': datetime.datetime(2020, 6, 5, 23, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 436213047, 'comment_body': '> Also, what\'s the thinking around marshalling with a string join, rather than keeping it a list of integers (or if we have to, JSON dumping that?)\r\n\r\nThis is also what we already do in the Android / FCM case. With FCM, the data we provide for the actual message as transmitted consists of [key-value pairs](https://firebase.google.com/docs/cloud-messaging/concept-options), and they aren\'t 100% unambiguous about this but that sounds to me like the values are strings. So even if some layer in between would serialize automatically, I think it\'s best to choose the serialization explicitly to avoid confusion.\r\n\r\nWith APNs, the payload is [""a JSON dictionary""](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification). The same doc goes on to say ""Your custom keys must have values with primitive types, such as dictionary, array, string, number, or Boolean"", so oh, OK, only ""primitive types""... but wait, what\'s ""dictionary"" and ""array"" doing there, doesn\'t that mean the opposite? A link leads to [this doc](https://developer.apple.com/documentation/usernotifications/unnotificationcontent/1649869-userinfo) for how it shows up in Swift at the client, and that says the data must be ""property-list types—that is, they must be types that can be serialized into the property-list format"", which [turns out to](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/PropertyLists/AboutPropertyLists/AboutPropertyLists.html#//apple_ref/doc/uid/10000048i-CH3-54303) roughly coincide with what you can put in JSON. I think the bottom line is *probably* that it\'s arbitrary JSON, and there\'s some confusion in the writing of these docs.\r\n\r\nGiven that, I\'d be inclined to leave it as a list in the APNs case, and let it get automatically serialized and deserialized as JSON.\r\n', 'comment_created': datetime.datetime(2020, 6, 6, 0, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 436214769, 'comment_body': '> I don\'t know what ""CCS"" is. The comment apparently dates to [662edc2](https://github.com/zulip/zulip/commit/662edc2558447ba5d5ba8ae9c7f918c7e70dd459), from 2013. I suspect whatever it\'s about is no longer relevant;\r\n\r\nOh wow, some traces on the web (like [this Haskell library doc](http://hackage.haskell.org/package/push-notify-ccs-0.1.0.1/docs/Network-PushNotify-Ccs.html)) suggest it was an old name for [the XMPP protocol for](https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref) talking to what\'s now FCM.\r\n\r\nAnd when I was looking at the docs a few minutes ago, that was in fact the one place that I spotted references to `message_id` as a special name!\r\n>  message_id\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Required, string\r\n> This parameter uniquely identifies a message in an XMPP connection.\r\n\r\nSo, that\'s probably it. Apparently in 2013 the way we sent notification messages to Google (and presumably at the time the preferred, latest way to do it) was over XMPP.\r\n', 'comment_created': datetime.datetime(2020, 6, 6, 0, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 436272704, 'comment_body': ""> What's not a good idea is to change it from one thing to another without understanding and without explaining why.\r\n\r\nI didn't take the code and change it on my own, though. If you look at the [issue](https://github.com/zulip/zulip/issues/10271) itself, Tim already suggested from where to take the code from i.e `get_mobile_push_notification_ids(user_profile)` which is a test function and I used the same function previously."", 'comment_created': datetime.datetime(2020, 6, 6, 14, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 436897410, 'comment_body': '> where to take the code from i.e `get_mobile_push_notification_ids(user_profile)` which is a test function and I used the same function\r\n\r\nInteresting, thanks.\r\n\r\nIn general it\'s always a good idea to look for where something is used in non-test code, because test code can often do things that wouldn\'t be a good idea to do in the actual app. That\'s why when I searched for uses of this flag while reviewing this PR, I didn\'t even particularly notice that test function, and described `do_clear_mobile_push_notifications_for_ids` as ""the one place we currently use this flag"".\r\n\r\nHere, it would probably be good to add a small commit editing that test function to use `where_active_push_notification` too. That way it\'s consistent with the app code and avoids potentially setting a bad example for the next person.\r\n', 'comment_created': datetime.datetime(2020, 6, 8, 18, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 436899484, 'comment_body': ""As I said in my original review, there needs to be a test where the count gets decreased without yet decreasing all the way to 0. Otherwise we're not really testing some of the complexity here.\r\n"", 'comment_created': datetime.datetime(2020, 6, 8, 18, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 436905702, 'comment_body': 'This doesn\'t really explain *why* we do this; it just repeats *what* the code says.\r\n\r\nHere\'s an explanation of the ""why"":\r\n\r\n```python\r\n    # ...\r\n    ).exclude(\r\n        # If we\'ve just marked some messages as read, they\'re still\r\n        # marked as having active notifications; we\'ll clear that flag\r\n        # only after we\'ve sent that update to the devices.  So we need\r\n        # to exclude them explicitly from the count.\r\n        message_id__in=read_messages_ids\r\n    ).count()\r\n```\r\n\r\nNote also that it\'s a code comment, not a docstring. Docstrings are appropriate for explaining the interface of a function; this is really about its implementation, which is better as a comment.\r\n', 'comment_created': datetime.datetime(2020, 6, 8, 18, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 436960409, 'comment_body': ""That makes sense. I'll add a commit for that shortly. Thanks."", 'comment_created': datetime.datetime(2020, 6, 8, 19, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 439636505, 'comment_body': ""A small tweak: the relationships between all these numeric constants aren't obvious on a quick scan of this code, without reading it more carefully. So this would be clearer if that were made explicit: pull out the number of messages as a local variable, and then say like `num_messages - i - 1` for the last assert (and `num_messages` for both the setup and the first assert.)\r\n\r\nSimilarly for the other half of this test below.\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 20, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 439917310, 'comment_body': ""Can we remove the mocking of `get_base_payload` in a prep commit, and just call the real `get_base_payload`?  I think it makes the below tests a lot more confusing to not have the actual payload there, but instead this `gcm: True` thing, especially as we're adding the Apple case.."", 'comment_created': datetime.datetime(2020, 6, 15, 3, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439917683, 'comment_body': ""@gnprice do we need the two lists hack for remove notifications here?  I would imagine that the Apple client code will never have a version that looks at `zulip_message_id` and not `zulip_message_ids`.\r\n\r\n(And do we want to just call it `mesasge_ids`?  I think that's a better name)"", 'comment_created': datetime.datetime(2020, 6, 15, 3, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439918079, 'comment_body': 'Oh, in fact, the `zulip_message_id` here is actually a bug in the test, caused by reuse of the mocked `get_base_payload` response dictionary that I just complained about above.  So that was never intentional or even present in the real API!\r\n\r\nI think maybe `zulip_message_ids` makes sense for compatibility with the Android naming, after a bit more thought?\r\n', 'comment_created': datetime.datetime(2020, 6, 15, 3, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439918260, 'comment_body': ""Same testing setup comments as above; remove the `get_base_payload` mocking to make this test work properly; right now it's verifying wrong output when the code is actually correct."", 'comment_created': datetime.datetime(2020, 6, 15, 3, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439918512, 'comment_body': ""I think it'd be better to just make 2 stream mention messages in that first list, above, rather than 5 PMs, rather than having this semi-duplicated block of code."", 'comment_created': datetime.datetime(2020, 6, 15, 3, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 440533519, 'comment_body': '> I think maybe `zulip_message_ids` makes sense for compatibility with the Android naming, after a bit more thought?\r\n\r\nYeah, I think so.', 'comment_created': datetime.datetime(2020, 6, 16, 1, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 440630483, 'comment_body': 'Sorry, I meant 3 PMs and 2 stream message mentions, not to delete the PMs; can you adjust this?.', 'comment_created': datetime.datetime(2020, 6, 16, 7, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 440972325, 'comment_body': '@timabbott done. Kindly have a look.', 'comment_created': datetime.datetime(2020, 6, 16, 16, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}]","[{'commit_sha': '8173f4efe806059e0c3901537410f9f825911f21', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c4c2c812a565e32178ca5e041d05b582c4e189', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
431270261,push_notifications: Store tokens locally even when bouncer is used.,"This makes the system store and track PushDeviceToken objects on the local Zulip server when using the push notifications bouncer and includes tests for this.

This is something we need to implement end-to-end encryption for push notifications (#6954). We'll add the encryption key as an additional property on the local PushDeviceToken object.",False,15261,https://api.github.com/repos/zulip/zulip/pulls/15261,https://github.com/zulip/zulip/pull/15261,closed,92,31,2,1,4,2,1,0,[{'name': 'size: XL'}],2020-06-08 16:52:38+00:00,2020-06-18 01:46:08+00:00,809610.0,"9 days, 8:53:30","[{'comment_id': 436854594, 'comment_body': 'I have split `test_push_api()` into `test_push_api_error_handling()` and `test_push_api_add_and_remove_device_tokens()` to test adding and removing tokens in detail for both local and remote servers.', 'comment_created': datetime.datetime(2020, 6, 8, 16, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 437058197, 'comment_body': ""Can you make this two lists, `no_bouncer_requests` and `bouncer_requests`?  I think that'd be a lot more readable than cutting the list at 2 elements repeatedly."", 'comment_created': datetime.datetime(2020, 6, 8, 23, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'b3431e97237fae3bf02f1341546ea8b391d7a5f6', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
428748766,Add end-to-end encryption for push notifications,Closes #6954.,False,15229,https://api.github.com/repos/zulip/zulip/pulls/15229,https://github.com/zulip/zulip/pull/15229,closed,426,26,11,6,9,50,2,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}]",2020-06-05 20:48:31+00:00,2024-01-15 01:50:43+00:00,113893332.0,"1318 days, 5:02:12","[{'comment_id': 449750853, 'comment_body': 'While key collisions might be incredibly rare, I think we should add a bit of code to provide a 100% guarantee that they will never happen. To do this we should make sure that no PushDeviceToken in the database has the generated key, and if it does then we should generate a new one and check again, and so on until we indeed have a unique key (ideally we would never have to generate a second key because of how rare key collisions across 128 bits will be).', 'comment_created': datetime.datetime(2020, 7, 4, 8, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449751037, 'comment_body': 'Are we going to use this method often? If so maybe we should construct an index on `token` in the `PushDeviceToken` table.', 'comment_created': datetime.datetime(2020, 7, 4, 8, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449771823, 'comment_body': 'Um, why do we have a separate `chr(200)` (È) here? Is it to test the character encoding? If so can you use something like `data = ""les données secrètes""` so we can directly see that we want to use characters outside of the traditional ASCII character set?', 'comment_created': datetime.datetime(2020, 7, 4, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449772784, 'comment_body': 'I think it would be a good idea to explicitly mention that we want to encode the data in UTF-8. I mean by [default](https://docs.python.org/3/library/stdtypes.html#str.encode) it will be UTF-8 anyways, but I think it would be better if we were explicit about it.', 'comment_created': datetime.datetime(2020, 7, 4, 13, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449772977, 'comment_body': 'Similar to the above suggestion, maybe it would be better to be explicit with the character encoding to use when decoding.', 'comment_created': datetime.datetime(2020, 7, 4, 13, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449773403, 'comment_body': 'Can you add a comment above this type better explaining it? For example, what will the `Dict[str, Any]` actually represent? This way one would not have to look into its usage to figure it out.', 'comment_created': datetime.datetime(2020, 7, 4, 13, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449775168, 'comment_body': 'This type seems kind of unnecessary...', 'comment_created': datetime.datetime(2020, 7, 4, 13, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449792997, 'comment_body': ""Actually, I don't see this method being used anywhere, nor do I really see a need for it. Maybe you added it in foresight but never actually needed it later? If so we should remove this and the corresponding test."", 'comment_created': datetime.datetime(2020, 7, 4, 18, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449833244, 'comment_body': 'Also explicitly specify the decoding character encoding here please.', 'comment_created': datetime.datetime(2020, 7, 5, 4, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449833258, 'comment_body': 'And here too.', 'comment_created': datetime.datetime(2020, 7, 5, 4, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 449833875, 'comment_body': ""Maybe we don't need to add a new type like this since it's quite simple?"", 'comment_created': datetime.datetime(2020, 7, 5, 4, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 450023405, 'comment_body': '@hashirsarwar if you want to fix that test failure that you\'ve been facing you\'ll need to change this line to:\r\n```python3\r\n\'encrypted\': ujson.encode(encrypted),\r\n```\r\n\r\nTake a quick look at `send_analytics_to_remote_server` from `zerver/lib/remote_server.py` for why I\'m suggesting this. Also, if you haven\'t already, also take a look at the [discussion](https://chat.zulip.org/#narrow/stream/3-backend/topic/potential.20send_to_push_bouncer.20bug) I had with Anders and Steve on  CZO).\r\n\r\n*Sidenote*: TBH this feels more like a quick fix. I expected `send_json_to_push_bouncer` to properly json encode the data and send it. Instead I get this rather complicated traceback:\r\n```\r\nFAIL: test_push_bouncer_api (zerver.tests.test_push_notifications.PushBouncerNotificationTest)\r\n...\r\n  File ""/srv/zulip/zerver/lib/push_notifications.py"", line 436, in add_push_device_token\r\n    send_json_to_push_bouncer(\'POST\', \'push/register\', post_data)\r\n  File ""/srv/zulip/zerver/lib/remote_server.py"", line 101, in send_json_to_push_bouncer\r\n    extra_headers={""Content-type"": ""application/json""},\r\n  File ""/srv/zulip/zerver/lib/remote_server.py"", line 59, in send_to_push_bouncer\r\n    headers=headers)\r\n  File ""/usr/lib/python3.6/unittest/mock.py"", line 939, in __call__\r\n    return _mock_self._mock_call(*args, **kwargs)\r\n  File ""/usr/lib/python3.6/unittest/mock.py"", line 1005, in _mock_call\r\n    result = effect(*args, **kwargs)\r\n  File ""/srv/zulip/zerver/tests/test_push_notifications.py"", line 116, in bounce_request\r\n    subdomain=\'\')\r\n  File ""/srv/zulip/zerver/lib/test_classes.py"", line 528, in uuid_post\r\n    return self.client_post(*args, **kwargs)\r\n  File ""/srv/zulip/zerver/lib/test_helpers.py"", line 327, in wrapper\r\n    result = f(self, url, info, **kwargs)\r\n  File ""/srv/zulip/zerver/lib/test_classes.py"", line 240, in client_post\r\n    result = django_client.post(url, info, **kwargs)\r\n  File ""/srv/zulip-py3-venv/lib/python3.6/site-packages/django/test/client.py"", line 543, in post\r\n    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)\r\n  File ""/srv/zulip-py3-venv/lib/python3.6/site-packages/django/test/client.py"", line 354, in post\r\n    post_data = self._encode_data(data, content_type)\r\n  File ""/srv/zulip-py3-venv/lib/python3.6/site-packages/django/test/client.py"", line 313, in _encode_data\r\n    return encode_multipart(BOUNDARY, data)\r\n  File ""/srv/zulip-py3-venv/lib/python3.6/site-packages/django/test/client.py"", line 194, in encode_multipart\r\n    for (key, value) in data.items():\r\nAttributeError: \'str\' object has no attribute \'items\'\r\n```\r\n\r\nWhen I did a bit of print-debugging to check the headers at different parts of the request (during the test) it seems like the `Content-Type` header was being overwritten leading Django to raise this error. In fact, it seems like none of the headers that we set in `send_to_push_bouncer` area actually being sent because when I print (request.headers) under `add_apns_device_token` I don\'t see the right `User-Agent` nor the right `Content-Type`. So this might be worth investigating. @timabbott do you, off the top of your head, have any idea of what might be happening here?', 'comment_created': datetime.datetime(2020, 7, 6, 7, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 452425782, 'comment_body': 'Can you add a small comment here about how the reason the key is not included is because `PUSH_NOTIFICATION_ENCRYPTION` is initially set to `False`?', 'comment_created': datetime.datetime(2020, 7, 9, 18, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 452436540, 'comment_body': 'Um, when exactly would such a situation ever arise? Could you add a small comment explaining the background for when this condition would occur?', 'comment_created': datetime.datetime(2020, 7, 9, 19, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 452436987, 'comment_body': 'This should be figured out before merging.', 'comment_created': datetime.datetime(2020, 7, 9, 19, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 453144570, 'comment_body': ""If there are some devices but they're all encrypted, then this defeats the purpose of the `if`.\r\n"", 'comment_created': datetime.datetime(2020, 7, 11, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 453144877, 'comment_body': ""The `if` here has no effect at all, and just makes the code more complicated.\r\n\r\nThe existing conditionals `if apple_devices` and `if android_devices` should really be removed too -- that would make both this code and the zilencer view simpler, and would help with the new complexity that this PR has to add. If you *just* remove them I think that will cause trouble, but it's easy to fix: each of these functions should just make sure that if it's given an empty list of devices, it does nothing.\r\n\r\nThat would be good to do as a small commit at the start of the branch.\r\n"", 'comment_created': datetime.datetime(2020, 7, 11, 2, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 480505671, 'comment_body': ""It'd be really nice if these tests verified the format of the encrypted payloads being sent to APNS / GCM; specifically, I'd like the test to really clearly verify exactly what fields are sent outside the encrypted blob."", 'comment_created': datetime.datetime(2020, 9, 1, 0, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 480506302, 'comment_body': ""Maybe worth adding a comment here that we can send all the unencrypted notices to the third-party API with all the user's devices in a single request, but encrypted ones need to be one-per-device, and that's why we have this structure."", 'comment_created': datetime.datetime(2020, 9, 1, 0, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 480508470, 'comment_body': 'Can you explain this test a bit more?', 'comment_created': datetime.datetime(2020, 9, 1, 0, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 480512138, 'comment_body': ""Also, we should extend this test to take the verified encrypted payload sent via the push notifications bouncer, captures what the device would receive, and decrypts that using a function we write that is basically intended as sample code for what we'll ask the mobile app developers to write, and returns the exact payload that was sent to the unencrypted endpoint.\r\n\r\n(Basically confirming that one can reverse the encryption transformation that we apply on the client side).\r\n\r\nOne detail that I'm not sure how we should be handling is the question of how the device-side code will know which Zulip realm (and thus encryption key) sent the notification if it is registered for notifications with multiple realms (and thus, critically, which decryption key to use to decrypt the notice).  We may need to extend the protocol to handle that; but before we do so we should write this test in a way that supports that idea."", 'comment_created': datetime.datetime(2020, 9, 1, 0, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 480513200, 'comment_body': 'I think we might be better off using a `TextField` so that we have flexibility if we later change the key algorithm.', 'comment_created': datetime.datetime(2020, 9, 1, 0, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 483910123, 'comment_body': 'Why pass around the key as base64 instead of simply bytes?', 'comment_created': datetime.datetime(2020, 9, 5, 4, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 483910193, 'comment_body': ""Similarly -- why base64 here?\r\n\r\nI'd prefer to handle things in their natural form, and encode as base64 or whatever only where needed."", 'comment_created': datetime.datetime(2020, 9, 5, 4, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 483910398, 'comment_body': ""What's the motivation for this bit?\r\n\r\nIf we generate the same key twice... something is very badly wrong already.\r\n"", 'comment_created': datetime.datetime(2020, 9, 5, 4, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 483911085, 'comment_body': 'This will leave completely unencrypted every field in the payload other than `content`.\r\n\r\nThat includes... `content_truncated`, which has the first 200 characters or so of `content` -- often the whole thing. Not to mention `sender_full_name`, and some others which may also be private information.\r\n\r\nThat leaves the encryption almost completely useless, and is not acceptable.\r\n\r\nDo not copy the plaintext payload wholesale into the ""encrypted"" payload. Instead, the only fields that appear unencrypted in the final payload should be fields that must be there; and they should be named explicitly in the source code here. Encrypt all the rest as a single blob of JSON.\r\n', 'comment_created': datetime.datetime(2020, 9, 5, 4, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 483911444, 'comment_body': 'Why a loop here? We [discussed this in chat](https://chat.zulip.org/#narrow/stream/3-backend/topic/end-to-end.20encryption/near/931345) in a previous round. A single request with an `encrypted_payloads` field would make the code simpler. It would also make it easier to manage the case where a Zulip server for some reason ends up with lots of device records for a given user.\r\n', 'comment_created': datetime.datetime(2020, 9, 5, 5, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 483911633, 'comment_body': ""This would be a lot simpler as a list comprehension:\r\n```python\r\n  return [(device, encrypt_payload(payload, device.notification_encryption_key))\r\n          for device in devices]\r\n```\r\n\r\nThen, further, it'd simplify things to inline that in the two places it's used. More explicit, too, because `encrypt_payload` could be replaced by the specific function to be used in each case.\r\n"", 'comment_created': datetime.datetime(2020, 9, 5, 5, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 483911788, 'comment_body': ""As a matter of style and code clarity, if we do have this loop, the code would be easier to read if it's simply inlined at the one place this function is used -- this function doesn't really add anything. (But as mentioned in a separate comment, we should arrange the internal API so that we don't need this loop at all.)\r\n"", 'comment_created': datetime.datetime(2020, 9, 5, 5, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 483915128, 'comment_body': ""@gnprice I wasn't able to find a straightforward way to store the encryption key as raw bytes in the database -- is there any?"", 'comment_created': datetime.datetime(2020, 9, 5, 5, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 483916318, 'comment_body': 'We also need to send this information i.e. `encrypted_data` and `nonce` to other devices via bouncer. Sending these fields as bytes will cause the following exception when we try to covert `encrypted_payloads` to JSON format.\r\n```\r\nTypeError: Type is not JSON serializable: bytes\r\n```\r\n\r\nAm I missing something?', 'comment_created': datetime.datetime(2020, 9, 5, 6, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 483917213, 'comment_body': 'I think that `AESGCM.generate_key` can generate the same keys twice though the chances are very little. We are not generating the encryption key through our code, instead we are relying on `AESGCM.generate_key` to do so.\r\n\r\nThis change was suggested by @Hypro999 in a [resolved conversation](https://github.com/zulip/zulip/pull/15229#discussion_r449750853) -- so he might want to add something here.', 'comment_created': datetime.datetime(2020, 9, 5, 6, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 483917578, 'comment_body': ""I don't really have anything to add here. This was just added as extremely defensive code. We can remove this if we want to, since it involves a DB query for a highly unlikely event."", 'comment_created': datetime.datetime(2020, 9, 5, 6, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 484580584, 'comment_body': 'See Django docs:\r\nhttps://docs.djangoproject.com/en/3.1/ref/models/fields/#binaryfield\r\n', 'comment_created': datetime.datetime(2020, 9, 7, 22, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 484580861, 'comment_body': ""Right. At the moment when we're sending them over the network, they need to be encoded somehow, and base64 is a fine choice there. But the best point to do that encoding is just before we send them over the network, so that inside our code they can have their natural form, which is a plain `bytes`.\r\n"", 'comment_created': datetime.datetime(2020, 9, 7, 22, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 484588120, 'comment_body': ""Yes, let's take this out.\r\n\r\nIn the absence of a bug in how we generate the key (including in the system's random-number generator which we'll be relying on), the probability of a collision is far smaller than the probability of, say, the system going completely wild due to a hardware failure. Even if there are a billion records here, the probability of a collision is less than 1/2^68. The probability that the machine will take a direct hit from a meteor is several orders of magnitude bigger than that.\r\n\r\nIf OTOH there *is* a bug in the key generation... this would not be an effective way to detect that (and the Zulip app in general isn't the right layer to be attempting to defend against such a thing anyway.)\r\n"", 'comment_created': datetime.datetime(2020, 9, 7, 23, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486000999, 'comment_body': ""I guess that approach would end up having us send a single large payload, rather than several small ones, in that buggy case?  Probably better since there's a high minimum latency, assuming we don't risk hitting a low limit for how large a payload can be."", 'comment_created': datetime.datetime(2020, 9, 10, 0, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 486001050, 'comment_body': 'agreed', 'comment_created': datetime.datetime(2020, 9, 10, 0, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 486001287, 'comment_body': 'Yeah, this sort of bug is also why I want to change the tests to make it super clear what the encrypted payloads worked.  (See my comments above).', 'comment_created': datetime.datetime(2020, 9, 10, 0, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 486001386, 'comment_body': 'Agreed.', 'comment_created': datetime.datetime(2020, 9, 10, 0, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 486135894, 'comment_body': ""Ah I see, this isn't in the path leading to the bouncer and is only used when actually talking to FCM. I was thinking of the request the app server makes to the bouncer.\r\n\r\nWhen actually talking to FCM or APNs, we have to make a separate request per distinct notification-message payload anyway, which means one per device when they're encrypted. So the loop here is appropriate -- it should just be inlined rather than being its own function, as mentioned in another comment.\r\n"", 'comment_created': datetime.datetime(2020, 9, 10, 7, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486136535, 'comment_body': 'This would be much simpler and clearer as a list comprehension, inlined at its one call site.\r\n', 'comment_created': datetime.datetime(2020, 9, 10, 7, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486136870, 'comment_body': 'It looks like this is completely missing the data for Apple devices.', 'comment_created': datetime.datetime(2020, 9, 10, 7, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486144802, 'comment_body': ""This code can be made a lot simpler by taking out the `if device_map[token].kind == …` conditional and producing just a single list. Then it can just be a list comprehension, which can just be inlined at the one place it's used.\r\n\r\nThen instead of having separate functions `send_android_push_notifications` and `send_apple_push_notifications` which are just simple loops that are very similar to each other, those two can be a single loop, with the `if device.kind == …` conditional inside that loop.\r\n"", 'comment_created': datetime.datetime(2020, 9, 10, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486145703, 'comment_body': 'This new value has a quite different meaning from the old value called `android_devices`. It should therefore have a different name which expresses that different meaning.\r\n\r\n(Same for `apple_devices` below.)\r\n\r\nAlternatively, this list comprehension could go directly in the argument to the function call, rather than give it a name at all.', 'comment_created': datetime.datetime(2020, 9, 10, 8, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486149306, 'comment_body': 'I don\'t like this name; it sounds like it\'s saying the device is encrypted (whatever that would mean).\r\n\r\nOne good name could be `encrypt_notifications` -- same as in the request the client makes when registering its token.\r\n\r\nAnother could be `require_encryption` -- reflecting the effect of the flag, which is to say ""don\'t send plaintext messages here.""\r\n', 'comment_created': datetime.datetime(2020, 9, 10, 8, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486165365, 'comment_body': ""This is a bad API. The request explicitly asked us to encrypt notifications... but we're deciding here *not* to encrypt the notifications, and we're returning success anyway. That is dangerous. It's reminiscent of HTTP libraries that don't check SSL/TLS certificates:\r\nhttp://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf\r\n\r\nIf the client explicitly asked us to encrypt notifications, and we decide we might not encrypt them after all, we should absolutely not go create a device record so that we'll start sending unencrypted notifications. We therefore should have already returned an error before this point.\r\n\r\nI'm not sure it makes sense to have an absolute instruction like that in the request, though, given that some servers will not offer encrypted notifications. So instead of `encrypt_notifications`, we might have a parameter like `prefer_encrypted_notifications`, or `allow_encrypted_notifications`."", 'comment_created': datetime.datetime(2020, 9, 10, 8, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 486167278, 'comment_body': ""Relatedly, I'm doubtful of the semantics of `settings.PUSH_NOTIFICATION_ENCRYPTION` as given in this PR. It's not described anywhere, and I am not convinced the details of it make a lot of sense.\r\n\r\nIn particular, once this is deployed with PUSH_NOTIFICATION_ENCRYPTION left false, I believe it will rapidly become impossible to change that setting to true without breaking notifications completely for some users.\r\n\r\nWe should back up and discuss these different settings -- at the server level, at the device-record level, and in the request the client makes. There should be some idea of what they each mean -- and how they interact -- and that idea should be written down somewhere. Then we can discuss that idea and make sure it makes sense, before we commit to an implementation of it.\r\n"", 'comment_created': datetime.datetime(2020, 9, 10, 8, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 487532153, 'comment_body': ""@gnprice can you have a look at the test failure caused due to this change?\r\n\r\nWe are separating encrypted and unencrypted devices based on whether they have `notification_encryption_key` or not. So in the case of encrypted devices, we are 100% sure that `notification_encryption_key` is non-null but when this is passed as function parameter, `mypy` expects this to be `Optional[str]`. What's the best way to treat this as `str`?"", 'comment_created': datetime.datetime(2020, 9, 13, 13, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 488289730, 'comment_body': ""This name is confusing -- this field represents whether notifications ARE encrypted; the push bouncer shouldn't care.  We should add a comment explaining it and also pick a better name.  (I'm not sure actually what this is needed for?)"", 'comment_created': datetime.datetime(2020, 9, 14, 23, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'c2391774363806ce3df7bb52a43424b1ea603530', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4beac1711c22d179627f772dbc027bbd7d9914c', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74896869fc1eba02987a8408d7a59884c2d15195', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a195c78ce51db0c89b10012fbed42c5eadd12cfb', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ed21e9fb4a15ed1d3c403fb511235f7837bb47', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4879f7190b578db8dc0517a98a669eb698fa3f4a', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
434014600,Avoid sending avatar URLs of long term idle users to clients,"This adds a new property `exclude_old_users_avatars` which is sent from clients to the server.

The purpose is to avoid sending avatar URLs of the long term idle users to the clients regardless of the `client_gravatar` value. This will reduce the user payload size even if email visibility is limited to admins.

This approach will be more efficient especially for realms with 10,000+ users like chat.zulip.org.

Fixes #15287.

~Marked as WIP because this PR requires one more commit to enable this feature on the web client.~",False,15359,https://api.github.com/repos/zulip/zulip/pulls/15359,https://github.com/zulip/zulip/pull/15359,closed,107,33,9,2,4,14,2,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}]",2020-06-13 14:39:31+00:00,2020-06-19 04:50:31+00:00,483060.0,"5 days, 14:11:00","[{'comment_id': 439829142, 'comment_body': ""It's quite odd to see that you've added this parameter in this commit but then used it in a later one. For example, when reviewing, I saw that you changed the function call in multiple places so I was anticipated this new variable to be used in this commit itself. When you introduce a new variable into a function for a given commit, please make sure to actually use it in the same commit."", 'comment_created': datetime.datetime(2020, 6, 14, 13, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 439829550, 'comment_body': 'Instead of moving this chunk to below `result = dict(...)` can you keep it at the same place where `avatar_url = ...` originally was and continue using the `avatar_url` variable?', 'comment_created': datetime.datetime(2020, 6, 14, 13, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 439831984, 'comment_body': 'I think that the more readable way to do this would be to just loop over `raw_users` once and then inside the loop, if `user in long_term_idle_users` then `assertNone(...)` else `assertIsNotNode(...)`.', 'comment_created': datetime.datetime(2020, 6, 14, 13, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 439832671, 'comment_body': 'In the first commit you wrote:\r\n\r\n> When the value is True, we will not send avatar URLs of the long term idle users to the clients regardless of the `client_gravatar` value.\r\n\r\nThen can you explain this comment w.r.t the above quoted commit message? Maybe you should test this with both `client_gravatar=False` and `client_gravatar=True` to make sure that the both results are correct and the same.', 'comment_created': datetime.datetime(2020, 6, 14, 13, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 439833001, 'comment_body': ""I think that you should remove this chunk entierly since it's not really testing anything and since it seems like a partial and incomplete duplicate of the test you added below (`test_exclude_old_users_avatars`). It feels like you meant to remove this once you added `test_exclude_old_users_avatars` but then forgot?"", 'comment_created': datetime.datetime(2020, 6, 14, 14, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 439837575, 'comment_body': ""Oh wait, was this the test for `apply_events` that you were talking about? If so you did this wrong.\r\n\r\nThe lambda function that you pass to `do_test` should be the event you want to check for consistency around - it's the action that you want to verify doesn't make the normal state and hybrid state different. Here you've made that action `do_change_avatar_fields` which is not related to changing `long_term_idle`. This is what makes it so that you're not testing anything new here (you're actually testing the wrong thing). The function you pass should be toggling the `long_term_idle` of the user (which you tried to did preemptively).\r\n\r\nAlso, if you want to make `long_term_idle=True` for everyone then shouldn't `avatar_url` be checking None instead of string? In which case `('avatar_url', check_string)` is wrong.\r\n\r\nOn a somewhat related note, Take a quick look at [this](https://github.com/zulip/zulip/pull/12554#issuecomment-500949159) comment about some performance optimizations that `do_test` uses. It's something that you should keep in mind for any future tests you add involving `do_test` I remember that it drove me crazy last summer (that and Python's default mutable arguments feature)."", 'comment_created': datetime.datetime(2020, 6, 14, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 439889098, 'comment_body': ""`client_gravatar=True` would set all user's `avatar_url=None` and most of them might not be long term idle. That's why I set the client_gravatar to False while testing. I have updated the test where I am testing both the cases now i.e. `client_gravatar=False` and `client_gravatar=True`.\r\n\r\nI think you misunderstood the commit message here, I meant that the server will not send URLs for **long term idle** users regardless of **their** client_gravatar value. My wording may be confusing in the commit message, so I have rephrased it in the updated commit. :)"", 'comment_created': datetime.datetime(2020, 6, 15, 1, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 439903382, 'comment_body': 'So I have looked into it further, and I think that there is no event that triggers the soft deactivation of users. Can we still add tests for this?', 'comment_created': datetime.datetime(2020, 6, 15, 2, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 439913181, 'comment_body': 'The whitespace is weird/inconsistent here, and also you should have a trailing comma here.', 'comment_created': datetime.datetime(2020, 6, 15, 3, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439913266, 'comment_body': ""Is there any need to add something here?  I'd have expected the default to apply without any need to patch this."", 'comment_created': datetime.datetime(2020, 6, 15, 3, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439913835, 'comment_body': ""Correct, soft deactivation is, by design, a concept that is invisible to clients. \r\n\r\nWe're breaking that rule a little bit with this change, but the API structure is that the server is allowed to choose freely which users to send avatar URLs for, and which to not do so, entirely at its discretion if the client declares it has support for this.  (And we may later change the algorithm; `long_term_idle` just seems like a good place to start)"", 'comment_created': datetime.datetime(2020, 6, 15, 3, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 439914740, 'comment_body': ""@timabbott I haven't added a default value for this parameter, that's why we need it here. Should I add it?"", 'comment_created': datetime.datetime(2020, 6, 15, 3, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 439915444, 'comment_body': '@hashirsarwar I think that you can write a test method to manually soft deactivate certain users by just setting `long_term_idle` to `True`.', 'comment_created': datetime.datetime(2020, 6, 15, 3, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 442576282, 'comment_body': 'yeah, agreed', 'comment_created': datetime.datetime(2020, 6, 19, 0, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'ac8ced6558a4f7bc62472426619d322206e20eff', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa911052d28eb11de91fa3a9d2f9185388806913', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
439195662,Add `user_avatar_url_field_optional` support to the web client,"In #15359, we introduced a new client capability to avoid unreasonable network bandwidth consumed sending avatar URLs of long term idle users in organizations with 10,000s members.

This PR enables this feature and adds its support to the web client.
",False,15546,https://api.github.com/repos/zulip/zulip/pulls/15546,https://github.com/zulip/zulip/pull/15546,closed,29,7,5,1,3,0,1,0,[{'name': 'size: M'}],2020-06-24 13:07:53+00:00,2020-06-24 17:25:51+00:00,15478.0,4:17:58,[],"[{'commit_sha': 'fe9c2db10944b3a329ff2c752fa80b41a2af9dde', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
370024828,Fix behaviour of PM list with deactivated user.,"Previously, clicking a deactivated user in the PM list caused the list to collapse without any explanation.

The PR fixes this in the following steps:
* Allow the deactivated user's pills in the compose box like any other user.
* Customize deactivated user's pill and add a tooltip to visually distinguish it from the active users (as shown in the screenshot).
* If someone tries to send a message to the deactivated user, show a compose error (as shown in the screenshot).

Fixes #13766.

**Testing Plan:**
Unit tests.

**Screenshot:**
![Screenshot from 2020-07-29 06-31-11](https://user-images.githubusercontent.com/45683359/88746327-bcf07a00-d165-11ea-9afe-5c76de380be1.png)
",False,13795,https://api.github.com/repos/zulip/zulip/pulls/13795,https://github.com/zulip/zulip/pull/13795,closed,131,20,8,4,11,2,2,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}]",2020-02-02 15:52:54+00:00,2021-06-24 22:22:54+00:00,43914600.0,"508 days, 6:30:00","[{'comment_id': 377932439, 'comment_body': ""I think this isn't the right change -- won't this produce broken results with invalid (as opposed to deactivated) emails?  I think we want it to check the users are valid, just with a looser check that allows deactivated users."", 'comment_created': datetime.datetime(2020, 2, 11, 22, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 379390445, 'comment_body': ""@timabbott thanks for the feedback. I've made some changes. Kindly review them."", 'comment_created': datetime.datetime(2020, 2, 14, 11, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}]","[{'commit_sha': 'ef6b8849f077c273bda21326e4fe7c15bb6c4254', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c6274549d94ba00f8623bfdd72697a42363cd95', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '120dce06ceaa93653bdc57506f0024b8554aa050', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '045b3e8cbdd19387928c25f981a8ac62aed34409', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
457469929,typeahead: Fix binding of event handler to `blur` event.,"This was a bug in 0f76e98 that prevented typeahead from closing unless we select an option from it.

Fixes #15905 and #15907.
",True,15945,https://api.github.com/repos/zulip/zulip/pulls/15945,https://github.com/zulip/zulip/pull/15945,closed,1,1,1,1,0,0,0,0,[],2020-07-28 00:25:18+00:00,2020-07-28 00:52:21+00:00,1623.0,0:27:03,[],"[{'commit_sha': '52545b91fa39defbff0a3881a8a8008e9b1000db', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
463094796,markdown: Use thumbor for inline URL preview images.,"This serves the following two purposes:

* Serving all image content over HTTPS, even if the original image
was hosted on HTTP. This is important to avoid mixed-content warnings
from browsers, and does have some real security benefit in protecting
our users from malicious content.

* Minimizing potentially unnecessary bandwidth that might be used in
communication between the Zulip server and clients. Uploading large
photos could result in a bad experience for users with a slow network
connection.

Fixes #14754.

<!-- What's this PR for?  (Just a link to an issue is fine.) -->


**Testing Plan:** <!-- How have you tested? -->


**GIFs or Screenshots:** <!-- If a UI change.  See:
  https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
  -->


<!-- Also be sure to make clear, coherent commits:
  https://zulip.readthedocs.io/en/latest/contributing/version-control.html
  -->
",False,16037,https://api.github.com/repos/zulip/zulip/pulls/16037,https://github.com/zulip/zulip/pull/16037,closed,10,3,2,1,5,4,5,0,"[{'name': 'bug'}, {'name': 'area: markdown'}, {'name': 'priority: high'}, {'name': 'size: S'}, {'name': 'has conflicts'}]",2020-08-05 01:43:39+00:00,2024-01-14 23:56:24+00:00,108684765.0,"1257 days, 22:12:45","[{'comment_id': 465927439, 'comment_body': 'URL parameters need to be encoded: `urlunsplit(("""", """", ""/thumbnail"", urlencode({""url"": img_link, ""size"": ""thumbnail""}), """"))`', 'comment_created': datetime.datetime(2020, 8, 5, 18, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 465931272, 'comment_body': 'Also doesn’t this need to be conditional on `settings.THUMBNAIL_IMAGES`?', 'comment_created': datetime.datetime(2020, 8, 5, 18, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 465936183, 'comment_body': 'Yeah, this should use the same logic that uses camo or thumbor depending on configuration.', 'comment_created': datetime.datetime(2020, 8, 5, 18, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 466082293, 'comment_body': 'Resolved, thanks. Kindly have a look @timabbott.', 'comment_created': datetime.datetime(2020, 8, 6, 0, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}]","[{'commit_sha': 'cd1968692c7505ef9ce0113261584bfee2c88925', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
466660645,markdown: Add support for new syntax `![title](url)`.,"This adjusts our existing model to make use of the `![title](url)` markdown syntax, to display images without including its title in the message.",False,16117,https://api.github.com/repos/zulip/zulip/pulls/16117,https://github.com/zulip/zulip/pull/16117,open,55,42,5,3,4,4,2,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}]",2020-08-12 10:02:27+00:00,,0.0,,"[{'comment_id': 474303749, 'comment_body': 'This approach confuses me. There should be no `div`s involved. CommonMark converts\r\n\r\n```md\r\nHere is an image: ![title](url)\r\n```\r\n\r\ninto\r\n\r\n```html\r\n<p>Here is an image: <img src=""url"" title=""title"" /></p>\r\n```\r\n\r\nand that is exactly what I want us to do. If we have legacy code that tries to stick `div`s into this for some legacy reason, that code should be mercilessly deleted. What am I missing?', 'comment_created': datetime.datetime(2020, 8, 20, 22, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 474326518, 'comment_body': 'Makes sense, thank you.', 'comment_created': datetime.datetime(2020, 8, 20, 23, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 475705918, 'comment_body': ""Instead of calling it `index` (which I understand is what the upstream code calls it), I think that it might be better to call it `match_end` since that's more indicative of what it is."", 'comment_created': datetime.datetime(2020, 8, 24, 15, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}, {'comment_id': 475711555, 'comment_body': ""Might want to add a comment here about why the `and len(e) == 0` check was added because of the new `ImageInlineProcessor` span trick. I see this as something I'd be curious about if I didn't see this PR."", 'comment_created': datetime.datetime(2020, 8, 24, 15, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hypro999', 'type': 'User'}]","[{'commit_sha': 'ef3633b6e5bb7a8f552384d98a1397747d0cbe02', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '424d7f15d528aaaf63183c968f4d727323e8fd88', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb848e7f65ef3736e28580b099fb162b326f85d', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
475692273,Remove preview for a specific URL in a message,"The pull request adds the support to allow a user to remove previews for any URLs in editable messages.

**Note:** This is based on @punchagan's old PR #12816 with some required updates.

### GIF:
![ezgif com-video-to-gif](https://user-images.githubusercontent.com/45683359/91926001-b23e7d00-ecef-11ea-8735-54532329f2f4.gif)

",False,16231,https://api.github.com/repos/zulip/zulip/pulls/16231,https://github.com/zulip/zulip/pull/16231,open,454,23,26,4,3,0,2,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}]",2020-08-29 00:33:27+00:00,,0.0,,[],"[{'commit_sha': '282dda6bf52a7f1311e93521e87befbf20485897', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb64d1814b50c22ec9efedd6c82799c451f167d', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46faad536e4c7ac9ca12f6ab3c06ea9a7ccbb664', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd322ea67033fea3d0cd80c34e5d8ab37428daea', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4
411285181,Store server feature level in Redux,"Following [#14658](https://github.com/zulip/zulip/pull/14658), we now obtain `feature level` from Zulip server and store it in Redux. This is designed to provide a simple way for mobile apps to decide whether the server supports a given feature or API change.

Closes #4049.",True,4079,https://api.github.com/repos/zulip/zulip-mobile/pulls/4079,https://github.com/zulip/zulip-mobile/pull/4079,closed,151,57,10,13,26,34,0,0,[],2020-04-30 09:24:04+00:00,2020-09-19 00:31:36+00:00,12236852.0,"141 days, 15:07:32","[{'comment_id': 418167400, 'comment_body': 'Here, where we represent our knowledge of what data the server will provide, let\'s make this an optional property, with a comment on what server version starts including this — like `external_authentication_methods`, above.\r\n\r\nIn the `zulip_version` case, it wasn\'t optional, because servers have provided this forever.\r\n\r\nThe `zulipVersion` property on `Account` needed to allow an ""empty"" value (currently `undefined`/missing, and likely `null` in the future, as I mentioned [here](https://github.com/zulip/zulip-mobile/pull/4079#issuecomment-621983344)) because of something that could happen when the user updates the mobile app. The `accounts` bit of state is saved to disk (see that \'accounts\' is in the `storeKeys` array, in `src/boot/store.js`). If a user updates from a mobile app version that doesn\'t store `zulipVersion` in Redux, to a version that does, then the locally saved account data  won\'t include `zulipVersion`. Rather than writing a migration (example migrations are in that same file) that assigns an arbitrary server version to the `zulipVersion` field, we allow the field to be empty, handling that case when necessary. It then gets filled with a correct value on REALM_ADD and REALM_INIT.\r\n\r\nThis reason still applies to `zulipFeatureLevel` on `Account`, but there\'s the additional reason, as mentioned above, that some servers just won\'t give us that data. I think, for simplicity, that the empty value in both of these scenarios can be spelled the same, as `null`. The effect is the same: the value isn\'t there, and knowing which scenario applies won\'t get a useful value to us any faster. (But @gnprice may have different ideas, as [noted](https://github.com/zulip/zulip-mobile/pull/4079#issuecomment-621983344)).\r\n\r\nBecause of the missing-from-server case, I think we\'ll want to make the REALM_INIT and REALM_ADD actions have `zulipFeatureLevel: number | null`, just like `Account`. Then, when you dispatch the action (or, arguably, in `accountsReducer`), use `null` for an empty value.', 'comment_created': datetime.datetime(2020, 4, 30, 17, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 418194991, 'comment_body': ""The data in this file should be as uninteresting as possible – and this strikes me as a *very* interesting value.\r\n\r\n(Also, it's inconsistent with the `zulipVersion` above it.)"", 'comment_created': datetime.datetime(2020, 4, 30, 18, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rk-for-zulip', 'type': 'User'}, {'comment_id': 418201986, 'comment_body': 'Nit in commit message for\r\n\r\ne3ca22d27 RealmScreen: Include feature level from /server_settings in REALM_ADD.\r\n\r\n""accessed""', 'comment_created': datetime.datetime(2020, 4, 30, 18, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 418202607, 'comment_body': 'Nit in commit message for \r\n\r\n16b81678a realmActions: Include feature level in REALM_INIT.\r\n\r\n""already""', 'comment_created': datetime.datetime(2020, 4, 30, 18, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 418204017, 'comment_body': ""Nits in commit message for \r\n\r\nf514d6a7a Account type: Add a property featureLevel.\r\n\r\n- Let's be consistent with the name we use as an identifier in the code: `zulipFeatureLevel`. Setting it off with \\`backticks\\` would also make it quite clear (in addition to the camelCase capitalization, which you've used) that we're referring to an identifier. There may be other places where this comment applies.\r\n- Let's specify that we're talking about `loginSuccess` and `realmAdd` in the `accountsReducer`, not the functions with the same names in `accountActions`. It could be inferred from context and by looking at the diff, but it's nice to help the reader avoid ambiguity."", 'comment_created': datetime.datetime(2020, 4, 30, 18, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 418358874, 'comment_body': 'indicating', 'comment_created': datetime.datetime(2020, 5, 1, 0, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 418363632, 'comment_body': ""I think in this case if the server's response has no `zulip_feature_level`, I'd like to translate that to a value of 0 in the `Account` object. The reason is that if the server doesn't send a `zulip_feature_level`, that means it predates the introduction of that property -- which can be treated implicitly as one very broad feature level of 0, preceding the first explicit feature level which is 1.\r\n\r\nWe'll still need the type to be `number | null`, I think, to handle accounts that the user hasn't looked at since upgrading to an app version that stores feature levels.\r\n"", 'comment_created': datetime.datetime(2020, 5, 1, 0, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 418363832, 'comment_body': 'See docs at https://zulipchat.com/api/server-settings :\r\n> New in Zulip 2.2. We recommend using an implied value of 0 for Zulip servers that do not send this field.\r\n', 'comment_created': datetime.datetime(2020, 5, 1, 0, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 418365612, 'comment_body': 'Hmm, that does make sense, as the most correct way to follow that recommendation in the docs! So, I think that would mean the `REALM_INIT` and `REALM_ADD` actions have `zulipFeatureLevel: number`, while the `Account` still has `number | null`, right?', 'comment_created': datetime.datetime(2020, 5, 1, 0, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 418367637, 'comment_body': ""Instead of getting this from `serverSettings`, we can actually get the `zulip_feature_level` from `initData`. (Which also means this line and `realmInit` don't need to change, and the reducer can handle it.)\r\n\r\nThat's preferable because for recent servers we can also get `zulip_version` from there. We make this `getServerSettings` call here because older servers send `zulip_version` only there; but `zulip_feature_level` appears on the same set of servers in one place as the other place.\r\n\r\nThis isn't well documented, sorry -- not your fault that you didn't spot that. The initial data from `/register` is one of the couple of main areas we haven't yet covered in our API documentation.\r\n"", 'comment_created': datetime.datetime(2020, 5, 1, 0, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 418367811, 'comment_body': 'Yep, that sounds right!', 'comment_created': datetime.datetime(2020, 5, 1, 0, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 418368051, 'comment_body': ""Err, actually `REALM_ADD` will, as it's based on `server_settings` -- but `REALM_INIT` only needs the initial data from `/register` (its `realm` property), per my [other comment](https://github.com/zulip/zulip-mobile/pull/4079#discussion_r418367637) just now."", 'comment_created': datetime.datetime(2020, 5, 1, 0, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 418370942, 'comment_body': ""> Instead of getting this from `serverSettings`, we can actually get the `zulip_feature_level` from `initData`. (Which also means this line and `realmInit` don't need to change, and the reducer can handle it.)\r\n\r\nMm, nice! Perhaps the type `InitialDataRealm`, or even `InitialDataBase`, might be a place to add `zulip_feature_level?: number`, to make `initData` well-typed?"", 'comment_created': datetime.datetime(2020, 5, 1, 1, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 418712392, 'comment_body': ""@ray-kraesig thanks for the feedback. I've updated the PR."", 'comment_created': datetime.datetime(2020, 5, 1, 20, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 421865454, 'comment_body': 'nit: blank line to separate comment from item above (and ditto in `getServerSettings.js`)', 'comment_created': datetime.datetime(2020, 5, 8, 0, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421866013, 'comment_body': 'Instead of the implementation, we can link to the docs:\r\n  https://zulipchat.com/api/server-settings\r\n\r\nImplementation works as a substitute when there are no docs, but docs are better when available.\r\n', 'comment_created': datetime.datetime(2020, 5, 8, 0, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421866122, 'comment_body': 'nit: ""Older servers don\'t send this"" is redundant -- ""Added in ..."" covers that information\r\n', 'comment_created': datetime.datetime(2020, 5, 8, 0, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421866757, 'comment_body': ""This one isn't strictly documented (the initial data is pretty undocumented in general); but this field is exactly like the corresponding one in `/server_settings`. So I think the cleanest thing is to say that -- like\r\n> Same meaning as in the `server_settings` response:\r\n>   https://zulipchat.com/api/server-settings\r\n"", 'comment_created': datetime.datetime(2020, 5, 8, 0, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421867266, 'comment_body': ""This change and the one in `initialDataTypes` are best squashed -- they're two manifestations of the same thing.\r\n\r\nA good prefix for the commit-message summary would be `api types:`.\r\n"", 'comment_created': datetime.datetime(2020, 5, 8, 0, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421867948, 'comment_body': 'See discussion above: https://github.com/zulip/zulip-mobile/pull/4079#discussion_r418365612\r\n\r\nThis can be 0 instead of null, and then the action type can have just `zulipFeatureLevel: number`.\r\n', 'comment_created': datetime.datetime(2020, 5, 8, 0, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421868704, 'comment_body': 'An intermediate commit makes this always `null`, and a fixup commit at the end fills in the proper logic. Instead it can get the proper logic to begin with -- just squash the fixup commit into the other one.\r\n', 'comment_created': datetime.datetime(2020, 5, 8, 0, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 421869306, 'comment_body': ""This is what we should do, but we don't in this version :wink: \r\n\r\nLook at where `zulipVersion` gets set in `accountsReducer.js`. One of those is missing the corresponding logic for `zulipFeatureLevel`.\r\n"", 'comment_created': datetime.datetime(2020, 5, 8, 0, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 423264770, 'comment_body': 'bump -- same thing in `getServerSettings.js`', 'comment_created': datetime.datetime(2020, 5, 11, 19, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 423265700, 'comment_body': ""This is still missing. Without it, this PR really doesn't work properly at all.\r\n\r\nSearch for `zulipVersion` in `accountsReducer.js`. Notice the mention in the `realmInit` function. That's how we implement this part:\r\n> and again from /register when setting up an event queue.\r\n\r\nWe need to do the same for `zulipFeatureLevel`.\r\n"", 'comment_created': datetime.datetime(2020, 5, 11, 19, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 451827999, 'comment_body': ""**edit**: Hmm, I'm actually not sure about what I say below the line (below); @gnprice said, at https://github.com/zulip/zulip-mobile/pull/4079#discussion_r418363632, that the `null` does serve a purpose:\r\n\r\n> We'll still need the type to be `number | null`, I think, to handle accounts that the user hasn't looked at since upgrading to an app version that stores feature levels.\r\n\r\nI think maybe it's clearer if we do forget about `null`, and just make a migration that sets it to `0` if it's not there? Maybe not, or maybe I'm missing something. 🙂 What do you think, Greg?\r\n\r\n-----\r\n\r\nThis should also be just `number`, to add to the changes you've made in response to https://github.com/zulip/zulip-mobile/pull/4079#discussion_r421867948.\r\n\r\nCorrespondingly, the `zulipFeatureLevel` param in `makeAccount` in exampleData.js should be `zulipFeatureLevel?: number`. The `?` is so that we can call `makeAccount` without deciding what `zulipFeatureLevel` we want; the implementation can pick one."", 'comment_created': datetime.datetime(2020, 7, 8, 21, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 451832120, 'comment_body': ""Instead of getting the `zulipFeatureLevel` from whatever the state was before this action, we should grab it from the new data that the action includes. In particular, I believe, `action.data.zulip_feature_level`.\r\n\r\nSince `action.data` comes from the server data without really being transformed, `zulip_feature_level` might be undefined because the server doesn't provide it. So, we'll want to do, e.g., `action.data.zulip_feature_level ?? 0`."", 'comment_created': datetime.datetime(2020, 7, 8, 21, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 451832540, 'comment_body': '**edit**: See above.\r\n\r\nA few places still have `zulipFeatureLevel: null` being set explicitly (you can search for these); they should be replaced with `zulipFeatureLevel: 0`.', 'comment_created': datetime.datetime(2020, 7, 8, 21, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 451940921, 'comment_body': ""> I think maybe it's clearer if we do forget about `null`, and just make a migration that sets it to `0` if it's not there?\r\n\r\nThe thing about that is that it might not be true -- the server might actually be on a later version, and we just haven't talked to it since upgrading the app to a version that stores the feature level.\r\n\r\nIn particular, anyone using the app now with chat.zulip.org or zulip.com has accounts where we've recorded that the version is 3.0-rc1-something. There is no server (unless a willfully confusing one) that has that version number and a feature level of 0.\r\n"", 'comment_created': datetime.datetime(2020, 7, 9, 3, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 452366955, 'comment_body': ""Ah, right—thanks for reminding me about that possibility. So my comments here should be disregarded, except:\r\n\r\nI think maybe we'll need a migration that sets it to `null` (otherwise it'll be treated as `undefined` for some time)? Something like:\r\n\r\n```javascript\r\n  // Accounts.zulipFeatureLevel is `number | null`\r\n  '14': state => ({\r\n    ...state,\r\n    accounts: state.accounts.map(a => ({\r\n      ...a,\r\n      zulipFeatureLevel: a.zulipFeatureLevel !== undefined ? a.zulipFeatureLevel : null,\r\n    })),\r\n  }),\r\n```"", 'comment_created': datetime.datetime(2020, 7, 9, 17, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 459144052, 'comment_body': ""Yeah, that looks right. We do need a migration, or else the `zulipFeatureLevel` property would be simply missing (contrary to what the type says.)\r\n\r\nThe code can be tightened a bit by using `??`:\r\n```\r\n  zulipFeatureLevel: a.zulipFeatureLevel ?? null\r\n```\r\n\r\n... Actually, better: it's impossible for `zulipFeatureLevel` to be present at this point. This migration runs only when we're processing data that was stored by an older version of the app that didn't know anything about `zulipFeatureLevel` here. So we can just say:\r\n```\r\n  zulipFeatureLevel: null\r\n```\r\nand that's clearer about about what's happening because it doesn't try to handle a situation that should be impossible.\r\n\r\n(Looking back at previous migrations, I see we did the redundant-conditional thing with the last two, oops.)\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459144292, 'comment_body': 'As mentioned at https://github.com/zulip/zulip-mobile/pull/4079#discussion_r459144052 , this can just be:\r\n```suggestion\r\n      zulipFeatureLevel: null,\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 23, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 459144650, 'comment_body': 'One thing that would help in these comments is that it\'s just as helpful (or almost as helpful) to know the *old* status of the bit of data in question as the new status.\r\n\r\nSo e.g. for this one: ""Added Accounts.zulipFeatureLevel as `number | null`""\r\n', 'comment_created': datetime.datetime(2020, 7, 22, 23, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 469810611, 'comment_body': ""I think changing `accountWithZulipVersion/accountWithoutZulipVersion` to a more general name `account1/account2` is better in terms of readability and coherence. Please tell me if you don't like this idea. :slightly_smiling_face: "", 'comment_created': datetime.datetime(2020, 8, 13, 9, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hashirsarwar', 'type': 'User'}, {'comment_id': 470166446, 'comment_body': 'I like it!', 'comment_created': datetime.datetime(2020, 8, 13, 18, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}]","[{'commit_sha': '3982909a0461eaaab4ace85dcbcfb0b310beabb2', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd200fc8acf3844d64548c14ede9d979383e02970', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e51c0fe0fe1c469b76cca69a0e3b650dd521a8b', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b058fa266881cf84570d6c9390c03eaabed15119', 'committer_username': 'hashirsarwar', 'committer_name': 'Hashir Sarwar', 'committer_email': 'hashirsarwarch@gmail.com', 'commit_date': datetime.datetime(2018, 12, 7, 8, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd666225bc230577008e7a42831173888530db395', 'committer_username': 'chrisbobbe', 'committer_name': 'Chris Bobbe', 'committer_email': 'cbobbe@zulip.com', 'commit_date': datetime.datetime(2016, 9, 17, 0, 25, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b7a4da059af6050d196c32b48d0617a61e86c0', 'committer_username': 'chrisbobbe', 'committer_name': 'Chris Bobbe', 'committer_email': 'cbobbe@zulip.com', 'commit_date': datetime.datetime(2016, 9, 17, 0, 25, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e865c5ca34c7f37d1abc7cfe9547d5d54cddf60', 'committer_username': 'chrisbobbe', 'committer_name': 'Chris Bobbe', 'committer_email': 'cbobbe@zulip.com', 'commit_date': datetime.datetime(2016, 9, 17, 0, 25, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3dc37ec0212ab27778e1fac5012a04bb31a3249', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc4c8fb69b6fa3c2c49cfe63e25a08a6591e8db', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df5725acf6e31b47aa402d39b42d545bb0cb28e', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8645eadda02a6571180fc96d97bc533c3abaab', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd11c3b40002f5f749587344aa03e38806e3ed917', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e122cfbef724b33309e784b6b4b5cbaf0fdbb083', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}]",Hashir Sarwar,45683359,hashirsarwarch@gmail.com,User,,42,,6,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7618,21016,375,1134,60300,2470,28,802,"[{'id': 475692273, 'number': 16231, 'closed': None, 'created': datetime.datetime(2020, 8, 29, 0, 33, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 454, 'deletions': 23, 'state': 'open'}, {'id': 466660645, 'number': 16117, 'closed': None, 'created': datetime.datetime(2020, 8, 12, 10, 2, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 55, 'deletions': 42, 'state': 'open'}, {'id': 463094796, 'number': 16037, 'closed': datetime.datetime(2024, 1, 14, 23, 56, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 1, 43, 39, tzinfo=datetime.timezone.utc), 'time_taken': 108684765.0, 'time_delta': '1257 days, 22:12:45', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 457469929, 'number': 15945, 'closed': datetime.datetime(2020, 7, 28, 0, 52, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 0, 25, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1623.0, 'time_delta': '0:27:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 439195662, 'number': 15546, 'closed': datetime.datetime(2020, 6, 24, 17, 25, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 13, 7, 53, tzinfo=datetime.timezone.utc), 'time_taken': 15478.0, 'time_delta': '4:17:58', 'additions': 29, 'deletions': 7, 'state': 'closed'}, {'id': 437516365, 'number': 15505, 'closed': None, 'created': datetime.datetime(2020, 6, 21, 8, 49, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 46, 'deletions': 23, 'state': 'open'}, {'id': 434014600, 'number': 15359, 'closed': datetime.datetime(2020, 6, 19, 4, 50, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 14, 39, 31, tzinfo=datetime.timezone.utc), 'time_taken': 483060.0, 'time_delta': '5 days, 14:11:00', 'additions': 107, 'deletions': 33, 'state': 'closed'}, {'id': 431270261, 'number': 15261, 'closed': datetime.datetime(2020, 6, 18, 1, 46, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 16, 52, 38, tzinfo=datetime.timezone.utc), 'time_taken': 809610.0, 'time_delta': '9 days, 8:53:30', 'additions': 92, 'deletions': 31, 'state': 'closed'}, {'id': 428748766, 'number': 15229, 'closed': datetime.datetime(2024, 1, 15, 1, 50, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 20, 48, 31, tzinfo=datetime.timezone.utc), 'time_taken': 113893332.0, 'time_delta': '1318 days, 5:02:12', 'additions': 426, 'deletions': 26, 'state': 'closed'}, {'id': 426693547, 'number': 15179, 'closed': datetime.datetime(2020, 6, 16, 18, 26, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 16, 22, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1217047.0, 'time_delta': '14 days, 2:04:07', 'additions': 107, 'deletions': 14, 'state': 'closed'}, {'id': 422656653, 'number': 15079, 'closed': datetime.datetime(2020, 6, 21, 1, 5, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 9, 49, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2301364.0, 'time_delta': '26 days, 15:16:04', 'additions': 22, 'deletions': 0, 'state': 'closed'}, {'id': 419566323, 'number': 15011, 'closed': datetime.datetime(2024, 1, 14, 23, 50, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 15, 11, 50, tzinfo=datetime.timezone.utc), 'time_taken': 115461495.0, 'time_delta': '1336 days, 8:38:15', 'additions': 282, 'deletions': 49, 'state': 'closed'}, {'id': 412252885, 'number': 14838, 'closed': datetime.datetime(2020, 5, 2, 22, 9, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 1, 18, 50, 40, tzinfo=datetime.timezone.utc), 'time_taken': 98335.0, 'time_delta': '1 day, 3:18:55', 'additions': 77, 'deletions': 2, 'state': 'closed'}, {'id': 405787822, 'number': 14658, 'closed': datetime.datetime(2020, 4, 21, 20, 42, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 2, 27, 46, tzinfo=datetime.timezone.utc), 'time_taken': 152100.0, 'time_delta': '1 day, 18:15:00', 'additions': 27, 'deletions': 3, 'state': 'closed'}, {'id': 403943557, 'number': 14591, 'closed': datetime.datetime(2020, 5, 8, 19, 57, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 15, 19, 21, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1989373.0, 'time_delta': '23 days, 0:36:13', 'additions': 1, 'deletions': 12, 'state': 'closed'}, {'id': 395583610, 'number': 14399, 'closed': None, 'created': datetime.datetime(2020, 3, 30, 11, 19, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 40, 'deletions': 105, 'state': 'open'}, {'id': 395079705, 'number': 14382, 'closed': datetime.datetime(2021, 4, 5, 17, 19, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 28, 11, 0, 25, tzinfo=datetime.timezone.utc), 'time_taken': 32249926.0, 'time_delta': '373 days, 6:18:46', 'additions': 108, 'deletions': 1, 'state': 'closed'}, {'id': 390778515, 'number': 14244, 'closed': datetime.datetime(2020, 4, 5, 20, 19, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 3, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1529026.0, 'time_delta': '17 days, 16:43:46', 'additions': 38, 'deletions': 25, 'state': 'closed'}, {'id': 387083801, 'number': 14179, 'closed': datetime.datetime(2020, 6, 21, 3, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 7, 29, 13, tzinfo=datetime.timezone.utc), 'time_taken': 8712896.0, 'time_delta': '100 days, 20:14:56', 'additions': 24, 'deletions': 1, 'state': 'closed'}, {'id': 382671756, 'number': 14091, 'closed': datetime.datetime(2020, 4, 15, 18, 20, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 23, 59, 47, tzinfo=datetime.timezone.utc), 'time_taken': 3781251.0, 'time_delta': '43 days, 18:20:51', 'additions': 181, 'deletions': 23, 'state': 'closed'}, {'id': 376833522, 'number': 13949, 'closed': datetime.datetime(2020, 4, 19, 22, 16, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 18, 21, 2, 45, tzinfo=datetime.timezone.utc), 'time_taken': 5274823.0, 'time_delta': '61 days, 1:13:43', 'additions': 32, 'deletions': 22, 'state': 'closed'}, {'id': 373169867, 'number': 13867, 'closed': datetime.datetime(2020, 2, 10, 22, 4, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 14, 37, tzinfo=datetime.timezone.utc), 'time_taken': 26843.0, 'time_delta': '7:27:23', 'additions': 0, 'deletions': 6, 'state': 'closed'}, {'id': 373150644, 'number': 13866, 'closed': datetime.datetime(2020, 2, 12, 19, 7, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 14, 1, 23, tzinfo=datetime.timezone.utc), 'time_taken': 191148.0, 'time_delta': '2 days, 5:05:48', 'additions': 40, 'deletions': 41, 'state': 'closed'}, {'id': 370024828, 'number': 13795, 'closed': datetime.datetime(2021, 6, 24, 22, 22, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 2, 15, 52, 54, tzinfo=datetime.timezone.utc), 'time_taken': 43914600.0, 'time_delta': '508 days, 6:30:00', 'additions': 131, 'deletions': 20, 'state': 'closed'}, {'id': 364450573, 'number': 13703, 'closed': datetime.datetime(2020, 1, 28, 0, 32, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 18, 13, 31, tzinfo=datetime.timezone.utc), 'time_taken': 800339.0, 'time_delta': '9 days, 6:18:59', 'additions': 25, 'deletions': 48, 'state': 'closed'}, {'id': 359773170, 'number': 13618, 'closed': datetime.datetime(2020, 1, 30, 21, 13, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 7, 0, 44, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2060942.0, 'time_delta': '23 days, 20:29:02', 'additions': 121, 'deletions': 21, 'state': 'closed'}, {'id': 357837550, 'number': 13585, 'closed': datetime.datetime(2020, 1, 7, 21, 24, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 29, 21, 8, 28, tzinfo=datetime.timezone.utc), 'time_taken': 778578.0, 'time_delta': '9 days, 0:16:18', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 343329889, 'number': 13421, 'closed': datetime.datetime(2019, 11, 20, 18, 49, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 20, 12, 26, 23, tzinfo=datetime.timezone.utc), 'time_taken': 22960.0, 'time_delta': '6:22:40', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 339688132, 'number': 13393, 'closed': datetime.datetime(2020, 5, 13, 16, 23, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 12, 1, 42, tzinfo=datetime.timezone.utc), 'time_taken': 15864088.0, 'time_delta': '183 days, 14:41:28', 'additions': 147, 'deletions': 0, 'state': 'closed'}, {'id': 335181963, 'number': 13352, 'closed': datetime.datetime(2019, 11, 1, 23, 40, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 31, 22, 12, 54, tzinfo=datetime.timezone.utc), 'time_taken': 91678.0, 'time_delta': '1 day, 1:27:58', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 335106631, 'number': 13351, 'closed': datetime.datetime(2019, 10, 31, 22, 14, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 31, 19, 29, 7, tzinfo=datetime.timezone.utc), 'time_taken': 9928.0, 'time_delta': '2:45:28', 'additions': 9, 'deletions': 9, 'state': 'closed'}]"
58298428,zulip-mobile,zulip/zulip-mobile,JavaScript,643,1274,36,96,10617,745,12,140,"[{'id': 411285181, 'number': 4079, 'closed': datetime.datetime(2020, 9, 19, 0, 31, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 30, 9, 24, 4, tzinfo=datetime.timezone.utc), 'time_taken': 12236852.0, 'time_delta': '141 days, 15:07:32', 'additions': 151, 'deletions': 57, 'state': 'closed'}, {'id': 358497088, 'number': 3748, 'closed': datetime.datetime(2020, 1, 14, 18, 18, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 1, 15, 27, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1133450.0, 'time_delta': '13 days, 2:50:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 350347421, 'number': 3714, 'closed': datetime.datetime(2019, 12, 31, 6, 42, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 7, 21, 4, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2021900.0, 'time_delta': '23 days, 9:38:20', 'additions': 39, 'deletions': 8, 'state': 'closed'}, {'id': 349042308, 'number': 3707, 'closed': datetime.datetime(2019, 12, 7, 10, 25, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 4, 18, 56, 44, tzinfo=datetime.timezone.utc), 'time_taken': 228528.0, 'time_delta': '2 days, 15:28:48', 'additions': 54, 'deletions': 13, 'state': 'closed'}]"
